/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { refundsCreateOrder } from "../../funcs/refundsCreateOrder.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CreateOrderRefundRequest$inboundSchema,
};

export const tool$refundsCreateOrder: ToolDefinition<typeof args> = {
  name: "refunds-create-order",
  description: `Create order refund

When using the Orders API, refunds should be made for a specific order.

If you want to refund arbitrary amounts, however, you can also use the [Create payment refund endpoint](create-refund) by creating a refund on the payment itself.

If an order line is still in the \`authorized\` state, it cannot be refunded. You should cancel it instead. Order lines that are \`paid\`, \`shipping\` or \`completed\` can be refunded.

> ðŸ”‘ Access with
>
> [API key](/reference/authentication)
>
> [Access token with **refunds.write**](/reference/authentication)`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await refundsCreateOrder(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
