/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientLinksCreate } from "../../funcs/clientLinksCreate.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CreateClientLinkRequest$inboundSchema.optional(),
};

export const tool$clientLinksCreate: ToolDefinition<typeof args> = {
  name: "client-links-create",
  description: `Create client link

Link a new or existing organization to your OAuth application, in effect creating a new client. The response contains a \`clientLink\` where you should redirect your customer to.

The \`clientLink\` URL behaves similar to the regular OAuth authorization URL. It supports the following parameters from the [Authorize](authorize) endpoint:

* \`client_id\`
* \`state\`
* \`approval_prompt\`
* \`scope\`

We recommend at least requesting the scopes \`onboarding.read onboarding.write\` this way.

Error handling is also dealt with similar to the [Authorize](authorize) endpoint: the customer is redirected back to your app's redirect URL with the \`error\` and \`error_description\` parameters added to the URL.

> ðŸ”‘ Access with
>
> [Access token with **clients.write**](/reference/authentication)`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await clientLinksCreate(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
