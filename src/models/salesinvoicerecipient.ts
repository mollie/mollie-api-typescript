/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export const SalesInvoiceRecipientType = {
  Consumer: "consumer",
  Business: "business",
} as const;
/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export type SalesInvoiceRecipientType = ClosedEnum<
  typeof SalesInvoiceRecipientType
>;

/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export const SalesInvoiceRecipientLocale = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
} as const;
/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export type SalesInvoiceRecipientLocale = ClosedEnum<
  typeof SalesInvoiceRecipientLocale
>;

export type SalesInvoiceRecipient = {
  /**
   * The type of recipient, either `consumer` or `business`. This will determine what further fields are
   *
   * @remarks
   * required on the `recipient` object.
   */
  type: SalesInvoiceRecipientType;
  /**
   * The title of the `consumer` type recipient, for example Mr. or Mrs..
   */
  title?: string | null | undefined;
  /**
   * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  givenName?: string | null | undefined;
  /**
   * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  familyName?: string | null | undefined;
  /**
   * The trading name of the `business` type recipient.
   */
  organizationName?: string | null | undefined;
  /**
   * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
   *
   * @remarks
   * has to be provided.
   */
  organizationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
   *
   * @remarks
   * has to be provided.
   */
  vatNumber?: string | null | undefined;
  /**
   * The email address of the recipient.
   */
  email: string;
  /**
   * The phone number of the recipient.
   */
  phone?: string | null | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | null | undefined;
  /**
   * A postal code.
   */
  postalCode: string;
  /**
   * The recipient's city.
   */
  city: string;
  /**
   * The recipient's region.
   */
  region?: string | null | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
  /**
   * The locale for the recipient, to be used for translations in PDF generation and payment pages.
   */
  locale: SalesInvoiceRecipientLocale;
};

/** @internal */
export const SalesInvoiceRecipientType$inboundSchema: z.ZodNativeEnum<
  typeof SalesInvoiceRecipientType
> = z.nativeEnum(SalesInvoiceRecipientType);

/** @internal */
export const SalesInvoiceRecipientType$outboundSchema: z.ZodNativeEnum<
  typeof SalesInvoiceRecipientType
> = SalesInvoiceRecipientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceRecipientType$ {
  /** @deprecated use `SalesInvoiceRecipientType$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceRecipientType$inboundSchema;
  /** @deprecated use `SalesInvoiceRecipientType$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceRecipientType$outboundSchema;
}

/** @internal */
export const SalesInvoiceRecipientLocale$inboundSchema: z.ZodNativeEnum<
  typeof SalesInvoiceRecipientLocale
> = z.nativeEnum(SalesInvoiceRecipientLocale);

/** @internal */
export const SalesInvoiceRecipientLocale$outboundSchema: z.ZodNativeEnum<
  typeof SalesInvoiceRecipientLocale
> = SalesInvoiceRecipientLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceRecipientLocale$ {
  /** @deprecated use `SalesInvoiceRecipientLocale$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceRecipientLocale$inboundSchema;
  /** @deprecated use `SalesInvoiceRecipientLocale$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceRecipientLocale$outboundSchema;
}

/** @internal */
export const SalesInvoiceRecipient$inboundSchema: z.ZodType<
  SalesInvoiceRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SalesInvoiceRecipientType$inboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: SalesInvoiceRecipientLocale$inboundSchema,
});

/** @internal */
export type SalesInvoiceRecipient$Outbound = {
  type: string;
  title?: string | null | undefined;
  givenName?: string | null | undefined;
  familyName?: string | null | undefined;
  organizationName?: string | null | undefined;
  organizationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
  email: string;
  phone?: string | null | undefined;
  streetAndNumber: string;
  streetAdditional?: string | null | undefined;
  postalCode: string;
  city: string;
  region?: string | null | undefined;
  country: string;
  locale: string;
};

/** @internal */
export const SalesInvoiceRecipient$outboundSchema: z.ZodType<
  SalesInvoiceRecipient$Outbound,
  z.ZodTypeDef,
  SalesInvoiceRecipient
> = z.object({
  type: SalesInvoiceRecipientType$outboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: SalesInvoiceRecipientLocale$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceRecipient$ {
  /** @deprecated use `SalesInvoiceRecipient$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceRecipient$inboundSchema;
  /** @deprecated use `SalesInvoiceRecipient$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceRecipient$outboundSchema;
  /** @deprecated use `SalesInvoiceRecipient$Outbound` instead. */
  export type Outbound = SalesInvoiceRecipient$Outbound;
}

export function salesInvoiceRecipientToJSON(
  salesInvoiceRecipient: SalesInvoiceRecipient,
): string {
  return JSON.stringify(
    SalesInvoiceRecipient$outboundSchema.parse(salesInvoiceRecipient),
  );
}

export function salesInvoiceRecipientFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoiceRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoiceRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoiceRecipient' from JSON`,
  );
}
