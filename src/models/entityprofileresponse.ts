/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export const EntityProfileResponseStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Blocked: "blocked",
} as const;
/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export type EntityProfileResponseStatus = ClosedEnum<
  typeof EntityProfileResponseStatus
>;

/**
 * The status of the requested changes.
 */
export const ReviewStatus = {
  Pending: "pending",
  Rejected: "rejected",
} as const;
/**
 * The status of the requested changes.
 */
export type ReviewStatus = ClosedEnum<typeof ReviewStatus>;

/**
 * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
 *
 * @remarks
 * automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
 * `null` in test mode.
 */
export type Review = {
  /**
   * The status of the requested changes.
   */
  status?: ReviewStatus | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityProfileResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  dashboard?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  chargebacks?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  methods?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payments?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  refunds?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  checkoutPreviewUrl?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityProfileResponse = {
  /**
   * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: Mode | undefined;
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or
   *
   * @remarks
   * application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are
   *
   * @remarks
   * allowed.
   */
  website?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside,
   *
   * @remarks
   * in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the
   *
   * @remarks
   * [business category list](common-data-types#business-category) for all possible options.
   */
  businessCategory?: string | undefined;
  /**
   * The profile status determines whether the profile is able to receive live payments.
   *
   * @remarks
   *
   * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
   * * `verified`: The profile has been verified and can be used to create live payments and test payments.
   * * `blocked`: The profile is blocked and can no longer be used or changed.
   */
  status?: EntityProfileResponseStatus | undefined;
  /**
   * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
   *
   * @remarks
   * automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
   * `null` in test mode.
   */
  review?: Review | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityProfileResponseLinks | undefined;
};

/** @internal */
export const EntityProfileResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof EntityProfileResponseStatus
> = z.nativeEnum(EntityProfileResponseStatus);

/** @internal */
export const EntityProfileResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof EntityProfileResponseStatus
> = EntityProfileResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityProfileResponseStatus$ {
  /** @deprecated use `EntityProfileResponseStatus$inboundSchema` instead. */
  export const inboundSchema = EntityProfileResponseStatus$inboundSchema;
  /** @deprecated use `EntityProfileResponseStatus$outboundSchema` instead. */
  export const outboundSchema = EntityProfileResponseStatus$outboundSchema;
}

/** @internal */
export const ReviewStatus$inboundSchema: z.ZodNativeEnum<typeof ReviewStatus> =
  z.nativeEnum(ReviewStatus);

/** @internal */
export const ReviewStatus$outboundSchema: z.ZodNativeEnum<typeof ReviewStatus> =
  ReviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewStatus$ {
  /** @deprecated use `ReviewStatus$inboundSchema` instead. */
  export const inboundSchema = ReviewStatus$inboundSchema;
  /** @deprecated use `ReviewStatus$outboundSchema` instead. */
  export const outboundSchema = ReviewStatus$outboundSchema;
}

/** @internal */
export const Review$inboundSchema: z.ZodType<Review, z.ZodTypeDef, unknown> = z
  .object({
    status: ReviewStatus$inboundSchema.optional(),
  });

/** @internal */
export type Review$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const Review$outboundSchema: z.ZodType<
  Review$Outbound,
  z.ZodTypeDef,
  Review
> = z.object({
  status: ReviewStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Review$ {
  /** @deprecated use `Review$inboundSchema` instead. */
  export const inboundSchema = Review$inboundSchema;
  /** @deprecated use `Review$outboundSchema` instead. */
  export const outboundSchema = Review$outboundSchema;
  /** @deprecated use `Review$Outbound` instead. */
  export type Outbound = Review$Outbound;
}

export function reviewToJSON(review: Review): string {
  return JSON.stringify(Review$outboundSchema.parse(review));
}

export function reviewFromJSON(
  jsonString: string,
): SafeParseResult<Review, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Review$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Review' from JSON`,
  );
}

/** @internal */
export const EntityProfileResponseLinks$inboundSchema: z.ZodType<
  EntityProfileResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  dashboard: Url$inboundSchema.optional(),
  chargebacks: Url$inboundSchema.optional(),
  methods: Url$inboundSchema.optional(),
  payments: Url$inboundSchema.optional(),
  refunds: Url$inboundSchema.optional(),
  checkoutPreviewUrl: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityProfileResponseLinks$Outbound = {
  self?: Url$Outbound | undefined;
  dashboard?: Url$Outbound | undefined;
  chargebacks?: Url$Outbound | undefined;
  methods?: Url$Outbound | undefined;
  payments?: Url$Outbound | undefined;
  refunds?: Url$Outbound | undefined;
  checkoutPreviewUrl?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityProfileResponseLinks$outboundSchema: z.ZodType<
  EntityProfileResponseLinks$Outbound,
  z.ZodTypeDef,
  EntityProfileResponseLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  dashboard: Url$outboundSchema.optional(),
  chargebacks: Url$outboundSchema.optional(),
  methods: Url$outboundSchema.optional(),
  payments: Url$outboundSchema.optional(),
  refunds: Url$outboundSchema.optional(),
  checkoutPreviewUrl: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityProfileResponseLinks$ {
  /** @deprecated use `EntityProfileResponseLinks$inboundSchema` instead. */
  export const inboundSchema = EntityProfileResponseLinks$inboundSchema;
  /** @deprecated use `EntityProfileResponseLinks$outboundSchema` instead. */
  export const outboundSchema = EntityProfileResponseLinks$outboundSchema;
  /** @deprecated use `EntityProfileResponseLinks$Outbound` instead. */
  export type Outbound = EntityProfileResponseLinks$Outbound;
}

export function entityProfileResponseLinksToJSON(
  entityProfileResponseLinks: EntityProfileResponseLinks,
): string {
  return JSON.stringify(
    EntityProfileResponseLinks$outboundSchema.parse(entityProfileResponseLinks),
  );
}

export function entityProfileResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityProfileResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityProfileResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityProfileResponseLinks' from JSON`,
  );
}

/** @internal */
export const EntityProfileResponse$inboundSchema: z.ZodType<
  EntityProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$inboundSchema.optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: EntityProfileResponseStatus$inboundSchema.optional(),
  review: z.lazy(() => Review$inboundSchema).optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => EntityProfileResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityProfileResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | undefined;
  countriesOfActivity?: Array<string> | undefined;
  businessCategory?: string | undefined;
  status?: string | undefined;
  review?: Review$Outbound | undefined;
  createdAt?: string | undefined;
  _links?: EntityProfileResponseLinks$Outbound | undefined;
};

/** @internal */
export const EntityProfileResponse$outboundSchema: z.ZodType<
  EntityProfileResponse$Outbound,
  z.ZodTypeDef,
  EntityProfileResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$outboundSchema.optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: EntityProfileResponseStatus$outboundSchema.optional(),
  review: z.lazy(() => Review$outboundSchema).optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => EntityProfileResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityProfileResponse$ {
  /** @deprecated use `EntityProfileResponse$inboundSchema` instead. */
  export const inboundSchema = EntityProfileResponse$inboundSchema;
  /** @deprecated use `EntityProfileResponse$outboundSchema` instead. */
  export const outboundSchema = EntityProfileResponse$outboundSchema;
  /** @deprecated use `EntityProfileResponse$Outbound` instead. */
  export type Outbound = EntityProfileResponse$Outbound;
}

export function entityProfileResponseToJSON(
  entityProfileResponse: EntityProfileResponse,
): string {
  return JSON.stringify(
    EntityProfileResponse$outboundSchema.parse(entityProfileResponse),
  );
}

export function entityProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<EntityProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityProfileResponse' from JSON`,
  );
}
