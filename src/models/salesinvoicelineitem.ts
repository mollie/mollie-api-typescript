/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SalesInvoiceDiscount,
  SalesInvoiceDiscount$inboundSchema,
  SalesInvoiceDiscount$Outbound,
  SalesInvoiceDiscount$outboundSchema,
} from "./salesinvoicediscount.js";

export type SalesInvoiceLineItem = {
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The vat rate to be applied to this line item.
   */
  vatRate: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  unitPrice: Amount;
  discount?: SalesInvoiceDiscount | null | undefined;
};

/** @internal */
export const SalesInvoiceLineItem$inboundSchema: z.ZodType<
  SalesInvoiceLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: Amount$inboundSchema,
  discount: z.nullable(SalesInvoiceDiscount$inboundSchema).optional(),
});

/** @internal */
export type SalesInvoiceLineItem$Outbound = {
  description: string;
  quantity: number;
  vatRate: string;
  unitPrice: Amount$Outbound;
  discount?: SalesInvoiceDiscount$Outbound | null | undefined;
};

/** @internal */
export const SalesInvoiceLineItem$outboundSchema: z.ZodType<
  SalesInvoiceLineItem$Outbound,
  z.ZodTypeDef,
  SalesInvoiceLineItem
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: Amount$outboundSchema,
  discount: z.nullable(SalesInvoiceDiscount$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceLineItem$ {
  /** @deprecated use `SalesInvoiceLineItem$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceLineItem$inboundSchema;
  /** @deprecated use `SalesInvoiceLineItem$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceLineItem$outboundSchema;
  /** @deprecated use `SalesInvoiceLineItem$Outbound` instead. */
  export type Outbound = SalesInvoiceLineItem$Outbound;
}

export function salesInvoiceLineItemToJSON(
  salesInvoiceLineItem: SalesInvoiceLineItem,
): string {
  return JSON.stringify(
    SalesInvoiceLineItem$outboundSchema.parse(salesInvoiceLineItem),
  );
}

export function salesInvoiceLineItemFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoiceLineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoiceLineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoiceLineItem' from JSON`,
  );
}
