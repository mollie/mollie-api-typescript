/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * The subscription's current status is directly related to the status of the underlying customer or mandate that is
 *
 * @remarks
 * enabling the subscription.
 */
export const SubscriptionStatus = {
  Pending: "pending",
  Active: "active",
  Canceled: "canceled",
  Suspended: "suspended",
  Completed: "completed",
} as const;
/**
 * The subscription's current status is directly related to the status of the underlying customer or mandate that is
 *
 * @remarks
 * enabling the subscription.
 */
export type SubscriptionStatus = OpenEnum<typeof SubscriptionStatus>;

/** @internal */
export const SubscriptionStatus$inboundSchema: z.ZodType<
  SubscriptionStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SubscriptionStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SubscriptionStatus$outboundSchema: z.ZodType<
  SubscriptionStatus,
  z.ZodTypeDef,
  SubscriptionStatus
> = z.union([
  z.nativeEnum(SubscriptionStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionStatus$ {
  /** @deprecated use `SubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = SubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema = SubscriptionStatus$outboundSchema;
}
