/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type Documentation = {
  href: string;
  type: string;
};

export type ErrorResponseLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: Documentation;
};

/** @internal */
export const Documentation$inboundSchema: z.ZodType<
  Documentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type Documentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const Documentation$outboundSchema: z.ZodType<
  Documentation$Outbound,
  z.ZodTypeDef,
  Documentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documentation$ {
  /** @deprecated use `Documentation$inboundSchema` instead. */
  export const inboundSchema = Documentation$inboundSchema;
  /** @deprecated use `Documentation$outboundSchema` instead. */
  export const outboundSchema = Documentation$outboundSchema;
  /** @deprecated use `Documentation$Outbound` instead. */
  export type Outbound = Documentation$Outbound;
}

export function documentationToJSON(documentation: Documentation): string {
  return JSON.stringify(Documentation$outboundSchema.parse(documentation));
}

export function documentationFromJSON(
  jsonString: string,
): SafeParseResult<Documentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Documentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Documentation' from JSON`,
  );
}

/** @internal */
export const ErrorResponseLinks$inboundSchema: z.ZodType<
  ErrorResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => Documentation$inboundSchema),
});

/** @internal */
export type ErrorResponseLinks$Outbound = {
  documentation: Documentation$Outbound;
};

/** @internal */
export const ErrorResponseLinks$outboundSchema: z.ZodType<
  ErrorResponseLinks$Outbound,
  z.ZodTypeDef,
  ErrorResponseLinks
> = z.object({
  documentation: z.lazy(() => Documentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponseLinks$ {
  /** @deprecated use `ErrorResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorResponseLinks$inboundSchema;
  /** @deprecated use `ErrorResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorResponseLinks$outboundSchema;
  /** @deprecated use `ErrorResponseLinks$Outbound` instead. */
  export type Outbound = ErrorResponseLinks$Outbound;
}

export function errorResponseLinksToJSON(
  errorResponseLinks: ErrorResponseLinks,
): string {
  return JSON.stringify(
    ErrorResponseLinks$outboundSchema.parse(errorResponseLinks),
  );
}

export function errorResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorResponseLinks' from JSON`,
  );
}
