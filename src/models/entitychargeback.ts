/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  AmountNullable,
  AmountNullable$inboundSchema,
  AmountNullable$Outbound,
  AmountNullable$outboundSchema,
} from "./amountnullable.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  UrlNullable,
  UrlNullable$inboundSchema,
  UrlNullable$Outbound,
  UrlNullable$outboundSchema,
} from "./urlnullable.js";

/**
 * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
 */
export type Reason = {
  /**
   * Technical code provided by the bank.
   */
  code: string;
  /**
   * A more detailed human-friendly description.
   */
  description: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityChargebackLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payment: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  settlement?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type EntityChargeback = {
  /**
   * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  id: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount: Amount;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  settlementAmount?: AmountNullable | null | undefined;
  /**
   * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
   */
  reason?: Reason | null | undefined;
  paymentId: string;
  settlementId?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the chargeback was reversed if applicable, in
   *
   * @remarks
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  reversedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityChargebackLinks;
};

/** @internal */
export const Reason$inboundSchema: z.ZodType<Reason, z.ZodTypeDef, unknown> = z
  .object({
    code: z.string(),
    description: z.string(),
  });

/** @internal */
export type Reason$Outbound = {
  code: string;
  description: string;
};

/** @internal */
export const Reason$outboundSchema: z.ZodType<
  Reason$Outbound,
  z.ZodTypeDef,
  Reason
> = z.object({
  code: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
  /** @deprecated use `Reason$Outbound` instead. */
  export type Outbound = Reason$Outbound;
}

export function reasonToJSON(reason: Reason): string {
  return JSON.stringify(Reason$outboundSchema.parse(reason));
}

export function reasonFromJSON(
  jsonString: string,
): SafeParseResult<Reason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reason' from JSON`,
  );
}

/** @internal */
export const EntityChargebackLinks$inboundSchema: z.ZodType<
  EntityChargebackLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  payment: Url$inboundSchema,
  settlement: z.nullable(UrlNullable$inboundSchema).optional(),
  documentation: Url$inboundSchema,
});

/** @internal */
export type EntityChargebackLinks$Outbound = {
  self: Url$Outbound;
  payment: Url$Outbound;
  settlement?: UrlNullable$Outbound | null | undefined;
  documentation: Url$Outbound;
};

/** @internal */
export const EntityChargebackLinks$outboundSchema: z.ZodType<
  EntityChargebackLinks$Outbound,
  z.ZodTypeDef,
  EntityChargebackLinks
> = z.object({
  self: Url$outboundSchema,
  payment: Url$outboundSchema,
  settlement: z.nullable(UrlNullable$outboundSchema).optional(),
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityChargebackLinks$ {
  /** @deprecated use `EntityChargebackLinks$inboundSchema` instead. */
  export const inboundSchema = EntityChargebackLinks$inboundSchema;
  /** @deprecated use `EntityChargebackLinks$outboundSchema` instead. */
  export const outboundSchema = EntityChargebackLinks$outboundSchema;
  /** @deprecated use `EntityChargebackLinks$Outbound` instead. */
  export type Outbound = EntityChargebackLinks$Outbound;
}

export function entityChargebackLinksToJSON(
  entityChargebackLinks: EntityChargebackLinks,
): string {
  return JSON.stringify(
    EntityChargebackLinks$outboundSchema.parse(entityChargebackLinks),
  );
}

export function entityChargebackLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityChargebackLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityChargebackLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityChargebackLinks' from JSON`,
  );
}

/** @internal */
export const EntityChargeback$inboundSchema: z.ZodType<
  EntityChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: Amount$inboundSchema,
  settlementAmount: z.nullable(AmountNullable$inboundSchema).optional(),
  reason: z.nullable(z.lazy(() => Reason$inboundSchema)).optional(),
  paymentId: z.string(),
  settlementId: z.string().optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => EntityChargebackLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityChargeback$Outbound = {
  resource: string;
  id: string;
  amount: Amount$Outbound;
  settlementAmount?: AmountNullable$Outbound | null | undefined;
  reason?: Reason$Outbound | null | undefined;
  paymentId: string;
  settlementId?: string | undefined;
  createdAt: string;
  reversedAt?: string | null | undefined;
  _links: EntityChargebackLinks$Outbound;
};

/** @internal */
export const EntityChargeback$outboundSchema: z.ZodType<
  EntityChargeback$Outbound,
  z.ZodTypeDef,
  EntityChargeback
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: Amount$outboundSchema,
  settlementAmount: z.nullable(AmountNullable$outboundSchema).optional(),
  reason: z.nullable(z.lazy(() => Reason$outboundSchema)).optional(),
  paymentId: z.string(),
  settlementId: z.string().optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => EntityChargebackLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityChargeback$ {
  /** @deprecated use `EntityChargeback$inboundSchema` instead. */
  export const inboundSchema = EntityChargeback$inboundSchema;
  /** @deprecated use `EntityChargeback$outboundSchema` instead. */
  export const outboundSchema = EntityChargeback$outboundSchema;
  /** @deprecated use `EntityChargeback$Outbound` instead. */
  export type Outbound = EntityChargeback$Outbound;
}

export function entityChargebackToJSON(
  entityChargeback: EntityChargeback,
): string {
  return JSON.stringify(
    EntityChargeback$outboundSchema.parse(entityChargeback),
  );
}

export function entityChargebackFromJSON(
  jsonString: string,
): SafeParseResult<EntityChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityChargeback' from JSON`,
  );
}
