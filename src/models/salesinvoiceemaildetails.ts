/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SalesInvoiceEmailDetails = {
  /**
   * The subject of the email to be sent.
   */
  subject: string;
  /**
   * The body of the email to be sent. To add newline characters, you can use `\n`.
   */
  body: string;
};

/** @internal */
export const SalesInvoiceEmailDetails$inboundSchema: z.ZodType<
  SalesInvoiceEmailDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/** @internal */
export type SalesInvoiceEmailDetails$Outbound = {
  subject: string;
  body: string;
};

/** @internal */
export const SalesInvoiceEmailDetails$outboundSchema: z.ZodType<
  SalesInvoiceEmailDetails$Outbound,
  z.ZodTypeDef,
  SalesInvoiceEmailDetails
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceEmailDetails$ {
  /** @deprecated use `SalesInvoiceEmailDetails$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceEmailDetails$inboundSchema;
  /** @deprecated use `SalesInvoiceEmailDetails$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceEmailDetails$outboundSchema;
  /** @deprecated use `SalesInvoiceEmailDetails$Outbound` instead. */
  export type Outbound = SalesInvoiceEmailDetails$Outbound;
}

export function salesInvoiceEmailDetailsToJSON(
  salesInvoiceEmailDetails: SalesInvoiceEmailDetails,
): string {
  return JSON.stringify(
    SalesInvoiceEmailDetails$outboundSchema.parse(salesInvoiceEmailDetails),
  );
}

export function salesInvoiceEmailDetailsFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoiceEmailDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoiceEmailDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoiceEmailDetails' from JSON`,
  );
}
