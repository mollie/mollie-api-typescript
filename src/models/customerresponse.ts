/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LocaleResponse,
  LocaleResponse$inboundSchema,
  LocaleResponse$outboundSchema,
} from "./localeresponse.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  UrlNullable,
  UrlNullable$inboundSchema,
  UrlNullable$Outbound,
  UrlNullable$outboundSchema,
} from "./urlnullable.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CustomerResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  dashboard: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payments?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  mandates?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  subscriptions?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type CustomerResponse = {
  /**
   * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: Mode | undefined;
  /**
   * The full name of the customer.
   */
  name?: string | null | undefined;
  /**
   * The email address of the customer.
   */
  email?: string | null | undefined;
  /**
   * Allows you to preset the language to be used.
   */
  locale?: LocaleResponse | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: Metadata | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CustomerResponseLinks | undefined;
};

/** @internal */
export const CustomerResponseLinks$inboundSchema: z.ZodType<
  CustomerResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  dashboard: Url$inboundSchema,
  payments: z.nullable(UrlNullable$inboundSchema).optional(),
  mandates: z.nullable(UrlNullable$inboundSchema).optional(),
  subscriptions: z.nullable(UrlNullable$inboundSchema).optional(),
  documentation: Url$inboundSchema,
});

/** @internal */
export type CustomerResponseLinks$Outbound = {
  self: Url$Outbound;
  dashboard: Url$Outbound;
  payments?: UrlNullable$Outbound | null | undefined;
  mandates?: UrlNullable$Outbound | null | undefined;
  subscriptions?: UrlNullable$Outbound | null | undefined;
  documentation: Url$Outbound;
};

/** @internal */
export const CustomerResponseLinks$outboundSchema: z.ZodType<
  CustomerResponseLinks$Outbound,
  z.ZodTypeDef,
  CustomerResponseLinks
> = z.object({
  self: Url$outboundSchema,
  dashboard: Url$outboundSchema,
  payments: z.nullable(UrlNullable$outboundSchema).optional(),
  mandates: z.nullable(UrlNullable$outboundSchema).optional(),
  subscriptions: z.nullable(UrlNullable$outboundSchema).optional(),
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerResponseLinks$ {
  /** @deprecated use `CustomerResponseLinks$inboundSchema` instead. */
  export const inboundSchema = CustomerResponseLinks$inboundSchema;
  /** @deprecated use `CustomerResponseLinks$outboundSchema` instead. */
  export const outboundSchema = CustomerResponseLinks$outboundSchema;
  /** @deprecated use `CustomerResponseLinks$Outbound` instead. */
  export type Outbound = CustomerResponseLinks$Outbound;
}

export function customerResponseLinksToJSON(
  customerResponseLinks: CustomerResponseLinks,
): string {
  return JSON.stringify(
    CustomerResponseLinks$outboundSchema.parse(customerResponseLinks),
  );
}

export function customerResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<CustomerResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerResponseLinks' from JSON`,
  );
}

/** @internal */
export const CustomerResponse$inboundSchema: z.ZodType<
  CustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$inboundSchema.optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(LocaleResponse$inboundSchema).optional(),
  metadata: z.nullable(Metadata$inboundSchema).optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => CustomerResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CustomerResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  locale?: string | null | undefined;
  metadata?: Metadata$Outbound | null | undefined;
  createdAt?: string | undefined;
  _links?: CustomerResponseLinks$Outbound | undefined;
};

/** @internal */
export const CustomerResponse$outboundSchema: z.ZodType<
  CustomerResponse$Outbound,
  z.ZodTypeDef,
  CustomerResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$outboundSchema.optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(LocaleResponse$outboundSchema).optional(),
  metadata: z.nullable(Metadata$outboundSchema).optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => CustomerResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerResponse$ {
  /** @deprecated use `CustomerResponse$inboundSchema` instead. */
  export const inboundSchema = CustomerResponse$inboundSchema;
  /** @deprecated use `CustomerResponse$outboundSchema` instead. */
  export const outboundSchema = CustomerResponse$outboundSchema;
  /** @deprecated use `CustomerResponse$Outbound` instead. */
  export type Outbound = CustomerResponse$Outbound;
}

export function customerResponseToJSON(
  customerResponse: CustomerResponse,
): string {
  return JSON.stringify(
    CustomerResponse$outboundSchema.parse(customerResponse),
  );
}

export function customerResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerResponse' from JSON`,
  );
}
