/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as operations from "../operations/index.js";
import { ClientError } from "./clienterror.js";

/**
 * An error response object.
 */
export type ListAllSubscriptionsNotFoundHalJSONErrorData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name
   *
   * @remarks
   * of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.ListAllSubscriptionsNotFoundLinks;
};

/**
 * An error response object.
 */
export class ListAllSubscriptionsNotFoundHalJSONError extends ClientError {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name
   *
   * @remarks
   * of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.ListAllSubscriptionsNotFoundLinks;

  /** The original data that was passed to this error instance. */
  data$: ListAllSubscriptionsNotFoundHalJSONErrorData;

  constructor(
    err: ListAllSubscriptionsNotFoundHalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.title = err.title;
    this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    this.links = err.links;

    this.name = "ListAllSubscriptionsNotFoundHalJSONError";
  }
}

/**
 * An error response object.
 */
export type ListAllSubscriptionsBadRequestHalJSONErrorData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name
   *
   * @remarks
   * of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.ListAllSubscriptionsBadRequestLinks;
};

/**
 * An error response object.
 */
export class ListAllSubscriptionsBadRequestHalJSONError extends ClientError {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name
   *
   * @remarks
   * of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.ListAllSubscriptionsBadRequestLinks;

  /** The original data that was passed to this error instance. */
  data$: ListAllSubscriptionsBadRequestHalJSONErrorData;

  constructor(
    err: ListAllSubscriptionsBadRequestHalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.title = err.title;
    this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    this.links = err.links;

    this.name = "ListAllSubscriptionsBadRequestHalJSONError";
  }
}

/** @internal */
export const ListAllSubscriptionsNotFoundHalJSONError$inboundSchema: z.ZodType<
  ListAllSubscriptionsNotFoundHalJSONError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number().int(),
  title: z.string(),
  detail: z.string(),
  field: z.string().optional(),
  _links: z.lazy(() =>
    operations.ListAllSubscriptionsNotFoundLinks$inboundSchema
  ),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_links": "links",
    });

    return new ListAllSubscriptionsNotFoundHalJSONError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ListAllSubscriptionsNotFoundHalJSONError$Outbound = {
  status: number;
  title: string;
  detail: string;
  field?: string | undefined;
  _links: operations.ListAllSubscriptionsNotFoundLinks$Outbound;
};

/** @internal */
export const ListAllSubscriptionsNotFoundHalJSONError$outboundSchema: z.ZodType<
  ListAllSubscriptionsNotFoundHalJSONError$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsNotFoundHalJSONError
> = z.instanceof(ListAllSubscriptionsNotFoundHalJSONError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number().int(),
      title: z.string(),
      detail: z.string(),
      field: z.string().optional(),
      links: z.lazy(() =>
        operations.ListAllSubscriptionsNotFoundLinks$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        links: "_links",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsNotFoundHalJSONError$ {
  /** @deprecated use `ListAllSubscriptionsNotFoundHalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsNotFoundHalJSONError$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsNotFoundHalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsNotFoundHalJSONError$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsNotFoundHalJSONError$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsNotFoundHalJSONError$Outbound;
}

/** @internal */
export const ListAllSubscriptionsBadRequestHalJSONError$inboundSchema:
  z.ZodType<ListAllSubscriptionsBadRequestHalJSONError, z.ZodTypeDef, unknown> =
    z.object({
      status: z.number().int(),
      title: z.string(),
      detail: z.string(),
      field: z.string().optional(),
      _links: z.lazy(() =>
        operations.ListAllSubscriptionsBadRequestLinks$inboundSchema
      ),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "_links": "links",
        });

        return new ListAllSubscriptionsBadRequestHalJSONError(remapped, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ListAllSubscriptionsBadRequestHalJSONError$Outbound = {
  status: number;
  title: string;
  detail: string;
  field?: string | undefined;
  _links: operations.ListAllSubscriptionsBadRequestLinks$Outbound;
};

/** @internal */
export const ListAllSubscriptionsBadRequestHalJSONError$outboundSchema:
  z.ZodType<
    ListAllSubscriptionsBadRequestHalJSONError$Outbound,
    z.ZodTypeDef,
    ListAllSubscriptionsBadRequestHalJSONError
  > = z.instanceof(ListAllSubscriptionsBadRequestHalJSONError)
    .transform(v => v.data$)
    .pipe(
      z.object({
        status: z.number().int(),
        title: z.string(),
        detail: z.string(),
        field: z.string().optional(),
        links: z.lazy(() =>
          operations.ListAllSubscriptionsBadRequestLinks$outboundSchema
        ),
      }).transform((v) => {
        return remap$(v, {
          links: "_links",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsBadRequestHalJSONError$ {
  /** @deprecated use `ListAllSubscriptionsBadRequestHalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsBadRequestHalJSONError$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsBadRequestHalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsBadRequestHalJSONError$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsBadRequestHalJSONError$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsBadRequestHalJSONError$Outbound;
}
