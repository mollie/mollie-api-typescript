/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as operations from "../operations/index.js";
import { ClientError } from "./clienterror.js";

/**
 * An error response object.
 */
export type GetSettlementChargebacksNotFoundHalJSONErrorData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.GetSettlementChargebacksNotFoundLinks;
};

/**
 * An error response object.
 */
export class GetSettlementChargebacksNotFoundHalJSONError extends ClientError {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.GetSettlementChargebacksNotFoundLinks;

  /** The original data that was passed to this error instance. */
  data$: GetSettlementChargebacksNotFoundHalJSONErrorData;

  constructor(
    err: GetSettlementChargebacksNotFoundHalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.title = err.title;
    this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    this.links = err.links;

    this.name = "GetSettlementChargebacksNotFoundHalJSONError";
  }
}

/**
 * An error response object.
 */
export type GetSettlementChargebacksBadRequestHalJSONErrorData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.GetSettlementChargebacksBadRequestLinks;
};

/**
 * An error response object.
 */
export class GetSettlementChargebacksBadRequestHalJSONError
  extends ClientError
{
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status: number;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title: string;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail: string;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | undefined;
  links: operations.GetSettlementChargebacksBadRequestLinks;

  /** The original data that was passed to this error instance. */
  data$: GetSettlementChargebacksBadRequestHalJSONErrorData;

  constructor(
    err: GetSettlementChargebacksBadRequestHalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.title = err.title;
    this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    this.links = err.links;

    this.name = "GetSettlementChargebacksBadRequestHalJSONError";
  }
}

/** @internal */
export const GetSettlementChargebacksNotFoundHalJSONError$inboundSchema:
  z.ZodType<
    GetSettlementChargebacksNotFoundHalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status: z.number().int(),
    title: z.string(),
    detail: z.string(),
    field: z.string().optional(),
    _links: z.lazy(() =>
      operations.GetSettlementChargebacksNotFoundLinks$inboundSchema
    ),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "_links": "links",
      });

      return new GetSettlementChargebacksNotFoundHalJSONError(remapped, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type GetSettlementChargebacksNotFoundHalJSONError$Outbound = {
  status: number;
  title: string;
  detail: string;
  field?: string | undefined;
  _links: operations.GetSettlementChargebacksNotFoundLinks$Outbound;
};

/** @internal */
export const GetSettlementChargebacksNotFoundHalJSONError$outboundSchema:
  z.ZodType<
    GetSettlementChargebacksNotFoundHalJSONError$Outbound,
    z.ZodTypeDef,
    GetSettlementChargebacksNotFoundHalJSONError
  > = z.instanceof(GetSettlementChargebacksNotFoundHalJSONError)
    .transform(v => v.data$)
    .pipe(
      z.object({
        status: z.number().int(),
        title: z.string(),
        detail: z.string(),
        field: z.string().optional(),
        links: z.lazy(() =>
          operations.GetSettlementChargebacksNotFoundLinks$outboundSchema
        ),
      }).transform((v) => {
        return remap$(v, {
          links: "_links",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksNotFoundHalJSONError$ {
  /** @deprecated use `GetSettlementChargebacksNotFoundHalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksNotFoundHalJSONError$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksNotFoundHalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksNotFoundHalJSONError$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksNotFoundHalJSONError$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksNotFoundHalJSONError$Outbound;
}

/** @internal */
export const GetSettlementChargebacksBadRequestHalJSONError$inboundSchema:
  z.ZodType<
    GetSettlementChargebacksBadRequestHalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status: z.number().int(),
    title: z.string(),
    detail: z.string(),
    field: z.string().optional(),
    _links: z.lazy(() =>
      operations.GetSettlementChargebacksBadRequestLinks$inboundSchema
    ),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "_links": "links",
      });

      return new GetSettlementChargebacksBadRequestHalJSONError(remapped, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type GetSettlementChargebacksBadRequestHalJSONError$Outbound = {
  status: number;
  title: string;
  detail: string;
  field?: string | undefined;
  _links: operations.GetSettlementChargebacksBadRequestLinks$Outbound;
};

/** @internal */
export const GetSettlementChargebacksBadRequestHalJSONError$outboundSchema:
  z.ZodType<
    GetSettlementChargebacksBadRequestHalJSONError$Outbound,
    z.ZodTypeDef,
    GetSettlementChargebacksBadRequestHalJSONError
  > = z.instanceof(GetSettlementChargebacksBadRequestHalJSONError)
    .transform(v => v.data$)
    .pipe(
      z.object({
        status: z.number().int(),
        title: z.string(),
        detail: z.string(),
        field: z.string().optional(),
        links: z.lazy(() =>
          operations.GetSettlementChargebacksBadRequestLinks$outboundSchema
        ),
      }).transform((v) => {
        return remap$(v, {
          links: "_links",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksBadRequestHalJSONError$ {
  /** @deprecated use `GetSettlementChargebacksBadRequestHalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksBadRequestHalJSONError$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksBadRequestHalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksBadRequestHalJSONError$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksBadRequestHalJSONError$Outbound` instead. */
  export type Outbound =
    GetSettlementChargebacksBadRequestHalJSONError$Outbound;
}
