/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityPermissionLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityPermission = {
  /**
   * Indicates the response contains a permission object. Will always contain the string `permission` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  id: string;
  /**
   * A short description of what kind of access the permission enables.
   */
  description: string;
  /**
   * Whether this permission is granted to the app by the organization.
   */
  granted: boolean;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityPermissionLinks;
};

/** @internal */
export const EntityPermissionLinks$inboundSchema: z.ZodType<
  EntityPermissionLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityPermissionLinks$Outbound = {
  self?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityPermissionLinks$outboundSchema: z.ZodType<
  EntityPermissionLinks$Outbound,
  z.ZodTypeDef,
  EntityPermissionLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPermissionLinks$ {
  /** @deprecated use `EntityPermissionLinks$inboundSchema` instead. */
  export const inboundSchema = EntityPermissionLinks$inboundSchema;
  /** @deprecated use `EntityPermissionLinks$outboundSchema` instead. */
  export const outboundSchema = EntityPermissionLinks$outboundSchema;
  /** @deprecated use `EntityPermissionLinks$Outbound` instead. */
  export type Outbound = EntityPermissionLinks$Outbound;
}

export function entityPermissionLinksToJSON(
  entityPermissionLinks: EntityPermissionLinks,
): string {
  return JSON.stringify(
    EntityPermissionLinks$outboundSchema.parse(entityPermissionLinks),
  );
}

export function entityPermissionLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityPermissionLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityPermissionLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPermissionLinks' from JSON`,
  );
}

/** @internal */
export const EntityPermission$inboundSchema: z.ZodType<
  EntityPermission,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  description: z.string(),
  granted: z.boolean(),
  _links: z.lazy(() => EntityPermissionLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityPermission$Outbound = {
  resource: string;
  id: string;
  description: string;
  granted: boolean;
  _links: EntityPermissionLinks$Outbound;
};

/** @internal */
export const EntityPermission$outboundSchema: z.ZodType<
  EntityPermission$Outbound,
  z.ZodTypeDef,
  EntityPermission
> = z.object({
  resource: z.string(),
  id: z.string(),
  description: z.string(),
  granted: z.boolean(),
  links: z.lazy(() => EntityPermissionLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPermission$ {
  /** @deprecated use `EntityPermission$inboundSchema` instead. */
  export const inboundSchema = EntityPermission$inboundSchema;
  /** @deprecated use `EntityPermission$outboundSchema` instead. */
  export const outboundSchema = EntityPermission$outboundSchema;
  /** @deprecated use `EntityPermission$Outbound` instead. */
  export type Outbound = EntityPermission$Outbound;
}

export function entityPermissionToJSON(
  entityPermission: EntityPermission,
): string {
  return JSON.stringify(
    EntityPermission$outboundSchema.parse(entityPermission),
  );
}

export function entityPermissionFromJSON(
  jsonString: string,
): SafeParseResult<EntityPermission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityPermission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPermission' from JSON`,
  );
}
