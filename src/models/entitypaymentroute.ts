/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RouteDestinationType,
  RouteDestinationType$inboundSchema,
  RouteDestinationType$outboundSchema,
} from "./routedestinationtype.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * The destination of this portion of the payment.
 */
export type EntityPaymentRouteDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   */
  type: RouteDestinationType;
  organizationId: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityPaymentRouteLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payment: Url;
};

export type EntityPaymentRoute = {
  id: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount: Amount;
  /**
   * The destination of this portion of the payment.
   */
  destination: EntityPaymentRouteDestination;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
   *
   * @remarks
   * date must be given in `YYYY-MM-DD` format.
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityPaymentRouteLinks;
};

/** @internal */
export const EntityPaymentRouteDestination$inboundSchema: z.ZodType<
  EntityPaymentRouteDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouteDestinationType$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type EntityPaymentRouteDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const EntityPaymentRouteDestination$outboundSchema: z.ZodType<
  EntityPaymentRouteDestination$Outbound,
  z.ZodTypeDef,
  EntityPaymentRouteDestination
> = z.object({
  type: RouteDestinationType$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPaymentRouteDestination$ {
  /** @deprecated use `EntityPaymentRouteDestination$inboundSchema` instead. */
  export const inboundSchema = EntityPaymentRouteDestination$inboundSchema;
  /** @deprecated use `EntityPaymentRouteDestination$outboundSchema` instead. */
  export const outboundSchema = EntityPaymentRouteDestination$outboundSchema;
  /** @deprecated use `EntityPaymentRouteDestination$Outbound` instead. */
  export type Outbound = EntityPaymentRouteDestination$Outbound;
}

export function entityPaymentRouteDestinationToJSON(
  entityPaymentRouteDestination: EntityPaymentRouteDestination,
): string {
  return JSON.stringify(
    EntityPaymentRouteDestination$outboundSchema.parse(
      entityPaymentRouteDestination,
    ),
  );
}

export function entityPaymentRouteDestinationFromJSON(
  jsonString: string,
): SafeParseResult<EntityPaymentRouteDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityPaymentRouteDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPaymentRouteDestination' from JSON`,
  );
}

/** @internal */
export const EntityPaymentRouteLinks$inboundSchema: z.ZodType<
  EntityPaymentRouteLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  payment: Url$inboundSchema,
});

/** @internal */
export type EntityPaymentRouteLinks$Outbound = {
  self: Url$Outbound;
  payment: Url$Outbound;
};

/** @internal */
export const EntityPaymentRouteLinks$outboundSchema: z.ZodType<
  EntityPaymentRouteLinks$Outbound,
  z.ZodTypeDef,
  EntityPaymentRouteLinks
> = z.object({
  self: Url$outboundSchema,
  payment: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPaymentRouteLinks$ {
  /** @deprecated use `EntityPaymentRouteLinks$inboundSchema` instead. */
  export const inboundSchema = EntityPaymentRouteLinks$inboundSchema;
  /** @deprecated use `EntityPaymentRouteLinks$outboundSchema` instead. */
  export const outboundSchema = EntityPaymentRouteLinks$outboundSchema;
  /** @deprecated use `EntityPaymentRouteLinks$Outbound` instead. */
  export type Outbound = EntityPaymentRouteLinks$Outbound;
}

export function entityPaymentRouteLinksToJSON(
  entityPaymentRouteLinks: EntityPaymentRouteLinks,
): string {
  return JSON.stringify(
    EntityPaymentRouteLinks$outboundSchema.parse(entityPaymentRouteLinks),
  );
}

export function entityPaymentRouteLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityPaymentRouteLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityPaymentRouteLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPaymentRouteLinks' from JSON`,
  );
}

/** @internal */
export const EntityPaymentRoute$inboundSchema: z.ZodType<
  EntityPaymentRoute,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: Amount$inboundSchema,
  destination: z.lazy(() => EntityPaymentRouteDestination$inboundSchema),
  releaseDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => EntityPaymentRouteLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityPaymentRoute$Outbound = {
  id: string;
  amount: Amount$Outbound;
  destination: EntityPaymentRouteDestination$Outbound;
  releaseDate?: string | null | undefined;
  _links: EntityPaymentRouteLinks$Outbound;
};

/** @internal */
export const EntityPaymentRoute$outboundSchema: z.ZodType<
  EntityPaymentRoute$Outbound,
  z.ZodTypeDef,
  EntityPaymentRoute
> = z.object({
  id: z.string(),
  amount: Amount$outboundSchema,
  destination: z.lazy(() => EntityPaymentRouteDestination$outboundSchema),
  releaseDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => EntityPaymentRouteLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPaymentRoute$ {
  /** @deprecated use `EntityPaymentRoute$inboundSchema` instead. */
  export const inboundSchema = EntityPaymentRoute$inboundSchema;
  /** @deprecated use `EntityPaymentRoute$outboundSchema` instead. */
  export const outboundSchema = EntityPaymentRoute$outboundSchema;
  /** @deprecated use `EntityPaymentRoute$Outbound` instead. */
  export type Outbound = EntityPaymentRoute$Outbound;
}

export function entityPaymentRouteToJSON(
  entityPaymentRoute: EntityPaymentRoute,
): string {
  return JSON.stringify(
    EntityPaymentRoute$outboundSchema.parse(entityPaymentRoute),
  );
}

export function entityPaymentRouteFromJSON(
  jsonString: string,
): SafeParseResult<EntityPaymentRoute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityPaymentRoute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPaymentRoute' from JSON`,
  );
}
