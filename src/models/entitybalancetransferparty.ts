/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BalanceTransferPartyType,
  BalanceTransferPartyType$inboundSchema,
  BalanceTransferPartyType$outboundSchema,
} from "./balancetransferpartytype.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A party involved in the balance transfer, either the sender or the receiver.
 */
export type EntityBalanceTransferParty = {
  /**
   * Defines the type of the party. At the moment, only `organization` is supported.
   */
  type: BalanceTransferPartyType;
  id: string;
  /**
   * The transfer description for the transfer party. This is the description that will appear in the financial reports of the party.
   */
  description: string;
};

/** @internal */
export const EntityBalanceTransferParty$inboundSchema: z.ZodType<
  EntityBalanceTransferParty,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: BalanceTransferPartyType$inboundSchema,
  id: z.string(),
  description: z.string(),
});

/** @internal */
export type EntityBalanceTransferParty$Outbound = {
  type: string;
  id: string;
  description: string;
};

/** @internal */
export const EntityBalanceTransferParty$outboundSchema: z.ZodType<
  EntityBalanceTransferParty$Outbound,
  z.ZodTypeDef,
  EntityBalanceTransferParty
> = z.object({
  type: BalanceTransferPartyType$outboundSchema,
  id: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceTransferParty$ {
  /** @deprecated use `EntityBalanceTransferParty$inboundSchema` instead. */
  export const inboundSchema = EntityBalanceTransferParty$inboundSchema;
  /** @deprecated use `EntityBalanceTransferParty$outboundSchema` instead. */
  export const outboundSchema = EntityBalanceTransferParty$outboundSchema;
  /** @deprecated use `EntityBalanceTransferParty$Outbound` instead. */
  export type Outbound = EntityBalanceTransferParty$Outbound;
}

export function entityBalanceTransferPartyToJSON(
  entityBalanceTransferParty: EntityBalanceTransferParty,
): string {
  return JSON.stringify(
    EntityBalanceTransferParty$outboundSchema.parse(entityBalanceTransferParty),
  );
}

export function entityBalanceTransferPartyFromJSON(
  jsonString: string,
): SafeParseResult<EntityBalanceTransferParty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityBalanceTransferParty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityBalanceTransferParty' from JSON`,
  );
}
