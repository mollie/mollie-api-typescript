/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SalesInvoiceDiscount,
  SalesInvoiceDiscount$inboundSchema,
  SalesInvoiceDiscount$Outbound,
  SalesInvoiceDiscount$outboundSchema,
} from "./salesinvoicediscount.js";
import {
  SalesInvoiceEmailDetails,
  SalesInvoiceEmailDetails$inboundSchema,
  SalesInvoiceEmailDetails$Outbound,
  SalesInvoiceEmailDetails$outboundSchema,
} from "./salesinvoiceemaildetails.js";
import {
  SalesInvoiceLineItem,
  SalesInvoiceLineItem$inboundSchema,
  SalesInvoiceLineItem$Outbound,
  SalesInvoiceLineItem$outboundSchema,
} from "./salesinvoicelineitem.js";
import {
  SalesInvoicePaymentDetails,
  SalesInvoicePaymentDetails$inboundSchema,
  SalesInvoicePaymentDetails$Outbound,
  SalesInvoicePaymentDetails$outboundSchema,
} from "./salesinvoicepaymentdetails.js";
import {
  SalesInvoicePaymentTerm,
  SalesInvoicePaymentTerm$inboundSchema,
  SalesInvoicePaymentTerm$outboundSchema,
} from "./salesinvoicepaymentterm.js";
import {
  SalesInvoiceRecipient,
  SalesInvoiceRecipient$inboundSchema,
  SalesInvoiceRecipient$Outbound,
  SalesInvoiceRecipient$outboundSchema,
} from "./salesinvoicerecipient.js";
import {
  SalesInvoiceStatus,
  SalesInvoiceStatus$inboundSchema,
  SalesInvoiceStatus$outboundSchema,
} from "./salesinvoicestatus.js";

export type UpdateValuesSalesInvoice = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * The status for the invoice to end up in.
   *
   * @remarks
   *
   * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
   * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
   * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
   *
   * A status value that cannot be set but can be returned is `canceled`, for invoices which were
   * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
   *
   * Dependent parameters:
   *   - `paymentDetails` is required if invoice should be set directly to `paid`
   *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
   *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
   */
  status?: SalesInvoiceStatus | undefined;
  /**
   * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
   */
  memo?: string | null | undefined;
  /**
   * The payment term to be set on the invoice.
   */
  paymentTerm?: SalesInvoicePaymentTerm | null | undefined;
  paymentDetails?: SalesInvoicePaymentDetails | null | undefined;
  emailDetails?: SalesInvoiceEmailDetails | null | undefined;
  /**
   * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
   *
   * @remarks
   * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
   * is not required to send a first invoice to a recipient.
   */
  recipientIdentifier?: string | undefined;
  recipient?: SalesInvoiceRecipient | null | undefined;
  /**
   * Provide the line items for the invoice. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the invoice.
   */
  lines?: Array<SalesInvoiceLineItem> | null | undefined;
  discount?: SalesInvoiceDiscount | null | undefined;
};

/** @internal */
export const UpdateValuesSalesInvoice$inboundSchema: z.ZodType<
  UpdateValuesSalesInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
  status: SalesInvoiceStatus$inboundSchema.optional(),
  memo: z.nullable(z.string()).optional(),
  paymentTerm: z.nullable(SalesInvoicePaymentTerm$inboundSchema).optional(),
  paymentDetails: z.nullable(SalesInvoicePaymentDetails$inboundSchema)
    .optional(),
  emailDetails: z.nullable(SalesInvoiceEmailDetails$inboundSchema).optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(SalesInvoiceRecipient$inboundSchema).optional(),
  lines: z.nullable(z.array(SalesInvoiceLineItem$inboundSchema)).optional(),
  discount: z.nullable(SalesInvoiceDiscount$inboundSchema).optional(),
});

/** @internal */
export type UpdateValuesSalesInvoice$Outbound = {
  testmode?: boolean | null | undefined;
  status?: string | undefined;
  memo?: string | null | undefined;
  paymentTerm?: string | null | undefined;
  paymentDetails?: SalesInvoicePaymentDetails$Outbound | null | undefined;
  emailDetails?: SalesInvoiceEmailDetails$Outbound | null | undefined;
  recipientIdentifier?: string | undefined;
  recipient?: SalesInvoiceRecipient$Outbound | null | undefined;
  lines?: Array<SalesInvoiceLineItem$Outbound> | null | undefined;
  discount?: SalesInvoiceDiscount$Outbound | null | undefined;
};

/** @internal */
export const UpdateValuesSalesInvoice$outboundSchema: z.ZodType<
  UpdateValuesSalesInvoice$Outbound,
  z.ZodTypeDef,
  UpdateValuesSalesInvoice
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
  status: SalesInvoiceStatus$outboundSchema.optional(),
  memo: z.nullable(z.string()).optional(),
  paymentTerm: z.nullable(SalesInvoicePaymentTerm$outboundSchema).optional(),
  paymentDetails: z.nullable(SalesInvoicePaymentDetails$outboundSchema)
    .optional(),
  emailDetails: z.nullable(SalesInvoiceEmailDetails$outboundSchema).optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(SalesInvoiceRecipient$outboundSchema).optional(),
  lines: z.nullable(z.array(SalesInvoiceLineItem$outboundSchema)).optional(),
  discount: z.nullable(SalesInvoiceDiscount$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateValuesSalesInvoice$ {
  /** @deprecated use `UpdateValuesSalesInvoice$inboundSchema` instead. */
  export const inboundSchema = UpdateValuesSalesInvoice$inboundSchema;
  /** @deprecated use `UpdateValuesSalesInvoice$outboundSchema` instead. */
  export const outboundSchema = UpdateValuesSalesInvoice$outboundSchema;
  /** @deprecated use `UpdateValuesSalesInvoice$Outbound` instead. */
  export type Outbound = UpdateValuesSalesInvoice$Outbound;
}

export function updateValuesSalesInvoiceToJSON(
  updateValuesSalesInvoice: UpdateValuesSalesInvoice,
): string {
  return JSON.stringify(
    UpdateValuesSalesInvoice$outboundSchema.parse(updateValuesSalesInvoice),
  );
}

export function updateValuesSalesInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateValuesSalesInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateValuesSalesInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateValuesSalesInvoice' from JSON`,
  );
}
