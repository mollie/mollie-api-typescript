/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LocaleResponse,
  LocaleResponse$inboundSchema,
  LocaleResponse$outboundSchema,
} from "./localeresponse.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type EntityCustomer = {
  id?: string | undefined;
  /**
   * The full name of the customer.
   */
  name?: string | null | undefined;
  /**
   * The email address of the customer.
   */
  email?: string | null | undefined;
  /**
   * Allows you to preset the language to be used.
   */
  locale?: LocaleResponse | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: Metadata | null | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityCustomer$inboundSchema: z.ZodType<
  EntityCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(LocaleResponse$inboundSchema).optional(),
  metadata: z.nullable(Metadata$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type EntityCustomer$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  locale?: string | null | undefined;
  metadata?: Metadata$Outbound | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityCustomer$outboundSchema: z.ZodType<
  EntityCustomer$Outbound,
  z.ZodTypeDef,
  EntityCustomer
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(LocaleResponse$outboundSchema).optional(),
  metadata: z.nullable(Metadata$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCustomer$ {
  /** @deprecated use `EntityCustomer$inboundSchema` instead. */
  export const inboundSchema = EntityCustomer$inboundSchema;
  /** @deprecated use `EntityCustomer$outboundSchema` instead. */
  export const outboundSchema = EntityCustomer$outboundSchema;
  /** @deprecated use `EntityCustomer$Outbound` instead. */
  export type Outbound = EntityCustomer$Outbound;
}

export function entityCustomerToJSON(entityCustomer: EntityCustomer): string {
  return JSON.stringify(EntityCustomer$outboundSchema.parse(entityCustomer));
}

export function entityCustomerFromJSON(
  jsonString: string,
): SafeParseResult<EntityCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityCustomer' from JSON`,
  );
}
