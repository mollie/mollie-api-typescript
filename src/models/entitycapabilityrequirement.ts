/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The status of the requirement depends on its due date.
 *
 * @remarks
 * If no due date is given, the status will be `requested`.
 */
export const EntityCapabilityRequirementStatus = {
  CurrentlyDue: "currently-due",
  PastDue: "past-due",
  Requested: "requested",
} as const;
/**
 * The status of the requirement depends on its due date.
 *
 * @remarks
 * If no due date is given, the status will be `requested`.
 */
export type EntityCapabilityRequirementStatus = ClosedEnum<
  typeof EntityCapabilityRequirementStatus
>;

/**
 * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
 *
 * @remarks
 * For example, where necessary documents are to be uploaded.
 */
export type Dashboard = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

export type EntityCapabilityRequirementLinks = {
  /**
   * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
   *
   * @remarks
   * For example, where necessary documents are to be uploaded.
   */
  dashboard?: Dashboard | undefined;
};

export type EntityCapabilityRequirement = {
  /**
   * The name of this requirement, referring to the task to be fulfilled by the organization
   *
   * @remarks
   * to enable or re-enable the capability. The name is unique among other requirements
   * of the same capability.
   */
  id?: string | undefined;
  /**
   * The status of the requirement depends on its due date.
   *
   * @remarks
   * If no due date is given, the status will be `requested`.
   */
  status?: EntityCapabilityRequirementStatus | undefined;
  /**
   * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
   */
  dueDate?: string | null | undefined;
  links?: EntityCapabilityRequirementLinks | undefined;
};

/** @internal */
export const EntityCapabilityRequirementStatus$inboundSchema: z.ZodNativeEnum<
  typeof EntityCapabilityRequirementStatus
> = z.nativeEnum(EntityCapabilityRequirementStatus);

/** @internal */
export const EntityCapabilityRequirementStatus$outboundSchema: z.ZodNativeEnum<
  typeof EntityCapabilityRequirementStatus
> = EntityCapabilityRequirementStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCapabilityRequirementStatus$ {
  /** @deprecated use `EntityCapabilityRequirementStatus$inboundSchema` instead. */
  export const inboundSchema = EntityCapabilityRequirementStatus$inboundSchema;
  /** @deprecated use `EntityCapabilityRequirementStatus$outboundSchema` instead. */
  export const outboundSchema =
    EntityCapabilityRequirementStatus$outboundSchema;
}

/** @internal */
export const Dashboard$inboundSchema: z.ZodType<
  Dashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Dashboard$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Dashboard$outboundSchema: z.ZodType<
  Dashboard$Outbound,
  z.ZodTypeDef,
  Dashboard
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dashboard$ {
  /** @deprecated use `Dashboard$inboundSchema` instead. */
  export const inboundSchema = Dashboard$inboundSchema;
  /** @deprecated use `Dashboard$outboundSchema` instead. */
  export const outboundSchema = Dashboard$outboundSchema;
  /** @deprecated use `Dashboard$Outbound` instead. */
  export type Outbound = Dashboard$Outbound;
}

export function dashboardToJSON(dashboard: Dashboard): string {
  return JSON.stringify(Dashboard$outboundSchema.parse(dashboard));
}

export function dashboardFromJSON(
  jsonString: string,
): SafeParseResult<Dashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Dashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Dashboard' from JSON`,
  );
}

/** @internal */
export const EntityCapabilityRequirementLinks$inboundSchema: z.ZodType<
  EntityCapabilityRequirementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  dashboard: z.lazy(() => Dashboard$inboundSchema).optional(),
});

/** @internal */
export type EntityCapabilityRequirementLinks$Outbound = {
  dashboard?: Dashboard$Outbound | undefined;
};

/** @internal */
export const EntityCapabilityRequirementLinks$outboundSchema: z.ZodType<
  EntityCapabilityRequirementLinks$Outbound,
  z.ZodTypeDef,
  EntityCapabilityRequirementLinks
> = z.object({
  dashboard: z.lazy(() => Dashboard$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCapabilityRequirementLinks$ {
  /** @deprecated use `EntityCapabilityRequirementLinks$inboundSchema` instead. */
  export const inboundSchema = EntityCapabilityRequirementLinks$inboundSchema;
  /** @deprecated use `EntityCapabilityRequirementLinks$outboundSchema` instead. */
  export const outboundSchema = EntityCapabilityRequirementLinks$outboundSchema;
  /** @deprecated use `EntityCapabilityRequirementLinks$Outbound` instead. */
  export type Outbound = EntityCapabilityRequirementLinks$Outbound;
}

export function entityCapabilityRequirementLinksToJSON(
  entityCapabilityRequirementLinks: EntityCapabilityRequirementLinks,
): string {
  return JSON.stringify(
    EntityCapabilityRequirementLinks$outboundSchema.parse(
      entityCapabilityRequirementLinks,
    ),
  );
}

export function entityCapabilityRequirementLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityCapabilityRequirementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityCapabilityRequirementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityCapabilityRequirementLinks' from JSON`,
  );
}

/** @internal */
export const EntityCapabilityRequirement$inboundSchema: z.ZodType<
  EntityCapabilityRequirement,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: EntityCapabilityRequirementStatus$inboundSchema.optional(),
  dueDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => EntityCapabilityRequirementLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityCapabilityRequirement$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  dueDate?: string | null | undefined;
  _links?: EntityCapabilityRequirementLinks$Outbound | undefined;
};

/** @internal */
export const EntityCapabilityRequirement$outboundSchema: z.ZodType<
  EntityCapabilityRequirement$Outbound,
  z.ZodTypeDef,
  EntityCapabilityRequirement
> = z.object({
  id: z.string().optional(),
  status: EntityCapabilityRequirementStatus$outboundSchema.optional(),
  dueDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => EntityCapabilityRequirementLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCapabilityRequirement$ {
  /** @deprecated use `EntityCapabilityRequirement$inboundSchema` instead. */
  export const inboundSchema = EntityCapabilityRequirement$inboundSchema;
  /** @deprecated use `EntityCapabilityRequirement$outboundSchema` instead. */
  export const outboundSchema = EntityCapabilityRequirement$outboundSchema;
  /** @deprecated use `EntityCapabilityRequirement$Outbound` instead. */
  export type Outbound = EntityCapabilityRequirement$Outbound;
}

export function entityCapabilityRequirementToJSON(
  entityCapabilityRequirement: EntityCapabilityRequirement,
): string {
  return JSON.stringify(
    EntityCapabilityRequirement$outboundSchema.parse(
      entityCapabilityRequirement,
    ),
  );
}

export function entityCapabilityRequirementFromJSON(
  jsonString: string,
): SafeParseResult<EntityCapabilityRequirement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityCapabilityRequirement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityCapabilityRequirement' from JSON`,
  );
}
