/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  Currencies,
  Currencies$inboundSchema,
  Currencies$outboundSchema,
} from "./currencies.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * The status of the balance.
 */
export const EntityBalanceStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The status of the balance.
 */
export type EntityBalanceStatus = ClosedEnum<typeof EntityBalanceStatus>;

/**
 * The frequency with which the available amount on the balance will be settled to the configured transfer
 *
 * @remarks
 * destination.
 *
 * Settlements created during weekends or on bank holidays will take place on the next business day.
 */
export const TransferFrequency = {
  Daily: "daily",
  EveryMonday: "every-monday",
  EveryTuesday: "every-tuesday",
  EveryWednesday: "every-wednesday",
  EveryThursday: "every-thursday",
  EveryFriday: "every-friday",
  Monthly: "monthly",
  Never: "never",
} as const;
/**
 * The frequency with which the available amount on the balance will be settled to the configured transfer
 *
 * @remarks
 * destination.
 *
 * Settlements created during weekends or on bank holidays will take place on the next business day.
 */
export type TransferFrequency = ClosedEnum<typeof TransferFrequency>;

/**
 * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
 *
 * @remarks
 *
 * * `bank-account` — Transfer the balance amount to an external bank account
 */
export const EntityBalanceType = {
  BankAccount: "bank-account",
} as const;
/**
 * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
 *
 * @remarks
 *
 * * `bank-account` — Transfer the balance amount to an external bank account
 */
export type EntityBalanceType = ClosedEnum<typeof EntityBalanceType>;

/**
 * The destination where the available amount will be automatically transferred to according to the configured
 *
 * @remarks
 * transfer frequency.
 */
export type TransferDestination = {
  /**
   * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
   *
   * @remarks
   *
   * * `bank-account` — Transfer the balance amount to an external bank account
   */
  type?: EntityBalanceType | undefined;
  /**
   * The configured bank account number of the beneficiary the balance amount is to be transferred to.
   */
  bankAccount?: string | undefined;
  /**
   * The full name of the beneficiary the balance amount is to be transferred to.
   */
  beneficiaryName?: string | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityBalanceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityBalance = {
  /**
   * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: Mode | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  currency?: Currencies | undefined;
  /**
   * The description or name of the balance. Can be used to denote the purpose of the balance.
   */
  description?: string | undefined;
  /**
   * The status of the balance.
   */
  status?: EntityBalanceStatus | undefined;
  /**
   * The frequency with which the available amount on the balance will be settled to the configured transfer
   *
   * @remarks
   * destination.
   *
   * Settlements created during weekends or on bank holidays will take place on the next business day.
   */
  transferFrequency?: TransferFrequency | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  transferThreshold?: Amount | undefined;
  /**
   * The transfer reference set to be included in all the transfers for this balance.
   */
  transferReference?: string | null | undefined;
  /**
   * The destination where the available amount will be automatically transferred to according to the configured
   *
   * @remarks
   * transfer frequency.
   */
  transferDestination?: TransferDestination | null | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  availableAmount?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  pendingAmount?: Amount | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityBalanceLinks | undefined;
};

/** @internal */
export const EntityBalanceStatus$inboundSchema: z.ZodNativeEnum<
  typeof EntityBalanceStatus
> = z.nativeEnum(EntityBalanceStatus);

/** @internal */
export const EntityBalanceStatus$outboundSchema: z.ZodNativeEnum<
  typeof EntityBalanceStatus
> = EntityBalanceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceStatus$ {
  /** @deprecated use `EntityBalanceStatus$inboundSchema` instead. */
  export const inboundSchema = EntityBalanceStatus$inboundSchema;
  /** @deprecated use `EntityBalanceStatus$outboundSchema` instead. */
  export const outboundSchema = EntityBalanceStatus$outboundSchema;
}

/** @internal */
export const TransferFrequency$inboundSchema: z.ZodNativeEnum<
  typeof TransferFrequency
> = z.nativeEnum(TransferFrequency);

/** @internal */
export const TransferFrequency$outboundSchema: z.ZodNativeEnum<
  typeof TransferFrequency
> = TransferFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferFrequency$ {
  /** @deprecated use `TransferFrequency$inboundSchema` instead. */
  export const inboundSchema = TransferFrequency$inboundSchema;
  /** @deprecated use `TransferFrequency$outboundSchema` instead. */
  export const outboundSchema = TransferFrequency$outboundSchema;
}

/** @internal */
export const EntityBalanceType$inboundSchema: z.ZodNativeEnum<
  typeof EntityBalanceType
> = z.nativeEnum(EntityBalanceType);

/** @internal */
export const EntityBalanceType$outboundSchema: z.ZodNativeEnum<
  typeof EntityBalanceType
> = EntityBalanceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceType$ {
  /** @deprecated use `EntityBalanceType$inboundSchema` instead. */
  export const inboundSchema = EntityBalanceType$inboundSchema;
  /** @deprecated use `EntityBalanceType$outboundSchema` instead. */
  export const outboundSchema = EntityBalanceType$outboundSchema;
}

/** @internal */
export const TransferDestination$inboundSchema: z.ZodType<
  TransferDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: EntityBalanceType$inboundSchema.optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/** @internal */
export type TransferDestination$Outbound = {
  type?: string | undefined;
  bankAccount?: string | undefined;
  beneficiaryName?: string | undefined;
};

/** @internal */
export const TransferDestination$outboundSchema: z.ZodType<
  TransferDestination$Outbound,
  z.ZodTypeDef,
  TransferDestination
> = z.object({
  type: EntityBalanceType$outboundSchema.optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferDestination$ {
  /** @deprecated use `TransferDestination$inboundSchema` instead. */
  export const inboundSchema = TransferDestination$inboundSchema;
  /** @deprecated use `TransferDestination$outboundSchema` instead. */
  export const outboundSchema = TransferDestination$outboundSchema;
  /** @deprecated use `TransferDestination$Outbound` instead. */
  export type Outbound = TransferDestination$Outbound;
}

export function transferDestinationToJSON(
  transferDestination: TransferDestination,
): string {
  return JSON.stringify(
    TransferDestination$outboundSchema.parse(transferDestination),
  );
}

export function transferDestinationFromJSON(
  jsonString: string,
): SafeParseResult<TransferDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferDestination' from JSON`,
  );
}

/** @internal */
export const EntityBalanceLinks$inboundSchema: z.ZodType<
  EntityBalanceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityBalanceLinks$Outbound = {
  self?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityBalanceLinks$outboundSchema: z.ZodType<
  EntityBalanceLinks$Outbound,
  z.ZodTypeDef,
  EntityBalanceLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceLinks$ {
  /** @deprecated use `EntityBalanceLinks$inboundSchema` instead. */
  export const inboundSchema = EntityBalanceLinks$inboundSchema;
  /** @deprecated use `EntityBalanceLinks$outboundSchema` instead. */
  export const outboundSchema = EntityBalanceLinks$outboundSchema;
  /** @deprecated use `EntityBalanceLinks$Outbound` instead. */
  export type Outbound = EntityBalanceLinks$Outbound;
}

export function entityBalanceLinksToJSON(
  entityBalanceLinks: EntityBalanceLinks,
): string {
  return JSON.stringify(
    EntityBalanceLinks$outboundSchema.parse(entityBalanceLinks),
  );
}

export function entityBalanceLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityBalanceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityBalanceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityBalanceLinks' from JSON`,
  );
}

/** @internal */
export const EntityBalance$inboundSchema: z.ZodType<
  EntityBalance,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$inboundSchema.optional(),
  createdAt: z.string().optional(),
  currency: Currencies$inboundSchema.optional(),
  description: z.string().optional(),
  status: EntityBalanceStatus$inboundSchema.optional(),
  transferFrequency: TransferFrequency$inboundSchema.optional(),
  transferThreshold: Amount$inboundSchema.optional(),
  transferReference: z.nullable(z.string()).optional(),
  transferDestination: z.nullable(
    z.lazy(() => TransferDestination$inboundSchema),
  ).optional(),
  availableAmount: Amount$inboundSchema.optional(),
  pendingAmount: Amount$inboundSchema.optional(),
  _links: z.lazy(() => EntityBalanceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityBalance$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  createdAt?: string | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  status?: string | undefined;
  transferFrequency?: string | undefined;
  transferThreshold?: Amount$Outbound | undefined;
  transferReference?: string | null | undefined;
  transferDestination?: TransferDestination$Outbound | null | undefined;
  availableAmount?: Amount$Outbound | undefined;
  pendingAmount?: Amount$Outbound | undefined;
  _links?: EntityBalanceLinks$Outbound | undefined;
};

/** @internal */
export const EntityBalance$outboundSchema: z.ZodType<
  EntityBalance$Outbound,
  z.ZodTypeDef,
  EntityBalance
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$outboundSchema.optional(),
  createdAt: z.string().optional(),
  currency: Currencies$outboundSchema.optional(),
  description: z.string().optional(),
  status: EntityBalanceStatus$outboundSchema.optional(),
  transferFrequency: TransferFrequency$outboundSchema.optional(),
  transferThreshold: Amount$outboundSchema.optional(),
  transferReference: z.nullable(z.string()).optional(),
  transferDestination: z.nullable(
    z.lazy(() => TransferDestination$outboundSchema),
  ).optional(),
  availableAmount: Amount$outboundSchema.optional(),
  pendingAmount: Amount$outboundSchema.optional(),
  links: z.lazy(() => EntityBalanceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalance$ {
  /** @deprecated use `EntityBalance$inboundSchema` instead. */
  export const inboundSchema = EntityBalance$inboundSchema;
  /** @deprecated use `EntityBalance$outboundSchema` instead. */
  export const outboundSchema = EntityBalance$outboundSchema;
  /** @deprecated use `EntityBalance$Outbound` instead. */
  export type Outbound = EntityBalance$Outbound;
}

export function entityBalanceToJSON(entityBalance: EntityBalance): string {
  return JSON.stringify(EntityBalance$outboundSchema.parse(entityBalance));
}

export function entityBalanceFromJSON(
  jsonString: string,
): SafeParseResult<EntityBalance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityBalance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityBalance' from JSON`,
  );
}
