/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityClientLinkResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  clientLink?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityClientLinkResponse = {
  /**
   * Indicates the response contains a client link object. Will always contain the string `client-link` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this client link. Example: `cl_vZCnNQsV2UtfXxYifWKWH`.
   */
  id?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityClientLinkResponseLinks | undefined;
};

/** @internal */
export const EntityClientLinkResponseLinks$inboundSchema: z.ZodType<
  EntityClientLinkResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  clientLink: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityClientLinkResponseLinks$Outbound = {
  self?: Url$Outbound | undefined;
  clientLink?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityClientLinkResponseLinks$outboundSchema: z.ZodType<
  EntityClientLinkResponseLinks$Outbound,
  z.ZodTypeDef,
  EntityClientLinkResponseLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  clientLink: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityClientLinkResponseLinks$ {
  /** @deprecated use `EntityClientLinkResponseLinks$inboundSchema` instead. */
  export const inboundSchema = EntityClientLinkResponseLinks$inboundSchema;
  /** @deprecated use `EntityClientLinkResponseLinks$outboundSchema` instead. */
  export const outboundSchema = EntityClientLinkResponseLinks$outboundSchema;
  /** @deprecated use `EntityClientLinkResponseLinks$Outbound` instead. */
  export type Outbound = EntityClientLinkResponseLinks$Outbound;
}

export function entityClientLinkResponseLinksToJSON(
  entityClientLinkResponseLinks: EntityClientLinkResponseLinks,
): string {
  return JSON.stringify(
    EntityClientLinkResponseLinks$outboundSchema.parse(
      entityClientLinkResponseLinks,
    ),
  );
}

export function entityClientLinkResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityClientLinkResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityClientLinkResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityClientLinkResponseLinks' from JSON`,
  );
}

/** @internal */
export const EntityClientLinkResponse$inboundSchema: z.ZodType<
  EntityClientLinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  _links: z.lazy(() => EntityClientLinkResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityClientLinkResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  _links?: EntityClientLinkResponseLinks$Outbound | undefined;
};

/** @internal */
export const EntityClientLinkResponse$outboundSchema: z.ZodType<
  EntityClientLinkResponse$Outbound,
  z.ZodTypeDef,
  EntityClientLinkResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  links: z.lazy(() => EntityClientLinkResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityClientLinkResponse$ {
  /** @deprecated use `EntityClientLinkResponse$inboundSchema` instead. */
  export const inboundSchema = EntityClientLinkResponse$inboundSchema;
  /** @deprecated use `EntityClientLinkResponse$outboundSchema` instead. */
  export const outboundSchema = EntityClientLinkResponse$outboundSchema;
  /** @deprecated use `EntityClientLinkResponse$Outbound` instead. */
  export type Outbound = EntityClientLinkResponse$Outbound;
}

export function entityClientLinkResponseToJSON(
  entityClientLinkResponse: EntityClientLinkResponse,
): string {
  return JSON.stringify(
    EntityClientLinkResponse$outboundSchema.parse(entityClientLinkResponse),
  );
}

export function entityClientLinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<EntityClientLinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityClientLinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityClientLinkResponse' from JSON`,
  );
}
