/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export const EntityMandateMethod = {
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Paypal: "paypal",
} as const;
/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export type EntityMandateMethod = ClosedEnum<typeof EntityMandateMethod>;

export type EntityMandate = {
  id?: string | undefined;
  /**
   * Payment method of the mandate.
   *
   * @remarks
   *
   * SEPA Direct Debit and PayPal mandates can be created directly.
   */
  method?: EntityMandateMethod | undefined;
  /**
   * The customer's name.
   */
  consumerName?: string | undefined;
  /**
   * The customer's IBAN. Required for SEPA Direct Debit mandates.
   */
  consumerAccount?: string | null | undefined;
  /**
   * The BIC of the customer's bank.
   */
  consumerBic?: string | null | undefined;
  /**
   * The customer's email address. Required for PayPal mandates.
   */
  consumerEmail?: string | null | undefined;
  /**
   * The date when the mandate was signed in `YYYY-MM-DD` format.
   */
  signatureDate?: string | null | undefined;
  /**
   * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
   *
   * @remarks
   * decline Direct Debit payments if the mandate reference is not unique.
   */
  mandateReference?: string | null | undefined;
  /**
   * The billing agreement ID given by PayPal. For example: `B-12A34567B8901234CD`. Required for PayPal mandates.
   *
   * @remarks
   * Must provide either this field or `payPalVaultId`, but not both.
   */
  paypalBillingAgreementId?: string | null | undefined;
  /**
   * The Vault ID given by PayPal. For example: `8kk8451t`. Required for PayPal mandates.
   *
   * @remarks
   * Must provide either this field or `paypalBillingAgreementId`, but not both.
   */
  payPalVaultId?: string | null | undefined;
  customerId?: string | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityMandateMethod$inboundSchema: z.ZodNativeEnum<
  typeof EntityMandateMethod
> = z.nativeEnum(EntityMandateMethod);

/** @internal */
export const EntityMandateMethod$outboundSchema: z.ZodNativeEnum<
  typeof EntityMandateMethod
> = EntityMandateMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityMandateMethod$ {
  /** @deprecated use `EntityMandateMethod$inboundSchema` instead. */
  export const inboundSchema = EntityMandateMethod$inboundSchema;
  /** @deprecated use `EntityMandateMethod$outboundSchema` instead. */
  export const outboundSchema = EntityMandateMethod$outboundSchema;
}

/** @internal */
export const EntityMandate$inboundSchema: z.ZodType<
  EntityMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  method: EntityMandateMethod$inboundSchema.optional(),
  consumerName: z.string().optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  consumerEmail: z.nullable(z.string()).optional(),
  signatureDate: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  paypalBillingAgreementId: z.nullable(z.string()).optional(),
  payPalVaultId: z.nullable(z.string()).optional(),
  customerId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type EntityMandate$Outbound = {
  id?: string | undefined;
  method?: string | undefined;
  consumerName?: string | undefined;
  consumerAccount?: string | null | undefined;
  consumerBic?: string | null | undefined;
  consumerEmail?: string | null | undefined;
  signatureDate?: string | null | undefined;
  mandateReference?: string | null | undefined;
  paypalBillingAgreementId?: string | null | undefined;
  payPalVaultId?: string | null | undefined;
  customerId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityMandate$outboundSchema: z.ZodType<
  EntityMandate$Outbound,
  z.ZodTypeDef,
  EntityMandate
> = z.object({
  id: z.string().optional(),
  method: EntityMandateMethod$outboundSchema.optional(),
  consumerName: z.string().optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  consumerEmail: z.nullable(z.string()).optional(),
  signatureDate: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  paypalBillingAgreementId: z.nullable(z.string()).optional(),
  payPalVaultId: z.nullable(z.string()).optional(),
  customerId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityMandate$ {
  /** @deprecated use `EntityMandate$inboundSchema` instead. */
  export const inboundSchema = EntityMandate$inboundSchema;
  /** @deprecated use `EntityMandate$outboundSchema` instead. */
  export const outboundSchema = EntityMandate$outboundSchema;
  /** @deprecated use `EntityMandate$Outbound` instead. */
  export type Outbound = EntityMandate$Outbound;
}

export function entityMandateToJSON(entityMandate: EntityMandate): string {
  return JSON.stringify(EntityMandate$outboundSchema.parse(entityMandate));
}

export function entityMandateFromJSON(
  jsonString: string,
): SafeParseResult<EntityMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityMandate' from JSON`,
  );
}
