/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RouteDestinationTypeResponse,
  RouteDestinationTypeResponse$inboundSchema,
  RouteDestinationTypeResponse$outboundSchema,
} from "./routedestinationtyperesponse.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * The destination of the route.
 */
export type RouteGetResponseDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   */
  type: RouteDestinationTypeResponse;
  organizationId: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type RouteGetResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type RouteGetResponse = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  paymentId?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  /**
   * The description of the route. This description is shown in the reports.
   */
  description?: string | undefined;
  /**
   * The destination of the route.
   */
  destination?: RouteGetResponseDestination | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: RouteGetResponseLinks | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
};

/** @internal */
export const RouteGetResponseDestination$inboundSchema: z.ZodType<
  RouteGetResponseDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouteDestinationTypeResponse$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type RouteGetResponseDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const RouteGetResponseDestination$outboundSchema: z.ZodType<
  RouteGetResponseDestination$Outbound,
  z.ZodTypeDef,
  RouteGetResponseDestination
> = z.object({
  type: RouteDestinationTypeResponse$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteGetResponseDestination$ {
  /** @deprecated use `RouteGetResponseDestination$inboundSchema` instead. */
  export const inboundSchema = RouteGetResponseDestination$inboundSchema;
  /** @deprecated use `RouteGetResponseDestination$outboundSchema` instead. */
  export const outboundSchema = RouteGetResponseDestination$outboundSchema;
  /** @deprecated use `RouteGetResponseDestination$Outbound` instead. */
  export type Outbound = RouteGetResponseDestination$Outbound;
}

export function routeGetResponseDestinationToJSON(
  routeGetResponseDestination: RouteGetResponseDestination,
): string {
  return JSON.stringify(
    RouteGetResponseDestination$outboundSchema.parse(
      routeGetResponseDestination,
    ),
  );
}

export function routeGetResponseDestinationFromJSON(
  jsonString: string,
): SafeParseResult<RouteGetResponseDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteGetResponseDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteGetResponseDestination' from JSON`,
  );
}

/** @internal */
export const RouteGetResponseLinks$inboundSchema: z.ZodType<
  RouteGetResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  documentation: Url$inboundSchema,
});

/** @internal */
export type RouteGetResponseLinks$Outbound = {
  self: Url$Outbound;
  documentation: Url$Outbound;
};

/** @internal */
export const RouteGetResponseLinks$outboundSchema: z.ZodType<
  RouteGetResponseLinks$Outbound,
  z.ZodTypeDef,
  RouteGetResponseLinks
> = z.object({
  self: Url$outboundSchema,
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteGetResponseLinks$ {
  /** @deprecated use `RouteGetResponseLinks$inboundSchema` instead. */
  export const inboundSchema = RouteGetResponseLinks$inboundSchema;
  /** @deprecated use `RouteGetResponseLinks$outboundSchema` instead. */
  export const outboundSchema = RouteGetResponseLinks$outboundSchema;
  /** @deprecated use `RouteGetResponseLinks$Outbound` instead. */
  export type Outbound = RouteGetResponseLinks$Outbound;
}

export function routeGetResponseLinksToJSON(
  routeGetResponseLinks: RouteGetResponseLinks,
): string {
  return JSON.stringify(
    RouteGetResponseLinks$outboundSchema.parse(routeGetResponseLinks),
  );
}

export function routeGetResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<RouteGetResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteGetResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteGetResponseLinks' from JSON`,
  );
}

/** @internal */
export const RouteGetResponse$inboundSchema: z.ZodType<
  RouteGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$inboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => RouteGetResponseDestination$inboundSchema)
    .optional(),
  _links: z.lazy(() => RouteGetResponseLinks$inboundSchema).optional(),
  createdAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type RouteGetResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  paymentId?: string | undefined;
  amount?: Amount$Outbound | undefined;
  description?: string | undefined;
  destination?: RouteGetResponseDestination$Outbound | undefined;
  _links?: RouteGetResponseLinks$Outbound | undefined;
  createdAt: string;
};

/** @internal */
export const RouteGetResponse$outboundSchema: z.ZodType<
  RouteGetResponse$Outbound,
  z.ZodTypeDef,
  RouteGetResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$outboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => RouteGetResponseDestination$outboundSchema)
    .optional(),
  links: z.lazy(() => RouteGetResponseLinks$outboundSchema).optional(),
  createdAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteGetResponse$ {
  /** @deprecated use `RouteGetResponse$inboundSchema` instead. */
  export const inboundSchema = RouteGetResponse$inboundSchema;
  /** @deprecated use `RouteGetResponse$outboundSchema` instead. */
  export const outboundSchema = RouteGetResponse$outboundSchema;
  /** @deprecated use `RouteGetResponse$Outbound` instead. */
  export type Outbound = RouteGetResponse$Outbound;
}

export function routeGetResponseToJSON(
  routeGetResponse: RouteGetResponse,
): string {
  return JSON.stringify(
    RouteGetResponse$outboundSchema.parse(routeGetResponse),
  );
}

export function routeGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<RouteGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteGetResponse' from JSON`,
  );
}
