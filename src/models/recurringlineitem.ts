/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RecurringLineItem = {
  /**
   * A description of the recurring item. If not present, the main description of the item will be used.
   */
  description?: string | undefined;
  /**
   * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
   *
   * @remarks
   *
   * Possible values: `... days`, `... weeks`, `... months`.
   */
  interval: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  /**
   * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
   */
  times?: number | undefined;
  /**
   * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
   */
  startDate?: string | null | undefined;
};

/** @internal */
export const RecurringLineItem$inboundSchema: z.ZodType<
  RecurringLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: Amount$inboundSchema.optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type RecurringLineItem$Outbound = {
  description?: string | undefined;
  interval: string;
  amount?: Amount$Outbound | undefined;
  times?: number | undefined;
  startDate?: string | null | undefined;
};

/** @internal */
export const RecurringLineItem$outboundSchema: z.ZodType<
  RecurringLineItem$Outbound,
  z.ZodTypeDef,
  RecurringLineItem
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: Amount$outboundSchema.optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecurringLineItem$ {
  /** @deprecated use `RecurringLineItem$inboundSchema` instead. */
  export const inboundSchema = RecurringLineItem$inboundSchema;
  /** @deprecated use `RecurringLineItem$outboundSchema` instead. */
  export const outboundSchema = RecurringLineItem$outboundSchema;
  /** @deprecated use `RecurringLineItem$Outbound` instead. */
  export type Outbound = RecurringLineItem$Outbound;
}

export function recurringLineItemToJSON(
  recurringLineItem: RecurringLineItem,
): string {
  return JSON.stringify(
    RecurringLineItem$outboundSchema.parse(recurringLineItem),
  );
}

export function recurringLineItemFromJSON(
  jsonString: string,
): SafeParseResult<RecurringLineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecurringLineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecurringLineItem' from JSON`,
  );
}
