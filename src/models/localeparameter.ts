/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";

export const LocaleParameter = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
export type LocaleParameter = ClosedEnum<typeof LocaleParameter>;

/** @internal */
export const LocaleParameter$inboundSchema: z.ZodNativeEnum<
  typeof LocaleParameter
> = z.nativeEnum(LocaleParameter);

/** @internal */
export const LocaleParameter$outboundSchema: z.ZodNativeEnum<
  typeof LocaleParameter
> = LocaleParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocaleParameter$ {
  /** @deprecated use `LocaleParameter$inboundSchema` instead. */
  export const inboundSchema = LocaleParameter$inboundSchema;
  /** @deprecated use `LocaleParameter$outboundSchema` instead. */
  export const outboundSchema = LocaleParameter$outboundSchema;
}
