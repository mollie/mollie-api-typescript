/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OnboardingStatus,
  OnboardingStatus$inboundSchema,
  OnboardingStatus$outboundSchema,
} from "./onboardingstatus.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityOnboardingStatusLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  dashboard?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  organization?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityOnboardingStatus = {
  /**
   * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
   *
   * @remarks
   * resource type.
   */
  resource?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The current status of the organization's onboarding process.
   */
  status?: OnboardingStatus | undefined;
  /**
   * Whether the organization can receive payments.
   */
  canReceivePayments?: boolean | undefined;
  /**
   * Whether the organization can receive settlements to their external bank account.
   */
  canReceiveSettlements?: boolean | undefined;
  /**
   * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  signedUpAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityOnboardingStatusLinks | undefined;
};

/** @internal */
export const EntityOnboardingStatusLinks$inboundSchema: z.ZodType<
  EntityOnboardingStatusLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  dashboard: Url$inboundSchema.optional(),
  organization: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityOnboardingStatusLinks$Outbound = {
  self?: Url$Outbound | undefined;
  dashboard?: Url$Outbound | undefined;
  organization?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityOnboardingStatusLinks$outboundSchema: z.ZodType<
  EntityOnboardingStatusLinks$Outbound,
  z.ZodTypeDef,
  EntityOnboardingStatusLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  dashboard: Url$outboundSchema.optional(),
  organization: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityOnboardingStatusLinks$ {
  /** @deprecated use `EntityOnboardingStatusLinks$inboundSchema` instead. */
  export const inboundSchema = EntityOnboardingStatusLinks$inboundSchema;
  /** @deprecated use `EntityOnboardingStatusLinks$outboundSchema` instead. */
  export const outboundSchema = EntityOnboardingStatusLinks$outboundSchema;
  /** @deprecated use `EntityOnboardingStatusLinks$Outbound` instead. */
  export type Outbound = EntityOnboardingStatusLinks$Outbound;
}

export function entityOnboardingStatusLinksToJSON(
  entityOnboardingStatusLinks: EntityOnboardingStatusLinks,
): string {
  return JSON.stringify(
    EntityOnboardingStatusLinks$outboundSchema.parse(
      entityOnboardingStatusLinks,
    ),
  );
}

export function entityOnboardingStatusLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityOnboardingStatusLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityOnboardingStatusLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityOnboardingStatusLinks' from JSON`,
  );
}

/** @internal */
export const EntityOnboardingStatus$inboundSchema: z.ZodType<
  EntityOnboardingStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: OnboardingStatus$inboundSchema.optional(),
  canReceivePayments: z.boolean().optional(),
  canReceiveSettlements: z.boolean().optional(),
  signedUpAt: z.string().optional(),
  _links: z.lazy(() => EntityOnboardingStatusLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityOnboardingStatus$Outbound = {
  resource?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  canReceivePayments?: boolean | undefined;
  canReceiveSettlements?: boolean | undefined;
  signedUpAt?: string | undefined;
  _links?: EntityOnboardingStatusLinks$Outbound | undefined;
};

/** @internal */
export const EntityOnboardingStatus$outboundSchema: z.ZodType<
  EntityOnboardingStatus$Outbound,
  z.ZodTypeDef,
  EntityOnboardingStatus
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: OnboardingStatus$outboundSchema.optional(),
  canReceivePayments: z.boolean().optional(),
  canReceiveSettlements: z.boolean().optional(),
  signedUpAt: z.string().optional(),
  links: z.lazy(() => EntityOnboardingStatusLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityOnboardingStatus$ {
  /** @deprecated use `EntityOnboardingStatus$inboundSchema` instead. */
  export const inboundSchema = EntityOnboardingStatus$inboundSchema;
  /** @deprecated use `EntityOnboardingStatus$outboundSchema` instead. */
  export const outboundSchema = EntityOnboardingStatus$outboundSchema;
  /** @deprecated use `EntityOnboardingStatus$Outbound` instead. */
  export type Outbound = EntityOnboardingStatus$Outbound;
}

export function entityOnboardingStatusToJSON(
  entityOnboardingStatus: EntityOnboardingStatus,
): string {
  return JSON.stringify(
    EntityOnboardingStatus$outboundSchema.parse(entityOnboardingStatus),
  );
}

export function entityOnboardingStatusFromJSON(
  jsonString: string,
): SafeParseResult<EntityOnboardingStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityOnboardingStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityOnboardingStatus' from JSON`,
  );
}
