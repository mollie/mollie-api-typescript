/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

export const Currencies = {
  Eur: "EUR",
  Gbp: "GBP",
  Chf: "CHF",
  Dkk: "DKK",
  Nok: "NOK",
  Pln: "PLN",
  Sek: "SEK",
  Usd: "USD",
  Czk: "CZK",
  Huf: "HUF",
  Aud: "AUD",
  Cad: "CAD",
} as const;
export type Currencies = OpenEnum<typeof Currencies>;

/** @internal */
export const Currencies$inboundSchema: z.ZodType<
  Currencies,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Currencies),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Currencies$outboundSchema: z.ZodType<
  Currencies,
  z.ZodTypeDef,
  Currencies
> = z.union([
  z.nativeEnum(Currencies),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Currencies$ {
  /** @deprecated use `Currencies$inboundSchema` instead. */
  export const inboundSchema = Currencies$inboundSchema;
  /** @deprecated use `Currencies$outboundSchema` instead. */
  export const outboundSchema = Currencies$outboundSchema;
}
