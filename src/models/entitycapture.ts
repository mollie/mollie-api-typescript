/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AmountNullable,
  AmountNullable$inboundSchema,
  AmountNullable$Outbound,
  AmountNullable$outboundSchema,
} from "./amountnullable.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type EntityCapture = {
  id?: string | undefined;
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: AmountNullable | null | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  settlementAmount?: AmountNullable | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: Metadata | null | undefined;
  paymentId?: string | undefined;
  shipmentId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const EntityCapture$inboundSchema: z.ZodType<
  EntityCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  amount: z.nullable(AmountNullable$inboundSchema).optional(),
  settlementAmount: z.nullable(AmountNullable$inboundSchema).optional(),
  metadata: z.nullable(Metadata$inboundSchema).optional(),
  paymentId: z.string().optional(),
  shipmentId: z.string().optional(),
  settlementId: z.string().optional(),
});

/** @internal */
export type EntityCapture$Outbound = {
  id?: string | undefined;
  description?: string | undefined;
  amount?: AmountNullable$Outbound | null | undefined;
  settlementAmount?: AmountNullable$Outbound | null | undefined;
  metadata?: Metadata$Outbound | null | undefined;
  paymentId?: string | undefined;
  shipmentId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const EntityCapture$outboundSchema: z.ZodType<
  EntityCapture$Outbound,
  z.ZodTypeDef,
  EntityCapture
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  amount: z.nullable(AmountNullable$outboundSchema).optional(),
  settlementAmount: z.nullable(AmountNullable$outboundSchema).optional(),
  metadata: z.nullable(Metadata$outboundSchema).optional(),
  paymentId: z.string().optional(),
  shipmentId: z.string().optional(),
  settlementId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCapture$ {
  /** @deprecated use `EntityCapture$inboundSchema` instead. */
  export const inboundSchema = EntityCapture$inboundSchema;
  /** @deprecated use `EntityCapture$outboundSchema` instead. */
  export const outboundSchema = EntityCapture$outboundSchema;
  /** @deprecated use `EntityCapture$Outbound` instead. */
  export type Outbound = EntityCapture$Outbound;
}

export function entityCaptureToJSON(entityCapture: EntityCapture): string {
  return JSON.stringify(EntityCapture$outboundSchema.parse(entityCapture));
}

export function entityCaptureFromJSON(
  jsonString: string,
): SafeParseResult<EntityCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityCapture' from JSON`,
  );
}
