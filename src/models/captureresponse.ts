/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AmountNullable,
  AmountNullable$inboundSchema,
  AmountNullable$Outbound,
  AmountNullable$outboundSchema,
} from "./amountnullable.js";
import {
  CaptureStatus,
  CaptureStatus$inboundSchema,
  CaptureStatus$outboundSchema,
} from "./capturestatus.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  UrlNullable,
  UrlNullable$inboundSchema,
  UrlNullable$Outbound,
  UrlNullable$outboundSchema,
} from "./urlnullable.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CaptureResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payment: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  settlement?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  shipment?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type CaptureResponse = {
  /**
   * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: Mode | undefined;
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: AmountNullable | null | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  settlementAmount?: AmountNullable | null | undefined;
  /**
   * The capture's status.
   */
  status?: CaptureStatus | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: Metadata | null | undefined;
  paymentId?: string | undefined;
  shipmentId?: string | undefined;
  settlementId?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CaptureResponseLinks | undefined;
};

/** @internal */
export const CaptureResponseLinks$inboundSchema: z.ZodType<
  CaptureResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  payment: Url$inboundSchema,
  settlement: z.nullable(UrlNullable$inboundSchema).optional(),
  shipment: z.nullable(UrlNullable$inboundSchema).optional(),
  documentation: Url$inboundSchema,
});

/** @internal */
export type CaptureResponseLinks$Outbound = {
  self: Url$Outbound;
  payment: Url$Outbound;
  settlement?: UrlNullable$Outbound | null | undefined;
  shipment?: UrlNullable$Outbound | null | undefined;
  documentation: Url$Outbound;
};

/** @internal */
export const CaptureResponseLinks$outboundSchema: z.ZodType<
  CaptureResponseLinks$Outbound,
  z.ZodTypeDef,
  CaptureResponseLinks
> = z.object({
  self: Url$outboundSchema,
  payment: Url$outboundSchema,
  settlement: z.nullable(UrlNullable$outboundSchema).optional(),
  shipment: z.nullable(UrlNullable$outboundSchema).optional(),
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaptureResponseLinks$ {
  /** @deprecated use `CaptureResponseLinks$inboundSchema` instead. */
  export const inboundSchema = CaptureResponseLinks$inboundSchema;
  /** @deprecated use `CaptureResponseLinks$outboundSchema` instead. */
  export const outboundSchema = CaptureResponseLinks$outboundSchema;
  /** @deprecated use `CaptureResponseLinks$Outbound` instead. */
  export type Outbound = CaptureResponseLinks$Outbound;
}

export function captureResponseLinksToJSON(
  captureResponseLinks: CaptureResponseLinks,
): string {
  return JSON.stringify(
    CaptureResponseLinks$outboundSchema.parse(captureResponseLinks),
  );
}

export function captureResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<CaptureResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaptureResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaptureResponseLinks' from JSON`,
  );
}

/** @internal */
export const CaptureResponse$inboundSchema: z.ZodType<
  CaptureResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$inboundSchema.optional(),
  description: z.string().optional(),
  amount: z.nullable(AmountNullable$inboundSchema).optional(),
  settlementAmount: z.nullable(AmountNullable$inboundSchema).optional(),
  status: CaptureStatus$inboundSchema.optional(),
  metadata: z.nullable(Metadata$inboundSchema).optional(),
  paymentId: z.string().optional(),
  shipmentId: z.string().optional(),
  settlementId: z.string().optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => CaptureResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CaptureResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: AmountNullable$Outbound | null | undefined;
  settlementAmount?: AmountNullable$Outbound | null | undefined;
  status?: string | undefined;
  metadata?: Metadata$Outbound | null | undefined;
  paymentId?: string | undefined;
  shipmentId?: string | undefined;
  settlementId?: string | undefined;
  createdAt?: string | undefined;
  _links?: CaptureResponseLinks$Outbound | undefined;
};

/** @internal */
export const CaptureResponse$outboundSchema: z.ZodType<
  CaptureResponse$Outbound,
  z.ZodTypeDef,
  CaptureResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: Mode$outboundSchema.optional(),
  description: z.string().optional(),
  amount: z.nullable(AmountNullable$outboundSchema).optional(),
  settlementAmount: z.nullable(AmountNullable$outboundSchema).optional(),
  status: CaptureStatus$outboundSchema.optional(),
  metadata: z.nullable(Metadata$outboundSchema).optional(),
  paymentId: z.string().optional(),
  shipmentId: z.string().optional(),
  settlementId: z.string().optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => CaptureResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaptureResponse$ {
  /** @deprecated use `CaptureResponse$inboundSchema` instead. */
  export const inboundSchema = CaptureResponse$inboundSchema;
  /** @deprecated use `CaptureResponse$outboundSchema` instead. */
  export const outboundSchema = CaptureResponse$outboundSchema;
  /** @deprecated use `CaptureResponse$Outbound` instead. */
  export type Outbound = CaptureResponse$Outbound;
}

export function captureResponseToJSON(
  captureResponse: CaptureResponse,
): string {
  return JSON.stringify(CaptureResponse$outboundSchema.parse(captureResponse));
}

export function captureResponseFromJSON(
  jsonString: string,
): SafeParseResult<CaptureResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaptureResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaptureResponse' from JSON`,
  );
}
