/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export const SalesInvoiceVatModeResponse = {
  Exclusive: "exclusive",
  Inclusive: "inclusive",
} as const;
/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export type SalesInvoiceVatModeResponse = OpenEnum<
  typeof SalesInvoiceVatModeResponse
>;

/** @internal */
export const SalesInvoiceVatModeResponse$inboundSchema: z.ZodType<
  SalesInvoiceVatModeResponse,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SalesInvoiceVatModeResponse),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SalesInvoiceVatModeResponse$outboundSchema: z.ZodType<
  SalesInvoiceVatModeResponse,
  z.ZodTypeDef,
  SalesInvoiceVatModeResponse
> = z.union([
  z.nativeEnum(SalesInvoiceVatModeResponse),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceVatModeResponse$ {
  /** @deprecated use `SalesInvoiceVatModeResponse$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceVatModeResponse$inboundSchema;
  /** @deprecated use `SalesInvoiceVatModeResponse$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceVatModeResponse$outboundSchema;
}
