/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProfileStatus,
  ProfileStatus$inboundSchema,
  ProfileStatus$outboundSchema,
} from "./profilestatus.js";

export type EntityProfile = {
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or
   *
   * @remarks
   * application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are
   *
   * @remarks
   * allowed.
   */
  website?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside,
   *
   * @remarks
   * in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the
   *
   * @remarks
   * [business category list](common-data-types#business-category) for all possible options.
   */
  businessCategory?: string | undefined;
  /**
   * The profile status determines whether the profile is able to receive live payments.
   *
   * @remarks
   *
   * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
   * * `verified`: The profile has been verified and can be used to create live payments and test payments.
   * * `blocked`: The profile is blocked and can no longer be used or changed.
   */
  status?: ProfileStatus | undefined;
};

/** @internal */
export const EntityProfile$inboundSchema: z.ZodType<
  EntityProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: ProfileStatus$inboundSchema.optional(),
});

/** @internal */
export type EntityProfile$Outbound = {
  name?: string | undefined;
  website?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | undefined;
  countriesOfActivity?: Array<string> | undefined;
  businessCategory?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const EntityProfile$outboundSchema: z.ZodType<
  EntityProfile$Outbound,
  z.ZodTypeDef,
  EntityProfile
> = z.object({
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: ProfileStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityProfile$ {
  /** @deprecated use `EntityProfile$inboundSchema` instead. */
  export const inboundSchema = EntityProfile$inboundSchema;
  /** @deprecated use `EntityProfile$outboundSchema` instead. */
  export const outboundSchema = EntityProfile$outboundSchema;
  /** @deprecated use `EntityProfile$Outbound` instead. */
  export type Outbound = EntityProfile$Outbound;
}

export function entityProfileToJSON(entityProfile: EntityProfile): string {
  return JSON.stringify(EntityProfile$outboundSchema.parse(entityProfile));
}

export function entityProfileFromJSON(
  jsonString: string,
): SafeParseResult<EntityProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityProfile' from JSON`,
  );
}
