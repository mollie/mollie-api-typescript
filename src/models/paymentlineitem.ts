/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export const PaymentLineItemType = {
  Physical: "physical",
  Digital: "digital",
  ShippingFee: "shipping_fee",
  Discount: "discount",
  StoreCredit: "store_credit",
  GiftCard: "gift_card",
  Surcharge: "surcharge",
  Tip: "tip",
} as const;
/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export type PaymentLineItemType = ClosedEnum<typeof PaymentLineItemType>;

export const PaymentLineItemCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type PaymentLineItemCategory = ClosedEnum<
  typeof PaymentLineItemCategory
>;

export type PaymentLineItem = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   */
  type?: PaymentLineItemType | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  unitPrice: Amount;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  discountAmount?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  totalAmount: Amount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
   *
   * @remarks
   * not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  vatAmount?: Amount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the
   *
   * @remarks
   * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
   */
  categories?: Array<PaymentLineItemCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
};

/** @internal */
export const PaymentLineItemType$inboundSchema: z.ZodNativeEnum<
  typeof PaymentLineItemType
> = z.nativeEnum(PaymentLineItemType);

/** @internal */
export const PaymentLineItemType$outboundSchema: z.ZodNativeEnum<
  typeof PaymentLineItemType
> = PaymentLineItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentLineItemType$ {
  /** @deprecated use `PaymentLineItemType$inboundSchema` instead. */
  export const inboundSchema = PaymentLineItemType$inboundSchema;
  /** @deprecated use `PaymentLineItemType$outboundSchema` instead. */
  export const outboundSchema = PaymentLineItemType$outboundSchema;
}

/** @internal */
export const PaymentLineItemCategory$inboundSchema: z.ZodNativeEnum<
  typeof PaymentLineItemCategory
> = z.nativeEnum(PaymentLineItemCategory);

/** @internal */
export const PaymentLineItemCategory$outboundSchema: z.ZodNativeEnum<
  typeof PaymentLineItemCategory
> = PaymentLineItemCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentLineItemCategory$ {
  /** @deprecated use `PaymentLineItemCategory$inboundSchema` instead. */
  export const inboundSchema = PaymentLineItemCategory$inboundSchema;
  /** @deprecated use `PaymentLineItemCategory$outboundSchema` instead. */
  export const outboundSchema = PaymentLineItemCategory$outboundSchema;
}

/** @internal */
export const PaymentLineItem$inboundSchema: z.ZodType<
  PaymentLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PaymentLineItemType$inboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: Amount$inboundSchema,
  discountAmount: Amount$inboundSchema.optional(),
  totalAmount: Amount$inboundSchema,
  vatRate: z.string().optional(),
  vatAmount: Amount$inboundSchema.optional(),
  sku: z.string().optional(),
  categories: z.array(PaymentLineItemCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/** @internal */
export type PaymentLineItem$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: Amount$Outbound;
  discountAmount?: Amount$Outbound | undefined;
  totalAmount: Amount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: Amount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
};

/** @internal */
export const PaymentLineItem$outboundSchema: z.ZodType<
  PaymentLineItem$Outbound,
  z.ZodTypeDef,
  PaymentLineItem
> = z.object({
  type: PaymentLineItemType$outboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: Amount$outboundSchema,
  discountAmount: Amount$outboundSchema.optional(),
  totalAmount: Amount$outboundSchema,
  vatRate: z.string().optional(),
  vatAmount: Amount$outboundSchema.optional(),
  sku: z.string().optional(),
  categories: z.array(PaymentLineItemCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentLineItem$ {
  /** @deprecated use `PaymentLineItem$inboundSchema` instead. */
  export const inboundSchema = PaymentLineItem$inboundSchema;
  /** @deprecated use `PaymentLineItem$outboundSchema` instead. */
  export const outboundSchema = PaymentLineItem$outboundSchema;
  /** @deprecated use `PaymentLineItem$Outbound` instead. */
  export type Outbound = PaymentLineItem$Outbound;
}

export function paymentLineItemToJSON(
  paymentLineItem: PaymentLineItem,
): string {
  return JSON.stringify(PaymentLineItem$outboundSchema.parse(paymentLineItem));
}

export function paymentLineItemFromJSON(
  jsonString: string,
): SafeParseResult<PaymentLineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentLineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentLineItem' from JSON`,
  );
}
