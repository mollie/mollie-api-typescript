/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * The status of the settlement.
 */
export const SettlementStatus = {
  Open: "open",
  Pending: "pending",
  Paidout: "paidout",
  Failed: "failed",
} as const;
/**
 * The status of the settlement.
 */
export type SettlementStatus = OpenEnum<typeof SettlementStatus>;

/** @internal */
export const SettlementStatus$inboundSchema: z.ZodType<
  SettlementStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SettlementStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SettlementStatus$outboundSchema: z.ZodType<
  SettlementStatus,
  z.ZodTypeDef,
  SettlementStatus
> = z.union([
  z.nativeEnum(SettlementStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettlementStatus$ {
  /** @deprecated use `SettlementStatus$inboundSchema` instead. */
  export const inboundSchema = SettlementStatus$inboundSchema;
  /** @deprecated use `SettlementStatus$outboundSchema` instead. */
  export const outboundSchema = SettlementStatus$outboundSchema;
}
