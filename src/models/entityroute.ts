/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RouteDestinationTypeResponse,
  RouteDestinationTypeResponse$inboundSchema,
  RouteDestinationTypeResponse$outboundSchema,
} from "./routedestinationtyperesponse.js";

/**
 * The destination of the route.
 */
export type EntityRouteDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   */
  type: RouteDestinationTypeResponse;
  organizationId: string;
};

export type EntityRoute = {
  id?: string | undefined;
  paymentId?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  /**
   * The description of the route. This description is shown in the reports.
   */
  description?: string | undefined;
  /**
   * The destination of the route.
   */
  destination?: EntityRouteDestination | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityRouteDestination$inboundSchema: z.ZodType<
  EntityRouteDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouteDestinationTypeResponse$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type EntityRouteDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const EntityRouteDestination$outboundSchema: z.ZodType<
  EntityRouteDestination$Outbound,
  z.ZodTypeDef,
  EntityRouteDestination
> = z.object({
  type: RouteDestinationTypeResponse$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRouteDestination$ {
  /** @deprecated use `EntityRouteDestination$inboundSchema` instead. */
  export const inboundSchema = EntityRouteDestination$inboundSchema;
  /** @deprecated use `EntityRouteDestination$outboundSchema` instead. */
  export const outboundSchema = EntityRouteDestination$outboundSchema;
  /** @deprecated use `EntityRouteDestination$Outbound` instead. */
  export type Outbound = EntityRouteDestination$Outbound;
}

export function entityRouteDestinationToJSON(
  entityRouteDestination: EntityRouteDestination,
): string {
  return JSON.stringify(
    EntityRouteDestination$outboundSchema.parse(entityRouteDestination),
  );
}

export function entityRouteDestinationFromJSON(
  jsonString: string,
): SafeParseResult<EntityRouteDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityRouteDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRouteDestination' from JSON`,
  );
}

/** @internal */
export const EntityRoute$inboundSchema: z.ZodType<
  EntityRoute,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$inboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => EntityRouteDestination$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type EntityRoute$Outbound = {
  id?: string | undefined;
  paymentId?: string | undefined;
  amount?: Amount$Outbound | undefined;
  description?: string | undefined;
  destination?: EntityRouteDestination$Outbound | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityRoute$outboundSchema: z.ZodType<
  EntityRoute$Outbound,
  z.ZodTypeDef,
  EntityRoute
> = z.object({
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$outboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => EntityRouteDestination$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRoute$ {
  /** @deprecated use `EntityRoute$inboundSchema` instead. */
  export const inboundSchema = EntityRoute$inboundSchema;
  /** @deprecated use `EntityRoute$outboundSchema` instead. */
  export const outboundSchema = EntityRoute$outboundSchema;
  /** @deprecated use `EntityRoute$Outbound` instead. */
  export type Outbound = EntityRoute$Outbound;
}

export function entityRouteToJSON(entityRoute: EntityRoute): string {
  return JSON.stringify(EntityRoute$outboundSchema.parse(entityRoute));
}

export function entityRouteFromJSON(
  jsonString: string,
): SafeParseResult<EntityRoute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityRoute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRoute' from JSON`,
  );
}
