/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SettlementStatus,
  SettlementStatus$inboundSchema,
  SettlementStatus$outboundSchema,
} from "./settlementstatus.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  UrlNullable,
  UrlNullable$inboundSchema,
  UrlNullable$Outbound,
  UrlNullable$outboundSchema,
} from "./urlnullable.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntitySettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payments?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  captures?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  refunds?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  chargebacks?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  invoice?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntitySettlement = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: SettlementStatus | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects â€” one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: { [k: string]: any } | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntitySettlementLinks | undefined;
};

/** @internal */
export const EntitySettlementLinks$inboundSchema: z.ZodType<
  EntitySettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  payments: Url$inboundSchema.optional(),
  captures: Url$inboundSchema.optional(),
  refunds: Url$inboundSchema.optional(),
  chargebacks: Url$inboundSchema.optional(),
  invoice: z.nullable(UrlNullable$inboundSchema).optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntitySettlementLinks$Outbound = {
  self?: Url$Outbound | undefined;
  payments?: Url$Outbound | undefined;
  captures?: Url$Outbound | undefined;
  refunds?: Url$Outbound | undefined;
  chargebacks?: Url$Outbound | undefined;
  invoice?: UrlNullable$Outbound | null | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntitySettlementLinks$outboundSchema: z.ZodType<
  EntitySettlementLinks$Outbound,
  z.ZodTypeDef,
  EntitySettlementLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  payments: Url$outboundSchema.optional(),
  captures: Url$outboundSchema.optional(),
  refunds: Url$outboundSchema.optional(),
  chargebacks: Url$outboundSchema.optional(),
  invoice: z.nullable(UrlNullable$outboundSchema).optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitySettlementLinks$ {
  /** @deprecated use `EntitySettlementLinks$inboundSchema` instead. */
  export const inboundSchema = EntitySettlementLinks$inboundSchema;
  /** @deprecated use `EntitySettlementLinks$outboundSchema` instead. */
  export const outboundSchema = EntitySettlementLinks$outboundSchema;
  /** @deprecated use `EntitySettlementLinks$Outbound` instead. */
  export type Outbound = EntitySettlementLinks$Outbound;
}

export function entitySettlementLinksToJSON(
  entitySettlementLinks: EntitySettlementLinks,
): string {
  return JSON.stringify(
    EntitySettlementLinks$outboundSchema.parse(entitySettlementLinks),
  );
}

export function entitySettlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntitySettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitySettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitySettlementLinks' from JSON`,
  );
}

/** @internal */
export const EntitySettlement$inboundSchema: z.ZodType<
  EntitySettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: SettlementStatus$inboundSchema.optional(),
  amount: Amount$inboundSchema.optional(),
  balanceId: z.string().optional(),
  invoiceId: z.string().optional(),
  periods: z.record(z.any()).optional(),
  _links: z.lazy(() => EntitySettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntitySettlement$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: Amount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | undefined;
  periods?: { [k: string]: any } | undefined;
  _links?: EntitySettlementLinks$Outbound | undefined;
};

/** @internal */
export const EntitySettlement$outboundSchema: z.ZodType<
  EntitySettlement$Outbound,
  z.ZodTypeDef,
  EntitySettlement
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: SettlementStatus$outboundSchema.optional(),
  amount: Amount$outboundSchema.optional(),
  balanceId: z.string().optional(),
  invoiceId: z.string().optional(),
  periods: z.record(z.any()).optional(),
  links: z.lazy(() => EntitySettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitySettlement$ {
  /** @deprecated use `EntitySettlement$inboundSchema` instead. */
  export const inboundSchema = EntitySettlement$inboundSchema;
  /** @deprecated use `EntitySettlement$outboundSchema` instead. */
  export const outboundSchema = EntitySettlement$outboundSchema;
  /** @deprecated use `EntitySettlement$Outbound` instead. */
  export type Outbound = EntitySettlement$Outbound;
}

export function entitySettlementToJSON(
  entitySettlement: EntitySettlement,
): string {
  return JSON.stringify(
    EntitySettlement$outboundSchema.parse(entitySettlement),
  );
}

export function entitySettlementFromJSON(
  jsonString: string,
): SafeParseResult<EntitySettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitySettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitySettlement' from JSON`,
  );
}
