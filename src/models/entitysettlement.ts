/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaymentMethod,
  PaymentMethod$inboundSchema,
  PaymentMethod$outboundSchema,
} from "./paymentmethod.js";
import {
  SettlementStatus,
  SettlementStatus$inboundSchema,
  SettlementStatus$outboundSchema,
} from "./settlementstatus.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  UrlNullable,
  UrlNullable$inboundSchema,
  UrlNullable$Outbound,
  UrlNullable$outboundSchema,
} from "./urlnullable.js";

/**
 * The service rates, further divided into `fixed` and `percentage` costs.
 */
export type Rate = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  fixed?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  percentage?: Amount | undefined;
};

export type Cost = {
  /**
   * A description of the cost subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: PaymentMethod | null | undefined;
  /**
   * The number of fees
   */
  count?: number | undefined;
  /**
   * The service rates, further divided into `fixed` and `percentage` costs.
   */
  rate?: Rate | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountNet?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountVat?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountGross?: Amount | undefined;
};

export type Revenue = {
  /**
   * A description of the revenue subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: PaymentMethod | null | undefined;
  /**
   * The number of payments
   */
  count?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountNet?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountVat?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountGross?: Amount | undefined;
};

export type Periods = {
  /**
   * An array of cost objects, describing the fees withheld for each payment method during this period.
   */
  costs?: Array<Cost> | undefined;
  /**
   * An array of revenue objects containing the total revenue for each payment method during this period.
   */
  revenue?: Array<Revenue> | undefined;
  invoiceId?: string | undefined;
  /**
   * The invoice reference, if the invoice has been created already.
   */
  invoiceReference?: string | null | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntitySettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payments?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  captures?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  refunds?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  chargebacks?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  invoice?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntitySettlement = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: SettlementStatus | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects â€” one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: { [k: string]: { [k: string]: Periods } } | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntitySettlementLinks | undefined;
};

/** @internal */
export const Rate$inboundSchema: z.ZodType<Rate, z.ZodTypeDef, unknown> = z
  .object({
    fixed: Amount$inboundSchema.optional(),
    percentage: Amount$inboundSchema.optional(),
  });

/** @internal */
export type Rate$Outbound = {
  fixed?: Amount$Outbound | undefined;
  percentage?: Amount$Outbound | undefined;
};

/** @internal */
export const Rate$outboundSchema: z.ZodType<Rate$Outbound, z.ZodTypeDef, Rate> =
  z.object({
    fixed: Amount$outboundSchema.optional(),
    percentage: Amount$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rate$ {
  /** @deprecated use `Rate$inboundSchema` instead. */
  export const inboundSchema = Rate$inboundSchema;
  /** @deprecated use `Rate$outboundSchema` instead. */
  export const outboundSchema = Rate$outboundSchema;
  /** @deprecated use `Rate$Outbound` instead. */
  export type Outbound = Rate$Outbound;
}

export function rateToJSON(rate: Rate): string {
  return JSON.stringify(Rate$outboundSchema.parse(rate));
}

export function rateFromJSON(
  jsonString: string,
): SafeParseResult<Rate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rate' from JSON`,
  );
}

/** @internal */
export const Cost$inboundSchema: z.ZodType<Cost, z.ZodTypeDef, unknown> = z
  .object({
    description: z.string().optional(),
    method: z.nullable(PaymentMethod$inboundSchema).optional(),
    count: z.number().int().optional(),
    rate: z.lazy(() => Rate$inboundSchema).optional(),
    amountNet: Amount$inboundSchema.optional(),
    amountVat: Amount$inboundSchema.optional(),
    amountGross: Amount$inboundSchema.optional(),
  });

/** @internal */
export type Cost$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  rate?: Rate$Outbound | undefined;
  amountNet?: Amount$Outbound | undefined;
  amountVat?: Amount$Outbound | undefined;
  amountGross?: Amount$Outbound | undefined;
};

/** @internal */
export const Cost$outboundSchema: z.ZodType<Cost$Outbound, z.ZodTypeDef, Cost> =
  z.object({
    description: z.string().optional(),
    method: z.nullable(PaymentMethod$outboundSchema).optional(),
    count: z.number().int().optional(),
    rate: z.lazy(() => Rate$outboundSchema).optional(),
    amountNet: Amount$outboundSchema.optional(),
    amountVat: Amount$outboundSchema.optional(),
    amountGross: Amount$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cost$ {
  /** @deprecated use `Cost$inboundSchema` instead. */
  export const inboundSchema = Cost$inboundSchema;
  /** @deprecated use `Cost$outboundSchema` instead. */
  export const outboundSchema = Cost$outboundSchema;
  /** @deprecated use `Cost$Outbound` instead. */
  export type Outbound = Cost$Outbound;
}

export function costToJSON(cost: Cost): string {
  return JSON.stringify(Cost$outboundSchema.parse(cost));
}

export function costFromJSON(
  jsonString: string,
): SafeParseResult<Cost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cost' from JSON`,
  );
}

/** @internal */
export const Revenue$inboundSchema: z.ZodType<Revenue, z.ZodTypeDef, unknown> =
  z.object({
    description: z.string().optional(),
    method: z.nullable(PaymentMethod$inboundSchema).optional(),
    count: z.number().int().optional(),
    amountNet: Amount$inboundSchema.optional(),
    amountVat: Amount$inboundSchema.optional(),
    amountGross: Amount$inboundSchema.optional(),
  });

/** @internal */
export type Revenue$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  amountNet?: Amount$Outbound | undefined;
  amountVat?: Amount$Outbound | undefined;
  amountGross?: Amount$Outbound | undefined;
};

/** @internal */
export const Revenue$outboundSchema: z.ZodType<
  Revenue$Outbound,
  z.ZodTypeDef,
  Revenue
> = z.object({
  description: z.string().optional(),
  method: z.nullable(PaymentMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: Amount$outboundSchema.optional(),
  amountVat: Amount$outboundSchema.optional(),
  amountGross: Amount$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Revenue$ {
  /** @deprecated use `Revenue$inboundSchema` instead. */
  export const inboundSchema = Revenue$inboundSchema;
  /** @deprecated use `Revenue$outboundSchema` instead. */
  export const outboundSchema = Revenue$outboundSchema;
  /** @deprecated use `Revenue$Outbound` instead. */
  export type Outbound = Revenue$Outbound;
}

export function revenueToJSON(revenue: Revenue): string {
  return JSON.stringify(Revenue$outboundSchema.parse(revenue));
}

export function revenueFromJSON(
  jsonString: string,
): SafeParseResult<Revenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Revenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Revenue' from JSON`,
  );
}

/** @internal */
export const Periods$inboundSchema: z.ZodType<Periods, z.ZodTypeDef, unknown> =
  z.object({
    costs: z.array(z.lazy(() => Cost$inboundSchema)).optional(),
    revenue: z.array(z.lazy(() => Revenue$inboundSchema)).optional(),
    invoiceId: z.string().optional(),
    invoiceReference: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Periods$Outbound = {
  costs?: Array<Cost$Outbound> | undefined;
  revenue?: Array<Revenue$Outbound> | undefined;
  invoiceId?: string | undefined;
  invoiceReference?: string | null | undefined;
};

/** @internal */
export const Periods$outboundSchema: z.ZodType<
  Periods$Outbound,
  z.ZodTypeDef,
  Periods
> = z.object({
  costs: z.array(z.lazy(() => Cost$outboundSchema)).optional(),
  revenue: z.array(z.lazy(() => Revenue$outboundSchema)).optional(),
  invoiceId: z.string().optional(),
  invoiceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Periods$ {
  /** @deprecated use `Periods$inboundSchema` instead. */
  export const inboundSchema = Periods$inboundSchema;
  /** @deprecated use `Periods$outboundSchema` instead. */
  export const outboundSchema = Periods$outboundSchema;
  /** @deprecated use `Periods$Outbound` instead. */
  export type Outbound = Periods$Outbound;
}

export function periodsToJSON(periods: Periods): string {
  return JSON.stringify(Periods$outboundSchema.parse(periods));
}

export function periodsFromJSON(
  jsonString: string,
): SafeParseResult<Periods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Periods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Periods' from JSON`,
  );
}

/** @internal */
export const EntitySettlementLinks$inboundSchema: z.ZodType<
  EntitySettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  payments: Url$inboundSchema.optional(),
  captures: Url$inboundSchema.optional(),
  refunds: Url$inboundSchema.optional(),
  chargebacks: Url$inboundSchema.optional(),
  invoice: z.nullable(UrlNullable$inboundSchema).optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntitySettlementLinks$Outbound = {
  self?: Url$Outbound | undefined;
  payments?: Url$Outbound | undefined;
  captures?: Url$Outbound | undefined;
  refunds?: Url$Outbound | undefined;
  chargebacks?: Url$Outbound | undefined;
  invoice?: UrlNullable$Outbound | null | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntitySettlementLinks$outboundSchema: z.ZodType<
  EntitySettlementLinks$Outbound,
  z.ZodTypeDef,
  EntitySettlementLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  payments: Url$outboundSchema.optional(),
  captures: Url$outboundSchema.optional(),
  refunds: Url$outboundSchema.optional(),
  chargebacks: Url$outboundSchema.optional(),
  invoice: z.nullable(UrlNullable$outboundSchema).optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitySettlementLinks$ {
  /** @deprecated use `EntitySettlementLinks$inboundSchema` instead. */
  export const inboundSchema = EntitySettlementLinks$inboundSchema;
  /** @deprecated use `EntitySettlementLinks$outboundSchema` instead. */
  export const outboundSchema = EntitySettlementLinks$outboundSchema;
  /** @deprecated use `EntitySettlementLinks$Outbound` instead. */
  export type Outbound = EntitySettlementLinks$Outbound;
}

export function entitySettlementLinksToJSON(
  entitySettlementLinks: EntitySettlementLinks,
): string {
  return JSON.stringify(
    EntitySettlementLinks$outboundSchema.parse(entitySettlementLinks),
  );
}

export function entitySettlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntitySettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitySettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitySettlementLinks' from JSON`,
  );
}

/** @internal */
export const EntitySettlement$inboundSchema: z.ZodType<
  EntitySettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: SettlementStatus$inboundSchema.optional(),
  amount: Amount$inboundSchema.optional(),
  balanceId: z.string().optional(),
  invoiceId: z.string().optional(),
  periods: z.record(z.record(z.lazy(() => Periods$inboundSchema))).optional(),
  _links: z.lazy(() => EntitySettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntitySettlement$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: Amount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | undefined;
  periods?: { [k: string]: { [k: string]: Periods$Outbound } } | undefined;
  _links?: EntitySettlementLinks$Outbound | undefined;
};

/** @internal */
export const EntitySettlement$outboundSchema: z.ZodType<
  EntitySettlement$Outbound,
  z.ZodTypeDef,
  EntitySettlement
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: SettlementStatus$outboundSchema.optional(),
  amount: Amount$outboundSchema.optional(),
  balanceId: z.string().optional(),
  invoiceId: z.string().optional(),
  periods: z.record(z.record(z.lazy(() => Periods$outboundSchema))).optional(),
  links: z.lazy(() => EntitySettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitySettlement$ {
  /** @deprecated use `EntitySettlement$inboundSchema` instead. */
  export const inboundSchema = EntitySettlement$inboundSchema;
  /** @deprecated use `EntitySettlement$outboundSchema` instead. */
  export const outboundSchema = EntitySettlement$outboundSchema;
  /** @deprecated use `EntitySettlement$Outbound` instead. */
  export type Outbound = EntitySettlement$Outbound;
}

export function entitySettlementToJSON(
  entitySettlement: EntitySettlement,
): string {
  return JSON.stringify(
    EntitySettlement$outboundSchema.parse(entitySettlement),
  );
}

export function entitySettlementFromJSON(
  jsonString: string,
): SafeParseResult<EntitySettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitySettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitySettlement' from JSON`,
  );
}
