/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  WebhookEventTypes,
  WebhookEventTypes$inboundSchema,
  WebhookEventTypes$outboundSchema,
} from "./webhookeventtypes.js";

/**
 * The subscription's current status.
 */
export const EntityWebhookStatus = {
  Enabled: "enabled",
  Blocked: "blocked",
  Disabled: "disabled",
  Deleted: "deleted",
} as const;
/**
 * The subscription's current status.
 */
export type EntityWebhookStatus = ClosedEnum<typeof EntityWebhookStatus>;

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityWebhookLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type EntityWebhook = {
  /**
   * Indicates the response contains a webhook subscription object.
   *
   * @remarks
   * Will always contain the string `webhook` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this subscription.
   */
  id: string;
  /**
   * The subscription's events destination.
   */
  url: string;
  /**
   * The identifier uniquely referring to the profile that created the subscription.
   */
  profileId: string | null;
  /**
   * The subscription's date time of creation.
   */
  createdAt: string;
  /**
   * The subscription's name.
   */
  name: string;
  /**
   * The events types that are subscribed.
   */
  eventTypes: Array<WebhookEventTypes>;
  /**
   * The subscription's current status.
   */
  status: EntityWebhookStatus;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: Mode;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityWebhookLinks;
};

/** @internal */
export const EntityWebhookStatus$inboundSchema: z.ZodNativeEnum<
  typeof EntityWebhookStatus
> = z.nativeEnum(EntityWebhookStatus);

/** @internal */
export const EntityWebhookStatus$outboundSchema: z.ZodNativeEnum<
  typeof EntityWebhookStatus
> = EntityWebhookStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityWebhookStatus$ {
  /** @deprecated use `EntityWebhookStatus$inboundSchema` instead. */
  export const inboundSchema = EntityWebhookStatus$inboundSchema;
  /** @deprecated use `EntityWebhookStatus$outboundSchema` instead. */
  export const outboundSchema = EntityWebhookStatus$outboundSchema;
}

/** @internal */
export const EntityWebhookLinks$inboundSchema: z.ZodType<
  EntityWebhookLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: Url$inboundSchema,
});

/** @internal */
export type EntityWebhookLinks$Outbound = {
  documentation: Url$Outbound;
};

/** @internal */
export const EntityWebhookLinks$outboundSchema: z.ZodType<
  EntityWebhookLinks$Outbound,
  z.ZodTypeDef,
  EntityWebhookLinks
> = z.object({
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityWebhookLinks$ {
  /** @deprecated use `EntityWebhookLinks$inboundSchema` instead. */
  export const inboundSchema = EntityWebhookLinks$inboundSchema;
  /** @deprecated use `EntityWebhookLinks$outboundSchema` instead. */
  export const outboundSchema = EntityWebhookLinks$outboundSchema;
  /** @deprecated use `EntityWebhookLinks$Outbound` instead. */
  export type Outbound = EntityWebhookLinks$Outbound;
}

export function entityWebhookLinksToJSON(
  entityWebhookLinks: EntityWebhookLinks,
): string {
  return JSON.stringify(
    EntityWebhookLinks$outboundSchema.parse(entityWebhookLinks),
  );
}

export function entityWebhookLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityWebhookLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityWebhookLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityWebhookLinks' from JSON`,
  );
}

/** @internal */
export const EntityWebhook$inboundSchema: z.ZodType<
  EntityWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  url: z.string(),
  profileId: z.nullable(z.string()),
  createdAt: z.string(),
  name: z.string(),
  eventTypes: z.array(WebhookEventTypes$inboundSchema),
  status: EntityWebhookStatus$inboundSchema,
  mode: Mode$inboundSchema,
  _links: z.lazy(() => EntityWebhookLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityWebhook$Outbound = {
  resource: string;
  id: string;
  url: string;
  profileId: string | null;
  createdAt: string;
  name: string;
  eventTypes: Array<string>;
  status: string;
  mode: string;
  _links: EntityWebhookLinks$Outbound;
};

/** @internal */
export const EntityWebhook$outboundSchema: z.ZodType<
  EntityWebhook$Outbound,
  z.ZodTypeDef,
  EntityWebhook
> = z.object({
  resource: z.string(),
  id: z.string(),
  url: z.string(),
  profileId: z.nullable(z.string()),
  createdAt: z.string(),
  name: z.string(),
  eventTypes: z.array(WebhookEventTypes$outboundSchema),
  status: EntityWebhookStatus$outboundSchema,
  mode: Mode$outboundSchema,
  links: z.lazy(() => EntityWebhookLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityWebhook$ {
  /** @deprecated use `EntityWebhook$inboundSchema` instead. */
  export const inboundSchema = EntityWebhook$inboundSchema;
  /** @deprecated use `EntityWebhook$outboundSchema` instead. */
  export const outboundSchema = EntityWebhook$outboundSchema;
  /** @deprecated use `EntityWebhook$Outbound` instead. */
  export type Outbound = EntityWebhook$Outbound;
}

export function entityWebhookToJSON(entityWebhook: EntityWebhook): string {
  return JSON.stringify(EntityWebhook$outboundSchema.parse(entityWebhook));
}

export function entityWebhookFromJSON(
  jsonString: string,
): SafeParseResult<EntityWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityWebhook' from JSON`,
  );
}
