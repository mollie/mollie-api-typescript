/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LocaleResponse,
  LocaleResponse$inboundSchema,
  LocaleResponse$outboundSchema,
} from "./localeresponse.js";

/**
 * Personal data of your customer.
 */
export type Owner = {
  /**
   * The email address of your customer.
   */
  email: string;
  /**
   * The given name (first name) of your customer.
   */
  givenName: string;
  /**
   * The family name (surname) of your customer.
   */
  familyName: string;
  /**
   * Allows you to preset the language to be used.
   */
  locale?: LocaleResponse | null | undefined;
};

/**
 * Address of the organization.
 */
export type EntityClientLinkAddress = {
  /**
   * The street name and house number of the organization.
   */
  streetAndNumber?: string | null | undefined;
  /**
   * The postal code of the organization. Required if a street address is provided and if the country has a postal
   *
   * @remarks
   * code system.
   */
  postalCode?: string | null | undefined;
  /**
   * The city of the organization. Required if a street address is provided.
   */
  city?: string | null | undefined;
  /**
   * The country of the address in
   *
   * @remarks
   * [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
};

export type EntityClientLink = {
  /**
   * Personal data of your customer.
   */
  owner?: Owner | undefined;
  /**
   * Name of the organization.
   */
  name?: string | undefined;
  /**
   * Address of the organization.
   */
  address?: EntityClientLinkAddress | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization, if based in the European Union. VAT numbers are verified against the
   *
   * @remarks
   * international registry *VIES*.
   */
  vatNumber?: string | null | undefined;
};

/** @internal */
export const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z
  .object({
    email: z.string(),
    givenName: z.string(),
    familyName: z.string(),
    locale: z.nullable(LocaleResponse$inboundSchema).optional(),
  });

/** @internal */
export type Owner$Outbound = {
  email: string;
  givenName: string;
  familyName: string;
  locale?: string | null | undefined;
};

/** @internal */
export const Owner$outboundSchema: z.ZodType<
  Owner$Outbound,
  z.ZodTypeDef,
  Owner
> = z.object({
  email: z.string(),
  givenName: z.string(),
  familyName: z.string(),
  locale: z.nullable(LocaleResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner$ {
  /** @deprecated use `Owner$inboundSchema` instead. */
  export const inboundSchema = Owner$inboundSchema;
  /** @deprecated use `Owner$outboundSchema` instead. */
  export const outboundSchema = Owner$outboundSchema;
  /** @deprecated use `Owner$Outbound` instead. */
  export type Outbound = Owner$Outbound;
}

export function ownerToJSON(owner: Owner): string {
  return JSON.stringify(Owner$outboundSchema.parse(owner));
}

export function ownerFromJSON(
  jsonString: string,
): SafeParseResult<Owner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Owner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Owner' from JSON`,
  );
}

/** @internal */
export const EntityClientLinkAddress$inboundSchema: z.ZodType<
  EntityClientLinkAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  streetAndNumber: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string(),
});

/** @internal */
export type EntityClientLinkAddress$Outbound = {
  streetAndNumber?: string | null | undefined;
  postalCode?: string | null | undefined;
  city?: string | null | undefined;
  country: string;
};

/** @internal */
export const EntityClientLinkAddress$outboundSchema: z.ZodType<
  EntityClientLinkAddress$Outbound,
  z.ZodTypeDef,
  EntityClientLinkAddress
> = z.object({
  streetAndNumber: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityClientLinkAddress$ {
  /** @deprecated use `EntityClientLinkAddress$inboundSchema` instead. */
  export const inboundSchema = EntityClientLinkAddress$inboundSchema;
  /** @deprecated use `EntityClientLinkAddress$outboundSchema` instead. */
  export const outboundSchema = EntityClientLinkAddress$outboundSchema;
  /** @deprecated use `EntityClientLinkAddress$Outbound` instead. */
  export type Outbound = EntityClientLinkAddress$Outbound;
}

export function entityClientLinkAddressToJSON(
  entityClientLinkAddress: EntityClientLinkAddress,
): string {
  return JSON.stringify(
    EntityClientLinkAddress$outboundSchema.parse(entityClientLinkAddress),
  );
}

export function entityClientLinkAddressFromJSON(
  jsonString: string,
): SafeParseResult<EntityClientLinkAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityClientLinkAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityClientLinkAddress' from JSON`,
  );
}

/** @internal */
export const EntityClientLink$inboundSchema: z.ZodType<
  EntityClientLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner: z.lazy(() => Owner$inboundSchema).optional(),
  name: z.string().optional(),
  address: z.lazy(() => EntityClientLinkAddress$inboundSchema).optional(),
  registrationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
});

/** @internal */
export type EntityClientLink$Outbound = {
  owner?: Owner$Outbound | undefined;
  name?: string | undefined;
  address?: EntityClientLinkAddress$Outbound | undefined;
  registrationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
};

/** @internal */
export const EntityClientLink$outboundSchema: z.ZodType<
  EntityClientLink$Outbound,
  z.ZodTypeDef,
  EntityClientLink
> = z.object({
  owner: z.lazy(() => Owner$outboundSchema).optional(),
  name: z.string().optional(),
  address: z.lazy(() => EntityClientLinkAddress$outboundSchema).optional(),
  registrationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityClientLink$ {
  /** @deprecated use `EntityClientLink$inboundSchema` instead. */
  export const inboundSchema = EntityClientLink$inboundSchema;
  /** @deprecated use `EntityClientLink$outboundSchema` instead. */
  export const outboundSchema = EntityClientLink$outboundSchema;
  /** @deprecated use `EntityClientLink$Outbound` instead. */
  export type Outbound = EntityClientLink$Outbound;
}

export function entityClientLinkToJSON(
  entityClientLink: EntityClientLink,
): string {
  return JSON.stringify(
    EntityClientLink$outboundSchema.parse(entityClientLink),
  );
}

export function entityClientLinkFromJSON(
  jsonString: string,
): SafeParseResult<EntityClientLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityClientLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityClientLink' from JSON`,
  );
}
