/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  EntityCapabilityRequirement,
  EntityCapabilityRequirement$inboundSchema,
  EntityCapabilityRequirement$Outbound,
  EntityCapabilityRequirement$outboundSchema,
} from "./entitycapabilityrequirement.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const EntityCapabilityStatus = {
  Unrequested: "unrequested",
  Enabled: "enabled",
  Disabled: "disabled",
  Pending: "pending",
} as const;
export type EntityCapabilityStatus = ClosedEnum<typeof EntityCapabilityStatus>;

export const StatusReasonEnum = {
  RequirementPastDue: "requirement-past-due",
  OnboardingInformationNeeded: "onboarding-information-needed",
} as const;
export type StatusReasonEnum = ClosedEnum<typeof StatusReasonEnum>;

export type EntityCapability = {
  /**
   * Always the word `capability` for this resource type.
   */
  resource?: string | undefined;
  /**
   * A unique name for this capability like `payments` / `settlements`.
   */
  name?: string | undefined;
  status?: EntityCapabilityStatus | undefined;
  statusReason?: StatusReasonEnum | null | undefined;
  requirements?: Array<EntityCapabilityRequirement> | undefined;
};

/** @internal */
export const EntityCapabilityStatus$inboundSchema: z.ZodNativeEnum<
  typeof EntityCapabilityStatus
> = z.nativeEnum(EntityCapabilityStatus);

/** @internal */
export const EntityCapabilityStatus$outboundSchema: z.ZodNativeEnum<
  typeof EntityCapabilityStatus
> = EntityCapabilityStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCapabilityStatus$ {
  /** @deprecated use `EntityCapabilityStatus$inboundSchema` instead. */
  export const inboundSchema = EntityCapabilityStatus$inboundSchema;
  /** @deprecated use `EntityCapabilityStatus$outboundSchema` instead. */
  export const outboundSchema = EntityCapabilityStatus$outboundSchema;
}

/** @internal */
export const StatusReasonEnum$inboundSchema: z.ZodNativeEnum<
  typeof StatusReasonEnum
> = z.nativeEnum(StatusReasonEnum);

/** @internal */
export const StatusReasonEnum$outboundSchema: z.ZodNativeEnum<
  typeof StatusReasonEnum
> = StatusReasonEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusReasonEnum$ {
  /** @deprecated use `StatusReasonEnum$inboundSchema` instead. */
  export const inboundSchema = StatusReasonEnum$inboundSchema;
  /** @deprecated use `StatusReasonEnum$outboundSchema` instead. */
  export const outboundSchema = StatusReasonEnum$outboundSchema;
}

/** @internal */
export const EntityCapability$inboundSchema: z.ZodType<
  EntityCapability,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: EntityCapabilityStatus$inboundSchema.optional(),
  statusReason: z.nullable(StatusReasonEnum$inboundSchema).optional(),
  requirements: z.array(EntityCapabilityRequirement$inboundSchema).optional(),
});

/** @internal */
export type EntityCapability$Outbound = {
  resource?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  statusReason?: string | null | undefined;
  requirements?: Array<EntityCapabilityRequirement$Outbound> | undefined;
};

/** @internal */
export const EntityCapability$outboundSchema: z.ZodType<
  EntityCapability$Outbound,
  z.ZodTypeDef,
  EntityCapability
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: EntityCapabilityStatus$outboundSchema.optional(),
  statusReason: z.nullable(StatusReasonEnum$outboundSchema).optional(),
  requirements: z.array(EntityCapabilityRequirement$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCapability$ {
  /** @deprecated use `EntityCapability$inboundSchema` instead. */
  export const inboundSchema = EntityCapability$inboundSchema;
  /** @deprecated use `EntityCapability$outboundSchema` instead. */
  export const outboundSchema = EntityCapability$outboundSchema;
  /** @deprecated use `EntityCapability$Outbound` instead. */
  export type Outbound = EntityCapability$Outbound;
}

export function entityCapabilityToJSON(
  entityCapability: EntityCapability,
): string {
  return JSON.stringify(
    EntityCapability$outboundSchema.parse(entityCapability),
  );
}

export function entityCapabilityFromJSON(
  jsonString: string,
): SafeParseResult<EntityCapability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityCapability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityCapability' from JSON`,
  );
}
