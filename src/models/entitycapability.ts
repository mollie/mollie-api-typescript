/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CapabilityStatus,
  CapabilityStatus$inboundSchema,
  CapabilityStatus$outboundSchema,
} from "./capabilitystatus.js";
import {
  CapabilityStatusReason,
  CapabilityStatusReason$inboundSchema,
  CapabilityStatusReason$outboundSchema,
} from "./capabilitystatusreason.js";
import {
  EntityCapabilityRequirement,
  EntityCapabilityRequirement$inboundSchema,
  EntityCapabilityRequirement$Outbound,
  EntityCapabilityRequirement$outboundSchema,
} from "./entitycapabilityrequirement.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EntityCapability = {
  /**
   * Always the word `capability` for this resource type.
   */
  resource: string;
  /**
   * A unique name for this capability like `payments` / `settlements`.
   */
  name: string;
  status: CapabilityStatus;
  statusReason: CapabilityStatusReason | null;
  requirements: Array<EntityCapabilityRequirement>;
};

/** @internal */
export const EntityCapability$inboundSchema: z.ZodType<
  EntityCapability,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  name: z.string(),
  status: CapabilityStatus$inboundSchema,
  statusReason: z.nullable(CapabilityStatusReason$inboundSchema),
  requirements: z.array(EntityCapabilityRequirement$inboundSchema),
});

/** @internal */
export type EntityCapability$Outbound = {
  resource: string;
  name: string;
  status: string;
  statusReason: string | null;
  requirements: Array<EntityCapabilityRequirement$Outbound>;
};

/** @internal */
export const EntityCapability$outboundSchema: z.ZodType<
  EntityCapability$Outbound,
  z.ZodTypeDef,
  EntityCapability
> = z.object({
  resource: z.string(),
  name: z.string(),
  status: CapabilityStatus$outboundSchema,
  statusReason: z.nullable(CapabilityStatusReason$outboundSchema),
  requirements: z.array(EntityCapabilityRequirement$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityCapability$ {
  /** @deprecated use `EntityCapability$inboundSchema` instead. */
  export const inboundSchema = EntityCapability$inboundSchema;
  /** @deprecated use `EntityCapability$outboundSchema` instead. */
  export const outboundSchema = EntityCapability$outboundSchema;
  /** @deprecated use `EntityCapability$Outbound` instead. */
  export type Outbound = EntityCapability$Outbound;
}

export function entityCapabilityToJSON(
  entityCapability: EntityCapability,
): string {
  return JSON.stringify(
    EntityCapability$outboundSchema.parse(entityCapability),
  );
}

export function entityCapabilityFromJSON(
  jsonString: string,
): SafeParseResult<EntityCapability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityCapability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityCapability' from JSON`,
  );
}
