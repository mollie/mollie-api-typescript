/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * The subscription's current status.
 */
export const WebhookStatus = {
  Enabled: "enabled",
  Blocked: "blocked",
  Disabled: "disabled",
  Deleted: "deleted",
} as const;
/**
 * The subscription's current status.
 */
export type WebhookStatus = OpenEnum<typeof WebhookStatus>;

/** @internal */
export const WebhookStatus$inboundSchema: z.ZodType<
  WebhookStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(WebhookStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const WebhookStatus$outboundSchema: z.ZodType<
  WebhookStatus,
  z.ZodTypeDef,
  WebhookStatus
> = z.union([
  z.nativeEnum(WebhookStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookStatus$ {
  /** @deprecated use `WebhookStatus$inboundSchema` instead. */
  export const inboundSchema = WebhookStatus$inboundSchema;
  /** @deprecated use `WebhookStatus$outboundSchema` instead. */
  export const outboundSchema = WebhookStatus$outboundSchema;
}
