/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SalesInvoicePaymentDetailsSource,
  SalesInvoicePaymentDetailsSource$inboundSchema,
  SalesInvoicePaymentDetailsSource$outboundSchema,
} from "./salesinvoicepaymentdetailssource.js";

export type SalesInvoicePaymentDetails = {
  /**
   * The way through which the invoice is to be set to paid.
   */
  source: SalesInvoicePaymentDetailsSource;
  /**
   * A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
   *
   * @remarks
   * `payment`.
   */
  sourceReference?: string | null | undefined;
};

/** @internal */
export const SalesInvoicePaymentDetails$inboundSchema: z.ZodType<
  SalesInvoicePaymentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: SalesInvoicePaymentDetailsSource$inboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type SalesInvoicePaymentDetails$Outbound = {
  source: string;
  sourceReference?: string | null | undefined;
};

/** @internal */
export const SalesInvoicePaymentDetails$outboundSchema: z.ZodType<
  SalesInvoicePaymentDetails$Outbound,
  z.ZodTypeDef,
  SalesInvoicePaymentDetails
> = z.object({
  source: SalesInvoicePaymentDetailsSource$outboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoicePaymentDetails$ {
  /** @deprecated use `SalesInvoicePaymentDetails$inboundSchema` instead. */
  export const inboundSchema = SalesInvoicePaymentDetails$inboundSchema;
  /** @deprecated use `SalesInvoicePaymentDetails$outboundSchema` instead. */
  export const outboundSchema = SalesInvoicePaymentDetails$outboundSchema;
  /** @deprecated use `SalesInvoicePaymentDetails$Outbound` instead. */
  export type Outbound = SalesInvoicePaymentDetails$Outbound;
}

export function salesInvoicePaymentDetailsToJSON(
  salesInvoicePaymentDetails: SalesInvoicePaymentDetails,
): string {
  return JSON.stringify(
    SalesInvoicePaymentDetails$outboundSchema.parse(salesInvoicePaymentDetails),
  );
}

export function salesInvoicePaymentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoicePaymentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoicePaymentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoicePaymentDetails' from JSON`,
  );
}
