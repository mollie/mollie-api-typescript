/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A machine-readable code that indicates the reason for the payment's status.
 */
export const Code = {
  ApprovedOrCompletedSuccessfully: "approved_or_completed_successfully",
  ReferToCardIssuer: "refer_to_card_issuer",
  InvalidMerchant: "invalid_merchant",
  CaptureCard: "capture_card",
  DoNotHonor: "do_not_honor",
  Error: "error",
  PartialApproval: "partial_approval",
  InvalidTransaction: "invalid_transaction",
  InvalidAmount: "invalid_amount",
  InvalidIssuer: "invalid_issuer",
  LostCard: "lost_card",
  StolenCard: "stolen_card",
  InsufficientFunds: "insufficient_funds",
  ExpiredCard: "expired_card",
  InvalidPin: "invalid_pin",
  TransactionNotPermittedToCardholder:
    "transaction_not_permitted_to_cardholder",
  TransactionNotAllowedAtTerminal: "transaction_not_allowed_at_terminal",
  ExceedsWithdrawalAmountLimit: "exceeds_withdrawal_amount_limit",
  RestrictedCard: "restricted_card",
  SecurityViolation: "security_violation",
  ExceedsWithdrawalCountLimit: "exceeds_withdrawal_count_limit",
  AllowableNumberOfPinTriesExceeded: "allowable_number_of_pin_tries_exceeded",
  NoReasonToDecline: "no_reason_to_decline",
  CannotVerifyPin: "cannot_verify_pin",
  IssuerUnavailable: "issuer_unavailable",
  UnableToRouteTransaction: "unable_to_route_transaction",
  DuplicateTransaction: "duplicate_transaction",
  SystemMalfunction: "system_malfunction",
  HonorWithId: "honor_with_id",
  InvalidCardNumber: "invalid_card_number",
  FormatError: "format_error",
  ContactCardIssuer: "contact_card_issuer",
  PinNotChanged: "pin_not_changed",
  InvalidNonexistentToAccountSpecified:
    "invalid_nonexistent_to_account_specified",
  InvalidNonexistentFromAccountSpecified:
    "invalid_nonexistent_from_account_specified",
  InvalidNonexistentAccountSpecified: "invalid_nonexistent_account_specified",
  LifecycleRelated: "lifecycle_related",
  DomesticDebitTransactionNotAllowed: "domestic_debit_transaction_not_allowed",
  PolicyRelated: "policy_related",
  FraudSecurityRelated: "fraud_security_related",
  InvalidAuthorizationLifeCycle: "invalid_authorization_life_cycle",
  PurchaseAmountOnlyNoCashBackAllowed:
    "purchase_amount_only_no_cash_back_allowed",
  CryptographicFailure: "cryptographic_failure",
  UnacceptablePin: "unacceptable_pin",
  ReferToCardIssuerSpecialCondition: "refer_to_card_issuer_special_condition",
  PickUpCardSpecialCondition: "pick_up_card_special_condition",
  VipApproval: "vip_approval",
  InvalidAccountNumber: "invalid_account_number",
  ReEnterTransaction: "re_enter_transaction",
  NoActionTaken: "no_action_taken",
  UnableToLocateRecord: "unable_to_locate_record",
  FileTemporarilyUnavailable: "file_temporarily_unavailable",
  NoCreditAccount: "no_credit_account",
  ClosedAccount: "closed_account",
  NoCheckingAccount: "no_checking_account",
  NoSavingsAccount: "no_savings_account",
  SuspectedFraud: "suspected_fraud",
  TransactionDoesNotFulfillAmlRequirement:
    "transaction_does_not_fulfill_aml_requirement",
  PinDataRequired: "pin_data_required",
  UnableToLocatePreviousMessage: "unable_to_locate_previous_message",
  PreviousMessageLocatedInconsistentData:
    "previous_message_located_inconsistent_data",
  BlockedFirstUsed: "blocked_first_used",
  TransactionReversed: "transaction_reversed",
  CreditIssuerUnavailable: "credit_issuer_unavailable",
  PinCryptographicErrorFound: "pin_cryptographic_error_found",
  NegativeOnlineCamResult: "negative_online_cam_result",
  ViolationOfLaw: "violation_of_law",
  ForceStip: "force_stip",
  CashServiceNotAvailable: "cash_service_not_available",
  CashbackRequestExceedsIssuerLimit: "cashback_request_exceeds_issuer_limit",
  DeclineForCvv2Failure: "decline_for_cvv2_failure",
  TransactionAmountExceedsPreAuthorizedAmount:
    "transaction_amount_exceeds_pre_authorized_amount",
  InvalidBillerInformation: "invalid_biller_information",
  PinChangeUnblockRequestDeclined: "pin_change_unblock_request_declined",
  UnsafePin: "unsafe_pin",
  CardAuthenticationFailed: "card_authentication_failed",
  StopPaymentOrder: "stop_payment_order",
  RevocationOfAuthorization: "revocation_of_authorization",
  RevocationOfAllAuthorizations: "revocation_of_all_authorizations",
  ForwardToIssuerXa: "forward_to_issuer_xa",
  ForwardToIssuerXd: "forward_to_issuer_xd",
  UnableToGoOnline: "unable_to_go_online",
  AdditionalCustomerAuthenticationRequired:
    "additional_customer_authentication_required",
  MerchantIdNotFound: "merchant_id_not_found",
  MerchantAccountClosed: "merchant_account_closed",
  TerminalIdNotFound: "terminal_id_not_found",
  TerminalClosed: "terminal_closed",
  InvalidCategoryCode: "invalid_category_code",
  InvalidCurrency: "invalid_currency",
  MissingCvv2Cvc2: "missing_cvv2_cvc2",
  Cvv2NotAllowed: "cvv2_not_allowed",
  MerchantNotRegisteredVbv: "merchant_not_registered_vbv",
  MerchantNotRegisteredForAmex: "merchant_not_registered_for_amex",
  TransactionNotPermittedAtTerminal: "transaction_not_permitted_at_terminal",
  AgreementTerminalNotRelated: "agreement_terminal_not_related",
  InvalidProcessorId: "invalid_processor_id",
  InvalidMerchantData: "invalid_merchant_data",
  SubMerchantAccountClosed: "sub_merchant_account_closed",
  TerminalBusy: "terminal_busy",
  TerminalUnreachable: "terminal_unreachable",
  ServiceFailed: "service_failed",
  InvalidOperation: "invalid_operation",
  AuthorizationError: "authorization_error",
  LoginFailedWithoutReason: "login_failed_without_reason",
  InvalidRetailer: "invalid_retailer",
  CardDoesNotExist: "card_does_not_exist",
  CardIsBlocked: "card_is_blocked",
  InvalidCardId: "invalid_card_id",
  CardIsTransferred: "card_is_transferred",
  CardIsNotActive: "card_is_not_active",
  IncorrectPurchaseValue: "incorrect_purchase_value",
  CardNotAvailable: "card_not_available",
  WrongCurrency: "wrong_currency",
  LoginFailedUnknownUser: "login_failed_unknown_user",
  LoginFailedInvalidPassword: "login_failed_invalid_password",
  InvalidEanCode: "invalid_ean_code",
} as const;
/**
 * A machine-readable code that indicates the reason for the payment's status.
 */
export type Code = ClosedEnum<typeof Code>;

/**
 * This object offers details about the status of a payment. Currently it is only available for point-of-sale
 *
 * @remarks
 * payments.
 *
 * You can find more information about the possible values of this object on
 * [this page](status-reasons).**
 */
export type StatusReason = {
  code: Code;
  /**
   * A description of the status reason, localized according to the payment `locale`.
   */
  message: string;
};

/** @internal */
export const Code$inboundSchema: z.ZodNativeEnum<typeof Code> = z.nativeEnum(
  Code,
);

/** @internal */
export const Code$outboundSchema: z.ZodNativeEnum<typeof Code> =
  Code$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
  /** @deprecated use `Code$inboundSchema` instead. */
  export const inboundSchema = Code$inboundSchema;
  /** @deprecated use `Code$outboundSchema` instead. */
  export const outboundSchema = Code$outboundSchema;
}

/** @internal */
export const StatusReason$inboundSchema: z.ZodType<
  StatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: Code$inboundSchema,
  message: z.string(),
});

/** @internal */
export type StatusReason$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const StatusReason$outboundSchema: z.ZodType<
  StatusReason$Outbound,
  z.ZodTypeDef,
  StatusReason
> = z.object({
  code: Code$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusReason$ {
  /** @deprecated use `StatusReason$inboundSchema` instead. */
  export const inboundSchema = StatusReason$inboundSchema;
  /** @deprecated use `StatusReason$outboundSchema` instead. */
  export const outboundSchema = StatusReason$outboundSchema;
  /** @deprecated use `StatusReason$Outbound` instead. */
  export type Outbound = StatusReason$Outbound;
}

export function statusReasonToJSON(statusReason: StatusReason): string {
  return JSON.stringify(StatusReason$outboundSchema.parse(statusReason));
}

export function statusReasonFromJSON(
  jsonString: string,
): SafeParseResult<StatusReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusReason' from JSON`,
  );
}
