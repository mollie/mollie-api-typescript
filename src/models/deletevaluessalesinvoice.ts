/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DeleteValuesSalesInvoice = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/** @internal */
export const DeleteValuesSalesInvoice$inboundSchema: z.ZodType<
  DeleteValuesSalesInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type DeleteValuesSalesInvoice$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const DeleteValuesSalesInvoice$outboundSchema: z.ZodType<
  DeleteValuesSalesInvoice$Outbound,
  z.ZodTypeDef,
  DeleteValuesSalesInvoice
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteValuesSalesInvoice$ {
  /** @deprecated use `DeleteValuesSalesInvoice$inboundSchema` instead. */
  export const inboundSchema = DeleteValuesSalesInvoice$inboundSchema;
  /** @deprecated use `DeleteValuesSalesInvoice$outboundSchema` instead. */
  export const outboundSchema = DeleteValuesSalesInvoice$outboundSchema;
  /** @deprecated use `DeleteValuesSalesInvoice$Outbound` instead. */
  export type Outbound = DeleteValuesSalesInvoice$Outbound;
}

export function deleteValuesSalesInvoiceToJSON(
  deleteValuesSalesInvoice: DeleteValuesSalesInvoice,
): string {
  return JSON.stringify(
    DeleteValuesSalesInvoice$outboundSchema.parse(deleteValuesSalesInvoice),
  );
}

export function deleteValuesSalesInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<DeleteValuesSalesInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteValuesSalesInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteValuesSalesInvoice' from JSON`,
  );
}
