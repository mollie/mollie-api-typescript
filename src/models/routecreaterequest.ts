/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RouteDestinationType,
  RouteDestinationType$inboundSchema,
  RouteDestinationType$outboundSchema,
} from "./routedestinationtype.js";

/**
 * The destination of the route.
 */
export type RouteCreateRequestDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   */
  type: RouteDestinationType;
  organizationId: string;
};

export type RouteCreateRequest = {
  id?: string | undefined;
  paymentId?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  /**
   * The description of the route. This description is shown in the reports.
   */
  description?: string | undefined;
  /**
   * The destination of the route.
   */
  destination?: RouteCreateRequestDestination | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

/** @internal */
export const RouteCreateRequestDestination$inboundSchema: z.ZodType<
  RouteCreateRequestDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouteDestinationType$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type RouteCreateRequestDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const RouteCreateRequestDestination$outboundSchema: z.ZodType<
  RouteCreateRequestDestination$Outbound,
  z.ZodTypeDef,
  RouteCreateRequestDestination
> = z.object({
  type: RouteDestinationType$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteCreateRequestDestination$ {
  /** @deprecated use `RouteCreateRequestDestination$inboundSchema` instead. */
  export const inboundSchema = RouteCreateRequestDestination$inboundSchema;
  /** @deprecated use `RouteCreateRequestDestination$outboundSchema` instead. */
  export const outboundSchema = RouteCreateRequestDestination$outboundSchema;
  /** @deprecated use `RouteCreateRequestDestination$Outbound` instead. */
  export type Outbound = RouteCreateRequestDestination$Outbound;
}

export function routeCreateRequestDestinationToJSON(
  routeCreateRequestDestination: RouteCreateRequestDestination,
): string {
  return JSON.stringify(
    RouteCreateRequestDestination$outboundSchema.parse(
      routeCreateRequestDestination,
    ),
  );
}

export function routeCreateRequestDestinationFromJSON(
  jsonString: string,
): SafeParseResult<RouteCreateRequestDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteCreateRequestDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteCreateRequestDestination' from JSON`,
  );
}

/** @internal */
export const RouteCreateRequest$inboundSchema: z.ZodType<
  RouteCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$inboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => RouteCreateRequestDestination$inboundSchema)
    .optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type RouteCreateRequest$Outbound = {
  id?: string | undefined;
  paymentId?: string | undefined;
  amount?: Amount$Outbound | undefined;
  description?: string | undefined;
  destination?: RouteCreateRequestDestination$Outbound | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const RouteCreateRequest$outboundSchema: z.ZodType<
  RouteCreateRequest$Outbound,
  z.ZodTypeDef,
  RouteCreateRequest
> = z.object({
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$outboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => RouteCreateRequestDestination$outboundSchema)
    .optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteCreateRequest$ {
  /** @deprecated use `RouteCreateRequest$inboundSchema` instead. */
  export const inboundSchema = RouteCreateRequest$inboundSchema;
  /** @deprecated use `RouteCreateRequest$outboundSchema` instead. */
  export const outboundSchema = RouteCreateRequest$outboundSchema;
  /** @deprecated use `RouteCreateRequest$Outbound` instead. */
  export type Outbound = RouteCreateRequest$Outbound;
}

export function routeCreateRequestToJSON(
  routeCreateRequest: RouteCreateRequest,
): string {
  return JSON.stringify(
    RouteCreateRequest$outboundSchema.parse(routeCreateRequest),
  );
}

export function routeCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RouteCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteCreateRequest' from JSON`,
  );
}
