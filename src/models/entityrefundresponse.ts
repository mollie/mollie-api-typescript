/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  AmountNullable,
  AmountNullable$inboundSchema,
  AmountNullable$Outbound,
  AmountNullable$outboundSchema,
} from "./amountnullable.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  RefundExternalReferenceTypeResponse,
  RefundExternalReferenceTypeResponse$inboundSchema,
  RefundExternalReferenceTypeResponse$outboundSchema,
} from "./refundexternalreferencetyperesponse.js";
import {
  RefundRoutingReversalsSourceType,
  RefundRoutingReversalsSourceType$inboundSchema,
  RefundRoutingReversalsSourceType$outboundSchema,
} from "./refundroutingreversalssourcetype.js";
import {
  RefundStatus,
  RefundStatus$inboundSchema,
  RefundStatus$outboundSchema,
} from "./refundstatus.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  UrlNullable,
  UrlNullable$inboundSchema,
  UrlNullable$Outbound,
  UrlNullable$outboundSchema,
} from "./urlnullable.js";

export type EntityRefundResponseExternalReference = {
  /**
   * Specifies the reference type
   */
  type?: RefundExternalReferenceTypeResponse | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * Where the funds will be pulled back from.
 */
export type EntityRefundResponseSource = {
  /**
   * The type of source. Currently only the source type `organization` is supported.
   */
  type?: RefundRoutingReversalsSourceType | undefined;
  organizationId?: string | undefined;
};

export type EntityRefundResponseRoutingReversal = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: EntityRefundResponseSource | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityRefundResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payment: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  settlement?: UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type EntityRefundResponse = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource: string;
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: Mode;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount: Amount;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  settlementAmount?: AmountNullable | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata: Metadata | null;
  paymentId?: string | undefined;
  settlementId?: string | undefined;
  status: RefundStatus;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  externalReference?: EntityRefundResponseExternalReference | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
   * needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?:
    | Array<EntityRefundResponseRoutingReversal>
    | null
    | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityRefundResponseLinks;
};

/** @internal */
export const EntityRefundResponseExternalReference$inboundSchema: z.ZodType<
  EntityRefundResponseExternalReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RefundExternalReferenceTypeResponse$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type EntityRefundResponseExternalReference$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const EntityRefundResponseExternalReference$outboundSchema: z.ZodType<
  EntityRefundResponseExternalReference$Outbound,
  z.ZodTypeDef,
  EntityRefundResponseExternalReference
> = z.object({
  type: RefundExternalReferenceTypeResponse$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRefundResponseExternalReference$ {
  /** @deprecated use `EntityRefundResponseExternalReference$inboundSchema` instead. */
  export const inboundSchema =
    EntityRefundResponseExternalReference$inboundSchema;
  /** @deprecated use `EntityRefundResponseExternalReference$outboundSchema` instead. */
  export const outboundSchema =
    EntityRefundResponseExternalReference$outboundSchema;
  /** @deprecated use `EntityRefundResponseExternalReference$Outbound` instead. */
  export type Outbound = EntityRefundResponseExternalReference$Outbound;
}

export function entityRefundResponseExternalReferenceToJSON(
  entityRefundResponseExternalReference: EntityRefundResponseExternalReference,
): string {
  return JSON.stringify(
    EntityRefundResponseExternalReference$outboundSchema.parse(
      entityRefundResponseExternalReference,
    ),
  );
}

export function entityRefundResponseExternalReferenceFromJSON(
  jsonString: string,
): SafeParseResult<EntityRefundResponseExternalReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EntityRefundResponseExternalReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRefundResponseExternalReference' from JSON`,
  );
}

/** @internal */
export const EntityRefundResponseSource$inboundSchema: z.ZodType<
  EntityRefundResponseSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RefundRoutingReversalsSourceType$inboundSchema.optional(),
  organizationId: z.string().optional(),
});

/** @internal */
export type EntityRefundResponseSource$Outbound = {
  type?: string | undefined;
  organizationId?: string | undefined;
};

/** @internal */
export const EntityRefundResponseSource$outboundSchema: z.ZodType<
  EntityRefundResponseSource$Outbound,
  z.ZodTypeDef,
  EntityRefundResponseSource
> = z.object({
  type: RefundRoutingReversalsSourceType$outboundSchema.optional(),
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRefundResponseSource$ {
  /** @deprecated use `EntityRefundResponseSource$inboundSchema` instead. */
  export const inboundSchema = EntityRefundResponseSource$inboundSchema;
  /** @deprecated use `EntityRefundResponseSource$outboundSchema` instead. */
  export const outboundSchema = EntityRefundResponseSource$outboundSchema;
  /** @deprecated use `EntityRefundResponseSource$Outbound` instead. */
  export type Outbound = EntityRefundResponseSource$Outbound;
}

export function entityRefundResponseSourceToJSON(
  entityRefundResponseSource: EntityRefundResponseSource,
): string {
  return JSON.stringify(
    EntityRefundResponseSource$outboundSchema.parse(entityRefundResponseSource),
  );
}

export function entityRefundResponseSourceFromJSON(
  jsonString: string,
): SafeParseResult<EntityRefundResponseSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityRefundResponseSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRefundResponseSource' from JSON`,
  );
}

/** @internal */
export const EntityRefundResponseRoutingReversal$inboundSchema: z.ZodType<
  EntityRefundResponseRoutingReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: Amount$inboundSchema.optional(),
  source: z.lazy(() => EntityRefundResponseSource$inboundSchema).optional(),
});

/** @internal */
export type EntityRefundResponseRoutingReversal$Outbound = {
  amount?: Amount$Outbound | undefined;
  source?: EntityRefundResponseSource$Outbound | undefined;
};

/** @internal */
export const EntityRefundResponseRoutingReversal$outboundSchema: z.ZodType<
  EntityRefundResponseRoutingReversal$Outbound,
  z.ZodTypeDef,
  EntityRefundResponseRoutingReversal
> = z.object({
  amount: Amount$outboundSchema.optional(),
  source: z.lazy(() => EntityRefundResponseSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRefundResponseRoutingReversal$ {
  /** @deprecated use `EntityRefundResponseRoutingReversal$inboundSchema` instead. */
  export const inboundSchema =
    EntityRefundResponseRoutingReversal$inboundSchema;
  /** @deprecated use `EntityRefundResponseRoutingReversal$outboundSchema` instead. */
  export const outboundSchema =
    EntityRefundResponseRoutingReversal$outboundSchema;
  /** @deprecated use `EntityRefundResponseRoutingReversal$Outbound` instead. */
  export type Outbound = EntityRefundResponseRoutingReversal$Outbound;
}

export function entityRefundResponseRoutingReversalToJSON(
  entityRefundResponseRoutingReversal: EntityRefundResponseRoutingReversal,
): string {
  return JSON.stringify(
    EntityRefundResponseRoutingReversal$outboundSchema.parse(
      entityRefundResponseRoutingReversal,
    ),
  );
}

export function entityRefundResponseRoutingReversalFromJSON(
  jsonString: string,
): SafeParseResult<EntityRefundResponseRoutingReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EntityRefundResponseRoutingReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRefundResponseRoutingReversal' from JSON`,
  );
}

/** @internal */
export const EntityRefundResponseLinks$inboundSchema: z.ZodType<
  EntityRefundResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  payment: Url$inboundSchema,
  settlement: z.nullable(UrlNullable$inboundSchema).optional(),
  documentation: Url$inboundSchema,
});

/** @internal */
export type EntityRefundResponseLinks$Outbound = {
  self: Url$Outbound;
  payment: Url$Outbound;
  settlement?: UrlNullable$Outbound | null | undefined;
  documentation: Url$Outbound;
};

/** @internal */
export const EntityRefundResponseLinks$outboundSchema: z.ZodType<
  EntityRefundResponseLinks$Outbound,
  z.ZodTypeDef,
  EntityRefundResponseLinks
> = z.object({
  self: Url$outboundSchema,
  payment: Url$outboundSchema,
  settlement: z.nullable(UrlNullable$outboundSchema).optional(),
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRefundResponseLinks$ {
  /** @deprecated use `EntityRefundResponseLinks$inboundSchema` instead. */
  export const inboundSchema = EntityRefundResponseLinks$inboundSchema;
  /** @deprecated use `EntityRefundResponseLinks$outboundSchema` instead. */
  export const outboundSchema = EntityRefundResponseLinks$outboundSchema;
  /** @deprecated use `EntityRefundResponseLinks$Outbound` instead. */
  export type Outbound = EntityRefundResponseLinks$Outbound;
}

export function entityRefundResponseLinksToJSON(
  entityRefundResponseLinks: EntityRefundResponseLinks,
): string {
  return JSON.stringify(
    EntityRefundResponseLinks$outboundSchema.parse(entityRefundResponseLinks),
  );
}

export function entityRefundResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityRefundResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityRefundResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRefundResponseLinks' from JSON`,
  );
}

/** @internal */
export const EntityRefundResponse$inboundSchema: z.ZodType<
  EntityRefundResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: Mode$inboundSchema,
  description: z.string(),
  amount: Amount$inboundSchema,
  settlementAmount: z.nullable(AmountNullable$inboundSchema).optional(),
  metadata: z.nullable(Metadata$inboundSchema),
  paymentId: z.string().optional(),
  settlementId: z.string().optional(),
  status: RefundStatus$inboundSchema,
  createdAt: z.string(),
  externalReference: z.lazy(() =>
    EntityRefundResponseExternalReference$inboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => EntityRefundResponseRoutingReversal$inboundSchema)),
  ).optional(),
  _links: z.lazy(() => EntityRefundResponseLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityRefundResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: Amount$Outbound;
  settlementAmount?: AmountNullable$Outbound | null | undefined;
  metadata: Metadata$Outbound | null;
  paymentId?: string | undefined;
  settlementId?: string | undefined;
  status: string;
  createdAt: string;
  externalReference?:
    | EntityRefundResponseExternalReference$Outbound
    | undefined;
  routingReversals?:
    | Array<EntityRefundResponseRoutingReversal$Outbound>
    | null
    | undefined;
  _links: EntityRefundResponseLinks$Outbound;
};

/** @internal */
export const EntityRefundResponse$outboundSchema: z.ZodType<
  EntityRefundResponse$Outbound,
  z.ZodTypeDef,
  EntityRefundResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: Mode$outboundSchema,
  description: z.string(),
  amount: Amount$outboundSchema,
  settlementAmount: z.nullable(AmountNullable$outboundSchema).optional(),
  metadata: z.nullable(Metadata$outboundSchema),
  paymentId: z.string().optional(),
  settlementId: z.string().optional(),
  status: RefundStatus$outboundSchema,
  createdAt: z.string(),
  externalReference: z.lazy(() =>
    EntityRefundResponseExternalReference$outboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => EntityRefundResponseRoutingReversal$outboundSchema)),
  ).optional(),
  links: z.lazy(() => EntityRefundResponseLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRefundResponse$ {
  /** @deprecated use `EntityRefundResponse$inboundSchema` instead. */
  export const inboundSchema = EntityRefundResponse$inboundSchema;
  /** @deprecated use `EntityRefundResponse$outboundSchema` instead. */
  export const outboundSchema = EntityRefundResponse$outboundSchema;
  /** @deprecated use `EntityRefundResponse$Outbound` instead. */
  export type Outbound = EntityRefundResponse$Outbound;
}

export function entityRefundResponseToJSON(
  entityRefundResponse: EntityRefundResponse,
): string {
  return JSON.stringify(
    EntityRefundResponse$outboundSchema.parse(entityRefundResponse),
  );
}

export function entityRefundResponseFromJSON(
  jsonString: string,
): SafeParseResult<EntityRefundResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityRefundResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRefundResponse' from JSON`,
  );
}
