/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * Specifies the reference type
 */
export const RefundExternalReferenceTypeResponse = {
  AcquirerReference: "acquirer-reference",
} as const;
/**
 * Specifies the reference type
 */
export type RefundExternalReferenceTypeResponse = OpenEnum<
  typeof RefundExternalReferenceTypeResponse
>;

/** @internal */
export const RefundExternalReferenceTypeResponse$inboundSchema: z.ZodType<
  RefundExternalReferenceTypeResponse,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RefundExternalReferenceTypeResponse),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RefundExternalReferenceTypeResponse$outboundSchema: z.ZodType<
  RefundExternalReferenceTypeResponse,
  z.ZodTypeDef,
  RefundExternalReferenceTypeResponse
> = z.union([
  z.nativeEnum(RefundExternalReferenceTypeResponse),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundExternalReferenceTypeResponse$ {
  /** @deprecated use `RefundExternalReferenceTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    RefundExternalReferenceTypeResponse$inboundSchema;
  /** @deprecated use `RefundExternalReferenceTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    RefundExternalReferenceTypeResponse$outboundSchema;
}
