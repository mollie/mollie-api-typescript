/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  RouteDestinationTypeResponse,
  RouteDestinationTypeResponse$inboundSchema,
  RouteDestinationTypeResponse$outboundSchema,
} from "./routedestinationtyperesponse.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * The destination of this portion of the payment.
 */
export type EntityPaymentRouteResponseDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   */
  type: RouteDestinationTypeResponse;
  organizationId: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityPaymentRouteResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payment: Url;
};

export type EntityPaymentRouteResponse = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource: string;
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: Mode;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount: Amount;
  /**
   * The destination of this portion of the payment.
   */
  destination: EntityPaymentRouteResponseDestination;
  /**
   * The date and time when the route was created. The date is given in ISO 8601 format.
   */
  createdAt: string;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
   *
   * @remarks
   * date must be given in `YYYY-MM-DD` format.
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityPaymentRouteResponseLinks;
};

/** @internal */
export const EntityPaymentRouteResponseDestination$inboundSchema: z.ZodType<
  EntityPaymentRouteResponseDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouteDestinationTypeResponse$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type EntityPaymentRouteResponseDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const EntityPaymentRouteResponseDestination$outboundSchema: z.ZodType<
  EntityPaymentRouteResponseDestination$Outbound,
  z.ZodTypeDef,
  EntityPaymentRouteResponseDestination
> = z.object({
  type: RouteDestinationTypeResponse$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPaymentRouteResponseDestination$ {
  /** @deprecated use `EntityPaymentRouteResponseDestination$inboundSchema` instead. */
  export const inboundSchema =
    EntityPaymentRouteResponseDestination$inboundSchema;
  /** @deprecated use `EntityPaymentRouteResponseDestination$outboundSchema` instead. */
  export const outboundSchema =
    EntityPaymentRouteResponseDestination$outboundSchema;
  /** @deprecated use `EntityPaymentRouteResponseDestination$Outbound` instead. */
  export type Outbound = EntityPaymentRouteResponseDestination$Outbound;
}

export function entityPaymentRouteResponseDestinationToJSON(
  entityPaymentRouteResponseDestination: EntityPaymentRouteResponseDestination,
): string {
  return JSON.stringify(
    EntityPaymentRouteResponseDestination$outboundSchema.parse(
      entityPaymentRouteResponseDestination,
    ),
  );
}

export function entityPaymentRouteResponseDestinationFromJSON(
  jsonString: string,
): SafeParseResult<EntityPaymentRouteResponseDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EntityPaymentRouteResponseDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPaymentRouteResponseDestination' from JSON`,
  );
}

/** @internal */
export const EntityPaymentRouteResponseLinks$inboundSchema: z.ZodType<
  EntityPaymentRouteResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  payment: Url$inboundSchema,
});

/** @internal */
export type EntityPaymentRouteResponseLinks$Outbound = {
  self: Url$Outbound;
  payment: Url$Outbound;
};

/** @internal */
export const EntityPaymentRouteResponseLinks$outboundSchema: z.ZodType<
  EntityPaymentRouteResponseLinks$Outbound,
  z.ZodTypeDef,
  EntityPaymentRouteResponseLinks
> = z.object({
  self: Url$outboundSchema,
  payment: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPaymentRouteResponseLinks$ {
  /** @deprecated use `EntityPaymentRouteResponseLinks$inboundSchema` instead. */
  export const inboundSchema = EntityPaymentRouteResponseLinks$inboundSchema;
  /** @deprecated use `EntityPaymentRouteResponseLinks$outboundSchema` instead. */
  export const outboundSchema = EntityPaymentRouteResponseLinks$outboundSchema;
  /** @deprecated use `EntityPaymentRouteResponseLinks$Outbound` instead. */
  export type Outbound = EntityPaymentRouteResponseLinks$Outbound;
}

export function entityPaymentRouteResponseLinksToJSON(
  entityPaymentRouteResponseLinks: EntityPaymentRouteResponseLinks,
): string {
  return JSON.stringify(
    EntityPaymentRouteResponseLinks$outboundSchema.parse(
      entityPaymentRouteResponseLinks,
    ),
  );
}

export function entityPaymentRouteResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityPaymentRouteResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityPaymentRouteResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPaymentRouteResponseLinks' from JSON`,
  );
}

/** @internal */
export const EntityPaymentRouteResponse$inboundSchema: z.ZodType<
  EntityPaymentRouteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: Mode$inboundSchema,
  amount: Amount$inboundSchema,
  destination: z.lazy(() =>
    EntityPaymentRouteResponseDestination$inboundSchema
  ),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => EntityPaymentRouteResponseLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityPaymentRouteResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  amount: Amount$Outbound;
  destination: EntityPaymentRouteResponseDestination$Outbound;
  createdAt: string;
  releaseDate?: string | null | undefined;
  _links: EntityPaymentRouteResponseLinks$Outbound;
};

/** @internal */
export const EntityPaymentRouteResponse$outboundSchema: z.ZodType<
  EntityPaymentRouteResponse$Outbound,
  z.ZodTypeDef,
  EntityPaymentRouteResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: Mode$outboundSchema,
  amount: Amount$outboundSchema,
  destination: z.lazy(() =>
    EntityPaymentRouteResponseDestination$outboundSchema
  ),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => EntityPaymentRouteResponseLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPaymentRouteResponse$ {
  /** @deprecated use `EntityPaymentRouteResponse$inboundSchema` instead. */
  export const inboundSchema = EntityPaymentRouteResponse$inboundSchema;
  /** @deprecated use `EntityPaymentRouteResponse$outboundSchema` instead. */
  export const outboundSchema = EntityPaymentRouteResponse$outboundSchema;
  /** @deprecated use `EntityPaymentRouteResponse$Outbound` instead. */
  export type Outbound = EntityPaymentRouteResponse$Outbound;
}

export function entityPaymentRouteResponseToJSON(
  entityPaymentRouteResponse: EntityPaymentRouteResponse,
): string {
  return JSON.stringify(
    EntityPaymentRouteResponse$outboundSchema.parse(entityPaymentRouteResponse),
  );
}

export function entityPaymentRouteResponseFromJSON(
  jsonString: string,
): SafeParseResult<EntityPaymentRouteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityPaymentRouteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityPaymentRouteResponse' from JSON`,
  );
}
