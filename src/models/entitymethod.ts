/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  AmountNullable,
  AmountNullable$inboundSchema,
  AmountNullable$Outbound,
  AmountNullable$outboundSchema,
} from "./amountnullable.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MethodResponse,
  MethodResponse$inboundSchema,
  MethodResponse$outboundSchema,
} from "./methodresponse.js";
import {
  MethodStatus,
  MethodStatus$inboundSchema,
  MethodStatus$outboundSchema,
} from "./methodstatus.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * URLs of images representing the payment method.
 */
export type EntityMethodImage = {
  /**
   * The URL pointing to an icon of 32 by 24 pixels.
   */
  size1x: string;
  /**
   * The URL pointing to an icon of 64 by 48 pixels.
   */
  size2x: string;
  /**
   * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
   *
   * @remarks
   * scale to any desired size without compromising visual quality.
   */
  svg: string;
};

/**
 * URLs of images representing the issuer.
 *
 * @remarks
 * required:
 *   - size1x
 *   - size2x
 *   - svg
 */
export type EntityMethodIssuerImage = {
  /**
   * The URL pointing to an icon of 32 by 24 pixels.
   */
  size1x?: string | undefined;
  /**
   * The URL pointing to an icon of 64 by 48 pixels.
   */
  size2x?: string | undefined;
  /**
   * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
   *
   * @remarks
   * scale to any desired size without compromising visual quality.
   */
  svg?: string | undefined;
};

export type EntityMethodIssuer = {
  resource: string;
  id: string;
  /**
   * The full name of the issuer.
   */
  name: string;
  /**
   * URLs of images representing the issuer.
   *
   * @remarks
   * required:
   *   - size1x
   *   - size2x
   *   - svg
   */
  image: EntityMethodIssuerImage;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityMethodLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityMethod = {
  /**
   * Indicates the response contains a payment method object. Will always contain the string `method` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  /**
   * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
   *
   * @remarks
   * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
   * parameter enables you to fully integrate the payment method selection into your website.
   *
   * You can also specify the methods in an array. By doing so we will still show the payment method selection screen
   * but will only show the methods specified in the array. For example, you can use this functionality to only show
   * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
   */
  id: MethodResponse | null;
  /**
   * The full name of the payment method.
   *
   * @remarks
   *
   * If a `locale` parameter is provided, the name is translated to the given locale if possible.
   */
  description: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  minimumAmount: Amount;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  maximumAmount: AmountNullable | null;
  /**
   * URLs of images representing the payment method.
   */
  image: EntityMethodImage;
  /**
   * The payment method's activation status for this profile.
   */
  status: MethodStatus;
  /**
   * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
   *
   * @remarks
   * for iDEAL, KBC/CBC, gift cards, and vouchers.
   */
  issuers?: Array<EntityMethodIssuer> | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityMethodLinks;
};

/** @internal */
export const EntityMethodImage$inboundSchema: z.ZodType<
  EntityMethodImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  size1x: z.string(),
  size2x: z.string(),
  svg: z.string(),
});

/** @internal */
export type EntityMethodImage$Outbound = {
  size1x: string;
  size2x: string;
  svg: string;
};

/** @internal */
export const EntityMethodImage$outboundSchema: z.ZodType<
  EntityMethodImage$Outbound,
  z.ZodTypeDef,
  EntityMethodImage
> = z.object({
  size1x: z.string(),
  size2x: z.string(),
  svg: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityMethodImage$ {
  /** @deprecated use `EntityMethodImage$inboundSchema` instead. */
  export const inboundSchema = EntityMethodImage$inboundSchema;
  /** @deprecated use `EntityMethodImage$outboundSchema` instead. */
  export const outboundSchema = EntityMethodImage$outboundSchema;
  /** @deprecated use `EntityMethodImage$Outbound` instead. */
  export type Outbound = EntityMethodImage$Outbound;
}

export function entityMethodImageToJSON(
  entityMethodImage: EntityMethodImage,
): string {
  return JSON.stringify(
    EntityMethodImage$outboundSchema.parse(entityMethodImage),
  );
}

export function entityMethodImageFromJSON(
  jsonString: string,
): SafeParseResult<EntityMethodImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityMethodImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityMethodImage' from JSON`,
  );
}

/** @internal */
export const EntityMethodIssuerImage$inboundSchema: z.ZodType<
  EntityMethodIssuerImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/** @internal */
export type EntityMethodIssuerImage$Outbound = {
  size1x?: string | undefined;
  size2x?: string | undefined;
  svg?: string | undefined;
};

/** @internal */
export const EntityMethodIssuerImage$outboundSchema: z.ZodType<
  EntityMethodIssuerImage$Outbound,
  z.ZodTypeDef,
  EntityMethodIssuerImage
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityMethodIssuerImage$ {
  /** @deprecated use `EntityMethodIssuerImage$inboundSchema` instead. */
  export const inboundSchema = EntityMethodIssuerImage$inboundSchema;
  /** @deprecated use `EntityMethodIssuerImage$outboundSchema` instead. */
  export const outboundSchema = EntityMethodIssuerImage$outboundSchema;
  /** @deprecated use `EntityMethodIssuerImage$Outbound` instead. */
  export type Outbound = EntityMethodIssuerImage$Outbound;
}

export function entityMethodIssuerImageToJSON(
  entityMethodIssuerImage: EntityMethodIssuerImage,
): string {
  return JSON.stringify(
    EntityMethodIssuerImage$outboundSchema.parse(entityMethodIssuerImage),
  );
}

export function entityMethodIssuerImageFromJSON(
  jsonString: string,
): SafeParseResult<EntityMethodIssuerImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityMethodIssuerImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityMethodIssuerImage' from JSON`,
  );
}

/** @internal */
export const EntityMethodIssuer$inboundSchema: z.ZodType<
  EntityMethodIssuer,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  name: z.string(),
  image: z.lazy(() => EntityMethodIssuerImage$inboundSchema),
});

/** @internal */
export type EntityMethodIssuer$Outbound = {
  resource: string;
  id: string;
  name: string;
  image: EntityMethodIssuerImage$Outbound;
};

/** @internal */
export const EntityMethodIssuer$outboundSchema: z.ZodType<
  EntityMethodIssuer$Outbound,
  z.ZodTypeDef,
  EntityMethodIssuer
> = z.object({
  resource: z.string(),
  id: z.string(),
  name: z.string(),
  image: z.lazy(() => EntityMethodIssuerImage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityMethodIssuer$ {
  /** @deprecated use `EntityMethodIssuer$inboundSchema` instead. */
  export const inboundSchema = EntityMethodIssuer$inboundSchema;
  /** @deprecated use `EntityMethodIssuer$outboundSchema` instead. */
  export const outboundSchema = EntityMethodIssuer$outboundSchema;
  /** @deprecated use `EntityMethodIssuer$Outbound` instead. */
  export type Outbound = EntityMethodIssuer$Outbound;
}

export function entityMethodIssuerToJSON(
  entityMethodIssuer: EntityMethodIssuer,
): string {
  return JSON.stringify(
    EntityMethodIssuer$outboundSchema.parse(entityMethodIssuer),
  );
}

export function entityMethodIssuerFromJSON(
  jsonString: string,
): SafeParseResult<EntityMethodIssuer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityMethodIssuer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityMethodIssuer' from JSON`,
  );
}

/** @internal */
export const EntityMethodLinks$inboundSchema: z.ZodType<
  EntityMethodLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityMethodLinks$Outbound = {
  self: Url$Outbound;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityMethodLinks$outboundSchema: z.ZodType<
  EntityMethodLinks$Outbound,
  z.ZodTypeDef,
  EntityMethodLinks
> = z.object({
  self: Url$outboundSchema,
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityMethodLinks$ {
  /** @deprecated use `EntityMethodLinks$inboundSchema` instead. */
  export const inboundSchema = EntityMethodLinks$inboundSchema;
  /** @deprecated use `EntityMethodLinks$outboundSchema` instead. */
  export const outboundSchema = EntityMethodLinks$outboundSchema;
  /** @deprecated use `EntityMethodLinks$Outbound` instead. */
  export type Outbound = EntityMethodLinks$Outbound;
}

export function entityMethodLinksToJSON(
  entityMethodLinks: EntityMethodLinks,
): string {
  return JSON.stringify(
    EntityMethodLinks$outboundSchema.parse(entityMethodLinks),
  );
}

export function entityMethodLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityMethodLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityMethodLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityMethodLinks' from JSON`,
  );
}

/** @internal */
export const EntityMethod$inboundSchema: z.ZodType<
  EntityMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.nullable(MethodResponse$inboundSchema),
  description: z.string(),
  minimumAmount: Amount$inboundSchema,
  maximumAmount: z.nullable(AmountNullable$inboundSchema),
  image: z.lazy(() => EntityMethodImage$inboundSchema),
  status: MethodStatus$inboundSchema,
  issuers: z.array(z.lazy(() => EntityMethodIssuer$inboundSchema)).optional(),
  _links: z.lazy(() => EntityMethodLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityMethod$Outbound = {
  resource: string;
  id: string | null;
  description: string;
  minimumAmount: Amount$Outbound;
  maximumAmount: AmountNullable$Outbound | null;
  image: EntityMethodImage$Outbound;
  status: string;
  issuers?: Array<EntityMethodIssuer$Outbound> | undefined;
  _links: EntityMethodLinks$Outbound;
};

/** @internal */
export const EntityMethod$outboundSchema: z.ZodType<
  EntityMethod$Outbound,
  z.ZodTypeDef,
  EntityMethod
> = z.object({
  resource: z.string(),
  id: z.nullable(MethodResponse$outboundSchema),
  description: z.string(),
  minimumAmount: Amount$outboundSchema,
  maximumAmount: z.nullable(AmountNullable$outboundSchema),
  image: z.lazy(() => EntityMethodImage$outboundSchema),
  status: MethodStatus$outboundSchema,
  issuers: z.array(z.lazy(() => EntityMethodIssuer$outboundSchema)).optional(),
  links: z.lazy(() => EntityMethodLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityMethod$ {
  /** @deprecated use `EntityMethod$inboundSchema` instead. */
  export const inboundSchema = EntityMethod$inboundSchema;
  /** @deprecated use `EntityMethod$outboundSchema` instead. */
  export const outboundSchema = EntityMethod$outboundSchema;
  /** @deprecated use `EntityMethod$Outbound` instead. */
  export type Outbound = EntityMethod$Outbound;
}

export function entityMethodToJSON(entityMethod: EntityMethod): string {
  return JSON.stringify(EntityMethod$outboundSchema.parse(entityMethod));
}

export function entityMethodFromJSON(
  jsonString: string,
): SafeParseResult<EntityMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityMethod' from JSON`,
  );
}
