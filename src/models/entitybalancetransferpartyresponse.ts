/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BalanceTransferPartyTypeResponse,
  BalanceTransferPartyTypeResponse$inboundSchema,
  BalanceTransferPartyTypeResponse$outboundSchema,
} from "./balancetransferpartytyperesponse.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A party involved in the balance transfer, either the sender or the receiver.
 */
export type EntityBalanceTransferPartyResponse = {
  /**
   * Defines the type of the party. At the moment, only `organization` is supported.
   */
  type: BalanceTransferPartyTypeResponse;
  id: string;
  /**
   * The transfer description for the transfer party. This is the description that will appear in the financial reports of the party.
   */
  description: string;
};

/** @internal */
export const EntityBalanceTransferPartyResponse$inboundSchema: z.ZodType<
  EntityBalanceTransferPartyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: BalanceTransferPartyTypeResponse$inboundSchema,
  id: z.string(),
  description: z.string(),
});

/** @internal */
export type EntityBalanceTransferPartyResponse$Outbound = {
  type: string;
  id: string;
  description: string;
};

/** @internal */
export const EntityBalanceTransferPartyResponse$outboundSchema: z.ZodType<
  EntityBalanceTransferPartyResponse$Outbound,
  z.ZodTypeDef,
  EntityBalanceTransferPartyResponse
> = z.object({
  type: BalanceTransferPartyTypeResponse$outboundSchema,
  id: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceTransferPartyResponse$ {
  /** @deprecated use `EntityBalanceTransferPartyResponse$inboundSchema` instead. */
  export const inboundSchema = EntityBalanceTransferPartyResponse$inboundSchema;
  /** @deprecated use `EntityBalanceTransferPartyResponse$outboundSchema` instead. */
  export const outboundSchema =
    EntityBalanceTransferPartyResponse$outboundSchema;
  /** @deprecated use `EntityBalanceTransferPartyResponse$Outbound` instead. */
  export type Outbound = EntityBalanceTransferPartyResponse$Outbound;
}

export function entityBalanceTransferPartyResponseToJSON(
  entityBalanceTransferPartyResponse: EntityBalanceTransferPartyResponse,
): string {
  return JSON.stringify(
    EntityBalanceTransferPartyResponse$outboundSchema.parse(
      entityBalanceTransferPartyResponse,
    ),
  );
}

export function entityBalanceTransferPartyResponseFromJSON(
  jsonString: string,
): SafeParseResult<EntityBalanceTransferPartyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EntityBalanceTransferPartyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityBalanceTransferPartyResponse' from JSON`,
  );
}
