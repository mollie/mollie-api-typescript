/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LocaleResponse,
  LocaleResponse$inboundSchema,
  LocaleResponse$outboundSchema,
} from "./localeresponse.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export const VatRegulation = {
  Dutch: "dutch",
  British: "british",
  Shifted: "shifted",
} as const;
/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export type VatRegulation = ClosedEnum<typeof VatRegulation>;

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityOrganizationLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  dashboard?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityOrganization = {
  /**
   * Indicates the response contains an organization object. Will always contain the string `organization` for this
   *
   * @remarks
   * resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this organization. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The email address associated with the organization.
   */
  email?: string | undefined;
  /**
   * Allows you to preset the language to be used.
   */
  locale?: LocaleResponse | undefined;
  address?: Address | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | undefined;
  /**
   * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are
   *
   * @remarks
   * verified against the international registry *VIES*.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatNumber?: string | null | undefined;
  /**
   * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
   *
   * @remarks
   * Kingdom, and shifted VAT for merchants in the European Union.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatRegulation?: VatRegulation | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityOrganizationLinks | undefined;
};

/** @internal */
export const VatRegulation$inboundSchema: z.ZodNativeEnum<
  typeof VatRegulation
> = z.nativeEnum(VatRegulation);

/** @internal */
export const VatRegulation$outboundSchema: z.ZodNativeEnum<
  typeof VatRegulation
> = VatRegulation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VatRegulation$ {
  /** @deprecated use `VatRegulation$inboundSchema` instead. */
  export const inboundSchema = VatRegulation$inboundSchema;
  /** @deprecated use `VatRegulation$outboundSchema` instead. */
  export const outboundSchema = VatRegulation$outboundSchema;
}

/** @internal */
export const EntityOrganizationLinks$inboundSchema: z.ZodType<
  EntityOrganizationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  dashboard: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityOrganizationLinks$Outbound = {
  self?: Url$Outbound | undefined;
  dashboard?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityOrganizationLinks$outboundSchema: z.ZodType<
  EntityOrganizationLinks$Outbound,
  z.ZodTypeDef,
  EntityOrganizationLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  dashboard: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityOrganizationLinks$ {
  /** @deprecated use `EntityOrganizationLinks$inboundSchema` instead. */
  export const inboundSchema = EntityOrganizationLinks$inboundSchema;
  /** @deprecated use `EntityOrganizationLinks$outboundSchema` instead. */
  export const outboundSchema = EntityOrganizationLinks$outboundSchema;
  /** @deprecated use `EntityOrganizationLinks$Outbound` instead. */
  export type Outbound = EntityOrganizationLinks$Outbound;
}

export function entityOrganizationLinksToJSON(
  entityOrganizationLinks: EntityOrganizationLinks,
): string {
  return JSON.stringify(
    EntityOrganizationLinks$outboundSchema.parse(entityOrganizationLinks),
  );
}

export function entityOrganizationLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityOrganizationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityOrganizationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityOrganizationLinks' from JSON`,
  );
}

/** @internal */
export const EntityOrganization$inboundSchema: z.ZodType<
  EntityOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: LocaleResponse$inboundSchema.optional(),
  address: Address$inboundSchema.optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(VatRegulation$inboundSchema).optional(),
  _links: z.lazy(() => EntityOrganizationLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityOrganization$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  locale?: string | undefined;
  address?: Address$Outbound | undefined;
  registrationNumber?: string | undefined;
  vatNumber?: string | null | undefined;
  vatRegulation?: string | null | undefined;
  _links?: EntityOrganizationLinks$Outbound | undefined;
};

/** @internal */
export const EntityOrganization$outboundSchema: z.ZodType<
  EntityOrganization$Outbound,
  z.ZodTypeDef,
  EntityOrganization
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: LocaleResponse$outboundSchema.optional(),
  address: Address$outboundSchema.optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(VatRegulation$outboundSchema).optional(),
  links: z.lazy(() => EntityOrganizationLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityOrganization$ {
  /** @deprecated use `EntityOrganization$inboundSchema` instead. */
  export const inboundSchema = EntityOrganization$inboundSchema;
  /** @deprecated use `EntityOrganization$outboundSchema` instead. */
  export const outboundSchema = EntityOrganization$outboundSchema;
  /** @deprecated use `EntityOrganization$Outbound` instead. */
  export type Outbound = EntityOrganization$Outbound;
}

export function entityOrganizationToJSON(
  entityOrganization: EntityOrganization,
): string {
  return JSON.stringify(
    EntityOrganization$outboundSchema.parse(entityOrganization),
  );
}

export function entityOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<EntityOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityOrganization' from JSON`,
  );
}
