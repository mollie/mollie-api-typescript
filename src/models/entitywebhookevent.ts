/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  EntityProfileResponse,
  EntityProfileResponse$inboundSchema,
  EntityProfileResponse$Outbound,
  EntityProfileResponse$outboundSchema,
} from "./entityprofileresponse.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaymentLinkResponse,
  PaymentLinkResponse$inboundSchema,
  PaymentLinkResponse$Outbound,
  PaymentLinkResponse$outboundSchema,
} from "./paymentlinkresponse.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  WebhookEventTypes,
  WebhookEventTypes$inboundSchema,
  WebhookEventTypes$outboundSchema,
} from "./webhookeventtypes.js";

export type Entity = PaymentLinkResponse | EntityProfileResponse;

/**
 * Full payload of the event.
 */
export type Embedded = {
  entity?: PaymentLinkResponse | EntityProfileResponse | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityWebhookEventLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  entity?: Url | undefined;
};

export type EntityWebhookEvent = {
  /**
   * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this event.
   */
  id: string;
  /**
   * The event's type
   */
  webhookEventTypes: WebhookEventTypes;
  /**
   * The entity token that triggered the event
   */
  entityId: string;
  /**
   * The event's date time of creation.
   */
  createdAt: string;
  /**
   * Full payload of the event.
   */
  embedded?: Embedded | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityWebhookEventLinks;
};

/** @internal */
export const Entity$inboundSchema: z.ZodType<Entity, z.ZodTypeDef, unknown> = z
  .union([
    PaymentLinkResponse$inboundSchema,
    EntityProfileResponse$inboundSchema,
  ]);

/** @internal */
export type Entity$Outbound =
  | PaymentLinkResponse$Outbound
  | EntityProfileResponse$Outbound;

/** @internal */
export const Entity$outboundSchema: z.ZodType<
  Entity$Outbound,
  z.ZodTypeDef,
  Entity
> = z.union([
  PaymentLinkResponse$outboundSchema,
  EntityProfileResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Entity$ {
  /** @deprecated use `Entity$inboundSchema` instead. */
  export const inboundSchema = Entity$inboundSchema;
  /** @deprecated use `Entity$outboundSchema` instead. */
  export const outboundSchema = Entity$outboundSchema;
  /** @deprecated use `Entity$Outbound` instead. */
  export type Outbound = Entity$Outbound;
}

export function entityToJSON(entity: Entity): string {
  return JSON.stringify(Entity$outboundSchema.parse(entity));
}

export function entityFromJSON(
  jsonString: string,
): SafeParseResult<Entity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Entity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Entity' from JSON`,
  );
}

/** @internal */
export const Embedded$inboundSchema: z.ZodType<
  Embedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.union([
    PaymentLinkResponse$inboundSchema,
    EntityProfileResponse$inboundSchema,
  ]).optional(),
});

/** @internal */
export type Embedded$Outbound = {
  entity?:
    | PaymentLinkResponse$Outbound
    | EntityProfileResponse$Outbound
    | undefined;
};

/** @internal */
export const Embedded$outboundSchema: z.ZodType<
  Embedded$Outbound,
  z.ZodTypeDef,
  Embedded
> = z.object({
  entity: z.union([
    PaymentLinkResponse$outboundSchema,
    EntityProfileResponse$outboundSchema,
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Embedded$ {
  /** @deprecated use `Embedded$inboundSchema` instead. */
  export const inboundSchema = Embedded$inboundSchema;
  /** @deprecated use `Embedded$outboundSchema` instead. */
  export const outboundSchema = Embedded$outboundSchema;
  /** @deprecated use `Embedded$Outbound` instead. */
  export type Outbound = Embedded$Outbound;
}

export function embeddedToJSON(embedded: Embedded): string {
  return JSON.stringify(Embedded$outboundSchema.parse(embedded));
}

export function embeddedFromJSON(
  jsonString: string,
): SafeParseResult<Embedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Embedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Embedded' from JSON`,
  );
}

/** @internal */
export const EntityWebhookEventLinks$inboundSchema: z.ZodType<
  EntityWebhookEventLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  documentation: Url$inboundSchema,
  entity: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityWebhookEventLinks$Outbound = {
  self: Url$Outbound;
  documentation: Url$Outbound;
  entity?: Url$Outbound | undefined;
};

/** @internal */
export const EntityWebhookEventLinks$outboundSchema: z.ZodType<
  EntityWebhookEventLinks$Outbound,
  z.ZodTypeDef,
  EntityWebhookEventLinks
> = z.object({
  self: Url$outboundSchema,
  documentation: Url$outboundSchema,
  entity: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityWebhookEventLinks$ {
  /** @deprecated use `EntityWebhookEventLinks$inboundSchema` instead. */
  export const inboundSchema = EntityWebhookEventLinks$inboundSchema;
  /** @deprecated use `EntityWebhookEventLinks$outboundSchema` instead. */
  export const outboundSchema = EntityWebhookEventLinks$outboundSchema;
  /** @deprecated use `EntityWebhookEventLinks$Outbound` instead. */
  export type Outbound = EntityWebhookEventLinks$Outbound;
}

export function entityWebhookEventLinksToJSON(
  entityWebhookEventLinks: EntityWebhookEventLinks,
): string {
  return JSON.stringify(
    EntityWebhookEventLinks$outboundSchema.parse(entityWebhookEventLinks),
  );
}

export function entityWebhookEventLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityWebhookEventLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityWebhookEventLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityWebhookEventLinks' from JSON`,
  );
}

/** @internal */
export const EntityWebhookEvent$inboundSchema: z.ZodType<
  EntityWebhookEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  type: WebhookEventTypes$inboundSchema,
  entityId: z.string(),
  createdAt: z.string(),
  _embedded: z.nullable(z.lazy(() => Embedded$inboundSchema)).optional(),
  _links: z.lazy(() => EntityWebhookEventLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "type": "webhookEventTypes",
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type EntityWebhookEvent$Outbound = {
  resource: string;
  id: string;
  type: string;
  entityId: string;
  createdAt: string;
  _embedded?: Embedded$Outbound | null | undefined;
  _links: EntityWebhookEventLinks$Outbound;
};

/** @internal */
export const EntityWebhookEvent$outboundSchema: z.ZodType<
  EntityWebhookEvent$Outbound,
  z.ZodTypeDef,
  EntityWebhookEvent
> = z.object({
  resource: z.string(),
  id: z.string(),
  webhookEventTypes: WebhookEventTypes$outboundSchema,
  entityId: z.string(),
  createdAt: z.string(),
  embedded: z.nullable(z.lazy(() => Embedded$outboundSchema)).optional(),
  links: z.lazy(() => EntityWebhookEventLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    webhookEventTypes: "type",
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityWebhookEvent$ {
  /** @deprecated use `EntityWebhookEvent$inboundSchema` instead. */
  export const inboundSchema = EntityWebhookEvent$inboundSchema;
  /** @deprecated use `EntityWebhookEvent$outboundSchema` instead. */
  export const outboundSchema = EntityWebhookEvent$outboundSchema;
  /** @deprecated use `EntityWebhookEvent$Outbound` instead. */
  export type Outbound = EntityWebhookEvent$Outbound;
}

export function entityWebhookEventToJSON(
  entityWebhookEvent: EntityWebhookEvent,
): string {
  return JSON.stringify(
    EntityWebhookEvent$outboundSchema.parse(entityWebhookEvent),
  );
}

export function entityWebhookEventFromJSON(
  jsonString: string,
): SafeParseResult<EntityWebhookEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityWebhookEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityWebhookEvent' from JSON`,
  );
}
