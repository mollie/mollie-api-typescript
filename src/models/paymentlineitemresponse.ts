/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LineCategoriesResponse,
  LineCategoriesResponse$inboundSchema,
  LineCategoriesResponse$outboundSchema,
} from "./linecategoriesresponse.js";
import {
  PaymentLineTypeResponse,
  PaymentLineTypeResponse$inboundSchema,
  PaymentLineTypeResponse$outboundSchema,
} from "./paymentlinetyperesponse.js";

export type PaymentLineItemResponse = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   */
  type?: PaymentLineTypeResponse | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  unitPrice: Amount;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  discountAmount?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  totalAmount: Amount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
   *
   * @remarks
   * not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  vatAmount?: Amount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the
   *
   * @remarks
   * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
   */
  categories?: Array<LineCategoriesResponse> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
};

/** @internal */
export const PaymentLineItemResponse$inboundSchema: z.ZodType<
  PaymentLineItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PaymentLineTypeResponse$inboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: Amount$inboundSchema,
  discountAmount: Amount$inboundSchema.optional(),
  totalAmount: Amount$inboundSchema,
  vatRate: z.string().optional(),
  vatAmount: Amount$inboundSchema.optional(),
  sku: z.string().optional(),
  categories: z.array(LineCategoriesResponse$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/** @internal */
export type PaymentLineItemResponse$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: Amount$Outbound;
  discountAmount?: Amount$Outbound | undefined;
  totalAmount: Amount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: Amount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
};

/** @internal */
export const PaymentLineItemResponse$outboundSchema: z.ZodType<
  PaymentLineItemResponse$Outbound,
  z.ZodTypeDef,
  PaymentLineItemResponse
> = z.object({
  type: PaymentLineTypeResponse$outboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: Amount$outboundSchema,
  discountAmount: Amount$outboundSchema.optional(),
  totalAmount: Amount$outboundSchema,
  vatRate: z.string().optional(),
  vatAmount: Amount$outboundSchema.optional(),
  sku: z.string().optional(),
  categories: z.array(LineCategoriesResponse$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentLineItemResponse$ {
  /** @deprecated use `PaymentLineItemResponse$inboundSchema` instead. */
  export const inboundSchema = PaymentLineItemResponse$inboundSchema;
  /** @deprecated use `PaymentLineItemResponse$outboundSchema` instead. */
  export const outboundSchema = PaymentLineItemResponse$outboundSchema;
  /** @deprecated use `PaymentLineItemResponse$Outbound` instead. */
  export type Outbound = PaymentLineItemResponse$Outbound;
}

export function paymentLineItemResponseToJSON(
  paymentLineItemResponse: PaymentLineItemResponse,
): string {
  return JSON.stringify(
    PaymentLineItemResponse$outboundSchema.parse(paymentLineItemResponse),
  );
}

export function paymentLineItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaymentLineItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentLineItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentLineItemResponse' from JSON`,
  );
}
