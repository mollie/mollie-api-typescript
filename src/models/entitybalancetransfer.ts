/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  BalanceTransferCategory,
  BalanceTransferCategory$inboundSchema,
  BalanceTransferCategory$outboundSchema,
} from "./balancetransfercategory.js";
import {
  EntityBalanceTransferParty,
  EntityBalanceTransferParty$inboundSchema,
  EntityBalanceTransferParty$Outbound,
  EntityBalanceTransferParty$outboundSchema,
} from "./entitybalancetransferparty.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EntityBalanceTransfer = {
  id: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount: Amount;
  /**
   * A party involved in the balance transfer, either the sender or the receiver.
   */
  source: EntityBalanceTransferParty;
  /**
   * A party involved in the balance transfer, either the sender or the receiver.
   */
  destination: EntityBalanceTransferParty;
  /**
   * The transfer description for initiating party.
   */
  description: string;
  /**
   * The type of the transfer. Different fees may apply to different types of transfers.
   */
  category?: BalanceTransferCategory | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityBalanceTransfer$inboundSchema: z.ZodType<
  EntityBalanceTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: Amount$inboundSchema,
  source: EntityBalanceTransferParty$inboundSchema,
  destination: EntityBalanceTransferParty$inboundSchema,
  description: z.string(),
  category: BalanceTransferCategory$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type EntityBalanceTransfer$Outbound = {
  id: string;
  amount: Amount$Outbound;
  source: EntityBalanceTransferParty$Outbound;
  destination: EntityBalanceTransferParty$Outbound;
  description: string;
  category?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const EntityBalanceTransfer$outboundSchema: z.ZodType<
  EntityBalanceTransfer$Outbound,
  z.ZodTypeDef,
  EntityBalanceTransfer
> = z.object({
  id: z.string(),
  amount: Amount$outboundSchema,
  source: EntityBalanceTransferParty$outboundSchema,
  destination: EntityBalanceTransferParty$outboundSchema,
  description: z.string(),
  category: BalanceTransferCategory$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceTransfer$ {
  /** @deprecated use `EntityBalanceTransfer$inboundSchema` instead. */
  export const inboundSchema = EntityBalanceTransfer$inboundSchema;
  /** @deprecated use `EntityBalanceTransfer$outboundSchema` instead. */
  export const outboundSchema = EntityBalanceTransfer$outboundSchema;
  /** @deprecated use `EntityBalanceTransfer$Outbound` instead. */
  export type Outbound = EntityBalanceTransfer$Outbound;
}

export function entityBalanceTransferToJSON(
  entityBalanceTransfer: EntityBalanceTransfer,
): string {
  return JSON.stringify(
    EntityBalanceTransfer$outboundSchema.parse(entityBalanceTransfer),
  );
}

export function entityBalanceTransferFromJSON(
  jsonString: string,
): SafeParseResult<EntityBalanceTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityBalanceTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityBalanceTransfer' from JSON`,
  );
}
