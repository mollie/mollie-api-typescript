/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  BalanceTransferCategoryResponse,
  BalanceTransferCategoryResponse$inboundSchema,
  BalanceTransferCategoryResponse$outboundSchema,
} from "./balancetransfercategoryresponse.js";
import {
  BalanceTransferStatus,
  BalanceTransferStatus$inboundSchema,
  BalanceTransferStatus$outboundSchema,
} from "./balancetransferstatus.js";
import {
  BalanceTransferStatusReasonResponse,
  BalanceTransferStatusReasonResponse$inboundSchema,
  BalanceTransferStatusReasonResponse$outboundSchema,
} from "./balancetransferstatusreasonresponse.js";
import {
  EntityBalanceTransferPartyResponse,
  EntityBalanceTransferPartyResponse$inboundSchema,
  EntityBalanceTransferPartyResponse$Outbound,
  EntityBalanceTransferPartyResponse$outboundSchema,
} from "./entitybalancetransferpartyresponse.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";

/**
 * The reason for the current status of the transfer, if applicable.
 */
export type EntityBalanceTransferResponseStatusReason = {
  /**
   * A machine-readable code that indicates the reason for the transfer's status.
   */
  code: BalanceTransferStatusReasonResponse;
  /**
   * A description of the status reason, localized according to the transfer.
   */
  message: string;
};

export type EntityBalanceTransferResponse = {
  /**
   * Indicates the response contains a balance transfer object. Will always contain the string `connect-balance-transfer` for this endpoint.
   */
  resource: string;
  id: string;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount: Amount;
  /**
   * A party involved in the balance transfer, either the sender or the receiver.
   */
  source: EntityBalanceTransferPartyResponse;
  /**
   * A party involved in the balance transfer, either the sender or the receiver.
   */
  destination: EntityBalanceTransferPartyResponse;
  /**
   * The transfer description for initiating party.
   */
  description: string;
  /**
   * The status of the transfer.
   */
  status: BalanceTransferStatus;
  /**
   * The reason for the current status of the transfer, if applicable.
   */
  statusReason: EntityBalanceTransferResponseStatusReason;
  /**
   * The type of the transfer. Different fees may apply to different types of transfers.
   */
  category?: BalanceTransferCategoryResponse | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time when the transfer was completed, in ISO 8601 format. This parameter is omitted if the transfer is
   *
   * @remarks
   * not executed (yet).
   */
  executedAt?: string | null | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: Mode;
};

/** @internal */
export const EntityBalanceTransferResponseStatusReason$inboundSchema: z.ZodType<
  EntityBalanceTransferResponseStatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: BalanceTransferStatusReasonResponse$inboundSchema,
  message: z.string(),
});

/** @internal */
export type EntityBalanceTransferResponseStatusReason$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const EntityBalanceTransferResponseStatusReason$outboundSchema:
  z.ZodType<
    EntityBalanceTransferResponseStatusReason$Outbound,
    z.ZodTypeDef,
    EntityBalanceTransferResponseStatusReason
  > = z.object({
    code: BalanceTransferStatusReasonResponse$outboundSchema,
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceTransferResponseStatusReason$ {
  /** @deprecated use `EntityBalanceTransferResponseStatusReason$inboundSchema` instead. */
  export const inboundSchema =
    EntityBalanceTransferResponseStatusReason$inboundSchema;
  /** @deprecated use `EntityBalanceTransferResponseStatusReason$outboundSchema` instead. */
  export const outboundSchema =
    EntityBalanceTransferResponseStatusReason$outboundSchema;
  /** @deprecated use `EntityBalanceTransferResponseStatusReason$Outbound` instead. */
  export type Outbound = EntityBalanceTransferResponseStatusReason$Outbound;
}

export function entityBalanceTransferResponseStatusReasonToJSON(
  entityBalanceTransferResponseStatusReason:
    EntityBalanceTransferResponseStatusReason,
): string {
  return JSON.stringify(
    EntityBalanceTransferResponseStatusReason$outboundSchema.parse(
      entityBalanceTransferResponseStatusReason,
    ),
  );
}

export function entityBalanceTransferResponseStatusReasonFromJSON(
  jsonString: string,
): SafeParseResult<
  EntityBalanceTransferResponseStatusReason,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EntityBalanceTransferResponseStatusReason$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EntityBalanceTransferResponseStatusReason' from JSON`,
  );
}

/** @internal */
export const EntityBalanceTransferResponse$inboundSchema: z.ZodType<
  EntityBalanceTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: Amount$inboundSchema,
  source: EntityBalanceTransferPartyResponse$inboundSchema,
  destination: EntityBalanceTransferPartyResponse$inboundSchema,
  description: z.string(),
  status: BalanceTransferStatus$inboundSchema,
  statusReason: z.lazy(() =>
    EntityBalanceTransferResponseStatusReason$inboundSchema
  ),
  category: BalanceTransferCategoryResponse$inboundSchema.optional(),
  createdAt: z.string(),
  executedAt: z.nullable(z.string()).optional(),
  mode: Mode$inboundSchema,
});

/** @internal */
export type EntityBalanceTransferResponse$Outbound = {
  resource: string;
  id: string;
  amount: Amount$Outbound;
  source: EntityBalanceTransferPartyResponse$Outbound;
  destination: EntityBalanceTransferPartyResponse$Outbound;
  description: string;
  status: string;
  statusReason: EntityBalanceTransferResponseStatusReason$Outbound;
  category?: string | undefined;
  createdAt: string;
  executedAt?: string | null | undefined;
  mode: string;
};

/** @internal */
export const EntityBalanceTransferResponse$outboundSchema: z.ZodType<
  EntityBalanceTransferResponse$Outbound,
  z.ZodTypeDef,
  EntityBalanceTransferResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: Amount$outboundSchema,
  source: EntityBalanceTransferPartyResponse$outboundSchema,
  destination: EntityBalanceTransferPartyResponse$outboundSchema,
  description: z.string(),
  status: BalanceTransferStatus$outboundSchema,
  statusReason: z.lazy(() =>
    EntityBalanceTransferResponseStatusReason$outboundSchema
  ),
  category: BalanceTransferCategoryResponse$outboundSchema.optional(),
  createdAt: z.string(),
  executedAt: z.nullable(z.string()).optional(),
  mode: Mode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityBalanceTransferResponse$ {
  /** @deprecated use `EntityBalanceTransferResponse$inboundSchema` instead. */
  export const inboundSchema = EntityBalanceTransferResponse$inboundSchema;
  /** @deprecated use `EntityBalanceTransferResponse$outboundSchema` instead. */
  export const outboundSchema = EntityBalanceTransferResponse$outboundSchema;
  /** @deprecated use `EntityBalanceTransferResponse$Outbound` instead. */
  export type Outbound = EntityBalanceTransferResponse$Outbound;
}

export function entityBalanceTransferResponseToJSON(
  entityBalanceTransferResponse: EntityBalanceTransferResponse,
): string {
  return JSON.stringify(
    EntityBalanceTransferResponse$outboundSchema.parse(
      entityBalanceTransferResponse,
    ),
  );
}

export function entityBalanceTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<EntityBalanceTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityBalanceTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityBalanceTransferResponse' from JSON`,
  );
}
