/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export const ProfileStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Blocked: "blocked",
} as const;
/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export type ProfileStatus = OpenEnum<typeof ProfileStatus>;

/** @internal */
export const ProfileStatus$inboundSchema: z.ZodType<
  ProfileStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ProfileStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ProfileStatus$outboundSchema: z.ZodType<
  ProfileStatus,
  z.ZodTypeDef,
  ProfileStatus
> = z.union([
  z.nativeEnum(ProfileStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfileStatus$ {
  /** @deprecated use `ProfileStatus$inboundSchema` instead. */
  export const inboundSchema = ProfileStatus$inboundSchema;
  /** @deprecated use `ProfileStatus$outboundSchema` instead. */
  export const outboundSchema = ProfileStatus$outboundSchema;
}
