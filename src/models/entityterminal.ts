/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  TerminalModel,
  TerminalModel$inboundSchema,
  TerminalModel$outboundSchema,
} from "./terminalmodel.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * The status of the terminal.
 */
export const EntityTerminalStatus = {
  Pending: "pending",
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The status of the terminal.
 */
export type EntityTerminalStatus = ClosedEnum<typeof EntityTerminalStatus>;

/**
 * The brand of the terminal.
 */
export const Brand = {
  Pax: "PAX",
  Tap: "Tap",
} as const;
/**
 * The brand of the terminal.
 */
export type Brand = ClosedEnum<typeof Brand>;

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityTerminalLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type EntityTerminal = {
  /**
   * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
   */
  resource: string;
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: Mode;
  /**
   * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the
   *
   * @remarks
   * description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it
   * may be visible on the device itself depending on the device.
   */
  description: string;
  /**
   * The status of the terminal.
   */
  status: EntityTerminalStatus;
  /**
   * The brand of the terminal.
   */
  brand: Brand | null;
  /**
   * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
   */
  model: TerminalModel | null;
  /**
   * The serial number of the terminal. The serial number is provided at terminal creation time.
   */
  serialNumber: string | null;
  /**
   * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a
   *
   * @remarks
   * specific currency, chosen during setup.
   */
  currency: string;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
   * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
   * required.
   */
  profileId: string;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  updatedAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityTerminalLinks;
};

/** @internal */
export const EntityTerminalStatus$inboundSchema: z.ZodNativeEnum<
  typeof EntityTerminalStatus
> = z.nativeEnum(EntityTerminalStatus);

/** @internal */
export const EntityTerminalStatus$outboundSchema: z.ZodNativeEnum<
  typeof EntityTerminalStatus
> = EntityTerminalStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityTerminalStatus$ {
  /** @deprecated use `EntityTerminalStatus$inboundSchema` instead. */
  export const inboundSchema = EntityTerminalStatus$inboundSchema;
  /** @deprecated use `EntityTerminalStatus$outboundSchema` instead. */
  export const outboundSchema = EntityTerminalStatus$outboundSchema;
}

/** @internal */
export const Brand$inboundSchema: z.ZodNativeEnum<typeof Brand> = z.nativeEnum(
  Brand,
);

/** @internal */
export const Brand$outboundSchema: z.ZodNativeEnum<typeof Brand> =
  Brand$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Brand$ {
  /** @deprecated use `Brand$inboundSchema` instead. */
  export const inboundSchema = Brand$inboundSchema;
  /** @deprecated use `Brand$outboundSchema` instead. */
  export const outboundSchema = Brand$outboundSchema;
}

/** @internal */
export const EntityTerminalLinks$inboundSchema: z.ZodType<
  EntityTerminalLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  documentation: Url$inboundSchema,
});

/** @internal */
export type EntityTerminalLinks$Outbound = {
  self: Url$Outbound;
  documentation: Url$Outbound;
};

/** @internal */
export const EntityTerminalLinks$outboundSchema: z.ZodType<
  EntityTerminalLinks$Outbound,
  z.ZodTypeDef,
  EntityTerminalLinks
> = z.object({
  self: Url$outboundSchema,
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityTerminalLinks$ {
  /** @deprecated use `EntityTerminalLinks$inboundSchema` instead. */
  export const inboundSchema = EntityTerminalLinks$inboundSchema;
  /** @deprecated use `EntityTerminalLinks$outboundSchema` instead. */
  export const outboundSchema = EntityTerminalLinks$outboundSchema;
  /** @deprecated use `EntityTerminalLinks$Outbound` instead. */
  export type Outbound = EntityTerminalLinks$Outbound;
}

export function entityTerminalLinksToJSON(
  entityTerminalLinks: EntityTerminalLinks,
): string {
  return JSON.stringify(
    EntityTerminalLinks$outboundSchema.parse(entityTerminalLinks),
  );
}

export function entityTerminalLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityTerminalLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityTerminalLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityTerminalLinks' from JSON`,
  );
}

/** @internal */
export const EntityTerminal$inboundSchema: z.ZodType<
  EntityTerminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: Mode$inboundSchema,
  description: z.string(),
  status: EntityTerminalStatus$inboundSchema,
  brand: z.nullable(Brand$inboundSchema),
  model: z.nullable(TerminalModel$inboundSchema),
  serialNumber: z.nullable(z.string()),
  currency: z.string(),
  profileId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _links: z.lazy(() => EntityTerminalLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityTerminal$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  status: string;
  brand: string | null;
  model: string | null;
  serialNumber: string | null;
  currency: string;
  profileId: string;
  createdAt: string;
  updatedAt: string;
  _links: EntityTerminalLinks$Outbound;
};

/** @internal */
export const EntityTerminal$outboundSchema: z.ZodType<
  EntityTerminal$Outbound,
  z.ZodTypeDef,
  EntityTerminal
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: Mode$outboundSchema,
  description: z.string(),
  status: EntityTerminalStatus$outboundSchema,
  brand: z.nullable(Brand$outboundSchema),
  model: z.nullable(TerminalModel$outboundSchema),
  serialNumber: z.nullable(z.string()),
  currency: z.string(),
  profileId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  links: z.lazy(() => EntityTerminalLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityTerminal$ {
  /** @deprecated use `EntityTerminal$inboundSchema` instead. */
  export const inboundSchema = EntityTerminal$inboundSchema;
  /** @deprecated use `EntityTerminal$outboundSchema` instead. */
  export const outboundSchema = EntityTerminal$outboundSchema;
  /** @deprecated use `EntityTerminal$Outbound` instead. */
  export type Outbound = EntityTerminal$Outbound;
}

export function entityTerminalToJSON(entityTerminal: EntityTerminal): string {
  return JSON.stringify(EntityTerminal$outboundSchema.parse(entityTerminal));
}

export function entityTerminalFromJSON(
  jsonString: string,
): SafeParseResult<EntityTerminal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityTerminal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityTerminal' from JSON`,
  );
}
