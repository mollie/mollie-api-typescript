/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The preferred locale of the merchant, as set in their Mollie dashboard.
 */
export const GetCurrentOrganizationLocale = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * The preferred locale of the merchant, as set in their Mollie dashboard.
 */
export type GetCurrentOrganizationLocale = ClosedEnum<
  typeof GetCurrentOrganizationLocale
>;

/**
 * The address of the organization.
 */
export type GetCurrentOrganizationAddress = {
  /**
   * A street and street number.
   */
  streetAndNumber?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   */
  postalCode?: string | undefined;
  city?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country?: string | undefined;
};

/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export const GetCurrentOrganizationVatRegulation = {
  Dutch: "dutch",
  British: "british",
  Shifted: "shifted",
} as const;
/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export type GetCurrentOrganizationVatRegulation = ClosedEnum<
  typeof GetCurrentOrganizationVatRegulation
>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetCurrentOrganizationSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the organization's Mollie dashboard.
 */
export type GetCurrentOrganizationDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetCurrentOrganizationDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetCurrentOrganizationLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetCurrentOrganizationSelf | undefined;
  /**
   * Direct link to the organization's Mollie dashboard.
   */
  dashboard?: GetCurrentOrganizationDashboard | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetCurrentOrganizationDocumentation | undefined;
};

/**
 * The current organization object.
 */
export type GetCurrentOrganizationResponse = {
  /**
   * Indicates the response contains an organization object. Will always contain the string `organization` for this
   *
   * @remarks
   * resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this organization. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The email address associated with the organization.
   */
  email?: string | undefined;
  /**
   * The preferred locale of the merchant, as set in their Mollie dashboard.
   */
  locale?: GetCurrentOrganizationLocale | undefined;
  /**
   * The address of the organization.
   */
  address?: GetCurrentOrganizationAddress | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | undefined;
  /**
   * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are
   *
   * @remarks
   * verified against the international registry *VIES*.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatNumber?: string | null | undefined;
  /**
   * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
   *
   * @remarks
   * Kingdom, and shifted VAT for merchants in the European Union.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatRegulation?: GetCurrentOrganizationVatRegulation | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetCurrentOrganizationLinks | undefined;
};

/** @internal */
export const GetCurrentOrganizationLocale$inboundSchema: z.ZodNativeEnum<
  typeof GetCurrentOrganizationLocale
> = z.nativeEnum(GetCurrentOrganizationLocale);

/** @internal */
export const GetCurrentOrganizationLocale$outboundSchema: z.ZodNativeEnum<
  typeof GetCurrentOrganizationLocale
> = GetCurrentOrganizationLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationLocale$ {
  /** @deprecated use `GetCurrentOrganizationLocale$inboundSchema` instead. */
  export const inboundSchema = GetCurrentOrganizationLocale$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationLocale$outboundSchema` instead. */
  export const outboundSchema = GetCurrentOrganizationLocale$outboundSchema;
}

/** @internal */
export const GetCurrentOrganizationAddress$inboundSchema: z.ZodType<
  GetCurrentOrganizationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetCurrentOrganizationAddress$Outbound = {
  streetAndNumber?: string | undefined;
  postalCode?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetCurrentOrganizationAddress$outboundSchema: z.ZodType<
  GetCurrentOrganizationAddress$Outbound,
  z.ZodTypeDef,
  GetCurrentOrganizationAddress
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationAddress$ {
  /** @deprecated use `GetCurrentOrganizationAddress$inboundSchema` instead. */
  export const inboundSchema = GetCurrentOrganizationAddress$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationAddress$outboundSchema` instead. */
  export const outboundSchema = GetCurrentOrganizationAddress$outboundSchema;
  /** @deprecated use `GetCurrentOrganizationAddress$Outbound` instead. */
  export type Outbound = GetCurrentOrganizationAddress$Outbound;
}

export function getCurrentOrganizationAddressToJSON(
  getCurrentOrganizationAddress: GetCurrentOrganizationAddress,
): string {
  return JSON.stringify(
    GetCurrentOrganizationAddress$outboundSchema.parse(
      getCurrentOrganizationAddress,
    ),
  );
}

export function getCurrentOrganizationAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentOrganizationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentOrganizationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentOrganizationAddress' from JSON`,
  );
}

/** @internal */
export const GetCurrentOrganizationVatRegulation$inboundSchema: z.ZodNativeEnum<
  typeof GetCurrentOrganizationVatRegulation
> = z.nativeEnum(GetCurrentOrganizationVatRegulation);

/** @internal */
export const GetCurrentOrganizationVatRegulation$outboundSchema:
  z.ZodNativeEnum<typeof GetCurrentOrganizationVatRegulation> =
    GetCurrentOrganizationVatRegulation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationVatRegulation$ {
  /** @deprecated use `GetCurrentOrganizationVatRegulation$inboundSchema` instead. */
  export const inboundSchema =
    GetCurrentOrganizationVatRegulation$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationVatRegulation$outboundSchema` instead. */
  export const outboundSchema =
    GetCurrentOrganizationVatRegulation$outboundSchema;
}

/** @internal */
export const GetCurrentOrganizationSelf$inboundSchema: z.ZodType<
  GetCurrentOrganizationSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetCurrentOrganizationSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetCurrentOrganizationSelf$outboundSchema: z.ZodType<
  GetCurrentOrganizationSelf$Outbound,
  z.ZodTypeDef,
  GetCurrentOrganizationSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationSelf$ {
  /** @deprecated use `GetCurrentOrganizationSelf$inboundSchema` instead. */
  export const inboundSchema = GetCurrentOrganizationSelf$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationSelf$outboundSchema` instead. */
  export const outboundSchema = GetCurrentOrganizationSelf$outboundSchema;
  /** @deprecated use `GetCurrentOrganizationSelf$Outbound` instead. */
  export type Outbound = GetCurrentOrganizationSelf$Outbound;
}

export function getCurrentOrganizationSelfToJSON(
  getCurrentOrganizationSelf: GetCurrentOrganizationSelf,
): string {
  return JSON.stringify(
    GetCurrentOrganizationSelf$outboundSchema.parse(getCurrentOrganizationSelf),
  );
}

export function getCurrentOrganizationSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentOrganizationSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentOrganizationSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentOrganizationSelf' from JSON`,
  );
}

/** @internal */
export const GetCurrentOrganizationDashboard$inboundSchema: z.ZodType<
  GetCurrentOrganizationDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetCurrentOrganizationDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetCurrentOrganizationDashboard$outboundSchema: z.ZodType<
  GetCurrentOrganizationDashboard$Outbound,
  z.ZodTypeDef,
  GetCurrentOrganizationDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationDashboard$ {
  /** @deprecated use `GetCurrentOrganizationDashboard$inboundSchema` instead. */
  export const inboundSchema = GetCurrentOrganizationDashboard$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationDashboard$outboundSchema` instead. */
  export const outboundSchema = GetCurrentOrganizationDashboard$outboundSchema;
  /** @deprecated use `GetCurrentOrganizationDashboard$Outbound` instead. */
  export type Outbound = GetCurrentOrganizationDashboard$Outbound;
}

export function getCurrentOrganizationDashboardToJSON(
  getCurrentOrganizationDashboard: GetCurrentOrganizationDashboard,
): string {
  return JSON.stringify(
    GetCurrentOrganizationDashboard$outboundSchema.parse(
      getCurrentOrganizationDashboard,
    ),
  );
}

export function getCurrentOrganizationDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentOrganizationDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentOrganizationDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentOrganizationDashboard' from JSON`,
  );
}

/** @internal */
export const GetCurrentOrganizationDocumentation$inboundSchema: z.ZodType<
  GetCurrentOrganizationDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetCurrentOrganizationDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetCurrentOrganizationDocumentation$outboundSchema: z.ZodType<
  GetCurrentOrganizationDocumentation$Outbound,
  z.ZodTypeDef,
  GetCurrentOrganizationDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationDocumentation$ {
  /** @deprecated use `GetCurrentOrganizationDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetCurrentOrganizationDocumentation$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetCurrentOrganizationDocumentation$outboundSchema;
  /** @deprecated use `GetCurrentOrganizationDocumentation$Outbound` instead. */
  export type Outbound = GetCurrentOrganizationDocumentation$Outbound;
}

export function getCurrentOrganizationDocumentationToJSON(
  getCurrentOrganizationDocumentation: GetCurrentOrganizationDocumentation,
): string {
  return JSON.stringify(
    GetCurrentOrganizationDocumentation$outboundSchema.parse(
      getCurrentOrganizationDocumentation,
    ),
  );
}

export function getCurrentOrganizationDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentOrganizationDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCurrentOrganizationDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentOrganizationDocumentation' from JSON`,
  );
}

/** @internal */
export const GetCurrentOrganizationLinks$inboundSchema: z.ZodType<
  GetCurrentOrganizationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetCurrentOrganizationSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => GetCurrentOrganizationDashboard$inboundSchema)
    .optional(),
  documentation: z.lazy(() => GetCurrentOrganizationDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetCurrentOrganizationLinks$Outbound = {
  self?: GetCurrentOrganizationSelf$Outbound | undefined;
  dashboard?: GetCurrentOrganizationDashboard$Outbound | undefined;
  documentation?: GetCurrentOrganizationDocumentation$Outbound | undefined;
};

/** @internal */
export const GetCurrentOrganizationLinks$outboundSchema: z.ZodType<
  GetCurrentOrganizationLinks$Outbound,
  z.ZodTypeDef,
  GetCurrentOrganizationLinks
> = z.object({
  self: z.lazy(() => GetCurrentOrganizationSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => GetCurrentOrganizationDashboard$outboundSchema)
    .optional(),
  documentation: z.lazy(() =>
    GetCurrentOrganizationDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationLinks$ {
  /** @deprecated use `GetCurrentOrganizationLinks$inboundSchema` instead. */
  export const inboundSchema = GetCurrentOrganizationLinks$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationLinks$outboundSchema` instead. */
  export const outboundSchema = GetCurrentOrganizationLinks$outboundSchema;
  /** @deprecated use `GetCurrentOrganizationLinks$Outbound` instead. */
  export type Outbound = GetCurrentOrganizationLinks$Outbound;
}

export function getCurrentOrganizationLinksToJSON(
  getCurrentOrganizationLinks: GetCurrentOrganizationLinks,
): string {
  return JSON.stringify(
    GetCurrentOrganizationLinks$outboundSchema.parse(
      getCurrentOrganizationLinks,
    ),
  );
}

export function getCurrentOrganizationLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentOrganizationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentOrganizationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentOrganizationLinks' from JSON`,
  );
}

/** @internal */
export const GetCurrentOrganizationResponse$inboundSchema: z.ZodType<
  GetCurrentOrganizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: GetCurrentOrganizationLocale$inboundSchema.optional(),
  address: z.lazy(() => GetCurrentOrganizationAddress$inboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(GetCurrentOrganizationVatRegulation$inboundSchema)
    .optional(),
  _links: z.lazy(() => GetCurrentOrganizationLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetCurrentOrganizationResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  locale?: string | undefined;
  address?: GetCurrentOrganizationAddress$Outbound | undefined;
  registrationNumber?: string | undefined;
  vatNumber?: string | null | undefined;
  vatRegulation?: string | null | undefined;
  _links?: GetCurrentOrganizationLinks$Outbound | undefined;
};

/** @internal */
export const GetCurrentOrganizationResponse$outboundSchema: z.ZodType<
  GetCurrentOrganizationResponse$Outbound,
  z.ZodTypeDef,
  GetCurrentOrganizationResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: GetCurrentOrganizationLocale$outboundSchema.optional(),
  address: z.lazy(() => GetCurrentOrganizationAddress$outboundSchema)
    .optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(GetCurrentOrganizationVatRegulation$outboundSchema)
    .optional(),
  links: z.lazy(() => GetCurrentOrganizationLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentOrganizationResponse$ {
  /** @deprecated use `GetCurrentOrganizationResponse$inboundSchema` instead. */
  export const inboundSchema = GetCurrentOrganizationResponse$inboundSchema;
  /** @deprecated use `GetCurrentOrganizationResponse$outboundSchema` instead. */
  export const outboundSchema = GetCurrentOrganizationResponse$outboundSchema;
  /** @deprecated use `GetCurrentOrganizationResponse$Outbound` instead. */
  export type Outbound = GetCurrentOrganizationResponse$Outbound;
}

export function getCurrentOrganizationResponseToJSON(
  getCurrentOrganizationResponse: GetCurrentOrganizationResponse,
): string {
  return JSON.stringify(
    GetCurrentOrganizationResponse$outboundSchema.parse(
      getCurrentOrganizationResponse,
    ),
  );
}

export function getCurrentOrganizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentOrganizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentOrganizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentOrganizationResponse' from JSON`,
  );
}
