/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListAllSubscriptionsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to retrieve subscriptions for.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
   *
   * To retrieve all subscriptions across the organization, use an organization-level API credential and omit the
   * `profileId` parameter.
   */
  profileId?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListAllSubscriptionsEmbedded = {
  /**
   * A list of subscription objects.
   */
  subscriptions?: Array<models.SubscriptionResponse> | undefined;
};

/**
 * A list of subscription objects.
 */
export type ListAllSubscriptionsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListAllSubscriptionsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListAllSubscriptionsRequest$inboundSchema: z.ZodType<
  ListAllSubscriptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  profileId: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListAllSubscriptionsRequest$Outbound = {
  from?: string | null | undefined;
  limit?: number | null | undefined;
  profileId?: string | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListAllSubscriptionsRequest$outboundSchema: z.ZodType<
  ListAllSubscriptionsRequest$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  profileId: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRequest$ {
  /** @deprecated use `ListAllSubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRequest$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsRequest$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRequest$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRequest$Outbound;
}

export function listAllSubscriptionsRequestToJSON(
  listAllSubscriptionsRequest: ListAllSubscriptionsRequest,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRequest$outboundSchema.parse(
      listAllSubscriptionsRequest,
    ),
  );
}

export function listAllSubscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRequest' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsEmbedded$inboundSchema: z.ZodType<
  ListAllSubscriptionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriptions: z.array(models.SubscriptionResponse$inboundSchema).optional(),
});

/** @internal */
export type ListAllSubscriptionsEmbedded$Outbound = {
  subscriptions?: Array<models.SubscriptionResponse$Outbound> | undefined;
};

/** @internal */
export const ListAllSubscriptionsEmbedded$outboundSchema: z.ZodType<
  ListAllSubscriptionsEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsEmbedded
> = z.object({
  subscriptions: z.array(models.SubscriptionResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsEmbedded$ {
  /** @deprecated use `ListAllSubscriptionsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsEmbedded$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsEmbedded$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsEmbedded$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsEmbedded$Outbound;
}

export function listAllSubscriptionsEmbeddedToJSON(
  listAllSubscriptionsEmbedded: ListAllSubscriptionsEmbedded,
): string {
  return JSON.stringify(
    ListAllSubscriptionsEmbedded$outboundSchema.parse(
      listAllSubscriptionsEmbedded,
    ),
  );
}

export function listAllSubscriptionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsResponse$inboundSchema: z.ZodType<
  ListAllSubscriptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListAllSubscriptionsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllSubscriptionsResponse$Outbound = {
  count: number;
  _embedded: ListAllSubscriptionsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListAllSubscriptionsResponse$outboundSchema: z.ZodType<
  ListAllSubscriptionsResponse$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListAllSubscriptionsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsResponse$ {
  /** @deprecated use `ListAllSubscriptionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsResponse$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsResponse$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsResponse$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsResponse$Outbound;
}

export function listAllSubscriptionsResponseToJSON(
  listAllSubscriptionsResponse: ListAllSubscriptionsResponse,
): string {
  return JSON.stringify(
    ListAllSubscriptionsResponse$outboundSchema.parse(
      listAllSubscriptionsResponse,
    ),
  );
}

export function listAllSubscriptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsResponse' from JSON`,
  );
}
