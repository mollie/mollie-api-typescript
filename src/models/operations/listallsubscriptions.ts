/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAllSubscriptionsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
   *
   * @remarks
   *
   * Possible values: `asc` `desc` (default: `desc`)
   */
  sort?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListAllSubscriptionsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListAllSubscriptionsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListAllSubscriptionsBadRequestDocumentation;
};

/**
 * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
 *
 * @remarks
 *
 * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
 *
 * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
 */
export type ListAllSubscriptionsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
 */
export type ListAllSubscriptionsAmountRefunded = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The remaining amount that can be refunded. Only available when refunds are available for this payment.
 */
export type ListAllSubscriptionsAmountRemaining = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already captured for this payment. Only available when this payment supports captures.
 */
export type ListAllSubscriptionsAmountCaptured = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
 */
export type ListAllSubscriptionsAmountChargedBack = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
 *
 * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
 */
export type ListAllSubscriptionsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type ListAllSubscriptionsUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
 */
export type ListAllSubscriptionsDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type ListAllSubscriptionsTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * @remarks
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type ListAllSubscriptionsVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const ListAllSubscriptionsCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type ListAllSubscriptionsCategory = ClosedEnum<
  typeof ListAllSubscriptionsCategory
>;

/**
 * Total amount and currency of the recurring item.
 */
export type ListAllSubscriptionsRecurringAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
 */
export type ListAllSubscriptionsRecurring = {
  /**
   * A description of the recurring item. If not present, the main description of the item will be used.
   */
  description?: string | undefined;
  /**
   * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
   *
   * @remarks
   *
   * Possible values: `... months` `... weeks` `... days`
   */
  interval: string;
  /**
   * Total amount and currency of the recurring item.
   */
  amount?: ListAllSubscriptionsRecurringAmount | undefined;
  /**
   * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
   */
  times?: number | undefined;
  /**
   * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
   */
  startDate?: string | null | undefined;
};

export type ListAllSubscriptionsLine = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   *
   * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
   */
  type?: string | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: ListAllSubscriptionsUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
   */
  discountAmount?: ListAllSubscriptionsDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: ListAllSubscriptionsTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * @remarks
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: ListAllSubscriptionsVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
   */
  categories?: Array<ListAllSubscriptionsCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
  /**
   * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
   */
  recurring?: ListAllSubscriptionsRecurring | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type ListAllSubscriptionsBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 */
export type ListAllSubscriptionsShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

export type ListAllSubscriptionsMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListAllSubscriptionsMetadataUnion =
  | ListAllSubscriptionsMetadata
  | string
  | Array<string>;

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
 */
export type ListAllSubscriptionsApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
 *
 * @remarks
 *
 * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
 *
 * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
 */
export type ListAllSubscriptionsApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
   */
  amount?: ListAllSubscriptionsApplicationFeeAmount | undefined;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
   */
  description?: string | undefined;
};

/**
 * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
 */
export type ListAllSubscriptionsRoutingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination of this portion of the payment.
 */
export type ListAllSubscriptionsDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   *
   * @remarks
   *
   * Possible values: `organization`
   */
  type: string;
  /**
   * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
   */
  organizationId: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllSubscriptionsRoutingSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that belong to this route.
 */
export type ListAllSubscriptionsRoutingPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListAllSubscriptionsRoutingLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListAllSubscriptionsRoutingSelf;
  /**
   * The API resource URL of the [payment](get-payment) that belong to this route.
   */
  payment: ListAllSubscriptionsRoutingPayment;
};

export type ListAllSubscriptionsRouting = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
   */
  amount: ListAllSubscriptionsRoutingAmount;
  /**
   * The destination of this portion of the payment.
   */
  destination: ListAllSubscriptionsDestination;
  /**
   * The date and time when the route was created. The date is given in ISO 8601 format.
   */
  createdAt: string;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
   *
   * @remarks
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListAllSubscriptionsRoutingLinks;
};

/**
 * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
 *
 * @remarks
 *
 * You can find more information about the possible values of this object on [this page](status-reasons).**
 */
export type ListAllSubscriptionsStatusReason = {
  /**
   * A machine-readable code that indicates the reason for the payment's status.
   */
  code: string;
  /**
   * A description of the status reason, localized according to the payment `locale`.
   */
  message: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllSubscriptionsPaymentSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type ListAllSubscriptionsCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
 */
export type ListAllSubscriptionsMobileAppCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
 *
 * @remarks
 *
 * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
 *
 * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
 */
export type ListAllSubscriptionsChangePaymentState = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the payment in the Mollie Dashboard.
 */
export type ListAllSubscriptionsDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
 */
export type ListAllSubscriptionsRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
 */
export type ListAllSubscriptionsChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
 */
export type ListAllSubscriptionsCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
 */
export type ListAllSubscriptionsSettlement = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer).
 */
export type ListAllSubscriptionsCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [mandate](get-mandate).
 */
export type ListAllSubscriptionsMandate = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [subscription](get-subscription).
 */
export type ListAllSubscriptionsSubscription = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
 */
export type ListAllSubscriptionsOrder = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
 */
export type ListAllSubscriptionsTerminal = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllSubscriptionsPaymentDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListAllSubscriptionsPaymentLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListAllSubscriptionsPaymentSelf;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  checkout?: ListAllSubscriptionsCheckout | undefined;
  /**
   * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
   */
  mobileAppCheckout?: ListAllSubscriptionsMobileAppCheckout | undefined;
  /**
   * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
   *
   * @remarks
   *
   * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
   *
   * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
   */
  changePaymentState?: ListAllSubscriptionsChangePaymentState | undefined;
  /**
   * Direct link to the payment in the Mollie Dashboard.
   */
  dashboard: ListAllSubscriptionsDashboard;
  /**
   * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
   */
  refunds?: ListAllSubscriptionsRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
   */
  chargebacks?: ListAllSubscriptionsChargebacks | undefined;
  /**
   * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
   */
  captures?: ListAllSubscriptionsCaptures | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
   */
  settlement?: ListAllSubscriptionsSettlement | undefined;
  /**
   * The API resource URL of the [customer](get-customer).
   */
  customer?: ListAllSubscriptionsCustomer | undefined;
  /**
   * The API resource URL of the [mandate](get-mandate).
   */
  mandate?: ListAllSubscriptionsMandate | undefined;
  /**
   * The API resource URL of the [subscription](get-subscription).
   */
  subscription?: ListAllSubscriptionsSubscription | undefined;
  /**
   * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
   */
  order?: ListAllSubscriptionsOrder | undefined;
  /**
   * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
   */
  terminal?: ListAllSubscriptionsTerminal | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListAllSubscriptionsPaymentDocumentation | undefined;
};

export type ListAllSubscriptionsPaymentOutput = {
  /**
   * Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The description of the payment. This will be shown to your customer on their card or bank statement when possible. We truncate the description automatically according to the limits of the used payment method. The description is also visible in any exports you generate.
   *
   * @remarks
   *
   * We recommend you use a unique identifier so that you can always link the payment to the order in your back office. This is particularly useful for bookkeeping.
   *
   * The maximum length of the description field differs per payment method, with the absolute maximum being 255 characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
   */
  description: string;
  /**
   * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
   *
   * @remarks
   *
   * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
   *
   * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
   */
  amount: ListAllSubscriptionsAmount;
  /**
   * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
   */
  amountRefunded?: ListAllSubscriptionsAmountRefunded | undefined;
  /**
   * The remaining amount that can be refunded. Only available when refunds are available for this payment.
   */
  amountRemaining?: ListAllSubscriptionsAmountRemaining | undefined;
  /**
   * The total amount that is already captured for this payment. Only available when this payment supports captures.
   */
  amountCaptured?: ListAllSubscriptionsAmountCaptured | undefined;
  /**
   * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
   */
  amountChargedBack?: ListAllSubscriptionsAmountChargedBack | undefined;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
   *
   * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
   */
  settlementAmount?: ListAllSubscriptionsSettlementAmount | undefined;
  /**
   * The URL your customer will be redirected to after the payment process.
   *
   * @remarks
   *
   * It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the right page referencing the order when your customer returns.
   *
   * The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for Apple Pay payments with an `applePayPaymentToken`.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not provided, the customer will be redirected to the `redirectUrl` instead — see above.
   *
   * @remarks
   *
   * Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle payment cancellations.
   */
  cancelUrl?: string | null | undefined;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
   */
  webhookUrl?: string | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<ListAllSubscriptionsLine> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: ListAllSubscriptionsBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   */
  shippingAddress?: ListAllSubscriptionsShippingAddress | undefined;
  /**
   * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897 locale, but our hosted payment pages currently only support the specified languages.
   *
   * @remarks
   *
   * For bank transfer payments specifically, the locale will determine the target bank account the customer has to transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the customer use a local bank account greatly increases the conversion and speed of payment.
   */
  locale?: string | null | undefined;
  /**
   * This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This field is omitted if the country code was not detected.
   */
  countryCode?: string | null | undefined;
  /**
   * The payment method used for this transaction. If a specific method was selected during payment initialization, this field reflects that choice.
   */
  method?: string | null | undefined;
  /**
   * For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT rates you have used for the order to ensure your customer's country matches the VAT country.
   *
   * @remarks
   *
   * Use this parameter to restrict the payment methods available to your customer to those from a single country.
   *
   * If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
   *
   * The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
   */
  restrictPaymentMethodsToCountry?: string | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | ListAllSubscriptionsMetadata
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/) and capture at a later time.
   *
   * @remarks
   *
   * This field needs to be set to `manual` for method `riverty`.
   *
   * Possible values: `automatic` `manual` (default: `automatic`)
   */
  captureMode?: string | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a later point either be 'captured' or canceled.
   *
   * By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For example `8 hours` or `2 days`.
   *
   * To schedule an automatic capture, the `captureMode` must be set to `automatic`.
   *
   * The maximum delay is 7 days (168 hours).
   *
   * Possible values: `... hours` `... days`
   */
  captureDelay?: string | null | undefined;
  /**
   * Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
   */
  captureBefore?: string | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * @remarks
   *
   * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
   *
   * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
   */
  applicationFee?: ListAllSubscriptionsApplicationFee | null | undefined;
  /**
   * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
   *
   * @remarks
   *
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * If you create payments on your own account that you want to split between yourself and one or more connected merchants, you can use this `routing` parameter to route the payment accordingly.
   *
   * The `routing` parameter should contain an array of objects, with each object describing the destination for a specific portion of the payment.
   *
   * It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total payment amount have been routed, the amount left will be routed to the current organization automatically.
   *
   * If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee` parameter.
   */
  routing?: Array<ListAllSubscriptionsRouting> | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * Indicate which part of a recurring sequence this payment is for.
   *
   * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place on their account in the future.
   *
   * If set to `recurring`, the customer's card is charged automatically.
   *
   * Defaults to `oneoff`, which is a regular non-recurring payment.
   *
   * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account are set up correctly for recurring payments.
   *
   * Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
   */
  sequenceType: string | null;
  /**
   * If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will be added to the response.
   */
  subscriptionId?: string | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of the customer's accounts should be credited.
   */
  mandateId?: string | null | undefined;
  /**
   * The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring payments, but can also be used on regular payments to enable single-click payments.
   *
   * @remarks
   *
   * If `sequenceType` is set to `recurring`, this field is required.
   */
  customerId?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and Organization tokens, the `profileId` is required.
   *
   * For more information, see [Authentication](authentication).
   */
  profileId: string;
  /**
   * The identifier referring to the [settlement](get-settlement) this payment was settled with.
   */
  settlementId?: string | null | undefined;
  /**
   * If the payment was created for an [order](get-order), the ID of that order will be part of the response.
   */
  orderId?: string | null | undefined;
  /**
   * The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which statuses occur at what point.
   *
   * @remarks
   *
   * Possible values: `open` `pending` `authorized` `paid` `canceled` `expired` `failed`
   */
  status: string;
  /**
   * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
   *
   * @remarks
   *
   * You can find more information about the possible values of this object on [this page](status-reasons).**
   */
  statusReason?: ListAllSubscriptionsStatusReason | null | undefined;
  /**
   * Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
   */
  isCancelable?: boolean | null | undefined;
  /**
   * An object containing payment details collected during the payment process. For example, details may include the customer's card or bank details and a payment reference. For the full list of details, please refer to the [method-specific parameters](extra-payment-parameters) guide.
   */
  details?: { [k: string]: any } | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is not authorized (yet).
   */
  authorizedAt?: string | null | undefined;
  /**
   * The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not completed (yet).
   */
  paidAt?: string | null | undefined;
  /**
   * The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not canceled (yet).
   */
  canceledAt?: string | null | undefined;
  /**
   * The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no longer expire.
   */
  expiresAt?: string | null | undefined;
  /**
   * The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not expire (yet).
   */
  expiredAt?: string | null | undefined;
  /**
   * The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail (yet).
   */
  failedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListAllSubscriptionsPaymentLinks;
};

export type ListAllSubscriptionsEmbedded = {
  /**
   * An array of payment objects.
   */
  payments?: Array<ListAllSubscriptionsPaymentOutput> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListAllSubscriptionsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListAllSubscriptionsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListAllSubscriptionsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllSubscriptionsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListAllSubscriptionsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListAllSubscriptionsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListAllSubscriptionsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListAllSubscriptionsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListAllSubscriptionsDocumentation | undefined;
};

/**
 * A list of payment objects.
 */
export type ListAllSubscriptionsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListAllSubscriptionsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListAllSubscriptionsLinks | undefined;
};

/** @internal */
export const ListAllSubscriptionsRequest$inboundSchema: z.ZodType<
  ListAllSubscriptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListAllSubscriptionsRequest$Outbound = {
  from?: string | undefined;
  limit: number | null;
  sort?: string | null | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListAllSubscriptionsRequest$outboundSchema: z.ZodType<
  ListAllSubscriptionsRequest$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRequest$ {
  /** @deprecated use `ListAllSubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRequest$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsRequest$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRequest$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRequest$Outbound;
}

export function listAllSubscriptionsRequestToJSON(
  listAllSubscriptionsRequest: ListAllSubscriptionsRequest,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRequest$outboundSchema.parse(
      listAllSubscriptionsRequest,
    ),
  );
}

export function listAllSubscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRequest' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsBadRequestDocumentation$inboundSchema:
  z.ZodType<
    ListAllSubscriptionsBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListAllSubscriptionsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsBadRequestDocumentation$outboundSchema:
  z.ZodType<
    ListAllSubscriptionsBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    ListAllSubscriptionsBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsBadRequestDocumentation$ {
  /** @deprecated use `ListAllSubscriptionsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsBadRequestDocumentation$Outbound;
}

export function listAllSubscriptionsBadRequestDocumentationToJSON(
  listAllSubscriptionsBadRequestDocumentation:
    ListAllSubscriptionsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListAllSubscriptionsBadRequestDocumentation$outboundSchema.parse(
      listAllSubscriptionsBadRequestDocumentation,
    ),
  );
}

export function listAllSubscriptionsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAllSubscriptionsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAllSubscriptionsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsBadRequestLinks$inboundSchema: z.ZodType<
  ListAllSubscriptionsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListAllSubscriptionsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListAllSubscriptionsBadRequestLinks$Outbound = {
  documentation: ListAllSubscriptionsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListAllSubscriptionsBadRequestLinks$outboundSchema: z.ZodType<
  ListAllSubscriptionsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListAllSubscriptionsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsBadRequestLinks$ {
  /** @deprecated use `ListAllSubscriptionsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsBadRequestLinks$Outbound;
}

export function listAllSubscriptionsBadRequestLinksToJSON(
  listAllSubscriptionsBadRequestLinks: ListAllSubscriptionsBadRequestLinks,
): string {
  return JSON.stringify(
    ListAllSubscriptionsBadRequestLinks$outboundSchema.parse(
      listAllSubscriptionsBadRequestLinks,
    ),
  );
}

export function listAllSubscriptionsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsAmount$ {
  /** @deprecated use `ListAllSubscriptionsAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmount$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsAmount$Outbound;
}

export function listAllSubscriptionsAmountToJSON(
  listAllSubscriptionsAmount: ListAllSubscriptionsAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsAmount$outboundSchema.parse(listAllSubscriptionsAmount),
  );
}

export function listAllSubscriptionsAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsAmountRefunded$inboundSchema: z.ZodType<
  ListAllSubscriptionsAmountRefunded,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsAmountRefunded$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsAmountRefunded$outboundSchema: z.ZodType<
  ListAllSubscriptionsAmountRefunded$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsAmountRefunded
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsAmountRefunded$ {
  /** @deprecated use `ListAllSubscriptionsAmountRefunded$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsAmountRefunded$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountRefunded$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsAmountRefunded$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountRefunded$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsAmountRefunded$Outbound;
}

export function listAllSubscriptionsAmountRefundedToJSON(
  listAllSubscriptionsAmountRefunded: ListAllSubscriptionsAmountRefunded,
): string {
  return JSON.stringify(
    ListAllSubscriptionsAmountRefunded$outboundSchema.parse(
      listAllSubscriptionsAmountRefunded,
    ),
  );
}

export function listAllSubscriptionsAmountRefundedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsAmountRefunded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsAmountRefunded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsAmountRefunded' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsAmountRemaining$inboundSchema: z.ZodType<
  ListAllSubscriptionsAmountRemaining,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsAmountRemaining$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsAmountRemaining$outboundSchema: z.ZodType<
  ListAllSubscriptionsAmountRemaining$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsAmountRemaining
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsAmountRemaining$ {
  /** @deprecated use `ListAllSubscriptionsAmountRemaining$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsAmountRemaining$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountRemaining$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsAmountRemaining$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountRemaining$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsAmountRemaining$Outbound;
}

export function listAllSubscriptionsAmountRemainingToJSON(
  listAllSubscriptionsAmountRemaining: ListAllSubscriptionsAmountRemaining,
): string {
  return JSON.stringify(
    ListAllSubscriptionsAmountRemaining$outboundSchema.parse(
      listAllSubscriptionsAmountRemaining,
    ),
  );
}

export function listAllSubscriptionsAmountRemainingFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsAmountRemaining, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsAmountRemaining$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsAmountRemaining' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsAmountCaptured$inboundSchema: z.ZodType<
  ListAllSubscriptionsAmountCaptured,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsAmountCaptured$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsAmountCaptured$outboundSchema: z.ZodType<
  ListAllSubscriptionsAmountCaptured$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsAmountCaptured
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsAmountCaptured$ {
  /** @deprecated use `ListAllSubscriptionsAmountCaptured$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsAmountCaptured$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountCaptured$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsAmountCaptured$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountCaptured$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsAmountCaptured$Outbound;
}

export function listAllSubscriptionsAmountCapturedToJSON(
  listAllSubscriptionsAmountCaptured: ListAllSubscriptionsAmountCaptured,
): string {
  return JSON.stringify(
    ListAllSubscriptionsAmountCaptured$outboundSchema.parse(
      listAllSubscriptionsAmountCaptured,
    ),
  );
}

export function listAllSubscriptionsAmountCapturedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsAmountCaptured, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsAmountCaptured$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsAmountCaptured' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsAmountChargedBack$inboundSchema: z.ZodType<
  ListAllSubscriptionsAmountChargedBack,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsAmountChargedBack$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsAmountChargedBack$outboundSchema: z.ZodType<
  ListAllSubscriptionsAmountChargedBack$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsAmountChargedBack
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsAmountChargedBack$ {
  /** @deprecated use `ListAllSubscriptionsAmountChargedBack$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsAmountChargedBack$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountChargedBack$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsAmountChargedBack$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsAmountChargedBack$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsAmountChargedBack$Outbound;
}

export function listAllSubscriptionsAmountChargedBackToJSON(
  listAllSubscriptionsAmountChargedBack: ListAllSubscriptionsAmountChargedBack,
): string {
  return JSON.stringify(
    ListAllSubscriptionsAmountChargedBack$outboundSchema.parse(
      listAllSubscriptionsAmountChargedBack,
    ),
  );
}

export function listAllSubscriptionsAmountChargedBackFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsAmountChargedBack, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsAmountChargedBack$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsAmountChargedBack' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsSettlementAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsSettlementAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsSettlementAmount$ {
  /** @deprecated use `ListAllSubscriptionsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsSettlementAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsSettlementAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsSettlementAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsSettlementAmount$Outbound;
}

export function listAllSubscriptionsSettlementAmountToJSON(
  listAllSubscriptionsSettlementAmount: ListAllSubscriptionsSettlementAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsSettlementAmount$outboundSchema.parse(
      listAllSubscriptionsSettlementAmount,
    ),
  );
}

export function listAllSubscriptionsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsUnitPrice$inboundSchema: z.ZodType<
  ListAllSubscriptionsUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsUnitPrice$outboundSchema: z.ZodType<
  ListAllSubscriptionsUnitPrice$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsUnitPrice$ {
  /** @deprecated use `ListAllSubscriptionsUnitPrice$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsUnitPrice$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsUnitPrice$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsUnitPrice$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsUnitPrice$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsUnitPrice$Outbound;
}

export function listAllSubscriptionsUnitPriceToJSON(
  listAllSubscriptionsUnitPrice: ListAllSubscriptionsUnitPrice,
): string {
  return JSON.stringify(
    ListAllSubscriptionsUnitPrice$outboundSchema.parse(
      listAllSubscriptionsUnitPrice,
    ),
  );
}

export function listAllSubscriptionsUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsUnitPrice' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsDiscountAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsDiscountAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsDiscountAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsDiscountAmount$ {
  /** @deprecated use `ListAllSubscriptionsDiscountAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsDiscountAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsDiscountAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsDiscountAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsDiscountAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsDiscountAmount$Outbound;
}

export function listAllSubscriptionsDiscountAmountToJSON(
  listAllSubscriptionsDiscountAmount: ListAllSubscriptionsDiscountAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsDiscountAmount$outboundSchema.parse(
      listAllSubscriptionsDiscountAmount,
    ),
  );
}

export function listAllSubscriptionsDiscountAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsDiscountAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsDiscountAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsDiscountAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsTotalAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsTotalAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsTotalAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsTotalAmount$ {
  /** @deprecated use `ListAllSubscriptionsTotalAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsTotalAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsTotalAmount$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsTotalAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsTotalAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsTotalAmount$Outbound;
}

export function listAllSubscriptionsTotalAmountToJSON(
  listAllSubscriptionsTotalAmount: ListAllSubscriptionsTotalAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsTotalAmount$outboundSchema.parse(
      listAllSubscriptionsTotalAmount,
    ),
  );
}

export function listAllSubscriptionsTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsTotalAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsVatAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsVatAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsVatAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsVatAmount$ {
  /** @deprecated use `ListAllSubscriptionsVatAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsVatAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsVatAmount$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsVatAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsVatAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsVatAmount$Outbound;
}

export function listAllSubscriptionsVatAmountToJSON(
  listAllSubscriptionsVatAmount: ListAllSubscriptionsVatAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsVatAmount$outboundSchema.parse(
      listAllSubscriptionsVatAmount,
    ),
  );
}

export function listAllSubscriptionsVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsVatAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsCategory$inboundSchema: z.ZodNativeEnum<
  typeof ListAllSubscriptionsCategory
> = z.nativeEnum(ListAllSubscriptionsCategory);

/** @internal */
export const ListAllSubscriptionsCategory$outboundSchema: z.ZodNativeEnum<
  typeof ListAllSubscriptionsCategory
> = ListAllSubscriptionsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsCategory$ {
  /** @deprecated use `ListAllSubscriptionsCategory$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsCategory$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsCategory$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsCategory$outboundSchema;
}

/** @internal */
export const ListAllSubscriptionsRecurringAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsRecurringAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsRecurringAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsRecurringAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsRecurringAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRecurringAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRecurringAmount$ {
  /** @deprecated use `ListAllSubscriptionsRecurringAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsRecurringAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRecurringAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsRecurringAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRecurringAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRecurringAmount$Outbound;
}

export function listAllSubscriptionsRecurringAmountToJSON(
  listAllSubscriptionsRecurringAmount: ListAllSubscriptionsRecurringAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRecurringAmount$outboundSchema.parse(
      listAllSubscriptionsRecurringAmount,
    ),
  );
}

export function listAllSubscriptionsRecurringAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRecurringAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsRecurringAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRecurringAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsRecurring$inboundSchema: z.ZodType<
  ListAllSubscriptionsRecurring,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => ListAllSubscriptionsRecurringAmount$inboundSchema)
    .optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListAllSubscriptionsRecurring$Outbound = {
  description?: string | undefined;
  interval: string;
  amount?: ListAllSubscriptionsRecurringAmount$Outbound | undefined;
  times?: number | undefined;
  startDate?: string | null | undefined;
};

/** @internal */
export const ListAllSubscriptionsRecurring$outboundSchema: z.ZodType<
  ListAllSubscriptionsRecurring$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRecurring
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => ListAllSubscriptionsRecurringAmount$outboundSchema)
    .optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRecurring$ {
  /** @deprecated use `ListAllSubscriptionsRecurring$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRecurring$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRecurring$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsRecurring$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRecurring$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRecurring$Outbound;
}

export function listAllSubscriptionsRecurringToJSON(
  listAllSubscriptionsRecurring: ListAllSubscriptionsRecurring,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRecurring$outboundSchema.parse(
      listAllSubscriptionsRecurring,
    ),
  );
}

export function listAllSubscriptionsRecurringFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRecurring, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRecurring$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRecurring' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsLine$inboundSchema: z.ZodType<
  ListAllSubscriptionsLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => ListAllSubscriptionsUnitPrice$inboundSchema),
  discountAmount: z.lazy(() => ListAllSubscriptionsDiscountAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => ListAllSubscriptionsTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => ListAllSubscriptionsVatAmount$inboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(ListAllSubscriptionsCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => ListAllSubscriptionsRecurring$inboundSchema)
    .optional(),
});

/** @internal */
export type ListAllSubscriptionsLine$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: ListAllSubscriptionsUnitPrice$Outbound;
  discountAmount?: ListAllSubscriptionsDiscountAmount$Outbound | undefined;
  totalAmount: ListAllSubscriptionsTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: ListAllSubscriptionsVatAmount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
  recurring?: ListAllSubscriptionsRecurring$Outbound | undefined;
};

/** @internal */
export const ListAllSubscriptionsLine$outboundSchema: z.ZodType<
  ListAllSubscriptionsLine$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsLine
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => ListAllSubscriptionsUnitPrice$outboundSchema),
  discountAmount: z.lazy(() =>
    ListAllSubscriptionsDiscountAmount$outboundSchema
  ).optional(),
  totalAmount: z.lazy(() => ListAllSubscriptionsTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => ListAllSubscriptionsVatAmount$outboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(ListAllSubscriptionsCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => ListAllSubscriptionsRecurring$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsLine$ {
  /** @deprecated use `ListAllSubscriptionsLine$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsLine$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsLine$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsLine$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsLine$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsLine$Outbound;
}

export function listAllSubscriptionsLineToJSON(
  listAllSubscriptionsLine: ListAllSubscriptionsLine,
): string {
  return JSON.stringify(
    ListAllSubscriptionsLine$outboundSchema.parse(listAllSubscriptionsLine),
  );
}

export function listAllSubscriptionsLineFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsLine' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsBillingAddress$inboundSchema: z.ZodType<
  ListAllSubscriptionsBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type ListAllSubscriptionsBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const ListAllSubscriptionsBillingAddress$outboundSchema: z.ZodType<
  ListAllSubscriptionsBillingAddress$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsBillingAddress$ {
  /** @deprecated use `ListAllSubscriptionsBillingAddress$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsBillingAddress$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsBillingAddress$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsBillingAddress$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsBillingAddress$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsBillingAddress$Outbound;
}

export function listAllSubscriptionsBillingAddressToJSON(
  listAllSubscriptionsBillingAddress: ListAllSubscriptionsBillingAddress,
): string {
  return JSON.stringify(
    ListAllSubscriptionsBillingAddress$outboundSchema.parse(
      listAllSubscriptionsBillingAddress,
    ),
  );
}

export function listAllSubscriptionsBillingAddressFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsBillingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsBillingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsBillingAddress' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsShippingAddress$inboundSchema: z.ZodType<
  ListAllSubscriptionsShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type ListAllSubscriptionsShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const ListAllSubscriptionsShippingAddress$outboundSchema: z.ZodType<
  ListAllSubscriptionsShippingAddress$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsShippingAddress$ {
  /** @deprecated use `ListAllSubscriptionsShippingAddress$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsShippingAddress$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsShippingAddress$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsShippingAddress$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsShippingAddress$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsShippingAddress$Outbound;
}

export function listAllSubscriptionsShippingAddressToJSON(
  listAllSubscriptionsShippingAddress: ListAllSubscriptionsShippingAddress,
): string {
  return JSON.stringify(
    ListAllSubscriptionsShippingAddress$outboundSchema.parse(
      listAllSubscriptionsShippingAddress,
    ),
  );
}

export function listAllSubscriptionsShippingAddressFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsShippingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsShippingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsShippingAddress' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsMetadata$inboundSchema: z.ZodType<
  ListAllSubscriptionsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListAllSubscriptionsMetadata$Outbound = {};

/** @internal */
export const ListAllSubscriptionsMetadata$outboundSchema: z.ZodType<
  ListAllSubscriptionsMetadata$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsMetadata$ {
  /** @deprecated use `ListAllSubscriptionsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsMetadata$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsMetadata$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsMetadata$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsMetadata$Outbound;
}

export function listAllSubscriptionsMetadataToJSON(
  listAllSubscriptionsMetadata: ListAllSubscriptionsMetadata,
): string {
  return JSON.stringify(
    ListAllSubscriptionsMetadata$outboundSchema.parse(
      listAllSubscriptionsMetadata,
    ),
  );
}

export function listAllSubscriptionsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsMetadata' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsMetadataUnion$inboundSchema: z.ZodType<
  ListAllSubscriptionsMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListAllSubscriptionsMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type ListAllSubscriptionsMetadataUnion$Outbound =
  | ListAllSubscriptionsMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const ListAllSubscriptionsMetadataUnion$outboundSchema: z.ZodType<
  ListAllSubscriptionsMetadataUnion$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsMetadataUnion
> = z.union([
  z.lazy(() => ListAllSubscriptionsMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsMetadataUnion$ {
  /** @deprecated use `ListAllSubscriptionsMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsMetadataUnion$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsMetadataUnion$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsMetadataUnion$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsMetadataUnion$Outbound;
}

export function listAllSubscriptionsMetadataUnionToJSON(
  listAllSubscriptionsMetadataUnion: ListAllSubscriptionsMetadataUnion,
): string {
  return JSON.stringify(
    ListAllSubscriptionsMetadataUnion$outboundSchema.parse(
      listAllSubscriptionsMetadataUnion,
    ),
  );
}

export function listAllSubscriptionsMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsMetadataUnion' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsApplicationFeeAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsApplicationFeeAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsApplicationFeeAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsApplicationFeeAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsApplicationFeeAmount$ {
  /** @deprecated use `ListAllSubscriptionsApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsApplicationFeeAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsApplicationFeeAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsApplicationFeeAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsApplicationFeeAmount$Outbound;
}

export function listAllSubscriptionsApplicationFeeAmountToJSON(
  listAllSubscriptionsApplicationFeeAmount:
    ListAllSubscriptionsApplicationFeeAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsApplicationFeeAmount$outboundSchema.parse(
      listAllSubscriptionsApplicationFeeAmount,
    ),
  );
}

export function listAllSubscriptionsApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAllSubscriptionsApplicationFeeAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsApplicationFeeAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAllSubscriptionsApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsApplicationFee$inboundSchema: z.ZodType<
  ListAllSubscriptionsApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ListAllSubscriptionsApplicationFeeAmount$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type ListAllSubscriptionsApplicationFee$Outbound = {
  amount?: ListAllSubscriptionsApplicationFeeAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const ListAllSubscriptionsApplicationFee$outboundSchema: z.ZodType<
  ListAllSubscriptionsApplicationFee$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsApplicationFee
> = z.object({
  amount: z.lazy(() => ListAllSubscriptionsApplicationFeeAmount$outboundSchema)
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsApplicationFee$ {
  /** @deprecated use `ListAllSubscriptionsApplicationFee$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsApplicationFee$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsApplicationFee$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsApplicationFee$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsApplicationFee$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsApplicationFee$Outbound;
}

export function listAllSubscriptionsApplicationFeeToJSON(
  listAllSubscriptionsApplicationFee: ListAllSubscriptionsApplicationFee,
): string {
  return JSON.stringify(
    ListAllSubscriptionsApplicationFee$outboundSchema.parse(
      listAllSubscriptionsApplicationFee,
    ),
  );
}

export function listAllSubscriptionsApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsApplicationFee' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsRoutingAmount$inboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllSubscriptionsRoutingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllSubscriptionsRoutingAmount$outboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingAmount$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRoutingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRoutingAmount$ {
  /** @deprecated use `ListAllSubscriptionsRoutingAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRoutingAmount$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsRoutingAmount$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingAmount$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRoutingAmount$Outbound;
}

export function listAllSubscriptionsRoutingAmountToJSON(
  listAllSubscriptionsRoutingAmount: ListAllSubscriptionsRoutingAmount,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRoutingAmount$outboundSchema.parse(
      listAllSubscriptionsRoutingAmount,
    ),
  );
}

export function listAllSubscriptionsRoutingAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRoutingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRoutingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRoutingAmount' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsDestination$inboundSchema: z.ZodType<
  ListAllSubscriptionsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/** @internal */
export type ListAllSubscriptionsDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const ListAllSubscriptionsDestination$outboundSchema: z.ZodType<
  ListAllSubscriptionsDestination$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsDestination
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsDestination$ {
  /** @deprecated use `ListAllSubscriptionsDestination$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsDestination$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsDestination$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsDestination$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsDestination$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsDestination$Outbound;
}

export function listAllSubscriptionsDestinationToJSON(
  listAllSubscriptionsDestination: ListAllSubscriptionsDestination,
): string {
  return JSON.stringify(
    ListAllSubscriptionsDestination$outboundSchema.parse(
      listAllSubscriptionsDestination,
    ),
  );
}

export function listAllSubscriptionsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsDestination' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsRoutingSelf$inboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsRoutingSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsRoutingSelf$outboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingSelf$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRoutingSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRoutingSelf$ {
  /** @deprecated use `ListAllSubscriptionsRoutingSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRoutingSelf$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsRoutingSelf$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingSelf$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRoutingSelf$Outbound;
}

export function listAllSubscriptionsRoutingSelfToJSON(
  listAllSubscriptionsRoutingSelf: ListAllSubscriptionsRoutingSelf,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRoutingSelf$outboundSchema.parse(
      listAllSubscriptionsRoutingSelf,
    ),
  );
}

export function listAllSubscriptionsRoutingSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRoutingSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRoutingSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRoutingSelf' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsRoutingPayment$inboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsRoutingPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsRoutingPayment$outboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingPayment$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRoutingPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRoutingPayment$ {
  /** @deprecated use `ListAllSubscriptionsRoutingPayment$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRoutingPayment$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingPayment$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsRoutingPayment$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingPayment$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRoutingPayment$Outbound;
}

export function listAllSubscriptionsRoutingPaymentToJSON(
  listAllSubscriptionsRoutingPayment: ListAllSubscriptionsRoutingPayment,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRoutingPayment$outboundSchema.parse(
      listAllSubscriptionsRoutingPayment,
    ),
  );
}

export function listAllSubscriptionsRoutingPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRoutingPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsRoutingPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRoutingPayment' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsRoutingLinks$inboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllSubscriptionsRoutingSelf$inboundSchema),
  payment: z.lazy(() => ListAllSubscriptionsRoutingPayment$inboundSchema),
});

/** @internal */
export type ListAllSubscriptionsRoutingLinks$Outbound = {
  self: ListAllSubscriptionsRoutingSelf$Outbound;
  payment: ListAllSubscriptionsRoutingPayment$Outbound;
};

/** @internal */
export const ListAllSubscriptionsRoutingLinks$outboundSchema: z.ZodType<
  ListAllSubscriptionsRoutingLinks$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRoutingLinks
> = z.object({
  self: z.lazy(() => ListAllSubscriptionsRoutingSelf$outboundSchema),
  payment: z.lazy(() => ListAllSubscriptionsRoutingPayment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRoutingLinks$ {
  /** @deprecated use `ListAllSubscriptionsRoutingLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRoutingLinks$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsRoutingLinks$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRoutingLinks$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRoutingLinks$Outbound;
}

export function listAllSubscriptionsRoutingLinksToJSON(
  listAllSubscriptionsRoutingLinks: ListAllSubscriptionsRoutingLinks,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRoutingLinks$outboundSchema.parse(
      listAllSubscriptionsRoutingLinks,
    ),
  );
}

export function listAllSubscriptionsRoutingLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRoutingLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRoutingLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRoutingLinks' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsRouting$inboundSchema: z.ZodType<
  ListAllSubscriptionsRouting,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => ListAllSubscriptionsRoutingAmount$inboundSchema),
  destination: z.lazy(() => ListAllSubscriptionsDestination$inboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ListAllSubscriptionsRoutingLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListAllSubscriptionsRouting$Outbound = {
  resource: string;
  id: string;
  mode: string;
  amount: ListAllSubscriptionsRoutingAmount$Outbound;
  destination: ListAllSubscriptionsDestination$Outbound;
  createdAt: string;
  releaseDate?: string | null | undefined;
  _links: ListAllSubscriptionsRoutingLinks$Outbound;
};

/** @internal */
export const ListAllSubscriptionsRouting$outboundSchema: z.ZodType<
  ListAllSubscriptionsRouting$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRouting
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => ListAllSubscriptionsRoutingAmount$outboundSchema),
  destination: z.lazy(() => ListAllSubscriptionsDestination$outboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => ListAllSubscriptionsRoutingLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRouting$ {
  /** @deprecated use `ListAllSubscriptionsRouting$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRouting$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRouting$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsRouting$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRouting$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRouting$Outbound;
}

export function listAllSubscriptionsRoutingToJSON(
  listAllSubscriptionsRouting: ListAllSubscriptionsRouting,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRouting$outboundSchema.parse(
      listAllSubscriptionsRouting,
    ),
  );
}

export function listAllSubscriptionsRoutingFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRouting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRouting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRouting' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsStatusReason$inboundSchema: z.ZodType<
  ListAllSubscriptionsStatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type ListAllSubscriptionsStatusReason$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ListAllSubscriptionsStatusReason$outboundSchema: z.ZodType<
  ListAllSubscriptionsStatusReason$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsStatusReason
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsStatusReason$ {
  /** @deprecated use `ListAllSubscriptionsStatusReason$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsStatusReason$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsStatusReason$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsStatusReason$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsStatusReason$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsStatusReason$Outbound;
}

export function listAllSubscriptionsStatusReasonToJSON(
  listAllSubscriptionsStatusReason: ListAllSubscriptionsStatusReason,
): string {
  return JSON.stringify(
    ListAllSubscriptionsStatusReason$outboundSchema.parse(
      listAllSubscriptionsStatusReason,
    ),
  );
}

export function listAllSubscriptionsStatusReasonFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsStatusReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsStatusReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsStatusReason' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsPaymentSelf$inboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsPaymentSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsPaymentSelf$outboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentSelf$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsPaymentSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsPaymentSelf$ {
  /** @deprecated use `ListAllSubscriptionsPaymentSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsPaymentSelf$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsPaymentSelf$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentSelf$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsPaymentSelf$Outbound;
}

export function listAllSubscriptionsPaymentSelfToJSON(
  listAllSubscriptionsPaymentSelf: ListAllSubscriptionsPaymentSelf,
): string {
  return JSON.stringify(
    ListAllSubscriptionsPaymentSelf$outboundSchema.parse(
      listAllSubscriptionsPaymentSelf,
    ),
  );
}

export function listAllSubscriptionsPaymentSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsPaymentSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsPaymentSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsPaymentSelf' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsCheckout$inboundSchema: z.ZodType<
  ListAllSubscriptionsCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsCheckout$outboundSchema: z.ZodType<
  ListAllSubscriptionsCheckout$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsCheckout$ {
  /** @deprecated use `ListAllSubscriptionsCheckout$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsCheckout$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsCheckout$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsCheckout$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsCheckout$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsCheckout$Outbound;
}

export function listAllSubscriptionsCheckoutToJSON(
  listAllSubscriptionsCheckout: ListAllSubscriptionsCheckout,
): string {
  return JSON.stringify(
    ListAllSubscriptionsCheckout$outboundSchema.parse(
      listAllSubscriptionsCheckout,
    ),
  );
}

export function listAllSubscriptionsCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsCheckout' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsMobileAppCheckout$inboundSchema: z.ZodType<
  ListAllSubscriptionsMobileAppCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsMobileAppCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsMobileAppCheckout$outboundSchema: z.ZodType<
  ListAllSubscriptionsMobileAppCheckout$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsMobileAppCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsMobileAppCheckout$ {
  /** @deprecated use `ListAllSubscriptionsMobileAppCheckout$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsMobileAppCheckout$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsMobileAppCheckout$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsMobileAppCheckout$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsMobileAppCheckout$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsMobileAppCheckout$Outbound;
}

export function listAllSubscriptionsMobileAppCheckoutToJSON(
  listAllSubscriptionsMobileAppCheckout: ListAllSubscriptionsMobileAppCheckout,
): string {
  return JSON.stringify(
    ListAllSubscriptionsMobileAppCheckout$outboundSchema.parse(
      listAllSubscriptionsMobileAppCheckout,
    ),
  );
}

export function listAllSubscriptionsMobileAppCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsMobileAppCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsMobileAppCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsMobileAppCheckout' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsChangePaymentState$inboundSchema: z.ZodType<
  ListAllSubscriptionsChangePaymentState,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsChangePaymentState$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsChangePaymentState$outboundSchema: z.ZodType<
  ListAllSubscriptionsChangePaymentState$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsChangePaymentState
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsChangePaymentState$ {
  /** @deprecated use `ListAllSubscriptionsChangePaymentState$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsChangePaymentState$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsChangePaymentState$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsChangePaymentState$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsChangePaymentState$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsChangePaymentState$Outbound;
}

export function listAllSubscriptionsChangePaymentStateToJSON(
  listAllSubscriptionsChangePaymentState:
    ListAllSubscriptionsChangePaymentState,
): string {
  return JSON.stringify(
    ListAllSubscriptionsChangePaymentState$outboundSchema.parse(
      listAllSubscriptionsChangePaymentState,
    ),
  );
}

export function listAllSubscriptionsChangePaymentStateFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsChangePaymentState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsChangePaymentState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsChangePaymentState' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsDashboard$inboundSchema: z.ZodType<
  ListAllSubscriptionsDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsDashboard$outboundSchema: z.ZodType<
  ListAllSubscriptionsDashboard$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsDashboard$ {
  /** @deprecated use `ListAllSubscriptionsDashboard$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsDashboard$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsDashboard$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsDashboard$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsDashboard$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsDashboard$Outbound;
}

export function listAllSubscriptionsDashboardToJSON(
  listAllSubscriptionsDashboard: ListAllSubscriptionsDashboard,
): string {
  return JSON.stringify(
    ListAllSubscriptionsDashboard$outboundSchema.parse(
      listAllSubscriptionsDashboard,
    ),
  );
}

export function listAllSubscriptionsDashboardFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsDashboard' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsRefunds$inboundSchema: z.ZodType<
  ListAllSubscriptionsRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsRefunds$outboundSchema: z.ZodType<
  ListAllSubscriptionsRefunds$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsRefunds$ {
  /** @deprecated use `ListAllSubscriptionsRefunds$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsRefunds$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsRefunds$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsRefunds$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsRefunds$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsRefunds$Outbound;
}

export function listAllSubscriptionsRefundsToJSON(
  listAllSubscriptionsRefunds: ListAllSubscriptionsRefunds,
): string {
  return JSON.stringify(
    ListAllSubscriptionsRefunds$outboundSchema.parse(
      listAllSubscriptionsRefunds,
    ),
  );
}

export function listAllSubscriptionsRefundsFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsRefunds' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsChargebacks$inboundSchema: z.ZodType<
  ListAllSubscriptionsChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsChargebacks$outboundSchema: z.ZodType<
  ListAllSubscriptionsChargebacks$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsChargebacks$ {
  /** @deprecated use `ListAllSubscriptionsChargebacks$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsChargebacks$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsChargebacks$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsChargebacks$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsChargebacks$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsChargebacks$Outbound;
}

export function listAllSubscriptionsChargebacksToJSON(
  listAllSubscriptionsChargebacks: ListAllSubscriptionsChargebacks,
): string {
  return JSON.stringify(
    ListAllSubscriptionsChargebacks$outboundSchema.parse(
      listAllSubscriptionsChargebacks,
    ),
  );
}

export function listAllSubscriptionsChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsChargebacks' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsCaptures$inboundSchema: z.ZodType<
  ListAllSubscriptionsCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsCaptures$outboundSchema: z.ZodType<
  ListAllSubscriptionsCaptures$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsCaptures$ {
  /** @deprecated use `ListAllSubscriptionsCaptures$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsCaptures$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsCaptures$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsCaptures$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsCaptures$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsCaptures$Outbound;
}

export function listAllSubscriptionsCapturesToJSON(
  listAllSubscriptionsCaptures: ListAllSubscriptionsCaptures,
): string {
  return JSON.stringify(
    ListAllSubscriptionsCaptures$outboundSchema.parse(
      listAllSubscriptionsCaptures,
    ),
  );
}

export function listAllSubscriptionsCapturesFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsCaptures' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsSettlement$inboundSchema: z.ZodType<
  ListAllSubscriptionsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsSettlement$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsSettlement$outboundSchema: z.ZodType<
  ListAllSubscriptionsSettlement$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsSettlement
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsSettlement$ {
  /** @deprecated use `ListAllSubscriptionsSettlement$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsSettlement$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsSettlement$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsSettlement$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsSettlement$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsSettlement$Outbound;
}

export function listAllSubscriptionsSettlementToJSON(
  listAllSubscriptionsSettlement: ListAllSubscriptionsSettlement,
): string {
  return JSON.stringify(
    ListAllSubscriptionsSettlement$outboundSchema.parse(
      listAllSubscriptionsSettlement,
    ),
  );
}

export function listAllSubscriptionsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsSettlement' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsCustomer$inboundSchema: z.ZodType<
  ListAllSubscriptionsCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsCustomer$outboundSchema: z.ZodType<
  ListAllSubscriptionsCustomer$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsCustomer$ {
  /** @deprecated use `ListAllSubscriptionsCustomer$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsCustomer$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsCustomer$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsCustomer$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsCustomer$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsCustomer$Outbound;
}

export function listAllSubscriptionsCustomerToJSON(
  listAllSubscriptionsCustomer: ListAllSubscriptionsCustomer,
): string {
  return JSON.stringify(
    ListAllSubscriptionsCustomer$outboundSchema.parse(
      listAllSubscriptionsCustomer,
    ),
  );
}

export function listAllSubscriptionsCustomerFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsCustomer' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsMandate$inboundSchema: z.ZodType<
  ListAllSubscriptionsMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsMandate$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsMandate$outboundSchema: z.ZodType<
  ListAllSubscriptionsMandate$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsMandate
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsMandate$ {
  /** @deprecated use `ListAllSubscriptionsMandate$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsMandate$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsMandate$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsMandate$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsMandate$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsMandate$Outbound;
}

export function listAllSubscriptionsMandateToJSON(
  listAllSubscriptionsMandate: ListAllSubscriptionsMandate,
): string {
  return JSON.stringify(
    ListAllSubscriptionsMandate$outboundSchema.parse(
      listAllSubscriptionsMandate,
    ),
  );
}

export function listAllSubscriptionsMandateFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsMandate' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsSubscription$inboundSchema: z.ZodType<
  ListAllSubscriptionsSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsSubscription$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsSubscription$outboundSchema: z.ZodType<
  ListAllSubscriptionsSubscription$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsSubscription
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsSubscription$ {
  /** @deprecated use `ListAllSubscriptionsSubscription$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsSubscription$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsSubscription$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsSubscription$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsSubscription$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsSubscription$Outbound;
}

export function listAllSubscriptionsSubscriptionToJSON(
  listAllSubscriptionsSubscription: ListAllSubscriptionsSubscription,
): string {
  return JSON.stringify(
    ListAllSubscriptionsSubscription$outboundSchema.parse(
      listAllSubscriptionsSubscription,
    ),
  );
}

export function listAllSubscriptionsSubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsSubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsSubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsSubscription' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsOrder$inboundSchema: z.ZodType<
  ListAllSubscriptionsOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsOrder$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsOrder$outboundSchema: z.ZodType<
  ListAllSubscriptionsOrder$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsOrder
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsOrder$ {
  /** @deprecated use `ListAllSubscriptionsOrder$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsOrder$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsOrder$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsOrder$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsOrder$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsOrder$Outbound;
}

export function listAllSubscriptionsOrderToJSON(
  listAllSubscriptionsOrder: ListAllSubscriptionsOrder,
): string {
  return JSON.stringify(
    ListAllSubscriptionsOrder$outboundSchema.parse(listAllSubscriptionsOrder),
  );
}

export function listAllSubscriptionsOrderFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsOrder' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsTerminal$inboundSchema: z.ZodType<
  ListAllSubscriptionsTerminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsTerminal$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsTerminal$outboundSchema: z.ZodType<
  ListAllSubscriptionsTerminal$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsTerminal
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsTerminal$ {
  /** @deprecated use `ListAllSubscriptionsTerminal$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsTerminal$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsTerminal$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsTerminal$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsTerminal$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsTerminal$Outbound;
}

export function listAllSubscriptionsTerminalToJSON(
  listAllSubscriptionsTerminal: ListAllSubscriptionsTerminal,
): string {
  return JSON.stringify(
    ListAllSubscriptionsTerminal$outboundSchema.parse(
      listAllSubscriptionsTerminal,
    ),
  );
}

export function listAllSubscriptionsTerminalFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsTerminal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsTerminal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsTerminal' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsPaymentDocumentation$inboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsPaymentDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsPaymentDocumentation$outboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsPaymentDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsPaymentDocumentation$ {
  /** @deprecated use `ListAllSubscriptionsPaymentDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListAllSubscriptionsPaymentDocumentation$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsPaymentDocumentation$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentDocumentation$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsPaymentDocumentation$Outbound;
}

export function listAllSubscriptionsPaymentDocumentationToJSON(
  listAllSubscriptionsPaymentDocumentation:
    ListAllSubscriptionsPaymentDocumentation,
): string {
  return JSON.stringify(
    ListAllSubscriptionsPaymentDocumentation$outboundSchema.parse(
      listAllSubscriptionsPaymentDocumentation,
    ),
  );
}

export function listAllSubscriptionsPaymentDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAllSubscriptionsPaymentDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllSubscriptionsPaymentDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAllSubscriptionsPaymentDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsPaymentLinks$inboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllSubscriptionsPaymentSelf$inboundSchema),
  checkout: z.lazy(() => ListAllSubscriptionsCheckout$inboundSchema).optional(),
  mobileAppCheckout: z.lazy(() =>
    ListAllSubscriptionsMobileAppCheckout$inboundSchema
  ).optional(),
  changePaymentState: z.lazy(() =>
    ListAllSubscriptionsChangePaymentState$inboundSchema
  ).optional(),
  dashboard: z.lazy(() => ListAllSubscriptionsDashboard$inboundSchema),
  refunds: z.lazy(() => ListAllSubscriptionsRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => ListAllSubscriptionsChargebacks$inboundSchema)
    .optional(),
  captures: z.lazy(() => ListAllSubscriptionsCaptures$inboundSchema).optional(),
  settlement: z.lazy(() => ListAllSubscriptionsSettlement$inboundSchema)
    .optional(),
  customer: z.lazy(() => ListAllSubscriptionsCustomer$inboundSchema).optional(),
  mandate: z.lazy(() => ListAllSubscriptionsMandate$inboundSchema).optional(),
  subscription: z.lazy(() => ListAllSubscriptionsSubscription$inboundSchema)
    .optional(),
  order: z.lazy(() => ListAllSubscriptionsOrder$inboundSchema).optional(),
  terminal: z.lazy(() => ListAllSubscriptionsTerminal$inboundSchema).optional(),
  documentation: z.lazy(() =>
    ListAllSubscriptionsPaymentDocumentation$inboundSchema
  ).optional(),
});

/** @internal */
export type ListAllSubscriptionsPaymentLinks$Outbound = {
  self: ListAllSubscriptionsPaymentSelf$Outbound;
  checkout?: ListAllSubscriptionsCheckout$Outbound | undefined;
  mobileAppCheckout?:
    | ListAllSubscriptionsMobileAppCheckout$Outbound
    | undefined;
  changePaymentState?:
    | ListAllSubscriptionsChangePaymentState$Outbound
    | undefined;
  dashboard: ListAllSubscriptionsDashboard$Outbound;
  refunds?: ListAllSubscriptionsRefunds$Outbound | undefined;
  chargebacks?: ListAllSubscriptionsChargebacks$Outbound | undefined;
  captures?: ListAllSubscriptionsCaptures$Outbound | undefined;
  settlement?: ListAllSubscriptionsSettlement$Outbound | undefined;
  customer?: ListAllSubscriptionsCustomer$Outbound | undefined;
  mandate?: ListAllSubscriptionsMandate$Outbound | undefined;
  subscription?: ListAllSubscriptionsSubscription$Outbound | undefined;
  order?: ListAllSubscriptionsOrder$Outbound | undefined;
  terminal?: ListAllSubscriptionsTerminal$Outbound | undefined;
  documentation?: ListAllSubscriptionsPaymentDocumentation$Outbound | undefined;
};

/** @internal */
export const ListAllSubscriptionsPaymentLinks$outboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentLinks$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsPaymentLinks
> = z.object({
  self: z.lazy(() => ListAllSubscriptionsPaymentSelf$outboundSchema),
  checkout: z.lazy(() => ListAllSubscriptionsCheckout$outboundSchema)
    .optional(),
  mobileAppCheckout: z.lazy(() =>
    ListAllSubscriptionsMobileAppCheckout$outboundSchema
  ).optional(),
  changePaymentState: z.lazy(() =>
    ListAllSubscriptionsChangePaymentState$outboundSchema
  ).optional(),
  dashboard: z.lazy(() => ListAllSubscriptionsDashboard$outboundSchema),
  refunds: z.lazy(() => ListAllSubscriptionsRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => ListAllSubscriptionsChargebacks$outboundSchema)
    .optional(),
  captures: z.lazy(() => ListAllSubscriptionsCaptures$outboundSchema)
    .optional(),
  settlement: z.lazy(() => ListAllSubscriptionsSettlement$outboundSchema)
    .optional(),
  customer: z.lazy(() => ListAllSubscriptionsCustomer$outboundSchema)
    .optional(),
  mandate: z.lazy(() => ListAllSubscriptionsMandate$outboundSchema).optional(),
  subscription: z.lazy(() => ListAllSubscriptionsSubscription$outboundSchema)
    .optional(),
  order: z.lazy(() => ListAllSubscriptionsOrder$outboundSchema).optional(),
  terminal: z.lazy(() => ListAllSubscriptionsTerminal$outboundSchema)
    .optional(),
  documentation: z.lazy(() =>
    ListAllSubscriptionsPaymentDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsPaymentLinks$ {
  /** @deprecated use `ListAllSubscriptionsPaymentLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsPaymentLinks$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsPaymentLinks$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentLinks$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsPaymentLinks$Outbound;
}

export function listAllSubscriptionsPaymentLinksToJSON(
  listAllSubscriptionsPaymentLinks: ListAllSubscriptionsPaymentLinks,
): string {
  return JSON.stringify(
    ListAllSubscriptionsPaymentLinks$outboundSchema.parse(
      listAllSubscriptionsPaymentLinks,
    ),
  );
}

export function listAllSubscriptionsPaymentLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsPaymentLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsPaymentLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsPaymentLinks' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsPaymentOutput$inboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => ListAllSubscriptionsAmount$inboundSchema),
  amountRefunded: z.lazy(() => ListAllSubscriptionsAmountRefunded$inboundSchema)
    .optional(),
  amountRemaining: z.lazy(() =>
    ListAllSubscriptionsAmountRemaining$inboundSchema
  ).optional(),
  amountCaptured: z.lazy(() => ListAllSubscriptionsAmountCaptured$inboundSchema)
    .optional(),
  amountChargedBack: z.lazy(() =>
    ListAllSubscriptionsAmountChargedBack$inboundSchema
  ).optional(),
  settlementAmount: z.lazy(() =>
    ListAllSubscriptionsSettlementAmount$inboundSchema
  ).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => ListAllSubscriptionsLine$inboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() => ListAllSubscriptionsBillingAddress$inboundSchema)
    .optional(),
  shippingAddress: z.lazy(() =>
    ListAllSubscriptionsShippingAddress$inboundSchema
  ).optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListAllSubscriptionsMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => ListAllSubscriptionsApplicationFee$inboundSchema),
  ).optional(),
  routing: z.nullable(
    z.array(z.lazy(() => ListAllSubscriptionsRouting$inboundSchema)),
  ).optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(
    z.lazy(() => ListAllSubscriptionsStatusReason$inboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ListAllSubscriptionsPaymentLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListAllSubscriptionsPaymentOutput$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: ListAllSubscriptionsAmount$Outbound;
  amountRefunded?: ListAllSubscriptionsAmountRefunded$Outbound | undefined;
  amountRemaining?: ListAllSubscriptionsAmountRemaining$Outbound | undefined;
  amountCaptured?: ListAllSubscriptionsAmountCaptured$Outbound | undefined;
  amountChargedBack?:
    | ListAllSubscriptionsAmountChargedBack$Outbound
    | undefined;
  settlementAmount?: ListAllSubscriptionsSettlementAmount$Outbound | undefined;
  redirectUrl?: string | null | undefined;
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  lines?: Array<ListAllSubscriptionsLine$Outbound> | null | undefined;
  billingAddress?: ListAllSubscriptionsBillingAddress$Outbound | undefined;
  shippingAddress?: ListAllSubscriptionsShippingAddress$Outbound | undefined;
  locale?: string | null | undefined;
  countryCode?: string | null | undefined;
  method?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  metadata?:
    | ListAllSubscriptionsMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  captureMode?: string | null | undefined;
  captureDelay?: string | null | undefined;
  captureBefore?: string | null | undefined;
  applicationFee?:
    | ListAllSubscriptionsApplicationFee$Outbound
    | null
    | undefined;
  routing?: Array<ListAllSubscriptionsRouting$Outbound> | null | undefined;
  sequenceType: string | null;
  subscriptionId?: string | null | undefined;
  mandateId?: string | null | undefined;
  customerId?: string | null | undefined;
  profileId: string;
  settlementId?: string | null | undefined;
  orderId?: string | null | undefined;
  status: string;
  statusReason?: ListAllSubscriptionsStatusReason$Outbound | null | undefined;
  isCancelable?: boolean | null | undefined;
  details?: { [k: string]: any } | null | undefined;
  createdAt: string;
  authorizedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  canceledAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredAt?: string | null | undefined;
  failedAt?: string | null | undefined;
  _links: ListAllSubscriptionsPaymentLinks$Outbound;
};

/** @internal */
export const ListAllSubscriptionsPaymentOutput$outboundSchema: z.ZodType<
  ListAllSubscriptionsPaymentOutput$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsPaymentOutput
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => ListAllSubscriptionsAmount$outboundSchema),
  amountRefunded: z.lazy(() =>
    ListAllSubscriptionsAmountRefunded$outboundSchema
  ).optional(),
  amountRemaining: z.lazy(() =>
    ListAllSubscriptionsAmountRemaining$outboundSchema
  ).optional(),
  amountCaptured: z.lazy(() =>
    ListAllSubscriptionsAmountCaptured$outboundSchema
  ).optional(),
  amountChargedBack: z.lazy(() =>
    ListAllSubscriptionsAmountChargedBack$outboundSchema
  ).optional(),
  settlementAmount: z.lazy(() =>
    ListAllSubscriptionsSettlementAmount$outboundSchema
  ).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => ListAllSubscriptionsLine$outboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    ListAllSubscriptionsBillingAddress$outboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    ListAllSubscriptionsShippingAddress$outboundSchema
  ).optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListAllSubscriptionsMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => ListAllSubscriptionsApplicationFee$outboundSchema),
  ).optional(),
  routing: z.nullable(
    z.array(z.lazy(() => ListAllSubscriptionsRouting$outboundSchema)),
  ).optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(
    z.lazy(() => ListAllSubscriptionsStatusReason$outboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => ListAllSubscriptionsPaymentLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsPaymentOutput$ {
  /** @deprecated use `ListAllSubscriptionsPaymentOutput$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsPaymentOutput$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentOutput$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsPaymentOutput$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsPaymentOutput$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsPaymentOutput$Outbound;
}

export function listAllSubscriptionsPaymentOutputToJSON(
  listAllSubscriptionsPaymentOutput: ListAllSubscriptionsPaymentOutput,
): string {
  return JSON.stringify(
    ListAllSubscriptionsPaymentOutput$outboundSchema.parse(
      listAllSubscriptionsPaymentOutput,
    ),
  );
}

export function listAllSubscriptionsPaymentOutputFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsPaymentOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsPaymentOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsPaymentOutput' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsEmbedded$inboundSchema: z.ZodType<
  ListAllSubscriptionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  payments: z.array(
    z.lazy(() => ListAllSubscriptionsPaymentOutput$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListAllSubscriptionsEmbedded$Outbound = {
  payments?: Array<ListAllSubscriptionsPaymentOutput$Outbound> | undefined;
};

/** @internal */
export const ListAllSubscriptionsEmbedded$outboundSchema: z.ZodType<
  ListAllSubscriptionsEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsEmbedded
> = z.object({
  payments: z.array(
    z.lazy(() => ListAllSubscriptionsPaymentOutput$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsEmbedded$ {
  /** @deprecated use `ListAllSubscriptionsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsEmbedded$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsEmbedded$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsEmbedded$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsEmbedded$Outbound;
}

export function listAllSubscriptionsEmbeddedToJSON(
  listAllSubscriptionsEmbedded: ListAllSubscriptionsEmbedded,
): string {
  return JSON.stringify(
    ListAllSubscriptionsEmbedded$outboundSchema.parse(
      listAllSubscriptionsEmbedded,
    ),
  );
}

export function listAllSubscriptionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsSelf$inboundSchema: z.ZodType<
  ListAllSubscriptionsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsSelf$outboundSchema: z.ZodType<
  ListAllSubscriptionsSelf$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsSelf$ {
  /** @deprecated use `ListAllSubscriptionsSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsSelf$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsSelf$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsSelf$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsSelf$Outbound;
}

export function listAllSubscriptionsSelfToJSON(
  listAllSubscriptionsSelf: ListAllSubscriptionsSelf,
): string {
  return JSON.stringify(
    ListAllSubscriptionsSelf$outboundSchema.parse(listAllSubscriptionsSelf),
  );
}

export function listAllSubscriptionsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsSelf' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsPrevious$inboundSchema: z.ZodType<
  ListAllSubscriptionsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllSubscriptionsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllSubscriptionsPrevious$outboundSchema: z.ZodType<
  ListAllSubscriptionsPrevious$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsPrevious$ {
  /** @deprecated use `ListAllSubscriptionsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsPrevious$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsPrevious$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsPrevious$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsPrevious$Outbound;
}

export function listAllSubscriptionsPreviousToJSON(
  listAllSubscriptionsPrevious: ListAllSubscriptionsPrevious,
): string {
  return JSON.stringify(
    ListAllSubscriptionsPrevious$outboundSchema.parse(
      listAllSubscriptionsPrevious,
    ),
  );
}

export function listAllSubscriptionsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsPrevious' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsNext$inboundSchema: z.ZodType<
  ListAllSubscriptionsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllSubscriptionsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllSubscriptionsNext$outboundSchema: z.ZodType<
  ListAllSubscriptionsNext$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsNext$ {
  /** @deprecated use `ListAllSubscriptionsNext$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsNext$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsNext$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsNext$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsNext$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsNext$Outbound;
}

export function listAllSubscriptionsNextToJSON(
  listAllSubscriptionsNext: ListAllSubscriptionsNext,
): string {
  return JSON.stringify(
    ListAllSubscriptionsNext$outboundSchema.parse(listAllSubscriptionsNext),
  );
}

export function listAllSubscriptionsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsNext' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsDocumentation$inboundSchema: z.ZodType<
  ListAllSubscriptionsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllSubscriptionsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllSubscriptionsDocumentation$outboundSchema: z.ZodType<
  ListAllSubscriptionsDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsDocumentation$ {
  /** @deprecated use `ListAllSubscriptionsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsDocumentation$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllSubscriptionsDocumentation$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsDocumentation$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsDocumentation$Outbound;
}

export function listAllSubscriptionsDocumentationToJSON(
  listAllSubscriptionsDocumentation: ListAllSubscriptionsDocumentation,
): string {
  return JSON.stringify(
    ListAllSubscriptionsDocumentation$outboundSchema.parse(
      listAllSubscriptionsDocumentation,
    ),
  );
}

export function listAllSubscriptionsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsLinks$inboundSchema: z.ZodType<
  ListAllSubscriptionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllSubscriptionsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListAllSubscriptionsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListAllSubscriptionsNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() => ListAllSubscriptionsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListAllSubscriptionsLinks$Outbound = {
  self?: ListAllSubscriptionsSelf$Outbound | undefined;
  previous?: ListAllSubscriptionsPrevious$Outbound | null | undefined;
  next?: ListAllSubscriptionsNext$Outbound | null | undefined;
  documentation?: ListAllSubscriptionsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListAllSubscriptionsLinks$outboundSchema: z.ZodType<
  ListAllSubscriptionsLinks$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsLinks
> = z.object({
  self: z.lazy(() => ListAllSubscriptionsSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListAllSubscriptionsPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListAllSubscriptionsNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() => ListAllSubscriptionsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsLinks$ {
  /** @deprecated use `ListAllSubscriptionsLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsLinks$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsLinks$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsLinks$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsLinks$Outbound;
}

export function listAllSubscriptionsLinksToJSON(
  listAllSubscriptionsLinks: ListAllSubscriptionsLinks,
): string {
  return JSON.stringify(
    ListAllSubscriptionsLinks$outboundSchema.parse(listAllSubscriptionsLinks),
  );
}

export function listAllSubscriptionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsLinks' from JSON`,
  );
}

/** @internal */
export const ListAllSubscriptionsResponse$inboundSchema: z.ZodType<
  ListAllSubscriptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListAllSubscriptionsEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => ListAllSubscriptionsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllSubscriptionsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListAllSubscriptionsEmbedded$Outbound | undefined;
  _links?: ListAllSubscriptionsLinks$Outbound | undefined;
};

/** @internal */
export const ListAllSubscriptionsResponse$outboundSchema: z.ZodType<
  ListAllSubscriptionsResponse$Outbound,
  z.ZodTypeDef,
  ListAllSubscriptionsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListAllSubscriptionsEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => ListAllSubscriptionsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllSubscriptionsResponse$ {
  /** @deprecated use `ListAllSubscriptionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllSubscriptionsResponse$inboundSchema;
  /** @deprecated use `ListAllSubscriptionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllSubscriptionsResponse$outboundSchema;
  /** @deprecated use `ListAllSubscriptionsResponse$Outbound` instead. */
  export type Outbound = ListAllSubscriptionsResponse$Outbound;
}

export function listAllSubscriptionsResponseToJSON(
  listAllSubscriptionsResponse: ListAllSubscriptionsResponse,
): string {
  return JSON.stringify(
    ListAllSubscriptionsResponse$outboundSchema.parse(
      listAllSubscriptionsResponse,
    ),
  );
}

export function listAllSubscriptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllSubscriptionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllSubscriptionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllSubscriptionsResponse' from JSON`,
  );
}
