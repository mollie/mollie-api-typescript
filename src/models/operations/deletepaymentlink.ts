/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePaymentLinkRequestBody = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type DeletePaymentLinkRequest = {
  /**
   * Provide the ID of the related payment link.
   */
  paymentLinkId: string;
  requestBody?: DeletePaymentLinkRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type DeletePaymentLinkUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type DeletePaymentLinkUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: DeletePaymentLinkUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type DeletePaymentLinkNotFoundDocumentation = {
  href: string;
  type: string;
};

export type DeletePaymentLinkNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: DeletePaymentLinkNotFoundDocumentation;
};

/** @internal */
export const DeletePaymentLinkRequestBody$inboundSchema: z.ZodType<
  DeletePaymentLinkRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type DeletePaymentLinkRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const DeletePaymentLinkRequestBody$outboundSchema: z.ZodType<
  DeletePaymentLinkRequestBody$Outbound,
  z.ZodTypeDef,
  DeletePaymentLinkRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkRequestBody$ {
  /** @deprecated use `DeletePaymentLinkRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeletePaymentLinkRequestBody$inboundSchema;
  /** @deprecated use `DeletePaymentLinkRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeletePaymentLinkRequestBody$outboundSchema;
  /** @deprecated use `DeletePaymentLinkRequestBody$Outbound` instead. */
  export type Outbound = DeletePaymentLinkRequestBody$Outbound;
}

export function deletePaymentLinkRequestBodyToJSON(
  deletePaymentLinkRequestBody: DeletePaymentLinkRequestBody,
): string {
  return JSON.stringify(
    DeletePaymentLinkRequestBody$outboundSchema.parse(
      deletePaymentLinkRequestBody,
    ),
  );
}

export function deletePaymentLinkRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeletePaymentLinkRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePaymentLinkRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePaymentLinkRequestBody' from JSON`,
  );
}

/** @internal */
export const DeletePaymentLinkRequest$inboundSchema: z.ZodType<
  DeletePaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentLinkId: z.string(),
  RequestBody: z.lazy(() => DeletePaymentLinkRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeletePaymentLinkRequest$Outbound = {
  paymentLinkId: string;
  RequestBody?: DeletePaymentLinkRequestBody$Outbound | undefined;
};

/** @internal */
export const DeletePaymentLinkRequest$outboundSchema: z.ZodType<
  DeletePaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  DeletePaymentLinkRequest
> = z.object({
  paymentLinkId: z.string(),
  requestBody: z.lazy(() => DeletePaymentLinkRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkRequest$ {
  /** @deprecated use `DeletePaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePaymentLinkRequest$inboundSchema;
  /** @deprecated use `DeletePaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePaymentLinkRequest$outboundSchema;
  /** @deprecated use `DeletePaymentLinkRequest$Outbound` instead. */
  export type Outbound = DeletePaymentLinkRequest$Outbound;
}

export function deletePaymentLinkRequestToJSON(
  deletePaymentLinkRequest: DeletePaymentLinkRequest,
): string {
  return JSON.stringify(
    DeletePaymentLinkRequest$outboundSchema.parse(deletePaymentLinkRequest),
  );
}

export function deletePaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePaymentLinkRequest' from JSON`,
  );
}

/** @internal */
export const DeletePaymentLinkUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    DeletePaymentLinkUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type DeletePaymentLinkUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const DeletePaymentLinkUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    DeletePaymentLinkUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    DeletePaymentLinkUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkUnprocessableEntityDocumentation$ {
  /** @deprecated use `DeletePaymentLinkUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    DeletePaymentLinkUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `DeletePaymentLinkUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    DeletePaymentLinkUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `DeletePaymentLinkUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    DeletePaymentLinkUnprocessableEntityDocumentation$Outbound;
}

export function deletePaymentLinkUnprocessableEntityDocumentationToJSON(
  deletePaymentLinkUnprocessableEntityDocumentation:
    DeletePaymentLinkUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    DeletePaymentLinkUnprocessableEntityDocumentation$outboundSchema.parse(
      deletePaymentLinkUnprocessableEntityDocumentation,
    ),
  );
}

export function deletePaymentLinkUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  DeletePaymentLinkUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeletePaymentLinkUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeletePaymentLinkUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const DeletePaymentLinkUnprocessableEntityLinks$inboundSchema: z.ZodType<
  DeletePaymentLinkUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    DeletePaymentLinkUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type DeletePaymentLinkUnprocessableEntityLinks$Outbound = {
  documentation: DeletePaymentLinkUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const DeletePaymentLinkUnprocessableEntityLinks$outboundSchema:
  z.ZodType<
    DeletePaymentLinkUnprocessableEntityLinks$Outbound,
    z.ZodTypeDef,
    DeletePaymentLinkUnprocessableEntityLinks
  > = z.object({
    documentation: z.lazy(() =>
      DeletePaymentLinkUnprocessableEntityDocumentation$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkUnprocessableEntityLinks$ {
  /** @deprecated use `DeletePaymentLinkUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    DeletePaymentLinkUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `DeletePaymentLinkUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    DeletePaymentLinkUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `DeletePaymentLinkUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = DeletePaymentLinkUnprocessableEntityLinks$Outbound;
}

export function deletePaymentLinkUnprocessableEntityLinksToJSON(
  deletePaymentLinkUnprocessableEntityLinks:
    DeletePaymentLinkUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    DeletePaymentLinkUnprocessableEntityLinks$outboundSchema.parse(
      deletePaymentLinkUnprocessableEntityLinks,
    ),
  );
}

export function deletePaymentLinkUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  DeletePaymentLinkUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeletePaymentLinkUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeletePaymentLinkUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const DeletePaymentLinkNotFoundDocumentation$inboundSchema: z.ZodType<
  DeletePaymentLinkNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type DeletePaymentLinkNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const DeletePaymentLinkNotFoundDocumentation$outboundSchema: z.ZodType<
  DeletePaymentLinkNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  DeletePaymentLinkNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkNotFoundDocumentation$ {
  /** @deprecated use `DeletePaymentLinkNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    DeletePaymentLinkNotFoundDocumentation$inboundSchema;
  /** @deprecated use `DeletePaymentLinkNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    DeletePaymentLinkNotFoundDocumentation$outboundSchema;
  /** @deprecated use `DeletePaymentLinkNotFoundDocumentation$Outbound` instead. */
  export type Outbound = DeletePaymentLinkNotFoundDocumentation$Outbound;
}

export function deletePaymentLinkNotFoundDocumentationToJSON(
  deletePaymentLinkNotFoundDocumentation:
    DeletePaymentLinkNotFoundDocumentation,
): string {
  return JSON.stringify(
    DeletePaymentLinkNotFoundDocumentation$outboundSchema.parse(
      deletePaymentLinkNotFoundDocumentation,
    ),
  );
}

export function deletePaymentLinkNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<DeletePaymentLinkNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeletePaymentLinkNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePaymentLinkNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const DeletePaymentLinkNotFoundLinks$inboundSchema: z.ZodType<
  DeletePaymentLinkNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    DeletePaymentLinkNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type DeletePaymentLinkNotFoundLinks$Outbound = {
  documentation: DeletePaymentLinkNotFoundDocumentation$Outbound;
};

/** @internal */
export const DeletePaymentLinkNotFoundLinks$outboundSchema: z.ZodType<
  DeletePaymentLinkNotFoundLinks$Outbound,
  z.ZodTypeDef,
  DeletePaymentLinkNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    DeletePaymentLinkNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkNotFoundLinks$ {
  /** @deprecated use `DeletePaymentLinkNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = DeletePaymentLinkNotFoundLinks$inboundSchema;
  /** @deprecated use `DeletePaymentLinkNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = DeletePaymentLinkNotFoundLinks$outboundSchema;
  /** @deprecated use `DeletePaymentLinkNotFoundLinks$Outbound` instead. */
  export type Outbound = DeletePaymentLinkNotFoundLinks$Outbound;
}

export function deletePaymentLinkNotFoundLinksToJSON(
  deletePaymentLinkNotFoundLinks: DeletePaymentLinkNotFoundLinks,
): string {
  return JSON.stringify(
    DeletePaymentLinkNotFoundLinks$outboundSchema.parse(
      deletePaymentLinkNotFoundLinks,
    ),
  );
}

export function deletePaymentLinkNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<DeletePaymentLinkNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePaymentLinkNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePaymentLinkNotFoundLinks' from JSON`,
  );
}
