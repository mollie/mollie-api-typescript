/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePaymentLinkRequestBody = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type DeletePaymentLinkRequest = {
  /**
   * Provide the ID of the related payment link.
   */
  paymentLinkId: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: DeletePaymentLinkRequestBody | undefined;
};

/** @internal */
export const DeletePaymentLinkRequestBody$inboundSchema: z.ZodType<
  DeletePaymentLinkRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type DeletePaymentLinkRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const DeletePaymentLinkRequestBody$outboundSchema: z.ZodType<
  DeletePaymentLinkRequestBody$Outbound,
  z.ZodTypeDef,
  DeletePaymentLinkRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkRequestBody$ {
  /** @deprecated use `DeletePaymentLinkRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeletePaymentLinkRequestBody$inboundSchema;
  /** @deprecated use `DeletePaymentLinkRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeletePaymentLinkRequestBody$outboundSchema;
  /** @deprecated use `DeletePaymentLinkRequestBody$Outbound` instead. */
  export type Outbound = DeletePaymentLinkRequestBody$Outbound;
}

export function deletePaymentLinkRequestBodyToJSON(
  deletePaymentLinkRequestBody: DeletePaymentLinkRequestBody,
): string {
  return JSON.stringify(
    DeletePaymentLinkRequestBody$outboundSchema.parse(
      deletePaymentLinkRequestBody,
    ),
  );
}

export function deletePaymentLinkRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeletePaymentLinkRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePaymentLinkRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePaymentLinkRequestBody' from JSON`,
  );
}

/** @internal */
export const DeletePaymentLinkRequest$inboundSchema: z.ZodType<
  DeletePaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentLinkId: z.string(),
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => DeletePaymentLinkRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeletePaymentLinkRequest$Outbound = {
  paymentLinkId: string;
  "idempotency-key"?: string | undefined;
  RequestBody?: DeletePaymentLinkRequestBody$Outbound | undefined;
};

/** @internal */
export const DeletePaymentLinkRequest$outboundSchema: z.ZodType<
  DeletePaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  DeletePaymentLinkRequest
> = z.object({
  paymentLinkId: z.string(),
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => DeletePaymentLinkRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentLinkRequest$ {
  /** @deprecated use `DeletePaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePaymentLinkRequest$inboundSchema;
  /** @deprecated use `DeletePaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePaymentLinkRequest$outboundSchema;
  /** @deprecated use `DeletePaymentLinkRequest$Outbound` instead. */
  export type Outbound = DeletePaymentLinkRequest$Outbound;
}

export function deletePaymentLinkRequestToJSON(
  deletePaymentLinkRequest: DeletePaymentLinkRequest,
): string {
  return JSON.stringify(
    DeletePaymentLinkRequest$outboundSchema.parse(deletePaymentLinkRequest),
  );
}

export function deletePaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePaymentLinkRequest' from JSON`,
  );
}
