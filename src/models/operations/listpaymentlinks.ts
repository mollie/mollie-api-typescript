/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListPaymentLinksRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListPaymentLinksEmbedded = {
  /**
   * An array of payment link objects.
   */
  paymentLinks?: Array<models.PaymentLinkResponse> | undefined;
};

/**
 * A list of payment link objects.
 */
export type ListPaymentLinksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListPaymentLinksEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListPaymentLinksRequest$inboundSchema: z.ZodType<
  ListPaymentLinksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListPaymentLinksRequest$Outbound = {
  from?: string | undefined;
  limit?: number | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListPaymentLinksRequest$outboundSchema: z.ZodType<
  ListPaymentLinksRequest$Outbound,
  z.ZodTypeDef,
  ListPaymentLinksRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentLinksRequest$ {
  /** @deprecated use `ListPaymentLinksRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaymentLinksRequest$inboundSchema;
  /** @deprecated use `ListPaymentLinksRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaymentLinksRequest$outboundSchema;
  /** @deprecated use `ListPaymentLinksRequest$Outbound` instead. */
  export type Outbound = ListPaymentLinksRequest$Outbound;
}

export function listPaymentLinksRequestToJSON(
  listPaymentLinksRequest: ListPaymentLinksRequest,
): string {
  return JSON.stringify(
    ListPaymentLinksRequest$outboundSchema.parse(listPaymentLinksRequest),
  );
}

export function listPaymentLinksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentLinksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentLinksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentLinksRequest' from JSON`,
  );
}

/** @internal */
export const ListPaymentLinksEmbedded$inboundSchema: z.ZodType<
  ListPaymentLinksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_links: z.array(models.PaymentLinkResponse$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_links": "paymentLinks",
  });
});

/** @internal */
export type ListPaymentLinksEmbedded$Outbound = {
  payment_links?: Array<models.PaymentLinkResponse$Outbound> | undefined;
};

/** @internal */
export const ListPaymentLinksEmbedded$outboundSchema: z.ZodType<
  ListPaymentLinksEmbedded$Outbound,
  z.ZodTypeDef,
  ListPaymentLinksEmbedded
> = z.object({
  paymentLinks: z.array(models.PaymentLinkResponse$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentLinks: "payment_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentLinksEmbedded$ {
  /** @deprecated use `ListPaymentLinksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListPaymentLinksEmbedded$inboundSchema;
  /** @deprecated use `ListPaymentLinksEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListPaymentLinksEmbedded$outboundSchema;
  /** @deprecated use `ListPaymentLinksEmbedded$Outbound` instead. */
  export type Outbound = ListPaymentLinksEmbedded$Outbound;
}

export function listPaymentLinksEmbeddedToJSON(
  listPaymentLinksEmbedded: ListPaymentLinksEmbedded,
): string {
  return JSON.stringify(
    ListPaymentLinksEmbedded$outboundSchema.parse(listPaymentLinksEmbedded),
  );
}

export function listPaymentLinksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentLinksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentLinksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentLinksEmbedded' from JSON`,
  );
}

/** @internal */
export const ListPaymentLinksResponse$inboundSchema: z.ZodType<
  ListPaymentLinksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListPaymentLinksEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListPaymentLinksResponse$Outbound = {
  count: number;
  _embedded: ListPaymentLinksEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListPaymentLinksResponse$outboundSchema: z.ZodType<
  ListPaymentLinksResponse$Outbound,
  z.ZodTypeDef,
  ListPaymentLinksResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListPaymentLinksEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentLinksResponse$ {
  /** @deprecated use `ListPaymentLinksResponse$inboundSchema` instead. */
  export const inboundSchema = ListPaymentLinksResponse$inboundSchema;
  /** @deprecated use `ListPaymentLinksResponse$outboundSchema` instead. */
  export const outboundSchema = ListPaymentLinksResponse$outboundSchema;
  /** @deprecated use `ListPaymentLinksResponse$Outbound` instead. */
  export type Outbound = ListPaymentLinksResponse$Outbound;
}

export function listPaymentLinksResponseToJSON(
  listPaymentLinksResponse: ListPaymentLinksResponse,
): string {
  return JSON.stringify(
    ListPaymentLinksResponse$outboundSchema.parse(listPaymentLinksResponse),
  );
}

export function listPaymentLinksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentLinksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentLinksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentLinksResponse' from JSON`,
  );
}
