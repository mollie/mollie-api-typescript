/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateCustomerRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  entityCustomer?: models.EntityCustomer | undefined;
};

/** @internal */
export const UpdateCustomerRequest$inboundSchema: z.ZodType<
  UpdateCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  "idempotency-key": z.string().optional(),
  "entity-customer": models.EntityCustomer$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "entity-customer": "entityCustomer",
  });
});

/** @internal */
export type UpdateCustomerRequest$Outbound = {
  customerId: string;
  "idempotency-key"?: string | undefined;
  "entity-customer"?: models.EntityCustomer$Outbound | undefined;
};

/** @internal */
export const UpdateCustomerRequest$outboundSchema: z.ZodType<
  UpdateCustomerRequest$Outbound,
  z.ZodTypeDef,
  UpdateCustomerRequest
> = z.object({
  customerId: z.string(),
  idempotencyKey: z.string().optional(),
  entityCustomer: models.EntityCustomer$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    entityCustomer: "entity-customer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequest$ {
  /** @deprecated use `UpdateCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerRequest$inboundSchema;
  /** @deprecated use `UpdateCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerRequest$outboundSchema;
  /** @deprecated use `UpdateCustomerRequest$Outbound` instead. */
  export type Outbound = UpdateCustomerRequest$Outbound;
}

export function updateCustomerRequestToJSON(
  updateCustomerRequest: UpdateCustomerRequest,
): string {
  return JSON.stringify(
    UpdateCustomerRequest$outboundSchema.parse(updateCustomerRequest),
  );
}

export function updateCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerRequest' from JSON`,
  );
}
