/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export const UpdateCustomerLocaleRequest = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export type UpdateCustomerLocaleRequest = ClosedEnum<
  typeof UpdateCustomerLocaleRequest
>;

export type UpdateCustomerMetadataRequest = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type UpdateCustomerMetadataRequestUnion =
  | UpdateCustomerMetadataRequest
  | string
  | Array<string>;

export type UpdateCustomerRequestBody = {
  /**
   * The full name of the customer.
   */
  name?: string | null | undefined;
  /**
   * The email address of the customer.
   */
  email?: string | null | undefined;
  /**
   * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
   *
   * @remarks
   * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
   */
  locale?: UpdateCustomerLocaleRequest | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | UpdateCustomerMetadataRequest
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type UpdateCustomerRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  requestBody?: UpdateCustomerRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateCustomerNotFoundDocumentation = {
  href: string;
  type: string;
};

export type UpdateCustomerNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateCustomerNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const UpdateCustomerMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type UpdateCustomerMode = ClosedEnum<typeof UpdateCustomerMode>;

/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export const UpdateCustomerLocaleResponse = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export type UpdateCustomerLocaleResponse = ClosedEnum<
  typeof UpdateCustomerLocaleResponse
>;

export type UpdateCustomerMetadataResponse = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type UpdateCustomerMetadataResponseUnion =
  | UpdateCustomerMetadataResponse
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdateCustomerSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdateCustomerDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
 *
 * @remarks
 * exist (yet).
 */
export type UpdateCustomerPayments = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
 *
 * @remarks
 * exist (yet).
 */
export type UpdateCustomerMandates = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
 *
 * @remarks
 * subscriptions exist (yet).
 */
export type UpdateCustomerSubscriptions = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdateCustomerDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type UpdateCustomerLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: UpdateCustomerSelf;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  dashboard: UpdateCustomerDashboard;
  /**
   * The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
   *
   * @remarks
   * exist (yet).
   */
  payments?: UpdateCustomerPayments | null | undefined;
  /**
   * The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
   *
   * @remarks
   * exist (yet).
   */
  mandates?: UpdateCustomerMandates | null | undefined;
  /**
   * The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
   *
   * @remarks
   * subscriptions exist (yet).
   */
  subscriptions?: UpdateCustomerSubscriptions | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: UpdateCustomerDocumentation;
};

/**
 * The updated customer object.
 */
export type UpdateCustomerResponse = {
  /**
   * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: UpdateCustomerMode;
  /**
   * The full name of the customer.
   */
  name: string | null;
  /**
   * The email address of the customer.
   */
  email: string | null;
  /**
   * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
   *
   * @remarks
   * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
   */
  locale: UpdateCustomerLocaleResponse | null;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata: UpdateCustomerMetadataResponse | string | Array<string> | null;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: UpdateCustomerLinks;
};

/** @internal */
export const UpdateCustomerLocaleRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomerLocaleRequest
> = z.nativeEnum(UpdateCustomerLocaleRequest);

/** @internal */
export const UpdateCustomerLocaleRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomerLocaleRequest
> = UpdateCustomerLocaleRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerLocaleRequest$ {
  /** @deprecated use `UpdateCustomerLocaleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerLocaleRequest$inboundSchema;
  /** @deprecated use `UpdateCustomerLocaleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerLocaleRequest$outboundSchema;
}

/** @internal */
export const UpdateCustomerMetadataRequest$inboundSchema: z.ZodType<
  UpdateCustomerMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateCustomerMetadataRequest$Outbound = {};

/** @internal */
export const UpdateCustomerMetadataRequest$outboundSchema: z.ZodType<
  UpdateCustomerMetadataRequest$Outbound,
  z.ZodTypeDef,
  UpdateCustomerMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerMetadataRequest$ {
  /** @deprecated use `UpdateCustomerMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerMetadataRequest$inboundSchema;
  /** @deprecated use `UpdateCustomerMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerMetadataRequest$outboundSchema;
  /** @deprecated use `UpdateCustomerMetadataRequest$Outbound` instead. */
  export type Outbound = UpdateCustomerMetadataRequest$Outbound;
}

export function updateCustomerMetadataRequestToJSON(
  updateCustomerMetadataRequest: UpdateCustomerMetadataRequest,
): string {
  return JSON.stringify(
    UpdateCustomerMetadataRequest$outboundSchema.parse(
      updateCustomerMetadataRequest,
    ),
  );
}

export function updateCustomerMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerMetadataRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerMetadataRequestUnion$inboundSchema: z.ZodType<
  UpdateCustomerMetadataRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateCustomerMetadataRequest$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type UpdateCustomerMetadataRequestUnion$Outbound =
  | UpdateCustomerMetadataRequest$Outbound
  | string
  | Array<string>;

/** @internal */
export const UpdateCustomerMetadataRequestUnion$outboundSchema: z.ZodType<
  UpdateCustomerMetadataRequestUnion$Outbound,
  z.ZodTypeDef,
  UpdateCustomerMetadataRequestUnion
> = z.union([
  z.lazy(() => UpdateCustomerMetadataRequest$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerMetadataRequestUnion$ {
  /** @deprecated use `UpdateCustomerMetadataRequestUnion$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerMetadataRequestUnion$inboundSchema;
  /** @deprecated use `UpdateCustomerMetadataRequestUnion$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCustomerMetadataRequestUnion$outboundSchema;
  /** @deprecated use `UpdateCustomerMetadataRequestUnion$Outbound` instead. */
  export type Outbound = UpdateCustomerMetadataRequestUnion$Outbound;
}

export function updateCustomerMetadataRequestUnionToJSON(
  updateCustomerMetadataRequestUnion: UpdateCustomerMetadataRequestUnion,
): string {
  return JSON.stringify(
    UpdateCustomerMetadataRequestUnion$outboundSchema.parse(
      updateCustomerMetadataRequestUnion,
    ),
  );
}

export function updateCustomerMetadataRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerMetadataRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCustomerMetadataRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerMetadataRequestUnion' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerRequestBody$inboundSchema: z.ZodType<
  UpdateCustomerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(UpdateCustomerLocaleRequest$inboundSchema).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => UpdateCustomerMetadataRequest$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateCustomerRequestBody$Outbound = {
  name?: string | null | undefined;
  email?: string | null | undefined;
  locale?: string | null | undefined;
  metadata?:
    | UpdateCustomerMetadataRequest$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const UpdateCustomerRequestBody$outboundSchema: z.ZodType<
  UpdateCustomerRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateCustomerRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(UpdateCustomerLocaleRequest$outboundSchema).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => UpdateCustomerMetadataRequest$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequestBody$ {
  /** @deprecated use `UpdateCustomerRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerRequestBody$inboundSchema;
  /** @deprecated use `UpdateCustomerRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerRequestBody$outboundSchema;
  /** @deprecated use `UpdateCustomerRequestBody$Outbound` instead. */
  export type Outbound = UpdateCustomerRequestBody$Outbound;
}

export function updateCustomerRequestBodyToJSON(
  updateCustomerRequestBody: UpdateCustomerRequestBody,
): string {
  return JSON.stringify(
    UpdateCustomerRequestBody$outboundSchema.parse(updateCustomerRequestBody),
  );
}

export function updateCustomerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerRequest$inboundSchema: z.ZodType<
  UpdateCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  RequestBody: z.lazy(() => UpdateCustomerRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateCustomerRequest$Outbound = {
  customerId: string;
  RequestBody?: UpdateCustomerRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateCustomerRequest$outboundSchema: z.ZodType<
  UpdateCustomerRequest$Outbound,
  z.ZodTypeDef,
  UpdateCustomerRequest
> = z.object({
  customerId: z.string(),
  requestBody: z.lazy(() => UpdateCustomerRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequest$ {
  /** @deprecated use `UpdateCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerRequest$inboundSchema;
  /** @deprecated use `UpdateCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerRequest$outboundSchema;
  /** @deprecated use `UpdateCustomerRequest$Outbound` instead. */
  export type Outbound = UpdateCustomerRequest$Outbound;
}

export function updateCustomerRequestToJSON(
  updateCustomerRequest: UpdateCustomerRequest,
): string {
  return JSON.stringify(
    UpdateCustomerRequest$outboundSchema.parse(updateCustomerRequest),
  );
}

export function updateCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerNotFoundDocumentation$inboundSchema: z.ZodType<
  UpdateCustomerNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateCustomerNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateCustomerNotFoundDocumentation$outboundSchema: z.ZodType<
  UpdateCustomerNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateCustomerNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerNotFoundDocumentation$ {
  /** @deprecated use `UpdateCustomerNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCustomerNotFoundDocumentation$inboundSchema;
  /** @deprecated use `UpdateCustomerNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCustomerNotFoundDocumentation$outboundSchema;
  /** @deprecated use `UpdateCustomerNotFoundDocumentation$Outbound` instead. */
  export type Outbound = UpdateCustomerNotFoundDocumentation$Outbound;
}

export function updateCustomerNotFoundDocumentationToJSON(
  updateCustomerNotFoundDocumentation: UpdateCustomerNotFoundDocumentation,
): string {
  return JSON.stringify(
    UpdateCustomerNotFoundDocumentation$outboundSchema.parse(
      updateCustomerNotFoundDocumentation,
    ),
  );
}

export function updateCustomerNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCustomerNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerNotFoundLinks$inboundSchema: z.ZodType<
  UpdateCustomerNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    UpdateCustomerNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type UpdateCustomerNotFoundLinks$Outbound = {
  documentation: UpdateCustomerNotFoundDocumentation$Outbound;
};

/** @internal */
export const UpdateCustomerNotFoundLinks$outboundSchema: z.ZodType<
  UpdateCustomerNotFoundLinks$Outbound,
  z.ZodTypeDef,
  UpdateCustomerNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    UpdateCustomerNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerNotFoundLinks$ {
  /** @deprecated use `UpdateCustomerNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerNotFoundLinks$inboundSchema;
  /** @deprecated use `UpdateCustomerNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerNotFoundLinks$outboundSchema;
  /** @deprecated use `UpdateCustomerNotFoundLinks$Outbound` instead. */
  export type Outbound = UpdateCustomerNotFoundLinks$Outbound;
}

export function updateCustomerNotFoundLinksToJSON(
  updateCustomerNotFoundLinks: UpdateCustomerNotFoundLinks,
): string {
  return JSON.stringify(
    UpdateCustomerNotFoundLinks$outboundSchema.parse(
      updateCustomerNotFoundLinks,
    ),
  );
}

export function updateCustomerNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerMode$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomerMode
> = z.nativeEnum(UpdateCustomerMode);

/** @internal */
export const UpdateCustomerMode$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomerMode
> = UpdateCustomerMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerMode$ {
  /** @deprecated use `UpdateCustomerMode$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerMode$inboundSchema;
  /** @deprecated use `UpdateCustomerMode$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerMode$outboundSchema;
}

/** @internal */
export const UpdateCustomerLocaleResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomerLocaleResponse
> = z.nativeEnum(UpdateCustomerLocaleResponse);

/** @internal */
export const UpdateCustomerLocaleResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomerLocaleResponse
> = UpdateCustomerLocaleResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerLocaleResponse$ {
  /** @deprecated use `UpdateCustomerLocaleResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerLocaleResponse$inboundSchema;
  /** @deprecated use `UpdateCustomerLocaleResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerLocaleResponse$outboundSchema;
}

/** @internal */
export const UpdateCustomerMetadataResponse$inboundSchema: z.ZodType<
  UpdateCustomerMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateCustomerMetadataResponse$Outbound = {};

/** @internal */
export const UpdateCustomerMetadataResponse$outboundSchema: z.ZodType<
  UpdateCustomerMetadataResponse$Outbound,
  z.ZodTypeDef,
  UpdateCustomerMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerMetadataResponse$ {
  /** @deprecated use `UpdateCustomerMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerMetadataResponse$inboundSchema;
  /** @deprecated use `UpdateCustomerMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerMetadataResponse$outboundSchema;
  /** @deprecated use `UpdateCustomerMetadataResponse$Outbound` instead. */
  export type Outbound = UpdateCustomerMetadataResponse$Outbound;
}

export function updateCustomerMetadataResponseToJSON(
  updateCustomerMetadataResponse: UpdateCustomerMetadataResponse,
): string {
  return JSON.stringify(
    UpdateCustomerMetadataResponse$outboundSchema.parse(
      updateCustomerMetadataResponse,
    ),
  );
}

export function updateCustomerMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerMetadataResponse' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerMetadataResponseUnion$inboundSchema: z.ZodType<
  UpdateCustomerMetadataResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateCustomerMetadataResponse$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type UpdateCustomerMetadataResponseUnion$Outbound =
  | UpdateCustomerMetadataResponse$Outbound
  | string
  | Array<string>;

/** @internal */
export const UpdateCustomerMetadataResponseUnion$outboundSchema: z.ZodType<
  UpdateCustomerMetadataResponseUnion$Outbound,
  z.ZodTypeDef,
  UpdateCustomerMetadataResponseUnion
> = z.union([
  z.lazy(() => UpdateCustomerMetadataResponse$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerMetadataResponseUnion$ {
  /** @deprecated use `UpdateCustomerMetadataResponseUnion$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCustomerMetadataResponseUnion$inboundSchema;
  /** @deprecated use `UpdateCustomerMetadataResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCustomerMetadataResponseUnion$outboundSchema;
  /** @deprecated use `UpdateCustomerMetadataResponseUnion$Outbound` instead. */
  export type Outbound = UpdateCustomerMetadataResponseUnion$Outbound;
}

export function updateCustomerMetadataResponseUnionToJSON(
  updateCustomerMetadataResponseUnion: UpdateCustomerMetadataResponseUnion,
): string {
  return JSON.stringify(
    UpdateCustomerMetadataResponseUnion$outboundSchema.parse(
      updateCustomerMetadataResponseUnion,
    ),
  );
}

export function updateCustomerMetadataResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerMetadataResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCustomerMetadataResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerMetadataResponseUnion' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerSelf$inboundSchema: z.ZodType<
  UpdateCustomerSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateCustomerSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateCustomerSelf$outboundSchema: z.ZodType<
  UpdateCustomerSelf$Outbound,
  z.ZodTypeDef,
  UpdateCustomerSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerSelf$ {
  /** @deprecated use `UpdateCustomerSelf$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerSelf$inboundSchema;
  /** @deprecated use `UpdateCustomerSelf$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerSelf$outboundSchema;
  /** @deprecated use `UpdateCustomerSelf$Outbound` instead. */
  export type Outbound = UpdateCustomerSelf$Outbound;
}

export function updateCustomerSelfToJSON(
  updateCustomerSelf: UpdateCustomerSelf,
): string {
  return JSON.stringify(
    UpdateCustomerSelf$outboundSchema.parse(updateCustomerSelf),
  );
}

export function updateCustomerSelfFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerSelf' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerDashboard$inboundSchema: z.ZodType<
  UpdateCustomerDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateCustomerDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateCustomerDashboard$outboundSchema: z.ZodType<
  UpdateCustomerDashboard$Outbound,
  z.ZodTypeDef,
  UpdateCustomerDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerDashboard$ {
  /** @deprecated use `UpdateCustomerDashboard$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerDashboard$inboundSchema;
  /** @deprecated use `UpdateCustomerDashboard$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerDashboard$outboundSchema;
  /** @deprecated use `UpdateCustomerDashboard$Outbound` instead. */
  export type Outbound = UpdateCustomerDashboard$Outbound;
}

export function updateCustomerDashboardToJSON(
  updateCustomerDashboard: UpdateCustomerDashboard,
): string {
  return JSON.stringify(
    UpdateCustomerDashboard$outboundSchema.parse(updateCustomerDashboard),
  );
}

export function updateCustomerDashboardFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerDashboard' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerPayments$inboundSchema: z.ZodType<
  UpdateCustomerPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type UpdateCustomerPayments$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const UpdateCustomerPayments$outboundSchema: z.ZodType<
  UpdateCustomerPayments$Outbound,
  z.ZodTypeDef,
  UpdateCustomerPayments
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerPayments$ {
  /** @deprecated use `UpdateCustomerPayments$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerPayments$inboundSchema;
  /** @deprecated use `UpdateCustomerPayments$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerPayments$outboundSchema;
  /** @deprecated use `UpdateCustomerPayments$Outbound` instead. */
  export type Outbound = UpdateCustomerPayments$Outbound;
}

export function updateCustomerPaymentsToJSON(
  updateCustomerPayments: UpdateCustomerPayments,
): string {
  return JSON.stringify(
    UpdateCustomerPayments$outboundSchema.parse(updateCustomerPayments),
  );
}

export function updateCustomerPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerPayments' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerMandates$inboundSchema: z.ZodType<
  UpdateCustomerMandates,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type UpdateCustomerMandates$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const UpdateCustomerMandates$outboundSchema: z.ZodType<
  UpdateCustomerMandates$Outbound,
  z.ZodTypeDef,
  UpdateCustomerMandates
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerMandates$ {
  /** @deprecated use `UpdateCustomerMandates$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerMandates$inboundSchema;
  /** @deprecated use `UpdateCustomerMandates$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerMandates$outboundSchema;
  /** @deprecated use `UpdateCustomerMandates$Outbound` instead. */
  export type Outbound = UpdateCustomerMandates$Outbound;
}

export function updateCustomerMandatesToJSON(
  updateCustomerMandates: UpdateCustomerMandates,
): string {
  return JSON.stringify(
    UpdateCustomerMandates$outboundSchema.parse(updateCustomerMandates),
  );
}

export function updateCustomerMandatesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerMandates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerMandates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerMandates' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerSubscriptions$inboundSchema: z.ZodType<
  UpdateCustomerSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type UpdateCustomerSubscriptions$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const UpdateCustomerSubscriptions$outboundSchema: z.ZodType<
  UpdateCustomerSubscriptions$Outbound,
  z.ZodTypeDef,
  UpdateCustomerSubscriptions
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerSubscriptions$ {
  /** @deprecated use `UpdateCustomerSubscriptions$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerSubscriptions$inboundSchema;
  /** @deprecated use `UpdateCustomerSubscriptions$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerSubscriptions$outboundSchema;
  /** @deprecated use `UpdateCustomerSubscriptions$Outbound` instead. */
  export type Outbound = UpdateCustomerSubscriptions$Outbound;
}

export function updateCustomerSubscriptionsToJSON(
  updateCustomerSubscriptions: UpdateCustomerSubscriptions,
): string {
  return JSON.stringify(
    UpdateCustomerSubscriptions$outboundSchema.parse(
      updateCustomerSubscriptions,
    ),
  );
}

export function updateCustomerSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerSubscriptions' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerDocumentation$inboundSchema: z.ZodType<
  UpdateCustomerDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateCustomerDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateCustomerDocumentation$outboundSchema: z.ZodType<
  UpdateCustomerDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateCustomerDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerDocumentation$ {
  /** @deprecated use `UpdateCustomerDocumentation$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerDocumentation$inboundSchema;
  /** @deprecated use `UpdateCustomerDocumentation$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerDocumentation$outboundSchema;
  /** @deprecated use `UpdateCustomerDocumentation$Outbound` instead. */
  export type Outbound = UpdateCustomerDocumentation$Outbound;
}

export function updateCustomerDocumentationToJSON(
  updateCustomerDocumentation: UpdateCustomerDocumentation,
): string {
  return JSON.stringify(
    UpdateCustomerDocumentation$outboundSchema.parse(
      updateCustomerDocumentation,
    ),
  );
}

export function updateCustomerDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerLinks$inboundSchema: z.ZodType<
  UpdateCustomerLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => UpdateCustomerSelf$inboundSchema),
  dashboard: z.lazy(() => UpdateCustomerDashboard$inboundSchema),
  payments: z.nullable(z.lazy(() => UpdateCustomerPayments$inboundSchema))
    .optional(),
  mandates: z.nullable(z.lazy(() => UpdateCustomerMandates$inboundSchema))
    .optional(),
  subscriptions: z.nullable(
    z.lazy(() => UpdateCustomerSubscriptions$inboundSchema),
  ).optional(),
  documentation: z.lazy(() => UpdateCustomerDocumentation$inboundSchema),
});

/** @internal */
export type UpdateCustomerLinks$Outbound = {
  self: UpdateCustomerSelf$Outbound;
  dashboard: UpdateCustomerDashboard$Outbound;
  payments?: UpdateCustomerPayments$Outbound | null | undefined;
  mandates?: UpdateCustomerMandates$Outbound | null | undefined;
  subscriptions?: UpdateCustomerSubscriptions$Outbound | null | undefined;
  documentation: UpdateCustomerDocumentation$Outbound;
};

/** @internal */
export const UpdateCustomerLinks$outboundSchema: z.ZodType<
  UpdateCustomerLinks$Outbound,
  z.ZodTypeDef,
  UpdateCustomerLinks
> = z.object({
  self: z.lazy(() => UpdateCustomerSelf$outboundSchema),
  dashboard: z.lazy(() => UpdateCustomerDashboard$outboundSchema),
  payments: z.nullable(z.lazy(() => UpdateCustomerPayments$outboundSchema))
    .optional(),
  mandates: z.nullable(z.lazy(() => UpdateCustomerMandates$outboundSchema))
    .optional(),
  subscriptions: z.nullable(
    z.lazy(() => UpdateCustomerSubscriptions$outboundSchema),
  ).optional(),
  documentation: z.lazy(() => UpdateCustomerDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerLinks$ {
  /** @deprecated use `UpdateCustomerLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerLinks$inboundSchema;
  /** @deprecated use `UpdateCustomerLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerLinks$outboundSchema;
  /** @deprecated use `UpdateCustomerLinks$Outbound` instead. */
  export type Outbound = UpdateCustomerLinks$Outbound;
}

export function updateCustomerLinksToJSON(
  updateCustomerLinks: UpdateCustomerLinks,
): string {
  return JSON.stringify(
    UpdateCustomerLinks$outboundSchema.parse(updateCustomerLinks),
  );
}

export function updateCustomerLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerLinks' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerResponse$inboundSchema: z.ZodType<
  UpdateCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("customer"),
  id: z.string(),
  mode: UpdateCustomerMode$inboundSchema,
  name: z.nullable(z.string()),
  email: z.nullable(z.string()),
  locale: z.nullable(UpdateCustomerLocaleResponse$inboundSchema),
  metadata: z.nullable(
    z.union([
      z.lazy(() => UpdateCustomerMetadataResponse$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ),
  createdAt: z.string(),
  _links: z.lazy(() => UpdateCustomerLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type UpdateCustomerResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  name: string | null;
  email: string | null;
  locale: string | null;
  metadata:
    | UpdateCustomerMetadataResponse$Outbound
    | string
    | Array<string>
    | null;
  createdAt: string;
  _links: UpdateCustomerLinks$Outbound;
};

/** @internal */
export const UpdateCustomerResponse$outboundSchema: z.ZodType<
  UpdateCustomerResponse$Outbound,
  z.ZodTypeDef,
  UpdateCustomerResponse
> = z.object({
  resource: z.string().default("customer"),
  id: z.string(),
  mode: UpdateCustomerMode$outboundSchema,
  name: z.nullable(z.string()),
  email: z.nullable(z.string()),
  locale: z.nullable(UpdateCustomerLocaleResponse$outboundSchema),
  metadata: z.nullable(
    z.union([
      z.lazy(() => UpdateCustomerMetadataResponse$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ),
  createdAt: z.string(),
  links: z.lazy(() => UpdateCustomerLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerResponse$ {
  /** @deprecated use `UpdateCustomerResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerResponse$inboundSchema;
  /** @deprecated use `UpdateCustomerResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerResponse$outboundSchema;
  /** @deprecated use `UpdateCustomerResponse$Outbound` instead. */
  export type Outbound = UpdateCustomerResponse$Outbound;
}

export function updateCustomerResponseToJSON(
  updateCustomerResponse: UpdateCustomerResponse,
): string {
  return JSON.stringify(
    UpdateCustomerResponse$outboundSchema.parse(updateCustomerResponse),
  );
}

export function updateCustomerResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerResponse' from JSON`,
  );
}
