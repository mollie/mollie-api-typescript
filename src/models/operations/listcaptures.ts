/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListCapturesRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListCapturesEmbedded = {
  /**
   * An array of capture objects.
   */
  captures: Array<models.CaptureResponse>;
};

/**
 * A list of capture objects.
 */
export type ListCapturesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListCapturesEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListCapturesRequest$inboundSchema: z.ZodType<
  ListCapturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListCapturesRequest$Outbound = {
  paymentId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListCapturesRequest$outboundSchema: z.ZodType<
  ListCapturesRequest$Outbound,
  z.ZodTypeDef,
  ListCapturesRequest
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesRequest$ {
  /** @deprecated use `ListCapturesRequest$inboundSchema` instead. */
  export const inboundSchema = ListCapturesRequest$inboundSchema;
  /** @deprecated use `ListCapturesRequest$outboundSchema` instead. */
  export const outboundSchema = ListCapturesRequest$outboundSchema;
  /** @deprecated use `ListCapturesRequest$Outbound` instead. */
  export type Outbound = ListCapturesRequest$Outbound;
}

export function listCapturesRequestToJSON(
  listCapturesRequest: ListCapturesRequest,
): string {
  return JSON.stringify(
    ListCapturesRequest$outboundSchema.parse(listCapturesRequest),
  );
}

export function listCapturesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesRequest' from JSON`,
  );
}

/** @internal */
export const ListCapturesEmbedded$inboundSchema: z.ZodType<
  ListCapturesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  captures: z.array(models.CaptureResponse$inboundSchema),
});

/** @internal */
export type ListCapturesEmbedded$Outbound = {
  captures: Array<models.CaptureResponse$Outbound>;
};

/** @internal */
export const ListCapturesEmbedded$outboundSchema: z.ZodType<
  ListCapturesEmbedded$Outbound,
  z.ZodTypeDef,
  ListCapturesEmbedded
> = z.object({
  captures: z.array(models.CaptureResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesEmbedded$ {
  /** @deprecated use `ListCapturesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListCapturesEmbedded$inboundSchema;
  /** @deprecated use `ListCapturesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListCapturesEmbedded$outboundSchema;
  /** @deprecated use `ListCapturesEmbedded$Outbound` instead. */
  export type Outbound = ListCapturesEmbedded$Outbound;
}

export function listCapturesEmbeddedToJSON(
  listCapturesEmbedded: ListCapturesEmbedded,
): string {
  return JSON.stringify(
    ListCapturesEmbedded$outboundSchema.parse(listCapturesEmbedded),
  );
}

export function listCapturesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListCapturesResponse$inboundSchema: z.ZodType<
  ListCapturesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListCapturesEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListCapturesResponse$Outbound = {
  count: number;
  _embedded: ListCapturesEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListCapturesResponse$outboundSchema: z.ZodType<
  ListCapturesResponse$Outbound,
  z.ZodTypeDef,
  ListCapturesResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListCapturesEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesResponse$ {
  /** @deprecated use `ListCapturesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCapturesResponse$inboundSchema;
  /** @deprecated use `ListCapturesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCapturesResponse$outboundSchema;
  /** @deprecated use `ListCapturesResponse$Outbound` instead. */
  export type Outbound = ListCapturesResponse$Outbound;
}

export function listCapturesResponseToJSON(
  listCapturesResponse: ListCapturesResponse,
): string {
  return JSON.stringify(
    ListCapturesResponse$outboundSchema.parse(listCapturesResponse),
  );
}

export function listCapturesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesResponse' from JSON`,
  );
}
