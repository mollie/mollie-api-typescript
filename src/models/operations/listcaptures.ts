/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional resources via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export const ListCapturesEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional resources via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export type ListCapturesEmbed = ClosedEnum<typeof ListCapturesEmbed>;

export type ListCapturesRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to embed additional resources via the
   *
   * @remarks
   * `embed` query string parameter.
   */
  embed?: ListCapturesEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListCapturesNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListCapturesNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListCapturesNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListCapturesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListCapturesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListCapturesBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const ListCapturesMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type ListCapturesMode = ClosedEnum<typeof ListCapturesMode>;

/**
 * The amount captured. If no amount is provided, the full authorized amount is captured.
 */
export type ListCapturesAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the
 *
 * @remarks
 * currency your account is settled in.
 *
 * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
 * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
 * instead.
 */
export type ListCapturesSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The capture's status.
 */
export const ListCapturesStatus = {
  Pending: "pending",
  Succeeded: "succeeded",
  Failed: "failed",
} as const;
/**
 * The capture's status.
 */
export type ListCapturesStatus = ClosedEnum<typeof ListCapturesStatus>;

export type ListCapturesMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListCapturesMetadataUnion =
  | ListCapturesMetadata
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListCapturesCaptureSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this capture belongs to.
 */
export type ListCapturesPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
 *
 * @remarks
 * not yet settled.
 */
export type ListCapturesSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
 *
 * @remarks
 * it isn't associated with a shipment.
 */
export type ListCapturesShipment = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListCapturesCaptureDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListCapturesCaptureLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListCapturesCaptureSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this capture belongs to.
   */
  payment: ListCapturesPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
   *
   * @remarks
   * not yet settled.
   */
  settlement?: ListCapturesSettlement | null | undefined;
  /**
   * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
   *
   * @remarks
   * it isn't associated with a shipment.
   */
  shipment?: ListCapturesShipment | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListCapturesCaptureDocumentation;
};

export type ListCapturesCapture = {
  /**
   * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: ListCapturesMode;
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * The amount captured. If no amount is provided, the full authorized amount is captured.
   */
  amount: ListCapturesAmount | null;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the
   *
   * @remarks
   * currency your account is settled in.
   *
   * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
   * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
   * instead.
   */
  settlementAmount?: ListCapturesSettlementAmount | null | undefined;
  /**
   * The capture's status.
   */
  status: ListCapturesStatus;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: ListCapturesMetadata | string | Array<string> | null | undefined;
  /**
   * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
   *
   * @remarks
   * `shp_gNapNy9qQTUFZYnCrCF7J`.
   */
  shipmentId?: string | null | undefined;
  /**
   * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
   *
   * @remarks
   * is omitted if the capture is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListCapturesCaptureLinks;
};

export type ListCapturesEmbedded = {
  /**
   * An array of capture objects.
   */
  captures?: Array<ListCapturesCapture> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListCapturesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListCapturesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListCapturesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListCapturesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListCapturesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListCapturesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListCapturesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListCapturesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListCapturesDocumentation | undefined;
};

/**
 * A list of capture objects.
 */
export type ListCapturesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListCapturesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListCapturesLinks | undefined;
};

/** @internal */
export const ListCapturesEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListCapturesEmbed
> = z.nativeEnum(ListCapturesEmbed);

/** @internal */
export const ListCapturesEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListCapturesEmbed
> = ListCapturesEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesEmbed$ {
  /** @deprecated use `ListCapturesEmbed$inboundSchema` instead. */
  export const inboundSchema = ListCapturesEmbed$inboundSchema;
  /** @deprecated use `ListCapturesEmbed$outboundSchema` instead. */
  export const outboundSchema = ListCapturesEmbed$outboundSchema;
}

/** @internal */
export const ListCapturesRequest$inboundSchema: z.ZodType<
  ListCapturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListCapturesEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListCapturesRequest$Outbound = {
  paymentId: string;
  from?: string | undefined;
  limit: number | null;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListCapturesRequest$outboundSchema: z.ZodType<
  ListCapturesRequest$Outbound,
  z.ZodTypeDef,
  ListCapturesRequest
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListCapturesEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesRequest$ {
  /** @deprecated use `ListCapturesRequest$inboundSchema` instead. */
  export const inboundSchema = ListCapturesRequest$inboundSchema;
  /** @deprecated use `ListCapturesRequest$outboundSchema` instead. */
  export const outboundSchema = ListCapturesRequest$outboundSchema;
  /** @deprecated use `ListCapturesRequest$Outbound` instead. */
  export type Outbound = ListCapturesRequest$Outbound;
}

export function listCapturesRequestToJSON(
  listCapturesRequest: ListCapturesRequest,
): string {
  return JSON.stringify(
    ListCapturesRequest$outboundSchema.parse(listCapturesRequest),
  );
}

export function listCapturesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesRequest' from JSON`,
  );
}

/** @internal */
export const ListCapturesNotFoundDocumentation$inboundSchema: z.ZodType<
  ListCapturesNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListCapturesNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListCapturesNotFoundDocumentation$outboundSchema: z.ZodType<
  ListCapturesNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListCapturesNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesNotFoundDocumentation$ {
  /** @deprecated use `ListCapturesNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListCapturesNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListCapturesNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListCapturesNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListCapturesNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListCapturesNotFoundDocumentation$Outbound;
}

export function listCapturesNotFoundDocumentationToJSON(
  listCapturesNotFoundDocumentation: ListCapturesNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListCapturesNotFoundDocumentation$outboundSchema.parse(
      listCapturesNotFoundDocumentation,
    ),
  );
}

export function listCapturesNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListCapturesNotFoundLinks$inboundSchema: z.ZodType<
  ListCapturesNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListCapturesNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type ListCapturesNotFoundLinks$Outbound = {
  documentation: ListCapturesNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListCapturesNotFoundLinks$outboundSchema: z.ZodType<
  ListCapturesNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListCapturesNotFoundLinks
> = z.object({
  documentation: z.lazy(() => ListCapturesNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesNotFoundLinks$ {
  /** @deprecated use `ListCapturesNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListCapturesNotFoundLinks$inboundSchema;
  /** @deprecated use `ListCapturesNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListCapturesNotFoundLinks$outboundSchema;
  /** @deprecated use `ListCapturesNotFoundLinks$Outbound` instead. */
  export type Outbound = ListCapturesNotFoundLinks$Outbound;
}

export function listCapturesNotFoundLinksToJSON(
  listCapturesNotFoundLinks: ListCapturesNotFoundLinks,
): string {
  return JSON.stringify(
    ListCapturesNotFoundLinks$outboundSchema.parse(listCapturesNotFoundLinks),
  );
}

export function listCapturesNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListCapturesBadRequestDocumentation$inboundSchema: z.ZodType<
  ListCapturesBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListCapturesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListCapturesBadRequestDocumentation$outboundSchema: z.ZodType<
  ListCapturesBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListCapturesBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesBadRequestDocumentation$ {
  /** @deprecated use `ListCapturesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListCapturesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListCapturesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListCapturesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListCapturesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListCapturesBadRequestDocumentation$Outbound;
}

export function listCapturesBadRequestDocumentationToJSON(
  listCapturesBadRequestDocumentation: ListCapturesBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListCapturesBadRequestDocumentation$outboundSchema.parse(
      listCapturesBadRequestDocumentation,
    ),
  );
}

export function listCapturesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListCapturesBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListCapturesBadRequestLinks$inboundSchema: z.ZodType<
  ListCapturesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListCapturesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListCapturesBadRequestLinks$Outbound = {
  documentation: ListCapturesBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListCapturesBadRequestLinks$outboundSchema: z.ZodType<
  ListCapturesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListCapturesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListCapturesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesBadRequestLinks$ {
  /** @deprecated use `ListCapturesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListCapturesBadRequestLinks$inboundSchema;
  /** @deprecated use `ListCapturesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListCapturesBadRequestLinks$outboundSchema;
  /** @deprecated use `ListCapturesBadRequestLinks$Outbound` instead. */
  export type Outbound = ListCapturesBadRequestLinks$Outbound;
}

export function listCapturesBadRequestLinksToJSON(
  listCapturesBadRequestLinks: ListCapturesBadRequestLinks,
): string {
  return JSON.stringify(
    ListCapturesBadRequestLinks$outboundSchema.parse(
      listCapturesBadRequestLinks,
    ),
  );
}

export function listCapturesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListCapturesMode$inboundSchema: z.ZodNativeEnum<
  typeof ListCapturesMode
> = z.nativeEnum(ListCapturesMode);

/** @internal */
export const ListCapturesMode$outboundSchema: z.ZodNativeEnum<
  typeof ListCapturesMode
> = ListCapturesMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesMode$ {
  /** @deprecated use `ListCapturesMode$inboundSchema` instead. */
  export const inboundSchema = ListCapturesMode$inboundSchema;
  /** @deprecated use `ListCapturesMode$outboundSchema` instead. */
  export const outboundSchema = ListCapturesMode$outboundSchema;
}

/** @internal */
export const ListCapturesAmount$inboundSchema: z.ZodType<
  ListCapturesAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListCapturesAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListCapturesAmount$outboundSchema: z.ZodType<
  ListCapturesAmount$Outbound,
  z.ZodTypeDef,
  ListCapturesAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesAmount$ {
  /** @deprecated use `ListCapturesAmount$inboundSchema` instead. */
  export const inboundSchema = ListCapturesAmount$inboundSchema;
  /** @deprecated use `ListCapturesAmount$outboundSchema` instead. */
  export const outboundSchema = ListCapturesAmount$outboundSchema;
  /** @deprecated use `ListCapturesAmount$Outbound` instead. */
  export type Outbound = ListCapturesAmount$Outbound;
}

export function listCapturesAmountToJSON(
  listCapturesAmount: ListCapturesAmount,
): string {
  return JSON.stringify(
    ListCapturesAmount$outboundSchema.parse(listCapturesAmount),
  );
}

export function listCapturesAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesAmount' from JSON`,
  );
}

/** @internal */
export const ListCapturesSettlementAmount$inboundSchema: z.ZodType<
  ListCapturesSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListCapturesSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListCapturesSettlementAmount$outboundSchema: z.ZodType<
  ListCapturesSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListCapturesSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesSettlementAmount$ {
  /** @deprecated use `ListCapturesSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = ListCapturesSettlementAmount$inboundSchema;
  /** @deprecated use `ListCapturesSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = ListCapturesSettlementAmount$outboundSchema;
  /** @deprecated use `ListCapturesSettlementAmount$Outbound` instead. */
  export type Outbound = ListCapturesSettlementAmount$Outbound;
}

export function listCapturesSettlementAmountToJSON(
  listCapturesSettlementAmount: ListCapturesSettlementAmount,
): string {
  return JSON.stringify(
    ListCapturesSettlementAmount$outboundSchema.parse(
      listCapturesSettlementAmount,
    ),
  );
}

export function listCapturesSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListCapturesStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListCapturesStatus
> = z.nativeEnum(ListCapturesStatus);

/** @internal */
export const ListCapturesStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListCapturesStatus
> = ListCapturesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesStatus$ {
  /** @deprecated use `ListCapturesStatus$inboundSchema` instead. */
  export const inboundSchema = ListCapturesStatus$inboundSchema;
  /** @deprecated use `ListCapturesStatus$outboundSchema` instead. */
  export const outboundSchema = ListCapturesStatus$outboundSchema;
}

/** @internal */
export const ListCapturesMetadata$inboundSchema: z.ZodType<
  ListCapturesMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListCapturesMetadata$Outbound = {};

/** @internal */
export const ListCapturesMetadata$outboundSchema: z.ZodType<
  ListCapturesMetadata$Outbound,
  z.ZodTypeDef,
  ListCapturesMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesMetadata$ {
  /** @deprecated use `ListCapturesMetadata$inboundSchema` instead. */
  export const inboundSchema = ListCapturesMetadata$inboundSchema;
  /** @deprecated use `ListCapturesMetadata$outboundSchema` instead. */
  export const outboundSchema = ListCapturesMetadata$outboundSchema;
  /** @deprecated use `ListCapturesMetadata$Outbound` instead. */
  export type Outbound = ListCapturesMetadata$Outbound;
}

export function listCapturesMetadataToJSON(
  listCapturesMetadata: ListCapturesMetadata,
): string {
  return JSON.stringify(
    ListCapturesMetadata$outboundSchema.parse(listCapturesMetadata),
  );
}

export function listCapturesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesMetadata' from JSON`,
  );
}

/** @internal */
export const ListCapturesMetadataUnion$inboundSchema: z.ZodType<
  ListCapturesMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListCapturesMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type ListCapturesMetadataUnion$Outbound =
  | ListCapturesMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const ListCapturesMetadataUnion$outboundSchema: z.ZodType<
  ListCapturesMetadataUnion$Outbound,
  z.ZodTypeDef,
  ListCapturesMetadataUnion
> = z.union([
  z.lazy(() => ListCapturesMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesMetadataUnion$ {
  /** @deprecated use `ListCapturesMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = ListCapturesMetadataUnion$inboundSchema;
  /** @deprecated use `ListCapturesMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = ListCapturesMetadataUnion$outboundSchema;
  /** @deprecated use `ListCapturesMetadataUnion$Outbound` instead. */
  export type Outbound = ListCapturesMetadataUnion$Outbound;
}

export function listCapturesMetadataUnionToJSON(
  listCapturesMetadataUnion: ListCapturesMetadataUnion,
): string {
  return JSON.stringify(
    ListCapturesMetadataUnion$outboundSchema.parse(listCapturesMetadataUnion),
  );
}

export function listCapturesMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesMetadataUnion' from JSON`,
  );
}

/** @internal */
export const ListCapturesCaptureSelf$inboundSchema: z.ZodType<
  ListCapturesCaptureSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListCapturesCaptureSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListCapturesCaptureSelf$outboundSchema: z.ZodType<
  ListCapturesCaptureSelf$Outbound,
  z.ZodTypeDef,
  ListCapturesCaptureSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesCaptureSelf$ {
  /** @deprecated use `ListCapturesCaptureSelf$inboundSchema` instead. */
  export const inboundSchema = ListCapturesCaptureSelf$inboundSchema;
  /** @deprecated use `ListCapturesCaptureSelf$outboundSchema` instead. */
  export const outboundSchema = ListCapturesCaptureSelf$outboundSchema;
  /** @deprecated use `ListCapturesCaptureSelf$Outbound` instead. */
  export type Outbound = ListCapturesCaptureSelf$Outbound;
}

export function listCapturesCaptureSelfToJSON(
  listCapturesCaptureSelf: ListCapturesCaptureSelf,
): string {
  return JSON.stringify(
    ListCapturesCaptureSelf$outboundSchema.parse(listCapturesCaptureSelf),
  );
}

export function listCapturesCaptureSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesCaptureSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesCaptureSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesCaptureSelf' from JSON`,
  );
}

/** @internal */
export const ListCapturesPayment$inboundSchema: z.ZodType<
  ListCapturesPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListCapturesPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListCapturesPayment$outboundSchema: z.ZodType<
  ListCapturesPayment$Outbound,
  z.ZodTypeDef,
  ListCapturesPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesPayment$ {
  /** @deprecated use `ListCapturesPayment$inboundSchema` instead. */
  export const inboundSchema = ListCapturesPayment$inboundSchema;
  /** @deprecated use `ListCapturesPayment$outboundSchema` instead. */
  export const outboundSchema = ListCapturesPayment$outboundSchema;
  /** @deprecated use `ListCapturesPayment$Outbound` instead. */
  export type Outbound = ListCapturesPayment$Outbound;
}

export function listCapturesPaymentToJSON(
  listCapturesPayment: ListCapturesPayment,
): string {
  return JSON.stringify(
    ListCapturesPayment$outboundSchema.parse(listCapturesPayment),
  );
}

export function listCapturesPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesPayment' from JSON`,
  );
}

/** @internal */
export const ListCapturesSettlement$inboundSchema: z.ZodType<
  ListCapturesSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesSettlement$outboundSchema: z.ZodType<
  ListCapturesSettlement$Outbound,
  z.ZodTypeDef,
  ListCapturesSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesSettlement$ {
  /** @deprecated use `ListCapturesSettlement$inboundSchema` instead. */
  export const inboundSchema = ListCapturesSettlement$inboundSchema;
  /** @deprecated use `ListCapturesSettlement$outboundSchema` instead. */
  export const outboundSchema = ListCapturesSettlement$outboundSchema;
  /** @deprecated use `ListCapturesSettlement$Outbound` instead. */
  export type Outbound = ListCapturesSettlement$Outbound;
}

export function listCapturesSettlementToJSON(
  listCapturesSettlement: ListCapturesSettlement,
): string {
  return JSON.stringify(
    ListCapturesSettlement$outboundSchema.parse(listCapturesSettlement),
  );
}

export function listCapturesSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesSettlement' from JSON`,
  );
}

/** @internal */
export const ListCapturesShipment$inboundSchema: z.ZodType<
  ListCapturesShipment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesShipment$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesShipment$outboundSchema: z.ZodType<
  ListCapturesShipment$Outbound,
  z.ZodTypeDef,
  ListCapturesShipment
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesShipment$ {
  /** @deprecated use `ListCapturesShipment$inboundSchema` instead. */
  export const inboundSchema = ListCapturesShipment$inboundSchema;
  /** @deprecated use `ListCapturesShipment$outboundSchema` instead. */
  export const outboundSchema = ListCapturesShipment$outboundSchema;
  /** @deprecated use `ListCapturesShipment$Outbound` instead. */
  export type Outbound = ListCapturesShipment$Outbound;
}

export function listCapturesShipmentToJSON(
  listCapturesShipment: ListCapturesShipment,
): string {
  return JSON.stringify(
    ListCapturesShipment$outboundSchema.parse(listCapturesShipment),
  );
}

export function listCapturesShipmentFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesShipment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesShipment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesShipment' from JSON`,
  );
}

/** @internal */
export const ListCapturesCaptureDocumentation$inboundSchema: z.ZodType<
  ListCapturesCaptureDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListCapturesCaptureDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListCapturesCaptureDocumentation$outboundSchema: z.ZodType<
  ListCapturesCaptureDocumentation$Outbound,
  z.ZodTypeDef,
  ListCapturesCaptureDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesCaptureDocumentation$ {
  /** @deprecated use `ListCapturesCaptureDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListCapturesCaptureDocumentation$inboundSchema;
  /** @deprecated use `ListCapturesCaptureDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListCapturesCaptureDocumentation$outboundSchema;
  /** @deprecated use `ListCapturesCaptureDocumentation$Outbound` instead. */
  export type Outbound = ListCapturesCaptureDocumentation$Outbound;
}

export function listCapturesCaptureDocumentationToJSON(
  listCapturesCaptureDocumentation: ListCapturesCaptureDocumentation,
): string {
  return JSON.stringify(
    ListCapturesCaptureDocumentation$outboundSchema.parse(
      listCapturesCaptureDocumentation,
    ),
  );
}

export function listCapturesCaptureDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesCaptureDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesCaptureDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesCaptureDocumentation' from JSON`,
  );
}

/** @internal */
export const ListCapturesCaptureLinks$inboundSchema: z.ZodType<
  ListCapturesCaptureLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListCapturesCaptureSelf$inboundSchema),
  payment: z.lazy(() => ListCapturesPayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => ListCapturesSettlement$inboundSchema))
    .optional(),
  shipment: z.nullable(z.lazy(() => ListCapturesShipment$inboundSchema))
    .optional(),
  documentation: z.lazy(() => ListCapturesCaptureDocumentation$inboundSchema),
});

/** @internal */
export type ListCapturesCaptureLinks$Outbound = {
  self: ListCapturesCaptureSelf$Outbound;
  payment: ListCapturesPayment$Outbound;
  settlement?: ListCapturesSettlement$Outbound | null | undefined;
  shipment?: ListCapturesShipment$Outbound | null | undefined;
  documentation: ListCapturesCaptureDocumentation$Outbound;
};

/** @internal */
export const ListCapturesCaptureLinks$outboundSchema: z.ZodType<
  ListCapturesCaptureLinks$Outbound,
  z.ZodTypeDef,
  ListCapturesCaptureLinks
> = z.object({
  self: z.lazy(() => ListCapturesCaptureSelf$outboundSchema),
  payment: z.lazy(() => ListCapturesPayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => ListCapturesSettlement$outboundSchema))
    .optional(),
  shipment: z.nullable(z.lazy(() => ListCapturesShipment$outboundSchema))
    .optional(),
  documentation: z.lazy(() => ListCapturesCaptureDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesCaptureLinks$ {
  /** @deprecated use `ListCapturesCaptureLinks$inboundSchema` instead. */
  export const inboundSchema = ListCapturesCaptureLinks$inboundSchema;
  /** @deprecated use `ListCapturesCaptureLinks$outboundSchema` instead. */
  export const outboundSchema = ListCapturesCaptureLinks$outboundSchema;
  /** @deprecated use `ListCapturesCaptureLinks$Outbound` instead. */
  export type Outbound = ListCapturesCaptureLinks$Outbound;
}

export function listCapturesCaptureLinksToJSON(
  listCapturesCaptureLinks: ListCapturesCaptureLinks,
): string {
  return JSON.stringify(
    ListCapturesCaptureLinks$outboundSchema.parse(listCapturesCaptureLinks),
  );
}

export function listCapturesCaptureLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesCaptureLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesCaptureLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesCaptureLinks' from JSON`,
  );
}

/** @internal */
export const ListCapturesCapture$inboundSchema: z.ZodType<
  ListCapturesCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: ListCapturesMode$inboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => ListCapturesAmount$inboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => ListCapturesSettlementAmount$inboundSchema),
  ).optional(),
  status: ListCapturesStatus$inboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListCapturesMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  _links: z.lazy(() => ListCapturesCaptureLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListCapturesCapture$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description?: string | undefined;
  amount: ListCapturesAmount$Outbound | null;
  settlementAmount?: ListCapturesSettlementAmount$Outbound | null | undefined;
  status: string;
  metadata?:
    | ListCapturesMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId: string;
  shipmentId?: string | null | undefined;
  settlementId?: string | null | undefined;
  createdAt: string;
  _links: ListCapturesCaptureLinks$Outbound;
};

/** @internal */
export const ListCapturesCapture$outboundSchema: z.ZodType<
  ListCapturesCapture$Outbound,
  z.ZodTypeDef,
  ListCapturesCapture
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: ListCapturesMode$outboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => ListCapturesAmount$outboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => ListCapturesSettlementAmount$outboundSchema),
  ).optional(),
  status: ListCapturesStatus$outboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListCapturesMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  links: z.lazy(() => ListCapturesCaptureLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesCapture$ {
  /** @deprecated use `ListCapturesCapture$inboundSchema` instead. */
  export const inboundSchema = ListCapturesCapture$inboundSchema;
  /** @deprecated use `ListCapturesCapture$outboundSchema` instead. */
  export const outboundSchema = ListCapturesCapture$outboundSchema;
  /** @deprecated use `ListCapturesCapture$Outbound` instead. */
  export type Outbound = ListCapturesCapture$Outbound;
}

export function listCapturesCaptureToJSON(
  listCapturesCapture: ListCapturesCapture,
): string {
  return JSON.stringify(
    ListCapturesCapture$outboundSchema.parse(listCapturesCapture),
  );
}

export function listCapturesCaptureFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesCapture' from JSON`,
  );
}

/** @internal */
export const ListCapturesEmbedded$inboundSchema: z.ZodType<
  ListCapturesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  captures: z.array(z.lazy(() => ListCapturesCapture$inboundSchema)).optional(),
});

/** @internal */
export type ListCapturesEmbedded$Outbound = {
  captures?: Array<ListCapturesCapture$Outbound> | undefined;
};

/** @internal */
export const ListCapturesEmbedded$outboundSchema: z.ZodType<
  ListCapturesEmbedded$Outbound,
  z.ZodTypeDef,
  ListCapturesEmbedded
> = z.object({
  captures: z.array(z.lazy(() => ListCapturesCapture$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesEmbedded$ {
  /** @deprecated use `ListCapturesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListCapturesEmbedded$inboundSchema;
  /** @deprecated use `ListCapturesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListCapturesEmbedded$outboundSchema;
  /** @deprecated use `ListCapturesEmbedded$Outbound` instead. */
  export type Outbound = ListCapturesEmbedded$Outbound;
}

export function listCapturesEmbeddedToJSON(
  listCapturesEmbedded: ListCapturesEmbedded,
): string {
  return JSON.stringify(
    ListCapturesEmbedded$outboundSchema.parse(listCapturesEmbedded),
  );
}

export function listCapturesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListCapturesSelf$inboundSchema: z.ZodType<
  ListCapturesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListCapturesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListCapturesSelf$outboundSchema: z.ZodType<
  ListCapturesSelf$Outbound,
  z.ZodTypeDef,
  ListCapturesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesSelf$ {
  /** @deprecated use `ListCapturesSelf$inboundSchema` instead. */
  export const inboundSchema = ListCapturesSelf$inboundSchema;
  /** @deprecated use `ListCapturesSelf$outboundSchema` instead. */
  export const outboundSchema = ListCapturesSelf$outboundSchema;
  /** @deprecated use `ListCapturesSelf$Outbound` instead. */
  export type Outbound = ListCapturesSelf$Outbound;
}

export function listCapturesSelfToJSON(
  listCapturesSelf: ListCapturesSelf,
): string {
  return JSON.stringify(
    ListCapturesSelf$outboundSchema.parse(listCapturesSelf),
  );
}

export function listCapturesSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesSelf' from JSON`,
  );
}

/** @internal */
export const ListCapturesPrevious$inboundSchema: z.ZodType<
  ListCapturesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesPrevious$outboundSchema: z.ZodType<
  ListCapturesPrevious$Outbound,
  z.ZodTypeDef,
  ListCapturesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesPrevious$ {
  /** @deprecated use `ListCapturesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListCapturesPrevious$inboundSchema;
  /** @deprecated use `ListCapturesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListCapturesPrevious$outboundSchema;
  /** @deprecated use `ListCapturesPrevious$Outbound` instead. */
  export type Outbound = ListCapturesPrevious$Outbound;
}

export function listCapturesPreviousToJSON(
  listCapturesPrevious: ListCapturesPrevious,
): string {
  return JSON.stringify(
    ListCapturesPrevious$outboundSchema.parse(listCapturesPrevious),
  );
}

export function listCapturesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesPrevious' from JSON`,
  );
}

/** @internal */
export const ListCapturesNext$inboundSchema: z.ZodType<
  ListCapturesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesNext$outboundSchema: z.ZodType<
  ListCapturesNext$Outbound,
  z.ZodTypeDef,
  ListCapturesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesNext$ {
  /** @deprecated use `ListCapturesNext$inboundSchema` instead. */
  export const inboundSchema = ListCapturesNext$inboundSchema;
  /** @deprecated use `ListCapturesNext$outboundSchema` instead. */
  export const outboundSchema = ListCapturesNext$outboundSchema;
  /** @deprecated use `ListCapturesNext$Outbound` instead. */
  export type Outbound = ListCapturesNext$Outbound;
}

export function listCapturesNextToJSON(
  listCapturesNext: ListCapturesNext,
): string {
  return JSON.stringify(
    ListCapturesNext$outboundSchema.parse(listCapturesNext),
  );
}

export function listCapturesNextFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesNext' from JSON`,
  );
}

/** @internal */
export const ListCapturesDocumentation$inboundSchema: z.ZodType<
  ListCapturesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListCapturesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListCapturesDocumentation$outboundSchema: z.ZodType<
  ListCapturesDocumentation$Outbound,
  z.ZodTypeDef,
  ListCapturesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesDocumentation$ {
  /** @deprecated use `ListCapturesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListCapturesDocumentation$inboundSchema;
  /** @deprecated use `ListCapturesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListCapturesDocumentation$outboundSchema;
  /** @deprecated use `ListCapturesDocumentation$Outbound` instead. */
  export type Outbound = ListCapturesDocumentation$Outbound;
}

export function listCapturesDocumentationToJSON(
  listCapturesDocumentation: ListCapturesDocumentation,
): string {
  return JSON.stringify(
    ListCapturesDocumentation$outboundSchema.parse(listCapturesDocumentation),
  );
}

export function listCapturesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListCapturesLinks$inboundSchema: z.ZodType<
  ListCapturesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListCapturesSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListCapturesPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListCapturesNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListCapturesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListCapturesLinks$Outbound = {
  self?: ListCapturesSelf$Outbound | undefined;
  previous?: ListCapturesPrevious$Outbound | null | undefined;
  next?: ListCapturesNext$Outbound | null | undefined;
  documentation?: ListCapturesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListCapturesLinks$outboundSchema: z.ZodType<
  ListCapturesLinks$Outbound,
  z.ZodTypeDef,
  ListCapturesLinks
> = z.object({
  self: z.lazy(() => ListCapturesSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListCapturesPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListCapturesNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListCapturesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesLinks$ {
  /** @deprecated use `ListCapturesLinks$inboundSchema` instead. */
  export const inboundSchema = ListCapturesLinks$inboundSchema;
  /** @deprecated use `ListCapturesLinks$outboundSchema` instead. */
  export const outboundSchema = ListCapturesLinks$outboundSchema;
  /** @deprecated use `ListCapturesLinks$Outbound` instead. */
  export type Outbound = ListCapturesLinks$Outbound;
}

export function listCapturesLinksToJSON(
  listCapturesLinks: ListCapturesLinks,
): string {
  return JSON.stringify(
    ListCapturesLinks$outboundSchema.parse(listCapturesLinks),
  );
}

export function listCapturesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesLinks' from JSON`,
  );
}

/** @internal */
export const ListCapturesResponse$inboundSchema: z.ZodType<
  ListCapturesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListCapturesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListCapturesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListCapturesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListCapturesEmbedded$Outbound | undefined;
  _links?: ListCapturesLinks$Outbound | undefined;
};

/** @internal */
export const ListCapturesResponse$outboundSchema: z.ZodType<
  ListCapturesResponse$Outbound,
  z.ZodTypeDef,
  ListCapturesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListCapturesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListCapturesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesResponse$ {
  /** @deprecated use `ListCapturesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCapturesResponse$inboundSchema;
  /** @deprecated use `ListCapturesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCapturesResponse$outboundSchema;
  /** @deprecated use `ListCapturesResponse$Outbound` instead. */
  export type Outbound = ListCapturesResponse$Outbound;
}

export function listCapturesResponseToJSON(
  listCapturesResponse: ListCapturesResponse,
): string {
  return JSON.stringify(
    ListCapturesResponse$outboundSchema.parse(listCapturesResponse),
  );
}

export function listCapturesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCapturesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapturesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapturesResponse' from JSON`,
  );
}
