/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export const GetChargebackEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export type GetChargebackEmbed = ClosedEnum<typeof GetChargebackEmbed>;

export type GetChargebackRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide the ID of the related chargeback.
   */
  chargebackId: string;
  /**
   * This endpoint allows you to embed additional information via the `embed` query string parameter.
   */
  embed?: GetChargebackEmbed | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetChargebackNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetChargebackNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetChargebackNotFoundDocumentation;
};

/**
 * The amount charged back by the customer.
 */
export type GetChargebackAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve
 * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
 * instead.
 */
export type GetChargebackSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
 */
export type GetChargebackReason = {
  /**
   * Technical code provided by the bank.
   */
  code: string;
  /**
   * A more detailed human-friendly description.
   */
  description: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetChargebackSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
 */
export type GetChargebackPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if
 *
 * @remarks
 * not yet settled.
 */
export type GetChargebackSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetChargebackDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetChargebackLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetChargebackSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
   */
  payment: GetChargebackPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if
   *
   * @remarks
   * not yet settled.
   */
  settlement?: GetChargebackSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: GetChargebackDocumentation;
};

/**
 * The chargeback object.
 */
export type GetChargebackResponse = {
  /**
   * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
   */
  id: string;
  /**
   * The amount charged back by the customer.
   */
  amount: GetChargebackAmount;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve
   * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
   * instead.
   */
  settlementAmount?: GetChargebackSettlementAmount | null | undefined;
  /**
   * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
   */
  reason?: GetChargebackReason | null | undefined;
  /**
   * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field
   *
   * @remarks
   * is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the chargeback was reversed if applicable, in
   *
   * @remarks
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  reversedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetChargebackLinks;
};

/** @internal */
export const GetChargebackEmbed$inboundSchema: z.ZodNativeEnum<
  typeof GetChargebackEmbed
> = z.nativeEnum(GetChargebackEmbed);

/** @internal */
export const GetChargebackEmbed$outboundSchema: z.ZodNativeEnum<
  typeof GetChargebackEmbed
> = GetChargebackEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackEmbed$ {
  /** @deprecated use `GetChargebackEmbed$inboundSchema` instead. */
  export const inboundSchema = GetChargebackEmbed$inboundSchema;
  /** @deprecated use `GetChargebackEmbed$outboundSchema` instead. */
  export const outboundSchema = GetChargebackEmbed$outboundSchema;
}

/** @internal */
export const GetChargebackRequest$inboundSchema: z.ZodType<
  GetChargebackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  chargebackId: z.string(),
  embed: z.nullable(GetChargebackEmbed$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetChargebackRequest$Outbound = {
  paymentId: string;
  chargebackId: string;
  embed?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetChargebackRequest$outboundSchema: z.ZodType<
  GetChargebackRequest$Outbound,
  z.ZodTypeDef,
  GetChargebackRequest
> = z.object({
  paymentId: z.string(),
  chargebackId: z.string(),
  embed: z.nullable(GetChargebackEmbed$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackRequest$ {
  /** @deprecated use `GetChargebackRequest$inboundSchema` instead. */
  export const inboundSchema = GetChargebackRequest$inboundSchema;
  /** @deprecated use `GetChargebackRequest$outboundSchema` instead. */
  export const outboundSchema = GetChargebackRequest$outboundSchema;
  /** @deprecated use `GetChargebackRequest$Outbound` instead. */
  export type Outbound = GetChargebackRequest$Outbound;
}

export function getChargebackRequestToJSON(
  getChargebackRequest: GetChargebackRequest,
): string {
  return JSON.stringify(
    GetChargebackRequest$outboundSchema.parse(getChargebackRequest),
  );
}

export function getChargebackRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackRequest' from JSON`,
  );
}

/** @internal */
export const GetChargebackNotFoundDocumentation$inboundSchema: z.ZodType<
  GetChargebackNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetChargebackNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetChargebackNotFoundDocumentation$outboundSchema: z.ZodType<
  GetChargebackNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetChargebackNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackNotFoundDocumentation$ {
  /** @deprecated use `GetChargebackNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetChargebackNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetChargebackNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetChargebackNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetChargebackNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetChargebackNotFoundDocumentation$Outbound;
}

export function getChargebackNotFoundDocumentationToJSON(
  getChargebackNotFoundDocumentation: GetChargebackNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetChargebackNotFoundDocumentation$outboundSchema.parse(
      getChargebackNotFoundDocumentation,
    ),
  );
}

export function getChargebackNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetChargebackNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetChargebackNotFoundLinks$inboundSchema: z.ZodType<
  GetChargebackNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetChargebackNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetChargebackNotFoundLinks$Outbound = {
  documentation: GetChargebackNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetChargebackNotFoundLinks$outboundSchema: z.ZodType<
  GetChargebackNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetChargebackNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetChargebackNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackNotFoundLinks$ {
  /** @deprecated use `GetChargebackNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetChargebackNotFoundLinks$inboundSchema;
  /** @deprecated use `GetChargebackNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetChargebackNotFoundLinks$outboundSchema;
  /** @deprecated use `GetChargebackNotFoundLinks$Outbound` instead. */
  export type Outbound = GetChargebackNotFoundLinks$Outbound;
}

export function getChargebackNotFoundLinksToJSON(
  getChargebackNotFoundLinks: GetChargebackNotFoundLinks,
): string {
  return JSON.stringify(
    GetChargebackNotFoundLinks$outboundSchema.parse(getChargebackNotFoundLinks),
  );
}

export function getChargebackNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetChargebackAmount$inboundSchema: z.ZodType<
  GetChargebackAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetChargebackAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetChargebackAmount$outboundSchema: z.ZodType<
  GetChargebackAmount$Outbound,
  z.ZodTypeDef,
  GetChargebackAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackAmount$ {
  /** @deprecated use `GetChargebackAmount$inboundSchema` instead. */
  export const inboundSchema = GetChargebackAmount$inboundSchema;
  /** @deprecated use `GetChargebackAmount$outboundSchema` instead. */
  export const outboundSchema = GetChargebackAmount$outboundSchema;
  /** @deprecated use `GetChargebackAmount$Outbound` instead. */
  export type Outbound = GetChargebackAmount$Outbound;
}

export function getChargebackAmountToJSON(
  getChargebackAmount: GetChargebackAmount,
): string {
  return JSON.stringify(
    GetChargebackAmount$outboundSchema.parse(getChargebackAmount),
  );
}

export function getChargebackAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackAmount' from JSON`,
  );
}

/** @internal */
export const GetChargebackSettlementAmount$inboundSchema: z.ZodType<
  GetChargebackSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetChargebackSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetChargebackSettlementAmount$outboundSchema: z.ZodType<
  GetChargebackSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetChargebackSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackSettlementAmount$ {
  /** @deprecated use `GetChargebackSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetChargebackSettlementAmount$inboundSchema;
  /** @deprecated use `GetChargebackSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetChargebackSettlementAmount$outboundSchema;
  /** @deprecated use `GetChargebackSettlementAmount$Outbound` instead. */
  export type Outbound = GetChargebackSettlementAmount$Outbound;
}

export function getChargebackSettlementAmountToJSON(
  getChargebackSettlementAmount: GetChargebackSettlementAmount,
): string {
  return JSON.stringify(
    GetChargebackSettlementAmount$outboundSchema.parse(
      getChargebackSettlementAmount,
    ),
  );
}

export function getChargebackSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetChargebackReason$inboundSchema: z.ZodType<
  GetChargebackReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  description: z.string(),
});

/** @internal */
export type GetChargebackReason$Outbound = {
  code: string;
  description: string;
};

/** @internal */
export const GetChargebackReason$outboundSchema: z.ZodType<
  GetChargebackReason$Outbound,
  z.ZodTypeDef,
  GetChargebackReason
> = z.object({
  code: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackReason$ {
  /** @deprecated use `GetChargebackReason$inboundSchema` instead. */
  export const inboundSchema = GetChargebackReason$inboundSchema;
  /** @deprecated use `GetChargebackReason$outboundSchema` instead. */
  export const outboundSchema = GetChargebackReason$outboundSchema;
  /** @deprecated use `GetChargebackReason$Outbound` instead. */
  export type Outbound = GetChargebackReason$Outbound;
}

export function getChargebackReasonToJSON(
  getChargebackReason: GetChargebackReason,
): string {
  return JSON.stringify(
    GetChargebackReason$outboundSchema.parse(getChargebackReason),
  );
}

export function getChargebackReasonFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackReason' from JSON`,
  );
}

/** @internal */
export const GetChargebackSelf$inboundSchema: z.ZodType<
  GetChargebackSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetChargebackSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetChargebackSelf$outboundSchema: z.ZodType<
  GetChargebackSelf$Outbound,
  z.ZodTypeDef,
  GetChargebackSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackSelf$ {
  /** @deprecated use `GetChargebackSelf$inboundSchema` instead. */
  export const inboundSchema = GetChargebackSelf$inboundSchema;
  /** @deprecated use `GetChargebackSelf$outboundSchema` instead. */
  export const outboundSchema = GetChargebackSelf$outboundSchema;
  /** @deprecated use `GetChargebackSelf$Outbound` instead. */
  export type Outbound = GetChargebackSelf$Outbound;
}

export function getChargebackSelfToJSON(
  getChargebackSelf: GetChargebackSelf,
): string {
  return JSON.stringify(
    GetChargebackSelf$outboundSchema.parse(getChargebackSelf),
  );
}

export function getChargebackSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackSelf' from JSON`,
  );
}

/** @internal */
export const GetChargebackPayment$inboundSchema: z.ZodType<
  GetChargebackPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetChargebackPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetChargebackPayment$outboundSchema: z.ZodType<
  GetChargebackPayment$Outbound,
  z.ZodTypeDef,
  GetChargebackPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackPayment$ {
  /** @deprecated use `GetChargebackPayment$inboundSchema` instead. */
  export const inboundSchema = GetChargebackPayment$inboundSchema;
  /** @deprecated use `GetChargebackPayment$outboundSchema` instead. */
  export const outboundSchema = GetChargebackPayment$outboundSchema;
  /** @deprecated use `GetChargebackPayment$Outbound` instead. */
  export type Outbound = GetChargebackPayment$Outbound;
}

export function getChargebackPaymentToJSON(
  getChargebackPayment: GetChargebackPayment,
): string {
  return JSON.stringify(
    GetChargebackPayment$outboundSchema.parse(getChargebackPayment),
  );
}

export function getChargebackPaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackPayment' from JSON`,
  );
}

/** @internal */
export const GetChargebackSettlement$inboundSchema: z.ZodType<
  GetChargebackSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetChargebackSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetChargebackSettlement$outboundSchema: z.ZodType<
  GetChargebackSettlement$Outbound,
  z.ZodTypeDef,
  GetChargebackSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackSettlement$ {
  /** @deprecated use `GetChargebackSettlement$inboundSchema` instead. */
  export const inboundSchema = GetChargebackSettlement$inboundSchema;
  /** @deprecated use `GetChargebackSettlement$outboundSchema` instead. */
  export const outboundSchema = GetChargebackSettlement$outboundSchema;
  /** @deprecated use `GetChargebackSettlement$Outbound` instead. */
  export type Outbound = GetChargebackSettlement$Outbound;
}

export function getChargebackSettlementToJSON(
  getChargebackSettlement: GetChargebackSettlement,
): string {
  return JSON.stringify(
    GetChargebackSettlement$outboundSchema.parse(getChargebackSettlement),
  );
}

export function getChargebackSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackSettlement' from JSON`,
  );
}

/** @internal */
export const GetChargebackDocumentation$inboundSchema: z.ZodType<
  GetChargebackDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetChargebackDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetChargebackDocumentation$outboundSchema: z.ZodType<
  GetChargebackDocumentation$Outbound,
  z.ZodTypeDef,
  GetChargebackDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackDocumentation$ {
  /** @deprecated use `GetChargebackDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetChargebackDocumentation$inboundSchema;
  /** @deprecated use `GetChargebackDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetChargebackDocumentation$outboundSchema;
  /** @deprecated use `GetChargebackDocumentation$Outbound` instead. */
  export type Outbound = GetChargebackDocumentation$Outbound;
}

export function getChargebackDocumentationToJSON(
  getChargebackDocumentation: GetChargebackDocumentation,
): string {
  return JSON.stringify(
    GetChargebackDocumentation$outboundSchema.parse(getChargebackDocumentation),
  );
}

export function getChargebackDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackDocumentation' from JSON`,
  );
}

/** @internal */
export const GetChargebackLinks$inboundSchema: z.ZodType<
  GetChargebackLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetChargebackSelf$inboundSchema),
  payment: z.lazy(() => GetChargebackPayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => GetChargebackSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetChargebackDocumentation$inboundSchema),
});

/** @internal */
export type GetChargebackLinks$Outbound = {
  self: GetChargebackSelf$Outbound;
  payment: GetChargebackPayment$Outbound;
  settlement?: GetChargebackSettlement$Outbound | null | undefined;
  documentation: GetChargebackDocumentation$Outbound;
};

/** @internal */
export const GetChargebackLinks$outboundSchema: z.ZodType<
  GetChargebackLinks$Outbound,
  z.ZodTypeDef,
  GetChargebackLinks
> = z.object({
  self: z.lazy(() => GetChargebackSelf$outboundSchema),
  payment: z.lazy(() => GetChargebackPayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => GetChargebackSettlement$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetChargebackDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackLinks$ {
  /** @deprecated use `GetChargebackLinks$inboundSchema` instead. */
  export const inboundSchema = GetChargebackLinks$inboundSchema;
  /** @deprecated use `GetChargebackLinks$outboundSchema` instead. */
  export const outboundSchema = GetChargebackLinks$outboundSchema;
  /** @deprecated use `GetChargebackLinks$Outbound` instead. */
  export type Outbound = GetChargebackLinks$Outbound;
}

export function getChargebackLinksToJSON(
  getChargebackLinks: GetChargebackLinks,
): string {
  return JSON.stringify(
    GetChargebackLinks$outboundSchema.parse(getChargebackLinks),
  );
}

export function getChargebackLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackLinks' from JSON`,
  );
}

/** @internal */
export const GetChargebackResponse$inboundSchema: z.ZodType<
  GetChargebackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => GetChargebackAmount$inboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => GetChargebackSettlementAmount$inboundSchema),
  ).optional(),
  reason: z.nullable(z.lazy(() => GetChargebackReason$inboundSchema))
    .optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetChargebackLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetChargebackResponse$Outbound = {
  resource: string;
  id: string;
  amount: GetChargebackAmount$Outbound;
  settlementAmount?: GetChargebackSettlementAmount$Outbound | null | undefined;
  reason?: GetChargebackReason$Outbound | null | undefined;
  paymentId: string;
  settlementId?: string | null | undefined;
  createdAt: string;
  reversedAt?: string | null | undefined;
  _links: GetChargebackLinks$Outbound;
};

/** @internal */
export const GetChargebackResponse$outboundSchema: z.ZodType<
  GetChargebackResponse$Outbound,
  z.ZodTypeDef,
  GetChargebackResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => GetChargebackAmount$outboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => GetChargebackSettlementAmount$outboundSchema),
  ).optional(),
  reason: z.nullable(z.lazy(() => GetChargebackReason$outboundSchema))
    .optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetChargebackLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackResponse$ {
  /** @deprecated use `GetChargebackResponse$inboundSchema` instead. */
  export const inboundSchema = GetChargebackResponse$inboundSchema;
  /** @deprecated use `GetChargebackResponse$outboundSchema` instead. */
  export const outboundSchema = GetChargebackResponse$outboundSchema;
  /** @deprecated use `GetChargebackResponse$Outbound` instead. */
  export type Outbound = GetChargebackResponse$Outbound;
}

export function getChargebackResponseToJSON(
  getChargebackResponse: GetChargebackResponse,
): string {
  return JSON.stringify(
    GetChargebackResponse$outboundSchema.parse(getChargebackResponse),
  );
}

export function getChargebackResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackResponse' from JSON`,
  );
}
