/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetChargebackRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide the ID of the related chargeback.
   */
  chargebackId: string;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetChargebackRequest$inboundSchema: z.ZodType<
  GetChargebackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  chargebackId: z.string(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetChargebackRequest$Outbound = {
  paymentId: string;
  chargebackId: string;
  embed?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetChargebackRequest$outboundSchema: z.ZodType<
  GetChargebackRequest$Outbound,
  z.ZodTypeDef,
  GetChargebackRequest
> = z.object({
  paymentId: z.string(),
  chargebackId: z.string(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChargebackRequest$ {
  /** @deprecated use `GetChargebackRequest$inboundSchema` instead. */
  export const inboundSchema = GetChargebackRequest$inboundSchema;
  /** @deprecated use `GetChargebackRequest$outboundSchema` instead. */
  export const outboundSchema = GetChargebackRequest$outboundSchema;
  /** @deprecated use `GetChargebackRequest$Outbound` instead. */
  export type Outbound = GetChargebackRequest$Outbound;
}

export function getChargebackRequestToJSON(
  getChargebackRequest: GetChargebackRequest,
): string {
  return JSON.stringify(
    GetChargebackRequest$outboundSchema.parse(getChargebackRequest),
  );
}

export function getChargebackRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetChargebackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChargebackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChargebackRequest' from JSON`,
  );
}
