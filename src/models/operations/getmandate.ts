/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMandateRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * Provide the ID of the related mandate.
   */
  mandateId: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetMandateNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetMandateNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetMandateNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetMandateMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetMandateMode = ClosedEnum<typeof GetMandateMode>;

/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export const GetMandateMethod = {
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Paypal: "paypal",
} as const;
/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export type GetMandateMethod = ClosedEnum<typeof GetMandateMethod>;

/**
 * The card's label. Available for card mandates, if the card label could be detected.
 */
export const GetMandateCardLabel = {
  AmericanExpress: "American Express",
  CartaSi: "Carta Si",
  CarteBleue: "Carte Bleue",
  Dankort: "Dankort",
  DinersClub: "Diners Club",
  Discover: "Discover",
  Jcb: "JCB",
  Laser: "Laser",
  Maestro: "Maestro",
  Mastercard: "Mastercard",
  Unionpay: "Unionpay",
  Visa: "Visa",
} as const;
/**
 * The card's label. Available for card mandates, if the card label could be detected.
 */
export type GetMandateCardLabel = ClosedEnum<typeof GetMandateCardLabel>;

export type GetMandateDetails = {
  /**
   * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
   */
  consumerName?: string | null | undefined;
  /**
   * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
   */
  consumerAccount?: string | null | undefined;
  /**
   * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
   */
  consumerBic?: string | null | undefined;
  /**
   * The card holder's name. Available for card mandates.
   */
  cardHolder?: string | null | undefined;
  /**
   * The last four digits of the card number. Available for card mandates.
   */
  cardNumber?: string | null | undefined;
  /**
   * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
   */
  cardExpiryDate?: string | null | undefined;
  /**
   * The card's label. Available for card mandates, if the card label could be detected.
   */
  cardLabel?: GetMandateCardLabel | null | undefined;
  /**
   * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify
   *
   * @remarks
   * returning customers.
   */
  cardFingerprint?: string | null | undefined;
};

/**
 * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
 *
 * @remarks
 * when we did not received the IBAN yet from the first payment.
 */
export const GetMandateStatus = {
  Valid: "valid",
  Pending: "pending",
  Invalid: "invalid",
} as const;
/**
 * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
 *
 * @remarks
 * when we did not received the IBAN yet from the first payment.
 */
export type GetMandateStatus = ClosedEnum<typeof GetMandateStatus>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetMandateSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer) that this mandate belongs to.
 */
export type GetMandateCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetMandateDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetMandateLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetMandateSelf;
  /**
   * The API resource URL of the [customer](get-customer) that this mandate belongs to.
   */
  customer: GetMandateCustomer;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: GetMandateDocumentation;
};

/**
 * The mandate object.
 */
export type GetMandateResponse = {
  /**
   * Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: GetMandateMode;
  /**
   * Payment method of the mandate.
   *
   * @remarks
   *
   * SEPA Direct Debit and PayPal mandates can be created directly.
   */
  method: GetMandateMethod;
  details: GetMandateDetails;
  /**
   * The date when the mandate was signed in `YYYY-MM-DD` format.
   */
  signatureDate: string | null;
  /**
   * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
   *
   * @remarks
   * decline Direct Debit payments if the mandate reference is not unique.
   */
  mandateReference: string | null;
  /**
   * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
   *
   * @remarks
   * when we did not received the IBAN yet from the first payment.
   */
  status: GetMandateStatus;
  /**
   * The identifier referring to the [customer](get-customer) this mandate was linked to.
   */
  customerId: string;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetMandateLinks;
};

/** @internal */
export const GetMandateRequest$inboundSchema: z.ZodType<
  GetMandateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  mandateId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetMandateRequest$Outbound = {
  customerId: string;
  mandateId: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetMandateRequest$outboundSchema: z.ZodType<
  GetMandateRequest$Outbound,
  z.ZodTypeDef,
  GetMandateRequest
> = z.object({
  customerId: z.string(),
  mandateId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateRequest$ {
  /** @deprecated use `GetMandateRequest$inboundSchema` instead. */
  export const inboundSchema = GetMandateRequest$inboundSchema;
  /** @deprecated use `GetMandateRequest$outboundSchema` instead. */
  export const outboundSchema = GetMandateRequest$outboundSchema;
  /** @deprecated use `GetMandateRequest$Outbound` instead. */
  export type Outbound = GetMandateRequest$Outbound;
}

export function getMandateRequestToJSON(
  getMandateRequest: GetMandateRequest,
): string {
  return JSON.stringify(
    GetMandateRequest$outboundSchema.parse(getMandateRequest),
  );
}

export function getMandateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateRequest' from JSON`,
  );
}

/** @internal */
export const GetMandateNotFoundDocumentation$inboundSchema: z.ZodType<
  GetMandateNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMandateNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMandateNotFoundDocumentation$outboundSchema: z.ZodType<
  GetMandateNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetMandateNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateNotFoundDocumentation$ {
  /** @deprecated use `GetMandateNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMandateNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetMandateNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMandateNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetMandateNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetMandateNotFoundDocumentation$Outbound;
}

export function getMandateNotFoundDocumentationToJSON(
  getMandateNotFoundDocumentation: GetMandateNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetMandateNotFoundDocumentation$outboundSchema.parse(
      getMandateNotFoundDocumentation,
    ),
  );
}

export function getMandateNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetMandateNotFoundLinks$inboundSchema: z.ZodType<
  GetMandateNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetMandateNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetMandateNotFoundLinks$Outbound = {
  documentation: GetMandateNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetMandateNotFoundLinks$outboundSchema: z.ZodType<
  GetMandateNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetMandateNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetMandateNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateNotFoundLinks$ {
  /** @deprecated use `GetMandateNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetMandateNotFoundLinks$inboundSchema;
  /** @deprecated use `GetMandateNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetMandateNotFoundLinks$outboundSchema;
  /** @deprecated use `GetMandateNotFoundLinks$Outbound` instead. */
  export type Outbound = GetMandateNotFoundLinks$Outbound;
}

export function getMandateNotFoundLinksToJSON(
  getMandateNotFoundLinks: GetMandateNotFoundLinks,
): string {
  return JSON.stringify(
    GetMandateNotFoundLinks$outboundSchema.parse(getMandateNotFoundLinks),
  );
}

export function getMandateNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetMandateMode$inboundSchema: z.ZodNativeEnum<
  typeof GetMandateMode
> = z.nativeEnum(GetMandateMode);

/** @internal */
export const GetMandateMode$outboundSchema: z.ZodNativeEnum<
  typeof GetMandateMode
> = GetMandateMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateMode$ {
  /** @deprecated use `GetMandateMode$inboundSchema` instead. */
  export const inboundSchema = GetMandateMode$inboundSchema;
  /** @deprecated use `GetMandateMode$outboundSchema` instead. */
  export const outboundSchema = GetMandateMode$outboundSchema;
}

/** @internal */
export const GetMandateMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetMandateMethod
> = z.nativeEnum(GetMandateMethod);

/** @internal */
export const GetMandateMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetMandateMethod
> = GetMandateMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateMethod$ {
  /** @deprecated use `GetMandateMethod$inboundSchema` instead. */
  export const inboundSchema = GetMandateMethod$inboundSchema;
  /** @deprecated use `GetMandateMethod$outboundSchema` instead. */
  export const outboundSchema = GetMandateMethod$outboundSchema;
}

/** @internal */
export const GetMandateCardLabel$inboundSchema: z.ZodNativeEnum<
  typeof GetMandateCardLabel
> = z.nativeEnum(GetMandateCardLabel);

/** @internal */
export const GetMandateCardLabel$outboundSchema: z.ZodNativeEnum<
  typeof GetMandateCardLabel
> = GetMandateCardLabel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateCardLabel$ {
  /** @deprecated use `GetMandateCardLabel$inboundSchema` instead. */
  export const inboundSchema = GetMandateCardLabel$inboundSchema;
  /** @deprecated use `GetMandateCardLabel$outboundSchema` instead. */
  export const outboundSchema = GetMandateCardLabel$outboundSchema;
}

/** @internal */
export const GetMandateDetails$inboundSchema: z.ZodType<
  GetMandateDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardLabel: z.nullable(GetMandateCardLabel$inboundSchema).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetMandateDetails$Outbound = {
  consumerName?: string | null | undefined;
  consumerAccount?: string | null | undefined;
  consumerBic?: string | null | undefined;
  cardHolder?: string | null | undefined;
  cardNumber?: string | null | undefined;
  cardExpiryDate?: string | null | undefined;
  cardLabel?: string | null | undefined;
  cardFingerprint?: string | null | undefined;
};

/** @internal */
export const GetMandateDetails$outboundSchema: z.ZodType<
  GetMandateDetails$Outbound,
  z.ZodTypeDef,
  GetMandateDetails
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardLabel: z.nullable(GetMandateCardLabel$outboundSchema).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateDetails$ {
  /** @deprecated use `GetMandateDetails$inboundSchema` instead. */
  export const inboundSchema = GetMandateDetails$inboundSchema;
  /** @deprecated use `GetMandateDetails$outboundSchema` instead. */
  export const outboundSchema = GetMandateDetails$outboundSchema;
  /** @deprecated use `GetMandateDetails$Outbound` instead. */
  export type Outbound = GetMandateDetails$Outbound;
}

export function getMandateDetailsToJSON(
  getMandateDetails: GetMandateDetails,
): string {
  return JSON.stringify(
    GetMandateDetails$outboundSchema.parse(getMandateDetails),
  );
}

export function getMandateDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateDetails' from JSON`,
  );
}

/** @internal */
export const GetMandateStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetMandateStatus
> = z.nativeEnum(GetMandateStatus);

/** @internal */
export const GetMandateStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetMandateStatus
> = GetMandateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateStatus$ {
  /** @deprecated use `GetMandateStatus$inboundSchema` instead. */
  export const inboundSchema = GetMandateStatus$inboundSchema;
  /** @deprecated use `GetMandateStatus$outboundSchema` instead. */
  export const outboundSchema = GetMandateStatus$outboundSchema;
}

/** @internal */
export const GetMandateSelf$inboundSchema: z.ZodType<
  GetMandateSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMandateSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMandateSelf$outboundSchema: z.ZodType<
  GetMandateSelf$Outbound,
  z.ZodTypeDef,
  GetMandateSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateSelf$ {
  /** @deprecated use `GetMandateSelf$inboundSchema` instead. */
  export const inboundSchema = GetMandateSelf$inboundSchema;
  /** @deprecated use `GetMandateSelf$outboundSchema` instead. */
  export const outboundSchema = GetMandateSelf$outboundSchema;
  /** @deprecated use `GetMandateSelf$Outbound` instead. */
  export type Outbound = GetMandateSelf$Outbound;
}

export function getMandateSelfToJSON(getMandateSelf: GetMandateSelf): string {
  return JSON.stringify(GetMandateSelf$outboundSchema.parse(getMandateSelf));
}

export function getMandateSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateSelf' from JSON`,
  );
}

/** @internal */
export const GetMandateCustomer$inboundSchema: z.ZodType<
  GetMandateCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMandateCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMandateCustomer$outboundSchema: z.ZodType<
  GetMandateCustomer$Outbound,
  z.ZodTypeDef,
  GetMandateCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateCustomer$ {
  /** @deprecated use `GetMandateCustomer$inboundSchema` instead. */
  export const inboundSchema = GetMandateCustomer$inboundSchema;
  /** @deprecated use `GetMandateCustomer$outboundSchema` instead. */
  export const outboundSchema = GetMandateCustomer$outboundSchema;
  /** @deprecated use `GetMandateCustomer$Outbound` instead. */
  export type Outbound = GetMandateCustomer$Outbound;
}

export function getMandateCustomerToJSON(
  getMandateCustomer: GetMandateCustomer,
): string {
  return JSON.stringify(
    GetMandateCustomer$outboundSchema.parse(getMandateCustomer),
  );
}

export function getMandateCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateCustomer' from JSON`,
  );
}

/** @internal */
export const GetMandateDocumentation$inboundSchema: z.ZodType<
  GetMandateDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMandateDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMandateDocumentation$outboundSchema: z.ZodType<
  GetMandateDocumentation$Outbound,
  z.ZodTypeDef,
  GetMandateDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateDocumentation$ {
  /** @deprecated use `GetMandateDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMandateDocumentation$inboundSchema;
  /** @deprecated use `GetMandateDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMandateDocumentation$outboundSchema;
  /** @deprecated use `GetMandateDocumentation$Outbound` instead. */
  export type Outbound = GetMandateDocumentation$Outbound;
}

export function getMandateDocumentationToJSON(
  getMandateDocumentation: GetMandateDocumentation,
): string {
  return JSON.stringify(
    GetMandateDocumentation$outboundSchema.parse(getMandateDocumentation),
  );
}

export function getMandateDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateDocumentation' from JSON`,
  );
}

/** @internal */
export const GetMandateLinks$inboundSchema: z.ZodType<
  GetMandateLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetMandateSelf$inboundSchema),
  customer: z.lazy(() => GetMandateCustomer$inboundSchema),
  documentation: z.lazy(() => GetMandateDocumentation$inboundSchema),
});

/** @internal */
export type GetMandateLinks$Outbound = {
  self: GetMandateSelf$Outbound;
  customer: GetMandateCustomer$Outbound;
  documentation: GetMandateDocumentation$Outbound;
};

/** @internal */
export const GetMandateLinks$outboundSchema: z.ZodType<
  GetMandateLinks$Outbound,
  z.ZodTypeDef,
  GetMandateLinks
> = z.object({
  self: z.lazy(() => GetMandateSelf$outboundSchema),
  customer: z.lazy(() => GetMandateCustomer$outboundSchema),
  documentation: z.lazy(() => GetMandateDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateLinks$ {
  /** @deprecated use `GetMandateLinks$inboundSchema` instead. */
  export const inboundSchema = GetMandateLinks$inboundSchema;
  /** @deprecated use `GetMandateLinks$outboundSchema` instead. */
  export const outboundSchema = GetMandateLinks$outboundSchema;
  /** @deprecated use `GetMandateLinks$Outbound` instead. */
  export type Outbound = GetMandateLinks$Outbound;
}

export function getMandateLinksToJSON(
  getMandateLinks: GetMandateLinks,
): string {
  return JSON.stringify(GetMandateLinks$outboundSchema.parse(getMandateLinks));
}

export function getMandateLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateLinks' from JSON`,
  );
}

/** @internal */
export const GetMandateResponse$inboundSchema: z.ZodType<
  GetMandateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetMandateMode$inboundSchema,
  method: GetMandateMethod$inboundSchema,
  details: z.lazy(() => GetMandateDetails$inboundSchema),
  signatureDate: z.nullable(z.string()),
  mandateReference: z.nullable(z.string()),
  status: GetMandateStatus$inboundSchema,
  customerId: z.string(),
  createdAt: z.string(),
  _links: z.lazy(() => GetMandateLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetMandateResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  method: string;
  details: GetMandateDetails$Outbound;
  signatureDate: string | null;
  mandateReference: string | null;
  status: string;
  customerId: string;
  createdAt: string;
  _links: GetMandateLinks$Outbound;
};

/** @internal */
export const GetMandateResponse$outboundSchema: z.ZodType<
  GetMandateResponse$Outbound,
  z.ZodTypeDef,
  GetMandateResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetMandateMode$outboundSchema,
  method: GetMandateMethod$outboundSchema,
  details: z.lazy(() => GetMandateDetails$outboundSchema),
  signatureDate: z.nullable(z.string()),
  mandateReference: z.nullable(z.string()),
  status: GetMandateStatus$outboundSchema,
  customerId: z.string(),
  createdAt: z.string(),
  links: z.lazy(() => GetMandateLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateResponse$ {
  /** @deprecated use `GetMandateResponse$inboundSchema` instead. */
  export const inboundSchema = GetMandateResponse$inboundSchema;
  /** @deprecated use `GetMandateResponse$outboundSchema` instead. */
  export const outboundSchema = GetMandateResponse$outboundSchema;
  /** @deprecated use `GetMandateResponse$Outbound` instead. */
  export type Outbound = GetMandateResponse$Outbound;
}

export function getMandateResponseToJSON(
  getMandateResponse: GetMandateResponse,
): string {
  return JSON.stringify(
    GetMandateResponse$outboundSchema.parse(getMandateResponse),
  );
}

export function getMandateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateResponse' from JSON`,
  );
}
