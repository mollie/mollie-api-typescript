/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMandateRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * Provide the ID of the related mandate.
   */
  mandateId: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const GetMandateRequest$inboundSchema: z.ZodType<
  GetMandateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  mandateId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetMandateRequest$Outbound = {
  customerId: string;
  mandateId: string;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetMandateRequest$outboundSchema: z.ZodType<
  GetMandateRequest$Outbound,
  z.ZodTypeDef,
  GetMandateRequest
> = z.object({
  customerId: z.string(),
  mandateId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMandateRequest$ {
  /** @deprecated use `GetMandateRequest$inboundSchema` instead. */
  export const inboundSchema = GetMandateRequest$inboundSchema;
  /** @deprecated use `GetMandateRequest$outboundSchema` instead. */
  export const outboundSchema = GetMandateRequest$outboundSchema;
  /** @deprecated use `GetMandateRequest$Outbound` instead. */
  export type Outbound = GetMandateRequest$Outbound;
}

export function getMandateRequestToJSON(
  getMandateRequest: GetMandateRequest,
): string {
  return JSON.stringify(
    GetMandateRequest$outboundSchema.parse(getMandateRequest),
  );
}

export function getMandateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMandateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMandateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMandateRequest' from JSON`,
  );
}
