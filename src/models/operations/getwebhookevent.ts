/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWebhookEventRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetWebhookEventNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetWebhookEventNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetWebhookEventNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetWebhookEventMode2 = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetWebhookEventMode2 = ClosedEnum<typeof GetWebhookEventMode2>;

/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export const GetWebhookEventStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Blocked: "blocked",
} as const;
/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export type GetWebhookEventStatus = ClosedEnum<typeof GetWebhookEventStatus>;

/**
 * The status of the requested changes.
 */
export const GetWebhookEventReviewStatus = {
  Pending: "pending",
  Rejected: "rejected",
} as const;
/**
 * The status of the requested changes.
 */
export type GetWebhookEventReviewStatus = ClosedEnum<
  typeof GetWebhookEventReviewStatus
>;

/**
 * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
 *
 * @remarks
 * automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
 * `null` in test mode.
 */
export type GetWebhookEventReview = {
  /**
   * The status of the requested changes.
   */
  status?: GetWebhookEventReviewStatus | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type EntitySelf2 = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Link to the profile in the Mollie dashboard.
 */
export type GetWebhookEventDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the chargebacks that belong to this profile.
 */
export type GetWebhookEventChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the methods that are enabled for this profile.
 */
export type GetWebhookEventMethods = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the payments that belong to this profile.
 */
export type GetWebhookEventPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the refunds that belong to this profile.
 */
export type GetWebhookEventRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The hosted checkout preview URL. You need to be logged in to access this page.
 */
export type GetWebhookEventCheckoutPreviewUrl = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type EntityDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityLinks2 = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: EntitySelf2 | undefined;
  /**
   * Link to the profile in the Mollie dashboard.
   */
  dashboard?: GetWebhookEventDashboard | undefined;
  /**
   * The API resource URL of the chargebacks that belong to this profile.
   */
  chargebacks?: GetWebhookEventChargebacks | undefined;
  /**
   * The API resource URL of the methods that are enabled for this profile.
   */
  methods?: GetWebhookEventMethods | undefined;
  /**
   * The API resource URL of the payments that belong to this profile.
   */
  payments?: GetWebhookEventPayments | undefined;
  /**
   * The API resource URL of the refunds that belong to this profile.
   */
  refunds?: GetWebhookEventRefunds | undefined;
  /**
   * The hosted checkout preview URL. You need to be logged in to access this page.
   */
  checkoutPreviewUrl?: GetWebhookEventCheckoutPreviewUrl | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: EntityDocumentation | undefined;
};

export type GetWebhookEventProfile = {
  /**
   * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: GetWebhookEventMode2 | undefined;
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or
   *
   * @remarks
   * application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are
   *
   * @remarks
   * allowed.
   */
  website?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside,
   *
   * @remarks
   * in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the
   *
   * @remarks
   * [business category list](common-data-types#business-category) for all possible options.
   */
  businessCategory?: string | undefined;
  /**
   * The profile status determines whether the profile is able to receive live payments.
   *
   * @remarks
   *
   * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
   * * `verified`: The profile has been verified and can be used to create live payments and test payments.
   * * `blocked`: The profile is blocked and can no longer be used or changed.
   */
  status?: GetWebhookEventStatus | undefined;
  /**
   * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
   *
   * @remarks
   * automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
   * `null` in test mode.
   */
  review?: GetWebhookEventReview | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityLinks2 | undefined;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetWebhookEventMode1 = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetWebhookEventMode1 = ClosedEnum<typeof GetWebhookEventMode1>;

/**
 * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
 *
 * @remarks
 * amount.
 */
export type GetWebhookEventAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
 *
 * @remarks
 * customer will be prompted to enter a value greater than or equal to the minimum amount.
 */
export type GetWebhookEventMinimumAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export const GetWebhookEventType = {
  Physical: "physical",
  Digital: "digital",
  ShippingFee: "shipping_fee",
  Discount: "discount",
  StoreCredit: "store_credit",
  GiftCard: "gift_card",
  Surcharge: "surcharge",
  Tip: "tip",
} as const;
/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export type GetWebhookEventType = ClosedEnum<typeof GetWebhookEventType>;

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type GetWebhookEventUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
 *
 * @remarks
 * type.
 */
export type GetWebhookEventDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type GetWebhookEventTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
 *
 * @remarks
 * calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
 * `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type GetWebhookEventVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const GetWebhookEventCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type GetWebhookEventCategory = ClosedEnum<
  typeof GetWebhookEventCategory
>;

export type GetWebhookEventLine = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   */
  type?: GetWebhookEventType | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: GetWebhookEventUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
   *
   * @remarks
   * type.
   */
  discountAmount?: GetWebhookEventDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: GetWebhookEventTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
   *
   * @remarks
   * not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
   *
   * @remarks
   * calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
   * `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: GetWebhookEventVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the
   *
   * @remarks
   * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
   */
  categories?: Array<GetWebhookEventCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and
 *
 * @remarks
 * conversion.
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
 * `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type GetWebhookEventBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
   * email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and
 *
 * @remarks
 * conversion.
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
 * `country`.
 */
export type GetWebhookEventShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
   * email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
 * a €0.99 fee on a €1.00 payment.
 */
export type GetWebhookEventApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
 *
 * @remarks
 * merchants.
 *
 * If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
 * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
 * to your own account balance.
 */
export type GetWebhookEventApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
   * a €0.99 fee on a €1.00 payment.
   */
  amount: GetWebhookEventApplicationFeeAmount;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the
   *
   * @remarks
   * connected merchant.
   */
  description: string;
};

/**
 * If set to `first`, a payment mandate is established right after a payment is made by the customer.
 *
 * @remarks
 *
 * Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
 *
 * The mandate ID can be retrieved by making a call to the
 * [Payment Link Payments Endpoint](get-payment-link-payments).
 */
export const GetWebhookEventSequenceType = {
  Oneoff: "oneoff",
  First: "first",
} as const;
/**
 * If set to `first`, a payment mandate is established right after a payment is made by the customer.
 *
 * @remarks
 *
 * Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
 *
 * The mandate ID can be retrieved by making a call to the
 * [Payment Link Payments Endpoint](get-payment-link-payments).
 */
export type GetWebhookEventSequenceType = ClosedEnum<
  typeof GetWebhookEventSequenceType
>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type EntitySelf1 = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type GetWebhookEventLinksPaymentLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityLinks1 = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: EntitySelf1;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  paymentLink: GetWebhookEventLinksPaymentLink;
};

export type GetWebhookEventPaymentLinkOutput = {
  /**
   * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: GetWebhookEventMode1;
  /**
   * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
   *
   * @remarks
   * customer's bank or card statement when possible.
   */
  description: string;
  /**
   * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
   *
   * @remarks
   * amount.
   */
  amount: GetWebhookEventAmount | null;
  /**
   * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
   *
   * @remarks
   * customer will be prompted to enter a value greater than or equal to the minimum amount.
   */
  minimumAmount?: GetWebhookEventMinimumAmount | null | undefined;
  /**
   * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
   */
  archived: boolean;
  /**
   * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
   *
   * @remarks
   * the customer will be shown a generic message after completing the payment.
   */
  redirectUrl: string | null;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
   * resulting from the payment link.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
   * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
   * local machine.
   */
  webhookUrl: string | null;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<GetWebhookEventLine> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and
   *
   * @remarks
   * conversion.
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
   * `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: GetWebhookEventBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and
   *
   * @remarks
   * conversion.
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
   * `country`.
   */
  shippingAddress?: GetWebhookEventShippingAddress | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
   * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
   * required.
   */
  profileId: string | null;
  /**
   * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
   *
   * @remarks
   * payments using the same link.
   *
   * If no value is specified, the field defaults to `false`, allowing only a single payment per link.
   */
  reusable: boolean | null;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the payment link became paid, in ISO 8601 format.
   */
  paidAt: string | null;
  /**
   * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
   *
   * @remarks
   * the payment link will not expire automatically.
   */
  expiresAt: string | null;
  /**
   * An array of payment methods that are allowed to be used for this payment link. When this parameter is
   *
   * @remarks
   * not provided or is an empty array, all enabled payment methods will be available.
   *
   * Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
   * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
   * 'in3', 'riverty', 'klarna', 'billie'.
   */
  allowedMethods: Array<string> | null;
  /**
   * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
   *
   * @remarks
   * merchants.
   *
   * If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
   * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
   * to your own account balance.
   */
  applicationFee?: GetWebhookEventApplicationFee | undefined;
  /**
   * If set to `first`, a payment mandate is established right after a payment is made by the customer.
   *
   * @remarks
   *
   * Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
   *
   * The mandate ID can be retrieved by making a call to the
   * [Payment Link Payments Endpoint](get-payment-link-payments).
   */
  sequenceType?: GetWebhookEventSequenceType | null | undefined;
  /**
   * **Only relevant when `sequenceType` is set to `first`**
   *
   * @remarks
   *
   * The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
   * the customer will be required to input relevant information which will be used to establish a mandate after
   * the payment is made.
   */
  customerId?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityLinks1;
};

export type Entity = GetWebhookEventPaymentLinkOutput | GetWebhookEventProfile;

/**
 * Full payload of the event.
 */
export type GetWebhookEventEmbedded = {
  entity?:
    | GetWebhookEventPaymentLinkOutput
    | GetWebhookEventProfile
    | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetWebhookEventSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetWebhookEventDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the entity that this event belongs to.
 */
export type LinksEntity = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetWebhookEventLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetWebhookEventSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetWebhookEventDocumentation | undefined;
  /**
   * The API resource URL of the entity that this event belongs to.
   */
  entity?: LinksEntity | undefined;
};

/**
 * The webhook event object.
 */
export type GetWebhookEventResponse = {
  /**
   * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this event.
   */
  id?: string | undefined;
  /**
   * The event's type.
   */
  type?: string | undefined;
  /**
   * The entity token that triggered the event
   */
  entityId?: string | undefined;
  /**
   * The event's date time of creation.
   */
  createdAt?: string | undefined;
  /**
   * Full payload of the event.
   */
  embedded?: GetWebhookEventEmbedded | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetWebhookEventLinks | undefined;
};

/** @internal */
export const GetWebhookEventRequest$inboundSchema: z.ZodType<
  GetWebhookEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetWebhookEventRequest$Outbound = {
  id: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetWebhookEventRequest$outboundSchema: z.ZodType<
  GetWebhookEventRequest$Outbound,
  z.ZodTypeDef,
  GetWebhookEventRequest
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventRequest$ {
  /** @deprecated use `GetWebhookEventRequest$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventRequest$inboundSchema;
  /** @deprecated use `GetWebhookEventRequest$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventRequest$outboundSchema;
  /** @deprecated use `GetWebhookEventRequest$Outbound` instead. */
  export type Outbound = GetWebhookEventRequest$Outbound;
}

export function getWebhookEventRequestToJSON(
  getWebhookEventRequest: GetWebhookEventRequest,
): string {
  return JSON.stringify(
    GetWebhookEventRequest$outboundSchema.parse(getWebhookEventRequest),
  );
}

export function getWebhookEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventRequest' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventNotFoundDocumentation$inboundSchema: z.ZodType<
  GetWebhookEventNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventNotFoundDocumentation$outboundSchema: z.ZodType<
  GetWebhookEventNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetWebhookEventNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventNotFoundDocumentation$ {
  /** @deprecated use `GetWebhookEventNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetWebhookEventNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetWebhookEventNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetWebhookEventNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetWebhookEventNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetWebhookEventNotFoundDocumentation$Outbound;
}

export function getWebhookEventNotFoundDocumentationToJSON(
  getWebhookEventNotFoundDocumentation: GetWebhookEventNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetWebhookEventNotFoundDocumentation$outboundSchema.parse(
      getWebhookEventNotFoundDocumentation,
    ),
  );
}

export function getWebhookEventNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetWebhookEventNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventNotFoundLinks$inboundSchema: z.ZodType<
  GetWebhookEventNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetWebhookEventNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetWebhookEventNotFoundLinks$Outbound = {
  documentation: GetWebhookEventNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetWebhookEventNotFoundLinks$outboundSchema: z.ZodType<
  GetWebhookEventNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetWebhookEventNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetWebhookEventNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventNotFoundLinks$ {
  /** @deprecated use `GetWebhookEventNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventNotFoundLinks$inboundSchema;
  /** @deprecated use `GetWebhookEventNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventNotFoundLinks$outboundSchema;
  /** @deprecated use `GetWebhookEventNotFoundLinks$Outbound` instead. */
  export type Outbound = GetWebhookEventNotFoundLinks$Outbound;
}

export function getWebhookEventNotFoundLinksToJSON(
  getWebhookEventNotFoundLinks: GetWebhookEventNotFoundLinks,
): string {
  return JSON.stringify(
    GetWebhookEventNotFoundLinks$outboundSchema.parse(
      getWebhookEventNotFoundLinks,
    ),
  );
}

export function getWebhookEventNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventMode2$inboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventMode2
> = z.nativeEnum(GetWebhookEventMode2);

/** @internal */
export const GetWebhookEventMode2$outboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventMode2
> = GetWebhookEventMode2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventMode2$ {
  /** @deprecated use `GetWebhookEventMode2$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventMode2$inboundSchema;
  /** @deprecated use `GetWebhookEventMode2$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventMode2$outboundSchema;
}

/** @internal */
export const GetWebhookEventStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventStatus
> = z.nativeEnum(GetWebhookEventStatus);

/** @internal */
export const GetWebhookEventStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventStatus
> = GetWebhookEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventStatus$ {
  /** @deprecated use `GetWebhookEventStatus$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventStatus$inboundSchema;
  /** @deprecated use `GetWebhookEventStatus$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventStatus$outboundSchema;
}

/** @internal */
export const GetWebhookEventReviewStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventReviewStatus
> = z.nativeEnum(GetWebhookEventReviewStatus);

/** @internal */
export const GetWebhookEventReviewStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventReviewStatus
> = GetWebhookEventReviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventReviewStatus$ {
  /** @deprecated use `GetWebhookEventReviewStatus$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventReviewStatus$inboundSchema;
  /** @deprecated use `GetWebhookEventReviewStatus$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventReviewStatus$outboundSchema;
}

/** @internal */
export const GetWebhookEventReview$inboundSchema: z.ZodType<
  GetWebhookEventReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GetWebhookEventReviewStatus$inboundSchema.optional(),
});

/** @internal */
export type GetWebhookEventReview$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const GetWebhookEventReview$outboundSchema: z.ZodType<
  GetWebhookEventReview$Outbound,
  z.ZodTypeDef,
  GetWebhookEventReview
> = z.object({
  status: GetWebhookEventReviewStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventReview$ {
  /** @deprecated use `GetWebhookEventReview$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventReview$inboundSchema;
  /** @deprecated use `GetWebhookEventReview$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventReview$outboundSchema;
  /** @deprecated use `GetWebhookEventReview$Outbound` instead. */
  export type Outbound = GetWebhookEventReview$Outbound;
}

export function getWebhookEventReviewToJSON(
  getWebhookEventReview: GetWebhookEventReview,
): string {
  return JSON.stringify(
    GetWebhookEventReview$outboundSchema.parse(getWebhookEventReview),
  );
}

export function getWebhookEventReviewFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventReview' from JSON`,
  );
}

/** @internal */
export const EntitySelf2$inboundSchema: z.ZodType<
  EntitySelf2,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type EntitySelf2$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const EntitySelf2$outboundSchema: z.ZodType<
  EntitySelf2$Outbound,
  z.ZodTypeDef,
  EntitySelf2
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitySelf2$ {
  /** @deprecated use `EntitySelf2$inboundSchema` instead. */
  export const inboundSchema = EntitySelf2$inboundSchema;
  /** @deprecated use `EntitySelf2$outboundSchema` instead. */
  export const outboundSchema = EntitySelf2$outboundSchema;
  /** @deprecated use `EntitySelf2$Outbound` instead. */
  export type Outbound = EntitySelf2$Outbound;
}

export function entitySelf2ToJSON(entitySelf2: EntitySelf2): string {
  return JSON.stringify(EntitySelf2$outboundSchema.parse(entitySelf2));
}

export function entitySelf2FromJSON(
  jsonString: string,
): SafeParseResult<EntitySelf2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitySelf2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitySelf2' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventDashboard$inboundSchema: z.ZodType<
  GetWebhookEventDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventDashboard$outboundSchema: z.ZodType<
  GetWebhookEventDashboard$Outbound,
  z.ZodTypeDef,
  GetWebhookEventDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventDashboard$ {
  /** @deprecated use `GetWebhookEventDashboard$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventDashboard$inboundSchema;
  /** @deprecated use `GetWebhookEventDashboard$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventDashboard$outboundSchema;
  /** @deprecated use `GetWebhookEventDashboard$Outbound` instead. */
  export type Outbound = GetWebhookEventDashboard$Outbound;
}

export function getWebhookEventDashboardToJSON(
  getWebhookEventDashboard: GetWebhookEventDashboard,
): string {
  return JSON.stringify(
    GetWebhookEventDashboard$outboundSchema.parse(getWebhookEventDashboard),
  );
}

export function getWebhookEventDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventDashboard' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventChargebacks$inboundSchema: z.ZodType<
  GetWebhookEventChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventChargebacks$outboundSchema: z.ZodType<
  GetWebhookEventChargebacks$Outbound,
  z.ZodTypeDef,
  GetWebhookEventChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventChargebacks$ {
  /** @deprecated use `GetWebhookEventChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventChargebacks$inboundSchema;
  /** @deprecated use `GetWebhookEventChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventChargebacks$outboundSchema;
  /** @deprecated use `GetWebhookEventChargebacks$Outbound` instead. */
  export type Outbound = GetWebhookEventChargebacks$Outbound;
}

export function getWebhookEventChargebacksToJSON(
  getWebhookEventChargebacks: GetWebhookEventChargebacks,
): string {
  return JSON.stringify(
    GetWebhookEventChargebacks$outboundSchema.parse(getWebhookEventChargebacks),
  );
}

export function getWebhookEventChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventChargebacks' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventMethods$inboundSchema: z.ZodType<
  GetWebhookEventMethods,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventMethods$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventMethods$outboundSchema: z.ZodType<
  GetWebhookEventMethods$Outbound,
  z.ZodTypeDef,
  GetWebhookEventMethods
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventMethods$ {
  /** @deprecated use `GetWebhookEventMethods$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventMethods$inboundSchema;
  /** @deprecated use `GetWebhookEventMethods$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventMethods$outboundSchema;
  /** @deprecated use `GetWebhookEventMethods$Outbound` instead. */
  export type Outbound = GetWebhookEventMethods$Outbound;
}

export function getWebhookEventMethodsToJSON(
  getWebhookEventMethods: GetWebhookEventMethods,
): string {
  return JSON.stringify(
    GetWebhookEventMethods$outboundSchema.parse(getWebhookEventMethods),
  );
}

export function getWebhookEventMethodsFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventMethods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventMethods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventMethods' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventPayments$inboundSchema: z.ZodType<
  GetWebhookEventPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventPayments$outboundSchema: z.ZodType<
  GetWebhookEventPayments$Outbound,
  z.ZodTypeDef,
  GetWebhookEventPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventPayments$ {
  /** @deprecated use `GetWebhookEventPayments$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventPayments$inboundSchema;
  /** @deprecated use `GetWebhookEventPayments$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventPayments$outboundSchema;
  /** @deprecated use `GetWebhookEventPayments$Outbound` instead. */
  export type Outbound = GetWebhookEventPayments$Outbound;
}

export function getWebhookEventPaymentsToJSON(
  getWebhookEventPayments: GetWebhookEventPayments,
): string {
  return JSON.stringify(
    GetWebhookEventPayments$outboundSchema.parse(getWebhookEventPayments),
  );
}

export function getWebhookEventPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventPayments' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventRefunds$inboundSchema: z.ZodType<
  GetWebhookEventRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventRefunds$outboundSchema: z.ZodType<
  GetWebhookEventRefunds$Outbound,
  z.ZodTypeDef,
  GetWebhookEventRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventRefunds$ {
  /** @deprecated use `GetWebhookEventRefunds$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventRefunds$inboundSchema;
  /** @deprecated use `GetWebhookEventRefunds$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventRefunds$outboundSchema;
  /** @deprecated use `GetWebhookEventRefunds$Outbound` instead. */
  export type Outbound = GetWebhookEventRefunds$Outbound;
}

export function getWebhookEventRefundsToJSON(
  getWebhookEventRefunds: GetWebhookEventRefunds,
): string {
  return JSON.stringify(
    GetWebhookEventRefunds$outboundSchema.parse(getWebhookEventRefunds),
  );
}

export function getWebhookEventRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventRefunds' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventCheckoutPreviewUrl$inboundSchema: z.ZodType<
  GetWebhookEventCheckoutPreviewUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventCheckoutPreviewUrl$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventCheckoutPreviewUrl$outboundSchema: z.ZodType<
  GetWebhookEventCheckoutPreviewUrl$Outbound,
  z.ZodTypeDef,
  GetWebhookEventCheckoutPreviewUrl
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventCheckoutPreviewUrl$ {
  /** @deprecated use `GetWebhookEventCheckoutPreviewUrl$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventCheckoutPreviewUrl$inboundSchema;
  /** @deprecated use `GetWebhookEventCheckoutPreviewUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetWebhookEventCheckoutPreviewUrl$outboundSchema;
  /** @deprecated use `GetWebhookEventCheckoutPreviewUrl$Outbound` instead. */
  export type Outbound = GetWebhookEventCheckoutPreviewUrl$Outbound;
}

export function getWebhookEventCheckoutPreviewUrlToJSON(
  getWebhookEventCheckoutPreviewUrl: GetWebhookEventCheckoutPreviewUrl,
): string {
  return JSON.stringify(
    GetWebhookEventCheckoutPreviewUrl$outboundSchema.parse(
      getWebhookEventCheckoutPreviewUrl,
    ),
  );
}

export function getWebhookEventCheckoutPreviewUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventCheckoutPreviewUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventCheckoutPreviewUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventCheckoutPreviewUrl' from JSON`,
  );
}

/** @internal */
export const EntityDocumentation$inboundSchema: z.ZodType<
  EntityDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type EntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const EntityDocumentation$outboundSchema: z.ZodType<
  EntityDocumentation$Outbound,
  z.ZodTypeDef,
  EntityDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityDocumentation$ {
  /** @deprecated use `EntityDocumentation$inboundSchema` instead. */
  export const inboundSchema = EntityDocumentation$inboundSchema;
  /** @deprecated use `EntityDocumentation$outboundSchema` instead. */
  export const outboundSchema = EntityDocumentation$outboundSchema;
  /** @deprecated use `EntityDocumentation$Outbound` instead. */
  export type Outbound = EntityDocumentation$Outbound;
}

export function entityDocumentationToJSON(
  entityDocumentation: EntityDocumentation,
): string {
  return JSON.stringify(
    EntityDocumentation$outboundSchema.parse(entityDocumentation),
  );
}

export function entityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<EntityDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityDocumentation' from JSON`,
  );
}

/** @internal */
export const EntityLinks2$inboundSchema: z.ZodType<
  EntityLinks2,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => EntitySelf2$inboundSchema).optional(),
  dashboard: z.lazy(() => GetWebhookEventDashboard$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetWebhookEventChargebacks$inboundSchema)
    .optional(),
  methods: z.lazy(() => GetWebhookEventMethods$inboundSchema).optional(),
  payments: z.lazy(() => GetWebhookEventPayments$inboundSchema).optional(),
  refunds: z.lazy(() => GetWebhookEventRefunds$inboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() =>
    GetWebhookEventCheckoutPreviewUrl$inboundSchema
  ).optional(),
  documentation: z.lazy(() => EntityDocumentation$inboundSchema).optional(),
});

/** @internal */
export type EntityLinks2$Outbound = {
  self?: EntitySelf2$Outbound | undefined;
  dashboard?: GetWebhookEventDashboard$Outbound | undefined;
  chargebacks?: GetWebhookEventChargebacks$Outbound | undefined;
  methods?: GetWebhookEventMethods$Outbound | undefined;
  payments?: GetWebhookEventPayments$Outbound | undefined;
  refunds?: GetWebhookEventRefunds$Outbound | undefined;
  checkoutPreviewUrl?: GetWebhookEventCheckoutPreviewUrl$Outbound | undefined;
  documentation?: EntityDocumentation$Outbound | undefined;
};

/** @internal */
export const EntityLinks2$outboundSchema: z.ZodType<
  EntityLinks2$Outbound,
  z.ZodTypeDef,
  EntityLinks2
> = z.object({
  self: z.lazy(() => EntitySelf2$outboundSchema).optional(),
  dashboard: z.lazy(() => GetWebhookEventDashboard$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetWebhookEventChargebacks$outboundSchema)
    .optional(),
  methods: z.lazy(() => GetWebhookEventMethods$outboundSchema).optional(),
  payments: z.lazy(() => GetWebhookEventPayments$outboundSchema).optional(),
  refunds: z.lazy(() => GetWebhookEventRefunds$outboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() =>
    GetWebhookEventCheckoutPreviewUrl$outboundSchema
  ).optional(),
  documentation: z.lazy(() => EntityDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityLinks2$ {
  /** @deprecated use `EntityLinks2$inboundSchema` instead. */
  export const inboundSchema = EntityLinks2$inboundSchema;
  /** @deprecated use `EntityLinks2$outboundSchema` instead. */
  export const outboundSchema = EntityLinks2$outboundSchema;
  /** @deprecated use `EntityLinks2$Outbound` instead. */
  export type Outbound = EntityLinks2$Outbound;
}

export function entityLinks2ToJSON(entityLinks2: EntityLinks2): string {
  return JSON.stringify(EntityLinks2$outboundSchema.parse(entityLinks2));
}

export function entityLinks2FromJSON(
  jsonString: string,
): SafeParseResult<EntityLinks2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityLinks2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityLinks2' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventProfile$inboundSchema: z.ZodType<
  GetWebhookEventProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: GetWebhookEventMode2$inboundSchema.optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: GetWebhookEventStatus$inboundSchema.optional(),
  review: z.lazy(() => GetWebhookEventReview$inboundSchema).optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => EntityLinks2$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetWebhookEventProfile$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | undefined;
  countriesOfActivity?: Array<string> | undefined;
  businessCategory?: string | undefined;
  status?: string | undefined;
  review?: GetWebhookEventReview$Outbound | undefined;
  createdAt?: string | undefined;
  _links?: EntityLinks2$Outbound | undefined;
};

/** @internal */
export const GetWebhookEventProfile$outboundSchema: z.ZodType<
  GetWebhookEventProfile$Outbound,
  z.ZodTypeDef,
  GetWebhookEventProfile
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: GetWebhookEventMode2$outboundSchema.optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: GetWebhookEventStatus$outboundSchema.optional(),
  review: z.lazy(() => GetWebhookEventReview$outboundSchema).optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => EntityLinks2$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventProfile$ {
  /** @deprecated use `GetWebhookEventProfile$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventProfile$inboundSchema;
  /** @deprecated use `GetWebhookEventProfile$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventProfile$outboundSchema;
  /** @deprecated use `GetWebhookEventProfile$Outbound` instead. */
  export type Outbound = GetWebhookEventProfile$Outbound;
}

export function getWebhookEventProfileToJSON(
  getWebhookEventProfile: GetWebhookEventProfile,
): string {
  return JSON.stringify(
    GetWebhookEventProfile$outboundSchema.parse(getWebhookEventProfile),
  );
}

export function getWebhookEventProfileFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventProfile' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventMode1$inboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventMode1
> = z.nativeEnum(GetWebhookEventMode1);

/** @internal */
export const GetWebhookEventMode1$outboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventMode1
> = GetWebhookEventMode1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventMode1$ {
  /** @deprecated use `GetWebhookEventMode1$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventMode1$inboundSchema;
  /** @deprecated use `GetWebhookEventMode1$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventMode1$outboundSchema;
}

/** @internal */
export const GetWebhookEventAmount$inboundSchema: z.ZodType<
  GetWebhookEventAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetWebhookEventAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetWebhookEventAmount$outboundSchema: z.ZodType<
  GetWebhookEventAmount$Outbound,
  z.ZodTypeDef,
  GetWebhookEventAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventAmount$ {
  /** @deprecated use `GetWebhookEventAmount$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventAmount$inboundSchema;
  /** @deprecated use `GetWebhookEventAmount$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventAmount$outboundSchema;
  /** @deprecated use `GetWebhookEventAmount$Outbound` instead. */
  export type Outbound = GetWebhookEventAmount$Outbound;
}

export function getWebhookEventAmountToJSON(
  getWebhookEventAmount: GetWebhookEventAmount,
): string {
  return JSON.stringify(
    GetWebhookEventAmount$outboundSchema.parse(getWebhookEventAmount),
  );
}

export function getWebhookEventAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventAmount' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventMinimumAmount$inboundSchema: z.ZodType<
  GetWebhookEventMinimumAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetWebhookEventMinimumAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetWebhookEventMinimumAmount$outboundSchema: z.ZodType<
  GetWebhookEventMinimumAmount$Outbound,
  z.ZodTypeDef,
  GetWebhookEventMinimumAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventMinimumAmount$ {
  /** @deprecated use `GetWebhookEventMinimumAmount$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventMinimumAmount$inboundSchema;
  /** @deprecated use `GetWebhookEventMinimumAmount$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventMinimumAmount$outboundSchema;
  /** @deprecated use `GetWebhookEventMinimumAmount$Outbound` instead. */
  export type Outbound = GetWebhookEventMinimumAmount$Outbound;
}

export function getWebhookEventMinimumAmountToJSON(
  getWebhookEventMinimumAmount: GetWebhookEventMinimumAmount,
): string {
  return JSON.stringify(
    GetWebhookEventMinimumAmount$outboundSchema.parse(
      getWebhookEventMinimumAmount,
    ),
  );
}

export function getWebhookEventMinimumAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventMinimumAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventMinimumAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventMinimumAmount' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventType$inboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventType
> = z.nativeEnum(GetWebhookEventType);

/** @internal */
export const GetWebhookEventType$outboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventType
> = GetWebhookEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventType$ {
  /** @deprecated use `GetWebhookEventType$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventType$inboundSchema;
  /** @deprecated use `GetWebhookEventType$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventType$outboundSchema;
}

/** @internal */
export const GetWebhookEventUnitPrice$inboundSchema: z.ZodType<
  GetWebhookEventUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetWebhookEventUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetWebhookEventUnitPrice$outboundSchema: z.ZodType<
  GetWebhookEventUnitPrice$Outbound,
  z.ZodTypeDef,
  GetWebhookEventUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventUnitPrice$ {
  /** @deprecated use `GetWebhookEventUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventUnitPrice$inboundSchema;
  /** @deprecated use `GetWebhookEventUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventUnitPrice$outboundSchema;
  /** @deprecated use `GetWebhookEventUnitPrice$Outbound` instead. */
  export type Outbound = GetWebhookEventUnitPrice$Outbound;
}

export function getWebhookEventUnitPriceToJSON(
  getWebhookEventUnitPrice: GetWebhookEventUnitPrice,
): string {
  return JSON.stringify(
    GetWebhookEventUnitPrice$outboundSchema.parse(getWebhookEventUnitPrice),
  );
}

export function getWebhookEventUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventDiscountAmount$inboundSchema: z.ZodType<
  GetWebhookEventDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetWebhookEventDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetWebhookEventDiscountAmount$outboundSchema: z.ZodType<
  GetWebhookEventDiscountAmount$Outbound,
  z.ZodTypeDef,
  GetWebhookEventDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventDiscountAmount$ {
  /** @deprecated use `GetWebhookEventDiscountAmount$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventDiscountAmount$inboundSchema;
  /** @deprecated use `GetWebhookEventDiscountAmount$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventDiscountAmount$outboundSchema;
  /** @deprecated use `GetWebhookEventDiscountAmount$Outbound` instead. */
  export type Outbound = GetWebhookEventDiscountAmount$Outbound;
}

export function getWebhookEventDiscountAmountToJSON(
  getWebhookEventDiscountAmount: GetWebhookEventDiscountAmount,
): string {
  return JSON.stringify(
    GetWebhookEventDiscountAmount$outboundSchema.parse(
      getWebhookEventDiscountAmount,
    ),
  );
}

export function getWebhookEventDiscountAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventDiscountAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventDiscountAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventDiscountAmount' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventTotalAmount$inboundSchema: z.ZodType<
  GetWebhookEventTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetWebhookEventTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetWebhookEventTotalAmount$outboundSchema: z.ZodType<
  GetWebhookEventTotalAmount$Outbound,
  z.ZodTypeDef,
  GetWebhookEventTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventTotalAmount$ {
  /** @deprecated use `GetWebhookEventTotalAmount$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventTotalAmount$inboundSchema;
  /** @deprecated use `GetWebhookEventTotalAmount$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventTotalAmount$outboundSchema;
  /** @deprecated use `GetWebhookEventTotalAmount$Outbound` instead. */
  export type Outbound = GetWebhookEventTotalAmount$Outbound;
}

export function getWebhookEventTotalAmountToJSON(
  getWebhookEventTotalAmount: GetWebhookEventTotalAmount,
): string {
  return JSON.stringify(
    GetWebhookEventTotalAmount$outboundSchema.parse(getWebhookEventTotalAmount),
  );
}

export function getWebhookEventTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventTotalAmount' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventVatAmount$inboundSchema: z.ZodType<
  GetWebhookEventVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetWebhookEventVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetWebhookEventVatAmount$outboundSchema: z.ZodType<
  GetWebhookEventVatAmount$Outbound,
  z.ZodTypeDef,
  GetWebhookEventVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventVatAmount$ {
  /** @deprecated use `GetWebhookEventVatAmount$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventVatAmount$inboundSchema;
  /** @deprecated use `GetWebhookEventVatAmount$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventVatAmount$outboundSchema;
  /** @deprecated use `GetWebhookEventVatAmount$Outbound` instead. */
  export type Outbound = GetWebhookEventVatAmount$Outbound;
}

export function getWebhookEventVatAmountToJSON(
  getWebhookEventVatAmount: GetWebhookEventVatAmount,
): string {
  return JSON.stringify(
    GetWebhookEventVatAmount$outboundSchema.parse(getWebhookEventVatAmount),
  );
}

export function getWebhookEventVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventVatAmount' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventCategory$inboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventCategory
> = z.nativeEnum(GetWebhookEventCategory);

/** @internal */
export const GetWebhookEventCategory$outboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventCategory
> = GetWebhookEventCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventCategory$ {
  /** @deprecated use `GetWebhookEventCategory$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventCategory$inboundSchema;
  /** @deprecated use `GetWebhookEventCategory$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventCategory$outboundSchema;
}

/** @internal */
export const GetWebhookEventLine$inboundSchema: z.ZodType<
  GetWebhookEventLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetWebhookEventType$inboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetWebhookEventUnitPrice$inboundSchema),
  discountAmount: z.lazy(() => GetWebhookEventDiscountAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetWebhookEventTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetWebhookEventVatAmount$inboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(GetWebhookEventCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/** @internal */
export type GetWebhookEventLine$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: GetWebhookEventUnitPrice$Outbound;
  discountAmount?: GetWebhookEventDiscountAmount$Outbound | undefined;
  totalAmount: GetWebhookEventTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: GetWebhookEventVatAmount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
};

/** @internal */
export const GetWebhookEventLine$outboundSchema: z.ZodType<
  GetWebhookEventLine$Outbound,
  z.ZodTypeDef,
  GetWebhookEventLine
> = z.object({
  type: GetWebhookEventType$outboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetWebhookEventUnitPrice$outboundSchema),
  discountAmount: z.lazy(() => GetWebhookEventDiscountAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetWebhookEventTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetWebhookEventVatAmount$outboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(GetWebhookEventCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventLine$ {
  /** @deprecated use `GetWebhookEventLine$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventLine$inboundSchema;
  /** @deprecated use `GetWebhookEventLine$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventLine$outboundSchema;
  /** @deprecated use `GetWebhookEventLine$Outbound` instead. */
  export type Outbound = GetWebhookEventLine$Outbound;
}

export function getWebhookEventLineToJSON(
  getWebhookEventLine: GetWebhookEventLine,
): string {
  return JSON.stringify(
    GetWebhookEventLine$outboundSchema.parse(getWebhookEventLine),
  );
}

export function getWebhookEventLineFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventLine' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventBillingAddress$inboundSchema: z.ZodType<
  GetWebhookEventBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetWebhookEventBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetWebhookEventBillingAddress$outboundSchema: z.ZodType<
  GetWebhookEventBillingAddress$Outbound,
  z.ZodTypeDef,
  GetWebhookEventBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventBillingAddress$ {
  /** @deprecated use `GetWebhookEventBillingAddress$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventBillingAddress$inboundSchema;
  /** @deprecated use `GetWebhookEventBillingAddress$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventBillingAddress$outboundSchema;
  /** @deprecated use `GetWebhookEventBillingAddress$Outbound` instead. */
  export type Outbound = GetWebhookEventBillingAddress$Outbound;
}

export function getWebhookEventBillingAddressToJSON(
  getWebhookEventBillingAddress: GetWebhookEventBillingAddress,
): string {
  return JSON.stringify(
    GetWebhookEventBillingAddress$outboundSchema.parse(
      getWebhookEventBillingAddress,
    ),
  );
}

export function getWebhookEventBillingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventBillingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventBillingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventBillingAddress' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventShippingAddress$inboundSchema: z.ZodType<
  GetWebhookEventShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetWebhookEventShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetWebhookEventShippingAddress$outboundSchema: z.ZodType<
  GetWebhookEventShippingAddress$Outbound,
  z.ZodTypeDef,
  GetWebhookEventShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventShippingAddress$ {
  /** @deprecated use `GetWebhookEventShippingAddress$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventShippingAddress$inboundSchema;
  /** @deprecated use `GetWebhookEventShippingAddress$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventShippingAddress$outboundSchema;
  /** @deprecated use `GetWebhookEventShippingAddress$Outbound` instead. */
  export type Outbound = GetWebhookEventShippingAddress$Outbound;
}

export function getWebhookEventShippingAddressToJSON(
  getWebhookEventShippingAddress: GetWebhookEventShippingAddress,
): string {
  return JSON.stringify(
    GetWebhookEventShippingAddress$outboundSchema.parse(
      getWebhookEventShippingAddress,
    ),
  );
}

export function getWebhookEventShippingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventShippingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventShippingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventShippingAddress' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventApplicationFeeAmount$inboundSchema: z.ZodType<
  GetWebhookEventApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetWebhookEventApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetWebhookEventApplicationFeeAmount$outboundSchema: z.ZodType<
  GetWebhookEventApplicationFeeAmount$Outbound,
  z.ZodTypeDef,
  GetWebhookEventApplicationFeeAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventApplicationFeeAmount$ {
  /** @deprecated use `GetWebhookEventApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetWebhookEventApplicationFeeAmount$inboundSchema;
  /** @deprecated use `GetWebhookEventApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetWebhookEventApplicationFeeAmount$outboundSchema;
  /** @deprecated use `GetWebhookEventApplicationFeeAmount$Outbound` instead. */
  export type Outbound = GetWebhookEventApplicationFeeAmount$Outbound;
}

export function getWebhookEventApplicationFeeAmountToJSON(
  getWebhookEventApplicationFeeAmount: GetWebhookEventApplicationFeeAmount,
): string {
  return JSON.stringify(
    GetWebhookEventApplicationFeeAmount$outboundSchema.parse(
      getWebhookEventApplicationFeeAmount,
    ),
  );
}

export function getWebhookEventApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventApplicationFeeAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetWebhookEventApplicationFeeAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventApplicationFee$inboundSchema: z.ZodType<
  GetWebhookEventApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetWebhookEventApplicationFeeAmount$inboundSchema),
  description: z.string(),
});

/** @internal */
export type GetWebhookEventApplicationFee$Outbound = {
  amount: GetWebhookEventApplicationFeeAmount$Outbound;
  description: string;
};

/** @internal */
export const GetWebhookEventApplicationFee$outboundSchema: z.ZodType<
  GetWebhookEventApplicationFee$Outbound,
  z.ZodTypeDef,
  GetWebhookEventApplicationFee
> = z.object({
  amount: z.lazy(() => GetWebhookEventApplicationFeeAmount$outboundSchema),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventApplicationFee$ {
  /** @deprecated use `GetWebhookEventApplicationFee$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventApplicationFee$inboundSchema;
  /** @deprecated use `GetWebhookEventApplicationFee$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventApplicationFee$outboundSchema;
  /** @deprecated use `GetWebhookEventApplicationFee$Outbound` instead. */
  export type Outbound = GetWebhookEventApplicationFee$Outbound;
}

export function getWebhookEventApplicationFeeToJSON(
  getWebhookEventApplicationFee: GetWebhookEventApplicationFee,
): string {
  return JSON.stringify(
    GetWebhookEventApplicationFee$outboundSchema.parse(
      getWebhookEventApplicationFee,
    ),
  );
}

export function getWebhookEventApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventApplicationFee' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventSequenceType$inboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventSequenceType
> = z.nativeEnum(GetWebhookEventSequenceType);

/** @internal */
export const GetWebhookEventSequenceType$outboundSchema: z.ZodNativeEnum<
  typeof GetWebhookEventSequenceType
> = GetWebhookEventSequenceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventSequenceType$ {
  /** @deprecated use `GetWebhookEventSequenceType$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventSequenceType$inboundSchema;
  /** @deprecated use `GetWebhookEventSequenceType$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventSequenceType$outboundSchema;
}

/** @internal */
export const EntitySelf1$inboundSchema: z.ZodType<
  EntitySelf1,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type EntitySelf1$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const EntitySelf1$outboundSchema: z.ZodType<
  EntitySelf1$Outbound,
  z.ZodTypeDef,
  EntitySelf1
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntitySelf1$ {
  /** @deprecated use `EntitySelf1$inboundSchema` instead. */
  export const inboundSchema = EntitySelf1$inboundSchema;
  /** @deprecated use `EntitySelf1$outboundSchema` instead. */
  export const outboundSchema = EntitySelf1$outboundSchema;
  /** @deprecated use `EntitySelf1$Outbound` instead. */
  export type Outbound = EntitySelf1$Outbound;
}

export function entitySelf1ToJSON(entitySelf1: EntitySelf1): string {
  return JSON.stringify(EntitySelf1$outboundSchema.parse(entitySelf1));
}

export function entitySelf1FromJSON(
  jsonString: string,
): SafeParseResult<EntitySelf1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntitySelf1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntitySelf1' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventLinksPaymentLink$inboundSchema: z.ZodType<
  GetWebhookEventLinksPaymentLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventLinksPaymentLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventLinksPaymentLink$outboundSchema: z.ZodType<
  GetWebhookEventLinksPaymentLink$Outbound,
  z.ZodTypeDef,
  GetWebhookEventLinksPaymentLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventLinksPaymentLink$ {
  /** @deprecated use `GetWebhookEventLinksPaymentLink$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventLinksPaymentLink$inboundSchema;
  /** @deprecated use `GetWebhookEventLinksPaymentLink$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventLinksPaymentLink$outboundSchema;
  /** @deprecated use `GetWebhookEventLinksPaymentLink$Outbound` instead. */
  export type Outbound = GetWebhookEventLinksPaymentLink$Outbound;
}

export function getWebhookEventLinksPaymentLinkToJSON(
  getWebhookEventLinksPaymentLink: GetWebhookEventLinksPaymentLink,
): string {
  return JSON.stringify(
    GetWebhookEventLinksPaymentLink$outboundSchema.parse(
      getWebhookEventLinksPaymentLink,
    ),
  );
}

export function getWebhookEventLinksPaymentLinkFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventLinksPaymentLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventLinksPaymentLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventLinksPaymentLink' from JSON`,
  );
}

/** @internal */
export const EntityLinks1$inboundSchema: z.ZodType<
  EntityLinks1,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => EntitySelf1$inboundSchema),
  paymentLink: z.lazy(() => GetWebhookEventLinksPaymentLink$inboundSchema),
});

/** @internal */
export type EntityLinks1$Outbound = {
  self: EntitySelf1$Outbound;
  paymentLink: GetWebhookEventLinksPaymentLink$Outbound;
};

/** @internal */
export const EntityLinks1$outboundSchema: z.ZodType<
  EntityLinks1$Outbound,
  z.ZodTypeDef,
  EntityLinks1
> = z.object({
  self: z.lazy(() => EntitySelf1$outboundSchema),
  paymentLink: z.lazy(() => GetWebhookEventLinksPaymentLink$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityLinks1$ {
  /** @deprecated use `EntityLinks1$inboundSchema` instead. */
  export const inboundSchema = EntityLinks1$inboundSchema;
  /** @deprecated use `EntityLinks1$outboundSchema` instead. */
  export const outboundSchema = EntityLinks1$outboundSchema;
  /** @deprecated use `EntityLinks1$Outbound` instead. */
  export type Outbound = EntityLinks1$Outbound;
}

export function entityLinks1ToJSON(entityLinks1: EntityLinks1): string {
  return JSON.stringify(EntityLinks1$outboundSchema.parse(entityLinks1));
}

export function entityLinks1FromJSON(
  jsonString: string,
): SafeParseResult<EntityLinks1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityLinks1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityLinks1' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventPaymentLinkOutput$inboundSchema: z.ZodType<
  GetWebhookEventPaymentLinkOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetWebhookEventMode1$inboundSchema,
  description: z.string(),
  amount: z.nullable(z.lazy(() => GetWebhookEventAmount$inboundSchema)),
  minimumAmount: z.nullable(
    z.lazy(() => GetWebhookEventMinimumAmount$inboundSchema),
  ).optional(),
  archived: z.boolean(),
  redirectUrl: z.nullable(z.string()),
  webhookUrl: z.nullable(z.string()),
  lines: z.nullable(z.array(z.lazy(() => GetWebhookEventLine$inboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => GetWebhookEventBillingAddress$inboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => GetWebhookEventShippingAddress$inboundSchema)
    .optional(),
  profileId: z.nullable(z.string()),
  reusable: z.nullable(z.boolean()),
  createdAt: z.string(),
  paidAt: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  allowedMethods: z.nullable(z.array(z.string())),
  applicationFee: z.lazy(() => GetWebhookEventApplicationFee$inboundSchema)
    .optional(),
  sequenceType: z.nullable(GetWebhookEventSequenceType$inboundSchema)
    .optional(),
  customerId: z.nullable(z.string()).optional(),
  _links: z.lazy(() => EntityLinks1$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetWebhookEventPaymentLinkOutput$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: GetWebhookEventAmount$Outbound | null;
  minimumAmount?: GetWebhookEventMinimumAmount$Outbound | null | undefined;
  archived: boolean;
  redirectUrl: string | null;
  webhookUrl: string | null;
  lines?: Array<GetWebhookEventLine$Outbound> | null | undefined;
  billingAddress?: GetWebhookEventBillingAddress$Outbound | undefined;
  shippingAddress?: GetWebhookEventShippingAddress$Outbound | undefined;
  profileId: string | null;
  reusable: boolean | null;
  createdAt: string;
  paidAt: string | null;
  expiresAt: string | null;
  allowedMethods: Array<string> | null;
  applicationFee?: GetWebhookEventApplicationFee$Outbound | undefined;
  sequenceType?: string | null | undefined;
  customerId?: string | null | undefined;
  _links: EntityLinks1$Outbound;
};

/** @internal */
export const GetWebhookEventPaymentLinkOutput$outboundSchema: z.ZodType<
  GetWebhookEventPaymentLinkOutput$Outbound,
  z.ZodTypeDef,
  GetWebhookEventPaymentLinkOutput
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetWebhookEventMode1$outboundSchema,
  description: z.string(),
  amount: z.nullable(z.lazy(() => GetWebhookEventAmount$outboundSchema)),
  minimumAmount: z.nullable(
    z.lazy(() => GetWebhookEventMinimumAmount$outboundSchema),
  ).optional(),
  archived: z.boolean(),
  redirectUrl: z.nullable(z.string()),
  webhookUrl: z.nullable(z.string()),
  lines: z.nullable(z.array(z.lazy(() => GetWebhookEventLine$outboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => GetWebhookEventBillingAddress$outboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => GetWebhookEventShippingAddress$outboundSchema)
    .optional(),
  profileId: z.nullable(z.string()),
  reusable: z.nullable(z.boolean()),
  createdAt: z.string(),
  paidAt: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  allowedMethods: z.nullable(z.array(z.string())),
  applicationFee: z.lazy(() => GetWebhookEventApplicationFee$outboundSchema)
    .optional(),
  sequenceType: z.nullable(GetWebhookEventSequenceType$outboundSchema)
    .optional(),
  customerId: z.nullable(z.string()).optional(),
  links: z.lazy(() => EntityLinks1$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventPaymentLinkOutput$ {
  /** @deprecated use `GetWebhookEventPaymentLinkOutput$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventPaymentLinkOutput$inboundSchema;
  /** @deprecated use `GetWebhookEventPaymentLinkOutput$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventPaymentLinkOutput$outboundSchema;
  /** @deprecated use `GetWebhookEventPaymentLinkOutput$Outbound` instead. */
  export type Outbound = GetWebhookEventPaymentLinkOutput$Outbound;
}

export function getWebhookEventPaymentLinkOutputToJSON(
  getWebhookEventPaymentLinkOutput: GetWebhookEventPaymentLinkOutput,
): string {
  return JSON.stringify(
    GetWebhookEventPaymentLinkOutput$outboundSchema.parse(
      getWebhookEventPaymentLinkOutput,
    ),
  );
}

export function getWebhookEventPaymentLinkOutputFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventPaymentLinkOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventPaymentLinkOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventPaymentLinkOutput' from JSON`,
  );
}

/** @internal */
export const Entity$inboundSchema: z.ZodType<Entity, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => GetWebhookEventPaymentLinkOutput$inboundSchema),
    z.lazy(() => GetWebhookEventProfile$inboundSchema),
  ]);

/** @internal */
export type Entity$Outbound =
  | GetWebhookEventPaymentLinkOutput$Outbound
  | GetWebhookEventProfile$Outbound;

/** @internal */
export const Entity$outboundSchema: z.ZodType<
  Entity$Outbound,
  z.ZodTypeDef,
  Entity
> = z.union([
  z.lazy(() => GetWebhookEventPaymentLinkOutput$outboundSchema),
  z.lazy(() => GetWebhookEventProfile$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Entity$ {
  /** @deprecated use `Entity$inboundSchema` instead. */
  export const inboundSchema = Entity$inboundSchema;
  /** @deprecated use `Entity$outboundSchema` instead. */
  export const outboundSchema = Entity$outboundSchema;
  /** @deprecated use `Entity$Outbound` instead. */
  export type Outbound = Entity$Outbound;
}

export function entityToJSON(entity: Entity): string {
  return JSON.stringify(Entity$outboundSchema.parse(entity));
}

export function entityFromJSON(
  jsonString: string,
): SafeParseResult<Entity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Entity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Entity' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventEmbedded$inboundSchema: z.ZodType<
  GetWebhookEventEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  entity: z.union([
    z.lazy(() => GetWebhookEventPaymentLinkOutput$inboundSchema),
    z.lazy(() => GetWebhookEventProfile$inboundSchema),
  ]).optional(),
});

/** @internal */
export type GetWebhookEventEmbedded$Outbound = {
  entity?:
    | GetWebhookEventPaymentLinkOutput$Outbound
    | GetWebhookEventProfile$Outbound
    | undefined;
};

/** @internal */
export const GetWebhookEventEmbedded$outboundSchema: z.ZodType<
  GetWebhookEventEmbedded$Outbound,
  z.ZodTypeDef,
  GetWebhookEventEmbedded
> = z.object({
  entity: z.union([
    z.lazy(() => GetWebhookEventPaymentLinkOutput$outboundSchema),
    z.lazy(() => GetWebhookEventProfile$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventEmbedded$ {
  /** @deprecated use `GetWebhookEventEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventEmbedded$inboundSchema;
  /** @deprecated use `GetWebhookEventEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventEmbedded$outboundSchema;
  /** @deprecated use `GetWebhookEventEmbedded$Outbound` instead. */
  export type Outbound = GetWebhookEventEmbedded$Outbound;
}

export function getWebhookEventEmbeddedToJSON(
  getWebhookEventEmbedded: GetWebhookEventEmbedded,
): string {
  return JSON.stringify(
    GetWebhookEventEmbedded$outboundSchema.parse(getWebhookEventEmbedded),
  );
}

export function getWebhookEventEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventEmbedded' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventSelf$inboundSchema: z.ZodType<
  GetWebhookEventSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventSelf$outboundSchema: z.ZodType<
  GetWebhookEventSelf$Outbound,
  z.ZodTypeDef,
  GetWebhookEventSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventSelf$ {
  /** @deprecated use `GetWebhookEventSelf$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventSelf$inboundSchema;
  /** @deprecated use `GetWebhookEventSelf$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventSelf$outboundSchema;
  /** @deprecated use `GetWebhookEventSelf$Outbound` instead. */
  export type Outbound = GetWebhookEventSelf$Outbound;
}

export function getWebhookEventSelfToJSON(
  getWebhookEventSelf: GetWebhookEventSelf,
): string {
  return JSON.stringify(
    GetWebhookEventSelf$outboundSchema.parse(getWebhookEventSelf),
  );
}

export function getWebhookEventSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventSelf' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventDocumentation$inboundSchema: z.ZodType<
  GetWebhookEventDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookEventDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookEventDocumentation$outboundSchema: z.ZodType<
  GetWebhookEventDocumentation$Outbound,
  z.ZodTypeDef,
  GetWebhookEventDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventDocumentation$ {
  /** @deprecated use `GetWebhookEventDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventDocumentation$inboundSchema;
  /** @deprecated use `GetWebhookEventDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventDocumentation$outboundSchema;
  /** @deprecated use `GetWebhookEventDocumentation$Outbound` instead. */
  export type Outbound = GetWebhookEventDocumentation$Outbound;
}

export function getWebhookEventDocumentationToJSON(
  getWebhookEventDocumentation: GetWebhookEventDocumentation,
): string {
  return JSON.stringify(
    GetWebhookEventDocumentation$outboundSchema.parse(
      getWebhookEventDocumentation,
    ),
  );
}

export function getWebhookEventDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventDocumentation' from JSON`,
  );
}

/** @internal */
export const LinksEntity$inboundSchema: z.ZodType<
  LinksEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type LinksEntity$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const LinksEntity$outboundSchema: z.ZodType<
  LinksEntity$Outbound,
  z.ZodTypeDef,
  LinksEntity
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinksEntity$ {
  /** @deprecated use `LinksEntity$inboundSchema` instead. */
  export const inboundSchema = LinksEntity$inboundSchema;
  /** @deprecated use `LinksEntity$outboundSchema` instead. */
  export const outboundSchema = LinksEntity$outboundSchema;
  /** @deprecated use `LinksEntity$Outbound` instead. */
  export type Outbound = LinksEntity$Outbound;
}

export function linksEntityToJSON(linksEntity: LinksEntity): string {
  return JSON.stringify(LinksEntity$outboundSchema.parse(linksEntity));
}

export function linksEntityFromJSON(
  jsonString: string,
): SafeParseResult<LinksEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinksEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinksEntity' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventLinks$inboundSchema: z.ZodType<
  GetWebhookEventLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetWebhookEventSelf$inboundSchema).optional(),
  documentation: z.lazy(() => GetWebhookEventDocumentation$inboundSchema)
    .optional(),
  entity: z.lazy(() => LinksEntity$inboundSchema).optional(),
});

/** @internal */
export type GetWebhookEventLinks$Outbound = {
  self?: GetWebhookEventSelf$Outbound | undefined;
  documentation?: GetWebhookEventDocumentation$Outbound | undefined;
  entity?: LinksEntity$Outbound | undefined;
};

/** @internal */
export const GetWebhookEventLinks$outboundSchema: z.ZodType<
  GetWebhookEventLinks$Outbound,
  z.ZodTypeDef,
  GetWebhookEventLinks
> = z.object({
  self: z.lazy(() => GetWebhookEventSelf$outboundSchema).optional(),
  documentation: z.lazy(() => GetWebhookEventDocumentation$outboundSchema)
    .optional(),
  entity: z.lazy(() => LinksEntity$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventLinks$ {
  /** @deprecated use `GetWebhookEventLinks$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventLinks$inboundSchema;
  /** @deprecated use `GetWebhookEventLinks$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventLinks$outboundSchema;
  /** @deprecated use `GetWebhookEventLinks$Outbound` instead. */
  export type Outbound = GetWebhookEventLinks$Outbound;
}

export function getWebhookEventLinksToJSON(
  getWebhookEventLinks: GetWebhookEventLinks,
): string {
  return JSON.stringify(
    GetWebhookEventLinks$outboundSchema.parse(getWebhookEventLinks),
  );
}

export function getWebhookEventLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventLinks' from JSON`,
  );
}

/** @internal */
export const GetWebhookEventResponse$inboundSchema: z.ZodType<
  GetWebhookEventResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  type: z.string().optional(),
  entityId: z.string().optional(),
  createdAt: z.string().optional(),
  _embedded: z.nullable(z.lazy(() => GetWebhookEventEmbedded$inboundSchema))
    .optional(),
  _links: z.lazy(() => GetWebhookEventLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type GetWebhookEventResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  type?: string | undefined;
  entityId?: string | undefined;
  createdAt?: string | undefined;
  _embedded?: GetWebhookEventEmbedded$Outbound | null | undefined;
  _links?: GetWebhookEventLinks$Outbound | undefined;
};

/** @internal */
export const GetWebhookEventResponse$outboundSchema: z.ZodType<
  GetWebhookEventResponse$Outbound,
  z.ZodTypeDef,
  GetWebhookEventResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  type: z.string().optional(),
  entityId: z.string().optional(),
  createdAt: z.string().optional(),
  embedded: z.nullable(z.lazy(() => GetWebhookEventEmbedded$outboundSchema))
    .optional(),
  links: z.lazy(() => GetWebhookEventLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookEventResponse$ {
  /** @deprecated use `GetWebhookEventResponse$inboundSchema` instead. */
  export const inboundSchema = GetWebhookEventResponse$inboundSchema;
  /** @deprecated use `GetWebhookEventResponse$outboundSchema` instead. */
  export const outboundSchema = GetWebhookEventResponse$outboundSchema;
  /** @deprecated use `GetWebhookEventResponse$Outbound` instead. */
  export type Outbound = GetWebhookEventResponse$Outbound;
}

export function getWebhookEventResponseToJSON(
  getWebhookEventResponse: GetWebhookEventResponse,
): string {
  return JSON.stringify(
    GetWebhookEventResponse$outboundSchema.parse(getWebhookEventResponse),
  );
}

export function getWebhookEventResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookEventResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookEventResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookEventResponse' from JSON`,
  );
}
