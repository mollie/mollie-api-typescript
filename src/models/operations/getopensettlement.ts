/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the settlement.
 */
export const GetOpenSettlementStatus = {
  Open: "open",
  Pending: "pending",
  Paidout: "paidout",
  Failed: "failed",
} as const;
/**
 * The status of the settlement.
 */
export type GetOpenSettlementStatus = ClosedEnum<
  typeof GetOpenSettlementStatus
>;

/**
 * The total amount of the settlement.
 */
export type GetOpenSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetOpenSettlementSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) included in this settlement.
 */
export type GetOpenSettlementPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-captures) included in this settlement.
 */
export type GetOpenSettlementCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
 */
export type GetOpenSettlementRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
 */
export type GetOpenSettlementChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [invoice](list-invoices).
 */
export type GetOpenSettlementInvoice = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetOpenSettlementDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetOpenSettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetOpenSettlementSelf | undefined;
  /**
   * The API resource URL of the [payments](list-payments) included in this settlement.
   */
  payments?: GetOpenSettlementPayments | undefined;
  /**
   * The API resource URL of the [captures](list-captures) included in this settlement.
   */
  captures?: GetOpenSettlementCaptures | undefined;
  /**
   * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
   */
  refunds?: GetOpenSettlementRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
   */
  chargebacks?: GetOpenSettlementChargebacks | undefined;
  /**
   * The API resource URL of the [invoice](list-invoices).
   */
  invoice?: GetOpenSettlementInvoice | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetOpenSettlementDocumentation | undefined;
};

/**
 * A settlement object describing your current balance. For a complete reference of the settlement object, refer to
 *
 * @remarks
 * the [Get settlement](get-settlement) endpoint documentation.
 */
export type GetOpenSettlementResponse = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this settlement.
   */
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: GetOpenSettlementStatus | undefined;
  /**
   * The total amount of the settlement.
   */
  amount?: GetOpenSettlementAmount | undefined;
  /**
   * The balance token that the settlement was settled to.
   */
  balanceId?: string | undefined;
  /**
   * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
   */
  invoiceId?: string | null | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects â€” one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: { [k: string]: any } | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetOpenSettlementLinks | undefined;
};

/** @internal */
export const GetOpenSettlementStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementStatus
> = z.nativeEnum(GetOpenSettlementStatus);

/** @internal */
export const GetOpenSettlementStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementStatus
> = GetOpenSettlementStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementStatus$ {
  /** @deprecated use `GetOpenSettlementStatus$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementStatus$inboundSchema;
  /** @deprecated use `GetOpenSettlementStatus$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementStatus$outboundSchema;
}

/** @internal */
export const GetOpenSettlementAmount$inboundSchema: z.ZodType<
  GetOpenSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementAmount$outboundSchema: z.ZodType<
  GetOpenSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementAmount$ {
  /** @deprecated use `GetOpenSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementAmount$inboundSchema;
  /** @deprecated use `GetOpenSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementAmount$outboundSchema;
  /** @deprecated use `GetOpenSettlementAmount$Outbound` instead. */
  export type Outbound = GetOpenSettlementAmount$Outbound;
}

export function getOpenSettlementAmountToJSON(
  getOpenSettlementAmount: GetOpenSettlementAmount,
): string {
  return JSON.stringify(
    GetOpenSettlementAmount$outboundSchema.parse(getOpenSettlementAmount),
  );
}

export function getOpenSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementSelf$inboundSchema: z.ZodType<
  GetOpenSettlementSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementSelf$outboundSchema: z.ZodType<
  GetOpenSettlementSelf$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementSelf$ {
  /** @deprecated use `GetOpenSettlementSelf$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementSelf$inboundSchema;
  /** @deprecated use `GetOpenSettlementSelf$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementSelf$outboundSchema;
  /** @deprecated use `GetOpenSettlementSelf$Outbound` instead. */
  export type Outbound = GetOpenSettlementSelf$Outbound;
}

export function getOpenSettlementSelfToJSON(
  getOpenSettlementSelf: GetOpenSettlementSelf,
): string {
  return JSON.stringify(
    GetOpenSettlementSelf$outboundSchema.parse(getOpenSettlementSelf),
  );
}

export function getOpenSettlementSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementSelf' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementPayments$inboundSchema: z.ZodType<
  GetOpenSettlementPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementPayments$outboundSchema: z.ZodType<
  GetOpenSettlementPayments$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementPayments$ {
  /** @deprecated use `GetOpenSettlementPayments$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementPayments$inboundSchema;
  /** @deprecated use `GetOpenSettlementPayments$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementPayments$outboundSchema;
  /** @deprecated use `GetOpenSettlementPayments$Outbound` instead. */
  export type Outbound = GetOpenSettlementPayments$Outbound;
}

export function getOpenSettlementPaymentsToJSON(
  getOpenSettlementPayments: GetOpenSettlementPayments,
): string {
  return JSON.stringify(
    GetOpenSettlementPayments$outboundSchema.parse(getOpenSettlementPayments),
  );
}

export function getOpenSettlementPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementPayments' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementCaptures$inboundSchema: z.ZodType<
  GetOpenSettlementCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementCaptures$outboundSchema: z.ZodType<
  GetOpenSettlementCaptures$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementCaptures$ {
  /** @deprecated use `GetOpenSettlementCaptures$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementCaptures$inboundSchema;
  /** @deprecated use `GetOpenSettlementCaptures$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementCaptures$outboundSchema;
  /** @deprecated use `GetOpenSettlementCaptures$Outbound` instead. */
  export type Outbound = GetOpenSettlementCaptures$Outbound;
}

export function getOpenSettlementCapturesToJSON(
  getOpenSettlementCaptures: GetOpenSettlementCaptures,
): string {
  return JSON.stringify(
    GetOpenSettlementCaptures$outboundSchema.parse(getOpenSettlementCaptures),
  );
}

export function getOpenSettlementCapturesFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementCaptures' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementRefunds$inboundSchema: z.ZodType<
  GetOpenSettlementRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementRefunds$outboundSchema: z.ZodType<
  GetOpenSettlementRefunds$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRefunds$ {
  /** @deprecated use `GetOpenSettlementRefunds$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementRefunds$inboundSchema;
  /** @deprecated use `GetOpenSettlementRefunds$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementRefunds$outboundSchema;
  /** @deprecated use `GetOpenSettlementRefunds$Outbound` instead. */
  export type Outbound = GetOpenSettlementRefunds$Outbound;
}

export function getOpenSettlementRefundsToJSON(
  getOpenSettlementRefunds: GetOpenSettlementRefunds,
): string {
  return JSON.stringify(
    GetOpenSettlementRefunds$outboundSchema.parse(getOpenSettlementRefunds),
  );
}

export function getOpenSettlementRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementRefunds' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementChargebacks$inboundSchema: z.ZodType<
  GetOpenSettlementChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementChargebacks$outboundSchema: z.ZodType<
  GetOpenSettlementChargebacks$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementChargebacks$ {
  /** @deprecated use `GetOpenSettlementChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementChargebacks$inboundSchema;
  /** @deprecated use `GetOpenSettlementChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementChargebacks$outboundSchema;
  /** @deprecated use `GetOpenSettlementChargebacks$Outbound` instead. */
  export type Outbound = GetOpenSettlementChargebacks$Outbound;
}

export function getOpenSettlementChargebacksToJSON(
  getOpenSettlementChargebacks: GetOpenSettlementChargebacks,
): string {
  return JSON.stringify(
    GetOpenSettlementChargebacks$outboundSchema.parse(
      getOpenSettlementChargebacks,
    ),
  );
}

export function getOpenSettlementChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementChargebacks' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementInvoice$inboundSchema: z.ZodType<
  GetOpenSettlementInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetOpenSettlementInvoice$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetOpenSettlementInvoice$outboundSchema: z.ZodType<
  GetOpenSettlementInvoice$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementInvoice
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementInvoice$ {
  /** @deprecated use `GetOpenSettlementInvoice$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementInvoice$inboundSchema;
  /** @deprecated use `GetOpenSettlementInvoice$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementInvoice$outboundSchema;
  /** @deprecated use `GetOpenSettlementInvoice$Outbound` instead. */
  export type Outbound = GetOpenSettlementInvoice$Outbound;
}

export function getOpenSettlementInvoiceToJSON(
  getOpenSettlementInvoice: GetOpenSettlementInvoice,
): string {
  return JSON.stringify(
    GetOpenSettlementInvoice$outboundSchema.parse(getOpenSettlementInvoice),
  );
}

export function getOpenSettlementInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementInvoice' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementDocumentation$inboundSchema: z.ZodType<
  GetOpenSettlementDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementDocumentation$outboundSchema: z.ZodType<
  GetOpenSettlementDocumentation$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementDocumentation$ {
  /** @deprecated use `GetOpenSettlementDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementDocumentation$inboundSchema;
  /** @deprecated use `GetOpenSettlementDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementDocumentation$outboundSchema;
  /** @deprecated use `GetOpenSettlementDocumentation$Outbound` instead. */
  export type Outbound = GetOpenSettlementDocumentation$Outbound;
}

export function getOpenSettlementDocumentationToJSON(
  getOpenSettlementDocumentation: GetOpenSettlementDocumentation,
): string {
  return JSON.stringify(
    GetOpenSettlementDocumentation$outboundSchema.parse(
      getOpenSettlementDocumentation,
    ),
  );
}

export function getOpenSettlementDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementDocumentation' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementLinks$inboundSchema: z.ZodType<
  GetOpenSettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetOpenSettlementSelf$inboundSchema).optional(),
  payments: z.lazy(() => GetOpenSettlementPayments$inboundSchema).optional(),
  captures: z.lazy(() => GetOpenSettlementCaptures$inboundSchema).optional(),
  refunds: z.lazy(() => GetOpenSettlementRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetOpenSettlementChargebacks$inboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetOpenSettlementInvoice$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetOpenSettlementDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetOpenSettlementLinks$Outbound = {
  self?: GetOpenSettlementSelf$Outbound | undefined;
  payments?: GetOpenSettlementPayments$Outbound | undefined;
  captures?: GetOpenSettlementCaptures$Outbound | undefined;
  refunds?: GetOpenSettlementRefunds$Outbound | undefined;
  chargebacks?: GetOpenSettlementChargebacks$Outbound | undefined;
  invoice?: GetOpenSettlementInvoice$Outbound | null | undefined;
  documentation?: GetOpenSettlementDocumentation$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementLinks$outboundSchema: z.ZodType<
  GetOpenSettlementLinks$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementLinks
> = z.object({
  self: z.lazy(() => GetOpenSettlementSelf$outboundSchema).optional(),
  payments: z.lazy(() => GetOpenSettlementPayments$outboundSchema).optional(),
  captures: z.lazy(() => GetOpenSettlementCaptures$outboundSchema).optional(),
  refunds: z.lazy(() => GetOpenSettlementRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetOpenSettlementChargebacks$outboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetOpenSettlementInvoice$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetOpenSettlementDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementLinks$ {
  /** @deprecated use `GetOpenSettlementLinks$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementLinks$inboundSchema;
  /** @deprecated use `GetOpenSettlementLinks$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementLinks$outboundSchema;
  /** @deprecated use `GetOpenSettlementLinks$Outbound` instead. */
  export type Outbound = GetOpenSettlementLinks$Outbound;
}

export function getOpenSettlementLinksToJSON(
  getOpenSettlementLinks: GetOpenSettlementLinks,
): string {
  return JSON.stringify(
    GetOpenSettlementLinks$outboundSchema.parse(getOpenSettlementLinks),
  );
}

export function getOpenSettlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementLinks' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementResponse$inboundSchema: z.ZodType<
  GetOpenSettlementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetOpenSettlementStatus$inboundSchema.optional(),
  amount: z.lazy(() => GetOpenSettlementAmount$inboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.record(z.any()).optional(),
  _links: z.lazy(() => GetOpenSettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetOpenSettlementResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: GetOpenSettlementAmount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | null | undefined;
  periods?: { [k: string]: any } | undefined;
  _links?: GetOpenSettlementLinks$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementResponse$outboundSchema: z.ZodType<
  GetOpenSettlementResponse$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetOpenSettlementStatus$outboundSchema.optional(),
  amount: z.lazy(() => GetOpenSettlementAmount$outboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.record(z.any()).optional(),
  links: z.lazy(() => GetOpenSettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementResponse$ {
  /** @deprecated use `GetOpenSettlementResponse$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementResponse$inboundSchema;
  /** @deprecated use `GetOpenSettlementResponse$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementResponse$outboundSchema;
  /** @deprecated use `GetOpenSettlementResponse$Outbound` instead. */
  export type Outbound = GetOpenSettlementResponse$Outbound;
}

export function getOpenSettlementResponseToJSON(
  getOpenSettlementResponse: GetOpenSettlementResponse,
): string {
  return JSON.stringify(
    GetOpenSettlementResponse$outboundSchema.parse(getOpenSettlementResponse),
  );
}

export function getOpenSettlementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementResponse' from JSON`,
  );
}
