/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the settlement.
 */
export const GetOpenSettlementStatus = {
  Open: "open",
  Pending: "pending",
  Paidout: "paidout",
  Failed: "failed",
} as const;
/**
 * The status of the settlement.
 */
export type GetOpenSettlementStatus = ClosedEnum<
  typeof GetOpenSettlementStatus
>;

/**
 * The total amount of the settlement.
 */
export type GetOpenSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The payment method, if applicable
 */
export const GetOpenSettlementCostMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type GetOpenSettlementCostMethod = ClosedEnum<
  typeof GetOpenSettlementCostMethod
>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type GetOpenSettlementFixed = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type GetOpenSettlementPercentage = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The service rates, further divided into `fixed` and `percentage` costs.
 */
export type GetOpenSettlementRate = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  fixed?: GetOpenSettlementFixed | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  percentage?: GetOpenSettlementPercentage | undefined;
};

/**
 * The net total cost, i.e. excluding VAT
 */
export type GetOpenSettlementCostAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type GetOpenSettlementCostAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total cost, i.e. including VAT
 */
export type GetOpenSettlementCostAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetOpenSettlementCost = {
  /**
   * A description of the cost subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: GetOpenSettlementCostMethod | null | undefined;
  /**
   * The number of fees
   */
  count?: number | undefined;
  /**
   * The service rates, further divided into `fixed` and `percentage` costs.
   */
  rate?: GetOpenSettlementRate | undefined;
  /**
   * The net total cost, i.e. excluding VAT
   */
  amountNet?: GetOpenSettlementCostAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: GetOpenSettlementCostAmountVat | undefined;
  /**
   * The gross total cost, i.e. including VAT
   */
  amountGross?: GetOpenSettlementCostAmountGross | undefined;
};

/**
 * The payment method, if applicable
 */
export const GetOpenSettlementRevenueMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type GetOpenSettlementRevenueMethod = ClosedEnum<
  typeof GetOpenSettlementRevenueMethod
>;

/**
 * The net total of received funds, i.e. excluding VAT
 */
export type GetOpenSettlementRevenueAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type GetOpenSettlementRevenueAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total of received funds, i.e. including VAT
 */
export type GetOpenSettlementRevenueAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetOpenSettlementRevenue = {
  /**
   * A description of the revenue subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: GetOpenSettlementRevenueMethod | null | undefined;
  /**
   * The number of payments
   */
  count?: number | undefined;
  /**
   * The net total of received funds, i.e. excluding VAT
   */
  amountNet?: GetOpenSettlementRevenueAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: GetOpenSettlementRevenueAmountVat | undefined;
  /**
   * The gross total of received funds, i.e. including VAT
   */
  amountGross?: GetOpenSettlementRevenueAmountGross | undefined;
};

export type GetOpenSettlementLessThanMonthGreaterThan = {
  /**
   * An array of cost objects, describing the fees withheld for each payment method during this period.
   */
  costs?: Array<GetOpenSettlementCost> | undefined;
  /**
   * An array of revenue objects containing the total revenue for each payment method during this period.
   */
  revenue?: Array<GetOpenSettlementRevenue> | undefined;
  /**
   * The ID of the invoice created for this period, if the invoice has been created already.
   */
  invoiceId?: string | null | undefined;
  /**
   * The invoice reference, if the invoice has been created already.
   */
  invoiceReference?: string | null | undefined;
};

export type GetOpenSettlementLessThanYearGreaterThan = {
  lessThanMonthGreaterThan?:
    | GetOpenSettlementLessThanMonthGreaterThan
    | undefined;
};

/**
 * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
 *
 * @remarks
 * transactions are grouped into 'period' objects â€” one for each calendar month.
 *
 * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
 * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
 *
 * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
 * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
 *
 * The example response should give a good idea of what this looks like in practise.
 */
export type GetOpenSettlementPeriods = {
  lessThanYearGreaterThan?:
    | GetOpenSettlementLessThanYearGreaterThan
    | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetOpenSettlementSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) included in this settlement.
 */
export type GetOpenSettlementPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-captures) included in this settlement.
 */
export type GetOpenSettlementCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
 */
export type GetOpenSettlementRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
 */
export type GetOpenSettlementChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [invoice](list-invoices).
 */
export type GetOpenSettlementInvoice = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetOpenSettlementDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetOpenSettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetOpenSettlementSelf | undefined;
  /**
   * The API resource URL of the [payments](list-payments) included in this settlement.
   */
  payments?: GetOpenSettlementPayments | undefined;
  /**
   * The API resource URL of the [captures](list-captures) included in this settlement.
   */
  captures?: GetOpenSettlementCaptures | undefined;
  /**
   * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
   */
  refunds?: GetOpenSettlementRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
   */
  chargebacks?: GetOpenSettlementChargebacks | undefined;
  /**
   * The API resource URL of the [invoice](list-invoices).
   */
  invoice?: GetOpenSettlementInvoice | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetOpenSettlementDocumentation | undefined;
};

/**
 * A settlement object describing your current balance. For a complete reference of the settlement object, refer to
 *
 * @remarks
 * the [Get settlement](get-settlement) endpoint documentation.
 */
export type GetOpenSettlementResponse = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this settlement.
   */
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: GetOpenSettlementStatus | undefined;
  /**
   * The total amount of the settlement.
   */
  amount?: GetOpenSettlementAmount | undefined;
  /**
   * The balance token that the settlement was settled to.
   */
  balanceId?: string | undefined;
  /**
   * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
   */
  invoiceId?: string | null | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects â€” one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: GetOpenSettlementPeriods | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetOpenSettlementLinks | undefined;
};

/** @internal */
export const GetOpenSettlementStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementStatus
> = z.nativeEnum(GetOpenSettlementStatus);

/** @internal */
export const GetOpenSettlementStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementStatus
> = GetOpenSettlementStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementStatus$ {
  /** @deprecated use `GetOpenSettlementStatus$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementStatus$inboundSchema;
  /** @deprecated use `GetOpenSettlementStatus$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementStatus$outboundSchema;
}

/** @internal */
export const GetOpenSettlementAmount$inboundSchema: z.ZodType<
  GetOpenSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementAmount$outboundSchema: z.ZodType<
  GetOpenSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementAmount$ {
  /** @deprecated use `GetOpenSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementAmount$inboundSchema;
  /** @deprecated use `GetOpenSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementAmount$outboundSchema;
  /** @deprecated use `GetOpenSettlementAmount$Outbound` instead. */
  export type Outbound = GetOpenSettlementAmount$Outbound;
}

export function getOpenSettlementAmountToJSON(
  getOpenSettlementAmount: GetOpenSettlementAmount,
): string {
  return JSON.stringify(
    GetOpenSettlementAmount$outboundSchema.parse(getOpenSettlementAmount),
  );
}

export function getOpenSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementCostMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementCostMethod
> = z.nativeEnum(GetOpenSettlementCostMethod);

/** @internal */
export const GetOpenSettlementCostMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementCostMethod
> = GetOpenSettlementCostMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementCostMethod$ {
  /** @deprecated use `GetOpenSettlementCostMethod$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementCostMethod$inboundSchema;
  /** @deprecated use `GetOpenSettlementCostMethod$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementCostMethod$outboundSchema;
}

/** @internal */
export const GetOpenSettlementFixed$inboundSchema: z.ZodType<
  GetOpenSettlementFixed,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementFixed$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementFixed$outboundSchema: z.ZodType<
  GetOpenSettlementFixed$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementFixed
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementFixed$ {
  /** @deprecated use `GetOpenSettlementFixed$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementFixed$inboundSchema;
  /** @deprecated use `GetOpenSettlementFixed$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementFixed$outboundSchema;
  /** @deprecated use `GetOpenSettlementFixed$Outbound` instead. */
  export type Outbound = GetOpenSettlementFixed$Outbound;
}

export function getOpenSettlementFixedToJSON(
  getOpenSettlementFixed: GetOpenSettlementFixed,
): string {
  return JSON.stringify(
    GetOpenSettlementFixed$outboundSchema.parse(getOpenSettlementFixed),
  );
}

export function getOpenSettlementFixedFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementFixed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementFixed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementFixed' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementPercentage$inboundSchema: z.ZodType<
  GetOpenSettlementPercentage,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementPercentage$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementPercentage$outboundSchema: z.ZodType<
  GetOpenSettlementPercentage$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementPercentage
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementPercentage$ {
  /** @deprecated use `GetOpenSettlementPercentage$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementPercentage$inboundSchema;
  /** @deprecated use `GetOpenSettlementPercentage$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementPercentage$outboundSchema;
  /** @deprecated use `GetOpenSettlementPercentage$Outbound` instead. */
  export type Outbound = GetOpenSettlementPercentage$Outbound;
}

export function getOpenSettlementPercentageToJSON(
  getOpenSettlementPercentage: GetOpenSettlementPercentage,
): string {
  return JSON.stringify(
    GetOpenSettlementPercentage$outboundSchema.parse(
      getOpenSettlementPercentage,
    ),
  );
}

export function getOpenSettlementPercentageFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementPercentage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementPercentage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementPercentage' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementRate$inboundSchema: z.ZodType<
  GetOpenSettlementRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  fixed: z.lazy(() => GetOpenSettlementFixed$inboundSchema).optional(),
  percentage: z.lazy(() => GetOpenSettlementPercentage$inboundSchema)
    .optional(),
});

/** @internal */
export type GetOpenSettlementRate$Outbound = {
  fixed?: GetOpenSettlementFixed$Outbound | undefined;
  percentage?: GetOpenSettlementPercentage$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementRate$outboundSchema: z.ZodType<
  GetOpenSettlementRate$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementRate
> = z.object({
  fixed: z.lazy(() => GetOpenSettlementFixed$outboundSchema).optional(),
  percentage: z.lazy(() => GetOpenSettlementPercentage$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRate$ {
  /** @deprecated use `GetOpenSettlementRate$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementRate$inboundSchema;
  /** @deprecated use `GetOpenSettlementRate$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementRate$outboundSchema;
  /** @deprecated use `GetOpenSettlementRate$Outbound` instead. */
  export type Outbound = GetOpenSettlementRate$Outbound;
}

export function getOpenSettlementRateToJSON(
  getOpenSettlementRate: GetOpenSettlementRate,
): string {
  return JSON.stringify(
    GetOpenSettlementRate$outboundSchema.parse(getOpenSettlementRate),
  );
}

export function getOpenSettlementRateFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementRate' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementCostAmountNet$inboundSchema: z.ZodType<
  GetOpenSettlementCostAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementCostAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementCostAmountNet$outboundSchema: z.ZodType<
  GetOpenSettlementCostAmountNet$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementCostAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementCostAmountNet$ {
  /** @deprecated use `GetOpenSettlementCostAmountNet$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementCostAmountNet$inboundSchema;
  /** @deprecated use `GetOpenSettlementCostAmountNet$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementCostAmountNet$outboundSchema;
  /** @deprecated use `GetOpenSettlementCostAmountNet$Outbound` instead. */
  export type Outbound = GetOpenSettlementCostAmountNet$Outbound;
}

export function getOpenSettlementCostAmountNetToJSON(
  getOpenSettlementCostAmountNet: GetOpenSettlementCostAmountNet,
): string {
  return JSON.stringify(
    GetOpenSettlementCostAmountNet$outboundSchema.parse(
      getOpenSettlementCostAmountNet,
    ),
  );
}

export function getOpenSettlementCostAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementCostAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementCostAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementCostAmountNet' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementCostAmountVat$inboundSchema: z.ZodType<
  GetOpenSettlementCostAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementCostAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementCostAmountVat$outboundSchema: z.ZodType<
  GetOpenSettlementCostAmountVat$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementCostAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementCostAmountVat$ {
  /** @deprecated use `GetOpenSettlementCostAmountVat$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementCostAmountVat$inboundSchema;
  /** @deprecated use `GetOpenSettlementCostAmountVat$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementCostAmountVat$outboundSchema;
  /** @deprecated use `GetOpenSettlementCostAmountVat$Outbound` instead. */
  export type Outbound = GetOpenSettlementCostAmountVat$Outbound;
}

export function getOpenSettlementCostAmountVatToJSON(
  getOpenSettlementCostAmountVat: GetOpenSettlementCostAmountVat,
): string {
  return JSON.stringify(
    GetOpenSettlementCostAmountVat$outboundSchema.parse(
      getOpenSettlementCostAmountVat,
    ),
  );
}

export function getOpenSettlementCostAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementCostAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementCostAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementCostAmountVat' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementCostAmountGross$inboundSchema: z.ZodType<
  GetOpenSettlementCostAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementCostAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementCostAmountGross$outboundSchema: z.ZodType<
  GetOpenSettlementCostAmountGross$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementCostAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementCostAmountGross$ {
  /** @deprecated use `GetOpenSettlementCostAmountGross$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementCostAmountGross$inboundSchema;
  /** @deprecated use `GetOpenSettlementCostAmountGross$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementCostAmountGross$outboundSchema;
  /** @deprecated use `GetOpenSettlementCostAmountGross$Outbound` instead. */
  export type Outbound = GetOpenSettlementCostAmountGross$Outbound;
}

export function getOpenSettlementCostAmountGrossToJSON(
  getOpenSettlementCostAmountGross: GetOpenSettlementCostAmountGross,
): string {
  return JSON.stringify(
    GetOpenSettlementCostAmountGross$outboundSchema.parse(
      getOpenSettlementCostAmountGross,
    ),
  );
}

export function getOpenSettlementCostAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementCostAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementCostAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementCostAmountGross' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementCost$inboundSchema: z.ZodType<
  GetOpenSettlementCost,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetOpenSettlementCostMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => GetOpenSettlementRate$inboundSchema).optional(),
  amountNet: z.lazy(() => GetOpenSettlementCostAmountNet$inboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetOpenSettlementCostAmountVat$inboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetOpenSettlementCostAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type GetOpenSettlementCost$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  rate?: GetOpenSettlementRate$Outbound | undefined;
  amountNet?: GetOpenSettlementCostAmountNet$Outbound | undefined;
  amountVat?: GetOpenSettlementCostAmountVat$Outbound | undefined;
  amountGross?: GetOpenSettlementCostAmountGross$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementCost$outboundSchema: z.ZodType<
  GetOpenSettlementCost$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementCost
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetOpenSettlementCostMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => GetOpenSettlementRate$outboundSchema).optional(),
  amountNet: z.lazy(() => GetOpenSettlementCostAmountNet$outboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetOpenSettlementCostAmountVat$outboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetOpenSettlementCostAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementCost$ {
  /** @deprecated use `GetOpenSettlementCost$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementCost$inboundSchema;
  /** @deprecated use `GetOpenSettlementCost$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementCost$outboundSchema;
  /** @deprecated use `GetOpenSettlementCost$Outbound` instead. */
  export type Outbound = GetOpenSettlementCost$Outbound;
}

export function getOpenSettlementCostToJSON(
  getOpenSettlementCost: GetOpenSettlementCost,
): string {
  return JSON.stringify(
    GetOpenSettlementCost$outboundSchema.parse(getOpenSettlementCost),
  );
}

export function getOpenSettlementCostFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementCost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementCost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementCost' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementRevenueMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementRevenueMethod
> = z.nativeEnum(GetOpenSettlementRevenueMethod);

/** @internal */
export const GetOpenSettlementRevenueMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetOpenSettlementRevenueMethod
> = GetOpenSettlementRevenueMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRevenueMethod$ {
  /** @deprecated use `GetOpenSettlementRevenueMethod$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementRevenueMethod$inboundSchema;
  /** @deprecated use `GetOpenSettlementRevenueMethod$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementRevenueMethod$outboundSchema;
}

/** @internal */
export const GetOpenSettlementRevenueAmountNet$inboundSchema: z.ZodType<
  GetOpenSettlementRevenueAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementRevenueAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementRevenueAmountNet$outboundSchema: z.ZodType<
  GetOpenSettlementRevenueAmountNet$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementRevenueAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRevenueAmountNet$ {
  /** @deprecated use `GetOpenSettlementRevenueAmountNet$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementRevenueAmountNet$inboundSchema;
  /** @deprecated use `GetOpenSettlementRevenueAmountNet$outboundSchema` instead. */
  export const outboundSchema =
    GetOpenSettlementRevenueAmountNet$outboundSchema;
  /** @deprecated use `GetOpenSettlementRevenueAmountNet$Outbound` instead. */
  export type Outbound = GetOpenSettlementRevenueAmountNet$Outbound;
}

export function getOpenSettlementRevenueAmountNetToJSON(
  getOpenSettlementRevenueAmountNet: GetOpenSettlementRevenueAmountNet,
): string {
  return JSON.stringify(
    GetOpenSettlementRevenueAmountNet$outboundSchema.parse(
      getOpenSettlementRevenueAmountNet,
    ),
  );
}

export function getOpenSettlementRevenueAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementRevenueAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementRevenueAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementRevenueAmountNet' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementRevenueAmountVat$inboundSchema: z.ZodType<
  GetOpenSettlementRevenueAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementRevenueAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementRevenueAmountVat$outboundSchema: z.ZodType<
  GetOpenSettlementRevenueAmountVat$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementRevenueAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRevenueAmountVat$ {
  /** @deprecated use `GetOpenSettlementRevenueAmountVat$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementRevenueAmountVat$inboundSchema;
  /** @deprecated use `GetOpenSettlementRevenueAmountVat$outboundSchema` instead. */
  export const outboundSchema =
    GetOpenSettlementRevenueAmountVat$outboundSchema;
  /** @deprecated use `GetOpenSettlementRevenueAmountVat$Outbound` instead. */
  export type Outbound = GetOpenSettlementRevenueAmountVat$Outbound;
}

export function getOpenSettlementRevenueAmountVatToJSON(
  getOpenSettlementRevenueAmountVat: GetOpenSettlementRevenueAmountVat,
): string {
  return JSON.stringify(
    GetOpenSettlementRevenueAmountVat$outboundSchema.parse(
      getOpenSettlementRevenueAmountVat,
    ),
  );
}

export function getOpenSettlementRevenueAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementRevenueAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementRevenueAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementRevenueAmountVat' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementRevenueAmountGross$inboundSchema: z.ZodType<
  GetOpenSettlementRevenueAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetOpenSettlementRevenueAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetOpenSettlementRevenueAmountGross$outboundSchema: z.ZodType<
  GetOpenSettlementRevenueAmountGross$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementRevenueAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRevenueAmountGross$ {
  /** @deprecated use `GetOpenSettlementRevenueAmountGross$inboundSchema` instead. */
  export const inboundSchema =
    GetOpenSettlementRevenueAmountGross$inboundSchema;
  /** @deprecated use `GetOpenSettlementRevenueAmountGross$outboundSchema` instead. */
  export const outboundSchema =
    GetOpenSettlementRevenueAmountGross$outboundSchema;
  /** @deprecated use `GetOpenSettlementRevenueAmountGross$Outbound` instead. */
  export type Outbound = GetOpenSettlementRevenueAmountGross$Outbound;
}

export function getOpenSettlementRevenueAmountGrossToJSON(
  getOpenSettlementRevenueAmountGross: GetOpenSettlementRevenueAmountGross,
): string {
  return JSON.stringify(
    GetOpenSettlementRevenueAmountGross$outboundSchema.parse(
      getOpenSettlementRevenueAmountGross,
    ),
  );
}

export function getOpenSettlementRevenueAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementRevenueAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetOpenSettlementRevenueAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementRevenueAmountGross' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementRevenue$inboundSchema: z.ZodType<
  GetOpenSettlementRevenue,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetOpenSettlementRevenueMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => GetOpenSettlementRevenueAmountNet$inboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetOpenSettlementRevenueAmountVat$inboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetOpenSettlementRevenueAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type GetOpenSettlementRevenue$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  amountNet?: GetOpenSettlementRevenueAmountNet$Outbound | undefined;
  amountVat?: GetOpenSettlementRevenueAmountVat$Outbound | undefined;
  amountGross?: GetOpenSettlementRevenueAmountGross$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementRevenue$outboundSchema: z.ZodType<
  GetOpenSettlementRevenue$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementRevenue
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetOpenSettlementRevenueMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => GetOpenSettlementRevenueAmountNet$outboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetOpenSettlementRevenueAmountVat$outboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetOpenSettlementRevenueAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRevenue$ {
  /** @deprecated use `GetOpenSettlementRevenue$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementRevenue$inboundSchema;
  /** @deprecated use `GetOpenSettlementRevenue$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementRevenue$outboundSchema;
  /** @deprecated use `GetOpenSettlementRevenue$Outbound` instead. */
  export type Outbound = GetOpenSettlementRevenue$Outbound;
}

export function getOpenSettlementRevenueToJSON(
  getOpenSettlementRevenue: GetOpenSettlementRevenue,
): string {
  return JSON.stringify(
    GetOpenSettlementRevenue$outboundSchema.parse(getOpenSettlementRevenue),
  );
}

export function getOpenSettlementRevenueFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementRevenue' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementLessThanMonthGreaterThan$inboundSchema: z.ZodType<
  GetOpenSettlementLessThanMonthGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  costs: z.array(z.lazy(() => GetOpenSettlementCost$inboundSchema)).optional(),
  revenue: z.array(z.lazy(() => GetOpenSettlementRevenue$inboundSchema))
    .optional(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetOpenSettlementLessThanMonthGreaterThan$Outbound = {
  costs?: Array<GetOpenSettlementCost$Outbound> | undefined;
  revenue?: Array<GetOpenSettlementRevenue$Outbound> | undefined;
  invoiceId?: string | null | undefined;
  invoiceReference?: string | null | undefined;
};

/** @internal */
export const GetOpenSettlementLessThanMonthGreaterThan$outboundSchema:
  z.ZodType<
    GetOpenSettlementLessThanMonthGreaterThan$Outbound,
    z.ZodTypeDef,
    GetOpenSettlementLessThanMonthGreaterThan
  > = z.object({
    costs: z.array(z.lazy(() => GetOpenSettlementCost$outboundSchema))
      .optional(),
    revenue: z.array(z.lazy(() => GetOpenSettlementRevenue$outboundSchema))
      .optional(),
    invoiceId: z.nullable(z.string()).optional(),
    invoiceReference: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementLessThanMonthGreaterThan$ {
  /** @deprecated use `GetOpenSettlementLessThanMonthGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    GetOpenSettlementLessThanMonthGreaterThan$inboundSchema;
  /** @deprecated use `GetOpenSettlementLessThanMonthGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    GetOpenSettlementLessThanMonthGreaterThan$outboundSchema;
  /** @deprecated use `GetOpenSettlementLessThanMonthGreaterThan$Outbound` instead. */
  export type Outbound = GetOpenSettlementLessThanMonthGreaterThan$Outbound;
}

export function getOpenSettlementLessThanMonthGreaterThanToJSON(
  getOpenSettlementLessThanMonthGreaterThan:
    GetOpenSettlementLessThanMonthGreaterThan,
): string {
  return JSON.stringify(
    GetOpenSettlementLessThanMonthGreaterThan$outboundSchema.parse(
      getOpenSettlementLessThanMonthGreaterThan,
    ),
  );
}

export function getOpenSettlementLessThanMonthGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<
  GetOpenSettlementLessThanMonthGreaterThan,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetOpenSettlementLessThanMonthGreaterThan$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetOpenSettlementLessThanMonthGreaterThan' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementLessThanYearGreaterThan$inboundSchema: z.ZodType<
  GetOpenSettlementLessThanYearGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<month>": z.lazy(() =>
    GetOpenSettlementLessThanMonthGreaterThan$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "<month>": "lessThanMonthGreaterThan",
  });
});

/** @internal */
export type GetOpenSettlementLessThanYearGreaterThan$Outbound = {
  "<month>"?: GetOpenSettlementLessThanMonthGreaterThan$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementLessThanYearGreaterThan$outboundSchema: z.ZodType<
  GetOpenSettlementLessThanYearGreaterThan$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementLessThanYearGreaterThan
> = z.object({
  lessThanMonthGreaterThan: z.lazy(() =>
    GetOpenSettlementLessThanMonthGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanMonthGreaterThan: "<month>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementLessThanYearGreaterThan$ {
  /** @deprecated use `GetOpenSettlementLessThanYearGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    GetOpenSettlementLessThanYearGreaterThan$inboundSchema;
  /** @deprecated use `GetOpenSettlementLessThanYearGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    GetOpenSettlementLessThanYearGreaterThan$outboundSchema;
  /** @deprecated use `GetOpenSettlementLessThanYearGreaterThan$Outbound` instead. */
  export type Outbound = GetOpenSettlementLessThanYearGreaterThan$Outbound;
}

export function getOpenSettlementLessThanYearGreaterThanToJSON(
  getOpenSettlementLessThanYearGreaterThan:
    GetOpenSettlementLessThanYearGreaterThan,
): string {
  return JSON.stringify(
    GetOpenSettlementLessThanYearGreaterThan$outboundSchema.parse(
      getOpenSettlementLessThanYearGreaterThan,
    ),
  );
}

export function getOpenSettlementLessThanYearGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<
  GetOpenSettlementLessThanYearGreaterThan,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetOpenSettlementLessThanYearGreaterThan$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetOpenSettlementLessThanYearGreaterThan' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementPeriods$inboundSchema: z.ZodType<
  GetOpenSettlementPeriods,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<year>": z.lazy(() => GetOpenSettlementLessThanYearGreaterThan$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "<year>": "lessThanYearGreaterThan",
  });
});

/** @internal */
export type GetOpenSettlementPeriods$Outbound = {
  "<year>"?: GetOpenSettlementLessThanYearGreaterThan$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementPeriods$outboundSchema: z.ZodType<
  GetOpenSettlementPeriods$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementPeriods
> = z.object({
  lessThanYearGreaterThan: z.lazy(() =>
    GetOpenSettlementLessThanYearGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanYearGreaterThan: "<year>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementPeriods$ {
  /** @deprecated use `GetOpenSettlementPeriods$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementPeriods$inboundSchema;
  /** @deprecated use `GetOpenSettlementPeriods$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementPeriods$outboundSchema;
  /** @deprecated use `GetOpenSettlementPeriods$Outbound` instead. */
  export type Outbound = GetOpenSettlementPeriods$Outbound;
}

export function getOpenSettlementPeriodsToJSON(
  getOpenSettlementPeriods: GetOpenSettlementPeriods,
): string {
  return JSON.stringify(
    GetOpenSettlementPeriods$outboundSchema.parse(getOpenSettlementPeriods),
  );
}

export function getOpenSettlementPeriodsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementPeriods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementPeriods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementPeriods' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementSelf$inboundSchema: z.ZodType<
  GetOpenSettlementSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementSelf$outboundSchema: z.ZodType<
  GetOpenSettlementSelf$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementSelf$ {
  /** @deprecated use `GetOpenSettlementSelf$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementSelf$inboundSchema;
  /** @deprecated use `GetOpenSettlementSelf$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementSelf$outboundSchema;
  /** @deprecated use `GetOpenSettlementSelf$Outbound` instead. */
  export type Outbound = GetOpenSettlementSelf$Outbound;
}

export function getOpenSettlementSelfToJSON(
  getOpenSettlementSelf: GetOpenSettlementSelf,
): string {
  return JSON.stringify(
    GetOpenSettlementSelf$outboundSchema.parse(getOpenSettlementSelf),
  );
}

export function getOpenSettlementSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementSelf' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementPayments$inboundSchema: z.ZodType<
  GetOpenSettlementPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementPayments$outboundSchema: z.ZodType<
  GetOpenSettlementPayments$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementPayments$ {
  /** @deprecated use `GetOpenSettlementPayments$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementPayments$inboundSchema;
  /** @deprecated use `GetOpenSettlementPayments$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementPayments$outboundSchema;
  /** @deprecated use `GetOpenSettlementPayments$Outbound` instead. */
  export type Outbound = GetOpenSettlementPayments$Outbound;
}

export function getOpenSettlementPaymentsToJSON(
  getOpenSettlementPayments: GetOpenSettlementPayments,
): string {
  return JSON.stringify(
    GetOpenSettlementPayments$outboundSchema.parse(getOpenSettlementPayments),
  );
}

export function getOpenSettlementPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementPayments' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementCaptures$inboundSchema: z.ZodType<
  GetOpenSettlementCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementCaptures$outboundSchema: z.ZodType<
  GetOpenSettlementCaptures$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementCaptures$ {
  /** @deprecated use `GetOpenSettlementCaptures$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementCaptures$inboundSchema;
  /** @deprecated use `GetOpenSettlementCaptures$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementCaptures$outboundSchema;
  /** @deprecated use `GetOpenSettlementCaptures$Outbound` instead. */
  export type Outbound = GetOpenSettlementCaptures$Outbound;
}

export function getOpenSettlementCapturesToJSON(
  getOpenSettlementCaptures: GetOpenSettlementCaptures,
): string {
  return JSON.stringify(
    GetOpenSettlementCaptures$outboundSchema.parse(getOpenSettlementCaptures),
  );
}

export function getOpenSettlementCapturesFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementCaptures' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementRefunds$inboundSchema: z.ZodType<
  GetOpenSettlementRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementRefunds$outboundSchema: z.ZodType<
  GetOpenSettlementRefunds$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementRefunds$ {
  /** @deprecated use `GetOpenSettlementRefunds$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementRefunds$inboundSchema;
  /** @deprecated use `GetOpenSettlementRefunds$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementRefunds$outboundSchema;
  /** @deprecated use `GetOpenSettlementRefunds$Outbound` instead. */
  export type Outbound = GetOpenSettlementRefunds$Outbound;
}

export function getOpenSettlementRefundsToJSON(
  getOpenSettlementRefunds: GetOpenSettlementRefunds,
): string {
  return JSON.stringify(
    GetOpenSettlementRefunds$outboundSchema.parse(getOpenSettlementRefunds),
  );
}

export function getOpenSettlementRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementRefunds' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementChargebacks$inboundSchema: z.ZodType<
  GetOpenSettlementChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementChargebacks$outboundSchema: z.ZodType<
  GetOpenSettlementChargebacks$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementChargebacks$ {
  /** @deprecated use `GetOpenSettlementChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementChargebacks$inboundSchema;
  /** @deprecated use `GetOpenSettlementChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementChargebacks$outboundSchema;
  /** @deprecated use `GetOpenSettlementChargebacks$Outbound` instead. */
  export type Outbound = GetOpenSettlementChargebacks$Outbound;
}

export function getOpenSettlementChargebacksToJSON(
  getOpenSettlementChargebacks: GetOpenSettlementChargebacks,
): string {
  return JSON.stringify(
    GetOpenSettlementChargebacks$outboundSchema.parse(
      getOpenSettlementChargebacks,
    ),
  );
}

export function getOpenSettlementChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementChargebacks' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementInvoice$inboundSchema: z.ZodType<
  GetOpenSettlementInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetOpenSettlementInvoice$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetOpenSettlementInvoice$outboundSchema: z.ZodType<
  GetOpenSettlementInvoice$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementInvoice
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementInvoice$ {
  /** @deprecated use `GetOpenSettlementInvoice$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementInvoice$inboundSchema;
  /** @deprecated use `GetOpenSettlementInvoice$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementInvoice$outboundSchema;
  /** @deprecated use `GetOpenSettlementInvoice$Outbound` instead. */
  export type Outbound = GetOpenSettlementInvoice$Outbound;
}

export function getOpenSettlementInvoiceToJSON(
  getOpenSettlementInvoice: GetOpenSettlementInvoice,
): string {
  return JSON.stringify(
    GetOpenSettlementInvoice$outboundSchema.parse(getOpenSettlementInvoice),
  );
}

export function getOpenSettlementInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementInvoice' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementDocumentation$inboundSchema: z.ZodType<
  GetOpenSettlementDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOpenSettlementDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOpenSettlementDocumentation$outboundSchema: z.ZodType<
  GetOpenSettlementDocumentation$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementDocumentation$ {
  /** @deprecated use `GetOpenSettlementDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementDocumentation$inboundSchema;
  /** @deprecated use `GetOpenSettlementDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementDocumentation$outboundSchema;
  /** @deprecated use `GetOpenSettlementDocumentation$Outbound` instead. */
  export type Outbound = GetOpenSettlementDocumentation$Outbound;
}

export function getOpenSettlementDocumentationToJSON(
  getOpenSettlementDocumentation: GetOpenSettlementDocumentation,
): string {
  return JSON.stringify(
    GetOpenSettlementDocumentation$outboundSchema.parse(
      getOpenSettlementDocumentation,
    ),
  );
}

export function getOpenSettlementDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementDocumentation' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementLinks$inboundSchema: z.ZodType<
  GetOpenSettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetOpenSettlementSelf$inboundSchema).optional(),
  payments: z.lazy(() => GetOpenSettlementPayments$inboundSchema).optional(),
  captures: z.lazy(() => GetOpenSettlementCaptures$inboundSchema).optional(),
  refunds: z.lazy(() => GetOpenSettlementRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetOpenSettlementChargebacks$inboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetOpenSettlementInvoice$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetOpenSettlementDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetOpenSettlementLinks$Outbound = {
  self?: GetOpenSettlementSelf$Outbound | undefined;
  payments?: GetOpenSettlementPayments$Outbound | undefined;
  captures?: GetOpenSettlementCaptures$Outbound | undefined;
  refunds?: GetOpenSettlementRefunds$Outbound | undefined;
  chargebacks?: GetOpenSettlementChargebacks$Outbound | undefined;
  invoice?: GetOpenSettlementInvoice$Outbound | null | undefined;
  documentation?: GetOpenSettlementDocumentation$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementLinks$outboundSchema: z.ZodType<
  GetOpenSettlementLinks$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementLinks
> = z.object({
  self: z.lazy(() => GetOpenSettlementSelf$outboundSchema).optional(),
  payments: z.lazy(() => GetOpenSettlementPayments$outboundSchema).optional(),
  captures: z.lazy(() => GetOpenSettlementCaptures$outboundSchema).optional(),
  refunds: z.lazy(() => GetOpenSettlementRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetOpenSettlementChargebacks$outboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetOpenSettlementInvoice$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetOpenSettlementDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementLinks$ {
  /** @deprecated use `GetOpenSettlementLinks$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementLinks$inboundSchema;
  /** @deprecated use `GetOpenSettlementLinks$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementLinks$outboundSchema;
  /** @deprecated use `GetOpenSettlementLinks$Outbound` instead. */
  export type Outbound = GetOpenSettlementLinks$Outbound;
}

export function getOpenSettlementLinksToJSON(
  getOpenSettlementLinks: GetOpenSettlementLinks,
): string {
  return JSON.stringify(
    GetOpenSettlementLinks$outboundSchema.parse(getOpenSettlementLinks),
  );
}

export function getOpenSettlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementLinks' from JSON`,
  );
}

/** @internal */
export const GetOpenSettlementResponse$inboundSchema: z.ZodType<
  GetOpenSettlementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("settlement"),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetOpenSettlementStatus$inboundSchema.optional(),
  amount: z.lazy(() => GetOpenSettlementAmount$inboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => GetOpenSettlementPeriods$inboundSchema).optional(),
  _links: z.lazy(() => GetOpenSettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetOpenSettlementResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: GetOpenSettlementAmount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | null | undefined;
  periods?: GetOpenSettlementPeriods$Outbound | undefined;
  _links?: GetOpenSettlementLinks$Outbound | undefined;
};

/** @internal */
export const GetOpenSettlementResponse$outboundSchema: z.ZodType<
  GetOpenSettlementResponse$Outbound,
  z.ZodTypeDef,
  GetOpenSettlementResponse
> = z.object({
  resource: z.string().default("settlement"),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetOpenSettlementStatus$outboundSchema.optional(),
  amount: z.lazy(() => GetOpenSettlementAmount$outboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => GetOpenSettlementPeriods$outboundSchema).optional(),
  links: z.lazy(() => GetOpenSettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenSettlementResponse$ {
  /** @deprecated use `GetOpenSettlementResponse$inboundSchema` instead. */
  export const inboundSchema = GetOpenSettlementResponse$inboundSchema;
  /** @deprecated use `GetOpenSettlementResponse$outboundSchema` instead. */
  export const outboundSchema = GetOpenSettlementResponse$outboundSchema;
  /** @deprecated use `GetOpenSettlementResponse$Outbound` instead. */
  export type Outbound = GetOpenSettlementResponse$Outbound;
}

export function getOpenSettlementResponseToJSON(
  getOpenSettlementResponse: GetOpenSettlementResponse,
): string {
  return JSON.stringify(
    GetOpenSettlementResponse$outboundSchema.parse(getOpenSettlementResponse),
  );
}

export function getOpenSettlementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenSettlementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenSettlementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenSettlementResponse' from JSON`,
  );
}
