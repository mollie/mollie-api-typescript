/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PaymentCreateRouteRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  entityRoute?: models.EntityRoute | undefined;
};

/** @internal */
export const PaymentCreateRouteRequest$inboundSchema: z.ZodType<
  PaymentCreateRouteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  "idempotency-key": z.string().optional(),
  "entity-route": models.EntityRoute$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "entity-route": "entityRoute",
  });
});

/** @internal */
export type PaymentCreateRouteRequest$Outbound = {
  paymentId: string;
  "idempotency-key"?: string | undefined;
  "entity-route"?: models.EntityRoute$Outbound | undefined;
};

/** @internal */
export const PaymentCreateRouteRequest$outboundSchema: z.ZodType<
  PaymentCreateRouteRequest$Outbound,
  z.ZodTypeDef,
  PaymentCreateRouteRequest
> = z.object({
  paymentId: z.string(),
  idempotencyKey: z.string().optional(),
  entityRoute: models.EntityRoute$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    entityRoute: "entity-route",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentCreateRouteRequest$ {
  /** @deprecated use `PaymentCreateRouteRequest$inboundSchema` instead. */
  export const inboundSchema = PaymentCreateRouteRequest$inboundSchema;
  /** @deprecated use `PaymentCreateRouteRequest$outboundSchema` instead. */
  export const outboundSchema = PaymentCreateRouteRequest$outboundSchema;
  /** @deprecated use `PaymentCreateRouteRequest$Outbound` instead. */
  export type Outbound = PaymentCreateRouteRequest$Outbound;
}

export function paymentCreateRouteRequestToJSON(
  paymentCreateRouteRequest: PaymentCreateRouteRequest,
): string {
  return JSON.stringify(
    PaymentCreateRouteRequest$outboundSchema.parse(paymentCreateRouteRequest),
  );
}

export function paymentCreateRouteRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaymentCreateRouteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentCreateRouteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentCreateRouteRequest' from JSON`,
  );
}
