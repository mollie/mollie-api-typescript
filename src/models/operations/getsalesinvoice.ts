/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSalesInvoiceRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSalesInvoiceNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetSalesInvoiceNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSalesInvoiceNotFoundDocumentation;
};

/**
 * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type GetSalesInvoiceMetadata = {};

/**
 * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the provided details. Required for `paid` status.
 */
export type GetSalesInvoicePaymentDetails = {
  /**
   * The way through which the invoice is to be set to paid.
   *
   * @remarks
   *
   * Possible values: `manual` `payment-link` `payment`
   */
  source: string;
  /**
   * A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and `payment`.
   */
  sourceReference?: string | null | undefined;
};

/**
 * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the recipient with the provided `subject` and `body`. Required for `issued` status.
 */
export type GetSalesInvoiceEmailDetails = {
  /**
   * The subject of the email to be sent.
   */
  subject: string;
  /**
   * The body of the email to be sent. To add newline characters, you can use `\n`.
   */
  body: string;
};

export type GetSalesInvoiceRecipient = {
  /**
   * The type of recipient, either `consumer` or `business`. This will determine what further fields are required on the `recipient` object.
   *
   * @remarks
   *
   * Possible values: `consumer` `business`
   */
  type: string;
  /**
   * The title of the `consumer` type recipient, for example Mr. or Mrs..
   */
  title?: string | null | undefined;
  /**
   * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
   */
  givenName?: string | null | undefined;
  /**
   * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
   */
  familyName?: string | null | undefined;
  /**
   * The trading name of the `business` type recipient.
   */
  organizationName?: string | null | undefined;
  /**
   * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
   */
  organizationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
   */
  vatNumber?: string | null | undefined;
  /**
   * The email address of the recipient.
   */
  email: string;
  /**
   * The phone number of the recipient.
   */
  phone?: string | null | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | null | undefined;
  /**
   * A postal code.
   */
  postalCode: string;
  /**
   * The recipient's city.
   */
  city: string;
  /**
   * The recipient's region.
   */
  region?: string | null | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
  /**
   * The locale for the recipient, to be used for translations in PDF generation and payment pages.
   *
   * @remarks
   *
   * Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE`
   */
  locale: string;
};

/**
 * The price of a single item excluding VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * The unit price can be zero in case of free items.
 */
export type GetSalesInvoiceUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The discount to be applied to the line item.
 */
export type GetSalesInvoiceLineDiscount = {
  /**
   * The type of discount.
   *
   * @remarks
   *
   * Possible values: `amount` `percentage`
   */
  type: string;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type GetSalesInvoiceLine = {
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The vat rate to be applied to this line item.
   */
  vatRate: string;
  /**
   * The price of a single item excluding VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: GetSalesInvoiceUnitPrice;
  /**
   * The discount to be applied to the line item.
   */
  discount?: GetSalesInvoiceLineDiscount | null | undefined;
};

/**
 * The discount to be applied to the entire invoice, applied on top of any line item discounts.
 */
export type GetSalesInvoiceDiscount = {
  /**
   * The type of discount.
   *
   * @remarks
   *
   * Possible values: `amount` `percentage`
   */
  type: string;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

/**
 * The amount that is left to be paid.
 */
export type GetSalesInvoiceAmountDue = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT before discounts.
 */
export type GetSalesInvoiceSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount with VAT.
 */
export type GetSalesInvoiceTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total VAT amount.
 */
export type GetSalesInvoiceTotalVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT after discounts.
 */
export type GetSalesInvoiceDiscountedSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSalesInvoiceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make payment for the invoice. This is where you should redirect the customer to unless the `status` is set to `paid`.
 */
export type GetSalesInvoiceInvoicePayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL the invoice is available at, if generated.
 */
export type GetSalesInvoicePdfLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSalesInvoiceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSalesInvoiceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetSalesInvoiceSelf | undefined;
  /**
   * The URL your customer should visit to make payment for the invoice. This is where you should redirect the customer to unless the `status` is set to `paid`.
   */
  invoicePayment?: GetSalesInvoiceInvoicePayment | undefined;
  /**
   * The URL the invoice is available at, if generated.
   */
  pdfLink?: GetSalesInvoicePdfLink | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSalesInvoiceDocumentation | undefined;
};

/**
 * The Sales Invoice object.
 */
export type GetSalesInvoiceResponse = {
  /**
   * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
   */
  id?: string | undefined;
  /**
   * When issued, an invoice number will be set for the sales invoice.
   */
  invoiceNumber?: string | null | undefined;
  /**
   * The status for the invoice to end up in.
   *
   * @remarks
   *
   * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to mark it as paid. It can then subsequently be sent as well, same as with `issued`.
   *
   * A status value that cannot be set but can be returned is `canceled`, for invoices which were issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
   *
   * Dependent parameters: - `paymentDetails` is required if invoice should be set directly to `paid` - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid` - `emailDetails` optional for `issued` and `paid` to send the invoice by email
   *
   * Possible values: `draft` `issued` `paid`
   */
  status?: string | undefined;
  /**
   * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
   *
   * @remarks
   *
   * Possible values: `standard` `one-stop-shop` (default: `standard`)
   */
  vatScheme?: string | undefined;
  /**
   * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
   *
   * @remarks
   *
   * Possible values: `exclusive` `inclusive` (default: `exclusive`)
   */
  vatMode?: string | undefined;
  /**
   * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
   */
  memo?: string | null | undefined;
  /**
   * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: GetSalesInvoiceMetadata | null | undefined;
  /**
   * The payment term to be set on the invoice.
   *
   * @remarks
   *
   * Possible values: `7 days` `14 days` `30 days` `45 days` `60 days` `90 days` `120 days` (default: `30 days`)
   */
  paymentTerm?: string | null | undefined;
  /**
   * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the provided details. Required for `paid` status.
   */
  paymentDetails?: GetSalesInvoicePaymentDetails | null | undefined;
  /**
   * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the recipient with the provided `subject` and `body`. Required for `issued` status.
   */
  emailDetails?: GetSalesInvoiceEmailDetails | null | undefined;
  /**
   * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  customerId?: string | undefined;
  /**
   * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided, `customerId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  mandateId?: string | undefined;
  /**
   * An identifier tied to the recipient data. This should be a unique value based on data your system contains, so that both you and us know who we're referring to. It is a value you provide to us so that recipient management is not required to send a first invoice to a recipient.
   */
  recipientIdentifier?: string | undefined;
  recipient?: GetSalesInvoiceRecipient | null | undefined;
  /**
   * Provide the line items for the invoice. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the invoice.
   */
  lines?: Array<GetSalesInvoiceLine> | null | undefined;
  /**
   * The discount to be applied to the entire invoice, applied on top of any line item discounts.
   */
  discount?: GetSalesInvoiceDiscount | null | undefined;
  /**
   * The amount that is left to be paid.
   */
  amountDue?: GetSalesInvoiceAmountDue | undefined;
  /**
   * The total amount without VAT before discounts.
   */
  subtotalAmount?: GetSalesInvoiceSubtotalAmount | undefined;
  /**
   * The total amount with VAT.
   */
  totalAmount?: GetSalesInvoiceTotalAmount | undefined;
  /**
   * The total VAT amount.
   */
  totalVatAmount?: GetSalesInvoiceTotalVatAmount | undefined;
  /**
   * The total amount without VAT after discounts.
   */
  discountedSubtotalAmount?:
    | GetSalesInvoiceDiscountedSubtotalAmount
    | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  issuedAt?: string | null | undefined;
  /**
   * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  paidAt?: string | null | undefined;
  /**
   * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dueAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSalesInvoiceLinks | undefined;
};

/** @internal */
export const GetSalesInvoiceRequest$inboundSchema: z.ZodType<
  GetSalesInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetSalesInvoiceRequest$Outbound = {
  id: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetSalesInvoiceRequest$outboundSchema: z.ZodType<
  GetSalesInvoiceRequest$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceRequest
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceRequest$ {
  /** @deprecated use `GetSalesInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceRequest$inboundSchema;
  /** @deprecated use `GetSalesInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceRequest$outboundSchema;
  /** @deprecated use `GetSalesInvoiceRequest$Outbound` instead. */
  export type Outbound = GetSalesInvoiceRequest$Outbound;
}

export function getSalesInvoiceRequestToJSON(
  getSalesInvoiceRequest: GetSalesInvoiceRequest,
): string {
  return JSON.stringify(
    GetSalesInvoiceRequest$outboundSchema.parse(getSalesInvoiceRequest),
  );
}

export function getSalesInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceNotFoundDocumentation$inboundSchema: z.ZodType<
  GetSalesInvoiceNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSalesInvoiceNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSalesInvoiceNotFoundDocumentation$outboundSchema: z.ZodType<
  GetSalesInvoiceNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceNotFoundDocumentation$ {
  /** @deprecated use `GetSalesInvoiceNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSalesInvoiceNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetSalesInvoiceNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSalesInvoiceNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetSalesInvoiceNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetSalesInvoiceNotFoundDocumentation$Outbound;
}

export function getSalesInvoiceNotFoundDocumentationToJSON(
  getSalesInvoiceNotFoundDocumentation: GetSalesInvoiceNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetSalesInvoiceNotFoundDocumentation$outboundSchema.parse(
      getSalesInvoiceNotFoundDocumentation,
    ),
  );
}

export function getSalesInvoiceNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSalesInvoiceNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceNotFoundLinks$inboundSchema: z.ZodType<
  GetSalesInvoiceNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSalesInvoiceNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSalesInvoiceNotFoundLinks$Outbound = {
  documentation: GetSalesInvoiceNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetSalesInvoiceNotFoundLinks$outboundSchema: z.ZodType<
  GetSalesInvoiceNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSalesInvoiceNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceNotFoundLinks$ {
  /** @deprecated use `GetSalesInvoiceNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceNotFoundLinks$inboundSchema;
  /** @deprecated use `GetSalesInvoiceNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceNotFoundLinks$outboundSchema;
  /** @deprecated use `GetSalesInvoiceNotFoundLinks$Outbound` instead. */
  export type Outbound = GetSalesInvoiceNotFoundLinks$Outbound;
}

export function getSalesInvoiceNotFoundLinksToJSON(
  getSalesInvoiceNotFoundLinks: GetSalesInvoiceNotFoundLinks,
): string {
  return JSON.stringify(
    GetSalesInvoiceNotFoundLinks$outboundSchema.parse(
      getSalesInvoiceNotFoundLinks,
    ),
  );
}

export function getSalesInvoiceNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceMetadata$inboundSchema: z.ZodType<
  GetSalesInvoiceMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetSalesInvoiceMetadata$Outbound = {};

/** @internal */
export const GetSalesInvoiceMetadata$outboundSchema: z.ZodType<
  GetSalesInvoiceMetadata$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceMetadata$ {
  /** @deprecated use `GetSalesInvoiceMetadata$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceMetadata$inboundSchema;
  /** @deprecated use `GetSalesInvoiceMetadata$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceMetadata$outboundSchema;
  /** @deprecated use `GetSalesInvoiceMetadata$Outbound` instead. */
  export type Outbound = GetSalesInvoiceMetadata$Outbound;
}

export function getSalesInvoiceMetadataToJSON(
  getSalesInvoiceMetadata: GetSalesInvoiceMetadata,
): string {
  return JSON.stringify(
    GetSalesInvoiceMetadata$outboundSchema.parse(getSalesInvoiceMetadata),
  );
}

export function getSalesInvoiceMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceMetadata' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoicePaymentDetails$inboundSchema: z.ZodType<
  GetSalesInvoicePaymentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  sourceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetSalesInvoicePaymentDetails$Outbound = {
  source: string;
  sourceReference?: string | null | undefined;
};

/** @internal */
export const GetSalesInvoicePaymentDetails$outboundSchema: z.ZodType<
  GetSalesInvoicePaymentDetails$Outbound,
  z.ZodTypeDef,
  GetSalesInvoicePaymentDetails
> = z.object({
  source: z.string(),
  sourceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoicePaymentDetails$ {
  /** @deprecated use `GetSalesInvoicePaymentDetails$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoicePaymentDetails$inboundSchema;
  /** @deprecated use `GetSalesInvoicePaymentDetails$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoicePaymentDetails$outboundSchema;
  /** @deprecated use `GetSalesInvoicePaymentDetails$Outbound` instead. */
  export type Outbound = GetSalesInvoicePaymentDetails$Outbound;
}

export function getSalesInvoicePaymentDetailsToJSON(
  getSalesInvoicePaymentDetails: GetSalesInvoicePaymentDetails,
): string {
  return JSON.stringify(
    GetSalesInvoicePaymentDetails$outboundSchema.parse(
      getSalesInvoicePaymentDetails,
    ),
  );
}

export function getSalesInvoicePaymentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoicePaymentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoicePaymentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoicePaymentDetails' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceEmailDetails$inboundSchema: z.ZodType<
  GetSalesInvoiceEmailDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/** @internal */
export type GetSalesInvoiceEmailDetails$Outbound = {
  subject: string;
  body: string;
};

/** @internal */
export const GetSalesInvoiceEmailDetails$outboundSchema: z.ZodType<
  GetSalesInvoiceEmailDetails$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceEmailDetails
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceEmailDetails$ {
  /** @deprecated use `GetSalesInvoiceEmailDetails$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceEmailDetails$inboundSchema;
  /** @deprecated use `GetSalesInvoiceEmailDetails$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceEmailDetails$outboundSchema;
  /** @deprecated use `GetSalesInvoiceEmailDetails$Outbound` instead. */
  export type Outbound = GetSalesInvoiceEmailDetails$Outbound;
}

export function getSalesInvoiceEmailDetailsToJSON(
  getSalesInvoiceEmailDetails: GetSalesInvoiceEmailDetails,
): string {
  return JSON.stringify(
    GetSalesInvoiceEmailDetails$outboundSchema.parse(
      getSalesInvoiceEmailDetails,
    ),
  );
}

export function getSalesInvoiceEmailDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceEmailDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceEmailDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceEmailDetails' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceRecipient$inboundSchema: z.ZodType<
  GetSalesInvoiceRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: z.string(),
});

/** @internal */
export type GetSalesInvoiceRecipient$Outbound = {
  type: string;
  title?: string | null | undefined;
  givenName?: string | null | undefined;
  familyName?: string | null | undefined;
  organizationName?: string | null | undefined;
  organizationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
  email: string;
  phone?: string | null | undefined;
  streetAndNumber: string;
  streetAdditional?: string | null | undefined;
  postalCode: string;
  city: string;
  region?: string | null | undefined;
  country: string;
  locale: string;
};

/** @internal */
export const GetSalesInvoiceRecipient$outboundSchema: z.ZodType<
  GetSalesInvoiceRecipient$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceRecipient
> = z.object({
  type: z.string(),
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceRecipient$ {
  /** @deprecated use `GetSalesInvoiceRecipient$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceRecipient$inboundSchema;
  /** @deprecated use `GetSalesInvoiceRecipient$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceRecipient$outboundSchema;
  /** @deprecated use `GetSalesInvoiceRecipient$Outbound` instead. */
  export type Outbound = GetSalesInvoiceRecipient$Outbound;
}

export function getSalesInvoiceRecipientToJSON(
  getSalesInvoiceRecipient: GetSalesInvoiceRecipient,
): string {
  return JSON.stringify(
    GetSalesInvoiceRecipient$outboundSchema.parse(getSalesInvoiceRecipient),
  );
}

export function getSalesInvoiceRecipientFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceRecipient' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceUnitPrice$inboundSchema: z.ZodType<
  GetSalesInvoiceUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceUnitPrice$outboundSchema: z.ZodType<
  GetSalesInvoiceUnitPrice$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceUnitPrice$ {
  /** @deprecated use `GetSalesInvoiceUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceUnitPrice$inboundSchema;
  /** @deprecated use `GetSalesInvoiceUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceUnitPrice$outboundSchema;
  /** @deprecated use `GetSalesInvoiceUnitPrice$Outbound` instead. */
  export type Outbound = GetSalesInvoiceUnitPrice$Outbound;
}

export function getSalesInvoiceUnitPriceToJSON(
  getSalesInvoiceUnitPrice: GetSalesInvoiceUnitPrice,
): string {
  return JSON.stringify(
    GetSalesInvoiceUnitPrice$outboundSchema.parse(getSalesInvoiceUnitPrice),
  );
}

export function getSalesInvoiceUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceLineDiscount$inboundSchema: z.ZodType<
  GetSalesInvoiceLineDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceLineDiscount$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceLineDiscount$outboundSchema: z.ZodType<
  GetSalesInvoiceLineDiscount$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceLineDiscount
> = z.object({
  type: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceLineDiscount$ {
  /** @deprecated use `GetSalesInvoiceLineDiscount$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceLineDiscount$inboundSchema;
  /** @deprecated use `GetSalesInvoiceLineDiscount$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceLineDiscount$outboundSchema;
  /** @deprecated use `GetSalesInvoiceLineDiscount$Outbound` instead. */
  export type Outbound = GetSalesInvoiceLineDiscount$Outbound;
}

export function getSalesInvoiceLineDiscountToJSON(
  getSalesInvoiceLineDiscount: GetSalesInvoiceLineDiscount,
): string {
  return JSON.stringify(
    GetSalesInvoiceLineDiscount$outboundSchema.parse(
      getSalesInvoiceLineDiscount,
    ),
  );
}

export function getSalesInvoiceLineDiscountFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceLineDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceLineDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceLineDiscount' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceLine$inboundSchema: z.ZodType<
  GetSalesInvoiceLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => GetSalesInvoiceUnitPrice$inboundSchema),
  discount: z.nullable(z.lazy(() => GetSalesInvoiceLineDiscount$inboundSchema))
    .optional(),
});

/** @internal */
export type GetSalesInvoiceLine$Outbound = {
  description: string;
  quantity: number;
  vatRate: string;
  unitPrice: GetSalesInvoiceUnitPrice$Outbound;
  discount?: GetSalesInvoiceLineDiscount$Outbound | null | undefined;
};

/** @internal */
export const GetSalesInvoiceLine$outboundSchema: z.ZodType<
  GetSalesInvoiceLine$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceLine
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => GetSalesInvoiceUnitPrice$outboundSchema),
  discount: z.nullable(z.lazy(() => GetSalesInvoiceLineDiscount$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceLine$ {
  /** @deprecated use `GetSalesInvoiceLine$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceLine$inboundSchema;
  /** @deprecated use `GetSalesInvoiceLine$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceLine$outboundSchema;
  /** @deprecated use `GetSalesInvoiceLine$Outbound` instead. */
  export type Outbound = GetSalesInvoiceLine$Outbound;
}

export function getSalesInvoiceLineToJSON(
  getSalesInvoiceLine: GetSalesInvoiceLine,
): string {
  return JSON.stringify(
    GetSalesInvoiceLine$outboundSchema.parse(getSalesInvoiceLine),
  );
}

export function getSalesInvoiceLineFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceLine' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceDiscount$inboundSchema: z.ZodType<
  GetSalesInvoiceDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceDiscount$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceDiscount$outboundSchema: z.ZodType<
  GetSalesInvoiceDiscount$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceDiscount
> = z.object({
  type: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceDiscount$ {
  /** @deprecated use `GetSalesInvoiceDiscount$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceDiscount$inboundSchema;
  /** @deprecated use `GetSalesInvoiceDiscount$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceDiscount$outboundSchema;
  /** @deprecated use `GetSalesInvoiceDiscount$Outbound` instead. */
  export type Outbound = GetSalesInvoiceDiscount$Outbound;
}

export function getSalesInvoiceDiscountToJSON(
  getSalesInvoiceDiscount: GetSalesInvoiceDiscount,
): string {
  return JSON.stringify(
    GetSalesInvoiceDiscount$outboundSchema.parse(getSalesInvoiceDiscount),
  );
}

export function getSalesInvoiceDiscountFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceDiscount' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceAmountDue$inboundSchema: z.ZodType<
  GetSalesInvoiceAmountDue,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceAmountDue$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceAmountDue$outboundSchema: z.ZodType<
  GetSalesInvoiceAmountDue$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceAmountDue
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceAmountDue$ {
  /** @deprecated use `GetSalesInvoiceAmountDue$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceAmountDue$inboundSchema;
  /** @deprecated use `GetSalesInvoiceAmountDue$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceAmountDue$outboundSchema;
  /** @deprecated use `GetSalesInvoiceAmountDue$Outbound` instead. */
  export type Outbound = GetSalesInvoiceAmountDue$Outbound;
}

export function getSalesInvoiceAmountDueToJSON(
  getSalesInvoiceAmountDue: GetSalesInvoiceAmountDue,
): string {
  return JSON.stringify(
    GetSalesInvoiceAmountDue$outboundSchema.parse(getSalesInvoiceAmountDue),
  );
}

export function getSalesInvoiceAmountDueFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceAmountDue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceAmountDue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceAmountDue' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceSubtotalAmount$inboundSchema: z.ZodType<
  GetSalesInvoiceSubtotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceSubtotalAmount$outboundSchema: z.ZodType<
  GetSalesInvoiceSubtotalAmount$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceSubtotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceSubtotalAmount$ {
  /** @deprecated use `GetSalesInvoiceSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceSubtotalAmount$inboundSchema;
  /** @deprecated use `GetSalesInvoiceSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceSubtotalAmount$outboundSchema;
  /** @deprecated use `GetSalesInvoiceSubtotalAmount$Outbound` instead. */
  export type Outbound = GetSalesInvoiceSubtotalAmount$Outbound;
}

export function getSalesInvoiceSubtotalAmountToJSON(
  getSalesInvoiceSubtotalAmount: GetSalesInvoiceSubtotalAmount,
): string {
  return JSON.stringify(
    GetSalesInvoiceSubtotalAmount$outboundSchema.parse(
      getSalesInvoiceSubtotalAmount,
    ),
  );
}

export function getSalesInvoiceSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceSubtotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceSubtotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceTotalAmount$inboundSchema: z.ZodType<
  GetSalesInvoiceTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceTotalAmount$outboundSchema: z.ZodType<
  GetSalesInvoiceTotalAmount$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceTotalAmount$ {
  /** @deprecated use `GetSalesInvoiceTotalAmount$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceTotalAmount$inboundSchema;
  /** @deprecated use `GetSalesInvoiceTotalAmount$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceTotalAmount$outboundSchema;
  /** @deprecated use `GetSalesInvoiceTotalAmount$Outbound` instead. */
  export type Outbound = GetSalesInvoiceTotalAmount$Outbound;
}

export function getSalesInvoiceTotalAmountToJSON(
  getSalesInvoiceTotalAmount: GetSalesInvoiceTotalAmount,
): string {
  return JSON.stringify(
    GetSalesInvoiceTotalAmount$outboundSchema.parse(getSalesInvoiceTotalAmount),
  );
}

export function getSalesInvoiceTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceTotalAmount' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceTotalVatAmount$inboundSchema: z.ZodType<
  GetSalesInvoiceTotalVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceTotalVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceTotalVatAmount$outboundSchema: z.ZodType<
  GetSalesInvoiceTotalVatAmount$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceTotalVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceTotalVatAmount$ {
  /** @deprecated use `GetSalesInvoiceTotalVatAmount$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceTotalVatAmount$inboundSchema;
  /** @deprecated use `GetSalesInvoiceTotalVatAmount$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceTotalVatAmount$outboundSchema;
  /** @deprecated use `GetSalesInvoiceTotalVatAmount$Outbound` instead. */
  export type Outbound = GetSalesInvoiceTotalVatAmount$Outbound;
}

export function getSalesInvoiceTotalVatAmountToJSON(
  getSalesInvoiceTotalVatAmount: GetSalesInvoiceTotalVatAmount,
): string {
  return JSON.stringify(
    GetSalesInvoiceTotalVatAmount$outboundSchema.parse(
      getSalesInvoiceTotalVatAmount,
    ),
  );
}

export function getSalesInvoiceTotalVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceTotalVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceTotalVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceTotalVatAmount' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceDiscountedSubtotalAmount$inboundSchema: z.ZodType<
  GetSalesInvoiceDiscountedSubtotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSalesInvoiceDiscountedSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSalesInvoiceDiscountedSubtotalAmount$outboundSchema: z.ZodType<
  GetSalesInvoiceDiscountedSubtotalAmount$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceDiscountedSubtotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceDiscountedSubtotalAmount$ {
  /** @deprecated use `GetSalesInvoiceDiscountedSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSalesInvoiceDiscountedSubtotalAmount$inboundSchema;
  /** @deprecated use `GetSalesInvoiceDiscountedSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSalesInvoiceDiscountedSubtotalAmount$outboundSchema;
  /** @deprecated use `GetSalesInvoiceDiscountedSubtotalAmount$Outbound` instead. */
  export type Outbound = GetSalesInvoiceDiscountedSubtotalAmount$Outbound;
}

export function getSalesInvoiceDiscountedSubtotalAmountToJSON(
  getSalesInvoiceDiscountedSubtotalAmount:
    GetSalesInvoiceDiscountedSubtotalAmount,
): string {
  return JSON.stringify(
    GetSalesInvoiceDiscountedSubtotalAmount$outboundSchema.parse(
      getSalesInvoiceDiscountedSubtotalAmount,
    ),
  );
}

export function getSalesInvoiceDiscountedSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSalesInvoiceDiscountedSubtotalAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSalesInvoiceDiscountedSubtotalAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSalesInvoiceDiscountedSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceSelf$inboundSchema: z.ZodType<
  GetSalesInvoiceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSalesInvoiceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSalesInvoiceSelf$outboundSchema: z.ZodType<
  GetSalesInvoiceSelf$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceSelf$ {
  /** @deprecated use `GetSalesInvoiceSelf$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceSelf$inboundSchema;
  /** @deprecated use `GetSalesInvoiceSelf$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceSelf$outboundSchema;
  /** @deprecated use `GetSalesInvoiceSelf$Outbound` instead. */
  export type Outbound = GetSalesInvoiceSelf$Outbound;
}

export function getSalesInvoiceSelfToJSON(
  getSalesInvoiceSelf: GetSalesInvoiceSelf,
): string {
  return JSON.stringify(
    GetSalesInvoiceSelf$outboundSchema.parse(getSalesInvoiceSelf),
  );
}

export function getSalesInvoiceSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceSelf' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceInvoicePayment$inboundSchema: z.ZodType<
  GetSalesInvoiceInvoicePayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSalesInvoiceInvoicePayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSalesInvoiceInvoicePayment$outboundSchema: z.ZodType<
  GetSalesInvoiceInvoicePayment$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceInvoicePayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceInvoicePayment$ {
  /** @deprecated use `GetSalesInvoiceInvoicePayment$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceInvoicePayment$inboundSchema;
  /** @deprecated use `GetSalesInvoiceInvoicePayment$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceInvoicePayment$outboundSchema;
  /** @deprecated use `GetSalesInvoiceInvoicePayment$Outbound` instead. */
  export type Outbound = GetSalesInvoiceInvoicePayment$Outbound;
}

export function getSalesInvoiceInvoicePaymentToJSON(
  getSalesInvoiceInvoicePayment: GetSalesInvoiceInvoicePayment,
): string {
  return JSON.stringify(
    GetSalesInvoiceInvoicePayment$outboundSchema.parse(
      getSalesInvoiceInvoicePayment,
    ),
  );
}

export function getSalesInvoiceInvoicePaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceInvoicePayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceInvoicePayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceInvoicePayment' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoicePdfLink$inboundSchema: z.ZodType<
  GetSalesInvoicePdfLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSalesInvoicePdfLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSalesInvoicePdfLink$outboundSchema: z.ZodType<
  GetSalesInvoicePdfLink$Outbound,
  z.ZodTypeDef,
  GetSalesInvoicePdfLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoicePdfLink$ {
  /** @deprecated use `GetSalesInvoicePdfLink$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoicePdfLink$inboundSchema;
  /** @deprecated use `GetSalesInvoicePdfLink$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoicePdfLink$outboundSchema;
  /** @deprecated use `GetSalesInvoicePdfLink$Outbound` instead. */
  export type Outbound = GetSalesInvoicePdfLink$Outbound;
}

export function getSalesInvoicePdfLinkToJSON(
  getSalesInvoicePdfLink: GetSalesInvoicePdfLink,
): string {
  return JSON.stringify(
    GetSalesInvoicePdfLink$outboundSchema.parse(getSalesInvoicePdfLink),
  );
}

export function getSalesInvoicePdfLinkFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoicePdfLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoicePdfLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoicePdfLink' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceDocumentation$inboundSchema: z.ZodType<
  GetSalesInvoiceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSalesInvoiceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSalesInvoiceDocumentation$outboundSchema: z.ZodType<
  GetSalesInvoiceDocumentation$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceDocumentation$ {
  /** @deprecated use `GetSalesInvoiceDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceDocumentation$inboundSchema;
  /** @deprecated use `GetSalesInvoiceDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceDocumentation$outboundSchema;
  /** @deprecated use `GetSalesInvoiceDocumentation$Outbound` instead. */
  export type Outbound = GetSalesInvoiceDocumentation$Outbound;
}

export function getSalesInvoiceDocumentationToJSON(
  getSalesInvoiceDocumentation: GetSalesInvoiceDocumentation,
): string {
  return JSON.stringify(
    GetSalesInvoiceDocumentation$outboundSchema.parse(
      getSalesInvoiceDocumentation,
    ),
  );
}

export function getSalesInvoiceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceLinks$inboundSchema: z.ZodType<
  GetSalesInvoiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSalesInvoiceSelf$inboundSchema).optional(),
  invoicePayment: z.lazy(() => GetSalesInvoiceInvoicePayment$inboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => GetSalesInvoicePdfLink$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSalesInvoiceDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSalesInvoiceLinks$Outbound = {
  self?: GetSalesInvoiceSelf$Outbound | undefined;
  invoicePayment?: GetSalesInvoiceInvoicePayment$Outbound | undefined;
  pdfLink?: GetSalesInvoicePdfLink$Outbound | null | undefined;
  documentation?: GetSalesInvoiceDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSalesInvoiceLinks$outboundSchema: z.ZodType<
  GetSalesInvoiceLinks$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceLinks
> = z.object({
  self: z.lazy(() => GetSalesInvoiceSelf$outboundSchema).optional(),
  invoicePayment: z.lazy(() => GetSalesInvoiceInvoicePayment$outboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => GetSalesInvoicePdfLink$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSalesInvoiceDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceLinks$ {
  /** @deprecated use `GetSalesInvoiceLinks$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceLinks$inboundSchema;
  /** @deprecated use `GetSalesInvoiceLinks$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceLinks$outboundSchema;
  /** @deprecated use `GetSalesInvoiceLinks$Outbound` instead. */
  export type Outbound = GetSalesInvoiceLinks$Outbound;
}

export function getSalesInvoiceLinksToJSON(
  getSalesInvoiceLinks: GetSalesInvoiceLinks,
): string {
  return JSON.stringify(
    GetSalesInvoiceLinks$outboundSchema.parse(getSalesInvoiceLinks),
  );
}

export function getSalesInvoiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceLinks' from JSON`,
  );
}

/** @internal */
export const GetSalesInvoiceResponse$inboundSchema: z.ZodType<
  GetSalesInvoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("sales-invoice"),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  vatScheme: z.string().optional(),
  vatMode: z.string().optional(),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => GetSalesInvoiceMetadata$inboundSchema))
    .optional(),
  paymentTerm: z.nullable(z.string()).optional(),
  paymentDetails: z.nullable(
    z.lazy(() => GetSalesInvoicePaymentDetails$inboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => GetSalesInvoiceEmailDetails$inboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(z.lazy(() => GetSalesInvoiceRecipient$inboundSchema))
    .optional(),
  lines: z.nullable(z.array(z.lazy(() => GetSalesInvoiceLine$inboundSchema)))
    .optional(),
  discount: z.nullable(z.lazy(() => GetSalesInvoiceDiscount$inboundSchema))
    .optional(),
  amountDue: z.lazy(() => GetSalesInvoiceAmountDue$inboundSchema).optional(),
  subtotalAmount: z.lazy(() => GetSalesInvoiceSubtotalAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetSalesInvoiceTotalAmount$inboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => GetSalesInvoiceTotalVatAmount$inboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    GetSalesInvoiceDiscountedSubtotalAmount$inboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetSalesInvoiceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSalesInvoiceResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  invoiceNumber?: string | null | undefined;
  status?: string | undefined;
  vatScheme?: string | undefined;
  vatMode?: string | undefined;
  memo?: string | null | undefined;
  metadata?: GetSalesInvoiceMetadata$Outbound | null | undefined;
  paymentTerm?: string | null | undefined;
  paymentDetails?: GetSalesInvoicePaymentDetails$Outbound | null | undefined;
  emailDetails?: GetSalesInvoiceEmailDetails$Outbound | null | undefined;
  customerId?: string | undefined;
  mandateId?: string | undefined;
  recipientIdentifier?: string | undefined;
  recipient?: GetSalesInvoiceRecipient$Outbound | null | undefined;
  lines?: Array<GetSalesInvoiceLine$Outbound> | null | undefined;
  discount?: GetSalesInvoiceDiscount$Outbound | null | undefined;
  amountDue?: GetSalesInvoiceAmountDue$Outbound | undefined;
  subtotalAmount?: GetSalesInvoiceSubtotalAmount$Outbound | undefined;
  totalAmount?: GetSalesInvoiceTotalAmount$Outbound | undefined;
  totalVatAmount?: GetSalesInvoiceTotalVatAmount$Outbound | undefined;
  discountedSubtotalAmount?:
    | GetSalesInvoiceDiscountedSubtotalAmount$Outbound
    | undefined;
  createdAt?: string | undefined;
  issuedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  dueAt?: string | null | undefined;
  _links?: GetSalesInvoiceLinks$Outbound | undefined;
};

/** @internal */
export const GetSalesInvoiceResponse$outboundSchema: z.ZodType<
  GetSalesInvoiceResponse$Outbound,
  z.ZodTypeDef,
  GetSalesInvoiceResponse
> = z.object({
  resource: z.string().default("sales-invoice"),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  vatScheme: z.string().optional(),
  vatMode: z.string().optional(),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => GetSalesInvoiceMetadata$outboundSchema))
    .optional(),
  paymentTerm: z.nullable(z.string()).optional(),
  paymentDetails: z.nullable(
    z.lazy(() => GetSalesInvoicePaymentDetails$outboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => GetSalesInvoiceEmailDetails$outboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(z.lazy(() => GetSalesInvoiceRecipient$outboundSchema))
    .optional(),
  lines: z.nullable(z.array(z.lazy(() => GetSalesInvoiceLine$outboundSchema)))
    .optional(),
  discount: z.nullable(z.lazy(() => GetSalesInvoiceDiscount$outboundSchema))
    .optional(),
  amountDue: z.lazy(() => GetSalesInvoiceAmountDue$outboundSchema).optional(),
  subtotalAmount: z.lazy(() => GetSalesInvoiceSubtotalAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetSalesInvoiceTotalAmount$outboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => GetSalesInvoiceTotalVatAmount$outboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    GetSalesInvoiceDiscountedSubtotalAmount$outboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetSalesInvoiceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSalesInvoiceResponse$ {
  /** @deprecated use `GetSalesInvoiceResponse$inboundSchema` instead. */
  export const inboundSchema = GetSalesInvoiceResponse$inboundSchema;
  /** @deprecated use `GetSalesInvoiceResponse$outboundSchema` instead. */
  export const outboundSchema = GetSalesInvoiceResponse$outboundSchema;
  /** @deprecated use `GetSalesInvoiceResponse$Outbound` instead. */
  export type Outbound = GetSalesInvoiceResponse$Outbound;
}

export function getSalesInvoiceResponseToJSON(
  getSalesInvoiceResponse: GetSalesInvoiceResponse,
): string {
  return JSON.stringify(
    GetSalesInvoiceResponse$outboundSchema.parse(getSalesInvoiceResponse),
  );
}

export function getSalesInvoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSalesInvoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSalesInvoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSalesInvoiceResponse' from JSON`,
  );
}
