/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListSubscriptionPaymentsRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * Provide the ID of the related subscription.
   */
  subscriptionId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
   *
   * @remarks
   * the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.ListSort | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve the resources for.
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
   * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListSubscriptionPaymentsEmbedded = {
  /**
   * An array of payment objects.
   */
  payments?: Array<models.PaymentResponse> | undefined;
};

/**
 * A list of payment objects.
 */
export type ListSubscriptionPaymentsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListSubscriptionPaymentsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListSubscriptionPaymentsRequest$inboundSchema: z.ZodType<
  ListSubscriptionPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  subscriptionId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$inboundSchema).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListSubscriptionPaymentsRequest$Outbound = {
  customerId: string;
  subscriptionId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListSubscriptionPaymentsRequest$outboundSchema: z.ZodType<
  ListSubscriptionPaymentsRequest$Outbound,
  z.ZodTypeDef,
  ListSubscriptionPaymentsRequest
> = z.object({
  customerId: z.string(),
  subscriptionId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$outboundSchema).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubscriptionPaymentsRequest$ {
  /** @deprecated use `ListSubscriptionPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSubscriptionPaymentsRequest$inboundSchema;
  /** @deprecated use `ListSubscriptionPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSubscriptionPaymentsRequest$outboundSchema;
  /** @deprecated use `ListSubscriptionPaymentsRequest$Outbound` instead. */
  export type Outbound = ListSubscriptionPaymentsRequest$Outbound;
}

export function listSubscriptionPaymentsRequestToJSON(
  listSubscriptionPaymentsRequest: ListSubscriptionPaymentsRequest,
): string {
  return JSON.stringify(
    ListSubscriptionPaymentsRequest$outboundSchema.parse(
      listSubscriptionPaymentsRequest,
    ),
  );
}

export function listSubscriptionPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSubscriptionPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSubscriptionPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSubscriptionPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const ListSubscriptionPaymentsEmbedded$inboundSchema: z.ZodType<
  ListSubscriptionPaymentsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  payments: z.array(models.PaymentResponse$inboundSchema).optional(),
});

/** @internal */
export type ListSubscriptionPaymentsEmbedded$Outbound = {
  payments?: Array<models.PaymentResponse$Outbound> | undefined;
};

/** @internal */
export const ListSubscriptionPaymentsEmbedded$outboundSchema: z.ZodType<
  ListSubscriptionPaymentsEmbedded$Outbound,
  z.ZodTypeDef,
  ListSubscriptionPaymentsEmbedded
> = z.object({
  payments: z.array(models.PaymentResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubscriptionPaymentsEmbedded$ {
  /** @deprecated use `ListSubscriptionPaymentsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSubscriptionPaymentsEmbedded$inboundSchema;
  /** @deprecated use `ListSubscriptionPaymentsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSubscriptionPaymentsEmbedded$outboundSchema;
  /** @deprecated use `ListSubscriptionPaymentsEmbedded$Outbound` instead. */
  export type Outbound = ListSubscriptionPaymentsEmbedded$Outbound;
}

export function listSubscriptionPaymentsEmbeddedToJSON(
  listSubscriptionPaymentsEmbedded: ListSubscriptionPaymentsEmbedded,
): string {
  return JSON.stringify(
    ListSubscriptionPaymentsEmbedded$outboundSchema.parse(
      listSubscriptionPaymentsEmbedded,
    ),
  );
}

export function listSubscriptionPaymentsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSubscriptionPaymentsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSubscriptionPaymentsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSubscriptionPaymentsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSubscriptionPaymentsResponse$inboundSchema: z.ZodType<
  ListSubscriptionPaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListSubscriptionPaymentsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSubscriptionPaymentsResponse$Outbound = {
  count: number;
  _embedded: ListSubscriptionPaymentsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListSubscriptionPaymentsResponse$outboundSchema: z.ZodType<
  ListSubscriptionPaymentsResponse$Outbound,
  z.ZodTypeDef,
  ListSubscriptionPaymentsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListSubscriptionPaymentsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubscriptionPaymentsResponse$ {
  /** @deprecated use `ListSubscriptionPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSubscriptionPaymentsResponse$inboundSchema;
  /** @deprecated use `ListSubscriptionPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSubscriptionPaymentsResponse$outboundSchema;
  /** @deprecated use `ListSubscriptionPaymentsResponse$Outbound` instead. */
  export type Outbound = ListSubscriptionPaymentsResponse$Outbound;
}

export function listSubscriptionPaymentsResponseToJSON(
  listSubscriptionPaymentsResponse: ListSubscriptionPaymentsResponse,
): string {
  return JSON.stringify(
    ListSubscriptionPaymentsResponse$outboundSchema.parse(
      listSubscriptionPaymentsResponse,
    ),
  );
}

export function listSubscriptionPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSubscriptionPaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSubscriptionPaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSubscriptionPaymentsResponse' from JSON`,
  );
}
