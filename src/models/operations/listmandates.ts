/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export const ListMandatesSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export type ListMandatesSort = ClosedEnum<typeof ListMandatesSort>;

export type ListMandatesRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: ListMandatesSort | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListMandatesNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListMandatesNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListMandatesNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListMandatesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListMandatesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListMandatesBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const ListMandatesMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type ListMandatesMode = ClosedEnum<typeof ListMandatesMode>;

/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export const ListMandatesMethod = {
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Paypal: "paypal",
} as const;
/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export type ListMandatesMethod = ClosedEnum<typeof ListMandatesMethod>;

/**
 * The card's label. Available for card mandates, if the card label could be detected.
 */
export const ListMandatesCardLabel = {
  AmericanExpress: "American Express",
  CartaSi: "Carta Si",
  CarteBleue: "Carte Bleue",
  Dankort: "Dankort",
  DinersClub: "Diners Club",
  Discover: "Discover",
  Jcb: "JCB",
  Laser: "Laser",
  Maestro: "Maestro",
  Mastercard: "Mastercard",
  Unionpay: "Unionpay",
  Visa: "Visa",
} as const;
/**
 * The card's label. Available for card mandates, if the card label could be detected.
 */
export type ListMandatesCardLabel = ClosedEnum<typeof ListMandatesCardLabel>;

export type ListMandatesDetails = {
  /**
   * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
   */
  consumerName?: string | null | undefined;
  /**
   * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
   */
  consumerAccount?: string | null | undefined;
  /**
   * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
   */
  consumerBic?: string | null | undefined;
  /**
   * The card holder's name. Available for card mandates.
   */
  cardHolder?: string | null | undefined;
  /**
   * The last four digits of the card number. Available for card mandates.
   */
  cardNumber?: string | null | undefined;
  /**
   * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
   */
  cardExpiryDate?: string | null | undefined;
  /**
   * The card's label. Available for card mandates, if the card label could be detected.
   */
  cardLabel?: ListMandatesCardLabel | null | undefined;
  /**
   * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify
   *
   * @remarks
   * returning customers.
   */
  cardFingerprint?: string | null | undefined;
};

/**
 * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
 *
 * @remarks
 * when we did not received the IBAN yet from the first payment.
 */
export const ListMandatesStatus = {
  Valid: "valid",
  Pending: "pending",
  Invalid: "invalid",
} as const;
/**
 * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
 *
 * @remarks
 * when we did not received the IBAN yet from the first payment.
 */
export type ListMandatesStatus = ClosedEnum<typeof ListMandatesStatus>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type MandateSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer) that this mandate belongs to.
 */
export type ListMandatesCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type MandateDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type MandateLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: MandateSelf;
  /**
   * The API resource URL of the [customer](get-customer) that this mandate belongs to.
   */
  customer: ListMandatesCustomer;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: MandateDocumentation;
};

export type ListMandatesMandate = {
  /**
   * Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: ListMandatesMode;
  /**
   * Payment method of the mandate.
   *
   * @remarks
   *
   * SEPA Direct Debit and PayPal mandates can be created directly.
   */
  method: ListMandatesMethod;
  details: ListMandatesDetails;
  /**
   * The date when the mandate was signed in `YYYY-MM-DD` format.
   */
  signatureDate: string | null;
  /**
   * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
   *
   * @remarks
   * decline Direct Debit payments if the mandate reference is not unique.
   */
  mandateReference: string | null;
  /**
   * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
   *
   * @remarks
   * when we did not received the IBAN yet from the first payment.
   */
  status: ListMandatesStatus;
  /**
   * The identifier referring to the [customer](get-customer) this mandate was linked to.
   */
  customerId: string;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: MandateLinks;
};

export type ListMandatesEmbedded = {
  /**
   * An array of mandate objects.
   */
  mandates?: Array<ListMandatesMandate> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListMandatesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListMandatesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListMandatesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListMandatesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListMandatesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListMandatesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListMandatesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListMandatesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListMandatesDocumentation | undefined;
};

/**
 * A list of mandate objects.
 */
export type ListMandatesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListMandatesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListMandatesLinks | undefined;
};

/** @internal */
export const ListMandatesSort$inboundSchema: z.ZodNativeEnum<
  typeof ListMandatesSort
> = z.nativeEnum(ListMandatesSort);

/** @internal */
export const ListMandatesSort$outboundSchema: z.ZodNativeEnum<
  typeof ListMandatesSort
> = ListMandatesSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesSort$ {
  /** @deprecated use `ListMandatesSort$inboundSchema` instead. */
  export const inboundSchema = ListMandatesSort$inboundSchema;
  /** @deprecated use `ListMandatesSort$outboundSchema` instead. */
  export const outboundSchema = ListMandatesSort$outboundSchema;
}

/** @internal */
export const ListMandatesRequest$inboundSchema: z.ZodType<
  ListMandatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(ListMandatesSort$inboundSchema.default("desc")),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListMandatesRequest$Outbound = {
  customerId: string;
  from?: string | undefined;
  limit: number | null;
  sort: string | null;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListMandatesRequest$outboundSchema: z.ZodType<
  ListMandatesRequest$Outbound,
  z.ZodTypeDef,
  ListMandatesRequest
> = z.object({
  customerId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(ListMandatesSort$outboundSchema.default("desc")),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesRequest$ {
  /** @deprecated use `ListMandatesRequest$inboundSchema` instead. */
  export const inboundSchema = ListMandatesRequest$inboundSchema;
  /** @deprecated use `ListMandatesRequest$outboundSchema` instead. */
  export const outboundSchema = ListMandatesRequest$outboundSchema;
  /** @deprecated use `ListMandatesRequest$Outbound` instead. */
  export type Outbound = ListMandatesRequest$Outbound;
}

export function listMandatesRequestToJSON(
  listMandatesRequest: ListMandatesRequest,
): string {
  return JSON.stringify(
    ListMandatesRequest$outboundSchema.parse(listMandatesRequest),
  );
}

export function listMandatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesRequest' from JSON`,
  );
}

/** @internal */
export const ListMandatesNotFoundDocumentation$inboundSchema: z.ZodType<
  ListMandatesNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListMandatesNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListMandatesNotFoundDocumentation$outboundSchema: z.ZodType<
  ListMandatesNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListMandatesNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesNotFoundDocumentation$ {
  /** @deprecated use `ListMandatesNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListMandatesNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListMandatesNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListMandatesNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListMandatesNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListMandatesNotFoundDocumentation$Outbound;
}

export function listMandatesNotFoundDocumentationToJSON(
  listMandatesNotFoundDocumentation: ListMandatesNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListMandatesNotFoundDocumentation$outboundSchema.parse(
      listMandatesNotFoundDocumentation,
    ),
  );
}

export function listMandatesNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListMandatesNotFoundLinks$inboundSchema: z.ZodType<
  ListMandatesNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListMandatesNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type ListMandatesNotFoundLinks$Outbound = {
  documentation: ListMandatesNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListMandatesNotFoundLinks$outboundSchema: z.ZodType<
  ListMandatesNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListMandatesNotFoundLinks
> = z.object({
  documentation: z.lazy(() => ListMandatesNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesNotFoundLinks$ {
  /** @deprecated use `ListMandatesNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListMandatesNotFoundLinks$inboundSchema;
  /** @deprecated use `ListMandatesNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListMandatesNotFoundLinks$outboundSchema;
  /** @deprecated use `ListMandatesNotFoundLinks$Outbound` instead. */
  export type Outbound = ListMandatesNotFoundLinks$Outbound;
}

export function listMandatesNotFoundLinksToJSON(
  listMandatesNotFoundLinks: ListMandatesNotFoundLinks,
): string {
  return JSON.stringify(
    ListMandatesNotFoundLinks$outboundSchema.parse(listMandatesNotFoundLinks),
  );
}

export function listMandatesNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListMandatesBadRequestDocumentation$inboundSchema: z.ZodType<
  ListMandatesBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListMandatesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListMandatesBadRequestDocumentation$outboundSchema: z.ZodType<
  ListMandatesBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListMandatesBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesBadRequestDocumentation$ {
  /** @deprecated use `ListMandatesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListMandatesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListMandatesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListMandatesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListMandatesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListMandatesBadRequestDocumentation$Outbound;
}

export function listMandatesBadRequestDocumentationToJSON(
  listMandatesBadRequestDocumentation: ListMandatesBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListMandatesBadRequestDocumentation$outboundSchema.parse(
      listMandatesBadRequestDocumentation,
    ),
  );
}

export function listMandatesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListMandatesBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListMandatesBadRequestLinks$inboundSchema: z.ZodType<
  ListMandatesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListMandatesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListMandatesBadRequestLinks$Outbound = {
  documentation: ListMandatesBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListMandatesBadRequestLinks$outboundSchema: z.ZodType<
  ListMandatesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListMandatesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListMandatesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesBadRequestLinks$ {
  /** @deprecated use `ListMandatesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListMandatesBadRequestLinks$inboundSchema;
  /** @deprecated use `ListMandatesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListMandatesBadRequestLinks$outboundSchema;
  /** @deprecated use `ListMandatesBadRequestLinks$Outbound` instead. */
  export type Outbound = ListMandatesBadRequestLinks$Outbound;
}

export function listMandatesBadRequestLinksToJSON(
  listMandatesBadRequestLinks: ListMandatesBadRequestLinks,
): string {
  return JSON.stringify(
    ListMandatesBadRequestLinks$outboundSchema.parse(
      listMandatesBadRequestLinks,
    ),
  );
}

export function listMandatesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListMandatesMode$inboundSchema: z.ZodNativeEnum<
  typeof ListMandatesMode
> = z.nativeEnum(ListMandatesMode);

/** @internal */
export const ListMandatesMode$outboundSchema: z.ZodNativeEnum<
  typeof ListMandatesMode
> = ListMandatesMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesMode$ {
  /** @deprecated use `ListMandatesMode$inboundSchema` instead. */
  export const inboundSchema = ListMandatesMode$inboundSchema;
  /** @deprecated use `ListMandatesMode$outboundSchema` instead. */
  export const outboundSchema = ListMandatesMode$outboundSchema;
}

/** @internal */
export const ListMandatesMethod$inboundSchema: z.ZodNativeEnum<
  typeof ListMandatesMethod
> = z.nativeEnum(ListMandatesMethod);

/** @internal */
export const ListMandatesMethod$outboundSchema: z.ZodNativeEnum<
  typeof ListMandatesMethod
> = ListMandatesMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesMethod$ {
  /** @deprecated use `ListMandatesMethod$inboundSchema` instead. */
  export const inboundSchema = ListMandatesMethod$inboundSchema;
  /** @deprecated use `ListMandatesMethod$outboundSchema` instead. */
  export const outboundSchema = ListMandatesMethod$outboundSchema;
}

/** @internal */
export const ListMandatesCardLabel$inboundSchema: z.ZodNativeEnum<
  typeof ListMandatesCardLabel
> = z.nativeEnum(ListMandatesCardLabel);

/** @internal */
export const ListMandatesCardLabel$outboundSchema: z.ZodNativeEnum<
  typeof ListMandatesCardLabel
> = ListMandatesCardLabel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesCardLabel$ {
  /** @deprecated use `ListMandatesCardLabel$inboundSchema` instead. */
  export const inboundSchema = ListMandatesCardLabel$inboundSchema;
  /** @deprecated use `ListMandatesCardLabel$outboundSchema` instead. */
  export const outboundSchema = ListMandatesCardLabel$outboundSchema;
}

/** @internal */
export const ListMandatesDetails$inboundSchema: z.ZodType<
  ListMandatesDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardLabel: z.nullable(ListMandatesCardLabel$inboundSchema).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListMandatesDetails$Outbound = {
  consumerName?: string | null | undefined;
  consumerAccount?: string | null | undefined;
  consumerBic?: string | null | undefined;
  cardHolder?: string | null | undefined;
  cardNumber?: string | null | undefined;
  cardExpiryDate?: string | null | undefined;
  cardLabel?: string | null | undefined;
  cardFingerprint?: string | null | undefined;
};

/** @internal */
export const ListMandatesDetails$outboundSchema: z.ZodType<
  ListMandatesDetails$Outbound,
  z.ZodTypeDef,
  ListMandatesDetails
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardLabel: z.nullable(ListMandatesCardLabel$outboundSchema).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesDetails$ {
  /** @deprecated use `ListMandatesDetails$inboundSchema` instead. */
  export const inboundSchema = ListMandatesDetails$inboundSchema;
  /** @deprecated use `ListMandatesDetails$outboundSchema` instead. */
  export const outboundSchema = ListMandatesDetails$outboundSchema;
  /** @deprecated use `ListMandatesDetails$Outbound` instead. */
  export type Outbound = ListMandatesDetails$Outbound;
}

export function listMandatesDetailsToJSON(
  listMandatesDetails: ListMandatesDetails,
): string {
  return JSON.stringify(
    ListMandatesDetails$outboundSchema.parse(listMandatesDetails),
  );
}

export function listMandatesDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesDetails' from JSON`,
  );
}

/** @internal */
export const ListMandatesStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListMandatesStatus
> = z.nativeEnum(ListMandatesStatus);

/** @internal */
export const ListMandatesStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListMandatesStatus
> = ListMandatesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesStatus$ {
  /** @deprecated use `ListMandatesStatus$inboundSchema` instead. */
  export const inboundSchema = ListMandatesStatus$inboundSchema;
  /** @deprecated use `ListMandatesStatus$outboundSchema` instead. */
  export const outboundSchema = ListMandatesStatus$outboundSchema;
}

/** @internal */
export const MandateSelf$inboundSchema: z.ZodType<
  MandateSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type MandateSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const MandateSelf$outboundSchema: z.ZodType<
  MandateSelf$Outbound,
  z.ZodTypeDef,
  MandateSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MandateSelf$ {
  /** @deprecated use `MandateSelf$inboundSchema` instead. */
  export const inboundSchema = MandateSelf$inboundSchema;
  /** @deprecated use `MandateSelf$outboundSchema` instead. */
  export const outboundSchema = MandateSelf$outboundSchema;
  /** @deprecated use `MandateSelf$Outbound` instead. */
  export type Outbound = MandateSelf$Outbound;
}

export function mandateSelfToJSON(mandateSelf: MandateSelf): string {
  return JSON.stringify(MandateSelf$outboundSchema.parse(mandateSelf));
}

export function mandateSelfFromJSON(
  jsonString: string,
): SafeParseResult<MandateSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MandateSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MandateSelf' from JSON`,
  );
}

/** @internal */
export const ListMandatesCustomer$inboundSchema: z.ZodType<
  ListMandatesCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListMandatesCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListMandatesCustomer$outboundSchema: z.ZodType<
  ListMandatesCustomer$Outbound,
  z.ZodTypeDef,
  ListMandatesCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesCustomer$ {
  /** @deprecated use `ListMandatesCustomer$inboundSchema` instead. */
  export const inboundSchema = ListMandatesCustomer$inboundSchema;
  /** @deprecated use `ListMandatesCustomer$outboundSchema` instead. */
  export const outboundSchema = ListMandatesCustomer$outboundSchema;
  /** @deprecated use `ListMandatesCustomer$Outbound` instead. */
  export type Outbound = ListMandatesCustomer$Outbound;
}

export function listMandatesCustomerToJSON(
  listMandatesCustomer: ListMandatesCustomer,
): string {
  return JSON.stringify(
    ListMandatesCustomer$outboundSchema.parse(listMandatesCustomer),
  );
}

export function listMandatesCustomerFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesCustomer' from JSON`,
  );
}

/** @internal */
export const MandateDocumentation$inboundSchema: z.ZodType<
  MandateDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type MandateDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const MandateDocumentation$outboundSchema: z.ZodType<
  MandateDocumentation$Outbound,
  z.ZodTypeDef,
  MandateDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MandateDocumentation$ {
  /** @deprecated use `MandateDocumentation$inboundSchema` instead. */
  export const inboundSchema = MandateDocumentation$inboundSchema;
  /** @deprecated use `MandateDocumentation$outboundSchema` instead. */
  export const outboundSchema = MandateDocumentation$outboundSchema;
  /** @deprecated use `MandateDocumentation$Outbound` instead. */
  export type Outbound = MandateDocumentation$Outbound;
}

export function mandateDocumentationToJSON(
  mandateDocumentation: MandateDocumentation,
): string {
  return JSON.stringify(
    MandateDocumentation$outboundSchema.parse(mandateDocumentation),
  );
}

export function mandateDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<MandateDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MandateDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MandateDocumentation' from JSON`,
  );
}

/** @internal */
export const MandateLinks$inboundSchema: z.ZodType<
  MandateLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => MandateSelf$inboundSchema),
  customer: z.lazy(() => ListMandatesCustomer$inboundSchema),
  documentation: z.lazy(() => MandateDocumentation$inboundSchema),
});

/** @internal */
export type MandateLinks$Outbound = {
  self: MandateSelf$Outbound;
  customer: ListMandatesCustomer$Outbound;
  documentation: MandateDocumentation$Outbound;
};

/** @internal */
export const MandateLinks$outboundSchema: z.ZodType<
  MandateLinks$Outbound,
  z.ZodTypeDef,
  MandateLinks
> = z.object({
  self: z.lazy(() => MandateSelf$outboundSchema),
  customer: z.lazy(() => ListMandatesCustomer$outboundSchema),
  documentation: z.lazy(() => MandateDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MandateLinks$ {
  /** @deprecated use `MandateLinks$inboundSchema` instead. */
  export const inboundSchema = MandateLinks$inboundSchema;
  /** @deprecated use `MandateLinks$outboundSchema` instead. */
  export const outboundSchema = MandateLinks$outboundSchema;
  /** @deprecated use `MandateLinks$Outbound` instead. */
  export type Outbound = MandateLinks$Outbound;
}

export function mandateLinksToJSON(mandateLinks: MandateLinks): string {
  return JSON.stringify(MandateLinks$outboundSchema.parse(mandateLinks));
}

export function mandateLinksFromJSON(
  jsonString: string,
): SafeParseResult<MandateLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MandateLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MandateLinks' from JSON`,
  );
}

/** @internal */
export const ListMandatesMandate$inboundSchema: z.ZodType<
  ListMandatesMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("mandate"),
  id: z.string(),
  mode: ListMandatesMode$inboundSchema,
  method: ListMandatesMethod$inboundSchema,
  details: z.lazy(() => ListMandatesDetails$inboundSchema),
  signatureDate: z.nullable(z.string()),
  mandateReference: z.nullable(z.string()),
  status: ListMandatesStatus$inboundSchema,
  customerId: z.string(),
  createdAt: z.string(),
  _links: z.lazy(() => MandateLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListMandatesMandate$Outbound = {
  resource: string;
  id: string;
  mode: string;
  method: string;
  details: ListMandatesDetails$Outbound;
  signatureDate: string | null;
  mandateReference: string | null;
  status: string;
  customerId: string;
  createdAt: string;
  _links: MandateLinks$Outbound;
};

/** @internal */
export const ListMandatesMandate$outboundSchema: z.ZodType<
  ListMandatesMandate$Outbound,
  z.ZodTypeDef,
  ListMandatesMandate
> = z.object({
  resource: z.string().default("mandate"),
  id: z.string(),
  mode: ListMandatesMode$outboundSchema,
  method: ListMandatesMethod$outboundSchema,
  details: z.lazy(() => ListMandatesDetails$outboundSchema),
  signatureDate: z.nullable(z.string()),
  mandateReference: z.nullable(z.string()),
  status: ListMandatesStatus$outboundSchema,
  customerId: z.string(),
  createdAt: z.string(),
  links: z.lazy(() => MandateLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesMandate$ {
  /** @deprecated use `ListMandatesMandate$inboundSchema` instead. */
  export const inboundSchema = ListMandatesMandate$inboundSchema;
  /** @deprecated use `ListMandatesMandate$outboundSchema` instead. */
  export const outboundSchema = ListMandatesMandate$outboundSchema;
  /** @deprecated use `ListMandatesMandate$Outbound` instead. */
  export type Outbound = ListMandatesMandate$Outbound;
}

export function listMandatesMandateToJSON(
  listMandatesMandate: ListMandatesMandate,
): string {
  return JSON.stringify(
    ListMandatesMandate$outboundSchema.parse(listMandatesMandate),
  );
}

export function listMandatesMandateFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesMandate' from JSON`,
  );
}

/** @internal */
export const ListMandatesEmbedded$inboundSchema: z.ZodType<
  ListMandatesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  mandates: z.array(z.lazy(() => ListMandatesMandate$inboundSchema)).optional(),
});

/** @internal */
export type ListMandatesEmbedded$Outbound = {
  mandates?: Array<ListMandatesMandate$Outbound> | undefined;
};

/** @internal */
export const ListMandatesEmbedded$outboundSchema: z.ZodType<
  ListMandatesEmbedded$Outbound,
  z.ZodTypeDef,
  ListMandatesEmbedded
> = z.object({
  mandates: z.array(z.lazy(() => ListMandatesMandate$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesEmbedded$ {
  /** @deprecated use `ListMandatesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListMandatesEmbedded$inboundSchema;
  /** @deprecated use `ListMandatesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListMandatesEmbedded$outboundSchema;
  /** @deprecated use `ListMandatesEmbedded$Outbound` instead. */
  export type Outbound = ListMandatesEmbedded$Outbound;
}

export function listMandatesEmbeddedToJSON(
  listMandatesEmbedded: ListMandatesEmbedded,
): string {
  return JSON.stringify(
    ListMandatesEmbedded$outboundSchema.parse(listMandatesEmbedded),
  );
}

export function listMandatesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListMandatesSelf$inboundSchema: z.ZodType<
  ListMandatesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListMandatesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListMandatesSelf$outboundSchema: z.ZodType<
  ListMandatesSelf$Outbound,
  z.ZodTypeDef,
  ListMandatesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesSelf$ {
  /** @deprecated use `ListMandatesSelf$inboundSchema` instead. */
  export const inboundSchema = ListMandatesSelf$inboundSchema;
  /** @deprecated use `ListMandatesSelf$outboundSchema` instead. */
  export const outboundSchema = ListMandatesSelf$outboundSchema;
  /** @deprecated use `ListMandatesSelf$Outbound` instead. */
  export type Outbound = ListMandatesSelf$Outbound;
}

export function listMandatesSelfToJSON(
  listMandatesSelf: ListMandatesSelf,
): string {
  return JSON.stringify(
    ListMandatesSelf$outboundSchema.parse(listMandatesSelf),
  );
}

export function listMandatesSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesSelf' from JSON`,
  );
}

/** @internal */
export const ListMandatesPrevious$inboundSchema: z.ZodType<
  ListMandatesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListMandatesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListMandatesPrevious$outboundSchema: z.ZodType<
  ListMandatesPrevious$Outbound,
  z.ZodTypeDef,
  ListMandatesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesPrevious$ {
  /** @deprecated use `ListMandatesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListMandatesPrevious$inboundSchema;
  /** @deprecated use `ListMandatesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListMandatesPrevious$outboundSchema;
  /** @deprecated use `ListMandatesPrevious$Outbound` instead. */
  export type Outbound = ListMandatesPrevious$Outbound;
}

export function listMandatesPreviousToJSON(
  listMandatesPrevious: ListMandatesPrevious,
): string {
  return JSON.stringify(
    ListMandatesPrevious$outboundSchema.parse(listMandatesPrevious),
  );
}

export function listMandatesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesPrevious' from JSON`,
  );
}

/** @internal */
export const ListMandatesNext$inboundSchema: z.ZodType<
  ListMandatesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListMandatesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListMandatesNext$outboundSchema: z.ZodType<
  ListMandatesNext$Outbound,
  z.ZodTypeDef,
  ListMandatesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesNext$ {
  /** @deprecated use `ListMandatesNext$inboundSchema` instead. */
  export const inboundSchema = ListMandatesNext$inboundSchema;
  /** @deprecated use `ListMandatesNext$outboundSchema` instead. */
  export const outboundSchema = ListMandatesNext$outboundSchema;
  /** @deprecated use `ListMandatesNext$Outbound` instead. */
  export type Outbound = ListMandatesNext$Outbound;
}

export function listMandatesNextToJSON(
  listMandatesNext: ListMandatesNext,
): string {
  return JSON.stringify(
    ListMandatesNext$outboundSchema.parse(listMandatesNext),
  );
}

export function listMandatesNextFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesNext' from JSON`,
  );
}

/** @internal */
export const ListMandatesDocumentation$inboundSchema: z.ZodType<
  ListMandatesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListMandatesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListMandatesDocumentation$outboundSchema: z.ZodType<
  ListMandatesDocumentation$Outbound,
  z.ZodTypeDef,
  ListMandatesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesDocumentation$ {
  /** @deprecated use `ListMandatesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListMandatesDocumentation$inboundSchema;
  /** @deprecated use `ListMandatesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListMandatesDocumentation$outboundSchema;
  /** @deprecated use `ListMandatesDocumentation$Outbound` instead. */
  export type Outbound = ListMandatesDocumentation$Outbound;
}

export function listMandatesDocumentationToJSON(
  listMandatesDocumentation: ListMandatesDocumentation,
): string {
  return JSON.stringify(
    ListMandatesDocumentation$outboundSchema.parse(listMandatesDocumentation),
  );
}

export function listMandatesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListMandatesLinks$inboundSchema: z.ZodType<
  ListMandatesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListMandatesSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListMandatesPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListMandatesNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListMandatesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListMandatesLinks$Outbound = {
  self?: ListMandatesSelf$Outbound | undefined;
  previous?: ListMandatesPrevious$Outbound | null | undefined;
  next?: ListMandatesNext$Outbound | null | undefined;
  documentation?: ListMandatesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListMandatesLinks$outboundSchema: z.ZodType<
  ListMandatesLinks$Outbound,
  z.ZodTypeDef,
  ListMandatesLinks
> = z.object({
  self: z.lazy(() => ListMandatesSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListMandatesPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListMandatesNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListMandatesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesLinks$ {
  /** @deprecated use `ListMandatesLinks$inboundSchema` instead. */
  export const inboundSchema = ListMandatesLinks$inboundSchema;
  /** @deprecated use `ListMandatesLinks$outboundSchema` instead. */
  export const outboundSchema = ListMandatesLinks$outboundSchema;
  /** @deprecated use `ListMandatesLinks$Outbound` instead. */
  export type Outbound = ListMandatesLinks$Outbound;
}

export function listMandatesLinksToJSON(
  listMandatesLinks: ListMandatesLinks,
): string {
  return JSON.stringify(
    ListMandatesLinks$outboundSchema.parse(listMandatesLinks),
  );
}

export function listMandatesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesLinks' from JSON`,
  );
}

/** @internal */
export const ListMandatesResponse$inboundSchema: z.ZodType<
  ListMandatesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListMandatesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListMandatesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListMandatesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListMandatesEmbedded$Outbound | undefined;
  _links?: ListMandatesLinks$Outbound | undefined;
};

/** @internal */
export const ListMandatesResponse$outboundSchema: z.ZodType<
  ListMandatesResponse$Outbound,
  z.ZodTypeDef,
  ListMandatesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListMandatesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListMandatesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMandatesResponse$ {
  /** @deprecated use `ListMandatesResponse$inboundSchema` instead. */
  export const inboundSchema = ListMandatesResponse$inboundSchema;
  /** @deprecated use `ListMandatesResponse$outboundSchema` instead. */
  export const outboundSchema = ListMandatesResponse$outboundSchema;
  /** @deprecated use `ListMandatesResponse$Outbound` instead. */
  export type Outbound = ListMandatesResponse$Outbound;
}

export function listMandatesResponseToJSON(
  listMandatesResponse: ListMandatesResponse,
): string {
  return JSON.stringify(
    ListMandatesResponse$outboundSchema.parse(listMandatesResponse),
  );
}

export function listMandatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMandatesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMandatesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMandatesResponse' from JSON`,
  );
}
