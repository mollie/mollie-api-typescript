/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Passing a locale will sort the payment methods in the preferred order
 *
 * @remarks
 * for the country, and translate the payment method names in the corresponding language.
 */
export const GetMethodLocale = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * Passing a locale will sort the payment methods in the preferred order
 *
 * @remarks
 * for the country, and translate the payment method names in the corresponding language.
 */
export type GetMethodLocale = ClosedEnum<typeof GetMethodLocale>;

/**
 * This endpoint allows you to include additional information via the
 *
 * @remarks
 * `include` query string parameter.
 */
export const GetMethodInclude = {
  Issuers: "issuers",
} as const;
/**
 * This endpoint allows you to include additional information via the
 *
 * @remarks
 * `include` query string parameter.
 */
export type GetMethodInclude = ClosedEnum<typeof GetMethodInclude>;

/**
 * Set this parameter to `first` to only return the methods that
 *
 * @remarks
 * can be used for the first payment of a recurring sequence.
 *
 * Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
 */
export const GetMethodSequenceType = {
  Oneoff: "oneoff",
  First: "first",
  Recurring: "recurring",
} as const;
/**
 * Set this parameter to `first` to only return the methods that
 *
 * @remarks
 * can be used for the first payment of a recurring sequence.
 *
 * Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
 */
export type GetMethodSequenceType = ClosedEnum<typeof GetMethodSequenceType>;

export type GetMethodRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Passing a locale will sort the payment methods in the preferred order
   *
   * @remarks
   * for the country, and translate the payment method names in the corresponding language.
   */
  locale?: GetMethodLocale | undefined;
  /**
   * If provided, the `minimumAmount` and `maximumAmount` will be converted
   *
   * @remarks
   * to the given currency. An error is returned if the currency is not supported by the payment method.
   */
  currency?: string | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve the resources for.
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
   * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * This endpoint allows you to include additional information via the
   *
   * @remarks
   * `include` query string parameter.
   */
  include?: GetMethodInclude | null | undefined;
  /**
   * Set this parameter to `first` to only return the methods that
   *
   * @remarks
   * can be used for the first payment of a recurring sequence.
   *
   * Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
   */
  sequenceType?: GetMethodSequenceType | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetMethodNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetMethodNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetMethodNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetMethodBadRequestDocumentation = {
  href: string;
  type: string;
};

export type GetMethodBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetMethodBadRequestDocumentation;
};

/**
 * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment
 *
 * @remarks
 * method selection screen will be skipped.
 */
export const GetMethodId = {
  Alma: "alma",
  Applepay: "applepay",
  Bacs: "bacs",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Ideal: "ideal",
  In3: "in3",
  Kbc: "kbc",
  Klarna: "klarna",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Pointofsale: "pointofsale",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment
 *
 * @remarks
 * method selection screen will be skipped.
 */
export type GetMethodId = ClosedEnum<typeof GetMethodId>;

/**
 * The minimum payment amount required to use this payment method.
 */
export type GetMethodMinimumAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null`
 *
 * @remarks
 * is returned instead.
 */
export type GetMethodMaximumAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * URLs of images representing the payment method.
 */
export type GetMethodImage = {
  /**
   * The URL pointing to an icon of 32 by 24 pixels.
   */
  size1x: string;
  /**
   * The URL pointing to an icon of 64 by 48 pixels.
   */
  size2x: string;
  /**
   * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
   *
   * @remarks
   * scale to any desired size without compromising visual quality.
   */
  svg: string;
};

/**
 * The payment method's activation status for this profile.
 */
export const GetMethodStatus = {
  Activated: "activated",
  PendingBoarding: "pending-boarding",
  PendingReview: "pending-review",
  PendingExternal: "pending-external",
  Rejected: "rejected",
} as const;
/**
 * The payment method's activation status for this profile.
 */
export type GetMethodStatus = ClosedEnum<typeof GetMethodStatus>;

/**
 * URLs of images representing the issuer.
 *
 * @remarks
 * required:
 *   - size1x
 *   - size2x
 *   - svg
 */
export type GetMethodIssuerImage = {
  /**
   * The URL pointing to an icon of 32 by 24 pixels.
   */
  size1x?: string | undefined;
  /**
   * The URL pointing to an icon of 64 by 48 pixels.
   */
  size2x?: string | undefined;
  /**
   * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
   *
   * @remarks
   * scale to any desired size without compromising visual quality.
   */
  svg?: string | undefined;
};

export type GetMethodIssuer = {
  resource: string;
  id: string;
  /**
   * The full name of the issuer.
   */
  name: string;
  /**
   * URLs of images representing the issuer.
   *
   * @remarks
   * required:
   *   - size1x
   *   - size2x
   *   - svg
   */
  image: GetMethodIssuerImage;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetMethodSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetMethodDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetMethodLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetMethodSelf;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetMethodDocumentation | undefined;
};

/**
 * The payment method object.
 */
export type GetMethodResponse = {
  /**
   * Indicates the response contains a payment method object. Will always contain the string `method` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  /**
   * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment
   *
   * @remarks
   * method selection screen will be skipped.
   */
  id: GetMethodId;
  /**
   * The full name of the payment method.
   *
   * @remarks
   *
   * If a `locale` parameter is provided, the name is translated to the given locale if possible.
   */
  description: string;
  /**
   * The minimum payment amount required to use this payment method.
   */
  minimumAmount: GetMethodMinimumAmount;
  /**
   * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null`
   *
   * @remarks
   * is returned instead.
   */
  maximumAmount: GetMethodMaximumAmount | null;
  /**
   * URLs of images representing the payment method.
   */
  image: GetMethodImage;
  /**
   * The payment method's activation status for this profile.
   */
  status: GetMethodStatus;
  /**
   * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
   *
   * @remarks
   * for iDEAL, KBC/CBC, gift cards, and vouchers.
   */
  issuers?: Array<GetMethodIssuer> | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetMethodLinks;
};

/** @internal */
export const GetMethodLocale$inboundSchema: z.ZodNativeEnum<
  typeof GetMethodLocale
> = z.nativeEnum(GetMethodLocale);

/** @internal */
export const GetMethodLocale$outboundSchema: z.ZodNativeEnum<
  typeof GetMethodLocale
> = GetMethodLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodLocale$ {
  /** @deprecated use `GetMethodLocale$inboundSchema` instead. */
  export const inboundSchema = GetMethodLocale$inboundSchema;
  /** @deprecated use `GetMethodLocale$outboundSchema` instead. */
  export const outboundSchema = GetMethodLocale$outboundSchema;
}

/** @internal */
export const GetMethodInclude$inboundSchema: z.ZodNativeEnum<
  typeof GetMethodInclude
> = z.nativeEnum(GetMethodInclude);

/** @internal */
export const GetMethodInclude$outboundSchema: z.ZodNativeEnum<
  typeof GetMethodInclude
> = GetMethodInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodInclude$ {
  /** @deprecated use `GetMethodInclude$inboundSchema` instead. */
  export const inboundSchema = GetMethodInclude$inboundSchema;
  /** @deprecated use `GetMethodInclude$outboundSchema` instead. */
  export const outboundSchema = GetMethodInclude$outboundSchema;
}

/** @internal */
export const GetMethodSequenceType$inboundSchema: z.ZodNativeEnum<
  typeof GetMethodSequenceType
> = z.nativeEnum(GetMethodSequenceType);

/** @internal */
export const GetMethodSequenceType$outboundSchema: z.ZodNativeEnum<
  typeof GetMethodSequenceType
> = GetMethodSequenceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodSequenceType$ {
  /** @deprecated use `GetMethodSequenceType$inboundSchema` instead. */
  export const inboundSchema = GetMethodSequenceType$inboundSchema;
  /** @deprecated use `GetMethodSequenceType$outboundSchema` instead. */
  export const outboundSchema = GetMethodSequenceType$outboundSchema;
}

/** @internal */
export const GetMethodRequest$inboundSchema: z.ZodType<
  GetMethodRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  locale: GetMethodLocale$inboundSchema.optional(),
  currency: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(GetMethodInclude$inboundSchema).optional(),
  sequenceType: GetMethodSequenceType$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetMethodRequest$Outbound = {
  id: string;
  locale?: string | undefined;
  currency?: string | undefined;
  profileId?: string | undefined;
  include?: string | null | undefined;
  sequenceType?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetMethodRequest$outboundSchema: z.ZodType<
  GetMethodRequest$Outbound,
  z.ZodTypeDef,
  GetMethodRequest
> = z.object({
  id: z.string(),
  locale: GetMethodLocale$outboundSchema.optional(),
  currency: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(GetMethodInclude$outboundSchema).optional(),
  sequenceType: GetMethodSequenceType$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodRequest$ {
  /** @deprecated use `GetMethodRequest$inboundSchema` instead. */
  export const inboundSchema = GetMethodRequest$inboundSchema;
  /** @deprecated use `GetMethodRequest$outboundSchema` instead. */
  export const outboundSchema = GetMethodRequest$outboundSchema;
  /** @deprecated use `GetMethodRequest$Outbound` instead. */
  export type Outbound = GetMethodRequest$Outbound;
}

export function getMethodRequestToJSON(
  getMethodRequest: GetMethodRequest,
): string {
  return JSON.stringify(
    GetMethodRequest$outboundSchema.parse(getMethodRequest),
  );
}

export function getMethodRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodRequest' from JSON`,
  );
}

/** @internal */
export const GetMethodNotFoundDocumentation$inboundSchema: z.ZodType<
  GetMethodNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMethodNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMethodNotFoundDocumentation$outboundSchema: z.ZodType<
  GetMethodNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetMethodNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodNotFoundDocumentation$ {
  /** @deprecated use `GetMethodNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMethodNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetMethodNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMethodNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetMethodNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetMethodNotFoundDocumentation$Outbound;
}

export function getMethodNotFoundDocumentationToJSON(
  getMethodNotFoundDocumentation: GetMethodNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetMethodNotFoundDocumentation$outboundSchema.parse(
      getMethodNotFoundDocumentation,
    ),
  );
}

export function getMethodNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetMethodNotFoundLinks$inboundSchema: z.ZodType<
  GetMethodNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetMethodNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetMethodNotFoundLinks$Outbound = {
  documentation: GetMethodNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetMethodNotFoundLinks$outboundSchema: z.ZodType<
  GetMethodNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetMethodNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetMethodNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodNotFoundLinks$ {
  /** @deprecated use `GetMethodNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetMethodNotFoundLinks$inboundSchema;
  /** @deprecated use `GetMethodNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetMethodNotFoundLinks$outboundSchema;
  /** @deprecated use `GetMethodNotFoundLinks$Outbound` instead. */
  export type Outbound = GetMethodNotFoundLinks$Outbound;
}

export function getMethodNotFoundLinksToJSON(
  getMethodNotFoundLinks: GetMethodNotFoundLinks,
): string {
  return JSON.stringify(
    GetMethodNotFoundLinks$outboundSchema.parse(getMethodNotFoundLinks),
  );
}

export function getMethodNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetMethodBadRequestDocumentation$inboundSchema: z.ZodType<
  GetMethodBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMethodBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMethodBadRequestDocumentation$outboundSchema: z.ZodType<
  GetMethodBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  GetMethodBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodBadRequestDocumentation$ {
  /** @deprecated use `GetMethodBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMethodBadRequestDocumentation$inboundSchema;
  /** @deprecated use `GetMethodBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMethodBadRequestDocumentation$outboundSchema;
  /** @deprecated use `GetMethodBadRequestDocumentation$Outbound` instead. */
  export type Outbound = GetMethodBadRequestDocumentation$Outbound;
}

export function getMethodBadRequestDocumentationToJSON(
  getMethodBadRequestDocumentation: GetMethodBadRequestDocumentation,
): string {
  return JSON.stringify(
    GetMethodBadRequestDocumentation$outboundSchema.parse(
      getMethodBadRequestDocumentation,
    ),
  );
}

export function getMethodBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const GetMethodBadRequestLinks$inboundSchema: z.ZodType<
  GetMethodBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetMethodBadRequestDocumentation$inboundSchema),
});

/** @internal */
export type GetMethodBadRequestLinks$Outbound = {
  documentation: GetMethodBadRequestDocumentation$Outbound;
};

/** @internal */
export const GetMethodBadRequestLinks$outboundSchema: z.ZodType<
  GetMethodBadRequestLinks$Outbound,
  z.ZodTypeDef,
  GetMethodBadRequestLinks
> = z.object({
  documentation: z.lazy(() => GetMethodBadRequestDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodBadRequestLinks$ {
  /** @deprecated use `GetMethodBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = GetMethodBadRequestLinks$inboundSchema;
  /** @deprecated use `GetMethodBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = GetMethodBadRequestLinks$outboundSchema;
  /** @deprecated use `GetMethodBadRequestLinks$Outbound` instead. */
  export type Outbound = GetMethodBadRequestLinks$Outbound;
}

export function getMethodBadRequestLinksToJSON(
  getMethodBadRequestLinks: GetMethodBadRequestLinks,
): string {
  return JSON.stringify(
    GetMethodBadRequestLinks$outboundSchema.parse(getMethodBadRequestLinks),
  );
}

export function getMethodBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const GetMethodId$inboundSchema: z.ZodNativeEnum<typeof GetMethodId> = z
  .nativeEnum(GetMethodId);

/** @internal */
export const GetMethodId$outboundSchema: z.ZodNativeEnum<typeof GetMethodId> =
  GetMethodId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodId$ {
  /** @deprecated use `GetMethodId$inboundSchema` instead. */
  export const inboundSchema = GetMethodId$inboundSchema;
  /** @deprecated use `GetMethodId$outboundSchema` instead. */
  export const outboundSchema = GetMethodId$outboundSchema;
}

/** @internal */
export const GetMethodMinimumAmount$inboundSchema: z.ZodType<
  GetMethodMinimumAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetMethodMinimumAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetMethodMinimumAmount$outboundSchema: z.ZodType<
  GetMethodMinimumAmount$Outbound,
  z.ZodTypeDef,
  GetMethodMinimumAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodMinimumAmount$ {
  /** @deprecated use `GetMethodMinimumAmount$inboundSchema` instead. */
  export const inboundSchema = GetMethodMinimumAmount$inboundSchema;
  /** @deprecated use `GetMethodMinimumAmount$outboundSchema` instead. */
  export const outboundSchema = GetMethodMinimumAmount$outboundSchema;
  /** @deprecated use `GetMethodMinimumAmount$Outbound` instead. */
  export type Outbound = GetMethodMinimumAmount$Outbound;
}

export function getMethodMinimumAmountToJSON(
  getMethodMinimumAmount: GetMethodMinimumAmount,
): string {
  return JSON.stringify(
    GetMethodMinimumAmount$outboundSchema.parse(getMethodMinimumAmount),
  );
}

export function getMethodMinimumAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodMinimumAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodMinimumAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodMinimumAmount' from JSON`,
  );
}

/** @internal */
export const GetMethodMaximumAmount$inboundSchema: z.ZodType<
  GetMethodMaximumAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetMethodMaximumAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetMethodMaximumAmount$outboundSchema: z.ZodType<
  GetMethodMaximumAmount$Outbound,
  z.ZodTypeDef,
  GetMethodMaximumAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodMaximumAmount$ {
  /** @deprecated use `GetMethodMaximumAmount$inboundSchema` instead. */
  export const inboundSchema = GetMethodMaximumAmount$inboundSchema;
  /** @deprecated use `GetMethodMaximumAmount$outboundSchema` instead. */
  export const outboundSchema = GetMethodMaximumAmount$outboundSchema;
  /** @deprecated use `GetMethodMaximumAmount$Outbound` instead. */
  export type Outbound = GetMethodMaximumAmount$Outbound;
}

export function getMethodMaximumAmountToJSON(
  getMethodMaximumAmount: GetMethodMaximumAmount,
): string {
  return JSON.stringify(
    GetMethodMaximumAmount$outboundSchema.parse(getMethodMaximumAmount),
  );
}

export function getMethodMaximumAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodMaximumAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodMaximumAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodMaximumAmount' from JSON`,
  );
}

/** @internal */
export const GetMethodImage$inboundSchema: z.ZodType<
  GetMethodImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  size1x: z.string(),
  size2x: z.string(),
  svg: z.string(),
});

/** @internal */
export type GetMethodImage$Outbound = {
  size1x: string;
  size2x: string;
  svg: string;
};

/** @internal */
export const GetMethodImage$outboundSchema: z.ZodType<
  GetMethodImage$Outbound,
  z.ZodTypeDef,
  GetMethodImage
> = z.object({
  size1x: z.string(),
  size2x: z.string(),
  svg: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodImage$ {
  /** @deprecated use `GetMethodImage$inboundSchema` instead. */
  export const inboundSchema = GetMethodImage$inboundSchema;
  /** @deprecated use `GetMethodImage$outboundSchema` instead. */
  export const outboundSchema = GetMethodImage$outboundSchema;
  /** @deprecated use `GetMethodImage$Outbound` instead. */
  export type Outbound = GetMethodImage$Outbound;
}

export function getMethodImageToJSON(getMethodImage: GetMethodImage): string {
  return JSON.stringify(GetMethodImage$outboundSchema.parse(getMethodImage));
}

export function getMethodImageFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodImage' from JSON`,
  );
}

/** @internal */
export const GetMethodStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetMethodStatus
> = z.nativeEnum(GetMethodStatus);

/** @internal */
export const GetMethodStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetMethodStatus
> = GetMethodStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodStatus$ {
  /** @deprecated use `GetMethodStatus$inboundSchema` instead. */
  export const inboundSchema = GetMethodStatus$inboundSchema;
  /** @deprecated use `GetMethodStatus$outboundSchema` instead. */
  export const outboundSchema = GetMethodStatus$outboundSchema;
}

/** @internal */
export const GetMethodIssuerImage$inboundSchema: z.ZodType<
  GetMethodIssuerImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/** @internal */
export type GetMethodIssuerImage$Outbound = {
  size1x?: string | undefined;
  size2x?: string | undefined;
  svg?: string | undefined;
};

/** @internal */
export const GetMethodIssuerImage$outboundSchema: z.ZodType<
  GetMethodIssuerImage$Outbound,
  z.ZodTypeDef,
  GetMethodIssuerImage
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodIssuerImage$ {
  /** @deprecated use `GetMethodIssuerImage$inboundSchema` instead. */
  export const inboundSchema = GetMethodIssuerImage$inboundSchema;
  /** @deprecated use `GetMethodIssuerImage$outboundSchema` instead. */
  export const outboundSchema = GetMethodIssuerImage$outboundSchema;
  /** @deprecated use `GetMethodIssuerImage$Outbound` instead. */
  export type Outbound = GetMethodIssuerImage$Outbound;
}

export function getMethodIssuerImageToJSON(
  getMethodIssuerImage: GetMethodIssuerImage,
): string {
  return JSON.stringify(
    GetMethodIssuerImage$outboundSchema.parse(getMethodIssuerImage),
  );
}

export function getMethodIssuerImageFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodIssuerImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodIssuerImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodIssuerImage' from JSON`,
  );
}

/** @internal */
export const GetMethodIssuer$inboundSchema: z.ZodType<
  GetMethodIssuer,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  name: z.string(),
  image: z.lazy(() => GetMethodIssuerImage$inboundSchema),
});

/** @internal */
export type GetMethodIssuer$Outbound = {
  resource: string;
  id: string;
  name: string;
  image: GetMethodIssuerImage$Outbound;
};

/** @internal */
export const GetMethodIssuer$outboundSchema: z.ZodType<
  GetMethodIssuer$Outbound,
  z.ZodTypeDef,
  GetMethodIssuer
> = z.object({
  resource: z.string(),
  id: z.string(),
  name: z.string(),
  image: z.lazy(() => GetMethodIssuerImage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodIssuer$ {
  /** @deprecated use `GetMethodIssuer$inboundSchema` instead. */
  export const inboundSchema = GetMethodIssuer$inboundSchema;
  /** @deprecated use `GetMethodIssuer$outboundSchema` instead. */
  export const outboundSchema = GetMethodIssuer$outboundSchema;
  /** @deprecated use `GetMethodIssuer$Outbound` instead. */
  export type Outbound = GetMethodIssuer$Outbound;
}

export function getMethodIssuerToJSON(
  getMethodIssuer: GetMethodIssuer,
): string {
  return JSON.stringify(GetMethodIssuer$outboundSchema.parse(getMethodIssuer));
}

export function getMethodIssuerFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodIssuer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodIssuer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodIssuer' from JSON`,
  );
}

/** @internal */
export const GetMethodSelf$inboundSchema: z.ZodType<
  GetMethodSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMethodSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMethodSelf$outboundSchema: z.ZodType<
  GetMethodSelf$Outbound,
  z.ZodTypeDef,
  GetMethodSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodSelf$ {
  /** @deprecated use `GetMethodSelf$inboundSchema` instead. */
  export const inboundSchema = GetMethodSelf$inboundSchema;
  /** @deprecated use `GetMethodSelf$outboundSchema` instead. */
  export const outboundSchema = GetMethodSelf$outboundSchema;
  /** @deprecated use `GetMethodSelf$Outbound` instead. */
  export type Outbound = GetMethodSelf$Outbound;
}

export function getMethodSelfToJSON(getMethodSelf: GetMethodSelf): string {
  return JSON.stringify(GetMethodSelf$outboundSchema.parse(getMethodSelf));
}

export function getMethodSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodSelf' from JSON`,
  );
}

/** @internal */
export const GetMethodDocumentation$inboundSchema: z.ZodType<
  GetMethodDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetMethodDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetMethodDocumentation$outboundSchema: z.ZodType<
  GetMethodDocumentation$Outbound,
  z.ZodTypeDef,
  GetMethodDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodDocumentation$ {
  /** @deprecated use `GetMethodDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMethodDocumentation$inboundSchema;
  /** @deprecated use `GetMethodDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMethodDocumentation$outboundSchema;
  /** @deprecated use `GetMethodDocumentation$Outbound` instead. */
  export type Outbound = GetMethodDocumentation$Outbound;
}

export function getMethodDocumentationToJSON(
  getMethodDocumentation: GetMethodDocumentation,
): string {
  return JSON.stringify(
    GetMethodDocumentation$outboundSchema.parse(getMethodDocumentation),
  );
}

export function getMethodDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodDocumentation' from JSON`,
  );
}

/** @internal */
export const GetMethodLinks$inboundSchema: z.ZodType<
  GetMethodLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetMethodSelf$inboundSchema),
  documentation: z.lazy(() => GetMethodDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetMethodLinks$Outbound = {
  self: GetMethodSelf$Outbound;
  documentation?: GetMethodDocumentation$Outbound | undefined;
};

/** @internal */
export const GetMethodLinks$outboundSchema: z.ZodType<
  GetMethodLinks$Outbound,
  z.ZodTypeDef,
  GetMethodLinks
> = z.object({
  self: z.lazy(() => GetMethodSelf$outboundSchema),
  documentation: z.lazy(() => GetMethodDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodLinks$ {
  /** @deprecated use `GetMethodLinks$inboundSchema` instead. */
  export const inboundSchema = GetMethodLinks$inboundSchema;
  /** @deprecated use `GetMethodLinks$outboundSchema` instead. */
  export const outboundSchema = GetMethodLinks$outboundSchema;
  /** @deprecated use `GetMethodLinks$Outbound` instead. */
  export type Outbound = GetMethodLinks$Outbound;
}

export function getMethodLinksToJSON(getMethodLinks: GetMethodLinks): string {
  return JSON.stringify(GetMethodLinks$outboundSchema.parse(getMethodLinks));
}

export function getMethodLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodLinks' from JSON`,
  );
}

/** @internal */
export const GetMethodResponse$inboundSchema: z.ZodType<
  GetMethodResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: GetMethodId$inboundSchema,
  description: z.string(),
  minimumAmount: z.lazy(() => GetMethodMinimumAmount$inboundSchema),
  maximumAmount: z.nullable(z.lazy(() => GetMethodMaximumAmount$inboundSchema)),
  image: z.lazy(() => GetMethodImage$inboundSchema),
  status: GetMethodStatus$inboundSchema,
  issuers: z.array(z.lazy(() => GetMethodIssuer$inboundSchema)).optional(),
  _links: z.lazy(() => GetMethodLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetMethodResponse$Outbound = {
  resource: string;
  id: string;
  description: string;
  minimumAmount: GetMethodMinimumAmount$Outbound;
  maximumAmount: GetMethodMaximumAmount$Outbound | null;
  image: GetMethodImage$Outbound;
  status: string;
  issuers?: Array<GetMethodIssuer$Outbound> | undefined;
  _links: GetMethodLinks$Outbound;
};

/** @internal */
export const GetMethodResponse$outboundSchema: z.ZodType<
  GetMethodResponse$Outbound,
  z.ZodTypeDef,
  GetMethodResponse
> = z.object({
  resource: z.string(),
  id: GetMethodId$outboundSchema,
  description: z.string(),
  minimumAmount: z.lazy(() => GetMethodMinimumAmount$outboundSchema),
  maximumAmount: z.nullable(
    z.lazy(() => GetMethodMaximumAmount$outboundSchema),
  ),
  image: z.lazy(() => GetMethodImage$outboundSchema),
  status: GetMethodStatus$outboundSchema,
  issuers: z.array(z.lazy(() => GetMethodIssuer$outboundSchema)).optional(),
  links: z.lazy(() => GetMethodLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodResponse$ {
  /** @deprecated use `GetMethodResponse$inboundSchema` instead. */
  export const inboundSchema = GetMethodResponse$inboundSchema;
  /** @deprecated use `GetMethodResponse$outboundSchema` instead. */
  export const outboundSchema = GetMethodResponse$outboundSchema;
  /** @deprecated use `GetMethodResponse$Outbound` instead. */
  export type Outbound = GetMethodResponse$Outbound;
}

export function getMethodResponseToJSON(
  getMethodResponse: GetMethodResponse,
): string {
  return JSON.stringify(
    GetMethodResponse$outboundSchema.parse(getMethodResponse),
  );
}

export function getMethodResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodResponse' from JSON`,
  );
}
