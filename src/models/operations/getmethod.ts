/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetMethodRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Response language
   */
  locale?: models.Locale | null | undefined;
  /**
   * If provided, the `minimumAmount` and `maximumAmount` will be converted
   *
   * @remarks
   * to the given currency. An error is returned if the currency is not supported by the payment method.
   */
  currency?: string | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve the resources for.
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
   * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   */
  include?: string | null | undefined;
  /**
   * Set this parameter to `first` to only return the methods that
   *
   * @remarks
   * can be used for the first payment of a recurring sequence.
   *
   * Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
   */
  sequenceType?: models.SequenceType | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const GetMethodRequest$inboundSchema: z.ZodType<
  GetMethodRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  locale: z.nullable(models.Locale$inboundSchema).optional(),
  currency: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  sequenceType: models.SequenceType$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetMethodRequest$Outbound = {
  id: string;
  locale?: string | null | undefined;
  currency?: string | undefined;
  profileId?: string | undefined;
  include?: string | null | undefined;
  sequenceType?: string | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetMethodRequest$outboundSchema: z.ZodType<
  GetMethodRequest$Outbound,
  z.ZodTypeDef,
  GetMethodRequest
> = z.object({
  id: z.string(),
  locale: z.nullable(models.Locale$outboundSchema).optional(),
  currency: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  sequenceType: models.SequenceType$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodRequest$ {
  /** @deprecated use `GetMethodRequest$inboundSchema` instead. */
  export const inboundSchema = GetMethodRequest$inboundSchema;
  /** @deprecated use `GetMethodRequest$outboundSchema` instead. */
  export const outboundSchema = GetMethodRequest$outboundSchema;
  /** @deprecated use `GetMethodRequest$Outbound` instead. */
  export type Outbound = GetMethodRequest$Outbound;
}

export function getMethodRequestToJSON(
  getMethodRequest: GetMethodRequest,
): string {
  return JSON.stringify(
    GetMethodRequest$outboundSchema.parse(getMethodRequest),
  );
}

export function getMethodRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMethodRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMethodRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMethodRequest' from JSON`,
  );
}
