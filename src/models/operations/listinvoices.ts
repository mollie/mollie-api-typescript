/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListInvoicesRequest = {
  /**
   * Filter for an invoice with a specific invoice reference, for example `2024.10000`.
   */
  reference?: string | null | undefined;
  /**
   * Filter for invoices of a specific year, for example `2024`.
   */
  year?: string | null | undefined;
  /**
   * Filter for invoices of a specific month, for example `01`.
   */
  month?: string | null | undefined;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
   *
   * @remarks
   *
   * Possible values: `asc` `desc` (default: `desc`)
   */
  sort?: string | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListInvoicesNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListInvoicesNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListInvoicesNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListInvoicesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListInvoicesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListInvoicesBadRequestDocumentation;
};

export type ListInvoicesInvoice = {};

export type ListInvoicesEmbedded = {
  /**
   * An array of invoice objects. For a complete reference of the invoice object, refer to the [Get invoice endpoint](get-invoice) documentation.
   */
  invoices?: Array<ListInvoicesInvoice> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListInvoicesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListInvoicesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListInvoicesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListInvoicesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListInvoicesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListInvoicesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListInvoicesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListInvoicesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListInvoicesDocumentation | undefined;
};

/**
 * A list of invoice objects. For a complete reference of the invoice object, refer to the [Get invoice endpoint](get-invoice) documentation.
 */
export type ListInvoicesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListInvoicesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListInvoicesLinks | undefined;
};

/** @internal */
export const ListInvoicesRequest$inboundSchema: z.ZodType<
  ListInvoicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference: z.nullable(z.string()).optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListInvoicesRequest$Outbound = {
  reference?: string | null | undefined;
  year?: string | null | undefined;
  month?: string | null | undefined;
  from?: string | null | undefined;
  limit: number | null;
  sort?: string | null | undefined;
};

/** @internal */
export const ListInvoicesRequest$outboundSchema: z.ZodType<
  ListInvoicesRequest$Outbound,
  z.ZodTypeDef,
  ListInvoicesRequest
> = z.object({
  reference: z.nullable(z.string()).optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesRequest$ {
  /** @deprecated use `ListInvoicesRequest$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesRequest$inboundSchema;
  /** @deprecated use `ListInvoicesRequest$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesRequest$outboundSchema;
  /** @deprecated use `ListInvoicesRequest$Outbound` instead. */
  export type Outbound = ListInvoicesRequest$Outbound;
}

export function listInvoicesRequestToJSON(
  listInvoicesRequest: ListInvoicesRequest,
): string {
  return JSON.stringify(
    ListInvoicesRequest$outboundSchema.parse(listInvoicesRequest),
  );
}

export function listInvoicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesRequest' from JSON`,
  );
}

/** @internal */
export const ListInvoicesNotFoundDocumentation$inboundSchema: z.ZodType<
  ListInvoicesNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListInvoicesNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListInvoicesNotFoundDocumentation$outboundSchema: z.ZodType<
  ListInvoicesNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListInvoicesNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesNotFoundDocumentation$ {
  /** @deprecated use `ListInvoicesNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListInvoicesNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListInvoicesNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListInvoicesNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListInvoicesNotFoundDocumentation$Outbound;
}

export function listInvoicesNotFoundDocumentationToJSON(
  listInvoicesNotFoundDocumentation: ListInvoicesNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListInvoicesNotFoundDocumentation$outboundSchema.parse(
      listInvoicesNotFoundDocumentation,
    ),
  );
}

export function listInvoicesNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListInvoicesNotFoundLinks$inboundSchema: z.ZodType<
  ListInvoicesNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListInvoicesNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type ListInvoicesNotFoundLinks$Outbound = {
  documentation: ListInvoicesNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListInvoicesNotFoundLinks$outboundSchema: z.ZodType<
  ListInvoicesNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListInvoicesNotFoundLinks
> = z.object({
  documentation: z.lazy(() => ListInvoicesNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesNotFoundLinks$ {
  /** @deprecated use `ListInvoicesNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesNotFoundLinks$inboundSchema;
  /** @deprecated use `ListInvoicesNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesNotFoundLinks$outboundSchema;
  /** @deprecated use `ListInvoicesNotFoundLinks$Outbound` instead. */
  export type Outbound = ListInvoicesNotFoundLinks$Outbound;
}

export function listInvoicesNotFoundLinksToJSON(
  listInvoicesNotFoundLinks: ListInvoicesNotFoundLinks,
): string {
  return JSON.stringify(
    ListInvoicesNotFoundLinks$outboundSchema.parse(listInvoicesNotFoundLinks),
  );
}

export function listInvoicesNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListInvoicesBadRequestDocumentation$inboundSchema: z.ZodType<
  ListInvoicesBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListInvoicesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListInvoicesBadRequestDocumentation$outboundSchema: z.ZodType<
  ListInvoicesBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListInvoicesBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesBadRequestDocumentation$ {
  /** @deprecated use `ListInvoicesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListInvoicesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListInvoicesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListInvoicesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListInvoicesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListInvoicesBadRequestDocumentation$Outbound;
}

export function listInvoicesBadRequestDocumentationToJSON(
  listInvoicesBadRequestDocumentation: ListInvoicesBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListInvoicesBadRequestDocumentation$outboundSchema.parse(
      listInvoicesBadRequestDocumentation,
    ),
  );
}

export function listInvoicesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListInvoicesBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListInvoicesBadRequestLinks$inboundSchema: z.ZodType<
  ListInvoicesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListInvoicesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListInvoicesBadRequestLinks$Outbound = {
  documentation: ListInvoicesBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListInvoicesBadRequestLinks$outboundSchema: z.ZodType<
  ListInvoicesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListInvoicesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListInvoicesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesBadRequestLinks$ {
  /** @deprecated use `ListInvoicesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesBadRequestLinks$inboundSchema;
  /** @deprecated use `ListInvoicesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesBadRequestLinks$outboundSchema;
  /** @deprecated use `ListInvoicesBadRequestLinks$Outbound` instead. */
  export type Outbound = ListInvoicesBadRequestLinks$Outbound;
}

export function listInvoicesBadRequestLinksToJSON(
  listInvoicesBadRequestLinks: ListInvoicesBadRequestLinks,
): string {
  return JSON.stringify(
    ListInvoicesBadRequestLinks$outboundSchema.parse(
      listInvoicesBadRequestLinks,
    ),
  );
}

export function listInvoicesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListInvoicesInvoice$inboundSchema: z.ZodType<
  ListInvoicesInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListInvoicesInvoice$Outbound = {};

/** @internal */
export const ListInvoicesInvoice$outboundSchema: z.ZodType<
  ListInvoicesInvoice$Outbound,
  z.ZodTypeDef,
  ListInvoicesInvoice
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesInvoice$ {
  /** @deprecated use `ListInvoicesInvoice$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesInvoice$inboundSchema;
  /** @deprecated use `ListInvoicesInvoice$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesInvoice$outboundSchema;
  /** @deprecated use `ListInvoicesInvoice$Outbound` instead. */
  export type Outbound = ListInvoicesInvoice$Outbound;
}

export function listInvoicesInvoiceToJSON(
  listInvoicesInvoice: ListInvoicesInvoice,
): string {
  return JSON.stringify(
    ListInvoicesInvoice$outboundSchema.parse(listInvoicesInvoice),
  );
}

export function listInvoicesInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesInvoice' from JSON`,
  );
}

/** @internal */
export const ListInvoicesEmbedded$inboundSchema: z.ZodType<
  ListInvoicesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  invoices: z.array(z.lazy(() => ListInvoicesInvoice$inboundSchema)).optional(),
});

/** @internal */
export type ListInvoicesEmbedded$Outbound = {
  invoices?: Array<ListInvoicesInvoice$Outbound> | undefined;
};

/** @internal */
export const ListInvoicesEmbedded$outboundSchema: z.ZodType<
  ListInvoicesEmbedded$Outbound,
  z.ZodTypeDef,
  ListInvoicesEmbedded
> = z.object({
  invoices: z.array(z.lazy(() => ListInvoicesInvoice$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesEmbedded$ {
  /** @deprecated use `ListInvoicesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesEmbedded$inboundSchema;
  /** @deprecated use `ListInvoicesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesEmbedded$outboundSchema;
  /** @deprecated use `ListInvoicesEmbedded$Outbound` instead. */
  export type Outbound = ListInvoicesEmbedded$Outbound;
}

export function listInvoicesEmbeddedToJSON(
  listInvoicesEmbedded: ListInvoicesEmbedded,
): string {
  return JSON.stringify(
    ListInvoicesEmbedded$outboundSchema.parse(listInvoicesEmbedded),
  );
}

export function listInvoicesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListInvoicesSelf$inboundSchema: z.ZodType<
  ListInvoicesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListInvoicesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListInvoicesSelf$outboundSchema: z.ZodType<
  ListInvoicesSelf$Outbound,
  z.ZodTypeDef,
  ListInvoicesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesSelf$ {
  /** @deprecated use `ListInvoicesSelf$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesSelf$inboundSchema;
  /** @deprecated use `ListInvoicesSelf$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesSelf$outboundSchema;
  /** @deprecated use `ListInvoicesSelf$Outbound` instead. */
  export type Outbound = ListInvoicesSelf$Outbound;
}

export function listInvoicesSelfToJSON(
  listInvoicesSelf: ListInvoicesSelf,
): string {
  return JSON.stringify(
    ListInvoicesSelf$outboundSchema.parse(listInvoicesSelf),
  );
}

export function listInvoicesSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesSelf' from JSON`,
  );
}

/** @internal */
export const ListInvoicesPrevious$inboundSchema: z.ZodType<
  ListInvoicesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListInvoicesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListInvoicesPrevious$outboundSchema: z.ZodType<
  ListInvoicesPrevious$Outbound,
  z.ZodTypeDef,
  ListInvoicesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesPrevious$ {
  /** @deprecated use `ListInvoicesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesPrevious$inboundSchema;
  /** @deprecated use `ListInvoicesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesPrevious$outboundSchema;
  /** @deprecated use `ListInvoicesPrevious$Outbound` instead. */
  export type Outbound = ListInvoicesPrevious$Outbound;
}

export function listInvoicesPreviousToJSON(
  listInvoicesPrevious: ListInvoicesPrevious,
): string {
  return JSON.stringify(
    ListInvoicesPrevious$outboundSchema.parse(listInvoicesPrevious),
  );
}

export function listInvoicesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesPrevious' from JSON`,
  );
}

/** @internal */
export const ListInvoicesNext$inboundSchema: z.ZodType<
  ListInvoicesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListInvoicesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListInvoicesNext$outboundSchema: z.ZodType<
  ListInvoicesNext$Outbound,
  z.ZodTypeDef,
  ListInvoicesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesNext$ {
  /** @deprecated use `ListInvoicesNext$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesNext$inboundSchema;
  /** @deprecated use `ListInvoicesNext$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesNext$outboundSchema;
  /** @deprecated use `ListInvoicesNext$Outbound` instead. */
  export type Outbound = ListInvoicesNext$Outbound;
}

export function listInvoicesNextToJSON(
  listInvoicesNext: ListInvoicesNext,
): string {
  return JSON.stringify(
    ListInvoicesNext$outboundSchema.parse(listInvoicesNext),
  );
}

export function listInvoicesNextFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesNext' from JSON`,
  );
}

/** @internal */
export const ListInvoicesDocumentation$inboundSchema: z.ZodType<
  ListInvoicesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListInvoicesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListInvoicesDocumentation$outboundSchema: z.ZodType<
  ListInvoicesDocumentation$Outbound,
  z.ZodTypeDef,
  ListInvoicesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesDocumentation$ {
  /** @deprecated use `ListInvoicesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesDocumentation$inboundSchema;
  /** @deprecated use `ListInvoicesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesDocumentation$outboundSchema;
  /** @deprecated use `ListInvoicesDocumentation$Outbound` instead. */
  export type Outbound = ListInvoicesDocumentation$Outbound;
}

export function listInvoicesDocumentationToJSON(
  listInvoicesDocumentation: ListInvoicesDocumentation,
): string {
  return JSON.stringify(
    ListInvoicesDocumentation$outboundSchema.parse(listInvoicesDocumentation),
  );
}

export function listInvoicesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListInvoicesLinks$inboundSchema: z.ZodType<
  ListInvoicesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListInvoicesSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListInvoicesPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListInvoicesNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListInvoicesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListInvoicesLinks$Outbound = {
  self?: ListInvoicesSelf$Outbound | undefined;
  previous?: ListInvoicesPrevious$Outbound | null | undefined;
  next?: ListInvoicesNext$Outbound | null | undefined;
  documentation?: ListInvoicesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListInvoicesLinks$outboundSchema: z.ZodType<
  ListInvoicesLinks$Outbound,
  z.ZodTypeDef,
  ListInvoicesLinks
> = z.object({
  self: z.lazy(() => ListInvoicesSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListInvoicesPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListInvoicesNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListInvoicesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesLinks$ {
  /** @deprecated use `ListInvoicesLinks$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesLinks$inboundSchema;
  /** @deprecated use `ListInvoicesLinks$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesLinks$outboundSchema;
  /** @deprecated use `ListInvoicesLinks$Outbound` instead. */
  export type Outbound = ListInvoicesLinks$Outbound;
}

export function listInvoicesLinksToJSON(
  listInvoicesLinks: ListInvoicesLinks,
): string {
  return JSON.stringify(
    ListInvoicesLinks$outboundSchema.parse(listInvoicesLinks),
  );
}

export function listInvoicesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesLinks' from JSON`,
  );
}

/** @internal */
export const ListInvoicesResponse$inboundSchema: z.ZodType<
  ListInvoicesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListInvoicesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListInvoicesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListInvoicesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListInvoicesEmbedded$Outbound | undefined;
  _links?: ListInvoicesLinks$Outbound | undefined;
};

/** @internal */
export const ListInvoicesResponse$outboundSchema: z.ZodType<
  ListInvoicesResponse$Outbound,
  z.ZodTypeDef,
  ListInvoicesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListInvoicesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListInvoicesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesResponse$ {
  /** @deprecated use `ListInvoicesResponse$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesResponse$inboundSchema;
  /** @deprecated use `ListInvoicesResponse$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesResponse$outboundSchema;
  /** @deprecated use `ListInvoicesResponse$Outbound` instead. */
  export type Outbound = ListInvoicesResponse$Outbound;
}

export function listInvoicesResponseToJSON(
  listInvoicesResponse: ListInvoicesResponse,
): string {
  return JSON.stringify(
    ListInvoicesResponse$outboundSchema.parse(listInvoicesResponse),
  );
}

export function listInvoicesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesResponse' from JSON`,
  );
}
