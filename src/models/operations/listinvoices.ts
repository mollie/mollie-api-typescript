/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListInvoicesRequest = {
  /**
   * Filter for an invoice with a specific invoice reference, for example
   *
   * @remarks
   * `2024.10000`.
   */
  reference?: string | null | undefined;
  /**
   * Filter for invoices of a specific year, for example `2024`.
   */
  year?: string | null | undefined;
  /**
   * Filter for invoices of a specific month, for example `01`.
   */
  month?: string | null | undefined;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.ListSort | null | undefined;
};

export type Invoice = {};

export type ListInvoicesEmbedded = {
  /**
   * An array of invoice objects. For a complete reference of
   *
   * @remarks
   * the invoice object, refer to the [Get invoice endpoint](get-invoice) documentation.
   */
  invoices?: Array<Invoice> | undefined;
};

/**
 * A list of invoice objects. For a complete reference of the invoice
 *
 * @remarks
 * object, refer to the [Get invoice endpoint](get-invoice) documentation.
 */
export type ListInvoicesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListInvoicesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: models.ListLinks | undefined;
};

/** @internal */
export const ListInvoicesRequest$inboundSchema: z.ZodType<
  ListInvoicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference: z.nullable(z.string()).optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$inboundSchema).optional(),
});

/** @internal */
export type ListInvoicesRequest$Outbound = {
  reference?: string | null | undefined;
  year?: string | null | undefined;
  month?: string | null | undefined;
  from?: string | null | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
};

/** @internal */
export const ListInvoicesRequest$outboundSchema: z.ZodType<
  ListInvoicesRequest$Outbound,
  z.ZodTypeDef,
  ListInvoicesRequest
> = z.object({
  reference: z.nullable(z.string()).optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesRequest$ {
  /** @deprecated use `ListInvoicesRequest$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesRequest$inboundSchema;
  /** @deprecated use `ListInvoicesRequest$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesRequest$outboundSchema;
  /** @deprecated use `ListInvoicesRequest$Outbound` instead. */
  export type Outbound = ListInvoicesRequest$Outbound;
}

export function listInvoicesRequestToJSON(
  listInvoicesRequest: ListInvoicesRequest,
): string {
  return JSON.stringify(
    ListInvoicesRequest$outboundSchema.parse(listInvoicesRequest),
  );
}

export function listInvoicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesRequest' from JSON`,
  );
}

/** @internal */
export const Invoice$inboundSchema: z.ZodType<Invoice, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Invoice$Outbound = {};

/** @internal */
export const Invoice$outboundSchema: z.ZodType<
  Invoice$Outbound,
  z.ZodTypeDef,
  Invoice
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Invoice$ {
  /** @deprecated use `Invoice$inboundSchema` instead. */
  export const inboundSchema = Invoice$inboundSchema;
  /** @deprecated use `Invoice$outboundSchema` instead. */
  export const outboundSchema = Invoice$outboundSchema;
  /** @deprecated use `Invoice$Outbound` instead. */
  export type Outbound = Invoice$Outbound;
}

export function invoiceToJSON(invoice: Invoice): string {
  return JSON.stringify(Invoice$outboundSchema.parse(invoice));
}

export function invoiceFromJSON(
  jsonString: string,
): SafeParseResult<Invoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Invoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Invoice' from JSON`,
  );
}

/** @internal */
export const ListInvoicesEmbedded$inboundSchema: z.ZodType<
  ListInvoicesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  invoices: z.array(z.lazy(() => Invoice$inboundSchema)).optional(),
});

/** @internal */
export type ListInvoicesEmbedded$Outbound = {
  invoices?: Array<Invoice$Outbound> | undefined;
};

/** @internal */
export const ListInvoicesEmbedded$outboundSchema: z.ZodType<
  ListInvoicesEmbedded$Outbound,
  z.ZodTypeDef,
  ListInvoicesEmbedded
> = z.object({
  invoices: z.array(z.lazy(() => Invoice$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesEmbedded$ {
  /** @deprecated use `ListInvoicesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesEmbedded$inboundSchema;
  /** @deprecated use `ListInvoicesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesEmbedded$outboundSchema;
  /** @deprecated use `ListInvoicesEmbedded$Outbound` instead. */
  export type Outbound = ListInvoicesEmbedded$Outbound;
}

export function listInvoicesEmbeddedToJSON(
  listInvoicesEmbedded: ListInvoicesEmbedded,
): string {
  return JSON.stringify(
    ListInvoicesEmbedded$outboundSchema.parse(listInvoicesEmbedded),
  );
}

export function listInvoicesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListInvoicesResponse$inboundSchema: z.ZodType<
  ListInvoicesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListInvoicesEmbedded$inboundSchema).optional(),
  _links: models.ListLinks$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListInvoicesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListInvoicesEmbedded$Outbound | undefined;
  _links?: models.ListLinks$Outbound | undefined;
};

/** @internal */
export const ListInvoicesResponse$outboundSchema: z.ZodType<
  ListInvoicesResponse$Outbound,
  z.ZodTypeDef,
  ListInvoicesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListInvoicesEmbedded$outboundSchema).optional(),
  links: models.ListLinks$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoicesResponse$ {
  /** @deprecated use `ListInvoicesResponse$inboundSchema` instead. */
  export const inboundSchema = ListInvoicesResponse$inboundSchema;
  /** @deprecated use `ListInvoicesResponse$outboundSchema` instead. */
  export const outboundSchema = ListInvoicesResponse$outboundSchema;
  /** @deprecated use `ListInvoicesResponse$Outbound` instead. */
  export type Outbound = ListInvoicesResponse$Outbound;
}

export function listInvoicesResponseToJSON(
  listInvoicesResponse: ListInvoicesResponse,
): string {
  return JSON.stringify(
    ListInvoicesResponse$outboundSchema.parse(listInvoicesResponse),
  );
}

export function listInvoicesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInvoicesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvoicesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvoicesResponse' from JSON`,
  );
}
