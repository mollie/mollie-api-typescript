/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetClientRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   *
   * * `organization`: Include the organization of the client. Available for `signuplink` partners, or for `oauth`
   *   partners with the `organizations.read` scope.
   * * `onboarding`: Include the onboarding status of the client. Available for `signuplink` partners, or for `oauth`
   *   partners with the `onboarding.read` scope.
   * * `capabilities`: Include the [capabilities](list-capabilities) of the client organization.
   *   Available for *oauth* partners with the `onboarding.read` scope.
   */
  embed?: string | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetClientNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetClientNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetClientNotFoundDocumentation;
};

/**
 * The commission object.
 */
export type GetClientCommission = {
  /**
   * The commission count.
   */
  count?: number | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetClientSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the client's organization.
 */
export type GetClientLinksOrganization = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the client's onboarding status.
 */
export type GetClientLinksOnboarding = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetClientDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetClientLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetClientSelf | undefined;
  /**
   * The API resource URL of the client's organization.
   */
  organization?: GetClientLinksOrganization | undefined;
  /**
   * The API resource URL of the client's onboarding status.
   */
  onboarding?: GetClientLinksOnboarding | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetClientDocumentation | undefined;
};

/**
 * The preferred locale of the merchant, as set in their Mollie dashboard.
 */
export const GetClientLocale = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * The preferred locale of the merchant, as set in their Mollie dashboard.
 */
export type GetClientLocale = ClosedEnum<typeof GetClientLocale>;

/**
 * The address of the organization.
 */
export type GetClientAddress = {
  /**
   * A street and street number.
   */
  streetAndNumber?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   */
  postalCode?: string | undefined;
  city?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country?: string | undefined;
};

/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export const GetClientVatRegulation = {
  Dutch: "dutch",
  British: "british",
  Shifted: "shifted",
} as const;
/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export type GetClientVatRegulation = ClosedEnum<typeof GetClientVatRegulation>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetClientOrganizationSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the organization's Mollie dashboard.
 */
export type GetClientOrganizationDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetClientOrganizationDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetClientOrganizationLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetClientOrganizationSelf | undefined;
  /**
   * Direct link to the organization's Mollie dashboard.
   */
  dashboard?: GetClientOrganizationDashboard | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetClientOrganizationDocumentation | undefined;
};

export type GetClientEmbeddedOrganization = {
  /**
   * Indicates the response contains an organization object. Will always contain the string `organization` for this
   *
   * @remarks
   * resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this organization. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The email address associated with the organization.
   */
  email?: string | undefined;
  /**
   * The preferred locale of the merchant, as set in their Mollie dashboard.
   */
  locale?: GetClientLocale | undefined;
  /**
   * The address of the organization.
   */
  address?: GetClientAddress | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | undefined;
  /**
   * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are
   *
   * @remarks
   * verified against the international registry *VIES*.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatNumber?: string | null | undefined;
  /**
   * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
   *
   * @remarks
   * Kingdom, and shifted VAT for merchants in the European Union.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatRegulation?: GetClientVatRegulation | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetClientOrganizationLinks | undefined;
};

/**
 * The current status of the organization's onboarding process.
 *
 * @remarks
 *
 * * `needs-data` — The merchant needs to provide additional information
 * * `in-review` — The merchant provided all information, awaiting review from Mollie
 * * `completed` — The onboarding is completed
 */
export const GetClientOnboardingStatus = {
  NeedsData: "needs-data",
  InReview: "in-review",
  Completed: "completed",
} as const;
/**
 * The current status of the organization's onboarding process.
 *
 * @remarks
 *
 * * `needs-data` — The merchant needs to provide additional information
 * * `in-review` — The merchant provided all information, awaiting review from Mollie
 * * `completed` — The onboarding is completed
 */
export type GetClientOnboardingStatus = ClosedEnum<
  typeof GetClientOnboardingStatus
>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetClientOnboardingSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
 *
 * @remarks
 * complete their onboarding.
 */
export type GetClientOnboardingDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the organization.
 */
export type GetClientOnboardingOrganization = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetClientOnboardingDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetClientOnboardingLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetClientOnboardingSelf | undefined;
  /**
   * Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
   *
   * @remarks
   * complete their onboarding.
   */
  dashboard?: GetClientOnboardingDashboard | undefined;
  /**
   * The API resource URL of the organization.
   */
  organization?: GetClientOnboardingOrganization | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetClientOnboardingDocumentation | undefined;
};

export type GetClientEmbeddedOnboarding = {
  /**
   * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
   *
   * @remarks
   * resource type.
   */
  resource?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The current status of the organization's onboarding process.
   *
   * @remarks
   *
   * * `needs-data` — The merchant needs to provide additional information
   * * `in-review` — The merchant provided all information, awaiting review from Mollie
   * * `completed` — The onboarding is completed
   */
  status?: GetClientOnboardingStatus | undefined;
  /**
   * Whether the organization can receive payments.
   */
  canReceivePayments?: boolean | undefined;
  /**
   * Whether the organization can receive settlements to their external bank account.
   */
  canReceiveSettlements?: boolean | undefined;
  /**
   * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  signedUpAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetClientOnboardingLinks | undefined;
};

export const GetClientCapabilitiesStatus = {
  Unrequested: "unrequested",
  Enabled: "enabled",
  Disabled: "disabled",
  Pending: "pending",
} as const;
export type GetClientCapabilitiesStatus = ClosedEnum<
  typeof GetClientCapabilitiesStatus
>;

export const GetClientStatusReason = {
  RequirementPastDue: "requirement-past-due",
  OnboardingInformationNeeded: "onboarding-information-needed",
} as const;
export type GetClientStatusReason = ClosedEnum<typeof GetClientStatusReason>;

/**
 * The status of the requirement depends on its due date.
 *
 * @remarks
 * If no due date is given, the status will be `requested`.
 */
export const GetClientRequirementStatus = {
  CurrentlyDue: "currently-due",
  PastDue: "past-due",
  Requested: "requested",
} as const;
/**
 * The status of the requirement depends on its due date.
 *
 * @remarks
 * If no due date is given, the status will be `requested`.
 */
export type GetClientRequirementStatus = ClosedEnum<
  typeof GetClientRequirementStatus
>;

/**
 * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
 *
 * @remarks
 * For example, where necessary documents are to be uploaded.
 */
export type GetClientCapabilitiesDashboard = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

export type GetClientRequirementLinks = {
  /**
   * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
   *
   * @remarks
   * For example, where necessary documents are to be uploaded.
   */
  dashboard?: GetClientCapabilitiesDashboard | undefined;
};

export type GetClientRequirement = {
  /**
   * The name of this requirement, referring to the task to be fulfilled by the organization
   *
   * @remarks
   * to enable or re-enable the capability. The name is unique among other requirements
   * of the same capability.
   */
  id?: string | undefined;
  /**
   * The status of the requirement depends on its due date.
   *
   * @remarks
   * If no due date is given, the status will be `requested`.
   */
  status?: GetClientRequirementStatus | undefined;
  /**
   * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
   */
  dueDate?: string | null | undefined;
  links?: GetClientRequirementLinks | undefined;
};

export type GetClientCapabilities = {
  /**
   * Always the word `capability` for this resource type.
   */
  resource?: string | undefined;
  /**
   * A unique name for this capability like `payments` / `settlements`.
   */
  name?: string | undefined;
  status?: GetClientCapabilitiesStatus | undefined;
  statusReason?: GetClientStatusReason | null | undefined;
  requirements?: Array<GetClientRequirement> | undefined;
};

export type GetClientEmbedded = {
  organization?: GetClientEmbeddedOrganization | undefined;
  onboarding?: GetClientEmbeddedOnboarding | undefined;
  capabilities?: GetClientCapabilities | undefined;
};

/**
 * The client object.
 */
export type GetClientResponse = {
  /**
   * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this client. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The commission object.
   */
  commission?: GetClientCommission | null | undefined;
  /**
   * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  organizationCreatedAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetClientLinks | undefined;
  embedded?: GetClientEmbedded | undefined;
};

/** @internal */
export const GetClientRequest$inboundSchema: z.ZodType<
  GetClientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  embed: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetClientRequest$Outbound = {
  id: string;
  embed?: string | null | undefined;
};

/** @internal */
export const GetClientRequest$outboundSchema: z.ZodType<
  GetClientRequest$Outbound,
  z.ZodTypeDef,
  GetClientRequest
> = z.object({
  id: z.string(),
  embed: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientRequest$ {
  /** @deprecated use `GetClientRequest$inboundSchema` instead. */
  export const inboundSchema = GetClientRequest$inboundSchema;
  /** @deprecated use `GetClientRequest$outboundSchema` instead. */
  export const outboundSchema = GetClientRequest$outboundSchema;
  /** @deprecated use `GetClientRequest$Outbound` instead. */
  export type Outbound = GetClientRequest$Outbound;
}

export function getClientRequestToJSON(
  getClientRequest: GetClientRequest,
): string {
  return JSON.stringify(
    GetClientRequest$outboundSchema.parse(getClientRequest),
  );
}

export function getClientRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientRequest' from JSON`,
  );
}

/** @internal */
export const GetClientNotFoundDocumentation$inboundSchema: z.ZodType<
  GetClientNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientNotFoundDocumentation$outboundSchema: z.ZodType<
  GetClientNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetClientNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientNotFoundDocumentation$ {
  /** @deprecated use `GetClientNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetClientNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetClientNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetClientNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetClientNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetClientNotFoundDocumentation$Outbound;
}

export function getClientNotFoundDocumentationToJSON(
  getClientNotFoundDocumentation: GetClientNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetClientNotFoundDocumentation$outboundSchema.parse(
      getClientNotFoundDocumentation,
    ),
  );
}

export function getClientNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetClientNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetClientNotFoundLinks$inboundSchema: z.ZodType<
  GetClientNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetClientNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetClientNotFoundLinks$Outbound = {
  documentation: GetClientNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetClientNotFoundLinks$outboundSchema: z.ZodType<
  GetClientNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetClientNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetClientNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientNotFoundLinks$ {
  /** @deprecated use `GetClientNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetClientNotFoundLinks$inboundSchema;
  /** @deprecated use `GetClientNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetClientNotFoundLinks$outboundSchema;
  /** @deprecated use `GetClientNotFoundLinks$Outbound` instead. */
  export type Outbound = GetClientNotFoundLinks$Outbound;
}

export function getClientNotFoundLinksToJSON(
  getClientNotFoundLinks: GetClientNotFoundLinks,
): string {
  return JSON.stringify(
    GetClientNotFoundLinks$outboundSchema.parse(getClientNotFoundLinks),
  );
}

export function getClientNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetClientNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetClientCommission$inboundSchema: z.ZodType<
  GetClientCommission,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
});

/** @internal */
export type GetClientCommission$Outbound = {
  count?: number | undefined;
};

/** @internal */
export const GetClientCommission$outboundSchema: z.ZodType<
  GetClientCommission$Outbound,
  z.ZodTypeDef,
  GetClientCommission
> = z.object({
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientCommission$ {
  /** @deprecated use `GetClientCommission$inboundSchema` instead. */
  export const inboundSchema = GetClientCommission$inboundSchema;
  /** @deprecated use `GetClientCommission$outboundSchema` instead. */
  export const outboundSchema = GetClientCommission$outboundSchema;
  /** @deprecated use `GetClientCommission$Outbound` instead. */
  export type Outbound = GetClientCommission$Outbound;
}

export function getClientCommissionToJSON(
  getClientCommission: GetClientCommission,
): string {
  return JSON.stringify(
    GetClientCommission$outboundSchema.parse(getClientCommission),
  );
}

export function getClientCommissionFromJSON(
  jsonString: string,
): SafeParseResult<GetClientCommission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientCommission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientCommission' from JSON`,
  );
}

/** @internal */
export const GetClientSelf$inboundSchema: z.ZodType<
  GetClientSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientSelf$outboundSchema: z.ZodType<
  GetClientSelf$Outbound,
  z.ZodTypeDef,
  GetClientSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientSelf$ {
  /** @deprecated use `GetClientSelf$inboundSchema` instead. */
  export const inboundSchema = GetClientSelf$inboundSchema;
  /** @deprecated use `GetClientSelf$outboundSchema` instead. */
  export const outboundSchema = GetClientSelf$outboundSchema;
  /** @deprecated use `GetClientSelf$Outbound` instead. */
  export type Outbound = GetClientSelf$Outbound;
}

export function getClientSelfToJSON(getClientSelf: GetClientSelf): string {
  return JSON.stringify(GetClientSelf$outboundSchema.parse(getClientSelf));
}

export function getClientSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetClientSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientSelf' from JSON`,
  );
}

/** @internal */
export const GetClientLinksOrganization$inboundSchema: z.ZodType<
  GetClientLinksOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientLinksOrganization$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientLinksOrganization$outboundSchema: z.ZodType<
  GetClientLinksOrganization$Outbound,
  z.ZodTypeDef,
  GetClientLinksOrganization
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientLinksOrganization$ {
  /** @deprecated use `GetClientLinksOrganization$inboundSchema` instead. */
  export const inboundSchema = GetClientLinksOrganization$inboundSchema;
  /** @deprecated use `GetClientLinksOrganization$outboundSchema` instead. */
  export const outboundSchema = GetClientLinksOrganization$outboundSchema;
  /** @deprecated use `GetClientLinksOrganization$Outbound` instead. */
  export type Outbound = GetClientLinksOrganization$Outbound;
}

export function getClientLinksOrganizationToJSON(
  getClientLinksOrganization: GetClientLinksOrganization,
): string {
  return JSON.stringify(
    GetClientLinksOrganization$outboundSchema.parse(getClientLinksOrganization),
  );
}

export function getClientLinksOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<GetClientLinksOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientLinksOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientLinksOrganization' from JSON`,
  );
}

/** @internal */
export const GetClientLinksOnboarding$inboundSchema: z.ZodType<
  GetClientLinksOnboarding,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientLinksOnboarding$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientLinksOnboarding$outboundSchema: z.ZodType<
  GetClientLinksOnboarding$Outbound,
  z.ZodTypeDef,
  GetClientLinksOnboarding
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientLinksOnboarding$ {
  /** @deprecated use `GetClientLinksOnboarding$inboundSchema` instead. */
  export const inboundSchema = GetClientLinksOnboarding$inboundSchema;
  /** @deprecated use `GetClientLinksOnboarding$outboundSchema` instead. */
  export const outboundSchema = GetClientLinksOnboarding$outboundSchema;
  /** @deprecated use `GetClientLinksOnboarding$Outbound` instead. */
  export type Outbound = GetClientLinksOnboarding$Outbound;
}

export function getClientLinksOnboardingToJSON(
  getClientLinksOnboarding: GetClientLinksOnboarding,
): string {
  return JSON.stringify(
    GetClientLinksOnboarding$outboundSchema.parse(getClientLinksOnboarding),
  );
}

export function getClientLinksOnboardingFromJSON(
  jsonString: string,
): SafeParseResult<GetClientLinksOnboarding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientLinksOnboarding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientLinksOnboarding' from JSON`,
  );
}

/** @internal */
export const GetClientDocumentation$inboundSchema: z.ZodType<
  GetClientDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientDocumentation$outboundSchema: z.ZodType<
  GetClientDocumentation$Outbound,
  z.ZodTypeDef,
  GetClientDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientDocumentation$ {
  /** @deprecated use `GetClientDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetClientDocumentation$inboundSchema;
  /** @deprecated use `GetClientDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetClientDocumentation$outboundSchema;
  /** @deprecated use `GetClientDocumentation$Outbound` instead. */
  export type Outbound = GetClientDocumentation$Outbound;
}

export function getClientDocumentationToJSON(
  getClientDocumentation: GetClientDocumentation,
): string {
  return JSON.stringify(
    GetClientDocumentation$outboundSchema.parse(getClientDocumentation),
  );
}

export function getClientDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetClientDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientDocumentation' from JSON`,
  );
}

/** @internal */
export const GetClientLinks$inboundSchema: z.ZodType<
  GetClientLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetClientSelf$inboundSchema).optional(),
  organization: z.lazy(() => GetClientLinksOrganization$inboundSchema)
    .optional(),
  onboarding: z.lazy(() => GetClientLinksOnboarding$inboundSchema).optional(),
  documentation: z.lazy(() => GetClientDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetClientLinks$Outbound = {
  self?: GetClientSelf$Outbound | undefined;
  organization?: GetClientLinksOrganization$Outbound | undefined;
  onboarding?: GetClientLinksOnboarding$Outbound | undefined;
  documentation?: GetClientDocumentation$Outbound | undefined;
};

/** @internal */
export const GetClientLinks$outboundSchema: z.ZodType<
  GetClientLinks$Outbound,
  z.ZodTypeDef,
  GetClientLinks
> = z.object({
  self: z.lazy(() => GetClientSelf$outboundSchema).optional(),
  organization: z.lazy(() => GetClientLinksOrganization$outboundSchema)
    .optional(),
  onboarding: z.lazy(() => GetClientLinksOnboarding$outboundSchema).optional(),
  documentation: z.lazy(() => GetClientDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientLinks$ {
  /** @deprecated use `GetClientLinks$inboundSchema` instead. */
  export const inboundSchema = GetClientLinks$inboundSchema;
  /** @deprecated use `GetClientLinks$outboundSchema` instead. */
  export const outboundSchema = GetClientLinks$outboundSchema;
  /** @deprecated use `GetClientLinks$Outbound` instead. */
  export type Outbound = GetClientLinks$Outbound;
}

export function getClientLinksToJSON(getClientLinks: GetClientLinks): string {
  return JSON.stringify(GetClientLinks$outboundSchema.parse(getClientLinks));
}

export function getClientLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetClientLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientLinks' from JSON`,
  );
}

/** @internal */
export const GetClientLocale$inboundSchema: z.ZodNativeEnum<
  typeof GetClientLocale
> = z.nativeEnum(GetClientLocale);

/** @internal */
export const GetClientLocale$outboundSchema: z.ZodNativeEnum<
  typeof GetClientLocale
> = GetClientLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientLocale$ {
  /** @deprecated use `GetClientLocale$inboundSchema` instead. */
  export const inboundSchema = GetClientLocale$inboundSchema;
  /** @deprecated use `GetClientLocale$outboundSchema` instead. */
  export const outboundSchema = GetClientLocale$outboundSchema;
}

/** @internal */
export const GetClientAddress$inboundSchema: z.ZodType<
  GetClientAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetClientAddress$Outbound = {
  streetAndNumber?: string | undefined;
  postalCode?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetClientAddress$outboundSchema: z.ZodType<
  GetClientAddress$Outbound,
  z.ZodTypeDef,
  GetClientAddress
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientAddress$ {
  /** @deprecated use `GetClientAddress$inboundSchema` instead. */
  export const inboundSchema = GetClientAddress$inboundSchema;
  /** @deprecated use `GetClientAddress$outboundSchema` instead. */
  export const outboundSchema = GetClientAddress$outboundSchema;
  /** @deprecated use `GetClientAddress$Outbound` instead. */
  export type Outbound = GetClientAddress$Outbound;
}

export function getClientAddressToJSON(
  getClientAddress: GetClientAddress,
): string {
  return JSON.stringify(
    GetClientAddress$outboundSchema.parse(getClientAddress),
  );
}

export function getClientAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetClientAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientAddress' from JSON`,
  );
}

/** @internal */
export const GetClientVatRegulation$inboundSchema: z.ZodNativeEnum<
  typeof GetClientVatRegulation
> = z.nativeEnum(GetClientVatRegulation);

/** @internal */
export const GetClientVatRegulation$outboundSchema: z.ZodNativeEnum<
  typeof GetClientVatRegulation
> = GetClientVatRegulation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientVatRegulation$ {
  /** @deprecated use `GetClientVatRegulation$inboundSchema` instead. */
  export const inboundSchema = GetClientVatRegulation$inboundSchema;
  /** @deprecated use `GetClientVatRegulation$outboundSchema` instead. */
  export const outboundSchema = GetClientVatRegulation$outboundSchema;
}

/** @internal */
export const GetClientOrganizationSelf$inboundSchema: z.ZodType<
  GetClientOrganizationSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientOrganizationSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientOrganizationSelf$outboundSchema: z.ZodType<
  GetClientOrganizationSelf$Outbound,
  z.ZodTypeDef,
  GetClientOrganizationSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOrganizationSelf$ {
  /** @deprecated use `GetClientOrganizationSelf$inboundSchema` instead. */
  export const inboundSchema = GetClientOrganizationSelf$inboundSchema;
  /** @deprecated use `GetClientOrganizationSelf$outboundSchema` instead. */
  export const outboundSchema = GetClientOrganizationSelf$outboundSchema;
  /** @deprecated use `GetClientOrganizationSelf$Outbound` instead. */
  export type Outbound = GetClientOrganizationSelf$Outbound;
}

export function getClientOrganizationSelfToJSON(
  getClientOrganizationSelf: GetClientOrganizationSelf,
): string {
  return JSON.stringify(
    GetClientOrganizationSelf$outboundSchema.parse(getClientOrganizationSelf),
  );
}

export function getClientOrganizationSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOrganizationSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOrganizationSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOrganizationSelf' from JSON`,
  );
}

/** @internal */
export const GetClientOrganizationDashboard$inboundSchema: z.ZodType<
  GetClientOrganizationDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientOrganizationDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientOrganizationDashboard$outboundSchema: z.ZodType<
  GetClientOrganizationDashboard$Outbound,
  z.ZodTypeDef,
  GetClientOrganizationDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOrganizationDashboard$ {
  /** @deprecated use `GetClientOrganizationDashboard$inboundSchema` instead. */
  export const inboundSchema = GetClientOrganizationDashboard$inboundSchema;
  /** @deprecated use `GetClientOrganizationDashboard$outboundSchema` instead. */
  export const outboundSchema = GetClientOrganizationDashboard$outboundSchema;
  /** @deprecated use `GetClientOrganizationDashboard$Outbound` instead. */
  export type Outbound = GetClientOrganizationDashboard$Outbound;
}

export function getClientOrganizationDashboardToJSON(
  getClientOrganizationDashboard: GetClientOrganizationDashboard,
): string {
  return JSON.stringify(
    GetClientOrganizationDashboard$outboundSchema.parse(
      getClientOrganizationDashboard,
    ),
  );
}

export function getClientOrganizationDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOrganizationDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOrganizationDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOrganizationDashboard' from JSON`,
  );
}

/** @internal */
export const GetClientOrganizationDocumentation$inboundSchema: z.ZodType<
  GetClientOrganizationDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientOrganizationDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientOrganizationDocumentation$outboundSchema: z.ZodType<
  GetClientOrganizationDocumentation$Outbound,
  z.ZodTypeDef,
  GetClientOrganizationDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOrganizationDocumentation$ {
  /** @deprecated use `GetClientOrganizationDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetClientOrganizationDocumentation$inboundSchema;
  /** @deprecated use `GetClientOrganizationDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetClientOrganizationDocumentation$outboundSchema;
  /** @deprecated use `GetClientOrganizationDocumentation$Outbound` instead. */
  export type Outbound = GetClientOrganizationDocumentation$Outbound;
}

export function getClientOrganizationDocumentationToJSON(
  getClientOrganizationDocumentation: GetClientOrganizationDocumentation,
): string {
  return JSON.stringify(
    GetClientOrganizationDocumentation$outboundSchema.parse(
      getClientOrganizationDocumentation,
    ),
  );
}

export function getClientOrganizationDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOrganizationDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientOrganizationDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOrganizationDocumentation' from JSON`,
  );
}

/** @internal */
export const GetClientOrganizationLinks$inboundSchema: z.ZodType<
  GetClientOrganizationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetClientOrganizationSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => GetClientOrganizationDashboard$inboundSchema)
    .optional(),
  documentation: z.lazy(() => GetClientOrganizationDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetClientOrganizationLinks$Outbound = {
  self?: GetClientOrganizationSelf$Outbound | undefined;
  dashboard?: GetClientOrganizationDashboard$Outbound | undefined;
  documentation?: GetClientOrganizationDocumentation$Outbound | undefined;
};

/** @internal */
export const GetClientOrganizationLinks$outboundSchema: z.ZodType<
  GetClientOrganizationLinks$Outbound,
  z.ZodTypeDef,
  GetClientOrganizationLinks
> = z.object({
  self: z.lazy(() => GetClientOrganizationSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => GetClientOrganizationDashboard$outboundSchema)
    .optional(),
  documentation: z.lazy(() => GetClientOrganizationDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOrganizationLinks$ {
  /** @deprecated use `GetClientOrganizationLinks$inboundSchema` instead. */
  export const inboundSchema = GetClientOrganizationLinks$inboundSchema;
  /** @deprecated use `GetClientOrganizationLinks$outboundSchema` instead. */
  export const outboundSchema = GetClientOrganizationLinks$outboundSchema;
  /** @deprecated use `GetClientOrganizationLinks$Outbound` instead. */
  export type Outbound = GetClientOrganizationLinks$Outbound;
}

export function getClientOrganizationLinksToJSON(
  getClientOrganizationLinks: GetClientOrganizationLinks,
): string {
  return JSON.stringify(
    GetClientOrganizationLinks$outboundSchema.parse(getClientOrganizationLinks),
  );
}

export function getClientOrganizationLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOrganizationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOrganizationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOrganizationLinks' from JSON`,
  );
}

/** @internal */
export const GetClientEmbeddedOrganization$inboundSchema: z.ZodType<
  GetClientEmbeddedOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("organization"),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: GetClientLocale$inboundSchema.optional(),
  address: z.lazy(() => GetClientAddress$inboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(GetClientVatRegulation$inboundSchema).optional(),
  _links: z.lazy(() => GetClientOrganizationLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetClientEmbeddedOrganization$Outbound = {
  resource: string;
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  locale?: string | undefined;
  address?: GetClientAddress$Outbound | undefined;
  registrationNumber?: string | undefined;
  vatNumber?: string | null | undefined;
  vatRegulation?: string | null | undefined;
  _links?: GetClientOrganizationLinks$Outbound | undefined;
};

/** @internal */
export const GetClientEmbeddedOrganization$outboundSchema: z.ZodType<
  GetClientEmbeddedOrganization$Outbound,
  z.ZodTypeDef,
  GetClientEmbeddedOrganization
> = z.object({
  resource: z.string().default("organization"),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: GetClientLocale$outboundSchema.optional(),
  address: z.lazy(() => GetClientAddress$outboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(GetClientVatRegulation$outboundSchema).optional(),
  links: z.lazy(() => GetClientOrganizationLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientEmbeddedOrganization$ {
  /** @deprecated use `GetClientEmbeddedOrganization$inboundSchema` instead. */
  export const inboundSchema = GetClientEmbeddedOrganization$inboundSchema;
  /** @deprecated use `GetClientEmbeddedOrganization$outboundSchema` instead. */
  export const outboundSchema = GetClientEmbeddedOrganization$outboundSchema;
  /** @deprecated use `GetClientEmbeddedOrganization$Outbound` instead. */
  export type Outbound = GetClientEmbeddedOrganization$Outbound;
}

export function getClientEmbeddedOrganizationToJSON(
  getClientEmbeddedOrganization: GetClientEmbeddedOrganization,
): string {
  return JSON.stringify(
    GetClientEmbeddedOrganization$outboundSchema.parse(
      getClientEmbeddedOrganization,
    ),
  );
}

export function getClientEmbeddedOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<GetClientEmbeddedOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientEmbeddedOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientEmbeddedOrganization' from JSON`,
  );
}

/** @internal */
export const GetClientOnboardingStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetClientOnboardingStatus
> = z.nativeEnum(GetClientOnboardingStatus);

/** @internal */
export const GetClientOnboardingStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetClientOnboardingStatus
> = GetClientOnboardingStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOnboardingStatus$ {
  /** @deprecated use `GetClientOnboardingStatus$inboundSchema` instead. */
  export const inboundSchema = GetClientOnboardingStatus$inboundSchema;
  /** @deprecated use `GetClientOnboardingStatus$outboundSchema` instead. */
  export const outboundSchema = GetClientOnboardingStatus$outboundSchema;
}

/** @internal */
export const GetClientOnboardingSelf$inboundSchema: z.ZodType<
  GetClientOnboardingSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientOnboardingSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientOnboardingSelf$outboundSchema: z.ZodType<
  GetClientOnboardingSelf$Outbound,
  z.ZodTypeDef,
  GetClientOnboardingSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOnboardingSelf$ {
  /** @deprecated use `GetClientOnboardingSelf$inboundSchema` instead. */
  export const inboundSchema = GetClientOnboardingSelf$inboundSchema;
  /** @deprecated use `GetClientOnboardingSelf$outboundSchema` instead. */
  export const outboundSchema = GetClientOnboardingSelf$outboundSchema;
  /** @deprecated use `GetClientOnboardingSelf$Outbound` instead. */
  export type Outbound = GetClientOnboardingSelf$Outbound;
}

export function getClientOnboardingSelfToJSON(
  getClientOnboardingSelf: GetClientOnboardingSelf,
): string {
  return JSON.stringify(
    GetClientOnboardingSelf$outboundSchema.parse(getClientOnboardingSelf),
  );
}

export function getClientOnboardingSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOnboardingSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOnboardingSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOnboardingSelf' from JSON`,
  );
}

/** @internal */
export const GetClientOnboardingDashboard$inboundSchema: z.ZodType<
  GetClientOnboardingDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientOnboardingDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientOnboardingDashboard$outboundSchema: z.ZodType<
  GetClientOnboardingDashboard$Outbound,
  z.ZodTypeDef,
  GetClientOnboardingDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOnboardingDashboard$ {
  /** @deprecated use `GetClientOnboardingDashboard$inboundSchema` instead. */
  export const inboundSchema = GetClientOnboardingDashboard$inboundSchema;
  /** @deprecated use `GetClientOnboardingDashboard$outboundSchema` instead. */
  export const outboundSchema = GetClientOnboardingDashboard$outboundSchema;
  /** @deprecated use `GetClientOnboardingDashboard$Outbound` instead. */
  export type Outbound = GetClientOnboardingDashboard$Outbound;
}

export function getClientOnboardingDashboardToJSON(
  getClientOnboardingDashboard: GetClientOnboardingDashboard,
): string {
  return JSON.stringify(
    GetClientOnboardingDashboard$outboundSchema.parse(
      getClientOnboardingDashboard,
    ),
  );
}

export function getClientOnboardingDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOnboardingDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOnboardingDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOnboardingDashboard' from JSON`,
  );
}

/** @internal */
export const GetClientOnboardingOrganization$inboundSchema: z.ZodType<
  GetClientOnboardingOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientOnboardingOrganization$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientOnboardingOrganization$outboundSchema: z.ZodType<
  GetClientOnboardingOrganization$Outbound,
  z.ZodTypeDef,
  GetClientOnboardingOrganization
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOnboardingOrganization$ {
  /** @deprecated use `GetClientOnboardingOrganization$inboundSchema` instead. */
  export const inboundSchema = GetClientOnboardingOrganization$inboundSchema;
  /** @deprecated use `GetClientOnboardingOrganization$outboundSchema` instead. */
  export const outboundSchema = GetClientOnboardingOrganization$outboundSchema;
  /** @deprecated use `GetClientOnboardingOrganization$Outbound` instead. */
  export type Outbound = GetClientOnboardingOrganization$Outbound;
}

export function getClientOnboardingOrganizationToJSON(
  getClientOnboardingOrganization: GetClientOnboardingOrganization,
): string {
  return JSON.stringify(
    GetClientOnboardingOrganization$outboundSchema.parse(
      getClientOnboardingOrganization,
    ),
  );
}

export function getClientOnboardingOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOnboardingOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOnboardingOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOnboardingOrganization' from JSON`,
  );
}

/** @internal */
export const GetClientOnboardingDocumentation$inboundSchema: z.ZodType<
  GetClientOnboardingDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetClientOnboardingDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetClientOnboardingDocumentation$outboundSchema: z.ZodType<
  GetClientOnboardingDocumentation$Outbound,
  z.ZodTypeDef,
  GetClientOnboardingDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOnboardingDocumentation$ {
  /** @deprecated use `GetClientOnboardingDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetClientOnboardingDocumentation$inboundSchema;
  /** @deprecated use `GetClientOnboardingDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetClientOnboardingDocumentation$outboundSchema;
  /** @deprecated use `GetClientOnboardingDocumentation$Outbound` instead. */
  export type Outbound = GetClientOnboardingDocumentation$Outbound;
}

export function getClientOnboardingDocumentationToJSON(
  getClientOnboardingDocumentation: GetClientOnboardingDocumentation,
): string {
  return JSON.stringify(
    GetClientOnboardingDocumentation$outboundSchema.parse(
      getClientOnboardingDocumentation,
    ),
  );
}

export function getClientOnboardingDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOnboardingDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOnboardingDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOnboardingDocumentation' from JSON`,
  );
}

/** @internal */
export const GetClientOnboardingLinks$inboundSchema: z.ZodType<
  GetClientOnboardingLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetClientOnboardingSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => GetClientOnboardingDashboard$inboundSchema)
    .optional(),
  organization: z.lazy(() => GetClientOnboardingOrganization$inboundSchema)
    .optional(),
  documentation: z.lazy(() => GetClientOnboardingDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetClientOnboardingLinks$Outbound = {
  self?: GetClientOnboardingSelf$Outbound | undefined;
  dashboard?: GetClientOnboardingDashboard$Outbound | undefined;
  organization?: GetClientOnboardingOrganization$Outbound | undefined;
  documentation?: GetClientOnboardingDocumentation$Outbound | undefined;
};

/** @internal */
export const GetClientOnboardingLinks$outboundSchema: z.ZodType<
  GetClientOnboardingLinks$Outbound,
  z.ZodTypeDef,
  GetClientOnboardingLinks
> = z.object({
  self: z.lazy(() => GetClientOnboardingSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => GetClientOnboardingDashboard$outboundSchema)
    .optional(),
  organization: z.lazy(() => GetClientOnboardingOrganization$outboundSchema)
    .optional(),
  documentation: z.lazy(() => GetClientOnboardingDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientOnboardingLinks$ {
  /** @deprecated use `GetClientOnboardingLinks$inboundSchema` instead. */
  export const inboundSchema = GetClientOnboardingLinks$inboundSchema;
  /** @deprecated use `GetClientOnboardingLinks$outboundSchema` instead. */
  export const outboundSchema = GetClientOnboardingLinks$outboundSchema;
  /** @deprecated use `GetClientOnboardingLinks$Outbound` instead. */
  export type Outbound = GetClientOnboardingLinks$Outbound;
}

export function getClientOnboardingLinksToJSON(
  getClientOnboardingLinks: GetClientOnboardingLinks,
): string {
  return JSON.stringify(
    GetClientOnboardingLinks$outboundSchema.parse(getClientOnboardingLinks),
  );
}

export function getClientOnboardingLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetClientOnboardingLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientOnboardingLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientOnboardingLinks' from JSON`,
  );
}

/** @internal */
export const GetClientEmbeddedOnboarding$inboundSchema: z.ZodType<
  GetClientEmbeddedOnboarding,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("onboarding"),
  name: z.string().optional(),
  status: GetClientOnboardingStatus$inboundSchema.optional(),
  canReceivePayments: z.boolean().optional(),
  canReceiveSettlements: z.boolean().optional(),
  signedUpAt: z.string().optional(),
  _links: z.lazy(() => GetClientOnboardingLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetClientEmbeddedOnboarding$Outbound = {
  resource: string;
  name?: string | undefined;
  status?: string | undefined;
  canReceivePayments?: boolean | undefined;
  canReceiveSettlements?: boolean | undefined;
  signedUpAt?: string | undefined;
  _links?: GetClientOnboardingLinks$Outbound | undefined;
};

/** @internal */
export const GetClientEmbeddedOnboarding$outboundSchema: z.ZodType<
  GetClientEmbeddedOnboarding$Outbound,
  z.ZodTypeDef,
  GetClientEmbeddedOnboarding
> = z.object({
  resource: z.string().default("onboarding"),
  name: z.string().optional(),
  status: GetClientOnboardingStatus$outboundSchema.optional(),
  canReceivePayments: z.boolean().optional(),
  canReceiveSettlements: z.boolean().optional(),
  signedUpAt: z.string().optional(),
  links: z.lazy(() => GetClientOnboardingLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientEmbeddedOnboarding$ {
  /** @deprecated use `GetClientEmbeddedOnboarding$inboundSchema` instead. */
  export const inboundSchema = GetClientEmbeddedOnboarding$inboundSchema;
  /** @deprecated use `GetClientEmbeddedOnboarding$outboundSchema` instead. */
  export const outboundSchema = GetClientEmbeddedOnboarding$outboundSchema;
  /** @deprecated use `GetClientEmbeddedOnboarding$Outbound` instead. */
  export type Outbound = GetClientEmbeddedOnboarding$Outbound;
}

export function getClientEmbeddedOnboardingToJSON(
  getClientEmbeddedOnboarding: GetClientEmbeddedOnboarding,
): string {
  return JSON.stringify(
    GetClientEmbeddedOnboarding$outboundSchema.parse(
      getClientEmbeddedOnboarding,
    ),
  );
}

export function getClientEmbeddedOnboardingFromJSON(
  jsonString: string,
): SafeParseResult<GetClientEmbeddedOnboarding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientEmbeddedOnboarding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientEmbeddedOnboarding' from JSON`,
  );
}

/** @internal */
export const GetClientCapabilitiesStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetClientCapabilitiesStatus
> = z.nativeEnum(GetClientCapabilitiesStatus);

/** @internal */
export const GetClientCapabilitiesStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetClientCapabilitiesStatus
> = GetClientCapabilitiesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientCapabilitiesStatus$ {
  /** @deprecated use `GetClientCapabilitiesStatus$inboundSchema` instead. */
  export const inboundSchema = GetClientCapabilitiesStatus$inboundSchema;
  /** @deprecated use `GetClientCapabilitiesStatus$outboundSchema` instead. */
  export const outboundSchema = GetClientCapabilitiesStatus$outboundSchema;
}

/** @internal */
export const GetClientStatusReason$inboundSchema: z.ZodNativeEnum<
  typeof GetClientStatusReason
> = z.nativeEnum(GetClientStatusReason);

/** @internal */
export const GetClientStatusReason$outboundSchema: z.ZodNativeEnum<
  typeof GetClientStatusReason
> = GetClientStatusReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientStatusReason$ {
  /** @deprecated use `GetClientStatusReason$inboundSchema` instead. */
  export const inboundSchema = GetClientStatusReason$inboundSchema;
  /** @deprecated use `GetClientStatusReason$outboundSchema` instead. */
  export const outboundSchema = GetClientStatusReason$outboundSchema;
}

/** @internal */
export const GetClientRequirementStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetClientRequirementStatus
> = z.nativeEnum(GetClientRequirementStatus);

/** @internal */
export const GetClientRequirementStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetClientRequirementStatus
> = GetClientRequirementStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientRequirementStatus$ {
  /** @deprecated use `GetClientRequirementStatus$inboundSchema` instead. */
  export const inboundSchema = GetClientRequirementStatus$inboundSchema;
  /** @deprecated use `GetClientRequirementStatus$outboundSchema` instead. */
  export const outboundSchema = GetClientRequirementStatus$outboundSchema;
}

/** @internal */
export const GetClientCapabilitiesDashboard$inboundSchema: z.ZodType<
  GetClientCapabilitiesDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetClientCapabilitiesDashboard$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetClientCapabilitiesDashboard$outboundSchema: z.ZodType<
  GetClientCapabilitiesDashboard$Outbound,
  z.ZodTypeDef,
  GetClientCapabilitiesDashboard
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientCapabilitiesDashboard$ {
  /** @deprecated use `GetClientCapabilitiesDashboard$inboundSchema` instead. */
  export const inboundSchema = GetClientCapabilitiesDashboard$inboundSchema;
  /** @deprecated use `GetClientCapabilitiesDashboard$outboundSchema` instead. */
  export const outboundSchema = GetClientCapabilitiesDashboard$outboundSchema;
  /** @deprecated use `GetClientCapabilitiesDashboard$Outbound` instead. */
  export type Outbound = GetClientCapabilitiesDashboard$Outbound;
}

export function getClientCapabilitiesDashboardToJSON(
  getClientCapabilitiesDashboard: GetClientCapabilitiesDashboard,
): string {
  return JSON.stringify(
    GetClientCapabilitiesDashboard$outboundSchema.parse(
      getClientCapabilitiesDashboard,
    ),
  );
}

export function getClientCapabilitiesDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetClientCapabilitiesDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientCapabilitiesDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientCapabilitiesDashboard' from JSON`,
  );
}

/** @internal */
export const GetClientRequirementLinks$inboundSchema: z.ZodType<
  GetClientRequirementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  dashboard: z.lazy(() => GetClientCapabilitiesDashboard$inboundSchema)
    .optional(),
});

/** @internal */
export type GetClientRequirementLinks$Outbound = {
  dashboard?: GetClientCapabilitiesDashboard$Outbound | undefined;
};

/** @internal */
export const GetClientRequirementLinks$outboundSchema: z.ZodType<
  GetClientRequirementLinks$Outbound,
  z.ZodTypeDef,
  GetClientRequirementLinks
> = z.object({
  dashboard: z.lazy(() => GetClientCapabilitiesDashboard$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientRequirementLinks$ {
  /** @deprecated use `GetClientRequirementLinks$inboundSchema` instead. */
  export const inboundSchema = GetClientRequirementLinks$inboundSchema;
  /** @deprecated use `GetClientRequirementLinks$outboundSchema` instead. */
  export const outboundSchema = GetClientRequirementLinks$outboundSchema;
  /** @deprecated use `GetClientRequirementLinks$Outbound` instead. */
  export type Outbound = GetClientRequirementLinks$Outbound;
}

export function getClientRequirementLinksToJSON(
  getClientRequirementLinks: GetClientRequirementLinks,
): string {
  return JSON.stringify(
    GetClientRequirementLinks$outboundSchema.parse(getClientRequirementLinks),
  );
}

export function getClientRequirementLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetClientRequirementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientRequirementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientRequirementLinks' from JSON`,
  );
}

/** @internal */
export const GetClientRequirement$inboundSchema: z.ZodType<
  GetClientRequirement,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: GetClientRequirementStatus$inboundSchema.optional(),
  dueDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetClientRequirementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetClientRequirement$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  dueDate?: string | null | undefined;
  _links?: GetClientRequirementLinks$Outbound | undefined;
};

/** @internal */
export const GetClientRequirement$outboundSchema: z.ZodType<
  GetClientRequirement$Outbound,
  z.ZodTypeDef,
  GetClientRequirement
> = z.object({
  id: z.string().optional(),
  status: GetClientRequirementStatus$outboundSchema.optional(),
  dueDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetClientRequirementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientRequirement$ {
  /** @deprecated use `GetClientRequirement$inboundSchema` instead. */
  export const inboundSchema = GetClientRequirement$inboundSchema;
  /** @deprecated use `GetClientRequirement$outboundSchema` instead. */
  export const outboundSchema = GetClientRequirement$outboundSchema;
  /** @deprecated use `GetClientRequirement$Outbound` instead. */
  export type Outbound = GetClientRequirement$Outbound;
}

export function getClientRequirementToJSON(
  getClientRequirement: GetClientRequirement,
): string {
  return JSON.stringify(
    GetClientRequirement$outboundSchema.parse(getClientRequirement),
  );
}

export function getClientRequirementFromJSON(
  jsonString: string,
): SafeParseResult<GetClientRequirement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientRequirement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientRequirement' from JSON`,
  );
}

/** @internal */
export const GetClientCapabilities$inboundSchema: z.ZodType<
  GetClientCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: GetClientCapabilitiesStatus$inboundSchema.optional(),
  statusReason: z.nullable(GetClientStatusReason$inboundSchema).optional(),
  requirements: z.array(z.lazy(() => GetClientRequirement$inboundSchema))
    .optional(),
});

/** @internal */
export type GetClientCapabilities$Outbound = {
  resource?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  statusReason?: string | null | undefined;
  requirements?: Array<GetClientRequirement$Outbound> | undefined;
};

/** @internal */
export const GetClientCapabilities$outboundSchema: z.ZodType<
  GetClientCapabilities$Outbound,
  z.ZodTypeDef,
  GetClientCapabilities
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: GetClientCapabilitiesStatus$outboundSchema.optional(),
  statusReason: z.nullable(GetClientStatusReason$outboundSchema).optional(),
  requirements: z.array(z.lazy(() => GetClientRequirement$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientCapabilities$ {
  /** @deprecated use `GetClientCapabilities$inboundSchema` instead. */
  export const inboundSchema = GetClientCapabilities$inboundSchema;
  /** @deprecated use `GetClientCapabilities$outboundSchema` instead. */
  export const outboundSchema = GetClientCapabilities$outboundSchema;
  /** @deprecated use `GetClientCapabilities$Outbound` instead. */
  export type Outbound = GetClientCapabilities$Outbound;
}

export function getClientCapabilitiesToJSON(
  getClientCapabilities: GetClientCapabilities,
): string {
  return JSON.stringify(
    GetClientCapabilities$outboundSchema.parse(getClientCapabilities),
  );
}

export function getClientCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<GetClientCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientCapabilities' from JSON`,
  );
}

/** @internal */
export const GetClientEmbedded$inboundSchema: z.ZodType<
  GetClientEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: z.lazy(() => GetClientEmbeddedOrganization$inboundSchema)
    .optional(),
  onboarding: z.lazy(() => GetClientEmbeddedOnboarding$inboundSchema)
    .optional(),
  capabilities: z.lazy(() => GetClientCapabilities$inboundSchema).optional(),
});

/** @internal */
export type GetClientEmbedded$Outbound = {
  organization?: GetClientEmbeddedOrganization$Outbound | undefined;
  onboarding?: GetClientEmbeddedOnboarding$Outbound | undefined;
  capabilities?: GetClientCapabilities$Outbound | undefined;
};

/** @internal */
export const GetClientEmbedded$outboundSchema: z.ZodType<
  GetClientEmbedded$Outbound,
  z.ZodTypeDef,
  GetClientEmbedded
> = z.object({
  organization: z.lazy(() => GetClientEmbeddedOrganization$outboundSchema)
    .optional(),
  onboarding: z.lazy(() => GetClientEmbeddedOnboarding$outboundSchema)
    .optional(),
  capabilities: z.lazy(() => GetClientCapabilities$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientEmbedded$ {
  /** @deprecated use `GetClientEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetClientEmbedded$inboundSchema;
  /** @deprecated use `GetClientEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetClientEmbedded$outboundSchema;
  /** @deprecated use `GetClientEmbedded$Outbound` instead. */
  export type Outbound = GetClientEmbedded$Outbound;
}

export function getClientEmbeddedToJSON(
  getClientEmbedded: GetClientEmbedded,
): string {
  return JSON.stringify(
    GetClientEmbedded$outboundSchema.parse(getClientEmbedded),
  );
}

export function getClientEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetClientEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientEmbedded' from JSON`,
  );
}

/** @internal */
export const GetClientResponse$inboundSchema: z.ZodType<
  GetClientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("client"),
  id: z.string().optional(),
  commission: z.nullable(z.lazy(() => GetClientCommission$inboundSchema))
    .optional(),
  organizationCreatedAt: z.string().optional(),
  _links: z.lazy(() => GetClientLinks$inboundSchema).optional(),
  _embedded: z.lazy(() => GetClientEmbedded$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_embedded": "embedded",
  });
});

/** @internal */
export type GetClientResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  commission?: GetClientCommission$Outbound | null | undefined;
  organizationCreatedAt?: string | undefined;
  _links?: GetClientLinks$Outbound | undefined;
  _embedded?: GetClientEmbedded$Outbound | undefined;
};

/** @internal */
export const GetClientResponse$outboundSchema: z.ZodType<
  GetClientResponse$Outbound,
  z.ZodTypeDef,
  GetClientResponse
> = z.object({
  resource: z.string().default("client"),
  id: z.string().optional(),
  commission: z.nullable(z.lazy(() => GetClientCommission$outboundSchema))
    .optional(),
  organizationCreatedAt: z.string().optional(),
  links: z.lazy(() => GetClientLinks$outboundSchema).optional(),
  embedded: z.lazy(() => GetClientEmbedded$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientResponse$ {
  /** @deprecated use `GetClientResponse$inboundSchema` instead. */
  export const inboundSchema = GetClientResponse$inboundSchema;
  /** @deprecated use `GetClientResponse$outboundSchema` instead. */
  export const outboundSchema = GetClientResponse$outboundSchema;
  /** @deprecated use `GetClientResponse$Outbound` instead. */
  export type Outbound = GetClientResponse$Outbound;
}

export function getClientResponseToJSON(
  getClientResponse: GetClientResponse,
): string {
  return JSON.stringify(
    GetClientResponse$outboundSchema.parse(getClientResponse),
  );
}

export function getClientResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetClientResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientResponse' from JSON`,
  );
}
