/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetClientRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/**
 * The commission object.
 */
export type GetClientCommission = {
  /**
   * The commission count.
   */
  count?: number | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetClientLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  organization?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  onboarding?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: models.Url | undefined;
};

export type GetClientEmbedded = {
  organization?: models.EntityOrganization | undefined;
  onboarding?: models.EntityOnboardingStatus | undefined;
  capabilities?: models.EntityCapability | undefined;
};

/**
 * The client object.
 */
export type GetClientResponse = {
  /**
   * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this client. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The commission object.
   */
  commission?: GetClientCommission | null | undefined;
  /**
   * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  organizationCreatedAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetClientLinks | undefined;
  embedded?: GetClientEmbedded | undefined;
};

/** @internal */
export const GetClientRequest$inboundSchema: z.ZodType<
  GetClientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  embed: z.nullable(z.string()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetClientRequest$Outbound = {
  id: string;
  embed?: string | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetClientRequest$outboundSchema: z.ZodType<
  GetClientRequest$Outbound,
  z.ZodTypeDef,
  GetClientRequest
> = z.object({
  id: z.string(),
  embed: z.nullable(z.string()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientRequest$ {
  /** @deprecated use `GetClientRequest$inboundSchema` instead. */
  export const inboundSchema = GetClientRequest$inboundSchema;
  /** @deprecated use `GetClientRequest$outboundSchema` instead. */
  export const outboundSchema = GetClientRequest$outboundSchema;
  /** @deprecated use `GetClientRequest$Outbound` instead. */
  export type Outbound = GetClientRequest$Outbound;
}

export function getClientRequestToJSON(
  getClientRequest: GetClientRequest,
): string {
  return JSON.stringify(
    GetClientRequest$outboundSchema.parse(getClientRequest),
  );
}

export function getClientRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientRequest' from JSON`,
  );
}

/** @internal */
export const GetClientCommission$inboundSchema: z.ZodType<
  GetClientCommission,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
});

/** @internal */
export type GetClientCommission$Outbound = {
  count?: number | undefined;
};

/** @internal */
export const GetClientCommission$outboundSchema: z.ZodType<
  GetClientCommission$Outbound,
  z.ZodTypeDef,
  GetClientCommission
> = z.object({
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientCommission$ {
  /** @deprecated use `GetClientCommission$inboundSchema` instead. */
  export const inboundSchema = GetClientCommission$inboundSchema;
  /** @deprecated use `GetClientCommission$outboundSchema` instead. */
  export const outboundSchema = GetClientCommission$outboundSchema;
  /** @deprecated use `GetClientCommission$Outbound` instead. */
  export type Outbound = GetClientCommission$Outbound;
}

export function getClientCommissionToJSON(
  getClientCommission: GetClientCommission,
): string {
  return JSON.stringify(
    GetClientCommission$outboundSchema.parse(getClientCommission),
  );
}

export function getClientCommissionFromJSON(
  jsonString: string,
): SafeParseResult<GetClientCommission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientCommission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientCommission' from JSON`,
  );
}

/** @internal */
export const GetClientLinks$inboundSchema: z.ZodType<
  GetClientLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema.optional(),
  organization: models.Url$inboundSchema.optional(),
  onboarding: models.Url$inboundSchema.optional(),
  documentation: models.Url$inboundSchema.optional(),
});

/** @internal */
export type GetClientLinks$Outbound = {
  self?: models.Url$Outbound | undefined;
  organization?: models.Url$Outbound | undefined;
  onboarding?: models.Url$Outbound | undefined;
  documentation?: models.Url$Outbound | undefined;
};

/** @internal */
export const GetClientLinks$outboundSchema: z.ZodType<
  GetClientLinks$Outbound,
  z.ZodTypeDef,
  GetClientLinks
> = z.object({
  self: models.Url$outboundSchema.optional(),
  organization: models.Url$outboundSchema.optional(),
  onboarding: models.Url$outboundSchema.optional(),
  documentation: models.Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientLinks$ {
  /** @deprecated use `GetClientLinks$inboundSchema` instead. */
  export const inboundSchema = GetClientLinks$inboundSchema;
  /** @deprecated use `GetClientLinks$outboundSchema` instead. */
  export const outboundSchema = GetClientLinks$outboundSchema;
  /** @deprecated use `GetClientLinks$Outbound` instead. */
  export type Outbound = GetClientLinks$Outbound;
}

export function getClientLinksToJSON(getClientLinks: GetClientLinks): string {
  return JSON.stringify(GetClientLinks$outboundSchema.parse(getClientLinks));
}

export function getClientLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetClientLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientLinks' from JSON`,
  );
}

/** @internal */
export const GetClientEmbedded$inboundSchema: z.ZodType<
  GetClientEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: models.EntityOrganization$inboundSchema.optional(),
  onboarding: models.EntityOnboardingStatus$inboundSchema.optional(),
  capabilities: models.EntityCapability$inboundSchema.optional(),
});

/** @internal */
export type GetClientEmbedded$Outbound = {
  organization?: models.EntityOrganization$Outbound | undefined;
  onboarding?: models.EntityOnboardingStatus$Outbound | undefined;
  capabilities?: models.EntityCapability$Outbound | undefined;
};

/** @internal */
export const GetClientEmbedded$outboundSchema: z.ZodType<
  GetClientEmbedded$Outbound,
  z.ZodTypeDef,
  GetClientEmbedded
> = z.object({
  organization: models.EntityOrganization$outboundSchema.optional(),
  onboarding: models.EntityOnboardingStatus$outboundSchema.optional(),
  capabilities: models.EntityCapability$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientEmbedded$ {
  /** @deprecated use `GetClientEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetClientEmbedded$inboundSchema;
  /** @deprecated use `GetClientEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetClientEmbedded$outboundSchema;
  /** @deprecated use `GetClientEmbedded$Outbound` instead. */
  export type Outbound = GetClientEmbedded$Outbound;
}

export function getClientEmbeddedToJSON(
  getClientEmbedded: GetClientEmbedded,
): string {
  return JSON.stringify(
    GetClientEmbedded$outboundSchema.parse(getClientEmbedded),
  );
}

export function getClientEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetClientEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientEmbedded' from JSON`,
  );
}

/** @internal */
export const GetClientResponse$inboundSchema: z.ZodType<
  GetClientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  commission: z.nullable(z.lazy(() => GetClientCommission$inboundSchema))
    .optional(),
  organizationCreatedAt: z.string().optional(),
  _links: z.lazy(() => GetClientLinks$inboundSchema).optional(),
  _embedded: z.lazy(() => GetClientEmbedded$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_embedded": "embedded",
  });
});

/** @internal */
export type GetClientResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  commission?: GetClientCommission$Outbound | null | undefined;
  organizationCreatedAt?: string | undefined;
  _links?: GetClientLinks$Outbound | undefined;
  _embedded?: GetClientEmbedded$Outbound | undefined;
};

/** @internal */
export const GetClientResponse$outboundSchema: z.ZodType<
  GetClientResponse$Outbound,
  z.ZodTypeDef,
  GetClientResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  commission: z.nullable(z.lazy(() => GetClientCommission$outboundSchema))
    .optional(),
  organizationCreatedAt: z.string().optional(),
  links: z.lazy(() => GetClientLinks$outboundSchema).optional(),
  embedded: z.lazy(() => GetClientEmbedded$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientResponse$ {
  /** @deprecated use `GetClientResponse$inboundSchema` instead. */
  export const inboundSchema = GetClientResponse$inboundSchema;
  /** @deprecated use `GetClientResponse$outboundSchema` instead. */
  export const outboundSchema = GetClientResponse$outboundSchema;
  /** @deprecated use `GetClientResponse$Outbound` instead. */
  export type Outbound = GetClientResponse$Outbound;
}

export function getClientResponseToJSON(
  getClientResponse: GetClientResponse,
): string {
  return JSON.stringify(
    GetClientResponse$outboundSchema.parse(getClientResponse),
  );
}

export function getClientResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetClientResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientResponse' from JSON`,
  );
}
