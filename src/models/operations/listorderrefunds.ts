/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListOrderRefundsRequest = {
  /**
   * Provide the ID of the related order.
   */
  orderId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `payment`: Include the payments that the refunds were created for.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListOrderRefundsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListOrderRefundsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListOrderRefundsBadRequestDocumentation;
};

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
 */
export type ListOrderRefundsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type ListOrderRefundsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListOrderRefundsMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListOrderRefundsMetadataUnion =
  | ListOrderRefundsMetadata
  | string
  | Array<string>;

export type ListOrderRefundsExternalReference = {
  /**
   * Specifies the reference type
   *
   * @remarks
   *
   * Possible values: `acquirer-reference`
   */
  type?: string | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

export const ListOrderRefundsType = {
  Physical: "physical",
  Digital: "digital",
  Discount: "discount",
  ShippingFee: "shipping_fee",
  StoreCredit: "store_credit",
  GiftCard: "gift_card",
  Surcharge: "surcharge",
} as const;
export type ListOrderRefundsType = ClosedEnum<typeof ListOrderRefundsType>;

export const ListOrderRefundsStatus = {
  Created: "created",
  Authorized: "authorized",
  Paid: "paid",
  Canceled: "canceled",
  Shipping: "shipping",
  Completed: "completed",
} as const;
export type ListOrderRefundsStatus = ClosedEnum<typeof ListOrderRefundsStatus>;

export type ListOrderRefundsMetadataLine = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListOrderRefundsLineMetadataUnion =
  | ListOrderRefundsMetadataLine
  | string
  | Array<string>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListOrderRefundsAmountShipped = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListOrderRefundsAmountRefunded = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListOrderRefundsAmountCanceled = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListOrderRefundsUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListOrderRefundsTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListOrderRefundsVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListOrderRefundsDiscountedAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListOrderRefundsLine = {
  resource?: string | undefined;
  /**
   * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
   */
  id?: string | undefined;
  orderId?: string | undefined;
  name?: string | undefined;
  sku?: string | null | undefined;
  type?: ListOrderRefundsType | undefined;
  status?: ListOrderRefundsStatus | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | ListOrderRefundsMetadataLine
    | string
    | Array<string>
    | null
    | undefined;
  isCancelable?: boolean | undefined;
  /**
   * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
   *
   * @remarks
   *
   * Must be less than the number of items already refunded for this order line.
   */
  quantity?: number | undefined;
  quantityShipped?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountShipped?: ListOrderRefundsAmountShipped | undefined;
  quantityRefunded?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountRefunded?: ListOrderRefundsAmountRefunded | undefined;
  quantityCanceled?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountCanceled?: ListOrderRefundsAmountCanceled | undefined;
  shippableQuantity?: number | undefined;
  refundableQuantity?: number | undefined;
  cancelableQuantity?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  unitPrice?: ListOrderRefundsUnitPrice | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  totalAmount?: ListOrderRefundsTotalAmount | undefined;
  vatRate?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  vatAmount?: ListOrderRefundsVatAmount | undefined;
  createdAt?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  discountedAmount?: ListOrderRefundsDiscountedAmount | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListOrderRefundsRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [order](get-order) that this refund belongs to, if applicable.
 */
export type ListOrderRefundsOrder = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
 */
export type ListOrderRefundsSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListOrderRefundsRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListOrderRefundsRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: ListOrderRefundsRefundSelf | undefined;
  /**
   * The API resource URL of the [order](get-order) that this refund belongs to, if applicable.
   */
  order?: ListOrderRefundsOrder | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
   */
  settlement?: ListOrderRefundsSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListOrderRefundsRefundDocumentation | undefined;
};

export type ListOrderRefundsRefund = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
   */
  amount?: ListOrderRefundsAmount | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: ListOrderRefundsSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | ListOrderRefundsMetadata
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
   */
  orderId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   *
   * @remarks
   *
   * Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
   */
  status?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: ListOrderRefundsExternalReference | undefined;
  /**
   * A refund can optionally be linked to specific order lines.
   *
   * @remarks
   *
   * The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
   */
  lines?: Array<ListOrderRefundsLine> | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListOrderRefundsRefundLinks | undefined;
};

export type ListOrderRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds?: Array<ListOrderRefundsRefund> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListOrderRefundsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListOrderRefundsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListOrderRefundsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListOrderRefundsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListOrderRefundsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListOrderRefundsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListOrderRefundsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListOrderRefundsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListOrderRefundsDocumentation | undefined;
};

/**
 * A list of refund objects. For a complete reference of the refund object, refer to the [Create order refund endpoint](create-order-refund) documentation.
 */
export type ListOrderRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListOrderRefundsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListOrderRefundsLinks | undefined;
};

/** @internal */
export const ListOrderRefundsRequest$inboundSchema: z.ZodType<
  ListOrderRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListOrderRefundsRequest$Outbound = {
  orderId: string;
  from?: string | undefined;
  limit: number | null;
  include?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListOrderRefundsRequest$outboundSchema: z.ZodType<
  ListOrderRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsRequest
> = z.object({
  orderId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsRequest$ {
  /** @deprecated use `ListOrderRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsRequest$inboundSchema;
  /** @deprecated use `ListOrderRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsRequest$outboundSchema;
  /** @deprecated use `ListOrderRefundsRequest$Outbound` instead. */
  export type Outbound = ListOrderRefundsRequest$Outbound;
}

export function listOrderRefundsRequestToJSON(
  listOrderRefundsRequest: ListOrderRefundsRequest,
): string {
  return JSON.stringify(
    ListOrderRefundsRequest$outboundSchema.parse(listOrderRefundsRequest),
  );
}

export function listOrderRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsBadRequestDocumentation$inboundSchema: z.ZodType<
  ListOrderRefundsBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListOrderRefundsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListOrderRefundsBadRequestDocumentation$outboundSchema: z.ZodType<
  ListOrderRefundsBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsBadRequestDocumentation$ {
  /** @deprecated use `ListOrderRefundsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListOrderRefundsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListOrderRefundsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListOrderRefundsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListOrderRefundsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListOrderRefundsBadRequestDocumentation$Outbound;
}

export function listOrderRefundsBadRequestDocumentationToJSON(
  listOrderRefundsBadRequestDocumentation:
    ListOrderRefundsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListOrderRefundsBadRequestDocumentation$outboundSchema.parse(
      listOrderRefundsBadRequestDocumentation,
    ),
  );
}

export function listOrderRefundsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListOrderRefundsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListOrderRefundsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListOrderRefundsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsBadRequestLinks$inboundSchema: z.ZodType<
  ListOrderRefundsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListOrderRefundsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListOrderRefundsBadRequestLinks$Outbound = {
  documentation: ListOrderRefundsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListOrderRefundsBadRequestLinks$outboundSchema: z.ZodType<
  ListOrderRefundsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListOrderRefundsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsBadRequestLinks$ {
  /** @deprecated use `ListOrderRefundsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListOrderRefundsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListOrderRefundsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListOrderRefundsBadRequestLinks$Outbound;
}

export function listOrderRefundsBadRequestLinksToJSON(
  listOrderRefundsBadRequestLinks: ListOrderRefundsBadRequestLinks,
): string {
  return JSON.stringify(
    ListOrderRefundsBadRequestLinks$outboundSchema.parse(
      listOrderRefundsBadRequestLinks,
    ),
  );
}

export function listOrderRefundsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsAmount$inboundSchema: z.ZodType<
  ListOrderRefundsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsAmount$outboundSchema: z.ZodType<
  ListOrderRefundsAmount$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsAmount$ {
  /** @deprecated use `ListOrderRefundsAmount$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsAmount$inboundSchema;
  /** @deprecated use `ListOrderRefundsAmount$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsAmount$outboundSchema;
  /** @deprecated use `ListOrderRefundsAmount$Outbound` instead. */
  export type Outbound = ListOrderRefundsAmount$Outbound;
}

export function listOrderRefundsAmountToJSON(
  listOrderRefundsAmount: ListOrderRefundsAmount,
): string {
  return JSON.stringify(
    ListOrderRefundsAmount$outboundSchema.parse(listOrderRefundsAmount),
  );
}

export function listOrderRefundsAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsAmount' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsSettlementAmount$inboundSchema: z.ZodType<
  ListOrderRefundsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsSettlementAmount$outboundSchema: z.ZodType<
  ListOrderRefundsSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsSettlementAmount$ {
  /** @deprecated use `ListOrderRefundsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsSettlementAmount$inboundSchema;
  /** @deprecated use `ListOrderRefundsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsSettlementAmount$outboundSchema;
  /** @deprecated use `ListOrderRefundsSettlementAmount$Outbound` instead. */
  export type Outbound = ListOrderRefundsSettlementAmount$Outbound;
}

export function listOrderRefundsSettlementAmountToJSON(
  listOrderRefundsSettlementAmount: ListOrderRefundsSettlementAmount,
): string {
  return JSON.stringify(
    ListOrderRefundsSettlementAmount$outboundSchema.parse(
      listOrderRefundsSettlementAmount,
    ),
  );
}

export function listOrderRefundsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsMetadata$inboundSchema: z.ZodType<
  ListOrderRefundsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListOrderRefundsMetadata$Outbound = {};

/** @internal */
export const ListOrderRefundsMetadata$outboundSchema: z.ZodType<
  ListOrderRefundsMetadata$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsMetadata$ {
  /** @deprecated use `ListOrderRefundsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsMetadata$inboundSchema;
  /** @deprecated use `ListOrderRefundsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsMetadata$outboundSchema;
  /** @deprecated use `ListOrderRefundsMetadata$Outbound` instead. */
  export type Outbound = ListOrderRefundsMetadata$Outbound;
}

export function listOrderRefundsMetadataToJSON(
  listOrderRefundsMetadata: ListOrderRefundsMetadata,
): string {
  return JSON.stringify(
    ListOrderRefundsMetadata$outboundSchema.parse(listOrderRefundsMetadata),
  );
}

export function listOrderRefundsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsMetadata' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsMetadataUnion$inboundSchema: z.ZodType<
  ListOrderRefundsMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListOrderRefundsMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type ListOrderRefundsMetadataUnion$Outbound =
  | ListOrderRefundsMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const ListOrderRefundsMetadataUnion$outboundSchema: z.ZodType<
  ListOrderRefundsMetadataUnion$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsMetadataUnion
> = z.union([
  z.lazy(() => ListOrderRefundsMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsMetadataUnion$ {
  /** @deprecated use `ListOrderRefundsMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsMetadataUnion$inboundSchema;
  /** @deprecated use `ListOrderRefundsMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsMetadataUnion$outboundSchema;
  /** @deprecated use `ListOrderRefundsMetadataUnion$Outbound` instead. */
  export type Outbound = ListOrderRefundsMetadataUnion$Outbound;
}

export function listOrderRefundsMetadataUnionToJSON(
  listOrderRefundsMetadataUnion: ListOrderRefundsMetadataUnion,
): string {
  return JSON.stringify(
    ListOrderRefundsMetadataUnion$outboundSchema.parse(
      listOrderRefundsMetadataUnion,
    ),
  );
}

export function listOrderRefundsMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsMetadataUnion' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsExternalReference$inboundSchema: z.ZodType<
  ListOrderRefundsExternalReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type ListOrderRefundsExternalReference$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const ListOrderRefundsExternalReference$outboundSchema: z.ZodType<
  ListOrderRefundsExternalReference$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsExternalReference
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsExternalReference$ {
  /** @deprecated use `ListOrderRefundsExternalReference$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsExternalReference$inboundSchema;
  /** @deprecated use `ListOrderRefundsExternalReference$outboundSchema` instead. */
  export const outboundSchema =
    ListOrderRefundsExternalReference$outboundSchema;
  /** @deprecated use `ListOrderRefundsExternalReference$Outbound` instead. */
  export type Outbound = ListOrderRefundsExternalReference$Outbound;
}

export function listOrderRefundsExternalReferenceToJSON(
  listOrderRefundsExternalReference: ListOrderRefundsExternalReference,
): string {
  return JSON.stringify(
    ListOrderRefundsExternalReference$outboundSchema.parse(
      listOrderRefundsExternalReference,
    ),
  );
}

export function listOrderRefundsExternalReferenceFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsExternalReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsExternalReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsExternalReference' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsType$inboundSchema: z.ZodNativeEnum<
  typeof ListOrderRefundsType
> = z.nativeEnum(ListOrderRefundsType);

/** @internal */
export const ListOrderRefundsType$outboundSchema: z.ZodNativeEnum<
  typeof ListOrderRefundsType
> = ListOrderRefundsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsType$ {
  /** @deprecated use `ListOrderRefundsType$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsType$inboundSchema;
  /** @deprecated use `ListOrderRefundsType$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsType$outboundSchema;
}

/** @internal */
export const ListOrderRefundsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListOrderRefundsStatus
> = z.nativeEnum(ListOrderRefundsStatus);

/** @internal */
export const ListOrderRefundsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListOrderRefundsStatus
> = ListOrderRefundsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsStatus$ {
  /** @deprecated use `ListOrderRefundsStatus$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsStatus$inboundSchema;
  /** @deprecated use `ListOrderRefundsStatus$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsStatus$outboundSchema;
}

/** @internal */
export const ListOrderRefundsMetadataLine$inboundSchema: z.ZodType<
  ListOrderRefundsMetadataLine,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListOrderRefundsMetadataLine$Outbound = {};

/** @internal */
export const ListOrderRefundsMetadataLine$outboundSchema: z.ZodType<
  ListOrderRefundsMetadataLine$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsMetadataLine
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsMetadataLine$ {
  /** @deprecated use `ListOrderRefundsMetadataLine$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsMetadataLine$inboundSchema;
  /** @deprecated use `ListOrderRefundsMetadataLine$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsMetadataLine$outboundSchema;
  /** @deprecated use `ListOrderRefundsMetadataLine$Outbound` instead. */
  export type Outbound = ListOrderRefundsMetadataLine$Outbound;
}

export function listOrderRefundsMetadataLineToJSON(
  listOrderRefundsMetadataLine: ListOrderRefundsMetadataLine,
): string {
  return JSON.stringify(
    ListOrderRefundsMetadataLine$outboundSchema.parse(
      listOrderRefundsMetadataLine,
    ),
  );
}

export function listOrderRefundsMetadataLineFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsMetadataLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsMetadataLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsMetadataLine' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsLineMetadataUnion$inboundSchema: z.ZodType<
  ListOrderRefundsLineMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListOrderRefundsMetadataLine$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type ListOrderRefundsLineMetadataUnion$Outbound =
  | ListOrderRefundsMetadataLine$Outbound
  | string
  | Array<string>;

/** @internal */
export const ListOrderRefundsLineMetadataUnion$outboundSchema: z.ZodType<
  ListOrderRefundsLineMetadataUnion$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsLineMetadataUnion
> = z.union([
  z.lazy(() => ListOrderRefundsMetadataLine$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsLineMetadataUnion$ {
  /** @deprecated use `ListOrderRefundsLineMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsLineMetadataUnion$inboundSchema;
  /** @deprecated use `ListOrderRefundsLineMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    ListOrderRefundsLineMetadataUnion$outboundSchema;
  /** @deprecated use `ListOrderRefundsLineMetadataUnion$Outbound` instead. */
  export type Outbound = ListOrderRefundsLineMetadataUnion$Outbound;
}

export function listOrderRefundsLineMetadataUnionToJSON(
  listOrderRefundsLineMetadataUnion: ListOrderRefundsLineMetadataUnion,
): string {
  return JSON.stringify(
    ListOrderRefundsLineMetadataUnion$outboundSchema.parse(
      listOrderRefundsLineMetadataUnion,
    ),
  );
}

export function listOrderRefundsLineMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsLineMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsLineMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsLineMetadataUnion' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsAmountShipped$inboundSchema: z.ZodType<
  ListOrderRefundsAmountShipped,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsAmountShipped$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsAmountShipped$outboundSchema: z.ZodType<
  ListOrderRefundsAmountShipped$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsAmountShipped
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsAmountShipped$ {
  /** @deprecated use `ListOrderRefundsAmountShipped$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsAmountShipped$inboundSchema;
  /** @deprecated use `ListOrderRefundsAmountShipped$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsAmountShipped$outboundSchema;
  /** @deprecated use `ListOrderRefundsAmountShipped$Outbound` instead. */
  export type Outbound = ListOrderRefundsAmountShipped$Outbound;
}

export function listOrderRefundsAmountShippedToJSON(
  listOrderRefundsAmountShipped: ListOrderRefundsAmountShipped,
): string {
  return JSON.stringify(
    ListOrderRefundsAmountShipped$outboundSchema.parse(
      listOrderRefundsAmountShipped,
    ),
  );
}

export function listOrderRefundsAmountShippedFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsAmountShipped, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsAmountShipped$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsAmountShipped' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsAmountRefunded$inboundSchema: z.ZodType<
  ListOrderRefundsAmountRefunded,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsAmountRefunded$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsAmountRefunded$outboundSchema: z.ZodType<
  ListOrderRefundsAmountRefunded$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsAmountRefunded
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsAmountRefunded$ {
  /** @deprecated use `ListOrderRefundsAmountRefunded$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsAmountRefunded$inboundSchema;
  /** @deprecated use `ListOrderRefundsAmountRefunded$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsAmountRefunded$outboundSchema;
  /** @deprecated use `ListOrderRefundsAmountRefunded$Outbound` instead. */
  export type Outbound = ListOrderRefundsAmountRefunded$Outbound;
}

export function listOrderRefundsAmountRefundedToJSON(
  listOrderRefundsAmountRefunded: ListOrderRefundsAmountRefunded,
): string {
  return JSON.stringify(
    ListOrderRefundsAmountRefunded$outboundSchema.parse(
      listOrderRefundsAmountRefunded,
    ),
  );
}

export function listOrderRefundsAmountRefundedFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsAmountRefunded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsAmountRefunded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsAmountRefunded' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsAmountCanceled$inboundSchema: z.ZodType<
  ListOrderRefundsAmountCanceled,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsAmountCanceled$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsAmountCanceled$outboundSchema: z.ZodType<
  ListOrderRefundsAmountCanceled$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsAmountCanceled
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsAmountCanceled$ {
  /** @deprecated use `ListOrderRefundsAmountCanceled$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsAmountCanceled$inboundSchema;
  /** @deprecated use `ListOrderRefundsAmountCanceled$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsAmountCanceled$outboundSchema;
  /** @deprecated use `ListOrderRefundsAmountCanceled$Outbound` instead. */
  export type Outbound = ListOrderRefundsAmountCanceled$Outbound;
}

export function listOrderRefundsAmountCanceledToJSON(
  listOrderRefundsAmountCanceled: ListOrderRefundsAmountCanceled,
): string {
  return JSON.stringify(
    ListOrderRefundsAmountCanceled$outboundSchema.parse(
      listOrderRefundsAmountCanceled,
    ),
  );
}

export function listOrderRefundsAmountCanceledFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsAmountCanceled, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsAmountCanceled$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsAmountCanceled' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsUnitPrice$inboundSchema: z.ZodType<
  ListOrderRefundsUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsUnitPrice$outboundSchema: z.ZodType<
  ListOrderRefundsUnitPrice$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsUnitPrice$ {
  /** @deprecated use `ListOrderRefundsUnitPrice$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsUnitPrice$inboundSchema;
  /** @deprecated use `ListOrderRefundsUnitPrice$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsUnitPrice$outboundSchema;
  /** @deprecated use `ListOrderRefundsUnitPrice$Outbound` instead. */
  export type Outbound = ListOrderRefundsUnitPrice$Outbound;
}

export function listOrderRefundsUnitPriceToJSON(
  listOrderRefundsUnitPrice: ListOrderRefundsUnitPrice,
): string {
  return JSON.stringify(
    ListOrderRefundsUnitPrice$outboundSchema.parse(listOrderRefundsUnitPrice),
  );
}

export function listOrderRefundsUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsUnitPrice' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsTotalAmount$inboundSchema: z.ZodType<
  ListOrderRefundsTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsTotalAmount$outboundSchema: z.ZodType<
  ListOrderRefundsTotalAmount$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsTotalAmount$ {
  /** @deprecated use `ListOrderRefundsTotalAmount$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsTotalAmount$inboundSchema;
  /** @deprecated use `ListOrderRefundsTotalAmount$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsTotalAmount$outboundSchema;
  /** @deprecated use `ListOrderRefundsTotalAmount$Outbound` instead. */
  export type Outbound = ListOrderRefundsTotalAmount$Outbound;
}

export function listOrderRefundsTotalAmountToJSON(
  listOrderRefundsTotalAmount: ListOrderRefundsTotalAmount,
): string {
  return JSON.stringify(
    ListOrderRefundsTotalAmount$outboundSchema.parse(
      listOrderRefundsTotalAmount,
    ),
  );
}

export function listOrderRefundsTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsTotalAmount' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsVatAmount$inboundSchema: z.ZodType<
  ListOrderRefundsVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsVatAmount$outboundSchema: z.ZodType<
  ListOrderRefundsVatAmount$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsVatAmount$ {
  /** @deprecated use `ListOrderRefundsVatAmount$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsVatAmount$inboundSchema;
  /** @deprecated use `ListOrderRefundsVatAmount$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsVatAmount$outboundSchema;
  /** @deprecated use `ListOrderRefundsVatAmount$Outbound` instead. */
  export type Outbound = ListOrderRefundsVatAmount$Outbound;
}

export function listOrderRefundsVatAmountToJSON(
  listOrderRefundsVatAmount: ListOrderRefundsVatAmount,
): string {
  return JSON.stringify(
    ListOrderRefundsVatAmount$outboundSchema.parse(listOrderRefundsVatAmount),
  );
}

export function listOrderRefundsVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsVatAmount' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsDiscountedAmount$inboundSchema: z.ZodType<
  ListOrderRefundsDiscountedAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListOrderRefundsDiscountedAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListOrderRefundsDiscountedAmount$outboundSchema: z.ZodType<
  ListOrderRefundsDiscountedAmount$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsDiscountedAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsDiscountedAmount$ {
  /** @deprecated use `ListOrderRefundsDiscountedAmount$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsDiscountedAmount$inboundSchema;
  /** @deprecated use `ListOrderRefundsDiscountedAmount$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsDiscountedAmount$outboundSchema;
  /** @deprecated use `ListOrderRefundsDiscountedAmount$Outbound` instead. */
  export type Outbound = ListOrderRefundsDiscountedAmount$Outbound;
}

export function listOrderRefundsDiscountedAmountToJSON(
  listOrderRefundsDiscountedAmount: ListOrderRefundsDiscountedAmount,
): string {
  return JSON.stringify(
    ListOrderRefundsDiscountedAmount$outboundSchema.parse(
      listOrderRefundsDiscountedAmount,
    ),
  );
}

export function listOrderRefundsDiscountedAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsDiscountedAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsDiscountedAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsDiscountedAmount' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsLine$inboundSchema: z.ZodType<
  ListOrderRefundsLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("orderline"),
  id: z.string().optional(),
  orderId: z.string().optional(),
  name: z.string().optional(),
  sku: z.nullable(z.string()).optional(),
  type: ListOrderRefundsType$inboundSchema.optional(),
  status: ListOrderRefundsStatus$inboundSchema.optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListOrderRefundsMetadataLine$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  isCancelable: z.boolean().optional(),
  quantity: z.number().int().optional(),
  quantityShipped: z.number().int().optional(),
  amountShipped: z.lazy(() => ListOrderRefundsAmountShipped$inboundSchema)
    .optional(),
  quantityRefunded: z.number().int().optional(),
  amountRefunded: z.lazy(() => ListOrderRefundsAmountRefunded$inboundSchema)
    .optional(),
  quantityCanceled: z.number().int().optional(),
  amountCanceled: z.lazy(() => ListOrderRefundsAmountCanceled$inboundSchema)
    .optional(),
  shippableQuantity: z.number().int().optional(),
  refundableQuantity: z.number().int().optional(),
  cancelableQuantity: z.number().int().optional(),
  unitPrice: z.lazy(() => ListOrderRefundsUnitPrice$inboundSchema).optional(),
  totalAmount: z.lazy(() => ListOrderRefundsTotalAmount$inboundSchema)
    .optional(),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => ListOrderRefundsVatAmount$inboundSchema).optional(),
  createdAt: z.string().optional(),
  discountedAmount: z.lazy(() => ListOrderRefundsDiscountedAmount$inboundSchema)
    .optional(),
});

/** @internal */
export type ListOrderRefundsLine$Outbound = {
  resource: string;
  id?: string | undefined;
  orderId?: string | undefined;
  name?: string | undefined;
  sku?: string | null | undefined;
  type?: string | undefined;
  status?: string | undefined;
  metadata?:
    | ListOrderRefundsMetadataLine$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  isCancelable?: boolean | undefined;
  quantity?: number | undefined;
  quantityShipped?: number | undefined;
  amountShipped?: ListOrderRefundsAmountShipped$Outbound | undefined;
  quantityRefunded?: number | undefined;
  amountRefunded?: ListOrderRefundsAmountRefunded$Outbound | undefined;
  quantityCanceled?: number | undefined;
  amountCanceled?: ListOrderRefundsAmountCanceled$Outbound | undefined;
  shippableQuantity?: number | undefined;
  refundableQuantity?: number | undefined;
  cancelableQuantity?: number | undefined;
  unitPrice?: ListOrderRefundsUnitPrice$Outbound | undefined;
  totalAmount?: ListOrderRefundsTotalAmount$Outbound | undefined;
  vatRate?: string | undefined;
  vatAmount?: ListOrderRefundsVatAmount$Outbound | undefined;
  createdAt?: string | undefined;
  discountedAmount?: ListOrderRefundsDiscountedAmount$Outbound | undefined;
};

/** @internal */
export const ListOrderRefundsLine$outboundSchema: z.ZodType<
  ListOrderRefundsLine$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsLine
> = z.object({
  resource: z.string().default("orderline"),
  id: z.string().optional(),
  orderId: z.string().optional(),
  name: z.string().optional(),
  sku: z.nullable(z.string()).optional(),
  type: ListOrderRefundsType$outboundSchema.optional(),
  status: ListOrderRefundsStatus$outboundSchema.optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListOrderRefundsMetadataLine$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  isCancelable: z.boolean().optional(),
  quantity: z.number().int().optional(),
  quantityShipped: z.number().int().optional(),
  amountShipped: z.lazy(() => ListOrderRefundsAmountShipped$outboundSchema)
    .optional(),
  quantityRefunded: z.number().int().optional(),
  amountRefunded: z.lazy(() => ListOrderRefundsAmountRefunded$outboundSchema)
    .optional(),
  quantityCanceled: z.number().int().optional(),
  amountCanceled: z.lazy(() => ListOrderRefundsAmountCanceled$outboundSchema)
    .optional(),
  shippableQuantity: z.number().int().optional(),
  refundableQuantity: z.number().int().optional(),
  cancelableQuantity: z.number().int().optional(),
  unitPrice: z.lazy(() => ListOrderRefundsUnitPrice$outboundSchema).optional(),
  totalAmount: z.lazy(() => ListOrderRefundsTotalAmount$outboundSchema)
    .optional(),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => ListOrderRefundsVatAmount$outboundSchema).optional(),
  createdAt: z.string().optional(),
  discountedAmount: z.lazy(() =>
    ListOrderRefundsDiscountedAmount$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsLine$ {
  /** @deprecated use `ListOrderRefundsLine$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsLine$inboundSchema;
  /** @deprecated use `ListOrderRefundsLine$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsLine$outboundSchema;
  /** @deprecated use `ListOrderRefundsLine$Outbound` instead. */
  export type Outbound = ListOrderRefundsLine$Outbound;
}

export function listOrderRefundsLineToJSON(
  listOrderRefundsLine: ListOrderRefundsLine,
): string {
  return JSON.stringify(
    ListOrderRefundsLine$outboundSchema.parse(listOrderRefundsLine),
  );
}

export function listOrderRefundsLineFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsLine' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsRefundSelf$inboundSchema: z.ZodType<
  ListOrderRefundsRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListOrderRefundsRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListOrderRefundsRefundSelf$outboundSchema: z.ZodType<
  ListOrderRefundsRefundSelf$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsRefundSelf$ {
  /** @deprecated use `ListOrderRefundsRefundSelf$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsRefundSelf$inboundSchema;
  /** @deprecated use `ListOrderRefundsRefundSelf$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsRefundSelf$outboundSchema;
  /** @deprecated use `ListOrderRefundsRefundSelf$Outbound` instead. */
  export type Outbound = ListOrderRefundsRefundSelf$Outbound;
}

export function listOrderRefundsRefundSelfToJSON(
  listOrderRefundsRefundSelf: ListOrderRefundsRefundSelf,
): string {
  return JSON.stringify(
    ListOrderRefundsRefundSelf$outboundSchema.parse(listOrderRefundsRefundSelf),
  );
}

export function listOrderRefundsRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsRefundSelf' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsOrder$inboundSchema: z.ZodType<
  ListOrderRefundsOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListOrderRefundsOrder$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListOrderRefundsOrder$outboundSchema: z.ZodType<
  ListOrderRefundsOrder$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsOrder
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsOrder$ {
  /** @deprecated use `ListOrderRefundsOrder$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsOrder$inboundSchema;
  /** @deprecated use `ListOrderRefundsOrder$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsOrder$outboundSchema;
  /** @deprecated use `ListOrderRefundsOrder$Outbound` instead. */
  export type Outbound = ListOrderRefundsOrder$Outbound;
}

export function listOrderRefundsOrderToJSON(
  listOrderRefundsOrder: ListOrderRefundsOrder,
): string {
  return JSON.stringify(
    ListOrderRefundsOrder$outboundSchema.parse(listOrderRefundsOrder),
  );
}

export function listOrderRefundsOrderFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsOrder' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsSettlement$inboundSchema: z.ZodType<
  ListOrderRefundsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListOrderRefundsSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListOrderRefundsSettlement$outboundSchema: z.ZodType<
  ListOrderRefundsSettlement$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsSettlement$ {
  /** @deprecated use `ListOrderRefundsSettlement$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsSettlement$inboundSchema;
  /** @deprecated use `ListOrderRefundsSettlement$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsSettlement$outboundSchema;
  /** @deprecated use `ListOrderRefundsSettlement$Outbound` instead. */
  export type Outbound = ListOrderRefundsSettlement$Outbound;
}

export function listOrderRefundsSettlementToJSON(
  listOrderRefundsSettlement: ListOrderRefundsSettlement,
): string {
  return JSON.stringify(
    ListOrderRefundsSettlement$outboundSchema.parse(listOrderRefundsSettlement),
  );
}

export function listOrderRefundsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsSettlement' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsRefundDocumentation$inboundSchema: z.ZodType<
  ListOrderRefundsRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListOrderRefundsRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListOrderRefundsRefundDocumentation$outboundSchema: z.ZodType<
  ListOrderRefundsRefundDocumentation$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsRefundDocumentation$ {
  /** @deprecated use `ListOrderRefundsRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListOrderRefundsRefundDocumentation$inboundSchema;
  /** @deprecated use `ListOrderRefundsRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListOrderRefundsRefundDocumentation$outboundSchema;
  /** @deprecated use `ListOrderRefundsRefundDocumentation$Outbound` instead. */
  export type Outbound = ListOrderRefundsRefundDocumentation$Outbound;
}

export function listOrderRefundsRefundDocumentationToJSON(
  listOrderRefundsRefundDocumentation: ListOrderRefundsRefundDocumentation,
): string {
  return JSON.stringify(
    ListOrderRefundsRefundDocumentation$outboundSchema.parse(
      listOrderRefundsRefundDocumentation,
    ),
  );
}

export function listOrderRefundsRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsRefundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListOrderRefundsRefundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsRefundLinks$inboundSchema: z.ZodType<
  ListOrderRefundsRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListOrderRefundsRefundSelf$inboundSchema).optional(),
  order: z.lazy(() => ListOrderRefundsOrder$inboundSchema).optional(),
  settlement: z.nullable(z.lazy(() => ListOrderRefundsSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() => ListOrderRefundsRefundDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListOrderRefundsRefundLinks$Outbound = {
  self?: ListOrderRefundsRefundSelf$Outbound | undefined;
  order?: ListOrderRefundsOrder$Outbound | undefined;
  settlement?: ListOrderRefundsSettlement$Outbound | null | undefined;
  documentation?: ListOrderRefundsRefundDocumentation$Outbound | undefined;
};

/** @internal */
export const ListOrderRefundsRefundLinks$outboundSchema: z.ZodType<
  ListOrderRefundsRefundLinks$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsRefundLinks
> = z.object({
  self: z.lazy(() => ListOrderRefundsRefundSelf$outboundSchema).optional(),
  order: z.lazy(() => ListOrderRefundsOrder$outboundSchema).optional(),
  settlement: z.nullable(
    z.lazy(() => ListOrderRefundsSettlement$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListOrderRefundsRefundDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsRefundLinks$ {
  /** @deprecated use `ListOrderRefundsRefundLinks$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsRefundLinks$inboundSchema;
  /** @deprecated use `ListOrderRefundsRefundLinks$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsRefundLinks$outboundSchema;
  /** @deprecated use `ListOrderRefundsRefundLinks$Outbound` instead. */
  export type Outbound = ListOrderRefundsRefundLinks$Outbound;
}

export function listOrderRefundsRefundLinksToJSON(
  listOrderRefundsRefundLinks: ListOrderRefundsRefundLinks,
): string {
  return JSON.stringify(
    ListOrderRefundsRefundLinks$outboundSchema.parse(
      listOrderRefundsRefundLinks,
    ),
  );
}

export function listOrderRefundsRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsRefundLinks' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsRefund$inboundSchema: z.ZodType<
  ListOrderRefundsRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListOrderRefundsAmount$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListOrderRefundsSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListOrderRefundsMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  orderId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    ListOrderRefundsExternalReference$inboundSchema
  ).optional(),
  lines: z.array(z.lazy(() => ListOrderRefundsLine$inboundSchema)).optional(),
  _links: z.lazy(() => ListOrderRefundsRefundLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListOrderRefundsRefund$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: ListOrderRefundsAmount$Outbound | undefined;
  settlementAmount?:
    | ListOrderRefundsSettlementAmount$Outbound
    | null
    | undefined;
  metadata?:
    | ListOrderRefundsMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  orderId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?: ListOrderRefundsExternalReference$Outbound | undefined;
  lines?: Array<ListOrderRefundsLine$Outbound> | undefined;
  _links?: ListOrderRefundsRefundLinks$Outbound | undefined;
};

/** @internal */
export const ListOrderRefundsRefund$outboundSchema: z.ZodType<
  ListOrderRefundsRefund$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsRefund
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListOrderRefundsAmount$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListOrderRefundsSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListOrderRefundsMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  orderId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    ListOrderRefundsExternalReference$outboundSchema
  ).optional(),
  lines: z.array(z.lazy(() => ListOrderRefundsLine$outboundSchema)).optional(),
  links: z.lazy(() => ListOrderRefundsRefundLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsRefund$ {
  /** @deprecated use `ListOrderRefundsRefund$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsRefund$inboundSchema;
  /** @deprecated use `ListOrderRefundsRefund$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsRefund$outboundSchema;
  /** @deprecated use `ListOrderRefundsRefund$Outbound` instead. */
  export type Outbound = ListOrderRefundsRefund$Outbound;
}

export function listOrderRefundsRefundToJSON(
  listOrderRefundsRefund: ListOrderRefundsRefund,
): string {
  return JSON.stringify(
    ListOrderRefundsRefund$outboundSchema.parse(listOrderRefundsRefund),
  );
}

export function listOrderRefundsRefundFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsRefund' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsEmbedded$inboundSchema: z.ZodType<
  ListOrderRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(z.lazy(() => ListOrderRefundsRefund$inboundSchema))
    .optional(),
});

/** @internal */
export type ListOrderRefundsEmbedded$Outbound = {
  refunds?: Array<ListOrderRefundsRefund$Outbound> | undefined;
};

/** @internal */
export const ListOrderRefundsEmbedded$outboundSchema: z.ZodType<
  ListOrderRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsEmbedded
> = z.object({
  refunds: z.array(z.lazy(() => ListOrderRefundsRefund$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsEmbedded$ {
  /** @deprecated use `ListOrderRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsEmbedded$inboundSchema;
  /** @deprecated use `ListOrderRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsEmbedded$outboundSchema;
  /** @deprecated use `ListOrderRefundsEmbedded$Outbound` instead. */
  export type Outbound = ListOrderRefundsEmbedded$Outbound;
}

export function listOrderRefundsEmbeddedToJSON(
  listOrderRefundsEmbedded: ListOrderRefundsEmbedded,
): string {
  return JSON.stringify(
    ListOrderRefundsEmbedded$outboundSchema.parse(listOrderRefundsEmbedded),
  );
}

export function listOrderRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsSelf$inboundSchema: z.ZodType<
  ListOrderRefundsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListOrderRefundsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListOrderRefundsSelf$outboundSchema: z.ZodType<
  ListOrderRefundsSelf$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsSelf$ {
  /** @deprecated use `ListOrderRefundsSelf$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsSelf$inboundSchema;
  /** @deprecated use `ListOrderRefundsSelf$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsSelf$outboundSchema;
  /** @deprecated use `ListOrderRefundsSelf$Outbound` instead. */
  export type Outbound = ListOrderRefundsSelf$Outbound;
}

export function listOrderRefundsSelfToJSON(
  listOrderRefundsSelf: ListOrderRefundsSelf,
): string {
  return JSON.stringify(
    ListOrderRefundsSelf$outboundSchema.parse(listOrderRefundsSelf),
  );
}

export function listOrderRefundsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsSelf' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsPrevious$inboundSchema: z.ZodType<
  ListOrderRefundsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListOrderRefundsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListOrderRefundsPrevious$outboundSchema: z.ZodType<
  ListOrderRefundsPrevious$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsPrevious$ {
  /** @deprecated use `ListOrderRefundsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsPrevious$inboundSchema;
  /** @deprecated use `ListOrderRefundsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsPrevious$outboundSchema;
  /** @deprecated use `ListOrderRefundsPrevious$Outbound` instead. */
  export type Outbound = ListOrderRefundsPrevious$Outbound;
}

export function listOrderRefundsPreviousToJSON(
  listOrderRefundsPrevious: ListOrderRefundsPrevious,
): string {
  return JSON.stringify(
    ListOrderRefundsPrevious$outboundSchema.parse(listOrderRefundsPrevious),
  );
}

export function listOrderRefundsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsPrevious' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsNext$inboundSchema: z.ZodType<
  ListOrderRefundsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListOrderRefundsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListOrderRefundsNext$outboundSchema: z.ZodType<
  ListOrderRefundsNext$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsNext$ {
  /** @deprecated use `ListOrderRefundsNext$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsNext$inboundSchema;
  /** @deprecated use `ListOrderRefundsNext$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsNext$outboundSchema;
  /** @deprecated use `ListOrderRefundsNext$Outbound` instead. */
  export type Outbound = ListOrderRefundsNext$Outbound;
}

export function listOrderRefundsNextToJSON(
  listOrderRefundsNext: ListOrderRefundsNext,
): string {
  return JSON.stringify(
    ListOrderRefundsNext$outboundSchema.parse(listOrderRefundsNext),
  );
}

export function listOrderRefundsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsNext' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsDocumentation$inboundSchema: z.ZodType<
  ListOrderRefundsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListOrderRefundsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListOrderRefundsDocumentation$outboundSchema: z.ZodType<
  ListOrderRefundsDocumentation$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsDocumentation$ {
  /** @deprecated use `ListOrderRefundsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsDocumentation$inboundSchema;
  /** @deprecated use `ListOrderRefundsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsDocumentation$outboundSchema;
  /** @deprecated use `ListOrderRefundsDocumentation$Outbound` instead. */
  export type Outbound = ListOrderRefundsDocumentation$Outbound;
}

export function listOrderRefundsDocumentationToJSON(
  listOrderRefundsDocumentation: ListOrderRefundsDocumentation,
): string {
  return JSON.stringify(
    ListOrderRefundsDocumentation$outboundSchema.parse(
      listOrderRefundsDocumentation,
    ),
  );
}

export function listOrderRefundsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsLinks$inboundSchema: z.ZodType<
  ListOrderRefundsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListOrderRefundsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListOrderRefundsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListOrderRefundsNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListOrderRefundsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListOrderRefundsLinks$Outbound = {
  self?: ListOrderRefundsSelf$Outbound | undefined;
  previous?: ListOrderRefundsPrevious$Outbound | null | undefined;
  next?: ListOrderRefundsNext$Outbound | null | undefined;
  documentation?: ListOrderRefundsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListOrderRefundsLinks$outboundSchema: z.ZodType<
  ListOrderRefundsLinks$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsLinks
> = z.object({
  self: z.lazy(() => ListOrderRefundsSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListOrderRefundsPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListOrderRefundsNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() => ListOrderRefundsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsLinks$ {
  /** @deprecated use `ListOrderRefundsLinks$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsLinks$inboundSchema;
  /** @deprecated use `ListOrderRefundsLinks$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsLinks$outboundSchema;
  /** @deprecated use `ListOrderRefundsLinks$Outbound` instead. */
  export type Outbound = ListOrderRefundsLinks$Outbound;
}

export function listOrderRefundsLinksToJSON(
  listOrderRefundsLinks: ListOrderRefundsLinks,
): string {
  return JSON.stringify(
    ListOrderRefundsLinks$outboundSchema.parse(listOrderRefundsLinks),
  );
}

export function listOrderRefundsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsLinks' from JSON`,
  );
}

/** @internal */
export const ListOrderRefundsResponse$inboundSchema: z.ZodType<
  ListOrderRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListOrderRefundsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListOrderRefundsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListOrderRefundsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListOrderRefundsEmbedded$Outbound | undefined;
  _links?: ListOrderRefundsLinks$Outbound | undefined;
};

/** @internal */
export const ListOrderRefundsResponse$outboundSchema: z.ZodType<
  ListOrderRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListOrderRefundsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListOrderRefundsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListOrderRefundsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrderRefundsResponse$ {
  /** @deprecated use `ListOrderRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListOrderRefundsResponse$inboundSchema;
  /** @deprecated use `ListOrderRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListOrderRefundsResponse$outboundSchema;
  /** @deprecated use `ListOrderRefundsResponse$Outbound` instead. */
  export type Outbound = ListOrderRefundsResponse$Outbound;
}

export function listOrderRefundsResponseToJSON(
  listOrderRefundsResponse: ListOrderRefundsResponse,
): string {
  return JSON.stringify(
    ListOrderRefundsResponse$outboundSchema.parse(listOrderRefundsResponse),
  );
}

export function listOrderRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListOrderRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrderRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrderRefundsResponse' from JSON`,
  );
}
