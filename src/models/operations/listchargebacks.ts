/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export const ListChargebacksEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export type ListChargebacksEmbed = ClosedEnum<typeof ListChargebacksEmbed>;

export type ListChargebacksRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to embed additional information via the `embed` query string parameter.
   */
  embed?: ListChargebacksEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListChargebacksNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListChargebacksNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListChargebacksNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListChargebacksBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListChargebacksBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListChargebacksBadRequestDocumentation;
};

/**
 * The amount charged back by the customer.
 */
export type ListChargebacksAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * The amount is a **negative** amount.
 *
 * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type ListChargebacksSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
 */
export type ListChargebacksReason = {
  /**
   * Technical code provided by the bank.
   */
  code: string;
  /**
   * A more detailed human-friendly description.
   */
  description: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListChargebacksChargebackSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
 */
export type ListChargebacksPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if not yet settled.
 */
export type ListChargebacksSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListChargebacksChargebackDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListChargebacksChargebackLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListChargebacksChargebackSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
   */
  payment: ListChargebacksPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if not yet settled.
   */
  settlement?: ListChargebacksSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListChargebacksChargebackDocumentation;
};

export type ListChargebacksChargeback = {
  /**
   * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
   */
  id: string;
  /**
   * The amount charged back by the customer.
   */
  amount: ListChargebacksAmount;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * The amount is a **negative** amount.
   *
   * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: ListChargebacksSettlementAmount | null | undefined;
  /**
   * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
   */
  reason?: ListChargebacksReason | null | undefined;
  /**
   * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  reversedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListChargebacksChargebackLinks;
};

export type ListChargebacksEmbedded = {
  /**
   * A list of chargeback objects.
   */
  chargebacks?: Array<ListChargebacksChargeback> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListChargebacksSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListChargebacksPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListChargebacksNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListChargebacksDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListChargebacksLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListChargebacksSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListChargebacksPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListChargebacksNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListChargebacksDocumentation | undefined;
};

/**
 * A list of chargeback objects.
 */
export type ListChargebacksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListChargebacksEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListChargebacksLinks | undefined;
};

/** @internal */
export const ListChargebacksEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListChargebacksEmbed
> = z.nativeEnum(ListChargebacksEmbed);

/** @internal */
export const ListChargebacksEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListChargebacksEmbed
> = ListChargebacksEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksEmbed$ {
  /** @deprecated use `ListChargebacksEmbed$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksEmbed$inboundSchema;
  /** @deprecated use `ListChargebacksEmbed$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksEmbed$outboundSchema;
}

/** @internal */
export const ListChargebacksRequest$inboundSchema: z.ZodType<
  ListChargebacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListChargebacksEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListChargebacksRequest$Outbound = {
  paymentId: string;
  from?: string | undefined;
  limit: number | null;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListChargebacksRequest$outboundSchema: z.ZodType<
  ListChargebacksRequest$Outbound,
  z.ZodTypeDef,
  ListChargebacksRequest
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListChargebacksEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksRequest$ {
  /** @deprecated use `ListChargebacksRequest$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksRequest$inboundSchema;
  /** @deprecated use `ListChargebacksRequest$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksRequest$outboundSchema;
  /** @deprecated use `ListChargebacksRequest$Outbound` instead. */
  export type Outbound = ListChargebacksRequest$Outbound;
}

export function listChargebacksRequestToJSON(
  listChargebacksRequest: ListChargebacksRequest,
): string {
  return JSON.stringify(
    ListChargebacksRequest$outboundSchema.parse(listChargebacksRequest),
  );
}

export function listChargebacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksRequest' from JSON`,
  );
}

/** @internal */
export const ListChargebacksNotFoundDocumentation$inboundSchema: z.ZodType<
  ListChargebacksNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListChargebacksNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListChargebacksNotFoundDocumentation$outboundSchema: z.ZodType<
  ListChargebacksNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListChargebacksNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksNotFoundDocumentation$ {
  /** @deprecated use `ListChargebacksNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListChargebacksNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListChargebacksNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListChargebacksNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListChargebacksNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListChargebacksNotFoundDocumentation$Outbound;
}

export function listChargebacksNotFoundDocumentationToJSON(
  listChargebacksNotFoundDocumentation: ListChargebacksNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListChargebacksNotFoundDocumentation$outboundSchema.parse(
      listChargebacksNotFoundDocumentation,
    ),
  );
}

export function listChargebacksNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListChargebacksNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListChargebacksNotFoundLinks$inboundSchema: z.ZodType<
  ListChargebacksNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListChargebacksNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListChargebacksNotFoundLinks$Outbound = {
  documentation: ListChargebacksNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListChargebacksNotFoundLinks$outboundSchema: z.ZodType<
  ListChargebacksNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListChargebacksNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListChargebacksNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksNotFoundLinks$ {
  /** @deprecated use `ListChargebacksNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksNotFoundLinks$inboundSchema;
  /** @deprecated use `ListChargebacksNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksNotFoundLinks$outboundSchema;
  /** @deprecated use `ListChargebacksNotFoundLinks$Outbound` instead. */
  export type Outbound = ListChargebacksNotFoundLinks$Outbound;
}

export function listChargebacksNotFoundLinksToJSON(
  listChargebacksNotFoundLinks: ListChargebacksNotFoundLinks,
): string {
  return JSON.stringify(
    ListChargebacksNotFoundLinks$outboundSchema.parse(
      listChargebacksNotFoundLinks,
    ),
  );
}

export function listChargebacksNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListChargebacksBadRequestDocumentation$inboundSchema: z.ZodType<
  ListChargebacksBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListChargebacksBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListChargebacksBadRequestDocumentation$outboundSchema: z.ZodType<
  ListChargebacksBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListChargebacksBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksBadRequestDocumentation$ {
  /** @deprecated use `ListChargebacksBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListChargebacksBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListChargebacksBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListChargebacksBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListChargebacksBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListChargebacksBadRequestDocumentation$Outbound;
}

export function listChargebacksBadRequestDocumentationToJSON(
  listChargebacksBadRequestDocumentation:
    ListChargebacksBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListChargebacksBadRequestDocumentation$outboundSchema.parse(
      listChargebacksBadRequestDocumentation,
    ),
  );
}

export function listChargebacksBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListChargebacksBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListChargebacksBadRequestLinks$inboundSchema: z.ZodType<
  ListChargebacksBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListChargebacksBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListChargebacksBadRequestLinks$Outbound = {
  documentation: ListChargebacksBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListChargebacksBadRequestLinks$outboundSchema: z.ZodType<
  ListChargebacksBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListChargebacksBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListChargebacksBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksBadRequestLinks$ {
  /** @deprecated use `ListChargebacksBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksBadRequestLinks$inboundSchema;
  /** @deprecated use `ListChargebacksBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksBadRequestLinks$outboundSchema;
  /** @deprecated use `ListChargebacksBadRequestLinks$Outbound` instead. */
  export type Outbound = ListChargebacksBadRequestLinks$Outbound;
}

export function listChargebacksBadRequestLinksToJSON(
  listChargebacksBadRequestLinks: ListChargebacksBadRequestLinks,
): string {
  return JSON.stringify(
    ListChargebacksBadRequestLinks$outboundSchema.parse(
      listChargebacksBadRequestLinks,
    ),
  );
}

export function listChargebacksBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListChargebacksAmount$inboundSchema: z.ZodType<
  ListChargebacksAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListChargebacksAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListChargebacksAmount$outboundSchema: z.ZodType<
  ListChargebacksAmount$Outbound,
  z.ZodTypeDef,
  ListChargebacksAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksAmount$ {
  /** @deprecated use `ListChargebacksAmount$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksAmount$inboundSchema;
  /** @deprecated use `ListChargebacksAmount$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksAmount$outboundSchema;
  /** @deprecated use `ListChargebacksAmount$Outbound` instead. */
  export type Outbound = ListChargebacksAmount$Outbound;
}

export function listChargebacksAmountToJSON(
  listChargebacksAmount: ListChargebacksAmount,
): string {
  return JSON.stringify(
    ListChargebacksAmount$outboundSchema.parse(listChargebacksAmount),
  );
}

export function listChargebacksAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksAmount' from JSON`,
  );
}

/** @internal */
export const ListChargebacksSettlementAmount$inboundSchema: z.ZodType<
  ListChargebacksSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListChargebacksSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListChargebacksSettlementAmount$outboundSchema: z.ZodType<
  ListChargebacksSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListChargebacksSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksSettlementAmount$ {
  /** @deprecated use `ListChargebacksSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksSettlementAmount$inboundSchema;
  /** @deprecated use `ListChargebacksSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksSettlementAmount$outboundSchema;
  /** @deprecated use `ListChargebacksSettlementAmount$Outbound` instead. */
  export type Outbound = ListChargebacksSettlementAmount$Outbound;
}

export function listChargebacksSettlementAmountToJSON(
  listChargebacksSettlementAmount: ListChargebacksSettlementAmount,
): string {
  return JSON.stringify(
    ListChargebacksSettlementAmount$outboundSchema.parse(
      listChargebacksSettlementAmount,
    ),
  );
}

export function listChargebacksSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListChargebacksReason$inboundSchema: z.ZodType<
  ListChargebacksReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  description: z.string(),
});

/** @internal */
export type ListChargebacksReason$Outbound = {
  code: string;
  description: string;
};

/** @internal */
export const ListChargebacksReason$outboundSchema: z.ZodType<
  ListChargebacksReason$Outbound,
  z.ZodTypeDef,
  ListChargebacksReason
> = z.object({
  code: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksReason$ {
  /** @deprecated use `ListChargebacksReason$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksReason$inboundSchema;
  /** @deprecated use `ListChargebacksReason$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksReason$outboundSchema;
  /** @deprecated use `ListChargebacksReason$Outbound` instead. */
  export type Outbound = ListChargebacksReason$Outbound;
}

export function listChargebacksReasonToJSON(
  listChargebacksReason: ListChargebacksReason,
): string {
  return JSON.stringify(
    ListChargebacksReason$outboundSchema.parse(listChargebacksReason),
  );
}

export function listChargebacksReasonFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksReason' from JSON`,
  );
}

/** @internal */
export const ListChargebacksChargebackSelf$inboundSchema: z.ZodType<
  ListChargebacksChargebackSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListChargebacksChargebackSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListChargebacksChargebackSelf$outboundSchema: z.ZodType<
  ListChargebacksChargebackSelf$Outbound,
  z.ZodTypeDef,
  ListChargebacksChargebackSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksChargebackSelf$ {
  /** @deprecated use `ListChargebacksChargebackSelf$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksChargebackSelf$inboundSchema;
  /** @deprecated use `ListChargebacksChargebackSelf$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksChargebackSelf$outboundSchema;
  /** @deprecated use `ListChargebacksChargebackSelf$Outbound` instead. */
  export type Outbound = ListChargebacksChargebackSelf$Outbound;
}

export function listChargebacksChargebackSelfToJSON(
  listChargebacksChargebackSelf: ListChargebacksChargebackSelf,
): string {
  return JSON.stringify(
    ListChargebacksChargebackSelf$outboundSchema.parse(
      listChargebacksChargebackSelf,
    ),
  );
}

export function listChargebacksChargebackSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksChargebackSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksChargebackSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksChargebackSelf' from JSON`,
  );
}

/** @internal */
export const ListChargebacksPayment$inboundSchema: z.ZodType<
  ListChargebacksPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListChargebacksPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListChargebacksPayment$outboundSchema: z.ZodType<
  ListChargebacksPayment$Outbound,
  z.ZodTypeDef,
  ListChargebacksPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksPayment$ {
  /** @deprecated use `ListChargebacksPayment$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksPayment$inboundSchema;
  /** @deprecated use `ListChargebacksPayment$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksPayment$outboundSchema;
  /** @deprecated use `ListChargebacksPayment$Outbound` instead. */
  export type Outbound = ListChargebacksPayment$Outbound;
}

export function listChargebacksPaymentToJSON(
  listChargebacksPayment: ListChargebacksPayment,
): string {
  return JSON.stringify(
    ListChargebacksPayment$outboundSchema.parse(listChargebacksPayment),
  );
}

export function listChargebacksPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksPayment' from JSON`,
  );
}

/** @internal */
export const ListChargebacksSettlement$inboundSchema: z.ZodType<
  ListChargebacksSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListChargebacksSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListChargebacksSettlement$outboundSchema: z.ZodType<
  ListChargebacksSettlement$Outbound,
  z.ZodTypeDef,
  ListChargebacksSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksSettlement$ {
  /** @deprecated use `ListChargebacksSettlement$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksSettlement$inboundSchema;
  /** @deprecated use `ListChargebacksSettlement$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksSettlement$outboundSchema;
  /** @deprecated use `ListChargebacksSettlement$Outbound` instead. */
  export type Outbound = ListChargebacksSettlement$Outbound;
}

export function listChargebacksSettlementToJSON(
  listChargebacksSettlement: ListChargebacksSettlement,
): string {
  return JSON.stringify(
    ListChargebacksSettlement$outboundSchema.parse(listChargebacksSettlement),
  );
}

export function listChargebacksSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksSettlement' from JSON`,
  );
}

/** @internal */
export const ListChargebacksChargebackDocumentation$inboundSchema: z.ZodType<
  ListChargebacksChargebackDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListChargebacksChargebackDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListChargebacksChargebackDocumentation$outboundSchema: z.ZodType<
  ListChargebacksChargebackDocumentation$Outbound,
  z.ZodTypeDef,
  ListChargebacksChargebackDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksChargebackDocumentation$ {
  /** @deprecated use `ListChargebacksChargebackDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListChargebacksChargebackDocumentation$inboundSchema;
  /** @deprecated use `ListChargebacksChargebackDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListChargebacksChargebackDocumentation$outboundSchema;
  /** @deprecated use `ListChargebacksChargebackDocumentation$Outbound` instead. */
  export type Outbound = ListChargebacksChargebackDocumentation$Outbound;
}

export function listChargebacksChargebackDocumentationToJSON(
  listChargebacksChargebackDocumentation:
    ListChargebacksChargebackDocumentation,
): string {
  return JSON.stringify(
    ListChargebacksChargebackDocumentation$outboundSchema.parse(
      listChargebacksChargebackDocumentation,
    ),
  );
}

export function listChargebacksChargebackDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksChargebackDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListChargebacksChargebackDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksChargebackDocumentation' from JSON`,
  );
}

/** @internal */
export const ListChargebacksChargebackLinks$inboundSchema: z.ZodType<
  ListChargebacksChargebackLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListChargebacksChargebackSelf$inboundSchema),
  payment: z.lazy(() => ListChargebacksPayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => ListChargebacksSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListChargebacksChargebackDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListChargebacksChargebackLinks$Outbound = {
  self: ListChargebacksChargebackSelf$Outbound;
  payment: ListChargebacksPayment$Outbound;
  settlement?: ListChargebacksSettlement$Outbound | null | undefined;
  documentation: ListChargebacksChargebackDocumentation$Outbound;
};

/** @internal */
export const ListChargebacksChargebackLinks$outboundSchema: z.ZodType<
  ListChargebacksChargebackLinks$Outbound,
  z.ZodTypeDef,
  ListChargebacksChargebackLinks
> = z.object({
  self: z.lazy(() => ListChargebacksChargebackSelf$outboundSchema),
  payment: z.lazy(() => ListChargebacksPayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => ListChargebacksSettlement$outboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListChargebacksChargebackDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksChargebackLinks$ {
  /** @deprecated use `ListChargebacksChargebackLinks$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksChargebackLinks$inboundSchema;
  /** @deprecated use `ListChargebacksChargebackLinks$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksChargebackLinks$outboundSchema;
  /** @deprecated use `ListChargebacksChargebackLinks$Outbound` instead. */
  export type Outbound = ListChargebacksChargebackLinks$Outbound;
}

export function listChargebacksChargebackLinksToJSON(
  listChargebacksChargebackLinks: ListChargebacksChargebackLinks,
): string {
  return JSON.stringify(
    ListChargebacksChargebackLinks$outboundSchema.parse(
      listChargebacksChargebackLinks,
    ),
  );
}

export function listChargebacksChargebackLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksChargebackLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksChargebackLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksChargebackLinks' from JSON`,
  );
}

/** @internal */
export const ListChargebacksChargeback$inboundSchema: z.ZodType<
  ListChargebacksChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => ListChargebacksAmount$inboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => ListChargebacksSettlementAmount$inboundSchema),
  ).optional(),
  reason: z.nullable(z.lazy(() => ListChargebacksReason$inboundSchema))
    .optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ListChargebacksChargebackLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListChargebacksChargeback$Outbound = {
  resource: string;
  id: string;
  amount: ListChargebacksAmount$Outbound;
  settlementAmount?:
    | ListChargebacksSettlementAmount$Outbound
    | null
    | undefined;
  reason?: ListChargebacksReason$Outbound | null | undefined;
  paymentId: string;
  settlementId?: string | null | undefined;
  createdAt: string;
  reversedAt?: string | null | undefined;
  _links: ListChargebacksChargebackLinks$Outbound;
};

/** @internal */
export const ListChargebacksChargeback$outboundSchema: z.ZodType<
  ListChargebacksChargeback$Outbound,
  z.ZodTypeDef,
  ListChargebacksChargeback
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => ListChargebacksAmount$outboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => ListChargebacksSettlementAmount$outboundSchema),
  ).optional(),
  reason: z.nullable(z.lazy(() => ListChargebacksReason$outboundSchema))
    .optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => ListChargebacksChargebackLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksChargeback$ {
  /** @deprecated use `ListChargebacksChargeback$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksChargeback$inboundSchema;
  /** @deprecated use `ListChargebacksChargeback$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksChargeback$outboundSchema;
  /** @deprecated use `ListChargebacksChargeback$Outbound` instead. */
  export type Outbound = ListChargebacksChargeback$Outbound;
}

export function listChargebacksChargebackToJSON(
  listChargebacksChargeback: ListChargebacksChargeback,
): string {
  return JSON.stringify(
    ListChargebacksChargeback$outboundSchema.parse(listChargebacksChargeback),
  );
}

export function listChargebacksChargebackFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksChargeback' from JSON`,
  );
}

/** @internal */
export const ListChargebacksEmbedded$inboundSchema: z.ZodType<
  ListChargebacksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  chargebacks: z.array(z.lazy(() => ListChargebacksChargeback$inboundSchema))
    .optional(),
});

/** @internal */
export type ListChargebacksEmbedded$Outbound = {
  chargebacks?: Array<ListChargebacksChargeback$Outbound> | undefined;
};

/** @internal */
export const ListChargebacksEmbedded$outboundSchema: z.ZodType<
  ListChargebacksEmbedded$Outbound,
  z.ZodTypeDef,
  ListChargebacksEmbedded
> = z.object({
  chargebacks: z.array(z.lazy(() => ListChargebacksChargeback$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksEmbedded$ {
  /** @deprecated use `ListChargebacksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksEmbedded$inboundSchema;
  /** @deprecated use `ListChargebacksEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksEmbedded$outboundSchema;
  /** @deprecated use `ListChargebacksEmbedded$Outbound` instead. */
  export type Outbound = ListChargebacksEmbedded$Outbound;
}

export function listChargebacksEmbeddedToJSON(
  listChargebacksEmbedded: ListChargebacksEmbedded,
): string {
  return JSON.stringify(
    ListChargebacksEmbedded$outboundSchema.parse(listChargebacksEmbedded),
  );
}

export function listChargebacksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksEmbedded' from JSON`,
  );
}

/** @internal */
export const ListChargebacksSelf$inboundSchema: z.ZodType<
  ListChargebacksSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListChargebacksSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListChargebacksSelf$outboundSchema: z.ZodType<
  ListChargebacksSelf$Outbound,
  z.ZodTypeDef,
  ListChargebacksSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksSelf$ {
  /** @deprecated use `ListChargebacksSelf$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksSelf$inboundSchema;
  /** @deprecated use `ListChargebacksSelf$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksSelf$outboundSchema;
  /** @deprecated use `ListChargebacksSelf$Outbound` instead. */
  export type Outbound = ListChargebacksSelf$Outbound;
}

export function listChargebacksSelfToJSON(
  listChargebacksSelf: ListChargebacksSelf,
): string {
  return JSON.stringify(
    ListChargebacksSelf$outboundSchema.parse(listChargebacksSelf),
  );
}

export function listChargebacksSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksSelf' from JSON`,
  );
}

/** @internal */
export const ListChargebacksPrevious$inboundSchema: z.ZodType<
  ListChargebacksPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListChargebacksPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListChargebacksPrevious$outboundSchema: z.ZodType<
  ListChargebacksPrevious$Outbound,
  z.ZodTypeDef,
  ListChargebacksPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksPrevious$ {
  /** @deprecated use `ListChargebacksPrevious$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksPrevious$inboundSchema;
  /** @deprecated use `ListChargebacksPrevious$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksPrevious$outboundSchema;
  /** @deprecated use `ListChargebacksPrevious$Outbound` instead. */
  export type Outbound = ListChargebacksPrevious$Outbound;
}

export function listChargebacksPreviousToJSON(
  listChargebacksPrevious: ListChargebacksPrevious,
): string {
  return JSON.stringify(
    ListChargebacksPrevious$outboundSchema.parse(listChargebacksPrevious),
  );
}

export function listChargebacksPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksPrevious' from JSON`,
  );
}

/** @internal */
export const ListChargebacksNext$inboundSchema: z.ZodType<
  ListChargebacksNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListChargebacksNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListChargebacksNext$outboundSchema: z.ZodType<
  ListChargebacksNext$Outbound,
  z.ZodTypeDef,
  ListChargebacksNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksNext$ {
  /** @deprecated use `ListChargebacksNext$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksNext$inboundSchema;
  /** @deprecated use `ListChargebacksNext$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksNext$outboundSchema;
  /** @deprecated use `ListChargebacksNext$Outbound` instead. */
  export type Outbound = ListChargebacksNext$Outbound;
}

export function listChargebacksNextToJSON(
  listChargebacksNext: ListChargebacksNext,
): string {
  return JSON.stringify(
    ListChargebacksNext$outboundSchema.parse(listChargebacksNext),
  );
}

export function listChargebacksNextFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksNext' from JSON`,
  );
}

/** @internal */
export const ListChargebacksDocumentation$inboundSchema: z.ZodType<
  ListChargebacksDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListChargebacksDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListChargebacksDocumentation$outboundSchema: z.ZodType<
  ListChargebacksDocumentation$Outbound,
  z.ZodTypeDef,
  ListChargebacksDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksDocumentation$ {
  /** @deprecated use `ListChargebacksDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksDocumentation$inboundSchema;
  /** @deprecated use `ListChargebacksDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksDocumentation$outboundSchema;
  /** @deprecated use `ListChargebacksDocumentation$Outbound` instead. */
  export type Outbound = ListChargebacksDocumentation$Outbound;
}

export function listChargebacksDocumentationToJSON(
  listChargebacksDocumentation: ListChargebacksDocumentation,
): string {
  return JSON.stringify(
    ListChargebacksDocumentation$outboundSchema.parse(
      listChargebacksDocumentation,
    ),
  );
}

export function listChargebacksDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksDocumentation' from JSON`,
  );
}

/** @internal */
export const ListChargebacksLinks$inboundSchema: z.ZodType<
  ListChargebacksLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListChargebacksSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListChargebacksPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListChargebacksNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListChargebacksDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListChargebacksLinks$Outbound = {
  self?: ListChargebacksSelf$Outbound | undefined;
  previous?: ListChargebacksPrevious$Outbound | null | undefined;
  next?: ListChargebacksNext$Outbound | null | undefined;
  documentation?: ListChargebacksDocumentation$Outbound | undefined;
};

/** @internal */
export const ListChargebacksLinks$outboundSchema: z.ZodType<
  ListChargebacksLinks$Outbound,
  z.ZodTypeDef,
  ListChargebacksLinks
> = z.object({
  self: z.lazy(() => ListChargebacksSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListChargebacksPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListChargebacksNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListChargebacksDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksLinks$ {
  /** @deprecated use `ListChargebacksLinks$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksLinks$inboundSchema;
  /** @deprecated use `ListChargebacksLinks$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksLinks$outboundSchema;
  /** @deprecated use `ListChargebacksLinks$Outbound` instead. */
  export type Outbound = ListChargebacksLinks$Outbound;
}

export function listChargebacksLinksToJSON(
  listChargebacksLinks: ListChargebacksLinks,
): string {
  return JSON.stringify(
    ListChargebacksLinks$outboundSchema.parse(listChargebacksLinks),
  );
}

export function listChargebacksLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksLinks' from JSON`,
  );
}

/** @internal */
export const ListChargebacksResponse$inboundSchema: z.ZodType<
  ListChargebacksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListChargebacksEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListChargebacksLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListChargebacksResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListChargebacksEmbedded$Outbound | undefined;
  _links?: ListChargebacksLinks$Outbound | undefined;
};

/** @internal */
export const ListChargebacksResponse$outboundSchema: z.ZodType<
  ListChargebacksResponse$Outbound,
  z.ZodTypeDef,
  ListChargebacksResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListChargebacksEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListChargebacksLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksResponse$ {
  /** @deprecated use `ListChargebacksResponse$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksResponse$inboundSchema;
  /** @deprecated use `ListChargebacksResponse$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksResponse$outboundSchema;
  /** @deprecated use `ListChargebacksResponse$Outbound` instead. */
  export type Outbound = ListChargebacksResponse$Outbound;
}

export function listChargebacksResponseToJSON(
  listChargebacksResponse: ListChargebacksResponse,
): string {
  return JSON.stringify(
    ListChargebacksResponse$outboundSchema.parse(listChargebacksResponse),
  );
}

export function listChargebacksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListChargebacksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChargebacksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChargebacksResponse' from JSON`,
  );
}
