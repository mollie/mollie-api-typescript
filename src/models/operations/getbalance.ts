/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBalanceRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetBalanceNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetBalanceNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetBalanceNotFoundDocumentation;
};

/**
 * The balance's ISO 4217 currency code.
 */
export const GetBalanceCurrency = {
  Eur: "EUR",
  Gbp: "GBP",
  Chf: "CHF",
  Dkk: "DKK",
  Nok: "NOK",
  Pln: "PLN",
  Sek: "SEK",
  Usd: "USD",
  Czk: "CZK",
  Huf: "HUF",
  Aud: "AUD",
  Cad: "CAD",
} as const;
/**
 * The balance's ISO 4217 currency code.
 */
export type GetBalanceCurrency = ClosedEnum<typeof GetBalanceCurrency>;

/**
 * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
 */
export type GetBalanceTransferThreshold = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
 */
export type GetBalanceTransferDestination = {
  /**
   * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
   *
   * @remarks
   *
   * * `bank-account` â€” Transfer the balance amount to an external bank account
   *
   * Possible values: `bank-account`
   */
  type?: string | undefined;
  /**
   * The configured bank account number of the beneficiary the balance amount is to be transferred to.
   */
  bankAccount?: string | undefined;
  /**
   * The full name of the beneficiary the balance amount is to be transferred to.
   */
  beneficiaryName?: string | undefined;
};

/**
 * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
 */
export type GetBalanceAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
 */
export type GetBalancePendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetBalanceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetBalanceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetBalanceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetBalanceSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetBalanceDocumentation | undefined;
};

/**
 * The balance object.
 */
export type GetBalanceResponse = {
  /**
   * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this balance.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The balance's ISO 4217 currency code.
   */
  currency?: GetBalanceCurrency | undefined;
  /**
   * The description or name of the balance. Can be used to denote the purpose of the balance.
   */
  description?: string | undefined;
  /**
   * The status of the balance.
   *
   * @remarks
   *
   * Possible values: `active` `inactive`
   */
  status?: string | undefined;
  /**
   * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
   *
   * @remarks
   *
   * Settlements created during weekends or on bank holidays will take place on the next business day.
   *
   * Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
   */
  transferFrequency?: string | undefined;
  /**
   * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
   */
  transferThreshold?: GetBalanceTransferThreshold | undefined;
  /**
   * The transfer reference set to be included in all the transfers for this balance.
   */
  transferReference?: string | null | undefined;
  /**
   * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
   */
  transferDestination?: GetBalanceTransferDestination | null | undefined;
  /**
   * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
   */
  availableAmount?: GetBalanceAvailableAmount | undefined;
  /**
   * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
   */
  pendingAmount?: GetBalancePendingAmount | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetBalanceLinks | undefined;
};

/** @internal */
export const GetBalanceRequest$inboundSchema: z.ZodType<
  GetBalanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetBalanceRequest$Outbound = {
  id: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetBalanceRequest$outboundSchema: z.ZodType<
  GetBalanceRequest$Outbound,
  z.ZodTypeDef,
  GetBalanceRequest
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceRequest$ {
  /** @deprecated use `GetBalanceRequest$inboundSchema` instead. */
  export const inboundSchema = GetBalanceRequest$inboundSchema;
  /** @deprecated use `GetBalanceRequest$outboundSchema` instead. */
  export const outboundSchema = GetBalanceRequest$outboundSchema;
  /** @deprecated use `GetBalanceRequest$Outbound` instead. */
  export type Outbound = GetBalanceRequest$Outbound;
}

export function getBalanceRequestToJSON(
  getBalanceRequest: GetBalanceRequest,
): string {
  return JSON.stringify(
    GetBalanceRequest$outboundSchema.parse(getBalanceRequest),
  );
}

export function getBalanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceRequest' from JSON`,
  );
}

/** @internal */
export const GetBalanceNotFoundDocumentation$inboundSchema: z.ZodType<
  GetBalanceNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetBalanceNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetBalanceNotFoundDocumentation$outboundSchema: z.ZodType<
  GetBalanceNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetBalanceNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceNotFoundDocumentation$ {
  /** @deprecated use `GetBalanceNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetBalanceNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetBalanceNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetBalanceNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetBalanceNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetBalanceNotFoundDocumentation$Outbound;
}

export function getBalanceNotFoundDocumentationToJSON(
  getBalanceNotFoundDocumentation: GetBalanceNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetBalanceNotFoundDocumentation$outboundSchema.parse(
      getBalanceNotFoundDocumentation,
    ),
  );
}

export function getBalanceNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetBalanceNotFoundLinks$inboundSchema: z.ZodType<
  GetBalanceNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetBalanceNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetBalanceNotFoundLinks$Outbound = {
  documentation: GetBalanceNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetBalanceNotFoundLinks$outboundSchema: z.ZodType<
  GetBalanceNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetBalanceNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetBalanceNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceNotFoundLinks$ {
  /** @deprecated use `GetBalanceNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetBalanceNotFoundLinks$inboundSchema;
  /** @deprecated use `GetBalanceNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetBalanceNotFoundLinks$outboundSchema;
  /** @deprecated use `GetBalanceNotFoundLinks$Outbound` instead. */
  export type Outbound = GetBalanceNotFoundLinks$Outbound;
}

export function getBalanceNotFoundLinksToJSON(
  getBalanceNotFoundLinks: GetBalanceNotFoundLinks,
): string {
  return JSON.stringify(
    GetBalanceNotFoundLinks$outboundSchema.parse(getBalanceNotFoundLinks),
  );
}

export function getBalanceNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetBalanceCurrency$inboundSchema: z.ZodNativeEnum<
  typeof GetBalanceCurrency
> = z.nativeEnum(GetBalanceCurrency);

/** @internal */
export const GetBalanceCurrency$outboundSchema: z.ZodNativeEnum<
  typeof GetBalanceCurrency
> = GetBalanceCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceCurrency$ {
  /** @deprecated use `GetBalanceCurrency$inboundSchema` instead. */
  export const inboundSchema = GetBalanceCurrency$inboundSchema;
  /** @deprecated use `GetBalanceCurrency$outboundSchema` instead. */
  export const outboundSchema = GetBalanceCurrency$outboundSchema;
}

/** @internal */
export const GetBalanceTransferThreshold$inboundSchema: z.ZodType<
  GetBalanceTransferThreshold,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetBalanceTransferThreshold$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetBalanceTransferThreshold$outboundSchema: z.ZodType<
  GetBalanceTransferThreshold$Outbound,
  z.ZodTypeDef,
  GetBalanceTransferThreshold
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceTransferThreshold$ {
  /** @deprecated use `GetBalanceTransferThreshold$inboundSchema` instead. */
  export const inboundSchema = GetBalanceTransferThreshold$inboundSchema;
  /** @deprecated use `GetBalanceTransferThreshold$outboundSchema` instead. */
  export const outboundSchema = GetBalanceTransferThreshold$outboundSchema;
  /** @deprecated use `GetBalanceTransferThreshold$Outbound` instead. */
  export type Outbound = GetBalanceTransferThreshold$Outbound;
}

export function getBalanceTransferThresholdToJSON(
  getBalanceTransferThreshold: GetBalanceTransferThreshold,
): string {
  return JSON.stringify(
    GetBalanceTransferThreshold$outboundSchema.parse(
      getBalanceTransferThreshold,
    ),
  );
}

export function getBalanceTransferThresholdFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceTransferThreshold, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceTransferThreshold$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceTransferThreshold' from JSON`,
  );
}

/** @internal */
export const GetBalanceTransferDestination$inboundSchema: z.ZodType<
  GetBalanceTransferDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/** @internal */
export type GetBalanceTransferDestination$Outbound = {
  type?: string | undefined;
  bankAccount?: string | undefined;
  beneficiaryName?: string | undefined;
};

/** @internal */
export const GetBalanceTransferDestination$outboundSchema: z.ZodType<
  GetBalanceTransferDestination$Outbound,
  z.ZodTypeDef,
  GetBalanceTransferDestination
> = z.object({
  type: z.string().optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceTransferDestination$ {
  /** @deprecated use `GetBalanceTransferDestination$inboundSchema` instead. */
  export const inboundSchema = GetBalanceTransferDestination$inboundSchema;
  /** @deprecated use `GetBalanceTransferDestination$outboundSchema` instead. */
  export const outboundSchema = GetBalanceTransferDestination$outboundSchema;
  /** @deprecated use `GetBalanceTransferDestination$Outbound` instead. */
  export type Outbound = GetBalanceTransferDestination$Outbound;
}

export function getBalanceTransferDestinationToJSON(
  getBalanceTransferDestination: GetBalanceTransferDestination,
): string {
  return JSON.stringify(
    GetBalanceTransferDestination$outboundSchema.parse(
      getBalanceTransferDestination,
    ),
  );
}

export function getBalanceTransferDestinationFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceTransferDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceTransferDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceTransferDestination' from JSON`,
  );
}

/** @internal */
export const GetBalanceAvailableAmount$inboundSchema: z.ZodType<
  GetBalanceAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetBalanceAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetBalanceAvailableAmount$outboundSchema: z.ZodType<
  GetBalanceAvailableAmount$Outbound,
  z.ZodTypeDef,
  GetBalanceAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceAvailableAmount$ {
  /** @deprecated use `GetBalanceAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = GetBalanceAvailableAmount$inboundSchema;
  /** @deprecated use `GetBalanceAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = GetBalanceAvailableAmount$outboundSchema;
  /** @deprecated use `GetBalanceAvailableAmount$Outbound` instead. */
  export type Outbound = GetBalanceAvailableAmount$Outbound;
}

export function getBalanceAvailableAmountToJSON(
  getBalanceAvailableAmount: GetBalanceAvailableAmount,
): string {
  return JSON.stringify(
    GetBalanceAvailableAmount$outboundSchema.parse(getBalanceAvailableAmount),
  );
}

export function getBalanceAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceAvailableAmount' from JSON`,
  );
}

/** @internal */
export const GetBalancePendingAmount$inboundSchema: z.ZodType<
  GetBalancePendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetBalancePendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetBalancePendingAmount$outboundSchema: z.ZodType<
  GetBalancePendingAmount$Outbound,
  z.ZodTypeDef,
  GetBalancePendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalancePendingAmount$ {
  /** @deprecated use `GetBalancePendingAmount$inboundSchema` instead. */
  export const inboundSchema = GetBalancePendingAmount$inboundSchema;
  /** @deprecated use `GetBalancePendingAmount$outboundSchema` instead. */
  export const outboundSchema = GetBalancePendingAmount$outboundSchema;
  /** @deprecated use `GetBalancePendingAmount$Outbound` instead. */
  export type Outbound = GetBalancePendingAmount$Outbound;
}

export function getBalancePendingAmountToJSON(
  getBalancePendingAmount: GetBalancePendingAmount,
): string {
  return JSON.stringify(
    GetBalancePendingAmount$outboundSchema.parse(getBalancePendingAmount),
  );
}

export function getBalancePendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetBalancePendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalancePendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalancePendingAmount' from JSON`,
  );
}

/** @internal */
export const GetBalanceSelf$inboundSchema: z.ZodType<
  GetBalanceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetBalanceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetBalanceSelf$outboundSchema: z.ZodType<
  GetBalanceSelf$Outbound,
  z.ZodTypeDef,
  GetBalanceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceSelf$ {
  /** @deprecated use `GetBalanceSelf$inboundSchema` instead. */
  export const inboundSchema = GetBalanceSelf$inboundSchema;
  /** @deprecated use `GetBalanceSelf$outboundSchema` instead. */
  export const outboundSchema = GetBalanceSelf$outboundSchema;
  /** @deprecated use `GetBalanceSelf$Outbound` instead. */
  export type Outbound = GetBalanceSelf$Outbound;
}

export function getBalanceSelfToJSON(getBalanceSelf: GetBalanceSelf): string {
  return JSON.stringify(GetBalanceSelf$outboundSchema.parse(getBalanceSelf));
}

export function getBalanceSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceSelf' from JSON`,
  );
}

/** @internal */
export const GetBalanceDocumentation$inboundSchema: z.ZodType<
  GetBalanceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetBalanceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetBalanceDocumentation$outboundSchema: z.ZodType<
  GetBalanceDocumentation$Outbound,
  z.ZodTypeDef,
  GetBalanceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceDocumentation$ {
  /** @deprecated use `GetBalanceDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetBalanceDocumentation$inboundSchema;
  /** @deprecated use `GetBalanceDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetBalanceDocumentation$outboundSchema;
  /** @deprecated use `GetBalanceDocumentation$Outbound` instead. */
  export type Outbound = GetBalanceDocumentation$Outbound;
}

export function getBalanceDocumentationToJSON(
  getBalanceDocumentation: GetBalanceDocumentation,
): string {
  return JSON.stringify(
    GetBalanceDocumentation$outboundSchema.parse(getBalanceDocumentation),
  );
}

export function getBalanceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceDocumentation' from JSON`,
  );
}

/** @internal */
export const GetBalanceLinks$inboundSchema: z.ZodType<
  GetBalanceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetBalanceSelf$inboundSchema).optional(),
  documentation: z.lazy(() => GetBalanceDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetBalanceLinks$Outbound = {
  self?: GetBalanceSelf$Outbound | undefined;
  documentation?: GetBalanceDocumentation$Outbound | undefined;
};

/** @internal */
export const GetBalanceLinks$outboundSchema: z.ZodType<
  GetBalanceLinks$Outbound,
  z.ZodTypeDef,
  GetBalanceLinks
> = z.object({
  self: z.lazy(() => GetBalanceSelf$outboundSchema).optional(),
  documentation: z.lazy(() => GetBalanceDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceLinks$ {
  /** @deprecated use `GetBalanceLinks$inboundSchema` instead. */
  export const inboundSchema = GetBalanceLinks$inboundSchema;
  /** @deprecated use `GetBalanceLinks$outboundSchema` instead. */
  export const outboundSchema = GetBalanceLinks$outboundSchema;
  /** @deprecated use `GetBalanceLinks$Outbound` instead. */
  export type Outbound = GetBalanceLinks$Outbound;
}

export function getBalanceLinksToJSON(
  getBalanceLinks: GetBalanceLinks,
): string {
  return JSON.stringify(GetBalanceLinks$outboundSchema.parse(getBalanceLinks));
}

export function getBalanceLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceLinks' from JSON`,
  );
}

/** @internal */
export const GetBalanceResponse$inboundSchema: z.ZodType<
  GetBalanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("balance"),
  id: z.string().optional(),
  mode: z.string().optional(),
  createdAt: z.string().optional(),
  currency: GetBalanceCurrency$inboundSchema.optional(),
  description: z.string().optional(),
  status: z.string().optional(),
  transferFrequency: z.string().optional(),
  transferThreshold: z.lazy(() => GetBalanceTransferThreshold$inboundSchema)
    .optional(),
  transferReference: z.nullable(z.string()).optional(),
  transferDestination: z.nullable(
    z.lazy(() => GetBalanceTransferDestination$inboundSchema),
  ).optional(),
  availableAmount: z.lazy(() => GetBalanceAvailableAmount$inboundSchema)
    .optional(),
  pendingAmount: z.lazy(() => GetBalancePendingAmount$inboundSchema).optional(),
  _links: z.lazy(() => GetBalanceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetBalanceResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  createdAt?: string | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  status?: string | undefined;
  transferFrequency?: string | undefined;
  transferThreshold?: GetBalanceTransferThreshold$Outbound | undefined;
  transferReference?: string | null | undefined;
  transferDestination?:
    | GetBalanceTransferDestination$Outbound
    | null
    | undefined;
  availableAmount?: GetBalanceAvailableAmount$Outbound | undefined;
  pendingAmount?: GetBalancePendingAmount$Outbound | undefined;
  _links?: GetBalanceLinks$Outbound | undefined;
};

/** @internal */
export const GetBalanceResponse$outboundSchema: z.ZodType<
  GetBalanceResponse$Outbound,
  z.ZodTypeDef,
  GetBalanceResponse
> = z.object({
  resource: z.string().default("balance"),
  id: z.string().optional(),
  mode: z.string().optional(),
  createdAt: z.string().optional(),
  currency: GetBalanceCurrency$outboundSchema.optional(),
  description: z.string().optional(),
  status: z.string().optional(),
  transferFrequency: z.string().optional(),
  transferThreshold: z.lazy(() => GetBalanceTransferThreshold$outboundSchema)
    .optional(),
  transferReference: z.nullable(z.string()).optional(),
  transferDestination: z.nullable(
    z.lazy(() => GetBalanceTransferDestination$outboundSchema),
  ).optional(),
  availableAmount: z.lazy(() => GetBalanceAvailableAmount$outboundSchema)
    .optional(),
  pendingAmount: z.lazy(() => GetBalancePendingAmount$outboundSchema)
    .optional(),
  links: z.lazy(() => GetBalanceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceResponse$ {
  /** @deprecated use `GetBalanceResponse$inboundSchema` instead. */
  export const inboundSchema = GetBalanceResponse$inboundSchema;
  /** @deprecated use `GetBalanceResponse$outboundSchema` instead. */
  export const outboundSchema = GetBalanceResponse$outboundSchema;
  /** @deprecated use `GetBalanceResponse$Outbound` instead. */
  export type Outbound = GetBalanceResponse$Outbound;
}

export function getBalanceResponseToJSON(
  getBalanceResponse: GetBalanceResponse,
): string {
  return JSON.stringify(
    GetBalanceResponse$outboundSchema.parse(getBalanceResponse),
  );
}

export function getBalanceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceResponse' from JSON`,
  );
}
