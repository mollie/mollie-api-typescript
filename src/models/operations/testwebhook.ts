/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestWebhookRequestBody = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type TestWebhookRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: TestWebhookRequestBody | undefined;
};

/** @internal */
export const TestWebhookRequestBody$inboundSchema: z.ZodType<
  TestWebhookRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type TestWebhookRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const TestWebhookRequestBody$outboundSchema: z.ZodType<
  TestWebhookRequestBody$Outbound,
  z.ZodTypeDef,
  TestWebhookRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookRequestBody$ {
  /** @deprecated use `TestWebhookRequestBody$inboundSchema` instead. */
  export const inboundSchema = TestWebhookRequestBody$inboundSchema;
  /** @deprecated use `TestWebhookRequestBody$outboundSchema` instead. */
  export const outboundSchema = TestWebhookRequestBody$outboundSchema;
  /** @deprecated use `TestWebhookRequestBody$Outbound` instead. */
  export type Outbound = TestWebhookRequestBody$Outbound;
}

export function testWebhookRequestBodyToJSON(
  testWebhookRequestBody: TestWebhookRequestBody,
): string {
  return JSON.stringify(
    TestWebhookRequestBody$outboundSchema.parse(testWebhookRequestBody),
  );
}

export function testWebhookRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestWebhookRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookRequestBody' from JSON`,
  );
}

/** @internal */
export const TestWebhookRequest$inboundSchema: z.ZodType<
  TestWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => TestWebhookRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TestWebhookRequest$Outbound = {
  id: string;
  "idempotency-key"?: string | undefined;
  RequestBody?: TestWebhookRequestBody$Outbound | undefined;
};

/** @internal */
export const TestWebhookRequest$outboundSchema: z.ZodType<
  TestWebhookRequest$Outbound,
  z.ZodTypeDef,
  TestWebhookRequest
> = z.object({
  id: z.string(),
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => TestWebhookRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookRequest$ {
  /** @deprecated use `TestWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = TestWebhookRequest$inboundSchema;
  /** @deprecated use `TestWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = TestWebhookRequest$outboundSchema;
  /** @deprecated use `TestWebhookRequest$Outbound` instead. */
  export type Outbound = TestWebhookRequest$Outbound;
}

export function testWebhookRequestToJSON(
  testWebhookRequest: TestWebhookRequest,
): string {
  return JSON.stringify(
    TestWebhookRequest$outboundSchema.parse(testWebhookRequest),
  );
}

export function testWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookRequest' from JSON`,
  );
}
