/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestWebhookRequestBody = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type TestWebhookRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  requestBody?: TestWebhookRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type TestWebhookUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type TestWebhookUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: TestWebhookUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type TestWebhookNotFoundDocumentation = {
  href: string;
  type: string;
};

export type TestWebhookNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: TestWebhookNotFoundDocumentation;
};

/** @internal */
export const TestWebhookRequestBody$inboundSchema: z.ZodType<
  TestWebhookRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type TestWebhookRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const TestWebhookRequestBody$outboundSchema: z.ZodType<
  TestWebhookRequestBody$Outbound,
  z.ZodTypeDef,
  TestWebhookRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookRequestBody$ {
  /** @deprecated use `TestWebhookRequestBody$inboundSchema` instead. */
  export const inboundSchema = TestWebhookRequestBody$inboundSchema;
  /** @deprecated use `TestWebhookRequestBody$outboundSchema` instead. */
  export const outboundSchema = TestWebhookRequestBody$outboundSchema;
  /** @deprecated use `TestWebhookRequestBody$Outbound` instead. */
  export type Outbound = TestWebhookRequestBody$Outbound;
}

export function testWebhookRequestBodyToJSON(
  testWebhookRequestBody: TestWebhookRequestBody,
): string {
  return JSON.stringify(
    TestWebhookRequestBody$outboundSchema.parse(testWebhookRequestBody),
  );
}

export function testWebhookRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestWebhookRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookRequestBody' from JSON`,
  );
}

/** @internal */
export const TestWebhookRequest$inboundSchema: z.ZodType<
  TestWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => TestWebhookRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TestWebhookRequest$Outbound = {
  id: string;
  RequestBody?: TestWebhookRequestBody$Outbound | undefined;
};

/** @internal */
export const TestWebhookRequest$outboundSchema: z.ZodType<
  TestWebhookRequest$Outbound,
  z.ZodTypeDef,
  TestWebhookRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => TestWebhookRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookRequest$ {
  /** @deprecated use `TestWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = TestWebhookRequest$inboundSchema;
  /** @deprecated use `TestWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = TestWebhookRequest$outboundSchema;
  /** @deprecated use `TestWebhookRequest$Outbound` instead. */
  export type Outbound = TestWebhookRequest$Outbound;
}

export function testWebhookRequestToJSON(
  testWebhookRequest: TestWebhookRequest,
): string {
  return JSON.stringify(
    TestWebhookRequest$outboundSchema.parse(testWebhookRequest),
  );
}

export function testWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookRequest' from JSON`,
  );
}

/** @internal */
export const TestWebhookUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    TestWebhookUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type TestWebhookUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const TestWebhookUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    TestWebhookUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    TestWebhookUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookUnprocessableEntityDocumentation$ {
  /** @deprecated use `TestWebhookUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    TestWebhookUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `TestWebhookUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    TestWebhookUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `TestWebhookUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = TestWebhookUnprocessableEntityDocumentation$Outbound;
}

export function testWebhookUnprocessableEntityDocumentationToJSON(
  testWebhookUnprocessableEntityDocumentation:
    TestWebhookUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    TestWebhookUnprocessableEntityDocumentation$outboundSchema.parse(
      testWebhookUnprocessableEntityDocumentation,
    ),
  );
}

export function testWebhookUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  TestWebhookUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TestWebhookUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TestWebhookUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const TestWebhookUnprocessableEntityLinks$inboundSchema: z.ZodType<
  TestWebhookUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    TestWebhookUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type TestWebhookUnprocessableEntityLinks$Outbound = {
  documentation: TestWebhookUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const TestWebhookUnprocessableEntityLinks$outboundSchema: z.ZodType<
  TestWebhookUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  TestWebhookUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    TestWebhookUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookUnprocessableEntityLinks$ {
  /** @deprecated use `TestWebhookUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    TestWebhookUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `TestWebhookUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    TestWebhookUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `TestWebhookUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = TestWebhookUnprocessableEntityLinks$Outbound;
}

export function testWebhookUnprocessableEntityLinksToJSON(
  testWebhookUnprocessableEntityLinks: TestWebhookUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    TestWebhookUnprocessableEntityLinks$outboundSchema.parse(
      testWebhookUnprocessableEntityLinks,
    ),
  );
}

export function testWebhookUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TestWebhookUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const TestWebhookNotFoundDocumentation$inboundSchema: z.ZodType<
  TestWebhookNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type TestWebhookNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const TestWebhookNotFoundDocumentation$outboundSchema: z.ZodType<
  TestWebhookNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  TestWebhookNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookNotFoundDocumentation$ {
  /** @deprecated use `TestWebhookNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = TestWebhookNotFoundDocumentation$inboundSchema;
  /** @deprecated use `TestWebhookNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = TestWebhookNotFoundDocumentation$outboundSchema;
  /** @deprecated use `TestWebhookNotFoundDocumentation$Outbound` instead. */
  export type Outbound = TestWebhookNotFoundDocumentation$Outbound;
}

export function testWebhookNotFoundDocumentationToJSON(
  testWebhookNotFoundDocumentation: TestWebhookNotFoundDocumentation,
): string {
  return JSON.stringify(
    TestWebhookNotFoundDocumentation$outboundSchema.parse(
      testWebhookNotFoundDocumentation,
    ),
  );
}

export function testWebhookNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestWebhookNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const TestWebhookNotFoundLinks$inboundSchema: z.ZodType<
  TestWebhookNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => TestWebhookNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type TestWebhookNotFoundLinks$Outbound = {
  documentation: TestWebhookNotFoundDocumentation$Outbound;
};

/** @internal */
export const TestWebhookNotFoundLinks$outboundSchema: z.ZodType<
  TestWebhookNotFoundLinks$Outbound,
  z.ZodTypeDef,
  TestWebhookNotFoundLinks
> = z.object({
  documentation: z.lazy(() => TestWebhookNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookNotFoundLinks$ {
  /** @deprecated use `TestWebhookNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = TestWebhookNotFoundLinks$inboundSchema;
  /** @deprecated use `TestWebhookNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = TestWebhookNotFoundLinks$outboundSchema;
  /** @deprecated use `TestWebhookNotFoundLinks$Outbound` instead. */
  export type Outbound = TestWebhookNotFoundLinks$Outbound;
}

export function testWebhookNotFoundLinksToJSON(
  testWebhookNotFoundLinks: TestWebhookNotFoundLinks,
): string {
  return JSON.stringify(
    TestWebhookNotFoundLinks$outboundSchema.parse(testWebhookNotFoundLinks),
  );
}

export function testWebhookNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestWebhookNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookNotFoundLinks' from JSON`,
  );
}
