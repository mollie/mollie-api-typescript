/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The address of the organization.
 */
export type SubmitOnboardingDataAddress = {
  /**
   * A street and street number.
   */
  streetAndNumber?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   */
  postalCode?: string | undefined;
  city?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country?: string | undefined;
};

export type SubmitOnboardingDataOrganization = {
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The address of the organization.
   */
  address?: SubmitOnboardingDataAddress | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | undefined;
  /**
   * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are verified against the international registry *VIES*.
   *
   * @remarks
   *
   * The field can be omitted for merchants residing in other countries.
   */
  vatNumber?: string | null | undefined;
  /**
   * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United Kingdom, and shifted VAT for merchants in the European Union.
   *
   * @remarks
   *
   * The field can be omitted for merchants residing in other countries.
   *
   * Possible values: `dutch` `british` `shifted`
   */
  vatRegulation?: string | null | undefined;
};

export type SubmitOnboardingDataProfile = {
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
   */
  url?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | null | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
   */
  businessCategory?: string | undefined;
};

export type SubmitOnboardingDataRequest = {
  organization?: SubmitOnboardingDataOrganization | undefined;
  profile?: SubmitOnboardingDataProfile | undefined;
};

/** @internal */
export const SubmitOnboardingDataAddress$inboundSchema: z.ZodType<
  SubmitOnboardingDataAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type SubmitOnboardingDataAddress$Outbound = {
  streetAndNumber?: string | undefined;
  postalCode?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const SubmitOnboardingDataAddress$outboundSchema: z.ZodType<
  SubmitOnboardingDataAddress$Outbound,
  z.ZodTypeDef,
  SubmitOnboardingDataAddress
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitOnboardingDataAddress$ {
  /** @deprecated use `SubmitOnboardingDataAddress$inboundSchema` instead. */
  export const inboundSchema = SubmitOnboardingDataAddress$inboundSchema;
  /** @deprecated use `SubmitOnboardingDataAddress$outboundSchema` instead. */
  export const outboundSchema = SubmitOnboardingDataAddress$outboundSchema;
  /** @deprecated use `SubmitOnboardingDataAddress$Outbound` instead. */
  export type Outbound = SubmitOnboardingDataAddress$Outbound;
}

export function submitOnboardingDataAddressToJSON(
  submitOnboardingDataAddress: SubmitOnboardingDataAddress,
): string {
  return JSON.stringify(
    SubmitOnboardingDataAddress$outboundSchema.parse(
      submitOnboardingDataAddress,
    ),
  );
}

export function submitOnboardingDataAddressFromJSON(
  jsonString: string,
): SafeParseResult<SubmitOnboardingDataAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitOnboardingDataAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitOnboardingDataAddress' from JSON`,
  );
}

/** @internal */
export const SubmitOnboardingDataOrganization$inboundSchema: z.ZodType<
  SubmitOnboardingDataOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  address: z.lazy(() => SubmitOnboardingDataAddress$inboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(z.string()).optional(),
});

/** @internal */
export type SubmitOnboardingDataOrganization$Outbound = {
  name?: string | undefined;
  address?: SubmitOnboardingDataAddress$Outbound | undefined;
  registrationNumber?: string | undefined;
  vatNumber?: string | null | undefined;
  vatRegulation?: string | null | undefined;
};

/** @internal */
export const SubmitOnboardingDataOrganization$outboundSchema: z.ZodType<
  SubmitOnboardingDataOrganization$Outbound,
  z.ZodTypeDef,
  SubmitOnboardingDataOrganization
> = z.object({
  name: z.string().optional(),
  address: z.lazy(() => SubmitOnboardingDataAddress$outboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitOnboardingDataOrganization$ {
  /** @deprecated use `SubmitOnboardingDataOrganization$inboundSchema` instead. */
  export const inboundSchema = SubmitOnboardingDataOrganization$inboundSchema;
  /** @deprecated use `SubmitOnboardingDataOrganization$outboundSchema` instead. */
  export const outboundSchema = SubmitOnboardingDataOrganization$outboundSchema;
  /** @deprecated use `SubmitOnboardingDataOrganization$Outbound` instead. */
  export type Outbound = SubmitOnboardingDataOrganization$Outbound;
}

export function submitOnboardingDataOrganizationToJSON(
  submitOnboardingDataOrganization: SubmitOnboardingDataOrganization,
): string {
  return JSON.stringify(
    SubmitOnboardingDataOrganization$outboundSchema.parse(
      submitOnboardingDataOrganization,
    ),
  );
}

export function submitOnboardingDataOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<SubmitOnboardingDataOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitOnboardingDataOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitOnboardingDataOrganization' from JSON`,
  );
}

/** @internal */
export const SubmitOnboardingDataProfile$inboundSchema: z.ZodType<
  SubmitOnboardingDataProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  businessCategory: z.string().optional(),
});

/** @internal */
export type SubmitOnboardingDataProfile$Outbound = {
  name?: string | undefined;
  url?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | null | undefined;
  businessCategory?: string | undefined;
};

/** @internal */
export const SubmitOnboardingDataProfile$outboundSchema: z.ZodType<
  SubmitOnboardingDataProfile$Outbound,
  z.ZodTypeDef,
  SubmitOnboardingDataProfile
> = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  businessCategory: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitOnboardingDataProfile$ {
  /** @deprecated use `SubmitOnboardingDataProfile$inboundSchema` instead. */
  export const inboundSchema = SubmitOnboardingDataProfile$inboundSchema;
  /** @deprecated use `SubmitOnboardingDataProfile$outboundSchema` instead. */
  export const outboundSchema = SubmitOnboardingDataProfile$outboundSchema;
  /** @deprecated use `SubmitOnboardingDataProfile$Outbound` instead. */
  export type Outbound = SubmitOnboardingDataProfile$Outbound;
}

export function submitOnboardingDataProfileToJSON(
  submitOnboardingDataProfile: SubmitOnboardingDataProfile,
): string {
  return JSON.stringify(
    SubmitOnboardingDataProfile$outboundSchema.parse(
      submitOnboardingDataProfile,
    ),
  );
}

export function submitOnboardingDataProfileFromJSON(
  jsonString: string,
): SafeParseResult<SubmitOnboardingDataProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitOnboardingDataProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitOnboardingDataProfile' from JSON`,
  );
}

/** @internal */
export const SubmitOnboardingDataRequest$inboundSchema: z.ZodType<
  SubmitOnboardingDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: z.lazy(() => SubmitOnboardingDataOrganization$inboundSchema)
    .optional(),
  profile: z.lazy(() => SubmitOnboardingDataProfile$inboundSchema).optional(),
});

/** @internal */
export type SubmitOnboardingDataRequest$Outbound = {
  organization?: SubmitOnboardingDataOrganization$Outbound | undefined;
  profile?: SubmitOnboardingDataProfile$Outbound | undefined;
};

/** @internal */
export const SubmitOnboardingDataRequest$outboundSchema: z.ZodType<
  SubmitOnboardingDataRequest$Outbound,
  z.ZodTypeDef,
  SubmitOnboardingDataRequest
> = z.object({
  organization: z.lazy(() => SubmitOnboardingDataOrganization$outboundSchema)
    .optional(),
  profile: z.lazy(() => SubmitOnboardingDataProfile$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitOnboardingDataRequest$ {
  /** @deprecated use `SubmitOnboardingDataRequest$inboundSchema` instead. */
  export const inboundSchema = SubmitOnboardingDataRequest$inboundSchema;
  /** @deprecated use `SubmitOnboardingDataRequest$outboundSchema` instead. */
  export const outboundSchema = SubmitOnboardingDataRequest$outboundSchema;
  /** @deprecated use `SubmitOnboardingDataRequest$Outbound` instead. */
  export type Outbound = SubmitOnboardingDataRequest$Outbound;
}

export function submitOnboardingDataRequestToJSON(
  submitOnboardingDataRequest: SubmitOnboardingDataRequest,
): string {
  return JSON.stringify(
    SubmitOnboardingDataRequest$outboundSchema.parse(
      submitOnboardingDataRequest,
    ),
  );
}

export function submitOnboardingDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubmitOnboardingDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitOnboardingDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitOnboardingDataRequest' from JSON`,
  );
}
