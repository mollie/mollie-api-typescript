/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type Organization = {
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  address?: models.Address | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | undefined;
  /**
   * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
   *
   * @remarks
   * numbers are verified against the international registry *VIES*.
   *
   * The field can be omitted for merchants residing in other countries.
   */
  vatNumber?: string | null | undefined;
  /**
   * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
   *
   * @remarks
   * The United Kingdom, and shifted VAT for merchants in the European Union.
   *
   * The field can be omitted for merchants residing in other countries.
   */
  vatRegulation?: models.OnboardingVatRegulation | null | undefined;
};

export type Profile = {
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website
   *
   * @remarks
   * or application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@`
   *
   * @remarks
   * signs are allowed.
   */
  url?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | null | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the
   *
   * @remarks
   * [business category list](common-data-types) for all possible options.
   */
  businessCategory?: string | undefined;
};

export type SubmitOnboardingDataRequestBody = {
  organization?: Organization | undefined;
  profile?: Profile | undefined;
};

export type SubmitOnboardingDataRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: SubmitOnboardingDataRequestBody | undefined;
};

/** @internal */
export const Organization$inboundSchema: z.ZodType<
  Organization,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  address: models.Address$inboundSchema.optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(models.OnboardingVatRegulation$inboundSchema)
    .optional(),
});

/** @internal */
export type Organization$Outbound = {
  name?: string | undefined;
  address?: models.Address$Outbound | undefined;
  registrationNumber?: string | undefined;
  vatNumber?: string | null | undefined;
  vatRegulation?: string | null | undefined;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
  Organization$Outbound,
  z.ZodTypeDef,
  Organization
> = z.object({
  name: z.string().optional(),
  address: models.Address$outboundSchema.optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(models.OnboardingVatRegulation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
  /** @deprecated use `Organization$inboundSchema` instead. */
  export const inboundSchema = Organization$inboundSchema;
  /** @deprecated use `Organization$outboundSchema` instead. */
  export const outboundSchema = Organization$outboundSchema;
  /** @deprecated use `Organization$Outbound` instead. */
  export type Outbound = Organization$Outbound;
}

export function organizationToJSON(organization: Organization): string {
  return JSON.stringify(Organization$outboundSchema.parse(organization));
}

export function organizationFromJSON(
  jsonString: string,
): SafeParseResult<Organization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Organization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Organization' from JSON`,
  );
}

/** @internal */
export const Profile$inboundSchema: z.ZodType<Profile, z.ZodTypeDef, unknown> =
  z.object({
    name: z.string().optional(),
    url: z.string().optional(),
    email: z.string().optional(),
    phone: z.string().optional(),
    description: z.nullable(z.string()).optional(),
    businessCategory: z.string().optional(),
  });

/** @internal */
export type Profile$Outbound = {
  name?: string | undefined;
  url?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | null | undefined;
  businessCategory?: string | undefined;
};

/** @internal */
export const Profile$outboundSchema: z.ZodType<
  Profile$Outbound,
  z.ZodTypeDef,
  Profile
> = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  businessCategory: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Profile$ {
  /** @deprecated use `Profile$inboundSchema` instead. */
  export const inboundSchema = Profile$inboundSchema;
  /** @deprecated use `Profile$outboundSchema` instead. */
  export const outboundSchema = Profile$outboundSchema;
  /** @deprecated use `Profile$Outbound` instead. */
  export type Outbound = Profile$Outbound;
}

export function profileToJSON(profile: Profile): string {
  return JSON.stringify(Profile$outboundSchema.parse(profile));
}

export function profileFromJSON(
  jsonString: string,
): SafeParseResult<Profile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Profile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Profile' from JSON`,
  );
}

/** @internal */
export const SubmitOnboardingDataRequestBody$inboundSchema: z.ZodType<
  SubmitOnboardingDataRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: z.lazy(() => Organization$inboundSchema).optional(),
  profile: z.lazy(() => Profile$inboundSchema).optional(),
});

/** @internal */
export type SubmitOnboardingDataRequestBody$Outbound = {
  organization?: Organization$Outbound | undefined;
  profile?: Profile$Outbound | undefined;
};

/** @internal */
export const SubmitOnboardingDataRequestBody$outboundSchema: z.ZodType<
  SubmitOnboardingDataRequestBody$Outbound,
  z.ZodTypeDef,
  SubmitOnboardingDataRequestBody
> = z.object({
  organization: z.lazy(() => Organization$outboundSchema).optional(),
  profile: z.lazy(() => Profile$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitOnboardingDataRequestBody$ {
  /** @deprecated use `SubmitOnboardingDataRequestBody$inboundSchema` instead. */
  export const inboundSchema = SubmitOnboardingDataRequestBody$inboundSchema;
  /** @deprecated use `SubmitOnboardingDataRequestBody$outboundSchema` instead. */
  export const outboundSchema = SubmitOnboardingDataRequestBody$outboundSchema;
  /** @deprecated use `SubmitOnboardingDataRequestBody$Outbound` instead. */
  export type Outbound = SubmitOnboardingDataRequestBody$Outbound;
}

export function submitOnboardingDataRequestBodyToJSON(
  submitOnboardingDataRequestBody: SubmitOnboardingDataRequestBody,
): string {
  return JSON.stringify(
    SubmitOnboardingDataRequestBody$outboundSchema.parse(
      submitOnboardingDataRequestBody,
    ),
  );
}

export function submitOnboardingDataRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SubmitOnboardingDataRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitOnboardingDataRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitOnboardingDataRequestBody' from JSON`,
  );
}

/** @internal */
export const SubmitOnboardingDataRequest$inboundSchema: z.ZodType<
  SubmitOnboardingDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => SubmitOnboardingDataRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SubmitOnboardingDataRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  RequestBody?: SubmitOnboardingDataRequestBody$Outbound | undefined;
};

/** @internal */
export const SubmitOnboardingDataRequest$outboundSchema: z.ZodType<
  SubmitOnboardingDataRequest$Outbound,
  z.ZodTypeDef,
  SubmitOnboardingDataRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => SubmitOnboardingDataRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitOnboardingDataRequest$ {
  /** @deprecated use `SubmitOnboardingDataRequest$inboundSchema` instead. */
  export const inboundSchema = SubmitOnboardingDataRequest$inboundSchema;
  /** @deprecated use `SubmitOnboardingDataRequest$outboundSchema` instead. */
  export const outboundSchema = SubmitOnboardingDataRequest$outboundSchema;
  /** @deprecated use `SubmitOnboardingDataRequest$Outbound` instead. */
  export type Outbound = SubmitOnboardingDataRequest$Outbound;
}

export function submitOnboardingDataRequestToJSON(
  submitOnboardingDataRequest: SubmitOnboardingDataRequest,
): string {
  return JSON.stringify(
    SubmitOnboardingDataRequest$outboundSchema.parse(
      submitOnboardingDataRequest,
    ),
  );
}

export function submitOnboardingDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubmitOnboardingDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitOnboardingDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitOnboardingDataRequest' from JSON`,
  );
}
