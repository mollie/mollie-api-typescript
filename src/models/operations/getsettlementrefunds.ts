/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to include additional information via the `include` query string parameter.
 */
export const GetSettlementRefundsInclude = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to include additional information via the `include` query string parameter.
 */
export type GetSettlementRefundsInclude = ClosedEnum<
  typeof GetSettlementRefundsInclude
>;

export type GetSettlementRefundsRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   */
  include?: GetSettlementRefundsInclude | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementRefundsNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementRefundsNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementRefundsNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementRefundsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementRefundsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementRefundsBadRequestDocumentation;
};

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
 */
export type GetSettlementRefundsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type GetSettlementRefundsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetSettlementRefundsMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type GetSettlementRefundsMetadataUnion =
  | GetSettlementRefundsMetadata
  | string
  | Array<string>;

export type GetSettlementRefundsExternalReference = {
  /**
   * Specifies the reference type
   *
   * @remarks
   *
   * Possible values: `acquirer-reference`
   */
  type?: string | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * The amount that will be pulled back.
 */
export type GetSettlementRefundsRoutingReversalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Where the funds will be pulled back from.
 */
export type GetSettlementRefundsSource = {
  /**
   * Required for source type `organization`. The ID of the connected organization the funds should be pulled back from.
   */
  organizationId?: string | undefined;
};

export type GetSettlementRefundsRoutingReversal = {
  /**
   * The amount that will be pulled back.
   */
  amount?: GetSettlementRefundsRoutingReversalAmount | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: GetSettlementRefundsSource | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementRefundsRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this refund belongs to.
 */
export type GetSettlementRefundsPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
 */
export type GetSettlementRefundsSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementRefundsRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementRefundsRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetSettlementRefundsRefundSelf | undefined;
  /**
   * The API resource URL of the [payment](get-payment) that this refund belongs to.
   */
  payment?: GetSettlementRefundsPayment | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
   */
  settlement?: GetSettlementRefundsSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSettlementRefundsRefundDocumentation | undefined;
};

export type GetSettlementRefundsRefund = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
   */
  amount?: GetSettlementRefundsAmount | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: GetSettlementRefundsSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | GetSettlementRefundsMetadata
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * The unique identifier of the payment this refund was created for. The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   *
   * @remarks
   *
   * Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
   */
  status?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: GetSettlementRefundsExternalReference | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?:
    | Array<GetSettlementRefundsRoutingReversal>
    | null
    | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSettlementRefundsRefundLinks | undefined;
};

export type GetSettlementRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds?: Array<GetSettlementRefundsRefund> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type GetSettlementRefundsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type GetSettlementRefundsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type GetSettlementRefundsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementRefundsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementRefundsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: GetSettlementRefundsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: GetSettlementRefundsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: GetSettlementRefundsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSettlementRefundsDocumentation | undefined;
};

/**
 * A list of refund objects. For a complete reference of the refund object, refer to the [Get refund endpoint](get-refund) documentation.
 */
export type GetSettlementRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: GetSettlementRefundsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSettlementRefundsLinks | undefined;
};

/** @internal */
export const GetSettlementRefundsInclude$inboundSchema: z.ZodNativeEnum<
  typeof GetSettlementRefundsInclude
> = z.nativeEnum(GetSettlementRefundsInclude);

/** @internal */
export const GetSettlementRefundsInclude$outboundSchema: z.ZodNativeEnum<
  typeof GetSettlementRefundsInclude
> = GetSettlementRefundsInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsInclude$ {
  /** @deprecated use `GetSettlementRefundsInclude$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsInclude$inboundSchema;
  /** @deprecated use `GetSettlementRefundsInclude$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsInclude$outboundSchema;
}

/** @internal */
export const GetSettlementRefundsRequest$inboundSchema: z.ZodType<
  GetSettlementRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(GetSettlementRefundsInclude$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetSettlementRefundsRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit: number | null;
  include?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetSettlementRefundsRequest$outboundSchema: z.ZodType<
  GetSettlementRefundsRequest$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(GetSettlementRefundsInclude$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsRequest$ {
  /** @deprecated use `GetSettlementRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsRequest$inboundSchema;
  /** @deprecated use `GetSettlementRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsRequest$outboundSchema;
  /** @deprecated use `GetSettlementRefundsRequest$Outbound` instead. */
  export type Outbound = GetSettlementRefundsRequest$Outbound;
}

export function getSettlementRefundsRequestToJSON(
  getSettlementRefundsRequest: GetSettlementRefundsRequest,
): string {
  return JSON.stringify(
    GetSettlementRefundsRequest$outboundSchema.parse(
      getSettlementRefundsRequest,
    ),
  );
}

export function getSettlementRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsRequest' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsNotFoundDocumentation$inboundSchema: z.ZodType<
  GetSettlementRefundsNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementRefundsNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefundsNotFoundDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementRefundsNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementRefundsNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsNotFoundDocumentation$ {
  /** @deprecated use `GetSettlementRefundsNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementRefundsNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementRefundsNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementRefundsNotFoundDocumentation$Outbound;
}

export function getSettlementRefundsNotFoundDocumentationToJSON(
  getSettlementRefundsNotFoundDocumentation:
    GetSettlementRefundsNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetSettlementRefundsNotFoundDocumentation$outboundSchema.parse(
      getSettlementRefundsNotFoundDocumentation,
    ),
  );
}

export function getSettlementRefundsNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementRefundsNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementRefundsNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsNotFoundLinks$inboundSchema: z.ZodType<
  GetSettlementRefundsNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementRefundsNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementRefundsNotFoundLinks$Outbound = {
  documentation: GetSettlementRefundsNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetSettlementRefundsNotFoundLinks$outboundSchema: z.ZodType<
  GetSettlementRefundsNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementRefundsNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsNotFoundLinks$ {
  /** @deprecated use `GetSettlementRefundsNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsNotFoundLinks$inboundSchema;
  /** @deprecated use `GetSettlementRefundsNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsNotFoundLinks$outboundSchema;
  /** @deprecated use `GetSettlementRefundsNotFoundLinks$Outbound` instead. */
  export type Outbound = GetSettlementRefundsNotFoundLinks$Outbound;
}

export function getSettlementRefundsNotFoundLinksToJSON(
  getSettlementRefundsNotFoundLinks: GetSettlementRefundsNotFoundLinks,
): string {
  return JSON.stringify(
    GetSettlementRefundsNotFoundLinks$outboundSchema.parse(
      getSettlementRefundsNotFoundLinks,
    ),
  );
}

export function getSettlementRefundsNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsBadRequestDocumentation$inboundSchema:
  z.ZodType<
    GetSettlementRefundsBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetSettlementRefundsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefundsBadRequestDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementRefundsBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementRefundsBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsBadRequestDocumentation$ {
  /** @deprecated use `GetSettlementRefundsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementRefundsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementRefundsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementRefundsBadRequestDocumentation$Outbound;
}

export function getSettlementRefundsBadRequestDocumentationToJSON(
  getSettlementRefundsBadRequestDocumentation:
    GetSettlementRefundsBadRequestDocumentation,
): string {
  return JSON.stringify(
    GetSettlementRefundsBadRequestDocumentation$outboundSchema.parse(
      getSettlementRefundsBadRequestDocumentation,
    ),
  );
}

export function getSettlementRefundsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementRefundsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementRefundsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsBadRequestLinks$inboundSchema: z.ZodType<
  GetSettlementRefundsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementRefundsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementRefundsBadRequestLinks$Outbound = {
  documentation: GetSettlementRefundsBadRequestDocumentation$Outbound;
};

/** @internal */
export const GetSettlementRefundsBadRequestLinks$outboundSchema: z.ZodType<
  GetSettlementRefundsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementRefundsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsBadRequestLinks$ {
  /** @deprecated use `GetSettlementRefundsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsBadRequestLinks$inboundSchema;
  /** @deprecated use `GetSettlementRefundsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsBadRequestLinks$outboundSchema;
  /** @deprecated use `GetSettlementRefundsBadRequestLinks$Outbound` instead. */
  export type Outbound = GetSettlementRefundsBadRequestLinks$Outbound;
}

export function getSettlementRefundsBadRequestLinksToJSON(
  getSettlementRefundsBadRequestLinks: GetSettlementRefundsBadRequestLinks,
): string {
  return JSON.stringify(
    GetSettlementRefundsBadRequestLinks$outboundSchema.parse(
      getSettlementRefundsBadRequestLinks,
    ),
  );
}

export function getSettlementRefundsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsAmount$inboundSchema: z.ZodType<
  GetSettlementRefundsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementRefundsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementRefundsAmount$outboundSchema: z.ZodType<
  GetSettlementRefundsAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsAmount$ {
  /** @deprecated use `GetSettlementRefundsAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsAmount$inboundSchema;
  /** @deprecated use `GetSettlementRefundsAmount$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsAmount$outboundSchema;
  /** @deprecated use `GetSettlementRefundsAmount$Outbound` instead. */
  export type Outbound = GetSettlementRefundsAmount$Outbound;
}

export function getSettlementRefundsAmountToJSON(
  getSettlementRefundsAmount: GetSettlementRefundsAmount,
): string {
  return JSON.stringify(
    GetSettlementRefundsAmount$outboundSchema.parse(getSettlementRefundsAmount),
  );
}

export function getSettlementRefundsAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsSettlementAmount$inboundSchema: z.ZodType<
  GetSettlementRefundsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementRefundsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementRefundsSettlementAmount$outboundSchema: z.ZodType<
  GetSettlementRefundsSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsSettlementAmount$ {
  /** @deprecated use `GetSettlementRefundsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsSettlementAmount$inboundSchema;
  /** @deprecated use `GetSettlementRefundsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsSettlementAmount$outboundSchema;
  /** @deprecated use `GetSettlementRefundsSettlementAmount$Outbound` instead. */
  export type Outbound = GetSettlementRefundsSettlementAmount$Outbound;
}

export function getSettlementRefundsSettlementAmountToJSON(
  getSettlementRefundsSettlementAmount: GetSettlementRefundsSettlementAmount,
): string {
  return JSON.stringify(
    GetSettlementRefundsSettlementAmount$outboundSchema.parse(
      getSettlementRefundsSettlementAmount,
    ),
  );
}

export function getSettlementRefundsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsMetadata$inboundSchema: z.ZodType<
  GetSettlementRefundsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetSettlementRefundsMetadata$Outbound = {};

/** @internal */
export const GetSettlementRefundsMetadata$outboundSchema: z.ZodType<
  GetSettlementRefundsMetadata$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsMetadata$ {
  /** @deprecated use `GetSettlementRefundsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsMetadata$inboundSchema;
  /** @deprecated use `GetSettlementRefundsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsMetadata$outboundSchema;
  /** @deprecated use `GetSettlementRefundsMetadata$Outbound` instead. */
  export type Outbound = GetSettlementRefundsMetadata$Outbound;
}

export function getSettlementRefundsMetadataToJSON(
  getSettlementRefundsMetadata: GetSettlementRefundsMetadata,
): string {
  return JSON.stringify(
    GetSettlementRefundsMetadata$outboundSchema.parse(
      getSettlementRefundsMetadata,
    ),
  );
}

export function getSettlementRefundsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsMetadata' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsMetadataUnion$inboundSchema: z.ZodType<
  GetSettlementRefundsMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetSettlementRefundsMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type GetSettlementRefundsMetadataUnion$Outbound =
  | GetSettlementRefundsMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const GetSettlementRefundsMetadataUnion$outboundSchema: z.ZodType<
  GetSettlementRefundsMetadataUnion$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsMetadataUnion
> = z.union([
  z.lazy(() => GetSettlementRefundsMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsMetadataUnion$ {
  /** @deprecated use `GetSettlementRefundsMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsMetadataUnion$inboundSchema;
  /** @deprecated use `GetSettlementRefundsMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsMetadataUnion$outboundSchema;
  /** @deprecated use `GetSettlementRefundsMetadataUnion$Outbound` instead. */
  export type Outbound = GetSettlementRefundsMetadataUnion$Outbound;
}

export function getSettlementRefundsMetadataUnionToJSON(
  getSettlementRefundsMetadataUnion: GetSettlementRefundsMetadataUnion,
): string {
  return JSON.stringify(
    GetSettlementRefundsMetadataUnion$outboundSchema.parse(
      getSettlementRefundsMetadataUnion,
    ),
  );
}

export function getSettlementRefundsMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsMetadataUnion' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsExternalReference$inboundSchema: z.ZodType<
  GetSettlementRefundsExternalReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type GetSettlementRefundsExternalReference$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetSettlementRefundsExternalReference$outboundSchema: z.ZodType<
  GetSettlementRefundsExternalReference$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsExternalReference
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsExternalReference$ {
  /** @deprecated use `GetSettlementRefundsExternalReference$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsExternalReference$inboundSchema;
  /** @deprecated use `GetSettlementRefundsExternalReference$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsExternalReference$outboundSchema;
  /** @deprecated use `GetSettlementRefundsExternalReference$Outbound` instead. */
  export type Outbound = GetSettlementRefundsExternalReference$Outbound;
}

export function getSettlementRefundsExternalReferenceToJSON(
  getSettlementRefundsExternalReference: GetSettlementRefundsExternalReference,
): string {
  return JSON.stringify(
    GetSettlementRefundsExternalReference$outboundSchema.parse(
      getSettlementRefundsExternalReference,
    ),
  );
}

export function getSettlementRefundsExternalReferenceFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsExternalReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsExternalReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsExternalReference' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsRoutingReversalAmount$inboundSchema: z.ZodType<
  GetSettlementRefundsRoutingReversalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementRefundsRoutingReversalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementRefundsRoutingReversalAmount$outboundSchema:
  z.ZodType<
    GetSettlementRefundsRoutingReversalAmount$Outbound,
    z.ZodTypeDef,
    GetSettlementRefundsRoutingReversalAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsRoutingReversalAmount$ {
  /** @deprecated use `GetSettlementRefundsRoutingReversalAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsRoutingReversalAmount$inboundSchema;
  /** @deprecated use `GetSettlementRefundsRoutingReversalAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsRoutingReversalAmount$outboundSchema;
  /** @deprecated use `GetSettlementRefundsRoutingReversalAmount$Outbound` instead. */
  export type Outbound = GetSettlementRefundsRoutingReversalAmount$Outbound;
}

export function getSettlementRefundsRoutingReversalAmountToJSON(
  getSettlementRefundsRoutingReversalAmount:
    GetSettlementRefundsRoutingReversalAmount,
): string {
  return JSON.stringify(
    GetSettlementRefundsRoutingReversalAmount$outboundSchema.parse(
      getSettlementRefundsRoutingReversalAmount,
    ),
  );
}

export function getSettlementRefundsRoutingReversalAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementRefundsRoutingReversalAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsRoutingReversalAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementRefundsRoutingReversalAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsSource$inboundSchema: z.ZodType<
  GetSettlementRefundsSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string().optional(),
});

/** @internal */
export type GetSettlementRefundsSource$Outbound = {
  organizationId?: string | undefined;
};

/** @internal */
export const GetSettlementRefundsSource$outboundSchema: z.ZodType<
  GetSettlementRefundsSource$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsSource
> = z.object({
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsSource$ {
  /** @deprecated use `GetSettlementRefundsSource$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsSource$inboundSchema;
  /** @deprecated use `GetSettlementRefundsSource$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsSource$outboundSchema;
  /** @deprecated use `GetSettlementRefundsSource$Outbound` instead. */
  export type Outbound = GetSettlementRefundsSource$Outbound;
}

export function getSettlementRefundsSourceToJSON(
  getSettlementRefundsSource: GetSettlementRefundsSource,
): string {
  return JSON.stringify(
    GetSettlementRefundsSource$outboundSchema.parse(getSettlementRefundsSource),
  );
}

export function getSettlementRefundsSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsSource' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsRoutingReversal$inboundSchema: z.ZodType<
  GetSettlementRefundsRoutingReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetSettlementRefundsRoutingReversalAmount$inboundSchema)
    .optional(),
  source: z.lazy(() => GetSettlementRefundsSource$inboundSchema).optional(),
});

/** @internal */
export type GetSettlementRefundsRoutingReversal$Outbound = {
  amount?: GetSettlementRefundsRoutingReversalAmount$Outbound | undefined;
  source?: GetSettlementRefundsSource$Outbound | undefined;
};

/** @internal */
export const GetSettlementRefundsRoutingReversal$outboundSchema: z.ZodType<
  GetSettlementRefundsRoutingReversal$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsRoutingReversal
> = z.object({
  amount: z.lazy(() => GetSettlementRefundsRoutingReversalAmount$outboundSchema)
    .optional(),
  source: z.lazy(() => GetSettlementRefundsSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsRoutingReversal$ {
  /** @deprecated use `GetSettlementRefundsRoutingReversal$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsRoutingReversal$inboundSchema;
  /** @deprecated use `GetSettlementRefundsRoutingReversal$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsRoutingReversal$outboundSchema;
  /** @deprecated use `GetSettlementRefundsRoutingReversal$Outbound` instead. */
  export type Outbound = GetSettlementRefundsRoutingReversal$Outbound;
}

export function getSettlementRefundsRoutingReversalToJSON(
  getSettlementRefundsRoutingReversal: GetSettlementRefundsRoutingReversal,
): string {
  return JSON.stringify(
    GetSettlementRefundsRoutingReversal$outboundSchema.parse(
      getSettlementRefundsRoutingReversal,
    ),
  );
}

export function getSettlementRefundsRoutingReversalFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsRoutingReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsRoutingReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsRoutingReversal' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsRefundSelf$inboundSchema: z.ZodType<
  GetSettlementRefundsRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementRefundsRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefundsRefundSelf$outboundSchema: z.ZodType<
  GetSettlementRefundsRefundSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsRefundSelf$ {
  /** @deprecated use `GetSettlementRefundsRefundSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsRefundSelf$inboundSchema;
  /** @deprecated use `GetSettlementRefundsRefundSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsRefundSelf$outboundSchema;
  /** @deprecated use `GetSettlementRefundsRefundSelf$Outbound` instead. */
  export type Outbound = GetSettlementRefundsRefundSelf$Outbound;
}

export function getSettlementRefundsRefundSelfToJSON(
  getSettlementRefundsRefundSelf: GetSettlementRefundsRefundSelf,
): string {
  return JSON.stringify(
    GetSettlementRefundsRefundSelf$outboundSchema.parse(
      getSettlementRefundsRefundSelf,
    ),
  );
}

export function getSettlementRefundsRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsRefundSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsPayment$inboundSchema: z.ZodType<
  GetSettlementRefundsPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementRefundsPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefundsPayment$outboundSchema: z.ZodType<
  GetSettlementRefundsPayment$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsPayment$ {
  /** @deprecated use `GetSettlementRefundsPayment$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsPayment$inboundSchema;
  /** @deprecated use `GetSettlementRefundsPayment$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsPayment$outboundSchema;
  /** @deprecated use `GetSettlementRefundsPayment$Outbound` instead. */
  export type Outbound = GetSettlementRefundsPayment$Outbound;
}

export function getSettlementRefundsPaymentToJSON(
  getSettlementRefundsPayment: GetSettlementRefundsPayment,
): string {
  return JSON.stringify(
    GetSettlementRefundsPayment$outboundSchema.parse(
      getSettlementRefundsPayment,
    ),
  );
}

export function getSettlementRefundsPaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsPayment' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsSettlement$inboundSchema: z.ZodType<
  GetSettlementRefundsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementRefundsSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementRefundsSettlement$outboundSchema: z.ZodType<
  GetSettlementRefundsSettlement$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsSettlement$ {
  /** @deprecated use `GetSettlementRefundsSettlement$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsSettlement$inboundSchema;
  /** @deprecated use `GetSettlementRefundsSettlement$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsSettlement$outboundSchema;
  /** @deprecated use `GetSettlementRefundsSettlement$Outbound` instead. */
  export type Outbound = GetSettlementRefundsSettlement$Outbound;
}

export function getSettlementRefundsSettlementToJSON(
  getSettlementRefundsSettlement: GetSettlementRefundsSettlement,
): string {
  return JSON.stringify(
    GetSettlementRefundsSettlement$outboundSchema.parse(
      getSettlementRefundsSettlement,
    ),
  );
}

export function getSettlementRefundsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsSettlement' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsRefundDocumentation$inboundSchema: z.ZodType<
  GetSettlementRefundsRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementRefundsRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefundsRefundDocumentation$outboundSchema: z.ZodType<
  GetSettlementRefundsRefundDocumentation$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsRefundDocumentation$ {
  /** @deprecated use `GetSettlementRefundsRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementRefundsRefundDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementRefundsRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsRefundDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementRefundsRefundDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementRefundsRefundDocumentation$Outbound;
}

export function getSettlementRefundsRefundDocumentationToJSON(
  getSettlementRefundsRefundDocumentation:
    GetSettlementRefundsRefundDocumentation,
): string {
  return JSON.stringify(
    GetSettlementRefundsRefundDocumentation$outboundSchema.parse(
      getSettlementRefundsRefundDocumentation,
    ),
  );
}

export function getSettlementRefundsRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementRefundsRefundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementRefundsRefundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementRefundsRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsRefundLinks$inboundSchema: z.ZodType<
  GetSettlementRefundsRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementRefundsRefundSelf$inboundSchema).optional(),
  payment: z.lazy(() => GetSettlementRefundsPayment$inboundSchema).optional(),
  settlement: z.nullable(
    z.lazy(() => GetSettlementRefundsSettlement$inboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    GetSettlementRefundsRefundDocumentation$inboundSchema
  ).optional(),
});

/** @internal */
export type GetSettlementRefundsRefundLinks$Outbound = {
  self?: GetSettlementRefundsRefundSelf$Outbound | undefined;
  payment?: GetSettlementRefundsPayment$Outbound | undefined;
  settlement?: GetSettlementRefundsSettlement$Outbound | null | undefined;
  documentation?: GetSettlementRefundsRefundDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSettlementRefundsRefundLinks$outboundSchema: z.ZodType<
  GetSettlementRefundsRefundLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsRefundLinks
> = z.object({
  self: z.lazy(() => GetSettlementRefundsRefundSelf$outboundSchema).optional(),
  payment: z.lazy(() => GetSettlementRefundsPayment$outboundSchema).optional(),
  settlement: z.nullable(
    z.lazy(() => GetSettlementRefundsSettlement$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    GetSettlementRefundsRefundDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsRefundLinks$ {
  /** @deprecated use `GetSettlementRefundsRefundLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsRefundLinks$inboundSchema;
  /** @deprecated use `GetSettlementRefundsRefundLinks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsRefundLinks$outboundSchema;
  /** @deprecated use `GetSettlementRefundsRefundLinks$Outbound` instead. */
  export type Outbound = GetSettlementRefundsRefundLinks$Outbound;
}

export function getSettlementRefundsRefundLinksToJSON(
  getSettlementRefundsRefundLinks: GetSettlementRefundsRefundLinks,
): string {
  return JSON.stringify(
    GetSettlementRefundsRefundLinks$outboundSchema.parse(
      getSettlementRefundsRefundLinks,
    ),
  );
}

export function getSettlementRefundsRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsRefundLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsRefund$inboundSchema: z.ZodType<
  GetSettlementRefundsRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetSettlementRefundsAmount$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => GetSettlementRefundsSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSettlementRefundsMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    GetSettlementRefundsExternalReference$inboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => GetSettlementRefundsRoutingReversal$inboundSchema)),
  ).optional(),
  _links: z.lazy(() => GetSettlementRefundsRefundLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementRefundsRefund$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: GetSettlementRefundsAmount$Outbound | undefined;
  settlementAmount?:
    | GetSettlementRefundsSettlementAmount$Outbound
    | null
    | undefined;
  metadata?:
    | GetSettlementRefundsMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?:
    | GetSettlementRefundsExternalReference$Outbound
    | undefined;
  routingReversals?:
    | Array<GetSettlementRefundsRoutingReversal$Outbound>
    | null
    | undefined;
  _links?: GetSettlementRefundsRefundLinks$Outbound | undefined;
};

/** @internal */
export const GetSettlementRefundsRefund$outboundSchema: z.ZodType<
  GetSettlementRefundsRefund$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsRefund
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetSettlementRefundsAmount$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => GetSettlementRefundsSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSettlementRefundsMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    GetSettlementRefundsExternalReference$outboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => GetSettlementRefundsRoutingReversal$outboundSchema)),
  ).optional(),
  links: z.lazy(() => GetSettlementRefundsRefundLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsRefund$ {
  /** @deprecated use `GetSettlementRefundsRefund$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsRefund$inboundSchema;
  /** @deprecated use `GetSettlementRefundsRefund$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsRefund$outboundSchema;
  /** @deprecated use `GetSettlementRefundsRefund$Outbound` instead. */
  export type Outbound = GetSettlementRefundsRefund$Outbound;
}

export function getSettlementRefundsRefundToJSON(
  getSettlementRefundsRefund: GetSettlementRefundsRefund,
): string {
  return JSON.stringify(
    GetSettlementRefundsRefund$outboundSchema.parse(getSettlementRefundsRefund),
  );
}

export function getSettlementRefundsRefundFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsRefund' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsEmbedded$inboundSchema: z.ZodType<
  GetSettlementRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(z.lazy(() => GetSettlementRefundsRefund$inboundSchema))
    .optional(),
});

/** @internal */
export type GetSettlementRefundsEmbedded$Outbound = {
  refunds?: Array<GetSettlementRefundsRefund$Outbound> | undefined;
};

/** @internal */
export const GetSettlementRefundsEmbedded$outboundSchema: z.ZodType<
  GetSettlementRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsEmbedded
> = z.object({
  refunds: z.array(z.lazy(() => GetSettlementRefundsRefund$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsEmbedded$ {
  /** @deprecated use `GetSettlementRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsEmbedded$inboundSchema;
  /** @deprecated use `GetSettlementRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsEmbedded$outboundSchema;
  /** @deprecated use `GetSettlementRefundsEmbedded$Outbound` instead. */
  export type Outbound = GetSettlementRefundsEmbedded$Outbound;
}

export function getSettlementRefundsEmbeddedToJSON(
  getSettlementRefundsEmbedded: GetSettlementRefundsEmbedded,
): string {
  return JSON.stringify(
    GetSettlementRefundsEmbedded$outboundSchema.parse(
      getSettlementRefundsEmbedded,
    ),
  );
}

export function getSettlementRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsSelf$inboundSchema: z.ZodType<
  GetSettlementRefundsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementRefundsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefundsSelf$outboundSchema: z.ZodType<
  GetSettlementRefundsSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsSelf$ {
  /** @deprecated use `GetSettlementRefundsSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsSelf$inboundSchema;
  /** @deprecated use `GetSettlementRefundsSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsSelf$outboundSchema;
  /** @deprecated use `GetSettlementRefundsSelf$Outbound` instead. */
  export type Outbound = GetSettlementRefundsSelf$Outbound;
}

export function getSettlementRefundsSelfToJSON(
  getSettlementRefundsSelf: GetSettlementRefundsSelf,
): string {
  return JSON.stringify(
    GetSettlementRefundsSelf$outboundSchema.parse(getSettlementRefundsSelf),
  );
}

export function getSettlementRefundsSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsPrevious$inboundSchema: z.ZodType<
  GetSettlementRefundsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementRefundsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementRefundsPrevious$outboundSchema: z.ZodType<
  GetSettlementRefundsPrevious$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsPrevious$ {
  /** @deprecated use `GetSettlementRefundsPrevious$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsPrevious$inboundSchema;
  /** @deprecated use `GetSettlementRefundsPrevious$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsPrevious$outboundSchema;
  /** @deprecated use `GetSettlementRefundsPrevious$Outbound` instead. */
  export type Outbound = GetSettlementRefundsPrevious$Outbound;
}

export function getSettlementRefundsPreviousToJSON(
  getSettlementRefundsPrevious: GetSettlementRefundsPrevious,
): string {
  return JSON.stringify(
    GetSettlementRefundsPrevious$outboundSchema.parse(
      getSettlementRefundsPrevious,
    ),
  );
}

export function getSettlementRefundsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsPrevious' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsNext$inboundSchema: z.ZodType<
  GetSettlementRefundsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementRefundsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementRefundsNext$outboundSchema: z.ZodType<
  GetSettlementRefundsNext$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsNext$ {
  /** @deprecated use `GetSettlementRefundsNext$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsNext$inboundSchema;
  /** @deprecated use `GetSettlementRefundsNext$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsNext$outboundSchema;
  /** @deprecated use `GetSettlementRefundsNext$Outbound` instead. */
  export type Outbound = GetSettlementRefundsNext$Outbound;
}

export function getSettlementRefundsNextToJSON(
  getSettlementRefundsNext: GetSettlementRefundsNext,
): string {
  return JSON.stringify(
    GetSettlementRefundsNext$outboundSchema.parse(getSettlementRefundsNext),
  );
}

export function getSettlementRefundsNextFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsNext' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsDocumentation$inboundSchema: z.ZodType<
  GetSettlementRefundsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementRefundsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefundsDocumentation$outboundSchema: z.ZodType<
  GetSettlementRefundsDocumentation$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsDocumentation$ {
  /** @deprecated use `GetSettlementRefundsDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementRefundsDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementRefundsDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementRefundsDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementRefundsDocumentation$Outbound;
}

export function getSettlementRefundsDocumentationToJSON(
  getSettlementRefundsDocumentation: GetSettlementRefundsDocumentation,
): string {
  return JSON.stringify(
    GetSettlementRefundsDocumentation$outboundSchema.parse(
      getSettlementRefundsDocumentation,
    ),
  );
}

export function getSettlementRefundsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsLinks$inboundSchema: z.ZodType<
  GetSettlementRefundsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementRefundsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => GetSettlementRefundsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => GetSettlementRefundsNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementRefundsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSettlementRefundsLinks$Outbound = {
  self?: GetSettlementRefundsSelf$Outbound | undefined;
  previous?: GetSettlementRefundsPrevious$Outbound | null | undefined;
  next?: GetSettlementRefundsNext$Outbound | null | undefined;
  documentation?: GetSettlementRefundsDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSettlementRefundsLinks$outboundSchema: z.ZodType<
  GetSettlementRefundsLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsLinks
> = z.object({
  self: z.lazy(() => GetSettlementRefundsSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => GetSettlementRefundsPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => GetSettlementRefundsNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementRefundsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsLinks$ {
  /** @deprecated use `GetSettlementRefundsLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsLinks$inboundSchema;
  /** @deprecated use `GetSettlementRefundsLinks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsLinks$outboundSchema;
  /** @deprecated use `GetSettlementRefundsLinks$Outbound` instead. */
  export type Outbound = GetSettlementRefundsLinks$Outbound;
}

export function getSettlementRefundsLinksToJSON(
  getSettlementRefundsLinks: GetSettlementRefundsLinks,
): string {
  return JSON.stringify(
    GetSettlementRefundsLinks$outboundSchema.parse(getSettlementRefundsLinks),
  );
}

export function getSettlementRefundsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefundsResponse$inboundSchema: z.ZodType<
  GetSettlementRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => GetSettlementRefundsEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => GetSettlementRefundsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementRefundsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: GetSettlementRefundsEmbedded$Outbound | undefined;
  _links?: GetSettlementRefundsLinks$Outbound | undefined;
};

/** @internal */
export const GetSettlementRefundsResponse$outboundSchema: z.ZodType<
  GetSettlementRefundsResponse$Outbound,
  z.ZodTypeDef,
  GetSettlementRefundsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => GetSettlementRefundsEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => GetSettlementRefundsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefundsResponse$ {
  /** @deprecated use `GetSettlementRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefundsResponse$inboundSchema;
  /** @deprecated use `GetSettlementRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefundsResponse$outboundSchema;
  /** @deprecated use `GetSettlementRefundsResponse$Outbound` instead. */
  export type Outbound = GetSettlementRefundsResponse$Outbound;
}

export function getSettlementRefundsResponseToJSON(
  getSettlementRefundsResponse: GetSettlementRefundsResponse,
): string {
  return JSON.stringify(
    GetSettlementRefundsResponse$outboundSchema.parse(
      getSettlementRefundsResponse,
    ),
  );
}

export function getSettlementRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefundsResponse' from JSON`,
  );
}
