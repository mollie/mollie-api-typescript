/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCustomerRequestBody = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type DeleteCustomerRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: DeleteCustomerRequestBody | undefined;
};

/** @internal */
export const DeleteCustomerRequestBody$inboundSchema: z.ZodType<
  DeleteCustomerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type DeleteCustomerRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const DeleteCustomerRequestBody$outboundSchema: z.ZodType<
  DeleteCustomerRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteCustomerRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCustomerRequestBody$ {
  /** @deprecated use `DeleteCustomerRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeleteCustomerRequestBody$inboundSchema;
  /** @deprecated use `DeleteCustomerRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeleteCustomerRequestBody$outboundSchema;
  /** @deprecated use `DeleteCustomerRequestBody$Outbound` instead. */
  export type Outbound = DeleteCustomerRequestBody$Outbound;
}

export function deleteCustomerRequestBodyToJSON(
  deleteCustomerRequestBody: DeleteCustomerRequestBody,
): string {
  return JSON.stringify(
    DeleteCustomerRequestBody$outboundSchema.parse(deleteCustomerRequestBody),
  );
}

export function deleteCustomerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCustomerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCustomerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCustomerRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteCustomerRequest$inboundSchema: z.ZodType<
  DeleteCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => DeleteCustomerRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteCustomerRequest$Outbound = {
  customerId: string;
  "idempotency-key"?: string | undefined;
  RequestBody?: DeleteCustomerRequestBody$Outbound | undefined;
};

/** @internal */
export const DeleteCustomerRequest$outboundSchema: z.ZodType<
  DeleteCustomerRequest$Outbound,
  z.ZodTypeDef,
  DeleteCustomerRequest
> = z.object({
  customerId: z.string(),
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => DeleteCustomerRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCustomerRequest$ {
  /** @deprecated use `DeleteCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCustomerRequest$inboundSchema;
  /** @deprecated use `DeleteCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCustomerRequest$outboundSchema;
  /** @deprecated use `DeleteCustomerRequest$Outbound` instead. */
  export type Outbound = DeleteCustomerRequest$Outbound;
}

export function deleteCustomerRequestToJSON(
  deleteCustomerRequest: DeleteCustomerRequest,
): string {
  return JSON.stringify(
    DeleteCustomerRequest$outboundSchema.parse(deleteCustomerRequest),
  );
}

export function deleteCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCustomerRequest' from JSON`,
  );
}
