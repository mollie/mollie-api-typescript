/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export const CreateCustomerLocaleRequest = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export type CreateCustomerLocaleRequest = ClosedEnum<
  typeof CreateCustomerLocaleRequest
>;

export type CreateCustomerMetadataRequest = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateCustomerMetadataRequestUnion =
  | CreateCustomerMetadataRequest
  | string
  | Array<string>;

export type CreateCustomerRequest = {
  /**
   * The full name of the customer.
   */
  name?: string | null | undefined;
  /**
   * The email address of the customer.
   */
  email?: string | null | undefined;
  /**
   * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
   *
   * @remarks
   * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
   */
  locale?: CreateCustomerLocaleRequest | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateCustomerMetadataRequest
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateCustomerNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CreateCustomerNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateCustomerNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const CreateCustomerMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type CreateCustomerMode = ClosedEnum<typeof CreateCustomerMode>;

/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export const CreateCustomerLocaleResponse = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
 *
 * @remarks
 * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
 */
export type CreateCustomerLocaleResponse = ClosedEnum<
  typeof CreateCustomerLocaleResponse
>;

export type CreateCustomerMetadataResponse = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateCustomerMetadataResponseUnion =
  | CreateCustomerMetadataResponse
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateCustomerSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateCustomerDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
 *
 * @remarks
 * exist (yet).
 */
export type CreateCustomerPayments = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
 *
 * @remarks
 * exist (yet).
 */
export type CreateCustomerMandates = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
 *
 * @remarks
 * subscriptions exist (yet).
 */
export type CreateCustomerSubscriptions = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateCustomerDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateCustomerLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: CreateCustomerSelf;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  dashboard: CreateCustomerDashboard;
  /**
   * The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
   *
   * @remarks
   * exist (yet).
   */
  payments?: CreateCustomerPayments | null | undefined;
  /**
   * The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
   *
   * @remarks
   * exist (yet).
   */
  mandates?: CreateCustomerMandates | null | undefined;
  /**
   * The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
   *
   * @remarks
   * subscriptions exist (yet).
   */
  subscriptions?: CreateCustomerSubscriptions | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: CreateCustomerDocumentation;
};

/**
 * The newly created customer object.
 */
export type CreateCustomerResponse = {
  /**
   * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: CreateCustomerMode;
  /**
   * The full name of the customer.
   */
  name: string | null;
  /**
   * The email address of the customer.
   */
  email: string | null;
  /**
   * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
   *
   * @remarks
   * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
   */
  locale: CreateCustomerLocaleResponse | null;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata: CreateCustomerMetadataResponse | string | Array<string> | null;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: CreateCustomerLinks;
};

/** @internal */
export const CreateCustomerLocaleRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateCustomerLocaleRequest
> = z.nativeEnum(CreateCustomerLocaleRequest);

/** @internal */
export const CreateCustomerLocaleRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateCustomerLocaleRequest
> = CreateCustomerLocaleRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerLocaleRequest$ {
  /** @deprecated use `CreateCustomerLocaleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerLocaleRequest$inboundSchema;
  /** @deprecated use `CreateCustomerLocaleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerLocaleRequest$outboundSchema;
}

/** @internal */
export const CreateCustomerMetadataRequest$inboundSchema: z.ZodType<
  CreateCustomerMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateCustomerMetadataRequest$Outbound = {};

/** @internal */
export const CreateCustomerMetadataRequest$outboundSchema: z.ZodType<
  CreateCustomerMetadataRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerMetadataRequest$ {
  /** @deprecated use `CreateCustomerMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerMetadataRequest$inboundSchema;
  /** @deprecated use `CreateCustomerMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerMetadataRequest$outboundSchema;
  /** @deprecated use `CreateCustomerMetadataRequest$Outbound` instead. */
  export type Outbound = CreateCustomerMetadataRequest$Outbound;
}

export function createCustomerMetadataRequestToJSON(
  createCustomerMetadataRequest: CreateCustomerMetadataRequest,
): string {
  return JSON.stringify(
    CreateCustomerMetadataRequest$outboundSchema.parse(
      createCustomerMetadataRequest,
    ),
  );
}

export function createCustomerMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerMetadataRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomerMetadataRequestUnion$inboundSchema: z.ZodType<
  CreateCustomerMetadataRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCustomerMetadataRequest$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateCustomerMetadataRequestUnion$Outbound =
  | CreateCustomerMetadataRequest$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateCustomerMetadataRequestUnion$outboundSchema: z.ZodType<
  CreateCustomerMetadataRequestUnion$Outbound,
  z.ZodTypeDef,
  CreateCustomerMetadataRequestUnion
> = z.union([
  z.lazy(() => CreateCustomerMetadataRequest$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerMetadataRequestUnion$ {
  /** @deprecated use `CreateCustomerMetadataRequestUnion$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerMetadataRequestUnion$inboundSchema;
  /** @deprecated use `CreateCustomerMetadataRequestUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerMetadataRequestUnion$outboundSchema;
  /** @deprecated use `CreateCustomerMetadataRequestUnion$Outbound` instead. */
  export type Outbound = CreateCustomerMetadataRequestUnion$Outbound;
}

export function createCustomerMetadataRequestUnionToJSON(
  createCustomerMetadataRequestUnion: CreateCustomerMetadataRequestUnion,
): string {
  return JSON.stringify(
    CreateCustomerMetadataRequestUnion$outboundSchema.parse(
      createCustomerMetadataRequestUnion,
    ),
  );
}

export function createCustomerMetadataRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerMetadataRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerMetadataRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerMetadataRequestUnion' from JSON`,
  );
}

/** @internal */
export const CreateCustomerRequest$inboundSchema: z.ZodType<
  CreateCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(CreateCustomerLocaleRequest$inboundSchema).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCustomerMetadataRequest$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CreateCustomerRequest$Outbound = {
  name?: string | null | undefined;
  email?: string | null | undefined;
  locale?: string | null | undefined;
  metadata?:
    | CreateCustomerMetadataRequest$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CreateCustomerRequest$outboundSchema: z.ZodType<
  CreateCustomerRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerRequest
> = z.object({
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(CreateCustomerLocaleRequest$outboundSchema).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCustomerMetadataRequest$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerRequest$ {
  /** @deprecated use `CreateCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerRequest$inboundSchema;
  /** @deprecated use `CreateCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerRequest$outboundSchema;
  /** @deprecated use `CreateCustomerRequest$Outbound` instead. */
  export type Outbound = CreateCustomerRequest$Outbound;
}

export function createCustomerRequestToJSON(
  createCustomerRequest: CreateCustomerRequest,
): string {
  return JSON.stringify(
    CreateCustomerRequest$outboundSchema.parse(createCustomerRequest),
  );
}

export function createCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomerNotFoundDocumentation$inboundSchema: z.ZodType<
  CreateCustomerNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCustomerNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCustomerNotFoundDocumentation$outboundSchema: z.ZodType<
  CreateCustomerNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateCustomerNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerNotFoundDocumentation$ {
  /** @deprecated use `CreateCustomerNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CreateCustomerNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CreateCustomerNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CreateCustomerNotFoundDocumentation$Outbound;
}

export function createCustomerNotFoundDocumentationToJSON(
  createCustomerNotFoundDocumentation: CreateCustomerNotFoundDocumentation,
): string {
  return JSON.stringify(
    CreateCustomerNotFoundDocumentation$outboundSchema.parse(
      createCustomerNotFoundDocumentation,
    ),
  );
}

export function createCustomerNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateCustomerNotFoundLinks$inboundSchema: z.ZodType<
  CreateCustomerNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateCustomerNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateCustomerNotFoundLinks$Outbound = {
  documentation: CreateCustomerNotFoundDocumentation$Outbound;
};

/** @internal */
export const CreateCustomerNotFoundLinks$outboundSchema: z.ZodType<
  CreateCustomerNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CreateCustomerNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateCustomerNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerNotFoundLinks$ {
  /** @deprecated use `CreateCustomerNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerNotFoundLinks$inboundSchema;
  /** @deprecated use `CreateCustomerNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerNotFoundLinks$outboundSchema;
  /** @deprecated use `CreateCustomerNotFoundLinks$Outbound` instead. */
  export type Outbound = CreateCustomerNotFoundLinks$Outbound;
}

export function createCustomerNotFoundLinksToJSON(
  createCustomerNotFoundLinks: CreateCustomerNotFoundLinks,
): string {
  return JSON.stringify(
    CreateCustomerNotFoundLinks$outboundSchema.parse(
      createCustomerNotFoundLinks,
    ),
  );
}

export function createCustomerNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CreateCustomerMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateCustomerMode
> = z.nativeEnum(CreateCustomerMode);

/** @internal */
export const CreateCustomerMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateCustomerMode
> = CreateCustomerMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerMode$ {
  /** @deprecated use `CreateCustomerMode$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerMode$inboundSchema;
  /** @deprecated use `CreateCustomerMode$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerMode$outboundSchema;
}

/** @internal */
export const CreateCustomerLocaleResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateCustomerLocaleResponse
> = z.nativeEnum(CreateCustomerLocaleResponse);

/** @internal */
export const CreateCustomerLocaleResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateCustomerLocaleResponse
> = CreateCustomerLocaleResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerLocaleResponse$ {
  /** @deprecated use `CreateCustomerLocaleResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerLocaleResponse$inboundSchema;
  /** @deprecated use `CreateCustomerLocaleResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerLocaleResponse$outboundSchema;
}

/** @internal */
export const CreateCustomerMetadataResponse$inboundSchema: z.ZodType<
  CreateCustomerMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateCustomerMetadataResponse$Outbound = {};

/** @internal */
export const CreateCustomerMetadataResponse$outboundSchema: z.ZodType<
  CreateCustomerMetadataResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerMetadataResponse$ {
  /** @deprecated use `CreateCustomerMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerMetadataResponse$inboundSchema;
  /** @deprecated use `CreateCustomerMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerMetadataResponse$outboundSchema;
  /** @deprecated use `CreateCustomerMetadataResponse$Outbound` instead. */
  export type Outbound = CreateCustomerMetadataResponse$Outbound;
}

export function createCustomerMetadataResponseToJSON(
  createCustomerMetadataResponse: CreateCustomerMetadataResponse,
): string {
  return JSON.stringify(
    CreateCustomerMetadataResponse$outboundSchema.parse(
      createCustomerMetadataResponse,
    ),
  );
}

export function createCustomerMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerMetadataResponse' from JSON`,
  );
}

/** @internal */
export const CreateCustomerMetadataResponseUnion$inboundSchema: z.ZodType<
  CreateCustomerMetadataResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCustomerMetadataResponse$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateCustomerMetadataResponseUnion$Outbound =
  | CreateCustomerMetadataResponse$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateCustomerMetadataResponseUnion$outboundSchema: z.ZodType<
  CreateCustomerMetadataResponseUnion$Outbound,
  z.ZodTypeDef,
  CreateCustomerMetadataResponseUnion
> = z.union([
  z.lazy(() => CreateCustomerMetadataResponse$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerMetadataResponseUnion$ {
  /** @deprecated use `CreateCustomerMetadataResponseUnion$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerMetadataResponseUnion$inboundSchema;
  /** @deprecated use `CreateCustomerMetadataResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerMetadataResponseUnion$outboundSchema;
  /** @deprecated use `CreateCustomerMetadataResponseUnion$Outbound` instead. */
  export type Outbound = CreateCustomerMetadataResponseUnion$Outbound;
}

export function createCustomerMetadataResponseUnionToJSON(
  createCustomerMetadataResponseUnion: CreateCustomerMetadataResponseUnion,
): string {
  return JSON.stringify(
    CreateCustomerMetadataResponseUnion$outboundSchema.parse(
      createCustomerMetadataResponseUnion,
    ),
  );
}

export function createCustomerMetadataResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerMetadataResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerMetadataResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerMetadataResponseUnion' from JSON`,
  );
}

/** @internal */
export const CreateCustomerSelf$inboundSchema: z.ZodType<
  CreateCustomerSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCustomerSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCustomerSelf$outboundSchema: z.ZodType<
  CreateCustomerSelf$Outbound,
  z.ZodTypeDef,
  CreateCustomerSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerSelf$ {
  /** @deprecated use `CreateCustomerSelf$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerSelf$inboundSchema;
  /** @deprecated use `CreateCustomerSelf$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerSelf$outboundSchema;
  /** @deprecated use `CreateCustomerSelf$Outbound` instead. */
  export type Outbound = CreateCustomerSelf$Outbound;
}

export function createCustomerSelfToJSON(
  createCustomerSelf: CreateCustomerSelf,
): string {
  return JSON.stringify(
    CreateCustomerSelf$outboundSchema.parse(createCustomerSelf),
  );
}

export function createCustomerSelfFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerSelf' from JSON`,
  );
}

/** @internal */
export const CreateCustomerDashboard$inboundSchema: z.ZodType<
  CreateCustomerDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCustomerDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCustomerDashboard$outboundSchema: z.ZodType<
  CreateCustomerDashboard$Outbound,
  z.ZodTypeDef,
  CreateCustomerDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerDashboard$ {
  /** @deprecated use `CreateCustomerDashboard$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerDashboard$inboundSchema;
  /** @deprecated use `CreateCustomerDashboard$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerDashboard$outboundSchema;
  /** @deprecated use `CreateCustomerDashboard$Outbound` instead. */
  export type Outbound = CreateCustomerDashboard$Outbound;
}

export function createCustomerDashboardToJSON(
  createCustomerDashboard: CreateCustomerDashboard,
): string {
  return JSON.stringify(
    CreateCustomerDashboard$outboundSchema.parse(createCustomerDashboard),
  );
}

export function createCustomerDashboardFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerDashboard' from JSON`,
  );
}

/** @internal */
export const CreateCustomerPayments$inboundSchema: z.ZodType<
  CreateCustomerPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type CreateCustomerPayments$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CreateCustomerPayments$outboundSchema: z.ZodType<
  CreateCustomerPayments$Outbound,
  z.ZodTypeDef,
  CreateCustomerPayments
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerPayments$ {
  /** @deprecated use `CreateCustomerPayments$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerPayments$inboundSchema;
  /** @deprecated use `CreateCustomerPayments$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerPayments$outboundSchema;
  /** @deprecated use `CreateCustomerPayments$Outbound` instead. */
  export type Outbound = CreateCustomerPayments$Outbound;
}

export function createCustomerPaymentsToJSON(
  createCustomerPayments: CreateCustomerPayments,
): string {
  return JSON.stringify(
    CreateCustomerPayments$outboundSchema.parse(createCustomerPayments),
  );
}

export function createCustomerPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerPayments' from JSON`,
  );
}

/** @internal */
export const CreateCustomerMandates$inboundSchema: z.ZodType<
  CreateCustomerMandates,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type CreateCustomerMandates$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CreateCustomerMandates$outboundSchema: z.ZodType<
  CreateCustomerMandates$Outbound,
  z.ZodTypeDef,
  CreateCustomerMandates
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerMandates$ {
  /** @deprecated use `CreateCustomerMandates$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerMandates$inboundSchema;
  /** @deprecated use `CreateCustomerMandates$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerMandates$outboundSchema;
  /** @deprecated use `CreateCustomerMandates$Outbound` instead. */
  export type Outbound = CreateCustomerMandates$Outbound;
}

export function createCustomerMandatesToJSON(
  createCustomerMandates: CreateCustomerMandates,
): string {
  return JSON.stringify(
    CreateCustomerMandates$outboundSchema.parse(createCustomerMandates),
  );
}

export function createCustomerMandatesFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerMandates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerMandates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerMandates' from JSON`,
  );
}

/** @internal */
export const CreateCustomerSubscriptions$inboundSchema: z.ZodType<
  CreateCustomerSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type CreateCustomerSubscriptions$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CreateCustomerSubscriptions$outboundSchema: z.ZodType<
  CreateCustomerSubscriptions$Outbound,
  z.ZodTypeDef,
  CreateCustomerSubscriptions
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerSubscriptions$ {
  /** @deprecated use `CreateCustomerSubscriptions$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerSubscriptions$inboundSchema;
  /** @deprecated use `CreateCustomerSubscriptions$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerSubscriptions$outboundSchema;
  /** @deprecated use `CreateCustomerSubscriptions$Outbound` instead. */
  export type Outbound = CreateCustomerSubscriptions$Outbound;
}

export function createCustomerSubscriptionsToJSON(
  createCustomerSubscriptions: CreateCustomerSubscriptions,
): string {
  return JSON.stringify(
    CreateCustomerSubscriptions$outboundSchema.parse(
      createCustomerSubscriptions,
    ),
  );
}

export function createCustomerSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerSubscriptions' from JSON`,
  );
}

/** @internal */
export const CreateCustomerDocumentation$inboundSchema: z.ZodType<
  CreateCustomerDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCustomerDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCustomerDocumentation$outboundSchema: z.ZodType<
  CreateCustomerDocumentation$Outbound,
  z.ZodTypeDef,
  CreateCustomerDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerDocumentation$ {
  /** @deprecated use `CreateCustomerDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerDocumentation$inboundSchema;
  /** @deprecated use `CreateCustomerDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerDocumentation$outboundSchema;
  /** @deprecated use `CreateCustomerDocumentation$Outbound` instead. */
  export type Outbound = CreateCustomerDocumentation$Outbound;
}

export function createCustomerDocumentationToJSON(
  createCustomerDocumentation: CreateCustomerDocumentation,
): string {
  return JSON.stringify(
    CreateCustomerDocumentation$outboundSchema.parse(
      createCustomerDocumentation,
    ),
  );
}

export function createCustomerDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateCustomerLinks$inboundSchema: z.ZodType<
  CreateCustomerLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CreateCustomerSelf$inboundSchema),
  dashboard: z.lazy(() => CreateCustomerDashboard$inboundSchema),
  payments: z.nullable(z.lazy(() => CreateCustomerPayments$inboundSchema))
    .optional(),
  mandates: z.nullable(z.lazy(() => CreateCustomerMandates$inboundSchema))
    .optional(),
  subscriptions: z.nullable(
    z.lazy(() => CreateCustomerSubscriptions$inboundSchema),
  ).optional(),
  documentation: z.lazy(() => CreateCustomerDocumentation$inboundSchema),
});

/** @internal */
export type CreateCustomerLinks$Outbound = {
  self: CreateCustomerSelf$Outbound;
  dashboard: CreateCustomerDashboard$Outbound;
  payments?: CreateCustomerPayments$Outbound | null | undefined;
  mandates?: CreateCustomerMandates$Outbound | null | undefined;
  subscriptions?: CreateCustomerSubscriptions$Outbound | null | undefined;
  documentation: CreateCustomerDocumentation$Outbound;
};

/** @internal */
export const CreateCustomerLinks$outboundSchema: z.ZodType<
  CreateCustomerLinks$Outbound,
  z.ZodTypeDef,
  CreateCustomerLinks
> = z.object({
  self: z.lazy(() => CreateCustomerSelf$outboundSchema),
  dashboard: z.lazy(() => CreateCustomerDashboard$outboundSchema),
  payments: z.nullable(z.lazy(() => CreateCustomerPayments$outboundSchema))
    .optional(),
  mandates: z.nullable(z.lazy(() => CreateCustomerMandates$outboundSchema))
    .optional(),
  subscriptions: z.nullable(
    z.lazy(() => CreateCustomerSubscriptions$outboundSchema),
  ).optional(),
  documentation: z.lazy(() => CreateCustomerDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerLinks$ {
  /** @deprecated use `CreateCustomerLinks$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerLinks$inboundSchema;
  /** @deprecated use `CreateCustomerLinks$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerLinks$outboundSchema;
  /** @deprecated use `CreateCustomerLinks$Outbound` instead. */
  export type Outbound = CreateCustomerLinks$Outbound;
}

export function createCustomerLinksToJSON(
  createCustomerLinks: CreateCustomerLinks,
): string {
  return JSON.stringify(
    CreateCustomerLinks$outboundSchema.parse(createCustomerLinks),
  );
}

export function createCustomerLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerLinks' from JSON`,
  );
}

/** @internal */
export const CreateCustomerResponse$inboundSchema: z.ZodType<
  CreateCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("customer"),
  id: z.string(),
  mode: CreateCustomerMode$inboundSchema,
  name: z.nullable(z.string()),
  email: z.nullable(z.string()),
  locale: z.nullable(CreateCustomerLocaleResponse$inboundSchema),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCustomerMetadataResponse$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ),
  createdAt: z.string(),
  _links: z.lazy(() => CreateCustomerLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  name: string | null;
  email: string | null;
  locale: string | null;
  metadata:
    | CreateCustomerMetadataResponse$Outbound
    | string
    | Array<string>
    | null;
  createdAt: string;
  _links: CreateCustomerLinks$Outbound;
};

/** @internal */
export const CreateCustomerResponse$outboundSchema: z.ZodType<
  CreateCustomerResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerResponse
> = z.object({
  resource: z.string().default("customer"),
  id: z.string(),
  mode: CreateCustomerMode$outboundSchema,
  name: z.nullable(z.string()),
  email: z.nullable(z.string()),
  locale: z.nullable(CreateCustomerLocaleResponse$outboundSchema),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCustomerMetadataResponse$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ),
  createdAt: z.string(),
  links: z.lazy(() => CreateCustomerLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerResponse$ {
  /** @deprecated use `CreateCustomerResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerResponse$inboundSchema;
  /** @deprecated use `CreateCustomerResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerResponse$outboundSchema;
  /** @deprecated use `CreateCustomerResponse$Outbound` instead. */
  export type Outbound = CreateCustomerResponse$Outbound;
}

export function createCustomerResponseToJSON(
  createCustomerResponse: CreateCustomerResponse,
): string {
  return JSON.stringify(
    CreateCustomerResponse$outboundSchema.parse(createCustomerResponse),
  );
}

export function createCustomerResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerResponse' from JSON`,
  );
}
