/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestApplePayPaymentSessionRequestBody = {
  /**
   * The validationUrl you got from the
   *
   * @remarks
   * [ApplePayValidateMerchant event](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayvalidatemerchantevent).
   *
   * A list of all
   * [valid host names](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server)
   * for merchant validation is available. You should white list these in your application and reject any
   * `validationUrl`s that have a host name not in the list.
   */
  validationUrl: string;
  /**
   * The domain of your web shop, that is visible in the browser's location bar. For example
   *
   * @remarks
   * `pay.myshop.com`.
   */
  domain: string;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
   * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
   * required.
   */
  profileId?: string | undefined;
};

export type RequestApplePayPaymentSessionRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: RequestApplePayPaymentSessionRequestBody | undefined;
};

/** @internal */
export const RequestApplePayPaymentSessionRequestBody$inboundSchema: z.ZodType<
  RequestApplePayPaymentSessionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  validationUrl: z.string(),
  domain: z.string(),
  profileId: z.string().optional(),
});

/** @internal */
export type RequestApplePayPaymentSessionRequestBody$Outbound = {
  validationUrl: string;
  domain: string;
  profileId?: string | undefined;
};

/** @internal */
export const RequestApplePayPaymentSessionRequestBody$outboundSchema: z.ZodType<
  RequestApplePayPaymentSessionRequestBody$Outbound,
  z.ZodTypeDef,
  RequestApplePayPaymentSessionRequestBody
> = z.object({
  validationUrl: z.string(),
  domain: z.string(),
  profileId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestApplePayPaymentSessionRequestBody$ {
  /** @deprecated use `RequestApplePayPaymentSessionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestApplePayPaymentSessionRequestBody$inboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestApplePayPaymentSessionRequestBody$outboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionRequestBody$Outbound` instead. */
  export type Outbound = RequestApplePayPaymentSessionRequestBody$Outbound;
}

export function requestApplePayPaymentSessionRequestBodyToJSON(
  requestApplePayPaymentSessionRequestBody:
    RequestApplePayPaymentSessionRequestBody,
): string {
  return JSON.stringify(
    RequestApplePayPaymentSessionRequestBody$outboundSchema.parse(
      requestApplePayPaymentSessionRequestBody,
    ),
  );
}

export function requestApplePayPaymentSessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestApplePayPaymentSessionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestApplePayPaymentSessionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestApplePayPaymentSessionRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestApplePayPaymentSessionRequest$inboundSchema: z.ZodType<
  RequestApplePayPaymentSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() =>
    RequestApplePayPaymentSessionRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type RequestApplePayPaymentSessionRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  RequestBody?: RequestApplePayPaymentSessionRequestBody$Outbound | undefined;
};

/** @internal */
export const RequestApplePayPaymentSessionRequest$outboundSchema: z.ZodType<
  RequestApplePayPaymentSessionRequest$Outbound,
  z.ZodTypeDef,
  RequestApplePayPaymentSessionRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() =>
    RequestApplePayPaymentSessionRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestApplePayPaymentSessionRequest$ {
  /** @deprecated use `RequestApplePayPaymentSessionRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestApplePayPaymentSessionRequest$inboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestApplePayPaymentSessionRequest$outboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionRequest$Outbound` instead. */
  export type Outbound = RequestApplePayPaymentSessionRequest$Outbound;
}

export function requestApplePayPaymentSessionRequestToJSON(
  requestApplePayPaymentSessionRequest: RequestApplePayPaymentSessionRequest,
): string {
  return JSON.stringify(
    RequestApplePayPaymentSessionRequest$outboundSchema.parse(
      requestApplePayPaymentSessionRequest,
    ),
  );
}

export function requestApplePayPaymentSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestApplePayPaymentSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RequestApplePayPaymentSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestApplePayPaymentSessionRequest' from JSON`,
  );
}
