/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestApplePayPaymentSessionRequest = {
  /**
   * The validationUrl you got from the
   *
   * @remarks
   * [ApplePayValidateMerchant event](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayvalidatemerchantevent).
   *
   * A list of all
   * [valid host names](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server)
   * for merchant validation is available. You should white list these in your application and reject any
   * `validationUrl`s that have a host name not in the list.
   */
  validationUrl: string;
  /**
   * The domain of your web shop, that is visible in the browser's location bar. For example
   *
   * @remarks
   * `pay.myshop.com`.
   */
  domain: string;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in
   * the creation request. For organization-level credentials such as OAuth access tokens however, the
   * `profileId` parameter is required.
   */
  profileId?: string | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type RequestApplePayPaymentSessionDocumentation = {
  href: string;
  type: string;
};

export type RequestApplePayPaymentSessionLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: RequestApplePayPaymentSessionDocumentation;
};

/** @internal */
export const RequestApplePayPaymentSessionRequest$inboundSchema: z.ZodType<
  RequestApplePayPaymentSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  validationUrl: z.string(),
  domain: z.string(),
  profileId: z.nullable(z.string()).optional(),
});

/** @internal */
export type RequestApplePayPaymentSessionRequest$Outbound = {
  validationUrl: string;
  domain: string;
  profileId?: string | null | undefined;
};

/** @internal */
export const RequestApplePayPaymentSessionRequest$outboundSchema: z.ZodType<
  RequestApplePayPaymentSessionRequest$Outbound,
  z.ZodTypeDef,
  RequestApplePayPaymentSessionRequest
> = z.object({
  validationUrl: z.string(),
  domain: z.string(),
  profileId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestApplePayPaymentSessionRequest$ {
  /** @deprecated use `RequestApplePayPaymentSessionRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestApplePayPaymentSessionRequest$inboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestApplePayPaymentSessionRequest$outboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionRequest$Outbound` instead. */
  export type Outbound = RequestApplePayPaymentSessionRequest$Outbound;
}

export function requestApplePayPaymentSessionRequestToJSON(
  requestApplePayPaymentSessionRequest: RequestApplePayPaymentSessionRequest,
): string {
  return JSON.stringify(
    RequestApplePayPaymentSessionRequest$outboundSchema.parse(
      requestApplePayPaymentSessionRequest,
    ),
  );
}

export function requestApplePayPaymentSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestApplePayPaymentSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RequestApplePayPaymentSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestApplePayPaymentSessionRequest' from JSON`,
  );
}

/** @internal */
export const RequestApplePayPaymentSessionDocumentation$inboundSchema:
  z.ZodType<RequestApplePayPaymentSessionDocumentation, z.ZodTypeDef, unknown> =
    z.object({
      href: z.string(),
      type: z.string(),
    });

/** @internal */
export type RequestApplePayPaymentSessionDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const RequestApplePayPaymentSessionDocumentation$outboundSchema:
  z.ZodType<
    RequestApplePayPaymentSessionDocumentation$Outbound,
    z.ZodTypeDef,
    RequestApplePayPaymentSessionDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestApplePayPaymentSessionDocumentation$ {
  /** @deprecated use `RequestApplePayPaymentSessionDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    RequestApplePayPaymentSessionDocumentation$inboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    RequestApplePayPaymentSessionDocumentation$outboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionDocumentation$Outbound` instead. */
  export type Outbound = RequestApplePayPaymentSessionDocumentation$Outbound;
}

export function requestApplePayPaymentSessionDocumentationToJSON(
  requestApplePayPaymentSessionDocumentation:
    RequestApplePayPaymentSessionDocumentation,
): string {
  return JSON.stringify(
    RequestApplePayPaymentSessionDocumentation$outboundSchema.parse(
      requestApplePayPaymentSessionDocumentation,
    ),
  );
}

export function requestApplePayPaymentSessionDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestApplePayPaymentSessionDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestApplePayPaymentSessionDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestApplePayPaymentSessionDocumentation' from JSON`,
  );
}

/** @internal */
export const RequestApplePayPaymentSessionLinks$inboundSchema: z.ZodType<
  RequestApplePayPaymentSessionLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    RequestApplePayPaymentSessionDocumentation$inboundSchema
  ),
});

/** @internal */
export type RequestApplePayPaymentSessionLinks$Outbound = {
  documentation: RequestApplePayPaymentSessionDocumentation$Outbound;
};

/** @internal */
export const RequestApplePayPaymentSessionLinks$outboundSchema: z.ZodType<
  RequestApplePayPaymentSessionLinks$Outbound,
  z.ZodTypeDef,
  RequestApplePayPaymentSessionLinks
> = z.object({
  documentation: z.lazy(() =>
    RequestApplePayPaymentSessionDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestApplePayPaymentSessionLinks$ {
  /** @deprecated use `RequestApplePayPaymentSessionLinks$inboundSchema` instead. */
  export const inboundSchema = RequestApplePayPaymentSessionLinks$inboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionLinks$outboundSchema` instead. */
  export const outboundSchema =
    RequestApplePayPaymentSessionLinks$outboundSchema;
  /** @deprecated use `RequestApplePayPaymentSessionLinks$Outbound` instead. */
  export type Outbound = RequestApplePayPaymentSessionLinks$Outbound;
}

export function requestApplePayPaymentSessionLinksToJSON(
  requestApplePayPaymentSessionLinks: RequestApplePayPaymentSessionLinks,
): string {
  return JSON.stringify(
    RequestApplePayPaymentSessionLinks$outboundSchema.parse(
      requestApplePayPaymentSessionLinks,
    ),
  );
}

export function requestApplePayPaymentSessionLinksFromJSON(
  jsonString: string,
): SafeParseResult<RequestApplePayPaymentSessionLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RequestApplePayPaymentSessionLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestApplePayPaymentSessionLinks' from JSON`,
  );
}
