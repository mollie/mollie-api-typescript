/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
 * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
 * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
 *
 * A status value that cannot be set but can be returned is `canceled`, for invoices which were
 * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
 *
 * Dependent parameters:
 *   - `paymentDetails` is required if invoice should be set directly to `paid`
 *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
 *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
 */
export const CreateSalesInvoiceStatusRequest = {
  Draft: "draft",
  Issued: "issued",
  Paid: "paid",
} as const;
/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
 * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
 * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
 *
 * A status value that cannot be set but can be returned is `canceled`, for invoices which were
 * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
 *
 * Dependent parameters:
 *   - `paymentDetails` is required if invoice should be set directly to `paid`
 *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
 *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
 */
export type CreateSalesInvoiceStatusRequest = ClosedEnum<
  typeof CreateSalesInvoiceStatusRequest
>;

/**
 * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
 */
export const VatSchemeRequest = {
  Standard: "standard",
  OneStopShop: "one-stop-shop",
} as const;
/**
 * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
 */
export type VatSchemeRequest = ClosedEnum<typeof VatSchemeRequest>;

/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export const VatModeRequest = {
  Exclusive: "exclusive",
  Inclusive: "inclusive",
} as const;
/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export type VatModeRequest = ClosedEnum<typeof VatModeRequest>;

/**
 * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateSalesInvoiceMetadataRequest = {};

/**
 * The payment term to be set on the invoice.
 */
export const CreateSalesInvoicePaymentTermRequest = {
  Sevendays: "7 days",
  Fourteendays: "14 days",
  Thirtydays: "30 days",
  FortyFivedays: "45 days",
  Sixtydays: "60 days",
  Ninetydays: "90 days",
  OneHundredAndTwentydays: "120 days",
} as const;
/**
 * The payment term to be set on the invoice.
 */
export type CreateSalesInvoicePaymentTermRequest = ClosedEnum<
  typeof CreateSalesInvoicePaymentTermRequest
>;

/**
 * The way through which the invoice is to be set to paid.
 */
export const CreateSalesInvoiceSourceRequest = {
  Manual: "manual",
  PaymentLink: "payment-link",
  Payment: "payment",
} as const;
/**
 * The way through which the invoice is to be set to paid.
 */
export type CreateSalesInvoiceSourceRequest = ClosedEnum<
  typeof CreateSalesInvoiceSourceRequest
>;

/**
 * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
 *
 * @remarks
 * provided details. Required for `paid` status.
 */
export type CreateSalesInvoicePaymentDetailsRequest = {
  /**
   * The way through which the invoice is to be set to paid.
   */
  source: CreateSalesInvoiceSourceRequest;
  /**
   * A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
   *
   * @remarks
   * `payment`.
   */
  sourceReference?: string | null | undefined;
};

/**
 * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
 *
 * @remarks
 * recipient with the provided `subject` and `body`. Required for `issued` status.
 */
export type CreateSalesInvoiceEmailDetailsRequest = {
  /**
   * The subject of the email to be sent.
   */
  subject: string;
  /**
   * The body of the email to be sent. To add newline characters, you can use `\n`.
   */
  body: string;
};

/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export const CreateSalesInvoiceRecipientTypeRequest = {
  Consumer: "consumer",
  Business: "business",
} as const;
/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export type CreateSalesInvoiceRecipientTypeRequest = ClosedEnum<
  typeof CreateSalesInvoiceRecipientTypeRequest
>;

/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export const CreateSalesInvoiceLocaleRequest = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
} as const;
/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export type CreateSalesInvoiceLocaleRequest = ClosedEnum<
  typeof CreateSalesInvoiceLocaleRequest
>;

export type CreateSalesInvoiceRecipientRequest = {
  /**
   * The type of recipient, either `consumer` or `business`. This will determine what further fields are
   *
   * @remarks
   * required on the `recipient` object.
   */
  type: CreateSalesInvoiceRecipientTypeRequest;
  /**
   * The title of the `consumer` type recipient, for example Mr. or Mrs..
   */
  title?: string | null | undefined;
  /**
   * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  givenName?: string | null | undefined;
  /**
   * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  familyName?: string | null | undefined;
  /**
   * The trading name of the `business` type recipient.
   */
  organizationName?: string | null | undefined;
  /**
   * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
   *
   * @remarks
   * has to be provided.
   */
  organizationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
   *
   * @remarks
   * has to be provided.
   */
  vatNumber?: string | null | undefined;
  /**
   * The email address of the recipient.
   */
  email: string;
  /**
   * The phone number of the recipient.
   */
  phone?: string | null | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | null | undefined;
  /**
   * A postal code.
   */
  postalCode: string;
  /**
   * The recipient's city.
   */
  city: string;
  /**
   * The recipient's region.
   */
  region?: string | null | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
  /**
   * The locale for the recipient, to be used for translations in PDF generation and payment pages.
   */
  locale: CreateSalesInvoiceLocaleRequest;
};

/**
 * The price of a single item excluding VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
 *
 * The unit price can be zero in case of free items.
 */
export type CreateSalesInvoiceUnitPriceRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of discount.
 */
export const CreateSalesInvoiceLineTypeRequest = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type CreateSalesInvoiceLineTypeRequest = ClosedEnum<
  typeof CreateSalesInvoiceLineTypeRequest
>;

/**
 * The discount to be applied to the line item.
 */
export type CreateSalesInvoiceLineDiscountRequest = {
  /**
   * The type of discount.
   */
  type: CreateSalesInvoiceLineTypeRequest;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type CreateSalesInvoiceLineRequest = {
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The vat rate to be applied to this line item.
   */
  vatRate: string;
  /**
   * The price of a single item excluding VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: CreateSalesInvoiceUnitPriceRequest;
  /**
   * The discount to be applied to the line item.
   */
  discount?: CreateSalesInvoiceLineDiscountRequest | null | undefined;
};

/**
 * The type of discount.
 */
export const CreateSalesInvoiceDiscountTypeRequest = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type CreateSalesInvoiceDiscountTypeRequest = ClosedEnum<
  typeof CreateSalesInvoiceDiscountTypeRequest
>;

/**
 * The discount to be applied to the entire invoice, applied on top of any line item discounts.
 */
export type CreateSalesInvoiceDiscountRequest = {
  /**
   * The type of discount.
   */
  type: CreateSalesInvoiceDiscountTypeRequest;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type CreateSalesInvoiceRequest = {
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
   * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
   * required.
   */
  profileId?: string | null | undefined;
  /**
   * The status for the invoice to end up in.
   *
   * @remarks
   *
   * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
   * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
   * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
   *
   * A status value that cannot be set but can be returned is `canceled`, for invoices which were
   * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
   *
   * Dependent parameters:
   *   - `paymentDetails` is required if invoice should be set directly to `paid`
   *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
   *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
   */
  status: CreateSalesInvoiceStatusRequest;
  /**
   * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
   */
  vatScheme?: VatSchemeRequest | undefined;
  /**
   * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
   *
   * @remarks
   * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
   */
  vatMode?: VatModeRequest | undefined;
  /**
   * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
   */
  memo?: string | null | undefined;
  /**
   * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: CreateSalesInvoiceMetadataRequest | null | undefined;
  /**
   * The payment term to be set on the invoice.
   */
  paymentTerm?: CreateSalesInvoicePaymentTermRequest | null | undefined;
  /**
   * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
   *
   * @remarks
   * provided details. Required for `paid` status.
   */
  paymentDetails?: CreateSalesInvoicePaymentDetailsRequest | null | undefined;
  /**
   * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
   *
   * @remarks
   * recipient with the provided `subject` and `body`. Required for `issued` status.
   */
  emailDetails?: CreateSalesInvoiceEmailDetailsRequest | null | undefined;
  /**
   * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
   *
   * @remarks
   * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  customerId?: string | undefined;
  /**
   * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
   *
   * @remarks
   * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  mandateId?: string | undefined;
  /**
   * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
   *
   * @remarks
   * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
   * is not required to send a first invoice to a recipient.
   */
  recipientIdentifier: string;
  recipient: CreateSalesInvoiceRecipientRequest | null;
  /**
   * Provide the line items for the invoice. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the invoice.
   */
  lines: Array<CreateSalesInvoiceLineRequest> | null;
  /**
   * The discount to be applied to the entire invoice, applied on top of any line item discounts.
   */
  discount?: CreateSalesInvoiceDiscountRequest | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateSalesInvoiceUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type CreateSalesInvoiceUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateSalesInvoiceUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateSalesInvoiceNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CreateSalesInvoiceNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateSalesInvoiceNotFoundDocumentation;
};

/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
 * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
 * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
 *
 * A status value that cannot be set but can be returned is `canceled`, for invoices which were
 * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
 *
 * Dependent parameters:
 *   - `paymentDetails` is required if invoice should be set directly to `paid`
 *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
 *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
 */
export const CreateSalesInvoiceStatusResponse = {
  Draft: "draft",
  Issued: "issued",
  Paid: "paid",
} as const;
/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
 * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
 * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
 *
 * A status value that cannot be set but can be returned is `canceled`, for invoices which were
 * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
 *
 * Dependent parameters:
 *   - `paymentDetails` is required if invoice should be set directly to `paid`
 *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
 *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
 */
export type CreateSalesInvoiceStatusResponse = ClosedEnum<
  typeof CreateSalesInvoiceStatusResponse
>;

/**
 * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
 */
export const CreateSalesInvoiceVatSchemeResponse = {
  Standard: "standard",
  OneStopShop: "one-stop-shop",
} as const;
/**
 * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
 */
export type CreateSalesInvoiceVatSchemeResponse = ClosedEnum<
  typeof CreateSalesInvoiceVatSchemeResponse
>;

/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export const CreateSalesInvoiceVatModeResponse = {
  Exclusive: "exclusive",
  Inclusive: "inclusive",
} as const;
/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export type CreateSalesInvoiceVatModeResponse = ClosedEnum<
  typeof CreateSalesInvoiceVatModeResponse
>;

/**
 * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateSalesInvoiceMetadataResponse = {};

/**
 * The payment term to be set on the invoice.
 */
export const CreateSalesInvoicePaymentTermResponse = {
  Sevendays: "7 days",
  Fourteendays: "14 days",
  Thirtydays: "30 days",
  FortyFivedays: "45 days",
  Sixtydays: "60 days",
  Ninetydays: "90 days",
  OneHundredAndTwentydays: "120 days",
} as const;
/**
 * The payment term to be set on the invoice.
 */
export type CreateSalesInvoicePaymentTermResponse = ClosedEnum<
  typeof CreateSalesInvoicePaymentTermResponse
>;

/**
 * The way through which the invoice is to be set to paid.
 */
export const CreateSalesInvoiceSourceResponse = {
  Manual: "manual",
  PaymentLink: "payment-link",
  Payment: "payment",
} as const;
/**
 * The way through which the invoice is to be set to paid.
 */
export type CreateSalesInvoiceSourceResponse = ClosedEnum<
  typeof CreateSalesInvoiceSourceResponse
>;

/**
 * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
 *
 * @remarks
 * provided details. Required for `paid` status.
 */
export type CreateSalesInvoicePaymentDetailsResponse = {
  /**
   * The way through which the invoice is to be set to paid.
   */
  source: CreateSalesInvoiceSourceResponse;
  /**
   * A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
   *
   * @remarks
   * `payment`.
   */
  sourceReference?: string | null | undefined;
};

/**
 * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
 *
 * @remarks
 * recipient with the provided `subject` and `body`. Required for `issued` status.
 */
export type CreateSalesInvoiceEmailDetailsResponse = {
  /**
   * The subject of the email to be sent.
   */
  subject: string;
  /**
   * The body of the email to be sent. To add newline characters, you can use `\n`.
   */
  body: string;
};

/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export const CreateSalesInvoiceRecipientTypeResponse = {
  Consumer: "consumer",
  Business: "business",
} as const;
/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export type CreateSalesInvoiceRecipientTypeResponse = ClosedEnum<
  typeof CreateSalesInvoiceRecipientTypeResponse
>;

/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export const CreateSalesInvoiceLocaleResponse = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
} as const;
/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export type CreateSalesInvoiceLocaleResponse = ClosedEnum<
  typeof CreateSalesInvoiceLocaleResponse
>;

export type CreateSalesInvoiceRecipientResponse = {
  /**
   * The type of recipient, either `consumer` or `business`. This will determine what further fields are
   *
   * @remarks
   * required on the `recipient` object.
   */
  type: CreateSalesInvoiceRecipientTypeResponse;
  /**
   * The title of the `consumer` type recipient, for example Mr. or Mrs..
   */
  title?: string | null | undefined;
  /**
   * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  givenName?: string | null | undefined;
  /**
   * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  familyName?: string | null | undefined;
  /**
   * The trading name of the `business` type recipient.
   */
  organizationName?: string | null | undefined;
  /**
   * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
   *
   * @remarks
   * has to be provided.
   */
  organizationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
   *
   * @remarks
   * has to be provided.
   */
  vatNumber?: string | null | undefined;
  /**
   * The email address of the recipient.
   */
  email: string;
  /**
   * The phone number of the recipient.
   */
  phone?: string | null | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | null | undefined;
  /**
   * A postal code.
   */
  postalCode: string;
  /**
   * The recipient's city.
   */
  city: string;
  /**
   * The recipient's region.
   */
  region?: string | null | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
  /**
   * The locale for the recipient, to be used for translations in PDF generation and payment pages.
   */
  locale: CreateSalesInvoiceLocaleResponse;
};

/**
 * The price of a single item excluding VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
 *
 * The unit price can be zero in case of free items.
 */
export type CreateSalesInvoiceUnitPriceResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of discount.
 */
export const CreateSalesInvoiceLineTypeResponse = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type CreateSalesInvoiceLineTypeResponse = ClosedEnum<
  typeof CreateSalesInvoiceLineTypeResponse
>;

/**
 * The discount to be applied to the line item.
 */
export type CreateSalesInvoiceLineDiscountResponse = {
  /**
   * The type of discount.
   */
  type: CreateSalesInvoiceLineTypeResponse;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type CreateSalesInvoiceLineResponse = {
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The vat rate to be applied to this line item.
   */
  vatRate: string;
  /**
   * The price of a single item excluding VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: CreateSalesInvoiceUnitPriceResponse;
  /**
   * The discount to be applied to the line item.
   */
  discount?: CreateSalesInvoiceLineDiscountResponse | null | undefined;
};

/**
 * The type of discount.
 */
export const CreateSalesInvoiceDiscountTypeResponse = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type CreateSalesInvoiceDiscountTypeResponse = ClosedEnum<
  typeof CreateSalesInvoiceDiscountTypeResponse
>;

/**
 * The discount to be applied to the entire invoice, applied on top of any line item discounts.
 */
export type CreateSalesInvoiceDiscountResponse = {
  /**
   * The type of discount.
   */
  type: CreateSalesInvoiceDiscountTypeResponse;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

/**
 * The amount that is left to be paid.
 */
export type CreateSalesInvoiceAmountDue = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT before discounts.
 */
export type CreateSalesInvoiceSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount with VAT.
 */
export type CreateSalesInvoiceTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total VAT amount.
 */
export type CreateSalesInvoiceTotalVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT after discounts.
 */
export type CreateSalesInvoiceDiscountedSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateSalesInvoiceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make payment for the invoice. This is where you should redirect the
 *
 * @remarks
 * customer to unless the `status` is set to `paid`.
 */
export type CreateSalesInvoiceInvoicePayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL the invoice is available at, if generated.
 */
export type CreateSalesInvoicePdfLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateSalesInvoiceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateSalesInvoiceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: CreateSalesInvoiceSelf | undefined;
  /**
   * The URL your customer should visit to make payment for the invoice. This is where you should redirect the
   *
   * @remarks
   * customer to unless the `status` is set to `paid`.
   */
  invoicePayment?: CreateSalesInvoiceInvoicePayment | undefined;
  /**
   * The URL the invoice is available at, if generated.
   */
  pdfLink?: CreateSalesInvoicePdfLink | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: CreateSalesInvoiceDocumentation | undefined;
};

/**
 * The newly created invoice object. For a complete reference of the invoice object, refer to the
 *
 * @remarks
 * [Get sales invoice endpoint](get-sales-invoice) documentation.
 */
export type CreateSalesInvoiceResponse = {
  /**
   * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
   */
  id?: string | undefined;
  /**
   * When issued, an invoice number will be set for the sales invoice.
   */
  invoiceNumber?: string | null | undefined;
  /**
   * The status for the invoice to end up in.
   *
   * @remarks
   *
   * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
   * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
   * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
   *
   * A status value that cannot be set but can be returned is `canceled`, for invoices which were
   * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
   *
   * Dependent parameters:
   *   - `paymentDetails` is required if invoice should be set directly to `paid`
   *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
   *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
   */
  status?: CreateSalesInvoiceStatusResponse | undefined;
  /**
   * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
   */
  vatScheme?: CreateSalesInvoiceVatSchemeResponse | undefined;
  /**
   * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
   *
   * @remarks
   * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
   */
  vatMode?: CreateSalesInvoiceVatModeResponse | undefined;
  /**
   * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
   */
  memo?: string | null | undefined;
  /**
   * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: CreateSalesInvoiceMetadataResponse | null | undefined;
  /**
   * The payment term to be set on the invoice.
   */
  paymentTerm?: CreateSalesInvoicePaymentTermResponse | null | undefined;
  /**
   * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
   *
   * @remarks
   * provided details. Required for `paid` status.
   */
  paymentDetails?: CreateSalesInvoicePaymentDetailsResponse | null | undefined;
  /**
   * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
   *
   * @remarks
   * recipient with the provided `subject` and `body`. Required for `issued` status.
   */
  emailDetails?: CreateSalesInvoiceEmailDetailsResponse | null | undefined;
  /**
   * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
   *
   * @remarks
   * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  customerId?: string | undefined;
  /**
   * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
   *
   * @remarks
   * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  mandateId?: string | undefined;
  /**
   * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
   *
   * @remarks
   * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
   * is not required to send a first invoice to a recipient.
   */
  recipientIdentifier?: string | undefined;
  recipient?: CreateSalesInvoiceRecipientResponse | null | undefined;
  /**
   * Provide the line items for the invoice. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the invoice.
   */
  lines?: Array<CreateSalesInvoiceLineResponse> | null | undefined;
  /**
   * The discount to be applied to the entire invoice, applied on top of any line item discounts.
   */
  discount?: CreateSalesInvoiceDiscountResponse | null | undefined;
  /**
   * The amount that is left to be paid.
   */
  amountDue?: CreateSalesInvoiceAmountDue | undefined;
  /**
   * The total amount without VAT before discounts.
   */
  subtotalAmount?: CreateSalesInvoiceSubtotalAmount | undefined;
  /**
   * The total amount with VAT.
   */
  totalAmount?: CreateSalesInvoiceTotalAmount | undefined;
  /**
   * The total VAT amount.
   */
  totalVatAmount?: CreateSalesInvoiceTotalVatAmount | undefined;
  /**
   * The total amount without VAT after discounts.
   */
  discountedSubtotalAmount?:
    | CreateSalesInvoiceDiscountedSubtotalAmount
    | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  issuedAt?: string | null | undefined;
  /**
   * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  paidAt?: string | null | undefined;
  /**
   * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  dueAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CreateSalesInvoiceLinks | undefined;
};

/** @internal */
export const CreateSalesInvoiceStatusRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceStatusRequest
> = z.nativeEnum(CreateSalesInvoiceStatusRequest);

/** @internal */
export const CreateSalesInvoiceStatusRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceStatusRequest
> = CreateSalesInvoiceStatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceStatusRequest$ {
  /** @deprecated use `CreateSalesInvoiceStatusRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceStatusRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceStatusRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceStatusRequest$outboundSchema;
}

/** @internal */
export const VatSchemeRequest$inboundSchema: z.ZodNativeEnum<
  typeof VatSchemeRequest
> = z.nativeEnum(VatSchemeRequest);

/** @internal */
export const VatSchemeRequest$outboundSchema: z.ZodNativeEnum<
  typeof VatSchemeRequest
> = VatSchemeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VatSchemeRequest$ {
  /** @deprecated use `VatSchemeRequest$inboundSchema` instead. */
  export const inboundSchema = VatSchemeRequest$inboundSchema;
  /** @deprecated use `VatSchemeRequest$outboundSchema` instead. */
  export const outboundSchema = VatSchemeRequest$outboundSchema;
}

/** @internal */
export const VatModeRequest$inboundSchema: z.ZodNativeEnum<
  typeof VatModeRequest
> = z.nativeEnum(VatModeRequest);

/** @internal */
export const VatModeRequest$outboundSchema: z.ZodNativeEnum<
  typeof VatModeRequest
> = VatModeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VatModeRequest$ {
  /** @deprecated use `VatModeRequest$inboundSchema` instead. */
  export const inboundSchema = VatModeRequest$inboundSchema;
  /** @deprecated use `VatModeRequest$outboundSchema` instead. */
  export const outboundSchema = VatModeRequest$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceMetadataRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateSalesInvoiceMetadataRequest$Outbound = {};

/** @internal */
export const CreateSalesInvoiceMetadataRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceMetadataRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceMetadataRequest$ {
  /** @deprecated use `CreateSalesInvoiceMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceMetadataRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceMetadataRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceMetadataRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceMetadataRequest$Outbound;
}

export function createSalesInvoiceMetadataRequestToJSON(
  createSalesInvoiceMetadataRequest: CreateSalesInvoiceMetadataRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceMetadataRequest$outboundSchema.parse(
      createSalesInvoiceMetadataRequest,
    ),
  );
}

export function createSalesInvoiceMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceMetadataRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoicePaymentTermRequest$inboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoicePaymentTermRequest> = z.nativeEnum(
    CreateSalesInvoicePaymentTermRequest,
  );

/** @internal */
export const CreateSalesInvoicePaymentTermRequest$outboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoicePaymentTermRequest> =
    CreateSalesInvoicePaymentTermRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoicePaymentTermRequest$ {
  /** @deprecated use `CreateSalesInvoicePaymentTermRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoicePaymentTermRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoicePaymentTermRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoicePaymentTermRequest$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceSourceRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceSourceRequest
> = z.nativeEnum(CreateSalesInvoiceSourceRequest);

/** @internal */
export const CreateSalesInvoiceSourceRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceSourceRequest
> = CreateSalesInvoiceSourceRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceSourceRequest$ {
  /** @deprecated use `CreateSalesInvoiceSourceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceSourceRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceSourceRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceSourceRequest$outboundSchema;
}

/** @internal */
export const CreateSalesInvoicePaymentDetailsRequest$inboundSchema: z.ZodType<
  CreateSalesInvoicePaymentDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: CreateSalesInvoiceSourceRequest$inboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateSalesInvoicePaymentDetailsRequest$Outbound = {
  source: string;
  sourceReference?: string | null | undefined;
};

/** @internal */
export const CreateSalesInvoicePaymentDetailsRequest$outboundSchema: z.ZodType<
  CreateSalesInvoicePaymentDetailsRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoicePaymentDetailsRequest
> = z.object({
  source: CreateSalesInvoiceSourceRequest$outboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoicePaymentDetailsRequest$ {
  /** @deprecated use `CreateSalesInvoicePaymentDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoicePaymentDetailsRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoicePaymentDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoicePaymentDetailsRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoicePaymentDetailsRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoicePaymentDetailsRequest$Outbound;
}

export function createSalesInvoicePaymentDetailsRequestToJSON(
  createSalesInvoicePaymentDetailsRequest:
    CreateSalesInvoicePaymentDetailsRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoicePaymentDetailsRequest$outboundSchema.parse(
      createSalesInvoicePaymentDetailsRequest,
    ),
  );
}

export function createSalesInvoicePaymentDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSalesInvoicePaymentDetailsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoicePaymentDetailsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSalesInvoicePaymentDetailsRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceEmailDetailsRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceEmailDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/** @internal */
export type CreateSalesInvoiceEmailDetailsRequest$Outbound = {
  subject: string;
  body: string;
};

/** @internal */
export const CreateSalesInvoiceEmailDetailsRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceEmailDetailsRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceEmailDetailsRequest
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceEmailDetailsRequest$ {
  /** @deprecated use `CreateSalesInvoiceEmailDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceEmailDetailsRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceEmailDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceEmailDetailsRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceEmailDetailsRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceEmailDetailsRequest$Outbound;
}

export function createSalesInvoiceEmailDetailsRequestToJSON(
  createSalesInvoiceEmailDetailsRequest: CreateSalesInvoiceEmailDetailsRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceEmailDetailsRequest$outboundSchema.parse(
      createSalesInvoiceEmailDetailsRequest,
    ),
  );
}

export function createSalesInvoiceEmailDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceEmailDetailsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceEmailDetailsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceEmailDetailsRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceRecipientTypeRequest$inboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceRecipientTypeRequest> = z.nativeEnum(
    CreateSalesInvoiceRecipientTypeRequest,
  );

/** @internal */
export const CreateSalesInvoiceRecipientTypeRequest$outboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceRecipientTypeRequest> =
    CreateSalesInvoiceRecipientTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceRecipientTypeRequest$ {
  /** @deprecated use `CreateSalesInvoiceRecipientTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceRecipientTypeRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceRecipientTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceRecipientTypeRequest$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceLocaleRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLocaleRequest
> = z.nativeEnum(CreateSalesInvoiceLocaleRequest);

/** @internal */
export const CreateSalesInvoiceLocaleRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLocaleRequest
> = CreateSalesInvoiceLocaleRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLocaleRequest$ {
  /** @deprecated use `CreateSalesInvoiceLocaleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceLocaleRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLocaleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceLocaleRequest$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceRecipientRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceRecipientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateSalesInvoiceRecipientTypeRequest$inboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: CreateSalesInvoiceLocaleRequest$inboundSchema,
});

/** @internal */
export type CreateSalesInvoiceRecipientRequest$Outbound = {
  type: string;
  title?: string | null | undefined;
  givenName?: string | null | undefined;
  familyName?: string | null | undefined;
  organizationName?: string | null | undefined;
  organizationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
  email: string;
  phone?: string | null | undefined;
  streetAndNumber: string;
  streetAdditional?: string | null | undefined;
  postalCode: string;
  city: string;
  region?: string | null | undefined;
  country: string;
  locale: string;
};

/** @internal */
export const CreateSalesInvoiceRecipientRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceRecipientRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceRecipientRequest
> = z.object({
  type: CreateSalesInvoiceRecipientTypeRequest$outboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: CreateSalesInvoiceLocaleRequest$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceRecipientRequest$ {
  /** @deprecated use `CreateSalesInvoiceRecipientRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceRecipientRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceRecipientRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceRecipientRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceRecipientRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceRecipientRequest$Outbound;
}

export function createSalesInvoiceRecipientRequestToJSON(
  createSalesInvoiceRecipientRequest: CreateSalesInvoiceRecipientRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceRecipientRequest$outboundSchema.parse(
      createSalesInvoiceRecipientRequest,
    ),
  );
}

export function createSalesInvoiceRecipientRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceRecipientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceRecipientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceRecipientRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceUnitPriceRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceUnitPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceUnitPriceRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceUnitPriceRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceUnitPriceRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceUnitPriceRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceUnitPriceRequest$ {
  /** @deprecated use `CreateSalesInvoiceUnitPriceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceUnitPriceRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnitPriceRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceUnitPriceRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnitPriceRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceUnitPriceRequest$Outbound;
}

export function createSalesInvoiceUnitPriceRequestToJSON(
  createSalesInvoiceUnitPriceRequest: CreateSalesInvoiceUnitPriceRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceUnitPriceRequest$outboundSchema.parse(
      createSalesInvoiceUnitPriceRequest,
    ),
  );
}

export function createSalesInvoiceUnitPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceUnitPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceUnitPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceUnitPriceRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceLineTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLineTypeRequest
> = z.nativeEnum(CreateSalesInvoiceLineTypeRequest);

/** @internal */
export const CreateSalesInvoiceLineTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLineTypeRequest
> = CreateSalesInvoiceLineTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLineTypeRequest$ {
  /** @deprecated use `CreateSalesInvoiceLineTypeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceLineTypeRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceLineTypeRequest$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceLineDiscountRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceLineDiscountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateSalesInvoiceLineTypeRequest$inboundSchema,
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceLineDiscountRequest$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceLineDiscountRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceLineDiscountRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceLineDiscountRequest
> = z.object({
  type: CreateSalesInvoiceLineTypeRequest$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLineDiscountRequest$ {
  /** @deprecated use `CreateSalesInvoiceLineDiscountRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceLineDiscountRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineDiscountRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceLineDiscountRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineDiscountRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceLineDiscountRequest$Outbound;
}

export function createSalesInvoiceLineDiscountRequestToJSON(
  createSalesInvoiceLineDiscountRequest: CreateSalesInvoiceLineDiscountRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceLineDiscountRequest$outboundSchema.parse(
      createSalesInvoiceLineDiscountRequest,
    ),
  );
}

export function createSalesInvoiceLineDiscountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceLineDiscountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceLineDiscountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceLineDiscountRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceLineRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceLineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => CreateSalesInvoiceUnitPriceRequest$inboundSchema),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceLineDiscountRequest$inboundSchema),
  ).optional(),
});

/** @internal */
export type CreateSalesInvoiceLineRequest$Outbound = {
  description: string;
  quantity: number;
  vatRate: string;
  unitPrice: CreateSalesInvoiceUnitPriceRequest$Outbound;
  discount?: CreateSalesInvoiceLineDiscountRequest$Outbound | null | undefined;
};

/** @internal */
export const CreateSalesInvoiceLineRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceLineRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceLineRequest
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => CreateSalesInvoiceUnitPriceRequest$outboundSchema),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceLineDiscountRequest$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLineRequest$ {
  /** @deprecated use `CreateSalesInvoiceLineRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceLineRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceLineRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceLineRequest$Outbound;
}

export function createSalesInvoiceLineRequestToJSON(
  createSalesInvoiceLineRequest: CreateSalesInvoiceLineRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceLineRequest$outboundSchema.parse(
      createSalesInvoiceLineRequest,
    ),
  );
}

export function createSalesInvoiceLineRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceLineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceLineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceLineRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceDiscountTypeRequest$inboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceDiscountTypeRequest> = z.nativeEnum(
    CreateSalesInvoiceDiscountTypeRequest,
  );

/** @internal */
export const CreateSalesInvoiceDiscountTypeRequest$outboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceDiscountTypeRequest> =
    CreateSalesInvoiceDiscountTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceDiscountTypeRequest$ {
  /** @deprecated use `CreateSalesInvoiceDiscountTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceDiscountTypeRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceDiscountTypeRequest$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceDiscountRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceDiscountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateSalesInvoiceDiscountTypeRequest$inboundSchema,
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceDiscountRequest$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceDiscountRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceDiscountRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceDiscountRequest
> = z.object({
  type: CreateSalesInvoiceDiscountTypeRequest$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceDiscountRequest$ {
  /** @deprecated use `CreateSalesInvoiceDiscountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceDiscountRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceDiscountRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceDiscountRequest$Outbound;
}

export function createSalesInvoiceDiscountRequestToJSON(
  createSalesInvoiceDiscountRequest: CreateSalesInvoiceDiscountRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceDiscountRequest$outboundSchema.parse(
      createSalesInvoiceDiscountRequest,
    ),
  );
}

export function createSalesInvoiceDiscountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceDiscountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceDiscountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceDiscountRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceRequest$inboundSchema: z.ZodType<
  CreateSalesInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
  profileId: z.nullable(z.string()).optional(),
  status: CreateSalesInvoiceStatusRequest$inboundSchema,
  vatScheme: VatSchemeRequest$inboundSchema.default("standard"),
  vatMode: VatModeRequest$inboundSchema.default("exclusive"),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateSalesInvoiceMetadataRequest$inboundSchema),
  ).optional(),
  paymentTerm: z.nullable(
    CreateSalesInvoicePaymentTermRequest$inboundSchema.default("30 days"),
  ),
  paymentDetails: z.nullable(
    z.lazy(() => CreateSalesInvoicePaymentDetailsRequest$inboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => CreateSalesInvoiceEmailDetailsRequest$inboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string(),
  recipient: z.nullable(
    z.lazy(() => CreateSalesInvoiceRecipientRequest$inboundSchema),
  ),
  lines: z.nullable(
    z.array(z.lazy(() => CreateSalesInvoiceLineRequest$inboundSchema)),
  ),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceDiscountRequest$inboundSchema),
  ).optional(),
});

/** @internal */
export type CreateSalesInvoiceRequest$Outbound = {
  testmode?: boolean | null | undefined;
  profileId?: string | null | undefined;
  status: string;
  vatScheme: string;
  vatMode: string;
  memo?: string | null | undefined;
  metadata?: CreateSalesInvoiceMetadataRequest$Outbound | null | undefined;
  paymentTerm: string | null;
  paymentDetails?:
    | CreateSalesInvoicePaymentDetailsRequest$Outbound
    | null
    | undefined;
  emailDetails?:
    | CreateSalesInvoiceEmailDetailsRequest$Outbound
    | null
    | undefined;
  customerId?: string | undefined;
  mandateId?: string | undefined;
  recipientIdentifier: string;
  recipient: CreateSalesInvoiceRecipientRequest$Outbound | null;
  lines: Array<CreateSalesInvoiceLineRequest$Outbound> | null;
  discount?: CreateSalesInvoiceDiscountRequest$Outbound | null | undefined;
};

/** @internal */
export const CreateSalesInvoiceRequest$outboundSchema: z.ZodType<
  CreateSalesInvoiceRequest$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceRequest
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
  profileId: z.nullable(z.string()).optional(),
  status: CreateSalesInvoiceStatusRequest$outboundSchema,
  vatScheme: VatSchemeRequest$outboundSchema.default("standard"),
  vatMode: VatModeRequest$outboundSchema.default("exclusive"),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateSalesInvoiceMetadataRequest$outboundSchema),
  ).optional(),
  paymentTerm: z.nullable(
    CreateSalesInvoicePaymentTermRequest$outboundSchema.default("30 days"),
  ),
  paymentDetails: z.nullable(
    z.lazy(() => CreateSalesInvoicePaymentDetailsRequest$outboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => CreateSalesInvoiceEmailDetailsRequest$outboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string(),
  recipient: z.nullable(
    z.lazy(() => CreateSalesInvoiceRecipientRequest$outboundSchema),
  ),
  lines: z.nullable(
    z.array(z.lazy(() => CreateSalesInvoiceLineRequest$outboundSchema)),
  ),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceDiscountRequest$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceRequest$ {
  /** @deprecated use `CreateSalesInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceRequest$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceRequest$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceRequest$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceRequest$Outbound;
}

export function createSalesInvoiceRequestToJSON(
  createSalesInvoiceRequest: CreateSalesInvoiceRequest,
): string {
  return JSON.stringify(
    CreateSalesInvoiceRequest$outboundSchema.parse(createSalesInvoiceRequest),
  );
}

export function createSalesInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    CreateSalesInvoiceUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type CreateSalesInvoiceUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    CreateSalesInvoiceUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    CreateSalesInvoiceUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceUnprocessableEntityDocumentation$ {
  /** @deprecated use `CreateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    CreateSalesInvoiceUnprocessableEntityDocumentation$Outbound;
}

export function createSalesInvoiceUnprocessableEntityDocumentationToJSON(
  createSalesInvoiceUnprocessableEntityDocumentation:
    CreateSalesInvoiceUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    CreateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema.parse(
      createSalesInvoiceUnprocessableEntityDocumentation,
    ),
  );
}

export function createSalesInvoiceUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSalesInvoiceUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSalesInvoiceUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceUnprocessableEntityLinks$inboundSchema:
  z.ZodType<CreateSalesInvoiceUnprocessableEntityLinks, z.ZodTypeDef, unknown> =
    z.object({
      documentation: z.lazy(() =>
        CreateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema
      ),
    });

/** @internal */
export type CreateSalesInvoiceUnprocessableEntityLinks$Outbound = {
  documentation: CreateSalesInvoiceUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const CreateSalesInvoiceUnprocessableEntityLinks$outboundSchema:
  z.ZodType<
    CreateSalesInvoiceUnprocessableEntityLinks$Outbound,
    z.ZodTypeDef,
    CreateSalesInvoiceUnprocessableEntityLinks
  > = z.object({
    documentation: z.lazy(() =>
      CreateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceUnprocessableEntityLinks$ {
  /** @deprecated use `CreateSalesInvoiceUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceUnprocessableEntityLinks$Outbound;
}

export function createSalesInvoiceUnprocessableEntityLinksToJSON(
  createSalesInvoiceUnprocessableEntityLinks:
    CreateSalesInvoiceUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    CreateSalesInvoiceUnprocessableEntityLinks$outboundSchema.parse(
      createSalesInvoiceUnprocessableEntityLinks,
    ),
  );
}

export function createSalesInvoiceUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSalesInvoiceUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSalesInvoiceUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceNotFoundDocumentation$inboundSchema: z.ZodType<
  CreateSalesInvoiceNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateSalesInvoiceNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateSalesInvoiceNotFoundDocumentation$outboundSchema: z.ZodType<
  CreateSalesInvoiceNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceNotFoundDocumentation$ {
  /** @deprecated use `CreateSalesInvoiceNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceNotFoundDocumentation$Outbound;
}

export function createSalesInvoiceNotFoundDocumentationToJSON(
  createSalesInvoiceNotFoundDocumentation:
    CreateSalesInvoiceNotFoundDocumentation,
): string {
  return JSON.stringify(
    CreateSalesInvoiceNotFoundDocumentation$outboundSchema.parse(
      createSalesInvoiceNotFoundDocumentation,
    ),
  );
}

export function createSalesInvoiceNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSalesInvoiceNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSalesInvoiceNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceNotFoundLinks$inboundSchema: z.ZodType<
  CreateSalesInvoiceNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateSalesInvoiceNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateSalesInvoiceNotFoundLinks$Outbound = {
  documentation: CreateSalesInvoiceNotFoundDocumentation$Outbound;
};

/** @internal */
export const CreateSalesInvoiceNotFoundLinks$outboundSchema: z.ZodType<
  CreateSalesInvoiceNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateSalesInvoiceNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceNotFoundLinks$ {
  /** @deprecated use `CreateSalesInvoiceNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceNotFoundLinks$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceNotFoundLinks$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceNotFoundLinks$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceNotFoundLinks$Outbound;
}

export function createSalesInvoiceNotFoundLinksToJSON(
  createSalesInvoiceNotFoundLinks: CreateSalesInvoiceNotFoundLinks,
): string {
  return JSON.stringify(
    CreateSalesInvoiceNotFoundLinks$outboundSchema.parse(
      createSalesInvoiceNotFoundLinks,
    ),
  );
}

export function createSalesInvoiceNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceStatusResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceStatusResponse
> = z.nativeEnum(CreateSalesInvoiceStatusResponse);

/** @internal */
export const CreateSalesInvoiceStatusResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceStatusResponse
> = CreateSalesInvoiceStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceStatusResponse$ {
  /** @deprecated use `CreateSalesInvoiceStatusResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceStatusResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceStatusResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceStatusResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceVatSchemeResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceVatSchemeResponse
> = z.nativeEnum(CreateSalesInvoiceVatSchemeResponse);

/** @internal */
export const CreateSalesInvoiceVatSchemeResponse$outboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceVatSchemeResponse> =
    CreateSalesInvoiceVatSchemeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceVatSchemeResponse$ {
  /** @deprecated use `CreateSalesInvoiceVatSchemeResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceVatSchemeResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceVatSchemeResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceVatSchemeResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceVatModeResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceVatModeResponse
> = z.nativeEnum(CreateSalesInvoiceVatModeResponse);

/** @internal */
export const CreateSalesInvoiceVatModeResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceVatModeResponse
> = CreateSalesInvoiceVatModeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceVatModeResponse$ {
  /** @deprecated use `CreateSalesInvoiceVatModeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceVatModeResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceVatModeResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceVatModeResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceMetadataResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateSalesInvoiceMetadataResponse$Outbound = {};

/** @internal */
export const CreateSalesInvoiceMetadataResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceMetadataResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceMetadataResponse$ {
  /** @deprecated use `CreateSalesInvoiceMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceMetadataResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceMetadataResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceMetadataResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceMetadataResponse$Outbound;
}

export function createSalesInvoiceMetadataResponseToJSON(
  createSalesInvoiceMetadataResponse: CreateSalesInvoiceMetadataResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceMetadataResponse$outboundSchema.parse(
      createSalesInvoiceMetadataResponse,
    ),
  );
}

export function createSalesInvoiceMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceMetadataResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoicePaymentTermResponse$inboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoicePaymentTermResponse> = z.nativeEnum(
    CreateSalesInvoicePaymentTermResponse,
  );

/** @internal */
export const CreateSalesInvoicePaymentTermResponse$outboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoicePaymentTermResponse> =
    CreateSalesInvoicePaymentTermResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoicePaymentTermResponse$ {
  /** @deprecated use `CreateSalesInvoicePaymentTermResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoicePaymentTermResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoicePaymentTermResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoicePaymentTermResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceSourceResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceSourceResponse
> = z.nativeEnum(CreateSalesInvoiceSourceResponse);

/** @internal */
export const CreateSalesInvoiceSourceResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceSourceResponse
> = CreateSalesInvoiceSourceResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceSourceResponse$ {
  /** @deprecated use `CreateSalesInvoiceSourceResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceSourceResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceSourceResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceSourceResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoicePaymentDetailsResponse$inboundSchema: z.ZodType<
  CreateSalesInvoicePaymentDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: CreateSalesInvoiceSourceResponse$inboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateSalesInvoicePaymentDetailsResponse$Outbound = {
  source: string;
  sourceReference?: string | null | undefined;
};

/** @internal */
export const CreateSalesInvoicePaymentDetailsResponse$outboundSchema: z.ZodType<
  CreateSalesInvoicePaymentDetailsResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoicePaymentDetailsResponse
> = z.object({
  source: CreateSalesInvoiceSourceResponse$outboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoicePaymentDetailsResponse$ {
  /** @deprecated use `CreateSalesInvoicePaymentDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoicePaymentDetailsResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoicePaymentDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoicePaymentDetailsResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoicePaymentDetailsResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoicePaymentDetailsResponse$Outbound;
}

export function createSalesInvoicePaymentDetailsResponseToJSON(
  createSalesInvoicePaymentDetailsResponse:
    CreateSalesInvoicePaymentDetailsResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoicePaymentDetailsResponse$outboundSchema.parse(
      createSalesInvoicePaymentDetailsResponse,
    ),
  );
}

export function createSalesInvoicePaymentDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSalesInvoicePaymentDetailsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoicePaymentDetailsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSalesInvoicePaymentDetailsResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceEmailDetailsResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceEmailDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/** @internal */
export type CreateSalesInvoiceEmailDetailsResponse$Outbound = {
  subject: string;
  body: string;
};

/** @internal */
export const CreateSalesInvoiceEmailDetailsResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceEmailDetailsResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceEmailDetailsResponse
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceEmailDetailsResponse$ {
  /** @deprecated use `CreateSalesInvoiceEmailDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceEmailDetailsResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceEmailDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceEmailDetailsResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceEmailDetailsResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceEmailDetailsResponse$Outbound;
}

export function createSalesInvoiceEmailDetailsResponseToJSON(
  createSalesInvoiceEmailDetailsResponse:
    CreateSalesInvoiceEmailDetailsResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceEmailDetailsResponse$outboundSchema.parse(
      createSalesInvoiceEmailDetailsResponse,
    ),
  );
}

export function createSalesInvoiceEmailDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceEmailDetailsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceEmailDetailsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceEmailDetailsResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceRecipientTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceRecipientTypeResponse> = z
    .nativeEnum(CreateSalesInvoiceRecipientTypeResponse);

/** @internal */
export const CreateSalesInvoiceRecipientTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceRecipientTypeResponse> =
    CreateSalesInvoiceRecipientTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceRecipientTypeResponse$ {
  /** @deprecated use `CreateSalesInvoiceRecipientTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceRecipientTypeResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceRecipientTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceRecipientTypeResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceLocaleResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLocaleResponse
> = z.nativeEnum(CreateSalesInvoiceLocaleResponse);

/** @internal */
export const CreateSalesInvoiceLocaleResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLocaleResponse
> = CreateSalesInvoiceLocaleResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLocaleResponse$ {
  /** @deprecated use `CreateSalesInvoiceLocaleResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceLocaleResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLocaleResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceLocaleResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceRecipientResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceRecipientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateSalesInvoiceRecipientTypeResponse$inboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: CreateSalesInvoiceLocaleResponse$inboundSchema,
});

/** @internal */
export type CreateSalesInvoiceRecipientResponse$Outbound = {
  type: string;
  title?: string | null | undefined;
  givenName?: string | null | undefined;
  familyName?: string | null | undefined;
  organizationName?: string | null | undefined;
  organizationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
  email: string;
  phone?: string | null | undefined;
  streetAndNumber: string;
  streetAdditional?: string | null | undefined;
  postalCode: string;
  city: string;
  region?: string | null | undefined;
  country: string;
  locale: string;
};

/** @internal */
export const CreateSalesInvoiceRecipientResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceRecipientResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceRecipientResponse
> = z.object({
  type: CreateSalesInvoiceRecipientTypeResponse$outboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: CreateSalesInvoiceLocaleResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceRecipientResponse$ {
  /** @deprecated use `CreateSalesInvoiceRecipientResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceRecipientResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceRecipientResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceRecipientResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceRecipientResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceRecipientResponse$Outbound;
}

export function createSalesInvoiceRecipientResponseToJSON(
  createSalesInvoiceRecipientResponse: CreateSalesInvoiceRecipientResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceRecipientResponse$outboundSchema.parse(
      createSalesInvoiceRecipientResponse,
    ),
  );
}

export function createSalesInvoiceRecipientResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceRecipientResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceRecipientResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceRecipientResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceUnitPriceResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceUnitPriceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceUnitPriceResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceUnitPriceResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceUnitPriceResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceUnitPriceResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceUnitPriceResponse$ {
  /** @deprecated use `CreateSalesInvoiceUnitPriceResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceUnitPriceResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnitPriceResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceUnitPriceResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceUnitPriceResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceUnitPriceResponse$Outbound;
}

export function createSalesInvoiceUnitPriceResponseToJSON(
  createSalesInvoiceUnitPriceResponse: CreateSalesInvoiceUnitPriceResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceUnitPriceResponse$outboundSchema.parse(
      createSalesInvoiceUnitPriceResponse,
    ),
  );
}

export function createSalesInvoiceUnitPriceResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceUnitPriceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceUnitPriceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceUnitPriceResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceLineTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLineTypeResponse
> = z.nativeEnum(CreateSalesInvoiceLineTypeResponse);

/** @internal */
export const CreateSalesInvoiceLineTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateSalesInvoiceLineTypeResponse
> = CreateSalesInvoiceLineTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLineTypeResponse$ {
  /** @deprecated use `CreateSalesInvoiceLineTypeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceLineTypeResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceLineTypeResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceLineDiscountResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceLineDiscountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateSalesInvoiceLineTypeResponse$inboundSchema,
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceLineDiscountResponse$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceLineDiscountResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceLineDiscountResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceLineDiscountResponse
> = z.object({
  type: CreateSalesInvoiceLineTypeResponse$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLineDiscountResponse$ {
  /** @deprecated use `CreateSalesInvoiceLineDiscountResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceLineDiscountResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineDiscountResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceLineDiscountResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineDiscountResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceLineDiscountResponse$Outbound;
}

export function createSalesInvoiceLineDiscountResponseToJSON(
  createSalesInvoiceLineDiscountResponse:
    CreateSalesInvoiceLineDiscountResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceLineDiscountResponse$outboundSchema.parse(
      createSalesInvoiceLineDiscountResponse,
    ),
  );
}

export function createSalesInvoiceLineDiscountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceLineDiscountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceLineDiscountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceLineDiscountResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceLineResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceLineResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => CreateSalesInvoiceUnitPriceResponse$inboundSchema),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceLineDiscountResponse$inboundSchema),
  ).optional(),
});

/** @internal */
export type CreateSalesInvoiceLineResponse$Outbound = {
  description: string;
  quantity: number;
  vatRate: string;
  unitPrice: CreateSalesInvoiceUnitPriceResponse$Outbound;
  discount?: CreateSalesInvoiceLineDiscountResponse$Outbound | null | undefined;
};

/** @internal */
export const CreateSalesInvoiceLineResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceLineResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceLineResponse
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => CreateSalesInvoiceUnitPriceResponse$outboundSchema),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceLineDiscountResponse$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLineResponse$ {
  /** @deprecated use `CreateSalesInvoiceLineResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceLineResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceLineResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceLineResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceLineResponse$Outbound;
}

export function createSalesInvoiceLineResponseToJSON(
  createSalesInvoiceLineResponse: CreateSalesInvoiceLineResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceLineResponse$outboundSchema.parse(
      createSalesInvoiceLineResponse,
    ),
  );
}

export function createSalesInvoiceLineResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceLineResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceLineResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceLineResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceDiscountTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceDiscountTypeResponse> = z.nativeEnum(
    CreateSalesInvoiceDiscountTypeResponse,
  );

/** @internal */
export const CreateSalesInvoiceDiscountTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof CreateSalesInvoiceDiscountTypeResponse> =
    CreateSalesInvoiceDiscountTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceDiscountTypeResponse$ {
  /** @deprecated use `CreateSalesInvoiceDiscountTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceDiscountTypeResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceDiscountTypeResponse$outboundSchema;
}

/** @internal */
export const CreateSalesInvoiceDiscountResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceDiscountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateSalesInvoiceDiscountTypeResponse$inboundSchema,
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceDiscountResponse$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceDiscountResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceDiscountResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceDiscountResponse
> = z.object({
  type: CreateSalesInvoiceDiscountTypeResponse$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceDiscountResponse$ {
  /** @deprecated use `CreateSalesInvoiceDiscountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceDiscountResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceDiscountResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceDiscountResponse$Outbound;
}

export function createSalesInvoiceDiscountResponseToJSON(
  createSalesInvoiceDiscountResponse: CreateSalesInvoiceDiscountResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceDiscountResponse$outboundSchema.parse(
      createSalesInvoiceDiscountResponse,
    ),
  );
}

export function createSalesInvoiceDiscountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceDiscountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceDiscountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceDiscountResponse' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceAmountDue$inboundSchema: z.ZodType<
  CreateSalesInvoiceAmountDue,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceAmountDue$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceAmountDue$outboundSchema: z.ZodType<
  CreateSalesInvoiceAmountDue$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceAmountDue
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceAmountDue$ {
  /** @deprecated use `CreateSalesInvoiceAmountDue$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceAmountDue$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceAmountDue$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceAmountDue$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceAmountDue$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceAmountDue$Outbound;
}

export function createSalesInvoiceAmountDueToJSON(
  createSalesInvoiceAmountDue: CreateSalesInvoiceAmountDue,
): string {
  return JSON.stringify(
    CreateSalesInvoiceAmountDue$outboundSchema.parse(
      createSalesInvoiceAmountDue,
    ),
  );
}

export function createSalesInvoiceAmountDueFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceAmountDue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceAmountDue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceAmountDue' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceSubtotalAmount$inboundSchema: z.ZodType<
  CreateSalesInvoiceSubtotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceSubtotalAmount$outboundSchema: z.ZodType<
  CreateSalesInvoiceSubtotalAmount$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceSubtotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceSubtotalAmount$ {
  /** @deprecated use `CreateSalesInvoiceSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceSubtotalAmount$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceSubtotalAmount$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceSubtotalAmount$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceSubtotalAmount$Outbound;
}

export function createSalesInvoiceSubtotalAmountToJSON(
  createSalesInvoiceSubtotalAmount: CreateSalesInvoiceSubtotalAmount,
): string {
  return JSON.stringify(
    CreateSalesInvoiceSubtotalAmount$outboundSchema.parse(
      createSalesInvoiceSubtotalAmount,
    ),
  );
}

export function createSalesInvoiceSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceSubtotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceSubtotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceTotalAmount$inboundSchema: z.ZodType<
  CreateSalesInvoiceTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceTotalAmount$outboundSchema: z.ZodType<
  CreateSalesInvoiceTotalAmount$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceTotalAmount$ {
  /** @deprecated use `CreateSalesInvoiceTotalAmount$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceTotalAmount$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceTotalAmount$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceTotalAmount$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceTotalAmount$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceTotalAmount$Outbound;
}

export function createSalesInvoiceTotalAmountToJSON(
  createSalesInvoiceTotalAmount: CreateSalesInvoiceTotalAmount,
): string {
  return JSON.stringify(
    CreateSalesInvoiceTotalAmount$outboundSchema.parse(
      createSalesInvoiceTotalAmount,
    ),
  );
}

export function createSalesInvoiceTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceTotalAmount' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceTotalVatAmount$inboundSchema: z.ZodType<
  CreateSalesInvoiceTotalVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateSalesInvoiceTotalVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceTotalVatAmount$outboundSchema: z.ZodType<
  CreateSalesInvoiceTotalVatAmount$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceTotalVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceTotalVatAmount$ {
  /** @deprecated use `CreateSalesInvoiceTotalVatAmount$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceTotalVatAmount$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceTotalVatAmount$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceTotalVatAmount$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceTotalVatAmount$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceTotalVatAmount$Outbound;
}

export function createSalesInvoiceTotalVatAmountToJSON(
  createSalesInvoiceTotalVatAmount: CreateSalesInvoiceTotalVatAmount,
): string {
  return JSON.stringify(
    CreateSalesInvoiceTotalVatAmount$outboundSchema.parse(
      createSalesInvoiceTotalVatAmount,
    ),
  );
}

export function createSalesInvoiceTotalVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceTotalVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceTotalVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceTotalVatAmount' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceDiscountedSubtotalAmount$inboundSchema:
  z.ZodType<CreateSalesInvoiceDiscountedSubtotalAmount, z.ZodTypeDef, unknown> =
    z.object({
      currency: z.string(),
      value: z.string(),
    });

/** @internal */
export type CreateSalesInvoiceDiscountedSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateSalesInvoiceDiscountedSubtotalAmount$outboundSchema:
  z.ZodType<
    CreateSalesInvoiceDiscountedSubtotalAmount$Outbound,
    z.ZodTypeDef,
    CreateSalesInvoiceDiscountedSubtotalAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceDiscountedSubtotalAmount$ {
  /** @deprecated use `CreateSalesInvoiceDiscountedSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema =
    CreateSalesInvoiceDiscountedSubtotalAmount$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountedSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema =
    CreateSalesInvoiceDiscountedSubtotalAmount$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceDiscountedSubtotalAmount$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceDiscountedSubtotalAmount$Outbound;
}

export function createSalesInvoiceDiscountedSubtotalAmountToJSON(
  createSalesInvoiceDiscountedSubtotalAmount:
    CreateSalesInvoiceDiscountedSubtotalAmount,
): string {
  return JSON.stringify(
    CreateSalesInvoiceDiscountedSubtotalAmount$outboundSchema.parse(
      createSalesInvoiceDiscountedSubtotalAmount,
    ),
  );
}

export function createSalesInvoiceDiscountedSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSalesInvoiceDiscountedSubtotalAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSalesInvoiceDiscountedSubtotalAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSalesInvoiceDiscountedSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceSelf$inboundSchema: z.ZodType<
  CreateSalesInvoiceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateSalesInvoiceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateSalesInvoiceSelf$outboundSchema: z.ZodType<
  CreateSalesInvoiceSelf$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceSelf$ {
  /** @deprecated use `CreateSalesInvoiceSelf$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceSelf$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceSelf$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceSelf$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceSelf$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceSelf$Outbound;
}

export function createSalesInvoiceSelfToJSON(
  createSalesInvoiceSelf: CreateSalesInvoiceSelf,
): string {
  return JSON.stringify(
    CreateSalesInvoiceSelf$outboundSchema.parse(createSalesInvoiceSelf),
  );
}

export function createSalesInvoiceSelfFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceSelf' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceInvoicePayment$inboundSchema: z.ZodType<
  CreateSalesInvoiceInvoicePayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateSalesInvoiceInvoicePayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateSalesInvoiceInvoicePayment$outboundSchema: z.ZodType<
  CreateSalesInvoiceInvoicePayment$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceInvoicePayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceInvoicePayment$ {
  /** @deprecated use `CreateSalesInvoiceInvoicePayment$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceInvoicePayment$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceInvoicePayment$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceInvoicePayment$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceInvoicePayment$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceInvoicePayment$Outbound;
}

export function createSalesInvoiceInvoicePaymentToJSON(
  createSalesInvoiceInvoicePayment: CreateSalesInvoiceInvoicePayment,
): string {
  return JSON.stringify(
    CreateSalesInvoiceInvoicePayment$outboundSchema.parse(
      createSalesInvoiceInvoicePayment,
    ),
  );
}

export function createSalesInvoiceInvoicePaymentFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceInvoicePayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceInvoicePayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceInvoicePayment' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoicePdfLink$inboundSchema: z.ZodType<
  CreateSalesInvoicePdfLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateSalesInvoicePdfLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateSalesInvoicePdfLink$outboundSchema: z.ZodType<
  CreateSalesInvoicePdfLink$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoicePdfLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoicePdfLink$ {
  /** @deprecated use `CreateSalesInvoicePdfLink$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoicePdfLink$inboundSchema;
  /** @deprecated use `CreateSalesInvoicePdfLink$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoicePdfLink$outboundSchema;
  /** @deprecated use `CreateSalesInvoicePdfLink$Outbound` instead. */
  export type Outbound = CreateSalesInvoicePdfLink$Outbound;
}

export function createSalesInvoicePdfLinkToJSON(
  createSalesInvoicePdfLink: CreateSalesInvoicePdfLink,
): string {
  return JSON.stringify(
    CreateSalesInvoicePdfLink$outboundSchema.parse(createSalesInvoicePdfLink),
  );
}

export function createSalesInvoicePdfLinkFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoicePdfLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoicePdfLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoicePdfLink' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceDocumentation$inboundSchema: z.ZodType<
  CreateSalesInvoiceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateSalesInvoiceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateSalesInvoiceDocumentation$outboundSchema: z.ZodType<
  CreateSalesInvoiceDocumentation$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceDocumentation$ {
  /** @deprecated use `CreateSalesInvoiceDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceDocumentation$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceDocumentation$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceDocumentation$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceDocumentation$Outbound;
}

export function createSalesInvoiceDocumentationToJSON(
  createSalesInvoiceDocumentation: CreateSalesInvoiceDocumentation,
): string {
  return JSON.stringify(
    CreateSalesInvoiceDocumentation$outboundSchema.parse(
      createSalesInvoiceDocumentation,
    ),
  );
}

export function createSalesInvoiceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceLinks$inboundSchema: z.ZodType<
  CreateSalesInvoiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CreateSalesInvoiceSelf$inboundSchema).optional(),
  invoicePayment: z.lazy(() => CreateSalesInvoiceInvoicePayment$inboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => CreateSalesInvoicePdfLink$inboundSchema))
    .optional(),
  documentation: z.lazy(() => CreateSalesInvoiceDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateSalesInvoiceLinks$Outbound = {
  self?: CreateSalesInvoiceSelf$Outbound | undefined;
  invoicePayment?: CreateSalesInvoiceInvoicePayment$Outbound | undefined;
  pdfLink?: CreateSalesInvoicePdfLink$Outbound | null | undefined;
  documentation?: CreateSalesInvoiceDocumentation$Outbound | undefined;
};

/** @internal */
export const CreateSalesInvoiceLinks$outboundSchema: z.ZodType<
  CreateSalesInvoiceLinks$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceLinks
> = z.object({
  self: z.lazy(() => CreateSalesInvoiceSelf$outboundSchema).optional(),
  invoicePayment: z.lazy(() => CreateSalesInvoiceInvoicePayment$outboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => CreateSalesInvoicePdfLink$outboundSchema))
    .optional(),
  documentation: z.lazy(() => CreateSalesInvoiceDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceLinks$ {
  /** @deprecated use `CreateSalesInvoiceLinks$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceLinks$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceLinks$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceLinks$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceLinks$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceLinks$Outbound;
}

export function createSalesInvoiceLinksToJSON(
  createSalesInvoiceLinks: CreateSalesInvoiceLinks,
): string {
  return JSON.stringify(
    CreateSalesInvoiceLinks$outboundSchema.parse(createSalesInvoiceLinks),
  );
}

export function createSalesInvoiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceLinks' from JSON`,
  );
}

/** @internal */
export const CreateSalesInvoiceResponse$inboundSchema: z.ZodType<
  CreateSalesInvoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("sales-invoice"),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: CreateSalesInvoiceStatusResponse$inboundSchema.optional(),
  vatScheme: CreateSalesInvoiceVatSchemeResponse$inboundSchema.default(
    "standard",
  ),
  vatMode: CreateSalesInvoiceVatModeResponse$inboundSchema.default("exclusive"),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateSalesInvoiceMetadataResponse$inboundSchema),
  ).optional(),
  paymentTerm: z.nullable(
    CreateSalesInvoicePaymentTermResponse$inboundSchema.default("30 days"),
  ),
  paymentDetails: z.nullable(
    z.lazy(() => CreateSalesInvoicePaymentDetailsResponse$inboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => CreateSalesInvoiceEmailDetailsResponse$inboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(
    z.lazy(() => CreateSalesInvoiceRecipientResponse$inboundSchema),
  ).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => CreateSalesInvoiceLineResponse$inboundSchema)),
  ).optional(),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceDiscountResponse$inboundSchema),
  ).optional(),
  amountDue: z.lazy(() => CreateSalesInvoiceAmountDue$inboundSchema).optional(),
  subtotalAmount: z.lazy(() => CreateSalesInvoiceSubtotalAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => CreateSalesInvoiceTotalAmount$inboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => CreateSalesInvoiceTotalVatAmount$inboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    CreateSalesInvoiceDiscountedSubtotalAmount$inboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => CreateSalesInvoiceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateSalesInvoiceResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  invoiceNumber?: string | null | undefined;
  status?: string | undefined;
  vatScheme: string;
  vatMode: string;
  memo?: string | null | undefined;
  metadata?: CreateSalesInvoiceMetadataResponse$Outbound | null | undefined;
  paymentTerm: string | null;
  paymentDetails?:
    | CreateSalesInvoicePaymentDetailsResponse$Outbound
    | null
    | undefined;
  emailDetails?:
    | CreateSalesInvoiceEmailDetailsResponse$Outbound
    | null
    | undefined;
  customerId?: string | undefined;
  mandateId?: string | undefined;
  recipientIdentifier?: string | undefined;
  recipient?: CreateSalesInvoiceRecipientResponse$Outbound | null | undefined;
  lines?: Array<CreateSalesInvoiceLineResponse$Outbound> | null | undefined;
  discount?: CreateSalesInvoiceDiscountResponse$Outbound | null | undefined;
  amountDue?: CreateSalesInvoiceAmountDue$Outbound | undefined;
  subtotalAmount?: CreateSalesInvoiceSubtotalAmount$Outbound | undefined;
  totalAmount?: CreateSalesInvoiceTotalAmount$Outbound | undefined;
  totalVatAmount?: CreateSalesInvoiceTotalVatAmount$Outbound | undefined;
  discountedSubtotalAmount?:
    | CreateSalesInvoiceDiscountedSubtotalAmount$Outbound
    | undefined;
  createdAt?: string | undefined;
  issuedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  dueAt?: string | null | undefined;
  _links?: CreateSalesInvoiceLinks$Outbound | undefined;
};

/** @internal */
export const CreateSalesInvoiceResponse$outboundSchema: z.ZodType<
  CreateSalesInvoiceResponse$Outbound,
  z.ZodTypeDef,
  CreateSalesInvoiceResponse
> = z.object({
  resource: z.string().default("sales-invoice"),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: CreateSalesInvoiceStatusResponse$outboundSchema.optional(),
  vatScheme: CreateSalesInvoiceVatSchemeResponse$outboundSchema.default(
    "standard",
  ),
  vatMode: CreateSalesInvoiceVatModeResponse$outboundSchema.default(
    "exclusive",
  ),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateSalesInvoiceMetadataResponse$outboundSchema),
  ).optional(),
  paymentTerm: z.nullable(
    CreateSalesInvoicePaymentTermResponse$outboundSchema.default("30 days"),
  ),
  paymentDetails: z.nullable(
    z.lazy(() => CreateSalesInvoicePaymentDetailsResponse$outboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => CreateSalesInvoiceEmailDetailsResponse$outboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(
    z.lazy(() => CreateSalesInvoiceRecipientResponse$outboundSchema),
  ).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => CreateSalesInvoiceLineResponse$outboundSchema)),
  ).optional(),
  discount: z.nullable(
    z.lazy(() => CreateSalesInvoiceDiscountResponse$outboundSchema),
  ).optional(),
  amountDue: z.lazy(() => CreateSalesInvoiceAmountDue$outboundSchema)
    .optional(),
  subtotalAmount: z.lazy(() => CreateSalesInvoiceSubtotalAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => CreateSalesInvoiceTotalAmount$outboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => CreateSalesInvoiceTotalVatAmount$outboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    CreateSalesInvoiceDiscountedSubtotalAmount$outboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => CreateSalesInvoiceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSalesInvoiceResponse$ {
  /** @deprecated use `CreateSalesInvoiceResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSalesInvoiceResponse$inboundSchema;
  /** @deprecated use `CreateSalesInvoiceResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSalesInvoiceResponse$outboundSchema;
  /** @deprecated use `CreateSalesInvoiceResponse$Outbound` instead. */
  export type Outbound = CreateSalesInvoiceResponse$Outbound;
}

export function createSalesInvoiceResponseToJSON(
  createSalesInvoiceResponse: CreateSalesInvoiceResponse,
): string {
  return JSON.stringify(
    CreateSalesInvoiceResponse$outboundSchema.parse(createSalesInvoiceResponse),
  );
}

export function createSalesInvoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSalesInvoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSalesInvoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSalesInvoiceResponse' from JSON`,
  );
}
