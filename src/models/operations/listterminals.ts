/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListTerminalsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.Sorting | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListTerminalsEmbedded = {
  /**
   * An array of terminal objects.
   */
  terminals?: Array<models.EntityTerminal> | undefined;
};

/**
 * A list of terminal objects.
 */
export type ListTerminalsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListTerminalsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListTerminalsRequest$inboundSchema: z.ZodType<
  ListTerminalsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: models.Sorting$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListTerminalsRequest$Outbound = {
  from?: string | undefined;
  limit?: number | null | undefined;
  sort?: string | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListTerminalsRequest$outboundSchema: z.ZodType<
  ListTerminalsRequest$Outbound,
  z.ZodTypeDef,
  ListTerminalsRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: models.Sorting$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsRequest$ {
  /** @deprecated use `ListTerminalsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsRequest$inboundSchema;
  /** @deprecated use `ListTerminalsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsRequest$outboundSchema;
  /** @deprecated use `ListTerminalsRequest$Outbound` instead. */
  export type Outbound = ListTerminalsRequest$Outbound;
}

export function listTerminalsRequestToJSON(
  listTerminalsRequest: ListTerminalsRequest,
): string {
  return JSON.stringify(
    ListTerminalsRequest$outboundSchema.parse(listTerminalsRequest),
  );
}

export function listTerminalsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsRequest' from JSON`,
  );
}

/** @internal */
export const ListTerminalsEmbedded$inboundSchema: z.ZodType<
  ListTerminalsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  terminals: z.array(models.EntityTerminal$inboundSchema).optional(),
});

/** @internal */
export type ListTerminalsEmbedded$Outbound = {
  terminals?: Array<models.EntityTerminal$Outbound> | undefined;
};

/** @internal */
export const ListTerminalsEmbedded$outboundSchema: z.ZodType<
  ListTerminalsEmbedded$Outbound,
  z.ZodTypeDef,
  ListTerminalsEmbedded
> = z.object({
  terminals: z.array(models.EntityTerminal$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsEmbedded$ {
  /** @deprecated use `ListTerminalsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsEmbedded$inboundSchema;
  /** @deprecated use `ListTerminalsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsEmbedded$outboundSchema;
  /** @deprecated use `ListTerminalsEmbedded$Outbound` instead. */
  export type Outbound = ListTerminalsEmbedded$Outbound;
}

export function listTerminalsEmbeddedToJSON(
  listTerminalsEmbedded: ListTerminalsEmbedded,
): string {
  return JSON.stringify(
    ListTerminalsEmbedded$outboundSchema.parse(listTerminalsEmbedded),
  );
}

export function listTerminalsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListTerminalsResponse$inboundSchema: z.ZodType<
  ListTerminalsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListTerminalsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListTerminalsResponse$Outbound = {
  count: number;
  _embedded: ListTerminalsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListTerminalsResponse$outboundSchema: z.ZodType<
  ListTerminalsResponse$Outbound,
  z.ZodTypeDef,
  ListTerminalsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListTerminalsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsResponse$ {
  /** @deprecated use `ListTerminalsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsResponse$inboundSchema;
  /** @deprecated use `ListTerminalsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsResponse$outboundSchema;
  /** @deprecated use `ListTerminalsResponse$Outbound` instead. */
  export type Outbound = ListTerminalsResponse$Outbound;
}

export function listTerminalsResponseToJSON(
  listTerminalsResponse: ListTerminalsResponse,
): string {
  return JSON.stringify(
    ListTerminalsResponse$outboundSchema.parse(listTerminalsResponse),
  );
}

export function listTerminalsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsResponse' from JSON`,
  );
}
