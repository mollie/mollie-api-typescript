/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export const ListTerminalsSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export type ListTerminalsSort = ClosedEnum<typeof ListTerminalsSort>;

export type ListTerminalsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: ListTerminalsSort | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListTerminalsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListTerminalsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListTerminalsBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const ListTerminalsMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type ListTerminalsMode = ClosedEnum<typeof ListTerminalsMode>;

/**
 * The status of the terminal.
 */
export const ListTerminalsStatus = {
  Pending: "pending",
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The status of the terminal.
 */
export type ListTerminalsStatus = ClosedEnum<typeof ListTerminalsStatus>;

/**
 * The brand of the terminal.
 */
export const ListTerminalsBrand = {
  Pax: "PAX",
} as const;
/**
 * The brand of the terminal.
 */
export type ListTerminalsBrand = ClosedEnum<typeof ListTerminalsBrand>;

/**
 * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
 */
export const ListTerminalsModel = {
  A35: "A35",
  A77: "A77",
  A920: "A920",
  A920Pro: "A920 Pro",
  Im30: "IM30",
} as const;
/**
 * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
 */
export type ListTerminalsModel = ClosedEnum<typeof ListTerminalsModel>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type TerminalSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type TerminalDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type TerminalLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: TerminalSelf;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: TerminalDocumentation;
};

export type ListTerminalsTerminal = {
  /**
   * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: ListTerminalsMode;
  /**
   * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the
   *
   * @remarks
   * description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it
   * may be visible on the device itself depending on the device.
   */
  description: string;
  /**
   * The status of the terminal.
   */
  status: ListTerminalsStatus;
  /**
   * The brand of the terminal.
   */
  brand: ListTerminalsBrand | null;
  /**
   * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
   */
  model: ListTerminalsModel | null;
  /**
   * The serial number of the terminal. The serial number is provided at terminal creation time.
   */
  serialNumber: string | null;
  /**
   * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a
   *
   * @remarks
   * specific currency, chosen during setup.
   */
  currency: string;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
   * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
   * required.
   */
  profileId: string;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  updatedAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: TerminalLinks;
};

export type ListTerminalsEmbedded = {
  /**
   * An array of terminal objects.
   */
  terminals?: Array<ListTerminalsTerminal> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListTerminalsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListTerminalsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListTerminalsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListTerminalsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListTerminalsLinks = {
  /**
   * The URL to the current set of items.
   */
  self: ListTerminalsSelf;
  /**
   * The previous set of items, if available.
   */
  previous: ListTerminalsPrevious | null;
  /**
   * The next set of items, if available.
   */
  next: ListTerminalsNext | null;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListTerminalsDocumentation;
};

/**
 * A list of terminal objects.
 */
export type ListTerminalsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListTerminalsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListTerminalsLinks | undefined;
};

/** @internal */
export const ListTerminalsSort$inboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsSort
> = z.nativeEnum(ListTerminalsSort);

/** @internal */
export const ListTerminalsSort$outboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsSort
> = ListTerminalsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsSort$ {
  /** @deprecated use `ListTerminalsSort$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsSort$inboundSchema;
  /** @deprecated use `ListTerminalsSort$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsSort$outboundSchema;
}

/** @internal */
export const ListTerminalsRequest$inboundSchema: z.ZodType<
  ListTerminalsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(ListTerminalsSort$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListTerminalsRequest$Outbound = {
  from?: string | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListTerminalsRequest$outboundSchema: z.ZodType<
  ListTerminalsRequest$Outbound,
  z.ZodTypeDef,
  ListTerminalsRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(ListTerminalsSort$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsRequest$ {
  /** @deprecated use `ListTerminalsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsRequest$inboundSchema;
  /** @deprecated use `ListTerminalsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsRequest$outboundSchema;
  /** @deprecated use `ListTerminalsRequest$Outbound` instead. */
  export type Outbound = ListTerminalsRequest$Outbound;
}

export function listTerminalsRequestToJSON(
  listTerminalsRequest: ListTerminalsRequest,
): string {
  return JSON.stringify(
    ListTerminalsRequest$outboundSchema.parse(listTerminalsRequest),
  );
}

export function listTerminalsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsRequest' from JSON`,
  );
}

/** @internal */
export const ListTerminalsBadRequestDocumentation$inboundSchema: z.ZodType<
  ListTerminalsBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListTerminalsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListTerminalsBadRequestDocumentation$outboundSchema: z.ZodType<
  ListTerminalsBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListTerminalsBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsBadRequestDocumentation$ {
  /** @deprecated use `ListTerminalsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListTerminalsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListTerminalsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListTerminalsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListTerminalsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListTerminalsBadRequestDocumentation$Outbound;
}

export function listTerminalsBadRequestDocumentationToJSON(
  listTerminalsBadRequestDocumentation: ListTerminalsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListTerminalsBadRequestDocumentation$outboundSchema.parse(
      listTerminalsBadRequestDocumentation,
    ),
  );
}

export function listTerminalsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListTerminalsBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListTerminalsBadRequestLinks$inboundSchema: z.ZodType<
  ListTerminalsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListTerminalsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListTerminalsBadRequestLinks$Outbound = {
  documentation: ListTerminalsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListTerminalsBadRequestLinks$outboundSchema: z.ZodType<
  ListTerminalsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListTerminalsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListTerminalsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsBadRequestLinks$ {
  /** @deprecated use `ListTerminalsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListTerminalsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListTerminalsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListTerminalsBadRequestLinks$Outbound;
}

export function listTerminalsBadRequestLinksToJSON(
  listTerminalsBadRequestLinks: ListTerminalsBadRequestLinks,
): string {
  return JSON.stringify(
    ListTerminalsBadRequestLinks$outboundSchema.parse(
      listTerminalsBadRequestLinks,
    ),
  );
}

export function listTerminalsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListTerminalsMode$inboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsMode
> = z.nativeEnum(ListTerminalsMode);

/** @internal */
export const ListTerminalsMode$outboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsMode
> = ListTerminalsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsMode$ {
  /** @deprecated use `ListTerminalsMode$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsMode$inboundSchema;
  /** @deprecated use `ListTerminalsMode$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsMode$outboundSchema;
}

/** @internal */
export const ListTerminalsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsStatus
> = z.nativeEnum(ListTerminalsStatus);

/** @internal */
export const ListTerminalsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsStatus
> = ListTerminalsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsStatus$ {
  /** @deprecated use `ListTerminalsStatus$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsStatus$inboundSchema;
  /** @deprecated use `ListTerminalsStatus$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsStatus$outboundSchema;
}

/** @internal */
export const ListTerminalsBrand$inboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsBrand
> = z.nativeEnum(ListTerminalsBrand);

/** @internal */
export const ListTerminalsBrand$outboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsBrand
> = ListTerminalsBrand$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsBrand$ {
  /** @deprecated use `ListTerminalsBrand$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsBrand$inboundSchema;
  /** @deprecated use `ListTerminalsBrand$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsBrand$outboundSchema;
}

/** @internal */
export const ListTerminalsModel$inboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsModel
> = z.nativeEnum(ListTerminalsModel);

/** @internal */
export const ListTerminalsModel$outboundSchema: z.ZodNativeEnum<
  typeof ListTerminalsModel
> = ListTerminalsModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsModel$ {
  /** @deprecated use `ListTerminalsModel$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsModel$inboundSchema;
  /** @deprecated use `ListTerminalsModel$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsModel$outboundSchema;
}

/** @internal */
export const TerminalSelf$inboundSchema: z.ZodType<
  TerminalSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type TerminalSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const TerminalSelf$outboundSchema: z.ZodType<
  TerminalSelf$Outbound,
  z.ZodTypeDef,
  TerminalSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TerminalSelf$ {
  /** @deprecated use `TerminalSelf$inboundSchema` instead. */
  export const inboundSchema = TerminalSelf$inboundSchema;
  /** @deprecated use `TerminalSelf$outboundSchema` instead. */
  export const outboundSchema = TerminalSelf$outboundSchema;
  /** @deprecated use `TerminalSelf$Outbound` instead. */
  export type Outbound = TerminalSelf$Outbound;
}

export function terminalSelfToJSON(terminalSelf: TerminalSelf): string {
  return JSON.stringify(TerminalSelf$outboundSchema.parse(terminalSelf));
}

export function terminalSelfFromJSON(
  jsonString: string,
): SafeParseResult<TerminalSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TerminalSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TerminalSelf' from JSON`,
  );
}

/** @internal */
export const TerminalDocumentation$inboundSchema: z.ZodType<
  TerminalDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type TerminalDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const TerminalDocumentation$outboundSchema: z.ZodType<
  TerminalDocumentation$Outbound,
  z.ZodTypeDef,
  TerminalDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TerminalDocumentation$ {
  /** @deprecated use `TerminalDocumentation$inboundSchema` instead. */
  export const inboundSchema = TerminalDocumentation$inboundSchema;
  /** @deprecated use `TerminalDocumentation$outboundSchema` instead. */
  export const outboundSchema = TerminalDocumentation$outboundSchema;
  /** @deprecated use `TerminalDocumentation$Outbound` instead. */
  export type Outbound = TerminalDocumentation$Outbound;
}

export function terminalDocumentationToJSON(
  terminalDocumentation: TerminalDocumentation,
): string {
  return JSON.stringify(
    TerminalDocumentation$outboundSchema.parse(terminalDocumentation),
  );
}

export function terminalDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<TerminalDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TerminalDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TerminalDocumentation' from JSON`,
  );
}

/** @internal */
export const TerminalLinks$inboundSchema: z.ZodType<
  TerminalLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => TerminalSelf$inboundSchema),
  documentation: z.lazy(() => TerminalDocumentation$inboundSchema),
});

/** @internal */
export type TerminalLinks$Outbound = {
  self: TerminalSelf$Outbound;
  documentation: TerminalDocumentation$Outbound;
};

/** @internal */
export const TerminalLinks$outboundSchema: z.ZodType<
  TerminalLinks$Outbound,
  z.ZodTypeDef,
  TerminalLinks
> = z.object({
  self: z.lazy(() => TerminalSelf$outboundSchema),
  documentation: z.lazy(() => TerminalDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TerminalLinks$ {
  /** @deprecated use `TerminalLinks$inboundSchema` instead. */
  export const inboundSchema = TerminalLinks$inboundSchema;
  /** @deprecated use `TerminalLinks$outboundSchema` instead. */
  export const outboundSchema = TerminalLinks$outboundSchema;
  /** @deprecated use `TerminalLinks$Outbound` instead. */
  export type Outbound = TerminalLinks$Outbound;
}

export function terminalLinksToJSON(terminalLinks: TerminalLinks): string {
  return JSON.stringify(TerminalLinks$outboundSchema.parse(terminalLinks));
}

export function terminalLinksFromJSON(
  jsonString: string,
): SafeParseResult<TerminalLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TerminalLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TerminalLinks' from JSON`,
  );
}

/** @internal */
export const ListTerminalsTerminal$inboundSchema: z.ZodType<
  ListTerminalsTerminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: ListTerminalsMode$inboundSchema,
  description: z.string(),
  status: ListTerminalsStatus$inboundSchema,
  brand: z.nullable(ListTerminalsBrand$inboundSchema),
  model: z.nullable(ListTerminalsModel$inboundSchema),
  serialNumber: z.nullable(z.string()),
  currency: z.string(),
  profileId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _links: z.lazy(() => TerminalLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListTerminalsTerminal$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  status: string;
  brand: string | null;
  model: string | null;
  serialNumber: string | null;
  currency: string;
  profileId: string;
  createdAt: string;
  updatedAt: string;
  _links: TerminalLinks$Outbound;
};

/** @internal */
export const ListTerminalsTerminal$outboundSchema: z.ZodType<
  ListTerminalsTerminal$Outbound,
  z.ZodTypeDef,
  ListTerminalsTerminal
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: ListTerminalsMode$outboundSchema,
  description: z.string(),
  status: ListTerminalsStatus$outboundSchema,
  brand: z.nullable(ListTerminalsBrand$outboundSchema),
  model: z.nullable(ListTerminalsModel$outboundSchema),
  serialNumber: z.nullable(z.string()),
  currency: z.string(),
  profileId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  links: z.lazy(() => TerminalLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsTerminal$ {
  /** @deprecated use `ListTerminalsTerminal$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsTerminal$inboundSchema;
  /** @deprecated use `ListTerminalsTerminal$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsTerminal$outboundSchema;
  /** @deprecated use `ListTerminalsTerminal$Outbound` instead. */
  export type Outbound = ListTerminalsTerminal$Outbound;
}

export function listTerminalsTerminalToJSON(
  listTerminalsTerminal: ListTerminalsTerminal,
): string {
  return JSON.stringify(
    ListTerminalsTerminal$outboundSchema.parse(listTerminalsTerminal),
  );
}

export function listTerminalsTerminalFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsTerminal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsTerminal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsTerminal' from JSON`,
  );
}

/** @internal */
export const ListTerminalsEmbedded$inboundSchema: z.ZodType<
  ListTerminalsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  terminals: z.array(z.lazy(() => ListTerminalsTerminal$inboundSchema))
    .optional(),
});

/** @internal */
export type ListTerminalsEmbedded$Outbound = {
  terminals?: Array<ListTerminalsTerminal$Outbound> | undefined;
};

/** @internal */
export const ListTerminalsEmbedded$outboundSchema: z.ZodType<
  ListTerminalsEmbedded$Outbound,
  z.ZodTypeDef,
  ListTerminalsEmbedded
> = z.object({
  terminals: z.array(z.lazy(() => ListTerminalsTerminal$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsEmbedded$ {
  /** @deprecated use `ListTerminalsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsEmbedded$inboundSchema;
  /** @deprecated use `ListTerminalsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsEmbedded$outboundSchema;
  /** @deprecated use `ListTerminalsEmbedded$Outbound` instead. */
  export type Outbound = ListTerminalsEmbedded$Outbound;
}

export function listTerminalsEmbeddedToJSON(
  listTerminalsEmbedded: ListTerminalsEmbedded,
): string {
  return JSON.stringify(
    ListTerminalsEmbedded$outboundSchema.parse(listTerminalsEmbedded),
  );
}

export function listTerminalsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListTerminalsSelf$inboundSchema: z.ZodType<
  ListTerminalsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListTerminalsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListTerminalsSelf$outboundSchema: z.ZodType<
  ListTerminalsSelf$Outbound,
  z.ZodTypeDef,
  ListTerminalsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsSelf$ {
  /** @deprecated use `ListTerminalsSelf$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsSelf$inboundSchema;
  /** @deprecated use `ListTerminalsSelf$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsSelf$outboundSchema;
  /** @deprecated use `ListTerminalsSelf$Outbound` instead. */
  export type Outbound = ListTerminalsSelf$Outbound;
}

export function listTerminalsSelfToJSON(
  listTerminalsSelf: ListTerminalsSelf,
): string {
  return JSON.stringify(
    ListTerminalsSelf$outboundSchema.parse(listTerminalsSelf),
  );
}

export function listTerminalsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsSelf' from JSON`,
  );
}

/** @internal */
export const ListTerminalsPrevious$inboundSchema: z.ZodType<
  ListTerminalsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListTerminalsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListTerminalsPrevious$outboundSchema: z.ZodType<
  ListTerminalsPrevious$Outbound,
  z.ZodTypeDef,
  ListTerminalsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsPrevious$ {
  /** @deprecated use `ListTerminalsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsPrevious$inboundSchema;
  /** @deprecated use `ListTerminalsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsPrevious$outboundSchema;
  /** @deprecated use `ListTerminalsPrevious$Outbound` instead. */
  export type Outbound = ListTerminalsPrevious$Outbound;
}

export function listTerminalsPreviousToJSON(
  listTerminalsPrevious: ListTerminalsPrevious,
): string {
  return JSON.stringify(
    ListTerminalsPrevious$outboundSchema.parse(listTerminalsPrevious),
  );
}

export function listTerminalsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsPrevious' from JSON`,
  );
}

/** @internal */
export const ListTerminalsNext$inboundSchema: z.ZodType<
  ListTerminalsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListTerminalsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListTerminalsNext$outboundSchema: z.ZodType<
  ListTerminalsNext$Outbound,
  z.ZodTypeDef,
  ListTerminalsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsNext$ {
  /** @deprecated use `ListTerminalsNext$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsNext$inboundSchema;
  /** @deprecated use `ListTerminalsNext$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsNext$outboundSchema;
  /** @deprecated use `ListTerminalsNext$Outbound` instead. */
  export type Outbound = ListTerminalsNext$Outbound;
}

export function listTerminalsNextToJSON(
  listTerminalsNext: ListTerminalsNext,
): string {
  return JSON.stringify(
    ListTerminalsNext$outboundSchema.parse(listTerminalsNext),
  );
}

export function listTerminalsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsNext' from JSON`,
  );
}

/** @internal */
export const ListTerminalsDocumentation$inboundSchema: z.ZodType<
  ListTerminalsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListTerminalsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListTerminalsDocumentation$outboundSchema: z.ZodType<
  ListTerminalsDocumentation$Outbound,
  z.ZodTypeDef,
  ListTerminalsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsDocumentation$ {
  /** @deprecated use `ListTerminalsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsDocumentation$inboundSchema;
  /** @deprecated use `ListTerminalsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsDocumentation$outboundSchema;
  /** @deprecated use `ListTerminalsDocumentation$Outbound` instead. */
  export type Outbound = ListTerminalsDocumentation$Outbound;
}

export function listTerminalsDocumentationToJSON(
  listTerminalsDocumentation: ListTerminalsDocumentation,
): string {
  return JSON.stringify(
    ListTerminalsDocumentation$outboundSchema.parse(listTerminalsDocumentation),
  );
}

export function listTerminalsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListTerminalsLinks$inboundSchema: z.ZodType<
  ListTerminalsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListTerminalsSelf$inboundSchema),
  previous: z.nullable(z.lazy(() => ListTerminalsPrevious$inboundSchema)),
  next: z.nullable(z.lazy(() => ListTerminalsNext$inboundSchema)),
  documentation: z.lazy(() => ListTerminalsDocumentation$inboundSchema),
});

/** @internal */
export type ListTerminalsLinks$Outbound = {
  self: ListTerminalsSelf$Outbound;
  previous: ListTerminalsPrevious$Outbound | null;
  next: ListTerminalsNext$Outbound | null;
  documentation: ListTerminalsDocumentation$Outbound;
};

/** @internal */
export const ListTerminalsLinks$outboundSchema: z.ZodType<
  ListTerminalsLinks$Outbound,
  z.ZodTypeDef,
  ListTerminalsLinks
> = z.object({
  self: z.lazy(() => ListTerminalsSelf$outboundSchema),
  previous: z.nullable(z.lazy(() => ListTerminalsPrevious$outboundSchema)),
  next: z.nullable(z.lazy(() => ListTerminalsNext$outboundSchema)),
  documentation: z.lazy(() => ListTerminalsDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsLinks$ {
  /** @deprecated use `ListTerminalsLinks$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsLinks$inboundSchema;
  /** @deprecated use `ListTerminalsLinks$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsLinks$outboundSchema;
  /** @deprecated use `ListTerminalsLinks$Outbound` instead. */
  export type Outbound = ListTerminalsLinks$Outbound;
}

export function listTerminalsLinksToJSON(
  listTerminalsLinks: ListTerminalsLinks,
): string {
  return JSON.stringify(
    ListTerminalsLinks$outboundSchema.parse(listTerminalsLinks),
  );
}

export function listTerminalsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsLinks' from JSON`,
  );
}

/** @internal */
export const ListTerminalsResponse$inboundSchema: z.ZodType<
  ListTerminalsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListTerminalsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListTerminalsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListTerminalsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListTerminalsEmbedded$Outbound | undefined;
  _links?: ListTerminalsLinks$Outbound | undefined;
};

/** @internal */
export const ListTerminalsResponse$outboundSchema: z.ZodType<
  ListTerminalsResponse$Outbound,
  z.ZodTypeDef,
  ListTerminalsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListTerminalsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListTerminalsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsResponse$ {
  /** @deprecated use `ListTerminalsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsResponse$inboundSchema;
  /** @deprecated use `ListTerminalsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsResponse$outboundSchema;
  /** @deprecated use `ListTerminalsResponse$Outbound` instead. */
  export type Outbound = ListTerminalsResponse$Outbound;
}

export function listTerminalsResponseToJSON(
  listTerminalsResponse: ListTerminalsResponse,
): string {
  return JSON.stringify(
    ListTerminalsResponse$outboundSchema.parse(listTerminalsResponse),
  );
}

export function listTerminalsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTerminalsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTerminalsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTerminalsResponse' from JSON`,
  );
}
