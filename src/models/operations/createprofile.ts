/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateProfileRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  entityProfile: models.EntityProfile;
};

/** @internal */
export const CreateProfileRequest$inboundSchema: z.ZodType<
  CreateProfileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  "entity-profile": models.EntityProfile$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "entity-profile": "entityProfile",
  });
});

/** @internal */
export type CreateProfileRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  "entity-profile": models.EntityProfile$Outbound;
};

/** @internal */
export const CreateProfileRequest$outboundSchema: z.ZodType<
  CreateProfileRequest$Outbound,
  z.ZodTypeDef,
  CreateProfileRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  entityProfile: models.EntityProfile$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    entityProfile: "entity-profile",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProfileRequest$ {
  /** @deprecated use `CreateProfileRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProfileRequest$inboundSchema;
  /** @deprecated use `CreateProfileRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProfileRequest$outboundSchema;
  /** @deprecated use `CreateProfileRequest$Outbound` instead. */
  export type Outbound = CreateProfileRequest$Outbound;
}

export function createProfileRequestToJSON(
  createProfileRequest: CreateProfileRequest,
): string {
  return JSON.stringify(
    CreateProfileRequest$outboundSchema.parse(createProfileRequest),
  );
}

export function createProfileRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProfileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProfileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProfileRequest' from JSON`,
  );
}
