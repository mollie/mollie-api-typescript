/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBalancesRequest = {
  /**
   * Optionally only return balances with the given currency. For example: `EUR`.
   */
  currency?: string | null | undefined;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListBalancesNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListBalancesNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListBalancesNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListBalancesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListBalancesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListBalancesBadRequestDocumentation;
};

/**
 * The balance's ISO 4217 currency code.
 */
export const ListBalancesCurrency = {
  Eur: "EUR",
  Gbp: "GBP",
  Chf: "CHF",
  Dkk: "DKK",
  Nok: "NOK",
  Pln: "PLN",
  Sek: "SEK",
  Usd: "USD",
  Czk: "CZK",
  Huf: "HUF",
  Aud: "AUD",
  Cad: "CAD",
} as const;
/**
 * The balance's ISO 4217 currency code.
 */
export type ListBalancesCurrency = ClosedEnum<typeof ListBalancesCurrency>;

/**
 * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
 */
export type ListBalancesTransferThreshold = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
 */
export type ListBalancesTransferDestination = {
  /**
   * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
   *
   * @remarks
   *
   * * `bank-account` â€” Transfer the balance amount to an external bank account
   *
   * Possible values: `bank-account`
   */
  type?: string | undefined;
  /**
   * The configured bank account number of the beneficiary the balance amount is to be transferred to.
   */
  bankAccount?: string | undefined;
  /**
   * The full name of the beneficiary the balance amount is to be transferred to.
   */
  beneficiaryName?: string | undefined;
};

/**
 * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
 */
export type ListBalancesAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
 */
export type ListBalancesPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type BalanceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type BalanceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type BalanceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: BalanceSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: BalanceDocumentation | undefined;
};

export type Balance = {
  /**
   * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this balance.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The balance's ISO 4217 currency code.
   */
  currency?: ListBalancesCurrency | undefined;
  /**
   * The description or name of the balance. Can be used to denote the purpose of the balance.
   */
  description?: string | undefined;
  /**
   * The status of the balance.
   *
   * @remarks
   *
   * Possible values: `active` `inactive`
   */
  status?: string | undefined;
  /**
   * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
   *
   * @remarks
   *
   * Settlements created during weekends or on bank holidays will take place on the next business day.
   *
   * Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
   */
  transferFrequency?: string | undefined;
  /**
   * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
   */
  transferThreshold?: ListBalancesTransferThreshold | undefined;
  /**
   * The transfer reference set to be included in all the transfers for this balance.
   */
  transferReference?: string | null | undefined;
  /**
   * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
   */
  transferDestination?: ListBalancesTransferDestination | null | undefined;
  /**
   * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
   */
  availableAmount?: ListBalancesAvailableAmount | undefined;
  /**
   * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
   */
  pendingAmount?: ListBalancesPendingAmount | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: BalanceLinks | undefined;
};

export type ListBalancesEmbedded = {
  /**
   * An array of balance objects. For a complete reference of the balance object, refer to the [Get balance endpoint](get-balance) documentation.
   */
  balances?: Array<Balance> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListBalancesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListBalancesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListBalancesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListBalancesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListBalancesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListBalancesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListBalancesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListBalancesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListBalancesDocumentation | undefined;
};

/**
 * A list of balance objects. For a complete reference of the balance object, refer to the [Get balance endpoint](get-balance) documentation.
 */
export type ListBalancesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListBalancesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListBalancesLinks | undefined;
};

/** @internal */
export const ListBalancesRequest$inboundSchema: z.ZodType<
  ListBalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.nullable(z.string()).optional(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListBalancesRequest$Outbound = {
  currency?: string | null | undefined;
  from?: string | undefined;
  limit: number | null;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListBalancesRequest$outboundSchema: z.ZodType<
  ListBalancesRequest$Outbound,
  z.ZodTypeDef,
  ListBalancesRequest
> = z.object({
  currency: z.nullable(z.string()).optional(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesRequest$ {
  /** @deprecated use `ListBalancesRequest$inboundSchema` instead. */
  export const inboundSchema = ListBalancesRequest$inboundSchema;
  /** @deprecated use `ListBalancesRequest$outboundSchema` instead. */
  export const outboundSchema = ListBalancesRequest$outboundSchema;
  /** @deprecated use `ListBalancesRequest$Outbound` instead. */
  export type Outbound = ListBalancesRequest$Outbound;
}

export function listBalancesRequestToJSON(
  listBalancesRequest: ListBalancesRequest,
): string {
  return JSON.stringify(
    ListBalancesRequest$outboundSchema.parse(listBalancesRequest),
  );
}

export function listBalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesRequest' from JSON`,
  );
}

/** @internal */
export const ListBalancesNotFoundDocumentation$inboundSchema: z.ZodType<
  ListBalancesNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalancesNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalancesNotFoundDocumentation$outboundSchema: z.ZodType<
  ListBalancesNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListBalancesNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesNotFoundDocumentation$ {
  /** @deprecated use `ListBalancesNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListBalancesNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListBalancesNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalancesNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListBalancesNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListBalancesNotFoundDocumentation$Outbound;
}

export function listBalancesNotFoundDocumentationToJSON(
  listBalancesNotFoundDocumentation: ListBalancesNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListBalancesNotFoundDocumentation$outboundSchema.parse(
      listBalancesNotFoundDocumentation,
    ),
  );
}

export function listBalancesNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalancesNotFoundLinks$inboundSchema: z.ZodType<
  ListBalancesNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListBalancesNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type ListBalancesNotFoundLinks$Outbound = {
  documentation: ListBalancesNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListBalancesNotFoundLinks$outboundSchema: z.ZodType<
  ListBalancesNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListBalancesNotFoundLinks
> = z.object({
  documentation: z.lazy(() => ListBalancesNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesNotFoundLinks$ {
  /** @deprecated use `ListBalancesNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListBalancesNotFoundLinks$inboundSchema;
  /** @deprecated use `ListBalancesNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListBalancesNotFoundLinks$outboundSchema;
  /** @deprecated use `ListBalancesNotFoundLinks$Outbound` instead. */
  export type Outbound = ListBalancesNotFoundLinks$Outbound;
}

export function listBalancesNotFoundLinksToJSON(
  listBalancesNotFoundLinks: ListBalancesNotFoundLinks,
): string {
  return JSON.stringify(
    ListBalancesNotFoundLinks$outboundSchema.parse(listBalancesNotFoundLinks),
  );
}

export function listBalancesNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListBalancesBadRequestDocumentation$inboundSchema: z.ZodType<
  ListBalancesBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalancesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalancesBadRequestDocumentation$outboundSchema: z.ZodType<
  ListBalancesBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListBalancesBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesBadRequestDocumentation$ {
  /** @deprecated use `ListBalancesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListBalancesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListBalancesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalancesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListBalancesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListBalancesBadRequestDocumentation$Outbound;
}

export function listBalancesBadRequestDocumentationToJSON(
  listBalancesBadRequestDocumentation: ListBalancesBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListBalancesBadRequestDocumentation$outboundSchema.parse(
      listBalancesBadRequestDocumentation,
    ),
  );
}

export function listBalancesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalancesBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalancesBadRequestLinks$inboundSchema: z.ZodType<
  ListBalancesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListBalancesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListBalancesBadRequestLinks$Outbound = {
  documentation: ListBalancesBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListBalancesBadRequestLinks$outboundSchema: z.ZodType<
  ListBalancesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListBalancesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListBalancesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesBadRequestLinks$ {
  /** @deprecated use `ListBalancesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListBalancesBadRequestLinks$inboundSchema;
  /** @deprecated use `ListBalancesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListBalancesBadRequestLinks$outboundSchema;
  /** @deprecated use `ListBalancesBadRequestLinks$Outbound` instead. */
  export type Outbound = ListBalancesBadRequestLinks$Outbound;
}

export function listBalancesBadRequestLinksToJSON(
  listBalancesBadRequestLinks: ListBalancesBadRequestLinks,
): string {
  return JSON.stringify(
    ListBalancesBadRequestLinks$outboundSchema.parse(
      listBalancesBadRequestLinks,
    ),
  );
}

export function listBalancesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListBalancesCurrency$inboundSchema: z.ZodNativeEnum<
  typeof ListBalancesCurrency
> = z.nativeEnum(ListBalancesCurrency);

/** @internal */
export const ListBalancesCurrency$outboundSchema: z.ZodNativeEnum<
  typeof ListBalancesCurrency
> = ListBalancesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesCurrency$ {
  /** @deprecated use `ListBalancesCurrency$inboundSchema` instead. */
  export const inboundSchema = ListBalancesCurrency$inboundSchema;
  /** @deprecated use `ListBalancesCurrency$outboundSchema` instead. */
  export const outboundSchema = ListBalancesCurrency$outboundSchema;
}

/** @internal */
export const ListBalancesTransferThreshold$inboundSchema: z.ZodType<
  ListBalancesTransferThreshold,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListBalancesTransferThreshold$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListBalancesTransferThreshold$outboundSchema: z.ZodType<
  ListBalancesTransferThreshold$Outbound,
  z.ZodTypeDef,
  ListBalancesTransferThreshold
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesTransferThreshold$ {
  /** @deprecated use `ListBalancesTransferThreshold$inboundSchema` instead. */
  export const inboundSchema = ListBalancesTransferThreshold$inboundSchema;
  /** @deprecated use `ListBalancesTransferThreshold$outboundSchema` instead. */
  export const outboundSchema = ListBalancesTransferThreshold$outboundSchema;
  /** @deprecated use `ListBalancesTransferThreshold$Outbound` instead. */
  export type Outbound = ListBalancesTransferThreshold$Outbound;
}

export function listBalancesTransferThresholdToJSON(
  listBalancesTransferThreshold: ListBalancesTransferThreshold,
): string {
  return JSON.stringify(
    ListBalancesTransferThreshold$outboundSchema.parse(
      listBalancesTransferThreshold,
    ),
  );
}

export function listBalancesTransferThresholdFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesTransferThreshold, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesTransferThreshold$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesTransferThreshold' from JSON`,
  );
}

/** @internal */
export const ListBalancesTransferDestination$inboundSchema: z.ZodType<
  ListBalancesTransferDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/** @internal */
export type ListBalancesTransferDestination$Outbound = {
  type?: string | undefined;
  bankAccount?: string | undefined;
  beneficiaryName?: string | undefined;
};

/** @internal */
export const ListBalancesTransferDestination$outboundSchema: z.ZodType<
  ListBalancesTransferDestination$Outbound,
  z.ZodTypeDef,
  ListBalancesTransferDestination
> = z.object({
  type: z.string().optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesTransferDestination$ {
  /** @deprecated use `ListBalancesTransferDestination$inboundSchema` instead. */
  export const inboundSchema = ListBalancesTransferDestination$inboundSchema;
  /** @deprecated use `ListBalancesTransferDestination$outboundSchema` instead. */
  export const outboundSchema = ListBalancesTransferDestination$outboundSchema;
  /** @deprecated use `ListBalancesTransferDestination$Outbound` instead. */
  export type Outbound = ListBalancesTransferDestination$Outbound;
}

export function listBalancesTransferDestinationToJSON(
  listBalancesTransferDestination: ListBalancesTransferDestination,
): string {
  return JSON.stringify(
    ListBalancesTransferDestination$outboundSchema.parse(
      listBalancesTransferDestination,
    ),
  );
}

export function listBalancesTransferDestinationFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesTransferDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesTransferDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesTransferDestination' from JSON`,
  );
}

/** @internal */
export const ListBalancesAvailableAmount$inboundSchema: z.ZodType<
  ListBalancesAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListBalancesAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListBalancesAvailableAmount$outboundSchema: z.ZodType<
  ListBalancesAvailableAmount$Outbound,
  z.ZodTypeDef,
  ListBalancesAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesAvailableAmount$ {
  /** @deprecated use `ListBalancesAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = ListBalancesAvailableAmount$inboundSchema;
  /** @deprecated use `ListBalancesAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = ListBalancesAvailableAmount$outboundSchema;
  /** @deprecated use `ListBalancesAvailableAmount$Outbound` instead. */
  export type Outbound = ListBalancesAvailableAmount$Outbound;
}

export function listBalancesAvailableAmountToJSON(
  listBalancesAvailableAmount: ListBalancesAvailableAmount,
): string {
  return JSON.stringify(
    ListBalancesAvailableAmount$outboundSchema.parse(
      listBalancesAvailableAmount,
    ),
  );
}

export function listBalancesAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesAvailableAmount' from JSON`,
  );
}

/** @internal */
export const ListBalancesPendingAmount$inboundSchema: z.ZodType<
  ListBalancesPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListBalancesPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListBalancesPendingAmount$outboundSchema: z.ZodType<
  ListBalancesPendingAmount$Outbound,
  z.ZodTypeDef,
  ListBalancesPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesPendingAmount$ {
  /** @deprecated use `ListBalancesPendingAmount$inboundSchema` instead. */
  export const inboundSchema = ListBalancesPendingAmount$inboundSchema;
  /** @deprecated use `ListBalancesPendingAmount$outboundSchema` instead. */
  export const outboundSchema = ListBalancesPendingAmount$outboundSchema;
  /** @deprecated use `ListBalancesPendingAmount$Outbound` instead. */
  export type Outbound = ListBalancesPendingAmount$Outbound;
}

export function listBalancesPendingAmountToJSON(
  listBalancesPendingAmount: ListBalancesPendingAmount,
): string {
  return JSON.stringify(
    ListBalancesPendingAmount$outboundSchema.parse(listBalancesPendingAmount),
  );
}

export function listBalancesPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesPendingAmount' from JSON`,
  );
}

/** @internal */
export const BalanceSelf$inboundSchema: z.ZodType<
  BalanceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type BalanceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const BalanceSelf$outboundSchema: z.ZodType<
  BalanceSelf$Outbound,
  z.ZodTypeDef,
  BalanceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceSelf$ {
  /** @deprecated use `BalanceSelf$inboundSchema` instead. */
  export const inboundSchema = BalanceSelf$inboundSchema;
  /** @deprecated use `BalanceSelf$outboundSchema` instead. */
  export const outboundSchema = BalanceSelf$outboundSchema;
  /** @deprecated use `BalanceSelf$Outbound` instead. */
  export type Outbound = BalanceSelf$Outbound;
}

export function balanceSelfToJSON(balanceSelf: BalanceSelf): string {
  return JSON.stringify(BalanceSelf$outboundSchema.parse(balanceSelf));
}

export function balanceSelfFromJSON(
  jsonString: string,
): SafeParseResult<BalanceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceSelf' from JSON`,
  );
}

/** @internal */
export const BalanceDocumentation$inboundSchema: z.ZodType<
  BalanceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type BalanceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const BalanceDocumentation$outboundSchema: z.ZodType<
  BalanceDocumentation$Outbound,
  z.ZodTypeDef,
  BalanceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceDocumentation$ {
  /** @deprecated use `BalanceDocumentation$inboundSchema` instead. */
  export const inboundSchema = BalanceDocumentation$inboundSchema;
  /** @deprecated use `BalanceDocumentation$outboundSchema` instead. */
  export const outboundSchema = BalanceDocumentation$outboundSchema;
  /** @deprecated use `BalanceDocumentation$Outbound` instead. */
  export type Outbound = BalanceDocumentation$Outbound;
}

export function balanceDocumentationToJSON(
  balanceDocumentation: BalanceDocumentation,
): string {
  return JSON.stringify(
    BalanceDocumentation$outboundSchema.parse(balanceDocumentation),
  );
}

export function balanceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<BalanceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceDocumentation' from JSON`,
  );
}

/** @internal */
export const BalanceLinks$inboundSchema: z.ZodType<
  BalanceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => BalanceSelf$inboundSchema).optional(),
  documentation: z.lazy(() => BalanceDocumentation$inboundSchema).optional(),
});

/** @internal */
export type BalanceLinks$Outbound = {
  self?: BalanceSelf$Outbound | undefined;
  documentation?: BalanceDocumentation$Outbound | undefined;
};

/** @internal */
export const BalanceLinks$outboundSchema: z.ZodType<
  BalanceLinks$Outbound,
  z.ZodTypeDef,
  BalanceLinks
> = z.object({
  self: z.lazy(() => BalanceSelf$outboundSchema).optional(),
  documentation: z.lazy(() => BalanceDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceLinks$ {
  /** @deprecated use `BalanceLinks$inboundSchema` instead. */
  export const inboundSchema = BalanceLinks$inboundSchema;
  /** @deprecated use `BalanceLinks$outboundSchema` instead. */
  export const outboundSchema = BalanceLinks$outboundSchema;
  /** @deprecated use `BalanceLinks$Outbound` instead. */
  export type Outbound = BalanceLinks$Outbound;
}

export function balanceLinksToJSON(balanceLinks: BalanceLinks): string {
  return JSON.stringify(BalanceLinks$outboundSchema.parse(balanceLinks));
}

export function balanceLinksFromJSON(
  jsonString: string,
): SafeParseResult<BalanceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceLinks' from JSON`,
  );
}

/** @internal */
export const Balance$inboundSchema: z.ZodType<Balance, z.ZodTypeDef, unknown> =
  z.object({
    resource: z.string().default("balance"),
    id: z.string().optional(),
    mode: z.string().optional(),
    createdAt: z.string().optional(),
    currency: ListBalancesCurrency$inboundSchema.optional(),
    description: z.string().optional(),
    status: z.string().optional(),
    transferFrequency: z.string().optional(),
    transferThreshold: z.lazy(() => ListBalancesTransferThreshold$inboundSchema)
      .optional(),
    transferReference: z.nullable(z.string()).optional(),
    transferDestination: z.nullable(
      z.lazy(() => ListBalancesTransferDestination$inboundSchema),
    ).optional(),
    availableAmount: z.lazy(() => ListBalancesAvailableAmount$inboundSchema)
      .optional(),
    pendingAmount: z.lazy(() => ListBalancesPendingAmount$inboundSchema)
      .optional(),
    _links: z.lazy(() => BalanceLinks$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type Balance$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  createdAt?: string | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  status?: string | undefined;
  transferFrequency?: string | undefined;
  transferThreshold?: ListBalancesTransferThreshold$Outbound | undefined;
  transferReference?: string | null | undefined;
  transferDestination?:
    | ListBalancesTransferDestination$Outbound
    | null
    | undefined;
  availableAmount?: ListBalancesAvailableAmount$Outbound | undefined;
  pendingAmount?: ListBalancesPendingAmount$Outbound | undefined;
  _links?: BalanceLinks$Outbound | undefined;
};

/** @internal */
export const Balance$outboundSchema: z.ZodType<
  Balance$Outbound,
  z.ZodTypeDef,
  Balance
> = z.object({
  resource: z.string().default("balance"),
  id: z.string().optional(),
  mode: z.string().optional(),
  createdAt: z.string().optional(),
  currency: ListBalancesCurrency$outboundSchema.optional(),
  description: z.string().optional(),
  status: z.string().optional(),
  transferFrequency: z.string().optional(),
  transferThreshold: z.lazy(() => ListBalancesTransferThreshold$outboundSchema)
    .optional(),
  transferReference: z.nullable(z.string()).optional(),
  transferDestination: z.nullable(
    z.lazy(() => ListBalancesTransferDestination$outboundSchema),
  ).optional(),
  availableAmount: z.lazy(() => ListBalancesAvailableAmount$outboundSchema)
    .optional(),
  pendingAmount: z.lazy(() => ListBalancesPendingAmount$outboundSchema)
    .optional(),
  links: z.lazy(() => BalanceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Balance$ {
  /** @deprecated use `Balance$inboundSchema` instead. */
  export const inboundSchema = Balance$inboundSchema;
  /** @deprecated use `Balance$outboundSchema` instead. */
  export const outboundSchema = Balance$outboundSchema;
  /** @deprecated use `Balance$Outbound` instead. */
  export type Outbound = Balance$Outbound;
}

export function balanceToJSON(balance: Balance): string {
  return JSON.stringify(Balance$outboundSchema.parse(balance));
}

export function balanceFromJSON(
  jsonString: string,
): SafeParseResult<Balance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Balance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Balance' from JSON`,
  );
}

/** @internal */
export const ListBalancesEmbedded$inboundSchema: z.ZodType<
  ListBalancesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  balances: z.array(z.lazy(() => Balance$inboundSchema)).optional(),
});

/** @internal */
export type ListBalancesEmbedded$Outbound = {
  balances?: Array<Balance$Outbound> | undefined;
};

/** @internal */
export const ListBalancesEmbedded$outboundSchema: z.ZodType<
  ListBalancesEmbedded$Outbound,
  z.ZodTypeDef,
  ListBalancesEmbedded
> = z.object({
  balances: z.array(z.lazy(() => Balance$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesEmbedded$ {
  /** @deprecated use `ListBalancesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListBalancesEmbedded$inboundSchema;
  /** @deprecated use `ListBalancesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListBalancesEmbedded$outboundSchema;
  /** @deprecated use `ListBalancesEmbedded$Outbound` instead. */
  export type Outbound = ListBalancesEmbedded$Outbound;
}

export function listBalancesEmbeddedToJSON(
  listBalancesEmbedded: ListBalancesEmbedded,
): string {
  return JSON.stringify(
    ListBalancesEmbedded$outboundSchema.parse(listBalancesEmbedded),
  );
}

export function listBalancesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListBalancesSelf$inboundSchema: z.ZodType<
  ListBalancesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalancesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalancesSelf$outboundSchema: z.ZodType<
  ListBalancesSelf$Outbound,
  z.ZodTypeDef,
  ListBalancesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesSelf$ {
  /** @deprecated use `ListBalancesSelf$inboundSchema` instead. */
  export const inboundSchema = ListBalancesSelf$inboundSchema;
  /** @deprecated use `ListBalancesSelf$outboundSchema` instead. */
  export const outboundSchema = ListBalancesSelf$outboundSchema;
  /** @deprecated use `ListBalancesSelf$Outbound` instead. */
  export type Outbound = ListBalancesSelf$Outbound;
}

export function listBalancesSelfToJSON(
  listBalancesSelf: ListBalancesSelf,
): string {
  return JSON.stringify(
    ListBalancesSelf$outboundSchema.parse(listBalancesSelf),
  );
}

export function listBalancesSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesSelf' from JSON`,
  );
}

/** @internal */
export const ListBalancesPrevious$inboundSchema: z.ZodType<
  ListBalancesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListBalancesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListBalancesPrevious$outboundSchema: z.ZodType<
  ListBalancesPrevious$Outbound,
  z.ZodTypeDef,
  ListBalancesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesPrevious$ {
  /** @deprecated use `ListBalancesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListBalancesPrevious$inboundSchema;
  /** @deprecated use `ListBalancesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListBalancesPrevious$outboundSchema;
  /** @deprecated use `ListBalancesPrevious$Outbound` instead. */
  export type Outbound = ListBalancesPrevious$Outbound;
}

export function listBalancesPreviousToJSON(
  listBalancesPrevious: ListBalancesPrevious,
): string {
  return JSON.stringify(
    ListBalancesPrevious$outboundSchema.parse(listBalancesPrevious),
  );
}

export function listBalancesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesPrevious' from JSON`,
  );
}

/** @internal */
export const ListBalancesNext$inboundSchema: z.ZodType<
  ListBalancesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListBalancesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListBalancesNext$outboundSchema: z.ZodType<
  ListBalancesNext$Outbound,
  z.ZodTypeDef,
  ListBalancesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesNext$ {
  /** @deprecated use `ListBalancesNext$inboundSchema` instead. */
  export const inboundSchema = ListBalancesNext$inboundSchema;
  /** @deprecated use `ListBalancesNext$outboundSchema` instead. */
  export const outboundSchema = ListBalancesNext$outboundSchema;
  /** @deprecated use `ListBalancesNext$Outbound` instead. */
  export type Outbound = ListBalancesNext$Outbound;
}

export function listBalancesNextToJSON(
  listBalancesNext: ListBalancesNext,
): string {
  return JSON.stringify(
    ListBalancesNext$outboundSchema.parse(listBalancesNext),
  );
}

export function listBalancesNextFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesNext' from JSON`,
  );
}

/** @internal */
export const ListBalancesDocumentation$inboundSchema: z.ZodType<
  ListBalancesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalancesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalancesDocumentation$outboundSchema: z.ZodType<
  ListBalancesDocumentation$Outbound,
  z.ZodTypeDef,
  ListBalancesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesDocumentation$ {
  /** @deprecated use `ListBalancesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListBalancesDocumentation$inboundSchema;
  /** @deprecated use `ListBalancesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListBalancesDocumentation$outboundSchema;
  /** @deprecated use `ListBalancesDocumentation$Outbound` instead. */
  export type Outbound = ListBalancesDocumentation$Outbound;
}

export function listBalancesDocumentationToJSON(
  listBalancesDocumentation: ListBalancesDocumentation,
): string {
  return JSON.stringify(
    ListBalancesDocumentation$outboundSchema.parse(listBalancesDocumentation),
  );
}

export function listBalancesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalancesLinks$inboundSchema: z.ZodType<
  ListBalancesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListBalancesSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListBalancesPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListBalancesNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListBalancesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListBalancesLinks$Outbound = {
  self?: ListBalancesSelf$Outbound | undefined;
  previous?: ListBalancesPrevious$Outbound | null | undefined;
  next?: ListBalancesNext$Outbound | null | undefined;
  documentation?: ListBalancesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListBalancesLinks$outboundSchema: z.ZodType<
  ListBalancesLinks$Outbound,
  z.ZodTypeDef,
  ListBalancesLinks
> = z.object({
  self: z.lazy(() => ListBalancesSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListBalancesPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListBalancesNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListBalancesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesLinks$ {
  /** @deprecated use `ListBalancesLinks$inboundSchema` instead. */
  export const inboundSchema = ListBalancesLinks$inboundSchema;
  /** @deprecated use `ListBalancesLinks$outboundSchema` instead. */
  export const outboundSchema = ListBalancesLinks$outboundSchema;
  /** @deprecated use `ListBalancesLinks$Outbound` instead. */
  export type Outbound = ListBalancesLinks$Outbound;
}

export function listBalancesLinksToJSON(
  listBalancesLinks: ListBalancesLinks,
): string {
  return JSON.stringify(
    ListBalancesLinks$outboundSchema.parse(listBalancesLinks),
  );
}

export function listBalancesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesLinks' from JSON`,
  );
}

/** @internal */
export const ListBalancesResponse$inboundSchema: z.ZodType<
  ListBalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListBalancesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListBalancesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListBalancesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListBalancesEmbedded$Outbound | undefined;
  _links?: ListBalancesLinks$Outbound | undefined;
};

/** @internal */
export const ListBalancesResponse$outboundSchema: z.ZodType<
  ListBalancesResponse$Outbound,
  z.ZodTypeDef,
  ListBalancesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListBalancesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListBalancesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesResponse$ {
  /** @deprecated use `ListBalancesResponse$inboundSchema` instead. */
  export const inboundSchema = ListBalancesResponse$inboundSchema;
  /** @deprecated use `ListBalancesResponse$outboundSchema` instead. */
  export const outboundSchema = ListBalancesResponse$outboundSchema;
  /** @deprecated use `ListBalancesResponse$Outbound` instead. */
  export type Outbound = ListBalancesResponse$Outbound;
}

export function listBalancesResponseToJSON(
  listBalancesResponse: ListBalancesResponse,
): string {
  return JSON.stringify(
    ListBalancesResponse$outboundSchema.parse(listBalancesResponse),
  );
}

export function listBalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesResponse' from JSON`,
  );
}
