/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListBalancesRequest = {
  /**
   * Optionally only return balances with the given currency. For example: `EUR`.
   */
  currency?: string | null | undefined;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListBalancesEmbedded = {
  /**
   * An array of balance objects. For a complete reference of
   *
   * @remarks
   * the balance object, refer to the [Get balance endpoint](get-balance) documentation.
   */
  balances: Array<models.EntityBalance>;
};

/**
 * A list of balance objects. For a complete reference of the balance
 *
 * @remarks
 * object, refer to the [Get balance endpoint](get-balance) documentation.
 */
export type ListBalancesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListBalancesEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListBalancesRequest$inboundSchema: z.ZodType<
  ListBalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListBalancesRequest$Outbound = {
  currency?: string | null | undefined;
  from?: string | null | undefined;
  limit?: number | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListBalancesRequest$outboundSchema: z.ZodType<
  ListBalancesRequest$Outbound,
  z.ZodTypeDef,
  ListBalancesRequest
> = z.object({
  currency: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesRequest$ {
  /** @deprecated use `ListBalancesRequest$inboundSchema` instead. */
  export const inboundSchema = ListBalancesRequest$inboundSchema;
  /** @deprecated use `ListBalancesRequest$outboundSchema` instead. */
  export const outboundSchema = ListBalancesRequest$outboundSchema;
  /** @deprecated use `ListBalancesRequest$Outbound` instead. */
  export type Outbound = ListBalancesRequest$Outbound;
}

export function listBalancesRequestToJSON(
  listBalancesRequest: ListBalancesRequest,
): string {
  return JSON.stringify(
    ListBalancesRequest$outboundSchema.parse(listBalancesRequest),
  );
}

export function listBalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesRequest' from JSON`,
  );
}

/** @internal */
export const ListBalancesEmbedded$inboundSchema: z.ZodType<
  ListBalancesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  balances: z.array(models.EntityBalance$inboundSchema),
});

/** @internal */
export type ListBalancesEmbedded$Outbound = {
  balances: Array<models.EntityBalance$Outbound>;
};

/** @internal */
export const ListBalancesEmbedded$outboundSchema: z.ZodType<
  ListBalancesEmbedded$Outbound,
  z.ZodTypeDef,
  ListBalancesEmbedded
> = z.object({
  balances: z.array(models.EntityBalance$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesEmbedded$ {
  /** @deprecated use `ListBalancesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListBalancesEmbedded$inboundSchema;
  /** @deprecated use `ListBalancesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListBalancesEmbedded$outboundSchema;
  /** @deprecated use `ListBalancesEmbedded$Outbound` instead. */
  export type Outbound = ListBalancesEmbedded$Outbound;
}

export function listBalancesEmbeddedToJSON(
  listBalancesEmbedded: ListBalancesEmbedded,
): string {
  return JSON.stringify(
    ListBalancesEmbedded$outboundSchema.parse(listBalancesEmbedded),
  );
}

export function listBalancesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListBalancesResponse$inboundSchema: z.ZodType<
  ListBalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListBalancesEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListBalancesResponse$Outbound = {
  count: number;
  _embedded: ListBalancesEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListBalancesResponse$outboundSchema: z.ZodType<
  ListBalancesResponse$Outbound,
  z.ZodTypeDef,
  ListBalancesResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListBalancesEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalancesResponse$ {
  /** @deprecated use `ListBalancesResponse$inboundSchema` instead. */
  export const inboundSchema = ListBalancesResponse$inboundSchema;
  /** @deprecated use `ListBalancesResponse$outboundSchema` instead. */
  export const outboundSchema = ListBalancesResponse$outboundSchema;
  /** @deprecated use `ListBalancesResponse$Outbound` instead. */
  export type Outbound = ListBalancesResponse$Outbound;
}

export function listBalancesResponseToJSON(
  listBalancesResponse: ListBalancesResponse,
): string {
  return JSON.stringify(
    ListBalancesResponse$outboundSchema.parse(listBalancesResponse),
  );
}

export function listBalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalancesResponse' from JSON`,
  );
}
