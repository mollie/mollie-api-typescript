/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
 *
 * @remarks
 * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
 * available (e.g. payment method).
 *
 * With the `transaction-categories` format, transactions are grouped by
 * transaction type, then by status, and then again by other sub-groupings where available.
 */
export const QueryParamGrouping = {
  StatusBalances: "status-balances",
  TransactionCategories: "transaction-categories",
} as const;
/**
 * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
 *
 * @remarks
 * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
 * available (e.g. payment method).
 *
 * With the `transaction-categories` format, transactions are grouped by
 * transaction type, then by status, and then again by other sub-groupings where available.
 */
export type QueryParamGrouping = ClosedEnum<typeof QueryParamGrouping>;

export type GetBalanceReportRequest = {
  /**
   * Provide the ID of the related balance.
   */
  balanceId: string;
  /**
   * The start date of the report, in `YYYY-MM-DD` format. The from date is
   *
   * @remarks
   * 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
   * include transactions from 2024-01-01 0:00:00 CET and onwards.
   */
  from: string;
  /**
   * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
   *
   * @remarks
   * This means a report with for example `until=2024-02-01` will include transactions up until
   * 2024-01-31 23:59:59 CET.
   */
  until: string;
  /**
   * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
   *
   * @remarks
   * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
   * available (e.g. payment method).
   *
   * With the `transaction-categories` format, transactions are grouped by
   * transaction type, then by status, and then again by other sub-groupings where available.
   */
  grouping?: QueryParamGrouping | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetBalanceReportUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type GetBalanceReportUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetBalanceReportUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetBalanceReportNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetBalanceReportNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetBalanceReportNotFoundDocumentation;
};

/**
 * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
 *
 * @remarks
 * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
 * by transaction type, and then by other sub-groupings where available (e.g. payment method).
 *
 * With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
 * movement, and then again by other sub-groupings where available.
 *
 * Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
 * of the report.
 */
export const GroupingResponse = {
  StatusBalances: "status-balances",
  TransactionCategories: "transaction-categories",
} as const;
/**
 * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
 *
 * @remarks
 * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
 * by transaction type, and then by other sub-groupings where available (e.g. payment method).
 *
 * With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
 * movement, and then again by other sub-groupings where available.
 *
 * Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
 * of the report.
 */
export type GroupingResponse = ClosedEnum<typeof GroupingResponse>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type PendingBalanceOpenAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const PendingBalanceOpenSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalanceOpenSubTotalMethod1 = ClosedEnum<
  typeof PendingBalanceOpenSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalanceOpenSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalanceOpenSubTotalCardIssuer1 = ClosedEnum<
  typeof PendingBalanceOpenSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalanceOpenSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalanceOpenSubTotalCardAudience1 = ClosedEnum<
  typeof PendingBalanceOpenSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalanceOpenSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalanceOpenSubTotalCardRegion1 = ClosedEnum<
  typeof PendingBalanceOpenSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalanceOpenSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalanceOpenSubTotalFeeType1 = ClosedEnum<
  typeof PendingBalanceOpenSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalanceOpenSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalanceOpenSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof PendingBalanceOpenSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const PendingBalanceOpenSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalanceOpenSubTotalTransactionType1 = ClosedEnum<
  typeof PendingBalanceOpenSubTotalTransactionType1
>;

export type PendingBalanceOpenSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalanceOpenSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PendingBalanceOpenSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PendingBalanceOpenSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PendingBalanceOpenSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalanceOpenSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalanceOpenSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalanceOpenSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const PendingBalanceOpenSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalanceOpenSubtotalMethod2 = ClosedEnum<
  typeof PendingBalanceOpenSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalanceOpenSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalanceOpenSubtotalCardIssuer2 = ClosedEnum<
  typeof PendingBalanceOpenSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalanceOpenSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalanceOpenSubtotalCardAudience2 = ClosedEnum<
  typeof PendingBalanceOpenSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalanceOpenSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalanceOpenSubtotalCardRegion2 = ClosedEnum<
  typeof PendingBalanceOpenSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalanceOpenSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalanceOpenSubtotalFeeType2 = ClosedEnum<
  typeof PendingBalanceOpenSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalanceOpenSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalanceOpenSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof PendingBalanceOpenSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const PendingBalanceOpenSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalanceOpenSubtotalTransactionType2 = ClosedEnum<
  typeof PendingBalanceOpenSubtotalTransactionType2
>;

export type PendingBalanceOpenSubtotal2 = {
  subTotals?: Array<PendingBalanceOpenSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalanceOpenSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PendingBalanceOpenSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PendingBalanceOpenSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PendingBalanceOpenSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalanceOpenSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalanceOpenSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalanceOpenSubtotalTransactionType2
    | null
    | undefined;
};

export type PendingBalanceOpen = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: PendingBalanceOpenAmount | undefined;
  subtotals?: Array<PendingBalanceOpenSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type PendingBalanceCloseAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const PendingBalanceCloseSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalanceCloseSubTotalMethod1 = ClosedEnum<
  typeof PendingBalanceCloseSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalanceCloseSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalanceCloseSubTotalCardIssuer1 = ClosedEnum<
  typeof PendingBalanceCloseSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalanceCloseSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalanceCloseSubTotalCardAudience1 = ClosedEnum<
  typeof PendingBalanceCloseSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalanceCloseSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalanceCloseSubTotalCardRegion1 = ClosedEnum<
  typeof PendingBalanceCloseSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalanceCloseSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalanceCloseSubTotalFeeType1 = ClosedEnum<
  typeof PendingBalanceCloseSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalanceCloseSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalanceCloseSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof PendingBalanceCloseSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const PendingBalanceCloseSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalanceCloseSubTotalTransactionType1 = ClosedEnum<
  typeof PendingBalanceCloseSubTotalTransactionType1
>;

export type PendingBalanceCloseSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalanceCloseSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PendingBalanceCloseSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PendingBalanceCloseSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PendingBalanceCloseSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalanceCloseSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalanceCloseSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalanceCloseSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const PendingBalanceCloseSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalanceCloseSubtotalMethod2 = ClosedEnum<
  typeof PendingBalanceCloseSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalanceCloseSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalanceCloseSubtotalCardIssuer2 = ClosedEnum<
  typeof PendingBalanceCloseSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalanceCloseSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalanceCloseSubtotalCardAudience2 = ClosedEnum<
  typeof PendingBalanceCloseSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalanceCloseSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalanceCloseSubtotalCardRegion2 = ClosedEnum<
  typeof PendingBalanceCloseSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalanceCloseSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalanceCloseSubtotalFeeType2 = ClosedEnum<
  typeof PendingBalanceCloseSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalanceCloseSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalanceCloseSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof PendingBalanceCloseSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const PendingBalanceCloseSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalanceCloseSubtotalTransactionType2 = ClosedEnum<
  typeof PendingBalanceCloseSubtotalTransactionType2
>;

export type PendingBalanceCloseSubtotal2 = {
  subTotals?: Array<PendingBalanceCloseSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalanceCloseSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PendingBalanceCloseSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PendingBalanceCloseSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PendingBalanceCloseSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalanceCloseSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalanceCloseSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalanceCloseSubtotalTransactionType2
    | null
    | undefined;
};

export type PendingBalanceClose = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: PendingBalanceCloseAmount | undefined;
  subtotals?: Array<PendingBalanceCloseSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type PendingBalancePendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const PendingBalancePendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalancePendingSubTotalMethod1 = ClosedEnum<
  typeof PendingBalancePendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalancePendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalancePendingSubTotalCardIssuer1 = ClosedEnum<
  typeof PendingBalancePendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalancePendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalancePendingSubTotalCardAudience1 = ClosedEnum<
  typeof PendingBalancePendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalancePendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalancePendingSubTotalCardRegion1 = ClosedEnum<
  typeof PendingBalancePendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalancePendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalancePendingSubTotalFeeType1 = ClosedEnum<
  typeof PendingBalancePendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalancePendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalancePendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof PendingBalancePendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const PendingBalancePendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalancePendingSubTotalTransactionType1 = ClosedEnum<
  typeof PendingBalancePendingSubTotalTransactionType1
>;

export type PendingBalancePendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalancePendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PendingBalancePendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PendingBalancePendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PendingBalancePendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalancePendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalancePendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalancePendingSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const PendingBalancePendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalancePendingSubtotalMethod2 = ClosedEnum<
  typeof PendingBalancePendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalancePendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalancePendingSubtotalCardIssuer2 = ClosedEnum<
  typeof PendingBalancePendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalancePendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalancePendingSubtotalCardAudience2 = ClosedEnum<
  typeof PendingBalancePendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalancePendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalancePendingSubtotalCardRegion2 = ClosedEnum<
  typeof PendingBalancePendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalancePendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalancePendingSubtotalFeeType2 = ClosedEnum<
  typeof PendingBalancePendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalancePendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalancePendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof PendingBalancePendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const PendingBalancePendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalancePendingSubtotalTransactionType2 = ClosedEnum<
  typeof PendingBalancePendingSubtotalTransactionType2
>;

export type PendingBalancePendingSubtotal2 = {
  subTotals?: Array<PendingBalancePendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalancePendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PendingBalancePendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PendingBalancePendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PendingBalancePendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalancePendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalancePendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalancePendingSubtotalTransactionType2
    | null
    | undefined;
};

export type PendingBalancePending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: PendingBalancePendingAmount | undefined;
  subtotals?: Array<PendingBalancePendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type PendingBalanceMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const PendingBalanceMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalanceMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalanceMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalanceMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalanceMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalanceMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalanceMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalanceMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalanceMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalanceMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<typeof PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1>;

/**
 * Represents the transaction type
 */
export const PendingBalanceMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalanceMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubTotalTransactionType1
>;

export type PendingBalanceMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalanceMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | PendingBalanceMovedToAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | PendingBalanceMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | PendingBalanceMovedToAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalanceMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalanceMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const PendingBalanceMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PendingBalanceMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PendingBalanceMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PendingBalanceMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PendingBalanceMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PendingBalanceMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PendingBalanceMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PendingBalanceMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const PendingBalanceMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PendingBalanceMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<typeof PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2>;

/**
 * Represents the transaction type
 */
export const PendingBalanceMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PendingBalanceMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof PendingBalanceMovedToAvailableSubtotalTransactionType2
>;

export type PendingBalanceMovedToAvailableSubtotal2 = {
  subTotals?: Array<PendingBalanceMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PendingBalanceMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | PendingBalanceMovedToAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | PendingBalanceMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | PendingBalanceMovedToAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PendingBalanceMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PendingBalanceMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type PendingBalanceMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: PendingBalanceMovedToAvailableAmount | undefined;
  subtotals?: Array<PendingBalanceMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * The pending balance. Only available if grouping is `status-balances`.
 */
export type PendingBalance = {
  open?: PendingBalanceOpen | undefined;
  close?: PendingBalanceClose | undefined;
  pending?: PendingBalancePending | undefined;
  movedToAvailable?: PendingBalanceMovedToAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type AvailableBalanceOpenAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const AvailableBalanceOpenSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type AvailableBalanceOpenSubTotalMethod1 = ClosedEnum<
  typeof AvailableBalanceOpenSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const AvailableBalanceOpenSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type AvailableBalanceOpenSubTotalCardIssuer1 = ClosedEnum<
  typeof AvailableBalanceOpenSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const AvailableBalanceOpenSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type AvailableBalanceOpenSubTotalCardAudience1 = ClosedEnum<
  typeof AvailableBalanceOpenSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const AvailableBalanceOpenSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type AvailableBalanceOpenSubTotalCardRegion1 = ClosedEnum<
  typeof AvailableBalanceOpenSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const AvailableBalanceOpenSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type AvailableBalanceOpenSubTotalFeeType1 = ClosedEnum<
  typeof AvailableBalanceOpenSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const AvailableBalanceOpenSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type AvailableBalanceOpenSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof AvailableBalanceOpenSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const AvailableBalanceOpenSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type AvailableBalanceOpenSubTotalTransactionType1 = ClosedEnum<
  typeof AvailableBalanceOpenSubTotalTransactionType1
>;

export type AvailableBalanceOpenSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: AvailableBalanceOpenSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: AvailableBalanceOpenSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: AvailableBalanceOpenSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: AvailableBalanceOpenSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: AvailableBalanceOpenSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | AvailableBalanceOpenSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | AvailableBalanceOpenSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const AvailableBalanceOpenSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type AvailableBalanceOpenSubtotalMethod2 = ClosedEnum<
  typeof AvailableBalanceOpenSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const AvailableBalanceOpenSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type AvailableBalanceOpenSubtotalCardIssuer2 = ClosedEnum<
  typeof AvailableBalanceOpenSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const AvailableBalanceOpenSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type AvailableBalanceOpenSubtotalCardAudience2 = ClosedEnum<
  typeof AvailableBalanceOpenSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const AvailableBalanceOpenSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type AvailableBalanceOpenSubtotalCardRegion2 = ClosedEnum<
  typeof AvailableBalanceOpenSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const AvailableBalanceOpenSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type AvailableBalanceOpenSubtotalFeeType2 = ClosedEnum<
  typeof AvailableBalanceOpenSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const AvailableBalanceOpenSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type AvailableBalanceOpenSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof AvailableBalanceOpenSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const AvailableBalanceOpenSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type AvailableBalanceOpenSubtotalTransactionType2 = ClosedEnum<
  typeof AvailableBalanceOpenSubtotalTransactionType2
>;

export type AvailableBalanceOpenSubtotal2 = {
  subTotals?: Array<AvailableBalanceOpenSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: AvailableBalanceOpenSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: AvailableBalanceOpenSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: AvailableBalanceOpenSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: AvailableBalanceOpenSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: AvailableBalanceOpenSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | AvailableBalanceOpenSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | AvailableBalanceOpenSubtotalTransactionType2
    | null
    | undefined;
};

export type AvailableBalanceOpen = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: AvailableBalanceOpenAmount | undefined;
  subtotals?: Array<AvailableBalanceOpenSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type MovedFromPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const MovedFromPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type MovedFromPendingSubTotalMethod1 = ClosedEnum<
  typeof MovedFromPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const MovedFromPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type MovedFromPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof MovedFromPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const MovedFromPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type MovedFromPendingSubTotalCardAudience1 = ClosedEnum<
  typeof MovedFromPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const MovedFromPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type MovedFromPendingSubTotalCardRegion1 = ClosedEnum<
  typeof MovedFromPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const MovedFromPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type MovedFromPendingSubTotalFeeType1 = ClosedEnum<
  typeof MovedFromPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const MovedFromPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type MovedFromPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof MovedFromPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const MovedFromPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type MovedFromPendingSubTotalTransactionType1 = ClosedEnum<
  typeof MovedFromPendingSubTotalTransactionType1
>;

export type MovedFromPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: MovedFromPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: MovedFromPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: MovedFromPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: MovedFromPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: MovedFromPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | MovedFromPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: MovedFromPendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const MovedFromPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type MovedFromPendingSubtotalMethod2 = ClosedEnum<
  typeof MovedFromPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const MovedFromPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type MovedFromPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof MovedFromPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const MovedFromPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type MovedFromPendingSubtotalCardAudience2 = ClosedEnum<
  typeof MovedFromPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const MovedFromPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type MovedFromPendingSubtotalCardRegion2 = ClosedEnum<
  typeof MovedFromPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const MovedFromPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type MovedFromPendingSubtotalFeeType2 = ClosedEnum<
  typeof MovedFromPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const MovedFromPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type MovedFromPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof MovedFromPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const MovedFromPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type MovedFromPendingSubtotalTransactionType2 = ClosedEnum<
  typeof MovedFromPendingSubtotalTransactionType2
>;

export type MovedFromPendingSubtotal2 = {
  subTotals?: Array<MovedFromPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: MovedFromPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: MovedFromPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: MovedFromPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: MovedFromPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: MovedFromPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | MovedFromPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: MovedFromPendingSubtotalTransactionType2 | null | undefined;
};

export type MovedFromPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: MovedFromPendingAmount | undefined;
  subtotals?: Array<MovedFromPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type AvailableBalanceImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const AvailableBalanceImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type AvailableBalanceImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof AvailableBalanceImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 =
  ClosedEnum<typeof AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 =
  ClosedEnum<typeof AvailableBalanceImmediatelyAvailableSubTotalCardAudience1>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 =
  ClosedEnum<typeof AvailableBalanceImmediatelyAvailableSubTotalCardRegion1>;

/**
 * Present when the transaction represents a fee.
 */
export const AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof AvailableBalanceImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1
  >;

/**
 * Represents the transaction type
 */
export const AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 =
  ClosedEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalTransactionType1
  >;

export type AvailableBalanceImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?:
    | AvailableBalanceImmediatelyAvailableSubTotalMethod1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | AvailableBalanceImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | AvailableBalanceImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?:
    | AvailableBalanceImmediatelyAvailableSubTotalFeeType1
    | null
    | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | AvailableBalanceImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const AvailableBalanceImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type AvailableBalanceImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof AvailableBalanceImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 =
  ClosedEnum<typeof AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 =
  ClosedEnum<typeof AvailableBalanceImmediatelyAvailableSubtotalCardAudience2>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 =
  ClosedEnum<typeof AvailableBalanceImmediatelyAvailableSubtotalCardRegion2>;

/**
 * Present when the transaction represents a fee.
 */
export const AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof AvailableBalanceImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2
  >;

/**
 * Represents the transaction type
 */
export const AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 =
  ClosedEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalTransactionType2
  >;

export type AvailableBalanceImmediatelyAvailableSubtotal2 = {
  subTotals?:
    | Array<AvailableBalanceImmediatelyAvailableSubTotal1>
    | null
    | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?:
    | AvailableBalanceImmediatelyAvailableSubtotalMethod2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | AvailableBalanceImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | AvailableBalanceImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?:
    | AvailableBalanceImmediatelyAvailableSubtotalFeeType2
    | null
    | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | AvailableBalanceImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type AvailableBalanceImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: AvailableBalanceImmediatelyAvailableAmount | undefined;
  subtotals?:
    | Array<AvailableBalanceImmediatelyAvailableSubtotal2>
    | null
    | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type AvailableBalanceCloseAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const AvailableBalanceCloseSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type AvailableBalanceCloseSubTotalMethod1 = ClosedEnum<
  typeof AvailableBalanceCloseSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const AvailableBalanceCloseSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type AvailableBalanceCloseSubTotalCardIssuer1 = ClosedEnum<
  typeof AvailableBalanceCloseSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const AvailableBalanceCloseSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type AvailableBalanceCloseSubTotalCardAudience1 = ClosedEnum<
  typeof AvailableBalanceCloseSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const AvailableBalanceCloseSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type AvailableBalanceCloseSubTotalCardRegion1 = ClosedEnum<
  typeof AvailableBalanceCloseSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const AvailableBalanceCloseSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type AvailableBalanceCloseSubTotalFeeType1 = ClosedEnum<
  typeof AvailableBalanceCloseSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const AvailableBalanceCloseSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type AvailableBalanceCloseSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof AvailableBalanceCloseSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const AvailableBalanceCloseSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type AvailableBalanceCloseSubTotalTransactionType1 = ClosedEnum<
  typeof AvailableBalanceCloseSubTotalTransactionType1
>;

export type AvailableBalanceCloseSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: AvailableBalanceCloseSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: AvailableBalanceCloseSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: AvailableBalanceCloseSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: AvailableBalanceCloseSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: AvailableBalanceCloseSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | AvailableBalanceCloseSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | AvailableBalanceCloseSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const AvailableBalanceCloseSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type AvailableBalanceCloseSubtotalMethod2 = ClosedEnum<
  typeof AvailableBalanceCloseSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const AvailableBalanceCloseSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type AvailableBalanceCloseSubtotalCardIssuer2 = ClosedEnum<
  typeof AvailableBalanceCloseSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const AvailableBalanceCloseSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type AvailableBalanceCloseSubtotalCardAudience2 = ClosedEnum<
  typeof AvailableBalanceCloseSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const AvailableBalanceCloseSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type AvailableBalanceCloseSubtotalCardRegion2 = ClosedEnum<
  typeof AvailableBalanceCloseSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const AvailableBalanceCloseSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type AvailableBalanceCloseSubtotalFeeType2 = ClosedEnum<
  typeof AvailableBalanceCloseSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const AvailableBalanceCloseSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type AvailableBalanceCloseSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof AvailableBalanceCloseSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const AvailableBalanceCloseSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type AvailableBalanceCloseSubtotalTransactionType2 = ClosedEnum<
  typeof AvailableBalanceCloseSubtotalTransactionType2
>;

export type AvailableBalanceCloseSubtotal2 = {
  subTotals?: Array<AvailableBalanceCloseSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: AvailableBalanceCloseSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: AvailableBalanceCloseSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: AvailableBalanceCloseSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: AvailableBalanceCloseSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: AvailableBalanceCloseSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | AvailableBalanceCloseSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | AvailableBalanceCloseSubtotalTransactionType2
    | null
    | undefined;
};

export type AvailableBalanceClose = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: AvailableBalanceCloseAmount | undefined;
  subtotals?: Array<AvailableBalanceCloseSubtotal2> | null | undefined;
};

/**
 * The available balance. Only available if grouping is `status-balances`.
 */
export type AvailableBalance = {
  open?: AvailableBalanceOpen | undefined;
  movedFromPending?: MovedFromPending | undefined;
  immediatelyAvailable?: AvailableBalanceImmediatelyAvailable | undefined;
  close?: AvailableBalanceClose | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type OpenPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const OpenPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type OpenPendingSubTotalMethod1 = ClosedEnum<
  typeof OpenPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const OpenPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type OpenPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof OpenPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const OpenPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type OpenPendingSubTotalCardAudience1 = ClosedEnum<
  typeof OpenPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const OpenPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type OpenPendingSubTotalCardRegion1 = ClosedEnum<
  typeof OpenPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const OpenPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type OpenPendingSubTotalFeeType1 = ClosedEnum<
  typeof OpenPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const OpenPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type OpenPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof OpenPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const OpenPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type OpenPendingSubTotalTransactionType1 = ClosedEnum<
  typeof OpenPendingSubTotalTransactionType1
>;

export type OpenPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: OpenPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: OpenPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: OpenPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: OpenPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: OpenPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | OpenPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: OpenPendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const OpenPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type OpenPendingSubtotalMethod2 = ClosedEnum<
  typeof OpenPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const OpenPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type OpenPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof OpenPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const OpenPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type OpenPendingSubtotalCardAudience2 = ClosedEnum<
  typeof OpenPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const OpenPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type OpenPendingSubtotalCardRegion2 = ClosedEnum<
  typeof OpenPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const OpenPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type OpenPendingSubtotalFeeType2 = ClosedEnum<
  typeof OpenPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const OpenPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type OpenPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof OpenPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const OpenPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type OpenPendingSubtotalTransactionType2 = ClosedEnum<
  typeof OpenPendingSubtotalTransactionType2
>;

export type OpenPendingSubtotal2 = {
  subTotals?: Array<OpenPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: OpenPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: OpenPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: OpenPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: OpenPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: OpenPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | OpenPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: OpenPendingSubtotalTransactionType2 | null | undefined;
};

export type OpenPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: OpenPendingAmount | undefined;
  subtotals?: Array<OpenPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type OpenAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const OpenAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type OpenAvailableSubTotalMethod1 = ClosedEnum<
  typeof OpenAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const OpenAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type OpenAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof OpenAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const OpenAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type OpenAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof OpenAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const OpenAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type OpenAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof OpenAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const OpenAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type OpenAvailableSubTotalFeeType1 = ClosedEnum<
  typeof OpenAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const OpenAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type OpenAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof OpenAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const OpenAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type OpenAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof OpenAvailableSubTotalTransactionType1
>;

export type OpenAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: OpenAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: OpenAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: OpenAvailableSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: OpenAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: OpenAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | OpenAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: OpenAvailableSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const OpenAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type OpenAvailableSubtotalMethod2 = ClosedEnum<
  typeof OpenAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const OpenAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type OpenAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof OpenAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const OpenAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type OpenAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof OpenAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const OpenAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type OpenAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof OpenAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const OpenAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type OpenAvailableSubtotalFeeType2 = ClosedEnum<
  typeof OpenAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const OpenAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type OpenAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof OpenAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const OpenAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type OpenAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof OpenAvailableSubtotalTransactionType2
>;

export type OpenAvailableSubtotal2 = {
  subTotals?: Array<OpenAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: OpenAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: OpenAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: OpenAvailableSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: OpenAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: OpenAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | OpenAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: OpenAvailableSubtotalTransactionType2 | null | undefined;
};

export type OpenAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: OpenAvailableAmount | undefined;
  subtotals?: Array<OpenAvailableSubtotal2> | null | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type Open = {
  pending?: OpenPending | undefined;
  available?: OpenAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ClosePendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const ClosePendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ClosePendingSubTotalMethod1 = ClosedEnum<
  typeof ClosePendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ClosePendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ClosePendingSubTotalCardIssuer1 = ClosedEnum<
  typeof ClosePendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ClosePendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ClosePendingSubTotalCardAudience1 = ClosedEnum<
  typeof ClosePendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ClosePendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ClosePendingSubTotalCardRegion1 = ClosedEnum<
  typeof ClosePendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const ClosePendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ClosePendingSubTotalFeeType1 = ClosedEnum<
  typeof ClosePendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ClosePendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ClosePendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof ClosePendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const ClosePendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ClosePendingSubTotalTransactionType1 = ClosedEnum<
  typeof ClosePendingSubTotalTransactionType1
>;

export type ClosePendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ClosePendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: ClosePendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: ClosePendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: ClosePendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ClosePendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ClosePendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: ClosePendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const ClosePendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ClosePendingSubtotalMethod2 = ClosedEnum<
  typeof ClosePendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ClosePendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ClosePendingSubtotalCardIssuer2 = ClosedEnum<
  typeof ClosePendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ClosePendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ClosePendingSubtotalCardAudience2 = ClosedEnum<
  typeof ClosePendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ClosePendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ClosePendingSubtotalCardRegion2 = ClosedEnum<
  typeof ClosePendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const ClosePendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ClosePendingSubtotalFeeType2 = ClosedEnum<
  typeof ClosePendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ClosePendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ClosePendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof ClosePendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const ClosePendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ClosePendingSubtotalTransactionType2 = ClosedEnum<
  typeof ClosePendingSubtotalTransactionType2
>;

export type ClosePendingSubtotal2 = {
  subTotals?: Array<ClosePendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ClosePendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: ClosePendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: ClosePendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: ClosePendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ClosePendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ClosePendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: ClosePendingSubtotalTransactionType2 | null | undefined;
};

export type ClosePending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: ClosePendingAmount | undefined;
  subtotals?: Array<ClosePendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CloseAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const CloseAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CloseAvailableSubTotalMethod1 = ClosedEnum<
  typeof CloseAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CloseAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CloseAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof CloseAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CloseAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CloseAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof CloseAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CloseAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CloseAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof CloseAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const CloseAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CloseAvailableSubTotalFeeType1 = ClosedEnum<
  typeof CloseAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CloseAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CloseAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof CloseAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const CloseAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CloseAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof CloseAvailableSubTotalTransactionType1
>;

export type CloseAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CloseAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CloseAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: CloseAvailableSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CloseAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CloseAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CloseAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: CloseAvailableSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const CloseAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CloseAvailableSubtotalMethod2 = ClosedEnum<
  typeof CloseAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CloseAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CloseAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof CloseAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CloseAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CloseAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof CloseAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CloseAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CloseAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof CloseAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const CloseAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CloseAvailableSubtotalFeeType2 = ClosedEnum<
  typeof CloseAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CloseAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CloseAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof CloseAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const CloseAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CloseAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof CloseAvailableSubtotalTransactionType2
>;

export type CloseAvailableSubtotal2 = {
  subTotals?: Array<CloseAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CloseAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CloseAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: CloseAvailableSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CloseAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CloseAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CloseAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: CloseAvailableSubtotalTransactionType2 | null | undefined;
};

export type CloseAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: CloseAvailableAmount | undefined;
  subtotals?: Array<CloseAvailableSubtotal2> | null | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type Close = {
  pending?: ClosePending | undefined;
  available?: CloseAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type PaymentsPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const PaymentsPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PaymentsPendingSubTotalMethod1 = ClosedEnum<
  typeof PaymentsPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PaymentsPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PaymentsPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof PaymentsPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PaymentsPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PaymentsPendingSubTotalCardAudience1 = ClosedEnum<
  typeof PaymentsPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PaymentsPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PaymentsPendingSubTotalCardRegion1 = ClosedEnum<
  typeof PaymentsPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const PaymentsPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PaymentsPendingSubTotalFeeType1 = ClosedEnum<
  typeof PaymentsPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PaymentsPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PaymentsPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof PaymentsPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const PaymentsPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PaymentsPendingSubTotalTransactionType1 = ClosedEnum<
  typeof PaymentsPendingSubTotalTransactionType1
>;

export type PaymentsPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PaymentsPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PaymentsPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PaymentsPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PaymentsPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PaymentsPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PaymentsPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: PaymentsPendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const PaymentsPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PaymentsPendingSubtotalMethod2 = ClosedEnum<
  typeof PaymentsPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PaymentsPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PaymentsPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof PaymentsPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PaymentsPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PaymentsPendingSubtotalCardAudience2 = ClosedEnum<
  typeof PaymentsPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PaymentsPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PaymentsPendingSubtotalCardRegion2 = ClosedEnum<
  typeof PaymentsPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const PaymentsPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PaymentsPendingSubtotalFeeType2 = ClosedEnum<
  typeof PaymentsPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PaymentsPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PaymentsPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof PaymentsPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const PaymentsPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PaymentsPendingSubtotalTransactionType2 = ClosedEnum<
  typeof PaymentsPendingSubtotalTransactionType2
>;

export type PaymentsPendingSubtotal2 = {
  subTotals?: Array<PaymentsPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PaymentsPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PaymentsPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: PaymentsPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PaymentsPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PaymentsPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PaymentsPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: PaymentsPendingSubtotalTransactionType2 | null | undefined;
};

export type PaymentsPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: PaymentsPendingAmount | undefined;
  subtotals?: Array<PaymentsPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type PaymentsMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const PaymentsMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PaymentsMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PaymentsMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PaymentsMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PaymentsMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PaymentsMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PaymentsMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PaymentsMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const PaymentsMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PaymentsMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PaymentsMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PaymentsMovedToAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const PaymentsMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PaymentsMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubTotalTransactionType1
>;

export type PaymentsMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PaymentsMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PaymentsMovedToAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | PaymentsMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PaymentsMovedToAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PaymentsMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PaymentsMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PaymentsMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const PaymentsMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PaymentsMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PaymentsMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PaymentsMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PaymentsMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PaymentsMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PaymentsMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PaymentsMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const PaymentsMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PaymentsMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PaymentsMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PaymentsMovedToAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const PaymentsMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PaymentsMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof PaymentsMovedToAvailableSubtotalTransactionType2
>;

export type PaymentsMovedToAvailableSubtotal2 = {
  subTotals?: Array<PaymentsMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PaymentsMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: PaymentsMovedToAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | PaymentsMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: PaymentsMovedToAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PaymentsMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PaymentsMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PaymentsMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type PaymentsMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: PaymentsMovedToAvailableAmount | undefined;
  subtotals?: Array<PaymentsMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type PaymentsImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const PaymentsImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PaymentsImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PaymentsImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PaymentsImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PaymentsImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PaymentsImmediatelyAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PaymentsImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PaymentsImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const PaymentsImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PaymentsImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<typeof PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1>;

/**
 * Represents the transaction type
 */
export const PaymentsImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PaymentsImmediatelyAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubTotalTransactionType1
>;

export type PaymentsImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PaymentsImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | PaymentsImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | PaymentsImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | PaymentsImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PaymentsImmediatelyAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PaymentsImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const PaymentsImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type PaymentsImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const PaymentsImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type PaymentsImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const PaymentsImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type PaymentsImmediatelyAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const PaymentsImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type PaymentsImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const PaymentsImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type PaymentsImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<typeof PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2>;

/**
 * Represents the transaction type
 */
export const PaymentsImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type PaymentsImmediatelyAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof PaymentsImmediatelyAvailableSubtotalTransactionType2
>;

export type PaymentsImmediatelyAvailableSubtotal2 = {
  subTotals?: Array<PaymentsImmediatelyAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: PaymentsImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | PaymentsImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | PaymentsImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | PaymentsImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: PaymentsImmediatelyAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | PaymentsImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type PaymentsImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: PaymentsImmediatelyAvailableAmount | undefined;
  subtotals?: Array<PaymentsImmediatelyAvailableSubtotal2> | null | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type GetBalanceReportPayments = {
  pending?: PaymentsPending | undefined;
  movedToAvailable?: PaymentsMovedToAvailable | undefined;
  immediatelyAvailable?: PaymentsImmediatelyAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type RefundsPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const RefundsPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type RefundsPendingSubTotalMethod1 = ClosedEnum<
  typeof RefundsPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const RefundsPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type RefundsPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof RefundsPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const RefundsPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type RefundsPendingSubTotalCardAudience1 = ClosedEnum<
  typeof RefundsPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const RefundsPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type RefundsPendingSubTotalCardRegion1 = ClosedEnum<
  typeof RefundsPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const RefundsPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type RefundsPendingSubTotalFeeType1 = ClosedEnum<
  typeof RefundsPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const RefundsPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type RefundsPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof RefundsPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const RefundsPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type RefundsPendingSubTotalTransactionType1 = ClosedEnum<
  typeof RefundsPendingSubTotalTransactionType1
>;

export type RefundsPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: RefundsPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: RefundsPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: RefundsPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: RefundsPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: RefundsPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | RefundsPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: RefundsPendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const RefundsPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type RefundsPendingSubtotalMethod2 = ClosedEnum<
  typeof RefundsPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const RefundsPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type RefundsPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof RefundsPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const RefundsPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type RefundsPendingSubtotalCardAudience2 = ClosedEnum<
  typeof RefundsPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const RefundsPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type RefundsPendingSubtotalCardRegion2 = ClosedEnum<
  typeof RefundsPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const RefundsPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type RefundsPendingSubtotalFeeType2 = ClosedEnum<
  typeof RefundsPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const RefundsPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type RefundsPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof RefundsPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const RefundsPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type RefundsPendingSubtotalTransactionType2 = ClosedEnum<
  typeof RefundsPendingSubtotalTransactionType2
>;

export type RefundsPendingSubtotal2 = {
  subTotals?: Array<RefundsPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: RefundsPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: RefundsPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: RefundsPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: RefundsPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: RefundsPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | RefundsPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: RefundsPendingSubtotalTransactionType2 | null | undefined;
};

export type RefundsPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: RefundsPendingAmount | undefined;
  subtotals?: Array<RefundsPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type RefundsMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const RefundsMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type RefundsMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof RefundsMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const RefundsMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type RefundsMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof RefundsMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const RefundsMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type RefundsMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof RefundsMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const RefundsMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type RefundsMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof RefundsMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const RefundsMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type RefundsMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof RefundsMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const RefundsMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type RefundsMovedToAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof RefundsMovedToAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const RefundsMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type RefundsMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof RefundsMovedToAvailableSubTotalTransactionType1
>;

export type RefundsMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: RefundsMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: RefundsMovedToAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | RefundsMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: RefundsMovedToAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: RefundsMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | RefundsMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | RefundsMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const RefundsMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type RefundsMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof RefundsMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const RefundsMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type RefundsMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof RefundsMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const RefundsMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type RefundsMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof RefundsMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const RefundsMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type RefundsMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof RefundsMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const RefundsMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type RefundsMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof RefundsMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const RefundsMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type RefundsMovedToAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof RefundsMovedToAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const RefundsMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type RefundsMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof RefundsMovedToAvailableSubtotalTransactionType2
>;

export type RefundsMovedToAvailableSubtotal2 = {
  subTotals?: Array<RefundsMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: RefundsMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: RefundsMovedToAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | RefundsMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: RefundsMovedToAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: RefundsMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | RefundsMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | RefundsMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type RefundsMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: RefundsMovedToAvailableAmount | undefined;
  subtotals?: Array<RefundsMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type RefundsImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const RefundsImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type RefundsImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const RefundsImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type RefundsImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const RefundsImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type RefundsImmediatelyAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const RefundsImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type RefundsImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const RefundsImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type RefundsImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const RefundsImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type RefundsImmediatelyAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubTotalTransactionType1
>;

export type RefundsImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: RefundsImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | RefundsImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | RefundsImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | RefundsImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: RefundsImmediatelyAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | RefundsImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | RefundsImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const RefundsImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type RefundsImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const RefundsImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type RefundsImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const RefundsImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type RefundsImmediatelyAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const RefundsImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type RefundsImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const RefundsImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type RefundsImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const RefundsImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type RefundsImmediatelyAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof RefundsImmediatelyAvailableSubtotalTransactionType2
>;

export type RefundsImmediatelyAvailableSubtotal2 = {
  subTotals?: Array<RefundsImmediatelyAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: RefundsImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | RefundsImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | RefundsImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | RefundsImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: RefundsImmediatelyAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | RefundsImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | RefundsImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type RefundsImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: RefundsImmediatelyAvailableAmount | undefined;
  subtotals?: Array<RefundsImmediatelyAvailableSubtotal2> | null | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type GetBalanceReportRefunds = {
  pending?: RefundsPending | undefined;
  movedToAvailable?: RefundsMovedToAvailable | undefined;
  immediatelyAvailable?: RefundsImmediatelyAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ChargebacksPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const ChargebacksPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ChargebacksPendingSubTotalMethod1 = ClosedEnum<
  typeof ChargebacksPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ChargebacksPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ChargebacksPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof ChargebacksPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ChargebacksPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ChargebacksPendingSubTotalCardAudience1 = ClosedEnum<
  typeof ChargebacksPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ChargebacksPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ChargebacksPendingSubTotalCardRegion1 = ClosedEnum<
  typeof ChargebacksPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const ChargebacksPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ChargebacksPendingSubTotalFeeType1 = ClosedEnum<
  typeof ChargebacksPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ChargebacksPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ChargebacksPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof ChargebacksPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const ChargebacksPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ChargebacksPendingSubTotalTransactionType1 = ClosedEnum<
  typeof ChargebacksPendingSubTotalTransactionType1
>;

export type ChargebacksPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ChargebacksPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: ChargebacksPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: ChargebacksPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: ChargebacksPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ChargebacksPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ChargebacksPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | ChargebacksPendingSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const ChargebacksPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ChargebacksPendingSubtotalMethod2 = ClosedEnum<
  typeof ChargebacksPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ChargebacksPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ChargebacksPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof ChargebacksPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ChargebacksPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ChargebacksPendingSubtotalCardAudience2 = ClosedEnum<
  typeof ChargebacksPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ChargebacksPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ChargebacksPendingSubtotalCardRegion2 = ClosedEnum<
  typeof ChargebacksPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const ChargebacksPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ChargebacksPendingSubtotalFeeType2 = ClosedEnum<
  typeof ChargebacksPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ChargebacksPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ChargebacksPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof ChargebacksPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const ChargebacksPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ChargebacksPendingSubtotalTransactionType2 = ClosedEnum<
  typeof ChargebacksPendingSubtotalTransactionType2
>;

export type ChargebacksPendingSubtotal2 = {
  subTotals?: Array<ChargebacksPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ChargebacksPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: ChargebacksPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: ChargebacksPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: ChargebacksPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ChargebacksPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ChargebacksPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | ChargebacksPendingSubtotalTransactionType2
    | null
    | undefined;
};

export type ChargebacksPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: ChargebacksPendingAmount | undefined;
  subtotals?: Array<ChargebacksPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ChargebacksMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const ChargebacksMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ChargebacksMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ChargebacksMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ChargebacksMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ChargebacksMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ChargebacksMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ChargebacksMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ChargebacksMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const ChargebacksMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ChargebacksMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const ChargebacksMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ChargebacksMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubTotalTransactionType1
>;

export type ChargebacksMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ChargebacksMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | ChargebacksMovedToAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | ChargebacksMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | ChargebacksMovedToAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ChargebacksMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ChargebacksMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | ChargebacksMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const ChargebacksMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ChargebacksMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ChargebacksMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ChargebacksMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ChargebacksMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ChargebacksMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ChargebacksMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ChargebacksMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const ChargebacksMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ChargebacksMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const ChargebacksMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ChargebacksMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof ChargebacksMovedToAvailableSubtotalTransactionType2
>;

export type ChargebacksMovedToAvailableSubtotal2 = {
  subTotals?: Array<ChargebacksMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ChargebacksMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | ChargebacksMovedToAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | ChargebacksMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | ChargebacksMovedToAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ChargebacksMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ChargebacksMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | ChargebacksMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type ChargebacksMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: ChargebacksMovedToAvailableAmount | undefined;
  subtotals?: Array<ChargebacksMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ChargebacksImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const ChargebacksImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ChargebacksImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ChargebacksImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ChargebacksImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ChargebacksImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ChargebacksImmediatelyAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ChargebacksImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ChargebacksImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const ChargebacksImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ChargebacksImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<typeof ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1>;

/**
 * Represents the transaction type
 */
export const ChargebacksImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ChargebacksImmediatelyAvailableSubTotalTransactionType1 =
  ClosedEnum<typeof ChargebacksImmediatelyAvailableSubTotalTransactionType1>;

export type ChargebacksImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ChargebacksImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | ChargebacksImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | ChargebacksImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | ChargebacksImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ChargebacksImmediatelyAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | ChargebacksImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const ChargebacksImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type ChargebacksImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const ChargebacksImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type ChargebacksImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const ChargebacksImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type ChargebacksImmediatelyAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const ChargebacksImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type ChargebacksImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const ChargebacksImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type ChargebacksImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof ChargebacksImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<typeof ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2>;

/**
 * Represents the transaction type
 */
export const ChargebacksImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type ChargebacksImmediatelyAvailableSubtotalTransactionType2 =
  ClosedEnum<typeof ChargebacksImmediatelyAvailableSubtotalTransactionType2>;

export type ChargebacksImmediatelyAvailableSubtotal2 = {
  subTotals?:
    | Array<ChargebacksImmediatelyAvailableSubTotal1>
    | null
    | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: ChargebacksImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | ChargebacksImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | ChargebacksImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | ChargebacksImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: ChargebacksImmediatelyAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | ChargebacksImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type ChargebacksImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: ChargebacksImmediatelyAvailableAmount | undefined;
  subtotals?:
    | Array<ChargebacksImmediatelyAvailableSubtotal2>
    | null
    | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type GetBalanceReportChargebacks = {
  pending?: ChargebacksPending | undefined;
  movedToAvailable?: ChargebacksMovedToAvailable | undefined;
  immediatelyAvailable?: ChargebacksImmediatelyAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CapitalPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const CapitalPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CapitalPendingSubTotalMethod1 = ClosedEnum<
  typeof CapitalPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CapitalPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CapitalPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof CapitalPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CapitalPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CapitalPendingSubTotalCardAudience1 = ClosedEnum<
  typeof CapitalPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CapitalPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CapitalPendingSubTotalCardRegion1 = ClosedEnum<
  typeof CapitalPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const CapitalPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CapitalPendingSubTotalFeeType1 = ClosedEnum<
  typeof CapitalPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CapitalPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CapitalPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof CapitalPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const CapitalPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CapitalPendingSubTotalTransactionType1 = ClosedEnum<
  typeof CapitalPendingSubTotalTransactionType1
>;

export type CapitalPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CapitalPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CapitalPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: CapitalPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CapitalPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CapitalPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CapitalPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: CapitalPendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const CapitalPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CapitalPendingSubtotalMethod2 = ClosedEnum<
  typeof CapitalPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CapitalPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CapitalPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof CapitalPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CapitalPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CapitalPendingSubtotalCardAudience2 = ClosedEnum<
  typeof CapitalPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CapitalPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CapitalPendingSubtotalCardRegion2 = ClosedEnum<
  typeof CapitalPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const CapitalPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CapitalPendingSubtotalFeeType2 = ClosedEnum<
  typeof CapitalPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CapitalPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CapitalPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof CapitalPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const CapitalPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CapitalPendingSubtotalTransactionType2 = ClosedEnum<
  typeof CapitalPendingSubtotalTransactionType2
>;

export type CapitalPendingSubtotal2 = {
  subTotals?: Array<CapitalPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CapitalPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CapitalPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: CapitalPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CapitalPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CapitalPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CapitalPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: CapitalPendingSubtotalTransactionType2 | null | undefined;
};

export type CapitalPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: CapitalPendingAmount | undefined;
  subtotals?: Array<CapitalPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CapitalMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const CapitalMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CapitalMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof CapitalMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CapitalMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CapitalMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof CapitalMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CapitalMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CapitalMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof CapitalMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CapitalMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CapitalMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof CapitalMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const CapitalMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CapitalMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof CapitalMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CapitalMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CapitalMovedToAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof CapitalMovedToAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const CapitalMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CapitalMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof CapitalMovedToAvailableSubTotalTransactionType1
>;

export type CapitalMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CapitalMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CapitalMovedToAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CapitalMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CapitalMovedToAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CapitalMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CapitalMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CapitalMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const CapitalMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CapitalMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof CapitalMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CapitalMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CapitalMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof CapitalMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CapitalMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CapitalMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof CapitalMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CapitalMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CapitalMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof CapitalMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const CapitalMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CapitalMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof CapitalMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CapitalMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CapitalMovedToAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof CapitalMovedToAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const CapitalMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CapitalMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof CapitalMovedToAvailableSubtotalTransactionType2
>;

export type CapitalMovedToAvailableSubtotal2 = {
  subTotals?: Array<CapitalMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CapitalMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CapitalMovedToAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CapitalMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CapitalMovedToAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CapitalMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CapitalMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CapitalMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type CapitalMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: CapitalMovedToAvailableAmount | undefined;
  subtotals?: Array<CapitalMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CapitalImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const CapitalImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CapitalImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CapitalImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CapitalImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CapitalImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CapitalImmediatelyAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CapitalImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CapitalImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const CapitalImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CapitalImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const CapitalImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CapitalImmediatelyAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubTotalTransactionType1
>;

export type CapitalImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CapitalImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | CapitalImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CapitalImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | CapitalImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CapitalImmediatelyAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CapitalImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CapitalImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const CapitalImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CapitalImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CapitalImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CapitalImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CapitalImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CapitalImmediatelyAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CapitalImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CapitalImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const CapitalImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CapitalImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const CapitalImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CapitalImmediatelyAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof CapitalImmediatelyAvailableSubtotalTransactionType2
>;

export type CapitalImmediatelyAvailableSubtotal2 = {
  subTotals?: Array<CapitalImmediatelyAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CapitalImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | CapitalImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CapitalImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | CapitalImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CapitalImmediatelyAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CapitalImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CapitalImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type CapitalImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: CapitalImmediatelyAvailableAmount | undefined;
  subtotals?: Array<CapitalImmediatelyAvailableSubtotal2> | null | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type Capital = {
  pending?: CapitalPending | undefined;
  movedToAvailable?: CapitalMovedToAvailable | undefined;
  immediatelyAvailable?: CapitalImmediatelyAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type TransfersPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const TransfersPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TransfersPendingSubTotalMethod1 = ClosedEnum<
  typeof TransfersPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TransfersPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TransfersPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof TransfersPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TransfersPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TransfersPendingSubTotalCardAudience1 = ClosedEnum<
  typeof TransfersPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TransfersPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TransfersPendingSubTotalCardRegion1 = ClosedEnum<
  typeof TransfersPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const TransfersPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TransfersPendingSubTotalFeeType1 = ClosedEnum<
  typeof TransfersPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TransfersPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TransfersPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof TransfersPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const TransfersPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TransfersPendingSubTotalTransactionType1 = ClosedEnum<
  typeof TransfersPendingSubTotalTransactionType1
>;

export type TransfersPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TransfersPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TransfersPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: TransfersPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TransfersPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TransfersPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TransfersPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: TransfersPendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const TransfersPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TransfersPendingSubtotalMethod2 = ClosedEnum<
  typeof TransfersPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TransfersPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TransfersPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof TransfersPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TransfersPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TransfersPendingSubtotalCardAudience2 = ClosedEnum<
  typeof TransfersPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TransfersPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TransfersPendingSubtotalCardRegion2 = ClosedEnum<
  typeof TransfersPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const TransfersPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TransfersPendingSubtotalFeeType2 = ClosedEnum<
  typeof TransfersPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TransfersPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TransfersPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof TransfersPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const TransfersPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TransfersPendingSubtotalTransactionType2 = ClosedEnum<
  typeof TransfersPendingSubtotalTransactionType2
>;

export type TransfersPendingSubtotal2 = {
  subTotals?: Array<TransfersPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TransfersPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TransfersPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: TransfersPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TransfersPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TransfersPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TransfersPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: TransfersPendingSubtotalTransactionType2 | null | undefined;
};

export type TransfersPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: TransfersPendingAmount | undefined;
  subtotals?: Array<TransfersPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type TransfersMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const TransfersMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TransfersMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof TransfersMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TransfersMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TransfersMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof TransfersMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TransfersMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TransfersMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof TransfersMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TransfersMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TransfersMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof TransfersMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const TransfersMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TransfersMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof TransfersMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TransfersMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TransfersMovedToAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof TransfersMovedToAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const TransfersMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TransfersMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof TransfersMovedToAvailableSubTotalTransactionType1
>;

export type TransfersMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TransfersMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TransfersMovedToAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | TransfersMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TransfersMovedToAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TransfersMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TransfersMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TransfersMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const TransfersMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TransfersMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof TransfersMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TransfersMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TransfersMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof TransfersMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TransfersMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TransfersMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof TransfersMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TransfersMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TransfersMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof TransfersMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const TransfersMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TransfersMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof TransfersMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TransfersMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TransfersMovedToAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof TransfersMovedToAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const TransfersMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TransfersMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof TransfersMovedToAvailableSubtotalTransactionType2
>;

export type TransfersMovedToAvailableSubtotal2 = {
  subTotals?: Array<TransfersMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TransfersMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TransfersMovedToAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | TransfersMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TransfersMovedToAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TransfersMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TransfersMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TransfersMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type TransfersMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: TransfersMovedToAvailableAmount | undefined;
  subtotals?: Array<TransfersMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type TransfersImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const TransfersImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TransfersImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TransfersImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TransfersImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TransfersImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TransfersImmediatelyAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TransfersImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TransfersImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const TransfersImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TransfersImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<typeof TransfersImmediatelyAvailableSubTotalPrepaymentPartType1>;

/**
 * Represents the transaction type
 */
export const TransfersImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TransfersImmediatelyAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubTotalTransactionType1
>;

export type TransfersImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TransfersImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | TransfersImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | TransfersImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | TransfersImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TransfersImmediatelyAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TransfersImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TransfersImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const TransfersImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TransfersImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TransfersImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TransfersImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TransfersImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TransfersImmediatelyAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TransfersImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TransfersImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const TransfersImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TransfersImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<typeof TransfersImmediatelyAvailableSubtotalPrepaymentPartType2>;

/**
 * Represents the transaction type
 */
export const TransfersImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TransfersImmediatelyAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof TransfersImmediatelyAvailableSubtotalTransactionType2
>;

export type TransfersImmediatelyAvailableSubtotal2 = {
  subTotals?: Array<TransfersImmediatelyAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TransfersImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | TransfersImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | TransfersImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | TransfersImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TransfersImmediatelyAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TransfersImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TransfersImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type TransfersImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: TransfersImmediatelyAvailableAmount | undefined;
  subtotals?: Array<TransfersImmediatelyAvailableSubtotal2> | null | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type Transfers = {
  pending?: TransfersPending | undefined;
  movedToAvailable?: TransfersMovedToAvailable | undefined;
  immediatelyAvailable?: TransfersImmediatelyAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type FeePrepaymentsPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const FeePrepaymentsPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type FeePrepaymentsPendingSubTotalMethod1 = ClosedEnum<
  typeof FeePrepaymentsPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const FeePrepaymentsPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type FeePrepaymentsPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof FeePrepaymentsPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const FeePrepaymentsPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type FeePrepaymentsPendingSubTotalCardAudience1 = ClosedEnum<
  typeof FeePrepaymentsPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const FeePrepaymentsPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type FeePrepaymentsPendingSubTotalCardRegion1 = ClosedEnum<
  typeof FeePrepaymentsPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const FeePrepaymentsPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type FeePrepaymentsPendingSubTotalFeeType1 = ClosedEnum<
  typeof FeePrepaymentsPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const FeePrepaymentsPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type FeePrepaymentsPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof FeePrepaymentsPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const FeePrepaymentsPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type FeePrepaymentsPendingSubTotalTransactionType1 = ClosedEnum<
  typeof FeePrepaymentsPendingSubTotalTransactionType1
>;

export type FeePrepaymentsPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: FeePrepaymentsPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: FeePrepaymentsPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: FeePrepaymentsPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: FeePrepaymentsPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: FeePrepaymentsPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | FeePrepaymentsPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | FeePrepaymentsPendingSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const FeePrepaymentsPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type FeePrepaymentsPendingSubtotalMethod2 = ClosedEnum<
  typeof FeePrepaymentsPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const FeePrepaymentsPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type FeePrepaymentsPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof FeePrepaymentsPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const FeePrepaymentsPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type FeePrepaymentsPendingSubtotalCardAudience2 = ClosedEnum<
  typeof FeePrepaymentsPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const FeePrepaymentsPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type FeePrepaymentsPendingSubtotalCardRegion2 = ClosedEnum<
  typeof FeePrepaymentsPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const FeePrepaymentsPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type FeePrepaymentsPendingSubtotalFeeType2 = ClosedEnum<
  typeof FeePrepaymentsPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const FeePrepaymentsPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type FeePrepaymentsPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof FeePrepaymentsPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const FeePrepaymentsPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type FeePrepaymentsPendingSubtotalTransactionType2 = ClosedEnum<
  typeof FeePrepaymentsPendingSubtotalTransactionType2
>;

export type FeePrepaymentsPendingSubtotal2 = {
  subTotals?: Array<FeePrepaymentsPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: FeePrepaymentsPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: FeePrepaymentsPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: FeePrepaymentsPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: FeePrepaymentsPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: FeePrepaymentsPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | FeePrepaymentsPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | FeePrepaymentsPendingSubtotalTransactionType2
    | null
    | undefined;
};

export type FeePrepaymentsPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: FeePrepaymentsPendingAmount | undefined;
  subtotals?: Array<FeePrepaymentsPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type FeePrepaymentsMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const FeePrepaymentsMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type FeePrepaymentsMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const FeePrepaymentsMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type FeePrepaymentsMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const FeePrepaymentsMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type FeePrepaymentsMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const FeePrepaymentsMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type FeePrepaymentsMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<typeof FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1>;

/**
 * Represents the transaction type
 */
export const FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubTotalTransactionType1
>;

export type FeePrepaymentsMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: FeePrepaymentsMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | FeePrepaymentsMovedToAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | FeePrepaymentsMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | FeePrepaymentsMovedToAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: FeePrepaymentsMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | FeePrepaymentsMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const FeePrepaymentsMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type FeePrepaymentsMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const FeePrepaymentsMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type FeePrepaymentsMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const FeePrepaymentsMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type FeePrepaymentsMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const FeePrepaymentsMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type FeePrepaymentsMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<typeof FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2>;

/**
 * Represents the transaction type
 */
export const FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof FeePrepaymentsMovedToAvailableSubtotalTransactionType2
>;

export type FeePrepaymentsMovedToAvailableSubtotal2 = {
  subTotals?: Array<FeePrepaymentsMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: FeePrepaymentsMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | FeePrepaymentsMovedToAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | FeePrepaymentsMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | FeePrepaymentsMovedToAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: FeePrepaymentsMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | FeePrepaymentsMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type FeePrepaymentsMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: FeePrepaymentsMovedToAvailableAmount | undefined;
  subtotals?: Array<FeePrepaymentsMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type FeePrepaymentsImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 =
  ClosedEnum<typeof FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1
  >;

/**
 * Represents the transaction type
 */
export const FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 =
  ClosedEnum<typeof FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1>;

export type FeePrepaymentsImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: FeePrepaymentsImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?:
    | FeePrepaymentsImmediatelyAvailableSubTotalFeeType1
    | null
    | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 =
  ClosedEnum<typeof FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof FeePrepaymentsImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2
  >;

/**
 * Represents the transaction type
 */
export const FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 =
  ClosedEnum<typeof FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2>;

export type FeePrepaymentsImmediatelyAvailableSubtotal2 = {
  subTotals?:
    | Array<FeePrepaymentsImmediatelyAvailableSubTotal1>
    | null
    | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: FeePrepaymentsImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?:
    | FeePrepaymentsImmediatelyAvailableSubtotalFeeType2
    | null
    | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type FeePrepaymentsImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: FeePrepaymentsImmediatelyAvailableAmount | undefined;
  subtotals?:
    | Array<FeePrepaymentsImmediatelyAvailableSubtotal2>
    | null
    | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type FeePrepayments = {
  pending?: FeePrepaymentsPending | undefined;
  movedToAvailable?: FeePrepaymentsMovedToAvailable | undefined;
  immediatelyAvailable?: FeePrepaymentsImmediatelyAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CorrectionsPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const CorrectionsPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CorrectionsPendingSubTotalMethod1 = ClosedEnum<
  typeof CorrectionsPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CorrectionsPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CorrectionsPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof CorrectionsPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CorrectionsPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CorrectionsPendingSubTotalCardAudience1 = ClosedEnum<
  typeof CorrectionsPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CorrectionsPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CorrectionsPendingSubTotalCardRegion1 = ClosedEnum<
  typeof CorrectionsPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const CorrectionsPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CorrectionsPendingSubTotalFeeType1 = ClosedEnum<
  typeof CorrectionsPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CorrectionsPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CorrectionsPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof CorrectionsPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const CorrectionsPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CorrectionsPendingSubTotalTransactionType1 = ClosedEnum<
  typeof CorrectionsPendingSubTotalTransactionType1
>;

export type CorrectionsPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CorrectionsPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CorrectionsPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: CorrectionsPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CorrectionsPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CorrectionsPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CorrectionsPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CorrectionsPendingSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const CorrectionsPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CorrectionsPendingSubtotalMethod2 = ClosedEnum<
  typeof CorrectionsPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CorrectionsPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CorrectionsPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof CorrectionsPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CorrectionsPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CorrectionsPendingSubtotalCardAudience2 = ClosedEnum<
  typeof CorrectionsPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CorrectionsPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CorrectionsPendingSubtotalCardRegion2 = ClosedEnum<
  typeof CorrectionsPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const CorrectionsPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CorrectionsPendingSubtotalFeeType2 = ClosedEnum<
  typeof CorrectionsPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CorrectionsPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CorrectionsPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof CorrectionsPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const CorrectionsPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CorrectionsPendingSubtotalTransactionType2 = ClosedEnum<
  typeof CorrectionsPendingSubtotalTransactionType2
>;

export type CorrectionsPendingSubtotal2 = {
  subTotals?: Array<CorrectionsPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CorrectionsPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: CorrectionsPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: CorrectionsPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: CorrectionsPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CorrectionsPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CorrectionsPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CorrectionsPendingSubtotalTransactionType2
    | null
    | undefined;
};

export type CorrectionsPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: CorrectionsPendingAmount | undefined;
  subtotals?: Array<CorrectionsPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CorrectionsMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const CorrectionsMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CorrectionsMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CorrectionsMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CorrectionsMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CorrectionsMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CorrectionsMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CorrectionsMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CorrectionsMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const CorrectionsMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CorrectionsMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const CorrectionsMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CorrectionsMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubTotalTransactionType1
>;

export type CorrectionsMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CorrectionsMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | CorrectionsMovedToAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CorrectionsMovedToAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | CorrectionsMovedToAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CorrectionsMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CorrectionsMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CorrectionsMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const CorrectionsMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CorrectionsMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CorrectionsMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CorrectionsMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CorrectionsMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CorrectionsMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CorrectionsMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CorrectionsMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const CorrectionsMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CorrectionsMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const CorrectionsMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CorrectionsMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof CorrectionsMovedToAvailableSubtotalTransactionType2
>;

export type CorrectionsMovedToAvailableSubtotal2 = {
  subTotals?: Array<CorrectionsMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CorrectionsMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | CorrectionsMovedToAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CorrectionsMovedToAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | CorrectionsMovedToAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CorrectionsMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CorrectionsMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CorrectionsMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type CorrectionsMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: CorrectionsMovedToAvailableAmount | undefined;
  subtotals?: Array<CorrectionsMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CorrectionsImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const CorrectionsImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CorrectionsImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CorrectionsImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CorrectionsImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CorrectionsImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CorrectionsImmediatelyAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CorrectionsImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CorrectionsImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const CorrectionsImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CorrectionsImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 =
  ClosedEnum<typeof CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1>;

/**
 * Represents the transaction type
 */
export const CorrectionsImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CorrectionsImmediatelyAvailableSubTotalTransactionType1 =
  ClosedEnum<typeof CorrectionsImmediatelyAvailableSubTotalTransactionType1>;

export type CorrectionsImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CorrectionsImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | CorrectionsImmediatelyAvailableSubTotalCardIssuer1
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CorrectionsImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | CorrectionsImmediatelyAvailableSubTotalCardRegion1
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CorrectionsImmediatelyAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CorrectionsImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const CorrectionsImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type CorrectionsImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const CorrectionsImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type CorrectionsImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const CorrectionsImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type CorrectionsImmediatelyAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const CorrectionsImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type CorrectionsImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const CorrectionsImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type CorrectionsImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof CorrectionsImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 =
  ClosedEnum<typeof CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2>;

/**
 * Represents the transaction type
 */
export const CorrectionsImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type CorrectionsImmediatelyAvailableSubtotalTransactionType2 =
  ClosedEnum<typeof CorrectionsImmediatelyAvailableSubtotalTransactionType2>;

export type CorrectionsImmediatelyAvailableSubtotal2 = {
  subTotals?:
    | Array<CorrectionsImmediatelyAvailableSubTotal1>
    | null
    | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: CorrectionsImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?:
    | CorrectionsImmediatelyAvailableSubtotalCardIssuer2
    | null
    | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | CorrectionsImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?:
    | CorrectionsImmediatelyAvailableSubtotalCardRegion2
    | null
    | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: CorrectionsImmediatelyAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | CorrectionsImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type CorrectionsImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: CorrectionsImmediatelyAvailableAmount | undefined;
  subtotals?:
    | Array<CorrectionsImmediatelyAvailableSubtotal2>
    | null
    | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type Corrections = {
  pending?: CorrectionsPending | undefined;
  movedToAvailable?: CorrectionsMovedToAvailable | undefined;
  immediatelyAvailable?: CorrectionsImmediatelyAvailable | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type TopupsPendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const TopupsPendingSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TopupsPendingSubTotalMethod1 = ClosedEnum<
  typeof TopupsPendingSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TopupsPendingSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TopupsPendingSubTotalCardIssuer1 = ClosedEnum<
  typeof TopupsPendingSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TopupsPendingSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TopupsPendingSubTotalCardAudience1 = ClosedEnum<
  typeof TopupsPendingSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TopupsPendingSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TopupsPendingSubTotalCardRegion1 = ClosedEnum<
  typeof TopupsPendingSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const TopupsPendingSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TopupsPendingSubTotalFeeType1 = ClosedEnum<
  typeof TopupsPendingSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TopupsPendingSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TopupsPendingSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof TopupsPendingSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const TopupsPendingSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TopupsPendingSubTotalTransactionType1 = ClosedEnum<
  typeof TopupsPendingSubTotalTransactionType1
>;

export type TopupsPendingSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TopupsPendingSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TopupsPendingSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: TopupsPendingSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TopupsPendingSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TopupsPendingSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TopupsPendingSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: TopupsPendingSubTotalTransactionType1 | null | undefined;
};

/**
 * Payment type of the transactions
 */
export const TopupsPendingSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TopupsPendingSubtotalMethod2 = ClosedEnum<
  typeof TopupsPendingSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TopupsPendingSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TopupsPendingSubtotalCardIssuer2 = ClosedEnum<
  typeof TopupsPendingSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TopupsPendingSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TopupsPendingSubtotalCardAudience2 = ClosedEnum<
  typeof TopupsPendingSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TopupsPendingSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TopupsPendingSubtotalCardRegion2 = ClosedEnum<
  typeof TopupsPendingSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const TopupsPendingSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TopupsPendingSubtotalFeeType2 = ClosedEnum<
  typeof TopupsPendingSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TopupsPendingSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TopupsPendingSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof TopupsPendingSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const TopupsPendingSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TopupsPendingSubtotalTransactionType2 = ClosedEnum<
  typeof TopupsPendingSubtotalTransactionType2
>;

export type TopupsPendingSubtotal2 = {
  subTotals?: Array<TopupsPendingSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TopupsPendingSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TopupsPendingSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: TopupsPendingSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TopupsPendingSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TopupsPendingSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TopupsPendingSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?: TopupsPendingSubtotalTransactionType2 | null | undefined;
};

export type TopupsPending = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: TopupsPendingAmount | undefined;
  subtotals?: Array<TopupsPendingSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type TopupsMovedToAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const TopupsMovedToAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TopupsMovedToAvailableSubTotalMethod1 = ClosedEnum<
  typeof TopupsMovedToAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TopupsMovedToAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TopupsMovedToAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof TopupsMovedToAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TopupsMovedToAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TopupsMovedToAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof TopupsMovedToAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TopupsMovedToAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TopupsMovedToAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof TopupsMovedToAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const TopupsMovedToAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TopupsMovedToAvailableSubTotalFeeType1 = ClosedEnum<
  typeof TopupsMovedToAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TopupsMovedToAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TopupsMovedToAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof TopupsMovedToAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const TopupsMovedToAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TopupsMovedToAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof TopupsMovedToAvailableSubTotalTransactionType1
>;

export type TopupsMovedToAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TopupsMovedToAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TopupsMovedToAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: TopupsMovedToAvailableSubTotalCardAudience1 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TopupsMovedToAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TopupsMovedToAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TopupsMovedToAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TopupsMovedToAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const TopupsMovedToAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TopupsMovedToAvailableSubtotalMethod2 = ClosedEnum<
  typeof TopupsMovedToAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TopupsMovedToAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TopupsMovedToAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof TopupsMovedToAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TopupsMovedToAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TopupsMovedToAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof TopupsMovedToAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TopupsMovedToAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TopupsMovedToAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof TopupsMovedToAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const TopupsMovedToAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TopupsMovedToAvailableSubtotalFeeType2 = ClosedEnum<
  typeof TopupsMovedToAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TopupsMovedToAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TopupsMovedToAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof TopupsMovedToAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const TopupsMovedToAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TopupsMovedToAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof TopupsMovedToAvailableSubtotalTransactionType2
>;

export type TopupsMovedToAvailableSubtotal2 = {
  subTotals?: Array<TopupsMovedToAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TopupsMovedToAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TopupsMovedToAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?: TopupsMovedToAvailableSubtotalCardAudience2 | null | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TopupsMovedToAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TopupsMovedToAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TopupsMovedToAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TopupsMovedToAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type TopupsMovedToAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: TopupsMovedToAvailableAmount | undefined;
  subtotals?: Array<TopupsMovedToAvailableSubtotal2> | null | undefined;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type TopupsImmediatelyAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Payment type of the transactions
 */
export const TopupsImmediatelyAvailableSubTotalMethod1 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TopupsImmediatelyAvailableSubTotalMethod1 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubTotalMethod1
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TopupsImmediatelyAvailableSubTotalCardIssuer1 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TopupsImmediatelyAvailableSubTotalCardIssuer1 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubTotalCardIssuer1
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TopupsImmediatelyAvailableSubTotalCardAudience1 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TopupsImmediatelyAvailableSubTotalCardAudience1 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubTotalCardAudience1
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TopupsImmediatelyAvailableSubTotalCardRegion1 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TopupsImmediatelyAvailableSubTotalCardRegion1 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubTotalCardRegion1
>;

/**
 * Present when the transaction represents a fee.
 */
export const TopupsImmediatelyAvailableSubTotalFeeType1 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TopupsImmediatelyAvailableSubTotalFeeType1 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubTotalFeeType1
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubTotalPrepaymentPartType1
>;

/**
 * Represents the transaction type
 */
export const TopupsImmediatelyAvailableSubTotalTransactionType1 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TopupsImmediatelyAvailableSubTotalTransactionType1 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubTotalTransactionType1
>;

export type TopupsImmediatelyAvailableSubTotal1 = {
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TopupsImmediatelyAvailableSubTotalMethod1 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TopupsImmediatelyAvailableSubTotalCardIssuer1 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | TopupsImmediatelyAvailableSubTotalCardAudience1
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TopupsImmediatelyAvailableSubTotalCardRegion1 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TopupsImmediatelyAvailableSubTotalFeeType1 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TopupsImmediatelyAvailableSubTotalPrepaymentPartType1
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TopupsImmediatelyAvailableSubTotalTransactionType1
    | null
    | undefined;
};

/**
 * Payment type of the transactions
 */
export const TopupsImmediatelyAvailableSubtotalMethod2 = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * Payment type of the transactions
 */
export type TopupsImmediatelyAvailableSubtotalMethod2 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubtotalMethod2
>;

/**
 * In case of payments transactions with card, the card issuer will be available
 */
export const TopupsImmediatelyAvailableSubtotalCardIssuer2 = {
  Amex: "amex",
  Maestro: "maestro",
  CarteBancaire: "carte-bancaire",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card issuer will be available
 */
export type TopupsImmediatelyAvailableSubtotalCardIssuer2 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubtotalCardIssuer2
>;

/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export const TopupsImmediatelyAvailableSubtotalCardAudience2 = {
  Corporate: "corporate",
  Other: "other",
} as const;
/**
 * In case of payments trnsactions with card, the card audience will be available.
 */
export type TopupsImmediatelyAvailableSubtotalCardAudience2 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubtotalCardAudience2
>;

/**
 * In case of payments transactions with card, the card region will be available.
 */
export const TopupsImmediatelyAvailableSubtotalCardRegion2 = {
  IntraEea: "intra-eea",
  IntraEu: "intra-eu",
  Domestic: "domestic",
  Other: "other",
} as const;
/**
 * In case of payments transactions with card, the card region will be available.
 */
export type TopupsImmediatelyAvailableSubtotalCardRegion2 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubtotalCardRegion2
>;

/**
 * Present when the transaction represents a fee.
 */
export const TopupsImmediatelyAvailableSubtotalFeeType2 = {
  PaymentFee: "payment-fee",
  DirectDebitFailureFee: "direct-debit-failure-fee",
  UnauthorizedDirectDebitFee: "unauthorized-direct-debit-fee",
  BankChargedDirectDebitFailureFee: "bank-charged-direct-debit-failure-fee",
  PartnerCommission: "partner-commission",
  ApplicationFee: "application-fee",
  CaptureFee: "capture-fee",
  RefundFee: "refund-fee",
  ChargebackFee: "chargeback-fee",
  PaymentNotificationFee: "payment-notification-fee",
  TransferNotificationFee: "transfer-notification-fee",
  PayoutFee: "payout-fee",
  FeeDiscount: "fee-discount",
  FeeReimbursement: "fee-reimbursement",
  PlatformVolumeFee: "platform-volume-fee",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  BalanceChargeFee: "balance-charge-fee",
  ThreedsAuthenticationAttemptFee: "3ds-authentication-attempt-fee",
  TerminalMonthlyFee: "terminal-monthly-fee",
  AcceptanceRiskFee: "acceptance-risk-fee",
  TopUpFee: "top-up-fee",
  PaymentGatewayFee: "payment-gateway-fee",
  MastercardSpecialtyMerchantProgramProcessingFee:
    "mastercard-specialty-merchant-program-processing-fee",
  MastercardSpecialtyMerchantProgramRegistrationFee:
    "mastercard-specialty-merchant-program-registration-fee",
  VisaIntegrityRiskProgramProcessingFee:
    "visa-integrity-risk-program-processing-fee",
  VisaIntegrityRiskProgramRegistrationFee:
    "visa-integrity-risk-program-registration-fee",
  MinimumInvoiceAmountFee: "minimum-invoice-amount-fee",
} as const;
/**
 * Present when the transaction represents a fee.
 */
export type TopupsImmediatelyAvailableSubtotalFeeType2 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubtotalFeeType2
>;

/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export const TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 = {
  Fee: "fee",
  FeeReimbursement: "fee-reimbursement",
  FeeDiscount: "fee-discount",
  FeeVat: "fee-vat",
  FeeRoundingCompensation: "fee-rounding-compensation",
} as const;
/**
 * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
 */
export type TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubtotalPrepaymentPartType2
>;

/**
 * Represents the transaction type
 */
export const TopupsImmediatelyAvailableSubtotalTransactionType2 = {
  Payment: "payment",
  SplitPayment: "split-payment",
  FailedPayment: "failed-payment",
  FailedPlatformSplitPayment: "failed-platform-split-payment",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  Capture: "capture",
  SplitTransaction: "split-transaction",
  Refund: "refund",
  PlatformPaymentRefund: "platform-payment-refund",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedRefund: "returned-refund",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  ChargebackCompensation: "chargeback-compensation",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  FeePrepayment: "fee-prepayment",
  OutgoingTransfer: "outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  CanceledTransfer: "canceled-transfer",
  ReturnedTransfer: "returned-transfer",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  InvoiceRoundingCompensation: "invoice-rounding-compensation",
  RollingReserveHold: "rolling-reserve-hold",
  RollingReserveRelease: "rolling-reserve-release",
  BalanceCorrection: "balance-correction",
  Repayment: "repayment",
  Loan: "loan",
  BalanceTopup: "balance-topup",
  CashCollateralIssuance: "cash-collateral-issuance';",
  CashCollateralRelease: "cash-collateral-release",
  PendingRollingReserve: "pending-rolling-reserve",
  ToBeReleasedRollingReserve: "to-be-released-rolling-reserve",
  HeldRollingReserve: "held-rolling-reserve",
  ReleasedRollingReserve: "released-rolling-reserve",
} as const;
/**
 * Represents the transaction type
 */
export type TopupsImmediatelyAvailableSubtotalTransactionType2 = ClosedEnum<
  typeof TopupsImmediatelyAvailableSubtotalTransactionType2
>;

export type TopupsImmediatelyAvailableSubtotal2 = {
  subTotals?: Array<TopupsImmediatelyAvailableSubTotal1> | null | undefined;
  /**
   * Number of transactions of this type
   */
  count?: number | undefined;
  /**
   * Payment type of the transactions
   */
  method?: TopupsImmediatelyAvailableSubtotalMethod2 | null | undefined;
  /**
   * In case of payments transactions with card, the card issuer will be available
   */
  cardIssuer?: TopupsImmediatelyAvailableSubtotalCardIssuer2 | null | undefined;
  /**
   * In case of payments trnsactions with card, the card audience will be available.
   */
  cardAudience?:
    | TopupsImmediatelyAvailableSubtotalCardAudience2
    | null
    | undefined;
  /**
   * In case of payments transactions with card, the card region will be available.
   */
  cardRegion?: TopupsImmediatelyAvailableSubtotalCardRegion2 | null | undefined;
  /**
   * Present when the transaction represents a fee.
   */
  feeType?: TopupsImmediatelyAvailableSubtotalFeeType2 | null | undefined;
  /**
   * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
   */
  prepaymentPartType?:
    | TopupsImmediatelyAvailableSubtotalPrepaymentPartType2
    | null
    | undefined;
  /**
   * Represents the transaction type
   */
  transactionType?:
    | TopupsImmediatelyAvailableSubtotalTransactionType2
    | null
    | undefined;
};

export type TopupsImmediatelyAvailable = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: TopupsImmediatelyAvailableAmount | undefined;
  subtotals?: Array<TopupsImmediatelyAvailableSubtotal2> | null | undefined;
};

/**
 * Only available on `transaction-categories` grouping.
 */
export type Topups = {
  pending?: TopupsPending | undefined;
  movedToAvailable?: TopupsMovedToAvailable | undefined;
  immediatelyAvailable?: TopupsImmediatelyAvailable | undefined;
};

/**
 * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
 *
 * @remarks
 * typical grouping looks like.
 *
 * If grouping `status-balances` is chosen, the main grouping is as follows:
 *
 * * `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
 * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
 *
 * If grouping `transaction-categories` is chosen, the main grouping is as follows:
 *
 * * `open` and `close` groups, each containing a `pending` and `available` sub-group
 * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
 * each containing a `pending`, `movedToAvailable`, and
 * `immediatelyAvailable` sub-group
 *
 * Each sub-group typically has:
 *
 * * An `amount` object containing the group's total amount
 * * A `count` integer if relevant (for example, counting the number of refunds)
 * * A `subtotals` array containing more sub-group objects if applicable
 */
export type Totals = {
  /**
   * The pending balance. Only available if grouping is `status-balances`.
   */
  pendingBalance?: PendingBalance | null | undefined;
  /**
   * The available balance. Only available if grouping is `status-balances`.
   */
  availableBalance?: AvailableBalance | null | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  open?: Open | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  close?: Close | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  payments?: GetBalanceReportPayments | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  refunds?: GetBalanceReportRefunds | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  chargebacks?: GetBalanceReportChargebacks | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  capital?: Capital | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  transfers?: Transfers | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  feePrepayments?: FeePrepayments | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  corrections?: Corrections | undefined;
  /**
   * Only available on `transaction-categories` grouping.
   */
  topups?: Topups | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetBalanceReportSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetBalanceReportDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetBalanceReportLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetBalanceReportSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetBalanceReportDocumentation | undefined;
};

/**
 * The balance report object.
 */
export type GetBalanceReportResponse = {
  /**
   * Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The ID of the balance this report is generated for.
   */
  balanceId?: string | undefined;
  /**
   * The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
   */
  timeZone?: string | undefined;
  /**
   * The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
   *
   * @remarks
   * This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
   * onwards.
   */
  from?: string | undefined;
  /**
   * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
   *
   * @remarks
   * This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
   */
  until?: string | undefined;
  /**
   * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
   *
   * @remarks
   * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
   * by transaction type, and then by other sub-groupings where available (e.g. payment method).
   *
   * With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
   * movement, and then again by other sub-groupings where available.
   *
   * Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
   * of the report.
   */
  grouping?: GroupingResponse | undefined;
  /**
   * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
   *
   * @remarks
   * typical grouping looks like.
   *
   * If grouping `status-balances` is chosen, the main grouping is as follows:
   *
   * * `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
   * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
   *
   * If grouping `transaction-categories` is chosen, the main grouping is as follows:
   *
   * * `open` and `close` groups, each containing a `pending` and `available` sub-group
   * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
   * each containing a `pending`, `movedToAvailable`, and
   * `immediatelyAvailable` sub-group
   *
   * Each sub-group typically has:
   *
   * * An `amount` object containing the group's total amount
   * * A `count` integer if relevant (for example, counting the number of refunds)
   * * A `subtotals` array containing more sub-group objects if applicable
   */
  totals?: Totals | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetBalanceReportLinks | undefined;
};

/** @internal */
export const QueryParamGrouping$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamGrouping
> = z.nativeEnum(QueryParamGrouping);

/** @internal */
export const QueryParamGrouping$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamGrouping
> = QueryParamGrouping$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamGrouping$ {
  /** @deprecated use `QueryParamGrouping$inboundSchema` instead. */
  export const inboundSchema = QueryParamGrouping$inboundSchema;
  /** @deprecated use `QueryParamGrouping$outboundSchema` instead. */
  export const outboundSchema = QueryParamGrouping$outboundSchema;
}

/** @internal */
export const GetBalanceReportRequest$inboundSchema: z.ZodType<
  GetBalanceReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  balanceId: z.string(),
  from: z.string(),
  until: z.string(),
  grouping: z.nullable(QueryParamGrouping$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetBalanceReportRequest$Outbound = {
  balanceId: string;
  from: string;
  until: string;
  grouping?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetBalanceReportRequest$outboundSchema: z.ZodType<
  GetBalanceReportRequest$Outbound,
  z.ZodTypeDef,
  GetBalanceReportRequest
> = z.object({
  balanceId: z.string(),
  from: z.string(),
  until: z.string(),
  grouping: z.nullable(QueryParamGrouping$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportRequest$ {
  /** @deprecated use `GetBalanceReportRequest$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportRequest$inboundSchema;
  /** @deprecated use `GetBalanceReportRequest$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportRequest$outboundSchema;
  /** @deprecated use `GetBalanceReportRequest$Outbound` instead. */
  export type Outbound = GetBalanceReportRequest$Outbound;
}

export function getBalanceReportRequestToJSON(
  getBalanceReportRequest: GetBalanceReportRequest,
): string {
  return JSON.stringify(
    GetBalanceReportRequest$outboundSchema.parse(getBalanceReportRequest),
  );
}

export function getBalanceReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportRequest' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    GetBalanceReportUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetBalanceReportUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetBalanceReportUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    GetBalanceReportUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    GetBalanceReportUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportUnprocessableEntityDocumentation$ {
  /** @deprecated use `GetBalanceReportUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetBalanceReportUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `GetBalanceReportUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetBalanceReportUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `GetBalanceReportUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    GetBalanceReportUnprocessableEntityDocumentation$Outbound;
}

export function getBalanceReportUnprocessableEntityDocumentationToJSON(
  getBalanceReportUnprocessableEntityDocumentation:
    GetBalanceReportUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    GetBalanceReportUnprocessableEntityDocumentation$outboundSchema.parse(
      getBalanceReportUnprocessableEntityDocumentation,
    ),
  );
}

export function getBalanceReportUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetBalanceReportUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetBalanceReportUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetBalanceReportUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportUnprocessableEntityLinks$inboundSchema: z.ZodType<
  GetBalanceReportUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetBalanceReportUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetBalanceReportUnprocessableEntityLinks$Outbound = {
  documentation: GetBalanceReportUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const GetBalanceReportUnprocessableEntityLinks$outboundSchema: z.ZodType<
  GetBalanceReportUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  GetBalanceReportUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    GetBalanceReportUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportUnprocessableEntityLinks$ {
  /** @deprecated use `GetBalanceReportUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetBalanceReportUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `GetBalanceReportUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetBalanceReportUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `GetBalanceReportUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = GetBalanceReportUnprocessableEntityLinks$Outbound;
}

export function getBalanceReportUnprocessableEntityLinksToJSON(
  getBalanceReportUnprocessableEntityLinks:
    GetBalanceReportUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    GetBalanceReportUnprocessableEntityLinks$outboundSchema.parse(
      getBalanceReportUnprocessableEntityLinks,
    ),
  );
}

export function getBalanceReportUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetBalanceReportUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetBalanceReportUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetBalanceReportUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportNotFoundDocumentation$inboundSchema: z.ZodType<
  GetBalanceReportNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetBalanceReportNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetBalanceReportNotFoundDocumentation$outboundSchema: z.ZodType<
  GetBalanceReportNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetBalanceReportNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportNotFoundDocumentation$ {
  /** @deprecated use `GetBalanceReportNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetBalanceReportNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetBalanceReportNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetBalanceReportNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetBalanceReportNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetBalanceReportNotFoundDocumentation$Outbound;
}

export function getBalanceReportNotFoundDocumentationToJSON(
  getBalanceReportNotFoundDocumentation: GetBalanceReportNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetBalanceReportNotFoundDocumentation$outboundSchema.parse(
      getBalanceReportNotFoundDocumentation,
    ),
  );
}

export function getBalanceReportNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetBalanceReportNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportNotFoundLinks$inboundSchema: z.ZodType<
  GetBalanceReportNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetBalanceReportNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetBalanceReportNotFoundLinks$Outbound = {
  documentation: GetBalanceReportNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetBalanceReportNotFoundLinks$outboundSchema: z.ZodType<
  GetBalanceReportNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetBalanceReportNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetBalanceReportNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportNotFoundLinks$ {
  /** @deprecated use `GetBalanceReportNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportNotFoundLinks$inboundSchema;
  /** @deprecated use `GetBalanceReportNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportNotFoundLinks$outboundSchema;
  /** @deprecated use `GetBalanceReportNotFoundLinks$Outbound` instead. */
  export type Outbound = GetBalanceReportNotFoundLinks$Outbound;
}

export function getBalanceReportNotFoundLinksToJSON(
  getBalanceReportNotFoundLinks: GetBalanceReportNotFoundLinks,
): string {
  return JSON.stringify(
    GetBalanceReportNotFoundLinks$outboundSchema.parse(
      getBalanceReportNotFoundLinks,
    ),
  );
}

export function getBalanceReportNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GroupingResponse$inboundSchema: z.ZodNativeEnum<
  typeof GroupingResponse
> = z.nativeEnum(GroupingResponse);

/** @internal */
export const GroupingResponse$outboundSchema: z.ZodNativeEnum<
  typeof GroupingResponse
> = GroupingResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupingResponse$ {
  /** @deprecated use `GroupingResponse$inboundSchema` instead. */
  export const inboundSchema = GroupingResponse$inboundSchema;
  /** @deprecated use `GroupingResponse$outboundSchema` instead. */
  export const outboundSchema = GroupingResponse$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenAmount$inboundSchema: z.ZodType<
  PendingBalanceOpenAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type PendingBalanceOpenAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const PendingBalanceOpenAmount$outboundSchema: z.ZodType<
  PendingBalanceOpenAmount$Outbound,
  z.ZodTypeDef,
  PendingBalanceOpenAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenAmount$ {
  /** @deprecated use `PendingBalanceOpenAmount$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpenAmount$inboundSchema;
  /** @deprecated use `PendingBalanceOpenAmount$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceOpenAmount$outboundSchema;
  /** @deprecated use `PendingBalanceOpenAmount$Outbound` instead. */
  export type Outbound = PendingBalanceOpenAmount$Outbound;
}

export function pendingBalanceOpenAmountToJSON(
  pendingBalanceOpenAmount: PendingBalanceOpenAmount,
): string {
  return JSON.stringify(
    PendingBalanceOpenAmount$outboundSchema.parse(pendingBalanceOpenAmount),
  );
}

export function pendingBalanceOpenAmountFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceOpenAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceOpenAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceOpenAmount' from JSON`,
  );
}

/** @internal */
export const PendingBalanceOpenSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubTotalMethod1
> = z.nativeEnum(PendingBalanceOpenSubTotalMethod1);

/** @internal */
export const PendingBalanceOpenSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubTotalMethod1
> = PendingBalanceOpenSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotalMethod1$ {
  /** @deprecated use `PendingBalanceOpenSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpenSubTotalMethod1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubTotalMethod1$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalCardIssuer1> = z.nativeEnum(
    PendingBalanceOpenSubTotalCardIssuer1,
  );

/** @internal */
export const PendingBalanceOpenSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalCardIssuer1> =
    PendingBalanceOpenSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotalCardIssuer1$ {
  /** @deprecated use `PendingBalanceOpenSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalCardAudience1> = z
    .nativeEnum(PendingBalanceOpenSubTotalCardAudience1);

/** @internal */
export const PendingBalanceOpenSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalCardAudience1> =
    PendingBalanceOpenSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotalCardAudience1$ {
  /** @deprecated use `PendingBalanceOpenSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalCardRegion1> = z.nativeEnum(
    PendingBalanceOpenSubTotalCardRegion1,
  );

/** @internal */
export const PendingBalanceOpenSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalCardRegion1> =
    PendingBalanceOpenSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotalCardRegion1$ {
  /** @deprecated use `PendingBalanceOpenSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubTotalFeeType1
> = z.nativeEnum(PendingBalanceOpenSubTotalFeeType1);

/** @internal */
export const PendingBalanceOpenSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubTotalFeeType1
> = PendingBalanceOpenSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotalFeeType1$ {
  /** @deprecated use `PendingBalanceOpenSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpenSubTotalFeeType1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalPrepaymentPartType1> = z
    .nativeEnum(PendingBalanceOpenSubTotalPrepaymentPartType1);

/** @internal */
export const PendingBalanceOpenSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalPrepaymentPartType1> =
    PendingBalanceOpenSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotalPrepaymentPartType1$ {
  /** @deprecated use `PendingBalanceOpenSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalTransactionType1> = z
    .nativeEnum(PendingBalanceOpenSubTotalTransactionType1);

/** @internal */
export const PendingBalanceOpenSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubTotalTransactionType1> =
    PendingBalanceOpenSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotalTransactionType1$ {
  /** @deprecated use `PendingBalanceOpenSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubTotal1$inboundSchema: z.ZodType<
  PendingBalanceOpenSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceOpenSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceOpenSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceOpenSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceOpenSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceOpenSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceOpenSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceOpenSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type PendingBalanceOpenSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalanceOpenSubTotal1$outboundSchema: z.ZodType<
  PendingBalanceOpenSubTotal1$Outbound,
  z.ZodTypeDef,
  PendingBalanceOpenSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceOpenSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceOpenSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceOpenSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceOpenSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceOpenSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceOpenSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceOpenSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubTotal1$ {
  /** @deprecated use `PendingBalanceOpenSubTotal1$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpenSubTotal1$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotal1$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceOpenSubTotal1$outboundSchema;
  /** @deprecated use `PendingBalanceOpenSubTotal1$Outbound` instead. */
  export type Outbound = PendingBalanceOpenSubTotal1$Outbound;
}

export function pendingBalanceOpenSubTotal1ToJSON(
  pendingBalanceOpenSubTotal1: PendingBalanceOpenSubTotal1,
): string {
  return JSON.stringify(
    PendingBalanceOpenSubTotal1$outboundSchema.parse(
      pendingBalanceOpenSubTotal1,
    ),
  );
}

export function pendingBalanceOpenSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceOpenSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceOpenSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceOpenSubTotal1' from JSON`,
  );
}

/** @internal */
export const PendingBalanceOpenSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubtotalMethod2
> = z.nativeEnum(PendingBalanceOpenSubtotalMethod2);

/** @internal */
export const PendingBalanceOpenSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubtotalMethod2
> = PendingBalanceOpenSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotalMethod2$ {
  /** @deprecated use `PendingBalanceOpenSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpenSubtotalMethod2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubtotalMethod2$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalCardIssuer2> = z.nativeEnum(
    PendingBalanceOpenSubtotalCardIssuer2,
  );

/** @internal */
export const PendingBalanceOpenSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalCardIssuer2> =
    PendingBalanceOpenSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotalCardIssuer2$ {
  /** @deprecated use `PendingBalanceOpenSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalCardAudience2> = z
    .nativeEnum(PendingBalanceOpenSubtotalCardAudience2);

/** @internal */
export const PendingBalanceOpenSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalCardAudience2> =
    PendingBalanceOpenSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotalCardAudience2$ {
  /** @deprecated use `PendingBalanceOpenSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalCardRegion2> = z.nativeEnum(
    PendingBalanceOpenSubtotalCardRegion2,
  );

/** @internal */
export const PendingBalanceOpenSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalCardRegion2> =
    PendingBalanceOpenSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotalCardRegion2$ {
  /** @deprecated use `PendingBalanceOpenSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubtotalFeeType2
> = z.nativeEnum(PendingBalanceOpenSubtotalFeeType2);

/** @internal */
export const PendingBalanceOpenSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceOpenSubtotalFeeType2
> = PendingBalanceOpenSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotalFeeType2$ {
  /** @deprecated use `PendingBalanceOpenSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpenSubtotalFeeType2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalPrepaymentPartType2> = z
    .nativeEnum(PendingBalanceOpenSubtotalPrepaymentPartType2);

/** @internal */
export const PendingBalanceOpenSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalPrepaymentPartType2> =
    PendingBalanceOpenSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotalPrepaymentPartType2$ {
  /** @deprecated use `PendingBalanceOpenSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalTransactionType2> = z
    .nativeEnum(PendingBalanceOpenSubtotalTransactionType2);

/** @internal */
export const PendingBalanceOpenSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceOpenSubtotalTransactionType2> =
    PendingBalanceOpenSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotalTransactionType2$ {
  /** @deprecated use `PendingBalanceOpenSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceOpenSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceOpenSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const PendingBalanceOpenSubtotal2$inboundSchema: z.ZodType<
  PendingBalanceOpenSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => PendingBalanceOpenSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceOpenSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceOpenSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceOpenSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceOpenSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceOpenSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceOpenSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceOpenSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type PendingBalanceOpenSubtotal2$Outbound = {
  "sub-totals"?: Array<PendingBalanceOpenSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalanceOpenSubtotal2$outboundSchema: z.ZodType<
  PendingBalanceOpenSubtotal2$Outbound,
  z.ZodTypeDef,
  PendingBalanceOpenSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => PendingBalanceOpenSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceOpenSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceOpenSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceOpenSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceOpenSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceOpenSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceOpenSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceOpenSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpenSubtotal2$ {
  /** @deprecated use `PendingBalanceOpenSubtotal2$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpenSubtotal2$inboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotal2$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceOpenSubtotal2$outboundSchema;
  /** @deprecated use `PendingBalanceOpenSubtotal2$Outbound` instead. */
  export type Outbound = PendingBalanceOpenSubtotal2$Outbound;
}

export function pendingBalanceOpenSubtotal2ToJSON(
  pendingBalanceOpenSubtotal2: PendingBalanceOpenSubtotal2,
): string {
  return JSON.stringify(
    PendingBalanceOpenSubtotal2$outboundSchema.parse(
      pendingBalanceOpenSubtotal2,
    ),
  );
}

export function pendingBalanceOpenSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceOpenSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceOpenSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceOpenSubtotal2' from JSON`,
  );
}

/** @internal */
export const PendingBalanceOpen$inboundSchema: z.ZodType<
  PendingBalanceOpen,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => PendingBalanceOpenAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PendingBalanceOpenSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PendingBalanceOpen$Outbound = {
  amount?: PendingBalanceOpenAmount$Outbound | undefined;
  subtotals?: Array<PendingBalanceOpenSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const PendingBalanceOpen$outboundSchema: z.ZodType<
  PendingBalanceOpen$Outbound,
  z.ZodTypeDef,
  PendingBalanceOpen
> = z.object({
  amount: z.lazy(() => PendingBalanceOpenAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PendingBalanceOpenSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceOpen$ {
  /** @deprecated use `PendingBalanceOpen$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceOpen$inboundSchema;
  /** @deprecated use `PendingBalanceOpen$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceOpen$outboundSchema;
  /** @deprecated use `PendingBalanceOpen$Outbound` instead. */
  export type Outbound = PendingBalanceOpen$Outbound;
}

export function pendingBalanceOpenToJSON(
  pendingBalanceOpen: PendingBalanceOpen,
): string {
  return JSON.stringify(
    PendingBalanceOpen$outboundSchema.parse(pendingBalanceOpen),
  );
}

export function pendingBalanceOpenFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceOpen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceOpen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceOpen' from JSON`,
  );
}

/** @internal */
export const PendingBalanceCloseAmount$inboundSchema: z.ZodType<
  PendingBalanceCloseAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type PendingBalanceCloseAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const PendingBalanceCloseAmount$outboundSchema: z.ZodType<
  PendingBalanceCloseAmount$Outbound,
  z.ZodTypeDef,
  PendingBalanceCloseAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseAmount$ {
  /** @deprecated use `PendingBalanceCloseAmount$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceCloseAmount$inboundSchema;
  /** @deprecated use `PendingBalanceCloseAmount$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceCloseAmount$outboundSchema;
  /** @deprecated use `PendingBalanceCloseAmount$Outbound` instead. */
  export type Outbound = PendingBalanceCloseAmount$Outbound;
}

export function pendingBalanceCloseAmountToJSON(
  pendingBalanceCloseAmount: PendingBalanceCloseAmount,
): string {
  return JSON.stringify(
    PendingBalanceCloseAmount$outboundSchema.parse(pendingBalanceCloseAmount),
  );
}

export function pendingBalanceCloseAmountFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceCloseAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceCloseAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceCloseAmount' from JSON`,
  );
}

/** @internal */
export const PendingBalanceCloseSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceCloseSubTotalMethod1
> = z.nativeEnum(PendingBalanceCloseSubTotalMethod1);

/** @internal */
export const PendingBalanceCloseSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceCloseSubTotalMethod1
> = PendingBalanceCloseSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotalMethod1$ {
  /** @deprecated use `PendingBalanceCloseSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceCloseSubTotalMethod1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubTotalMethod1$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalCardIssuer1> = z.nativeEnum(
    PendingBalanceCloseSubTotalCardIssuer1,
  );

/** @internal */
export const PendingBalanceCloseSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalCardIssuer1> =
    PendingBalanceCloseSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotalCardIssuer1$ {
  /** @deprecated use `PendingBalanceCloseSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalCardAudience1> = z
    .nativeEnum(PendingBalanceCloseSubTotalCardAudience1);

/** @internal */
export const PendingBalanceCloseSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalCardAudience1> =
    PendingBalanceCloseSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotalCardAudience1$ {
  /** @deprecated use `PendingBalanceCloseSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalCardRegion1> = z.nativeEnum(
    PendingBalanceCloseSubTotalCardRegion1,
  );

/** @internal */
export const PendingBalanceCloseSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalCardRegion1> =
    PendingBalanceCloseSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotalCardRegion1$ {
  /** @deprecated use `PendingBalanceCloseSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceCloseSubTotalFeeType1
> = z.nativeEnum(PendingBalanceCloseSubTotalFeeType1);

/** @internal */
export const PendingBalanceCloseSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalFeeType1> =
    PendingBalanceCloseSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotalFeeType1$ {
  /** @deprecated use `PendingBalanceCloseSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubTotalFeeType1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalPrepaymentPartType1> = z
    .nativeEnum(PendingBalanceCloseSubTotalPrepaymentPartType1);

/** @internal */
export const PendingBalanceCloseSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalPrepaymentPartType1> =
    PendingBalanceCloseSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotalPrepaymentPartType1$ {
  /** @deprecated use `PendingBalanceCloseSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalTransactionType1> = z
    .nativeEnum(PendingBalanceCloseSubTotalTransactionType1);

/** @internal */
export const PendingBalanceCloseSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubTotalTransactionType1> =
    PendingBalanceCloseSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotalTransactionType1$ {
  /** @deprecated use `PendingBalanceCloseSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubTotal1$inboundSchema: z.ZodType<
  PendingBalanceCloseSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceCloseSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceCloseSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceCloseSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceCloseSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceCloseSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceCloseSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceCloseSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type PendingBalanceCloseSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalanceCloseSubTotal1$outboundSchema: z.ZodType<
  PendingBalanceCloseSubTotal1$Outbound,
  z.ZodTypeDef,
  PendingBalanceCloseSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceCloseSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceCloseSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceCloseSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceCloseSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceCloseSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceCloseSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceCloseSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubTotal1$ {
  /** @deprecated use `PendingBalanceCloseSubTotal1$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceCloseSubTotal1$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotal1$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceCloseSubTotal1$outboundSchema;
  /** @deprecated use `PendingBalanceCloseSubTotal1$Outbound` instead. */
  export type Outbound = PendingBalanceCloseSubTotal1$Outbound;
}

export function pendingBalanceCloseSubTotal1ToJSON(
  pendingBalanceCloseSubTotal1: PendingBalanceCloseSubTotal1,
): string {
  return JSON.stringify(
    PendingBalanceCloseSubTotal1$outboundSchema.parse(
      pendingBalanceCloseSubTotal1,
    ),
  );
}

export function pendingBalanceCloseSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceCloseSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceCloseSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceCloseSubTotal1' from JSON`,
  );
}

/** @internal */
export const PendingBalanceCloseSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceCloseSubtotalMethod2
> = z.nativeEnum(PendingBalanceCloseSubtotalMethod2);

/** @internal */
export const PendingBalanceCloseSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceCloseSubtotalMethod2
> = PendingBalanceCloseSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotalMethod2$ {
  /** @deprecated use `PendingBalanceCloseSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceCloseSubtotalMethod2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubtotalMethod2$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalCardIssuer2> = z.nativeEnum(
    PendingBalanceCloseSubtotalCardIssuer2,
  );

/** @internal */
export const PendingBalanceCloseSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalCardIssuer2> =
    PendingBalanceCloseSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotalCardIssuer2$ {
  /** @deprecated use `PendingBalanceCloseSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalCardAudience2> = z
    .nativeEnum(PendingBalanceCloseSubtotalCardAudience2);

/** @internal */
export const PendingBalanceCloseSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalCardAudience2> =
    PendingBalanceCloseSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotalCardAudience2$ {
  /** @deprecated use `PendingBalanceCloseSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalCardRegion2> = z.nativeEnum(
    PendingBalanceCloseSubtotalCardRegion2,
  );

/** @internal */
export const PendingBalanceCloseSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalCardRegion2> =
    PendingBalanceCloseSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotalCardRegion2$ {
  /** @deprecated use `PendingBalanceCloseSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof PendingBalanceCloseSubtotalFeeType2
> = z.nativeEnum(PendingBalanceCloseSubtotalFeeType2);

/** @internal */
export const PendingBalanceCloseSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalFeeType2> =
    PendingBalanceCloseSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotalFeeType2$ {
  /** @deprecated use `PendingBalanceCloseSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubtotalFeeType2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalPrepaymentPartType2> = z
    .nativeEnum(PendingBalanceCloseSubtotalPrepaymentPartType2);

/** @internal */
export const PendingBalanceCloseSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalPrepaymentPartType2> =
    PendingBalanceCloseSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotalPrepaymentPartType2$ {
  /** @deprecated use `PendingBalanceCloseSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalTransactionType2> = z
    .nativeEnum(PendingBalanceCloseSubtotalTransactionType2);

/** @internal */
export const PendingBalanceCloseSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceCloseSubtotalTransactionType2> =
    PendingBalanceCloseSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotalTransactionType2$ {
  /** @deprecated use `PendingBalanceCloseSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceCloseSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceCloseSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const PendingBalanceCloseSubtotal2$inboundSchema: z.ZodType<
  PendingBalanceCloseSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => PendingBalanceCloseSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceCloseSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceCloseSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceCloseSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceCloseSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceCloseSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceCloseSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceCloseSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type PendingBalanceCloseSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<PendingBalanceCloseSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalanceCloseSubtotal2$outboundSchema: z.ZodType<
  PendingBalanceCloseSubtotal2$Outbound,
  z.ZodTypeDef,
  PendingBalanceCloseSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => PendingBalanceCloseSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PendingBalanceCloseSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalanceCloseSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalanceCloseSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalanceCloseSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalanceCloseSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceCloseSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceCloseSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceCloseSubtotal2$ {
  /** @deprecated use `PendingBalanceCloseSubtotal2$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceCloseSubtotal2$inboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotal2$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceCloseSubtotal2$outboundSchema;
  /** @deprecated use `PendingBalanceCloseSubtotal2$Outbound` instead. */
  export type Outbound = PendingBalanceCloseSubtotal2$Outbound;
}

export function pendingBalanceCloseSubtotal2ToJSON(
  pendingBalanceCloseSubtotal2: PendingBalanceCloseSubtotal2,
): string {
  return JSON.stringify(
    PendingBalanceCloseSubtotal2$outboundSchema.parse(
      pendingBalanceCloseSubtotal2,
    ),
  );
}

export function pendingBalanceCloseSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceCloseSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceCloseSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceCloseSubtotal2' from JSON`,
  );
}

/** @internal */
export const PendingBalanceClose$inboundSchema: z.ZodType<
  PendingBalanceClose,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => PendingBalanceCloseAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PendingBalanceCloseSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PendingBalanceClose$Outbound = {
  amount?: PendingBalanceCloseAmount$Outbound | undefined;
  subtotals?: Array<PendingBalanceCloseSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const PendingBalanceClose$outboundSchema: z.ZodType<
  PendingBalanceClose$Outbound,
  z.ZodTypeDef,
  PendingBalanceClose
> = z.object({
  amount: z.lazy(() => PendingBalanceCloseAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PendingBalanceCloseSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceClose$ {
  /** @deprecated use `PendingBalanceClose$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceClose$inboundSchema;
  /** @deprecated use `PendingBalanceClose$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceClose$outboundSchema;
  /** @deprecated use `PendingBalanceClose$Outbound` instead. */
  export type Outbound = PendingBalanceClose$Outbound;
}

export function pendingBalanceCloseToJSON(
  pendingBalanceClose: PendingBalanceClose,
): string {
  return JSON.stringify(
    PendingBalanceClose$outboundSchema.parse(pendingBalanceClose),
  );
}

export function pendingBalanceCloseFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceClose, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceClose$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceClose' from JSON`,
  );
}

/** @internal */
export const PendingBalancePendingAmount$inboundSchema: z.ZodType<
  PendingBalancePendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type PendingBalancePendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const PendingBalancePendingAmount$outboundSchema: z.ZodType<
  PendingBalancePendingAmount$Outbound,
  z.ZodTypeDef,
  PendingBalancePendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingAmount$ {
  /** @deprecated use `PendingBalancePendingAmount$inboundSchema` instead. */
  export const inboundSchema = PendingBalancePendingAmount$inboundSchema;
  /** @deprecated use `PendingBalancePendingAmount$outboundSchema` instead. */
  export const outboundSchema = PendingBalancePendingAmount$outboundSchema;
  /** @deprecated use `PendingBalancePendingAmount$Outbound` instead. */
  export type Outbound = PendingBalancePendingAmount$Outbound;
}

export function pendingBalancePendingAmountToJSON(
  pendingBalancePendingAmount: PendingBalancePendingAmount,
): string {
  return JSON.stringify(
    PendingBalancePendingAmount$outboundSchema.parse(
      pendingBalancePendingAmount,
    ),
  );
}

export function pendingBalancePendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalancePendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalancePendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalancePendingAmount' from JSON`,
  );
}

/** @internal */
export const PendingBalancePendingSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalMethod1> = z.nativeEnum(
    PendingBalancePendingSubTotalMethod1,
  );

/** @internal */
export const PendingBalancePendingSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalMethod1> =
    PendingBalancePendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotalMethod1$ {
  /** @deprecated use `PendingBalancePendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalCardIssuer1> = z
    .nativeEnum(PendingBalancePendingSubTotalCardIssuer1);

/** @internal */
export const PendingBalancePendingSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalCardIssuer1> =
    PendingBalancePendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotalCardIssuer1$ {
  /** @deprecated use `PendingBalancePendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalCardAudience1> = z
    .nativeEnum(PendingBalancePendingSubTotalCardAudience1);

/** @internal */
export const PendingBalancePendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalCardAudience1> =
    PendingBalancePendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotalCardAudience1$ {
  /** @deprecated use `PendingBalancePendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalCardRegion1> = z
    .nativeEnum(PendingBalancePendingSubTotalCardRegion1);

/** @internal */
export const PendingBalancePendingSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalCardRegion1> =
    PendingBalancePendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotalCardRegion1$ {
  /** @deprecated use `PendingBalancePendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalFeeType1> = z.nativeEnum(
    PendingBalancePendingSubTotalFeeType1,
  );

/** @internal */
export const PendingBalancePendingSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalFeeType1> =
    PendingBalancePendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotalFeeType1$ {
  /** @deprecated use `PendingBalancePendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(PendingBalancePendingSubTotalPrepaymentPartType1);

/** @internal */
export const PendingBalancePendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalPrepaymentPartType1> =
    PendingBalancePendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `PendingBalancePendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalTransactionType1> = z
    .nativeEnum(PendingBalancePendingSubTotalTransactionType1);

/** @internal */
export const PendingBalancePendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubTotalTransactionType1> =
    PendingBalancePendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotalTransactionType1$ {
  /** @deprecated use `PendingBalancePendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubTotal1$inboundSchema: z.ZodType<
  PendingBalancePendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PendingBalancePendingSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalancePendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalancePendingSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalancePendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalancePendingSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalancePendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalancePendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type PendingBalancePendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalancePendingSubTotal1$outboundSchema: z.ZodType<
  PendingBalancePendingSubTotal1$Outbound,
  z.ZodTypeDef,
  PendingBalancePendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PendingBalancePendingSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PendingBalancePendingSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PendingBalancePendingSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PendingBalancePendingSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(PendingBalancePendingSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalancePendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalancePendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubTotal1$ {
  /** @deprecated use `PendingBalancePendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = PendingBalancePendingSubTotal1$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = PendingBalancePendingSubTotal1$outboundSchema;
  /** @deprecated use `PendingBalancePendingSubTotal1$Outbound` instead. */
  export type Outbound = PendingBalancePendingSubTotal1$Outbound;
}

export function pendingBalancePendingSubTotal1ToJSON(
  pendingBalancePendingSubTotal1: PendingBalancePendingSubTotal1,
): string {
  return JSON.stringify(
    PendingBalancePendingSubTotal1$outboundSchema.parse(
      pendingBalancePendingSubTotal1,
    ),
  );
}

export function pendingBalancePendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<PendingBalancePendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalancePendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalancePendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const PendingBalancePendingSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalMethod2> = z.nativeEnum(
    PendingBalancePendingSubtotalMethod2,
  );

/** @internal */
export const PendingBalancePendingSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalMethod2> =
    PendingBalancePendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotalMethod2$ {
  /** @deprecated use `PendingBalancePendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalCardIssuer2> = z
    .nativeEnum(PendingBalancePendingSubtotalCardIssuer2);

/** @internal */
export const PendingBalancePendingSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalCardIssuer2> =
    PendingBalancePendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotalCardIssuer2$ {
  /** @deprecated use `PendingBalancePendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalCardAudience2> = z
    .nativeEnum(PendingBalancePendingSubtotalCardAudience2);

/** @internal */
export const PendingBalancePendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalCardAudience2> =
    PendingBalancePendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotalCardAudience2$ {
  /** @deprecated use `PendingBalancePendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalCardRegion2> = z
    .nativeEnum(PendingBalancePendingSubtotalCardRegion2);

/** @internal */
export const PendingBalancePendingSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalCardRegion2> =
    PendingBalancePendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotalCardRegion2$ {
  /** @deprecated use `PendingBalancePendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalFeeType2> = z.nativeEnum(
    PendingBalancePendingSubtotalFeeType2,
  );

/** @internal */
export const PendingBalancePendingSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalFeeType2> =
    PendingBalancePendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotalFeeType2$ {
  /** @deprecated use `PendingBalancePendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(PendingBalancePendingSubtotalPrepaymentPartType2);

/** @internal */
export const PendingBalancePendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalPrepaymentPartType2> =
    PendingBalancePendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `PendingBalancePendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalTransactionType2> = z
    .nativeEnum(PendingBalancePendingSubtotalTransactionType2);

/** @internal */
export const PendingBalancePendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalancePendingSubtotalTransactionType2> =
    PendingBalancePendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotalTransactionType2$ {
  /** @deprecated use `PendingBalancePendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalancePendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalancePendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const PendingBalancePendingSubtotal2$inboundSchema: z.ZodType<
  PendingBalancePendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => PendingBalancePendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PendingBalancePendingSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(PendingBalancePendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    PendingBalancePendingSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(PendingBalancePendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(PendingBalancePendingSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalancePendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalancePendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type PendingBalancePendingSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<PendingBalancePendingSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalancePendingSubtotal2$outboundSchema: z.ZodType<
  PendingBalancePendingSubtotal2$Outbound,
  z.ZodTypeDef,
  PendingBalancePendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => PendingBalancePendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PendingBalancePendingSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PendingBalancePendingSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PendingBalancePendingSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PendingBalancePendingSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(PendingBalancePendingSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PendingBalancePendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalancePendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePendingSubtotal2$ {
  /** @deprecated use `PendingBalancePendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = PendingBalancePendingSubtotal2$inboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = PendingBalancePendingSubtotal2$outboundSchema;
  /** @deprecated use `PendingBalancePendingSubtotal2$Outbound` instead. */
  export type Outbound = PendingBalancePendingSubtotal2$Outbound;
}

export function pendingBalancePendingSubtotal2ToJSON(
  pendingBalancePendingSubtotal2: PendingBalancePendingSubtotal2,
): string {
  return JSON.stringify(
    PendingBalancePendingSubtotal2$outboundSchema.parse(
      pendingBalancePendingSubtotal2,
    ),
  );
}

export function pendingBalancePendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<PendingBalancePendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalancePendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalancePendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const PendingBalancePending$inboundSchema: z.ZodType<
  PendingBalancePending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => PendingBalancePendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PendingBalancePendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PendingBalancePending$Outbound = {
  amount?: PendingBalancePendingAmount$Outbound | undefined;
  subtotals?: Array<PendingBalancePendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const PendingBalancePending$outboundSchema: z.ZodType<
  PendingBalancePending$Outbound,
  z.ZodTypeDef,
  PendingBalancePending
> = z.object({
  amount: z.lazy(() => PendingBalancePendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PendingBalancePendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalancePending$ {
  /** @deprecated use `PendingBalancePending$inboundSchema` instead. */
  export const inboundSchema = PendingBalancePending$inboundSchema;
  /** @deprecated use `PendingBalancePending$outboundSchema` instead. */
  export const outboundSchema = PendingBalancePending$outboundSchema;
  /** @deprecated use `PendingBalancePending$Outbound` instead. */
  export type Outbound = PendingBalancePending$Outbound;
}

export function pendingBalancePendingToJSON(
  pendingBalancePending: PendingBalancePending,
): string {
  return JSON.stringify(
    PendingBalancePending$outboundSchema.parse(pendingBalancePending),
  );
}

export function pendingBalancePendingFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalancePending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalancePending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalancePending' from JSON`,
  );
}

/** @internal */
export const PendingBalanceMovedToAvailableAmount$inboundSchema: z.ZodType<
  PendingBalanceMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type PendingBalanceMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const PendingBalanceMovedToAvailableAmount$outboundSchema: z.ZodType<
  PendingBalanceMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  PendingBalanceMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableAmount$ {
  /** @deprecated use `PendingBalanceMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = PendingBalanceMovedToAvailableAmount$Outbound;
}

export function pendingBalanceMovedToAvailableAmountToJSON(
  pendingBalanceMovedToAvailableAmount: PendingBalanceMovedToAvailableAmount,
): string {
  return JSON.stringify(
    PendingBalanceMovedToAvailableAmount$outboundSchema.parse(
      pendingBalanceMovedToAvailableAmount,
    ),
  );
}

export function pendingBalanceMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PendingBalanceMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalMethod1> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubTotalMethod1);

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalMethod1> =
    PendingBalanceMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalCardIssuer1> =
    PendingBalanceMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalCardAudience1> =
    z.nativeEnum(PendingBalanceMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalCardAudience1> =
    PendingBalanceMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalCardRegion1> =
    PendingBalanceMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubTotalFeeType1);

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubTotalFeeType1> =
    PendingBalanceMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1
  > = PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubTotalTransactionType1
  > = z.nativeEnum(PendingBalanceMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const PendingBalanceMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubTotalTransactionType1
  > = PendingBalanceMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  PendingBalanceMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    PendingBalanceMovedToAvailableSubTotalMethod1$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    PendingBalanceMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PendingBalanceMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PendingBalanceMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    PendingBalanceMovedToAvailableSubTotalFeeType1$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type PendingBalanceMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalanceMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  PendingBalanceMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  PendingBalanceMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    PendingBalanceMovedToAvailableSubTotalMethod1$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    PendingBalanceMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PendingBalanceMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PendingBalanceMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    PendingBalanceMovedToAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubTotal1$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = PendingBalanceMovedToAvailableSubTotal1$Outbound;
}

export function pendingBalanceMovedToAvailableSubTotal1ToJSON(
  pendingBalanceMovedToAvailableSubTotal1:
    PendingBalanceMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    PendingBalanceMovedToAvailableSubTotal1$outboundSchema.parse(
      pendingBalanceMovedToAvailableSubTotal1,
    ),
  );
}

export function pendingBalanceMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<
  PendingBalanceMovedToAvailableSubTotal1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PendingBalanceMovedToAvailableSubTotal1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PendingBalanceMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalMethod2> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubtotalMethod2);

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalMethod2> =
    PendingBalanceMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalCardIssuer2> =
    PendingBalanceMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalCardAudience2> =
    z.nativeEnum(PendingBalanceMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalCardAudience2> =
    PendingBalanceMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalCardRegion2> =
    PendingBalanceMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(PendingBalanceMovedToAvailableSubtotalFeeType2);

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof PendingBalanceMovedToAvailableSubtotalFeeType2> =
    PendingBalanceMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2
  > = PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubtotalTransactionType2
  > = z.nativeEnum(PendingBalanceMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const PendingBalanceMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<
    typeof PendingBalanceMovedToAvailableSubtotalTransactionType2
  > = PendingBalanceMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const PendingBalanceMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  PendingBalanceMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(
      z.lazy(() => PendingBalanceMovedToAvailableSubTotal1$inboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    PendingBalanceMovedToAvailableSubtotalMethod2$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    PendingBalanceMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PendingBalanceMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PendingBalanceMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    PendingBalanceMovedToAvailableSubtotalFeeType2$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type PendingBalanceMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<PendingBalanceMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PendingBalanceMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  PendingBalanceMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  PendingBalanceMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(
      z.lazy(() => PendingBalanceMovedToAvailableSubTotal1$outboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    PendingBalanceMovedToAvailableSubtotalMethod2$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    PendingBalanceMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PendingBalanceMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PendingBalanceMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    PendingBalanceMovedToAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PendingBalanceMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailableSubtotal2$ {
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    PendingBalanceMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    PendingBalanceMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = PendingBalanceMovedToAvailableSubtotal2$Outbound;
}

export function pendingBalanceMovedToAvailableSubtotal2ToJSON(
  pendingBalanceMovedToAvailableSubtotal2:
    PendingBalanceMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    PendingBalanceMovedToAvailableSubtotal2$outboundSchema.parse(
      pendingBalanceMovedToAvailableSubtotal2,
    ),
  );
}

export function pendingBalanceMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<
  PendingBalanceMovedToAvailableSubtotal2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PendingBalanceMovedToAvailableSubtotal2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PendingBalanceMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const PendingBalanceMovedToAvailable$inboundSchema: z.ZodType<
  PendingBalanceMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => PendingBalanceMovedToAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => PendingBalanceMovedToAvailableSubtotal2$inboundSchema),
    ),
  ).optional(),
});

/** @internal */
export type PendingBalanceMovedToAvailable$Outbound = {
  amount?: PendingBalanceMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<PendingBalanceMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const PendingBalanceMovedToAvailable$outboundSchema: z.ZodType<
  PendingBalanceMovedToAvailable$Outbound,
  z.ZodTypeDef,
  PendingBalanceMovedToAvailable
> = z.object({
  amount: z.lazy(() => PendingBalanceMovedToAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => PendingBalanceMovedToAvailableSubtotal2$outboundSchema),
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalanceMovedToAvailable$ {
  /** @deprecated use `PendingBalanceMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = PendingBalanceMovedToAvailable$inboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = PendingBalanceMovedToAvailable$outboundSchema;
  /** @deprecated use `PendingBalanceMovedToAvailable$Outbound` instead. */
  export type Outbound = PendingBalanceMovedToAvailable$Outbound;
}

export function pendingBalanceMovedToAvailableToJSON(
  pendingBalanceMovedToAvailable: PendingBalanceMovedToAvailable,
): string {
  return JSON.stringify(
    PendingBalanceMovedToAvailable$outboundSchema.parse(
      pendingBalanceMovedToAvailable,
    ),
  );
}

export function pendingBalanceMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalanceMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalanceMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalanceMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const PendingBalance$inboundSchema: z.ZodType<
  PendingBalance,
  z.ZodTypeDef,
  unknown
> = z.object({
  open: z.lazy(() => PendingBalanceOpen$inboundSchema).optional(),
  close: z.lazy(() => PendingBalanceClose$inboundSchema).optional(),
  pending: z.lazy(() => PendingBalancePending$inboundSchema).optional(),
  movedToAvailable: z.lazy(() => PendingBalanceMovedToAvailable$inboundSchema)
    .optional(),
});

/** @internal */
export type PendingBalance$Outbound = {
  open?: PendingBalanceOpen$Outbound | undefined;
  close?: PendingBalanceClose$Outbound | undefined;
  pending?: PendingBalancePending$Outbound | undefined;
  movedToAvailable?: PendingBalanceMovedToAvailable$Outbound | undefined;
};

/** @internal */
export const PendingBalance$outboundSchema: z.ZodType<
  PendingBalance$Outbound,
  z.ZodTypeDef,
  PendingBalance
> = z.object({
  open: z.lazy(() => PendingBalanceOpen$outboundSchema).optional(),
  close: z.lazy(() => PendingBalanceClose$outboundSchema).optional(),
  pending: z.lazy(() => PendingBalancePending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => PendingBalanceMovedToAvailable$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingBalance$ {
  /** @deprecated use `PendingBalance$inboundSchema` instead. */
  export const inboundSchema = PendingBalance$inboundSchema;
  /** @deprecated use `PendingBalance$outboundSchema` instead. */
  export const outboundSchema = PendingBalance$outboundSchema;
  /** @deprecated use `PendingBalance$Outbound` instead. */
  export type Outbound = PendingBalance$Outbound;
}

export function pendingBalanceToJSON(pendingBalance: PendingBalance): string {
  return JSON.stringify(PendingBalance$outboundSchema.parse(pendingBalance));
}

export function pendingBalanceFromJSON(
  jsonString: string,
): SafeParseResult<PendingBalance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingBalance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingBalance' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceOpenAmount$inboundSchema: z.ZodType<
  AvailableBalanceOpenAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AvailableBalanceOpenAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AvailableBalanceOpenAmount$outboundSchema: z.ZodType<
  AvailableBalanceOpenAmount$Outbound,
  z.ZodTypeDef,
  AvailableBalanceOpenAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenAmount$ {
  /** @deprecated use `AvailableBalanceOpenAmount$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceOpenAmount$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenAmount$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceOpenAmount$outboundSchema;
  /** @deprecated use `AvailableBalanceOpenAmount$Outbound` instead. */
  export type Outbound = AvailableBalanceOpenAmount$Outbound;
}

export function availableBalanceOpenAmountToJSON(
  availableBalanceOpenAmount: AvailableBalanceOpenAmount,
): string {
  return JSON.stringify(
    AvailableBalanceOpenAmount$outboundSchema.parse(availableBalanceOpenAmount),
  );
}

export function availableBalanceOpenAmountFromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceOpenAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceOpenAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceOpenAmount' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceOpenSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof AvailableBalanceOpenSubTotalMethod1
> = z.nativeEnum(AvailableBalanceOpenSubTotalMethod1);

/** @internal */
export const AvailableBalanceOpenSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalMethod1> =
    AvailableBalanceOpenSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotalMethod1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubTotalMethod1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubTotalMethod1$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalCardIssuer1> = z
    .nativeEnum(AvailableBalanceOpenSubTotalCardIssuer1);

/** @internal */
export const AvailableBalanceOpenSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalCardIssuer1> =
    AvailableBalanceOpenSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotalCardIssuer1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalCardAudience1> = z
    .nativeEnum(AvailableBalanceOpenSubTotalCardAudience1);

/** @internal */
export const AvailableBalanceOpenSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalCardAudience1> =
    AvailableBalanceOpenSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotalCardAudience1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalCardRegion1> = z
    .nativeEnum(AvailableBalanceOpenSubTotalCardRegion1);

/** @internal */
export const AvailableBalanceOpenSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalCardRegion1> =
    AvailableBalanceOpenSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotalCardRegion1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalFeeType1> = z.nativeEnum(
    AvailableBalanceOpenSubTotalFeeType1,
  );

/** @internal */
export const AvailableBalanceOpenSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalFeeType1> =
    AvailableBalanceOpenSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotalFeeType1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubTotalFeeType1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalPrepaymentPartType1> = z
    .nativeEnum(AvailableBalanceOpenSubTotalPrepaymentPartType1);

/** @internal */
export const AvailableBalanceOpenSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalPrepaymentPartType1> =
    AvailableBalanceOpenSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotalPrepaymentPartType1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalTransactionType1> = z
    .nativeEnum(AvailableBalanceOpenSubTotalTransactionType1);

/** @internal */
export const AvailableBalanceOpenSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubTotalTransactionType1> =
    AvailableBalanceOpenSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotalTransactionType1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubTotal1$inboundSchema: z.ZodType<
  AvailableBalanceOpenSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceOpenSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(AvailableBalanceOpenSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    AvailableBalanceOpenSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(AvailableBalanceOpenSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(AvailableBalanceOpenSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceOpenSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceOpenSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type AvailableBalanceOpenSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const AvailableBalanceOpenSubTotal1$outboundSchema: z.ZodType<
  AvailableBalanceOpenSubTotal1$Outbound,
  z.ZodTypeDef,
  AvailableBalanceOpenSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceOpenSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(AvailableBalanceOpenSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    AvailableBalanceOpenSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(AvailableBalanceOpenSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(AvailableBalanceOpenSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceOpenSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceOpenSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubTotal1$ {
  /** @deprecated use `AvailableBalanceOpenSubTotal1$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceOpenSubTotal1$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotal1$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceOpenSubTotal1$outboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubTotal1$Outbound` instead. */
  export type Outbound = AvailableBalanceOpenSubTotal1$Outbound;
}

export function availableBalanceOpenSubTotal1ToJSON(
  availableBalanceOpenSubTotal1: AvailableBalanceOpenSubTotal1,
): string {
  return JSON.stringify(
    AvailableBalanceOpenSubTotal1$outboundSchema.parse(
      availableBalanceOpenSubTotal1,
    ),
  );
}

export function availableBalanceOpenSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceOpenSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceOpenSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceOpenSubTotal1' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceOpenSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof AvailableBalanceOpenSubtotalMethod2
> = z.nativeEnum(AvailableBalanceOpenSubtotalMethod2);

/** @internal */
export const AvailableBalanceOpenSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalMethod2> =
    AvailableBalanceOpenSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotalMethod2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubtotalMethod2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubtotalMethod2$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalCardIssuer2> = z
    .nativeEnum(AvailableBalanceOpenSubtotalCardIssuer2);

/** @internal */
export const AvailableBalanceOpenSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalCardIssuer2> =
    AvailableBalanceOpenSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotalCardIssuer2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalCardAudience2> = z
    .nativeEnum(AvailableBalanceOpenSubtotalCardAudience2);

/** @internal */
export const AvailableBalanceOpenSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalCardAudience2> =
    AvailableBalanceOpenSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotalCardAudience2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalCardRegion2> = z
    .nativeEnum(AvailableBalanceOpenSubtotalCardRegion2);

/** @internal */
export const AvailableBalanceOpenSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalCardRegion2> =
    AvailableBalanceOpenSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotalCardRegion2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalFeeType2> = z.nativeEnum(
    AvailableBalanceOpenSubtotalFeeType2,
  );

/** @internal */
export const AvailableBalanceOpenSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalFeeType2> =
    AvailableBalanceOpenSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotalFeeType2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubtotalFeeType2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalPrepaymentPartType2> = z
    .nativeEnum(AvailableBalanceOpenSubtotalPrepaymentPartType2);

/** @internal */
export const AvailableBalanceOpenSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalPrepaymentPartType2> =
    AvailableBalanceOpenSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotalPrepaymentPartType2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalTransactionType2> = z
    .nativeEnum(AvailableBalanceOpenSubtotalTransactionType2);

/** @internal */
export const AvailableBalanceOpenSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceOpenSubtotalTransactionType2> =
    AvailableBalanceOpenSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotalTransactionType2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceOpenSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceOpenSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceOpenSubtotal2$inboundSchema: z.ZodType<
  AvailableBalanceOpenSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => AvailableBalanceOpenSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceOpenSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(AvailableBalanceOpenSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    AvailableBalanceOpenSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(AvailableBalanceOpenSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(AvailableBalanceOpenSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceOpenSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceOpenSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type AvailableBalanceOpenSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<AvailableBalanceOpenSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const AvailableBalanceOpenSubtotal2$outboundSchema: z.ZodType<
  AvailableBalanceOpenSubtotal2$Outbound,
  z.ZodTypeDef,
  AvailableBalanceOpenSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => AvailableBalanceOpenSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceOpenSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(AvailableBalanceOpenSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    AvailableBalanceOpenSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(AvailableBalanceOpenSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(AvailableBalanceOpenSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceOpenSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceOpenSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpenSubtotal2$ {
  /** @deprecated use `AvailableBalanceOpenSubtotal2$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceOpenSubtotal2$inboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotal2$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceOpenSubtotal2$outboundSchema;
  /** @deprecated use `AvailableBalanceOpenSubtotal2$Outbound` instead. */
  export type Outbound = AvailableBalanceOpenSubtotal2$Outbound;
}

export function availableBalanceOpenSubtotal2ToJSON(
  availableBalanceOpenSubtotal2: AvailableBalanceOpenSubtotal2,
): string {
  return JSON.stringify(
    AvailableBalanceOpenSubtotal2$outboundSchema.parse(
      availableBalanceOpenSubtotal2,
    ),
  );
}

export function availableBalanceOpenSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceOpenSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceOpenSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceOpenSubtotal2' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceOpen$inboundSchema: z.ZodType<
  AvailableBalanceOpen,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => AvailableBalanceOpenAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => AvailableBalanceOpenSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type AvailableBalanceOpen$Outbound = {
  amount?: AvailableBalanceOpenAmount$Outbound | undefined;
  subtotals?: Array<AvailableBalanceOpenSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const AvailableBalanceOpen$outboundSchema: z.ZodType<
  AvailableBalanceOpen$Outbound,
  z.ZodTypeDef,
  AvailableBalanceOpen
> = z.object({
  amount: z.lazy(() => AvailableBalanceOpenAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => AvailableBalanceOpenSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceOpen$ {
  /** @deprecated use `AvailableBalanceOpen$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceOpen$inboundSchema;
  /** @deprecated use `AvailableBalanceOpen$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceOpen$outboundSchema;
  /** @deprecated use `AvailableBalanceOpen$Outbound` instead. */
  export type Outbound = AvailableBalanceOpen$Outbound;
}

export function availableBalanceOpenToJSON(
  availableBalanceOpen: AvailableBalanceOpen,
): string {
  return JSON.stringify(
    AvailableBalanceOpen$outboundSchema.parse(availableBalanceOpen),
  );
}

export function availableBalanceOpenFromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceOpen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceOpen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceOpen' from JSON`,
  );
}

/** @internal */
export const MovedFromPendingAmount$inboundSchema: z.ZodType<
  MovedFromPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type MovedFromPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const MovedFromPendingAmount$outboundSchema: z.ZodType<
  MovedFromPendingAmount$Outbound,
  z.ZodTypeDef,
  MovedFromPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingAmount$ {
  /** @deprecated use `MovedFromPendingAmount$inboundSchema` instead. */
  export const inboundSchema = MovedFromPendingAmount$inboundSchema;
  /** @deprecated use `MovedFromPendingAmount$outboundSchema` instead. */
  export const outboundSchema = MovedFromPendingAmount$outboundSchema;
  /** @deprecated use `MovedFromPendingAmount$Outbound` instead. */
  export type Outbound = MovedFromPendingAmount$Outbound;
}

export function movedFromPendingAmountToJSON(
  movedFromPendingAmount: MovedFromPendingAmount,
): string {
  return JSON.stringify(
    MovedFromPendingAmount$outboundSchema.parse(movedFromPendingAmount),
  );
}

export function movedFromPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<MovedFromPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MovedFromPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MovedFromPendingAmount' from JSON`,
  );
}

/** @internal */
export const MovedFromPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubTotalMethod1
> = z.nativeEnum(MovedFromPendingSubTotalMethod1);

/** @internal */
export const MovedFromPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubTotalMethod1
> = MovedFromPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotalMethod1$ {
  /** @deprecated use `MovedFromPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = MovedFromPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = MovedFromPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubTotalCardIssuer1
> = z.nativeEnum(MovedFromPendingSubTotalCardIssuer1);

/** @internal */
export const MovedFromPendingSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalCardIssuer1> =
    MovedFromPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotalCardIssuer1$ {
  /** @deprecated use `MovedFromPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalCardAudience1> = z.nativeEnum(
    MovedFromPendingSubTotalCardAudience1,
  );

/** @internal */
export const MovedFromPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalCardAudience1> =
    MovedFromPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotalCardAudience1$ {
  /** @deprecated use `MovedFromPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubTotalCardRegion1
> = z.nativeEnum(MovedFromPendingSubTotalCardRegion1);

/** @internal */
export const MovedFromPendingSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalCardRegion1> =
    MovedFromPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotalCardRegion1$ {
  /** @deprecated use `MovedFromPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubTotalFeeType1
> = z.nativeEnum(MovedFromPendingSubTotalFeeType1);

/** @internal */
export const MovedFromPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubTotalFeeType1
> = MovedFromPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotalFeeType1$ {
  /** @deprecated use `MovedFromPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = MovedFromPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = MovedFromPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(MovedFromPendingSubTotalPrepaymentPartType1);

/** @internal */
export const MovedFromPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalPrepaymentPartType1> =
    MovedFromPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `MovedFromPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalTransactionType1> = z
    .nativeEnum(MovedFromPendingSubTotalTransactionType1);

/** @internal */
export const MovedFromPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubTotalTransactionType1> =
    MovedFromPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotalTransactionType1$ {
  /** @deprecated use `MovedFromPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubTotal1$inboundSchema: z.ZodType<
  MovedFromPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(MovedFromPendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(MovedFromPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(MovedFromPendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(MovedFromPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(MovedFromPendingSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    MovedFromPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    MovedFromPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type MovedFromPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const MovedFromPendingSubTotal1$outboundSchema: z.ZodType<
  MovedFromPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  MovedFromPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(MovedFromPendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(MovedFromPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(MovedFromPendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(MovedFromPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(MovedFromPendingSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    MovedFromPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    MovedFromPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubTotal1$ {
  /** @deprecated use `MovedFromPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = MovedFromPendingSubTotal1$inboundSchema;
  /** @deprecated use `MovedFromPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = MovedFromPendingSubTotal1$outboundSchema;
  /** @deprecated use `MovedFromPendingSubTotal1$Outbound` instead. */
  export type Outbound = MovedFromPendingSubTotal1$Outbound;
}

export function movedFromPendingSubTotal1ToJSON(
  movedFromPendingSubTotal1: MovedFromPendingSubTotal1,
): string {
  return JSON.stringify(
    MovedFromPendingSubTotal1$outboundSchema.parse(movedFromPendingSubTotal1),
  );
}

export function movedFromPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<MovedFromPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MovedFromPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MovedFromPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const MovedFromPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubtotalMethod2
> = z.nativeEnum(MovedFromPendingSubtotalMethod2);

/** @internal */
export const MovedFromPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubtotalMethod2
> = MovedFromPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotalMethod2$ {
  /** @deprecated use `MovedFromPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = MovedFromPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = MovedFromPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubtotalCardIssuer2
> = z.nativeEnum(MovedFromPendingSubtotalCardIssuer2);

/** @internal */
export const MovedFromPendingSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalCardIssuer2> =
    MovedFromPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotalCardIssuer2$ {
  /** @deprecated use `MovedFromPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalCardAudience2> = z.nativeEnum(
    MovedFromPendingSubtotalCardAudience2,
  );

/** @internal */
export const MovedFromPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalCardAudience2> =
    MovedFromPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotalCardAudience2$ {
  /** @deprecated use `MovedFromPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubtotalCardRegion2
> = z.nativeEnum(MovedFromPendingSubtotalCardRegion2);

/** @internal */
export const MovedFromPendingSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalCardRegion2> =
    MovedFromPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotalCardRegion2$ {
  /** @deprecated use `MovedFromPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubtotalFeeType2
> = z.nativeEnum(MovedFromPendingSubtotalFeeType2);

/** @internal */
export const MovedFromPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof MovedFromPendingSubtotalFeeType2
> = MovedFromPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotalFeeType2$ {
  /** @deprecated use `MovedFromPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = MovedFromPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = MovedFromPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(MovedFromPendingSubtotalPrepaymentPartType2);

/** @internal */
export const MovedFromPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalPrepaymentPartType2> =
    MovedFromPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `MovedFromPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalTransactionType2> = z
    .nativeEnum(MovedFromPendingSubtotalTransactionType2);

/** @internal */
export const MovedFromPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof MovedFromPendingSubtotalTransactionType2> =
    MovedFromPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotalTransactionType2$ {
  /** @deprecated use `MovedFromPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    MovedFromPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    MovedFromPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const MovedFromPendingSubtotal2$inboundSchema: z.ZodType<
  MovedFromPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => MovedFromPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(MovedFromPendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(MovedFromPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(MovedFromPendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(MovedFromPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(MovedFromPendingSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    MovedFromPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    MovedFromPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type MovedFromPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<MovedFromPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const MovedFromPendingSubtotal2$outboundSchema: z.ZodType<
  MovedFromPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  MovedFromPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => MovedFromPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(MovedFromPendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(MovedFromPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(MovedFromPendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(MovedFromPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(MovedFromPendingSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    MovedFromPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    MovedFromPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPendingSubtotal2$ {
  /** @deprecated use `MovedFromPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = MovedFromPendingSubtotal2$inboundSchema;
  /** @deprecated use `MovedFromPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = MovedFromPendingSubtotal2$outboundSchema;
  /** @deprecated use `MovedFromPendingSubtotal2$Outbound` instead. */
  export type Outbound = MovedFromPendingSubtotal2$Outbound;
}

export function movedFromPendingSubtotal2ToJSON(
  movedFromPendingSubtotal2: MovedFromPendingSubtotal2,
): string {
  return JSON.stringify(
    MovedFromPendingSubtotal2$outboundSchema.parse(movedFromPendingSubtotal2),
  );
}

export function movedFromPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<MovedFromPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MovedFromPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MovedFromPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const MovedFromPending$inboundSchema: z.ZodType<
  MovedFromPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => MovedFromPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => MovedFromPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type MovedFromPending$Outbound = {
  amount?: MovedFromPendingAmount$Outbound | undefined;
  subtotals?: Array<MovedFromPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const MovedFromPending$outboundSchema: z.ZodType<
  MovedFromPending$Outbound,
  z.ZodTypeDef,
  MovedFromPending
> = z.object({
  amount: z.lazy(() => MovedFromPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => MovedFromPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MovedFromPending$ {
  /** @deprecated use `MovedFromPending$inboundSchema` instead. */
  export const inboundSchema = MovedFromPending$inboundSchema;
  /** @deprecated use `MovedFromPending$outboundSchema` instead. */
  export const outboundSchema = MovedFromPending$outboundSchema;
  /** @deprecated use `MovedFromPending$Outbound` instead. */
  export type Outbound = MovedFromPending$Outbound;
}

export function movedFromPendingToJSON(
  movedFromPending: MovedFromPending,
): string {
  return JSON.stringify(
    MovedFromPending$outboundSchema.parse(movedFromPending),
  );
}

export function movedFromPendingFromJSON(
  jsonString: string,
): SafeParseResult<MovedFromPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MovedFromPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MovedFromPending' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableAmount$inboundSchema:
  z.ZodType<AvailableBalanceImmediatelyAvailableAmount, z.ZodTypeDef, unknown> =
    z.object({
      currency: z.string(),
      value: z.string(),
    });

/** @internal */
export type AvailableBalanceImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AvailableBalanceImmediatelyAvailableAmount$outboundSchema:
  z.ZodType<
    AvailableBalanceImmediatelyAvailableAmount$Outbound,
    z.ZodTypeDef,
    AvailableBalanceImmediatelyAvailableAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableAmount$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = AvailableBalanceImmediatelyAvailableAmount$Outbound;
}

export function availableBalanceImmediatelyAvailableAmountToJSON(
  availableBalanceImmediatelyAvailableAmount:
    AvailableBalanceImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    AvailableBalanceImmediatelyAvailableAmount$outboundSchema.parse(
      availableBalanceImmediatelyAvailableAmount,
    ),
  );
}

export function availableBalanceImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  AvailableBalanceImmediatelyAvailableAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AvailableBalanceImmediatelyAvailableAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AvailableBalanceImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubTotalMethod1> =
    z.nativeEnum(AvailableBalanceImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubTotalMethod1> =
    AvailableBalanceImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1
  > = z.nativeEnum(AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1
  > = AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalCardAudience1
  > = z.nativeEnum(AvailableBalanceImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalCardAudience1
  > = AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalCardRegion1
  > = z.nativeEnum(AvailableBalanceImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalCardRegion1
  > = AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubTotalFeeType1> =
    z.nativeEnum(AvailableBalanceImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubTotalFeeType1> =
    AvailableBalanceImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(
    AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1,
  );

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1
  > =
    AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalTransactionType1
  > = z.nativeEnum(
    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1,
  );

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubTotalTransactionType1
  > =
    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotal1$inboundSchema:
  z.ZodType<
    AvailableBalanceImmediatelyAvailableSubTotal1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    method: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalMethod1$inboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
    ).optional(),
    feeType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalFeeType1$inboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
    ).optional(),
    transactionType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
    ).optional(),
  });

/** @internal */
export type AvailableBalanceImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubTotal1$outboundSchema:
  z.ZodType<
    AvailableBalanceImmediatelyAvailableSubTotal1$Outbound,
    z.ZodTypeDef,
    AvailableBalanceImmediatelyAvailableSubTotal1
  > = z.object({
    count: z.number().int().optional(),
    method: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalMethod1$outboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
    ).optional(),
    feeType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalFeeType1$outboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
    ).optional(),
    transactionType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = AvailableBalanceImmediatelyAvailableSubTotal1$Outbound;
}

export function availableBalanceImmediatelyAvailableSubTotal1ToJSON(
  availableBalanceImmediatelyAvailableSubTotal1:
    AvailableBalanceImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    AvailableBalanceImmediatelyAvailableSubTotal1$outboundSchema.parse(
      availableBalanceImmediatelyAvailableSubTotal1,
    ),
  );
}

export function availableBalanceImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<
  AvailableBalanceImmediatelyAvailableSubTotal1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AvailableBalanceImmediatelyAvailableSubTotal1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AvailableBalanceImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubtotalMethod2> =
    z.nativeEnum(AvailableBalanceImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubtotalMethod2> =
    AvailableBalanceImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2
  > = z.nativeEnum(AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2
  > = AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalCardAudience2
  > = z.nativeEnum(AvailableBalanceImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalCardAudience2
  > = AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalCardRegion2
  > = z.nativeEnum(AvailableBalanceImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalCardRegion2
  > = AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubtotalFeeType2> =
    z.nativeEnum(AvailableBalanceImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceImmediatelyAvailableSubtotalFeeType2> =
    AvailableBalanceImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(
    AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2,
  );

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2
  > =
    AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalTransactionType2
  > = z.nativeEnum(
    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2,
  );

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<
    typeof AvailableBalanceImmediatelyAvailableSubtotalTransactionType2
  > =
    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotal2$inboundSchema:
  z.ZodType<
    AvailableBalanceImmediatelyAvailableSubtotal2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "sub-totals": z.nullable(
      z.array(z.lazy(() =>
        AvailableBalanceImmediatelyAvailableSubTotal1$inboundSchema
      )),
    ).optional(),
    count: z.number().int().optional(),
    method: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalMethod2$inboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
    ).optional(),
    feeType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalFeeType2$inboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
    ).optional(),
    transactionType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "sub-totals": "subTotals",
    });
  });

/** @internal */
export type AvailableBalanceImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<AvailableBalanceImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const AvailableBalanceImmediatelyAvailableSubtotal2$outboundSchema:
  z.ZodType<
    AvailableBalanceImmediatelyAvailableSubtotal2$Outbound,
    z.ZodTypeDef,
    AvailableBalanceImmediatelyAvailableSubtotal2
  > = z.object({
    subTotals: z.nullable(
      z.array(z.lazy(() =>
        AvailableBalanceImmediatelyAvailableSubTotal1$outboundSchema
      )),
    ).optional(),
    count: z.number().int().optional(),
    method: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalMethod2$outboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
    ).optional(),
    feeType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalFeeType2$outboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
    ).optional(),
    transactionType: z.nullable(
      AvailableBalanceImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      subTotals: "sub-totals",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = AvailableBalanceImmediatelyAvailableSubtotal2$Outbound;
}

export function availableBalanceImmediatelyAvailableSubtotal2ToJSON(
  availableBalanceImmediatelyAvailableSubtotal2:
    AvailableBalanceImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    AvailableBalanceImmediatelyAvailableSubtotal2$outboundSchema.parse(
      availableBalanceImmediatelyAvailableSubtotal2,
    ),
  );
}

export function availableBalanceImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<
  AvailableBalanceImmediatelyAvailableSubtotal2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AvailableBalanceImmediatelyAvailableSubtotal2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AvailableBalanceImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceImmediatelyAvailable$inboundSchema: z.ZodType<
  AvailableBalanceImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => AvailableBalanceImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() =>
      AvailableBalanceImmediatelyAvailableSubtotal2$inboundSchema
    )),
  ).optional(),
});

/** @internal */
export type AvailableBalanceImmediatelyAvailable$Outbound = {
  amount?: AvailableBalanceImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<AvailableBalanceImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const AvailableBalanceImmediatelyAvailable$outboundSchema: z.ZodType<
  AvailableBalanceImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  AvailableBalanceImmediatelyAvailable
> = z.object({
  amount: z.lazy(() =>
    AvailableBalanceImmediatelyAvailableAmount$outboundSchema
  ).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() =>
      AvailableBalanceImmediatelyAvailableSubtotal2$outboundSchema
    )),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceImmediatelyAvailable$ {
  /** @deprecated use `AvailableBalanceImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceImmediatelyAvailable$inboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceImmediatelyAvailable$outboundSchema;
  /** @deprecated use `AvailableBalanceImmediatelyAvailable$Outbound` instead. */
  export type Outbound = AvailableBalanceImmediatelyAvailable$Outbound;
}

export function availableBalanceImmediatelyAvailableToJSON(
  availableBalanceImmediatelyAvailable: AvailableBalanceImmediatelyAvailable,
): string {
  return JSON.stringify(
    AvailableBalanceImmediatelyAvailable$outboundSchema.parse(
      availableBalanceImmediatelyAvailable,
    ),
  );
}

export function availableBalanceImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AvailableBalanceImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceCloseAmount$inboundSchema: z.ZodType<
  AvailableBalanceCloseAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AvailableBalanceCloseAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AvailableBalanceCloseAmount$outboundSchema: z.ZodType<
  AvailableBalanceCloseAmount$Outbound,
  z.ZodTypeDef,
  AvailableBalanceCloseAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseAmount$ {
  /** @deprecated use `AvailableBalanceCloseAmount$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceCloseAmount$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseAmount$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceCloseAmount$outboundSchema;
  /** @deprecated use `AvailableBalanceCloseAmount$Outbound` instead. */
  export type Outbound = AvailableBalanceCloseAmount$Outbound;
}

export function availableBalanceCloseAmountToJSON(
  availableBalanceCloseAmount: AvailableBalanceCloseAmount,
): string {
  return JSON.stringify(
    AvailableBalanceCloseAmount$outboundSchema.parse(
      availableBalanceCloseAmount,
    ),
  );
}

export function availableBalanceCloseAmountFromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceCloseAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceCloseAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceCloseAmount' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceCloseSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalMethod1> = z.nativeEnum(
    AvailableBalanceCloseSubTotalMethod1,
  );

/** @internal */
export const AvailableBalanceCloseSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalMethod1> =
    AvailableBalanceCloseSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotalMethod1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubTotalMethod1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubTotalMethod1$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalCardIssuer1> = z
    .nativeEnum(AvailableBalanceCloseSubTotalCardIssuer1);

/** @internal */
export const AvailableBalanceCloseSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalCardIssuer1> =
    AvailableBalanceCloseSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotalCardIssuer1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalCardAudience1> = z
    .nativeEnum(AvailableBalanceCloseSubTotalCardAudience1);

/** @internal */
export const AvailableBalanceCloseSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalCardAudience1> =
    AvailableBalanceCloseSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotalCardAudience1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalCardRegion1> = z
    .nativeEnum(AvailableBalanceCloseSubTotalCardRegion1);

/** @internal */
export const AvailableBalanceCloseSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalCardRegion1> =
    AvailableBalanceCloseSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotalCardRegion1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalFeeType1> = z.nativeEnum(
    AvailableBalanceCloseSubTotalFeeType1,
  );

/** @internal */
export const AvailableBalanceCloseSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalFeeType1> =
    AvailableBalanceCloseSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotalFeeType1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubTotalFeeType1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalPrepaymentPartType1> = z
    .nativeEnum(AvailableBalanceCloseSubTotalPrepaymentPartType1);

/** @internal */
export const AvailableBalanceCloseSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalPrepaymentPartType1> =
    AvailableBalanceCloseSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotalPrepaymentPartType1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalTransactionType1> = z
    .nativeEnum(AvailableBalanceCloseSubTotalTransactionType1);

/** @internal */
export const AvailableBalanceCloseSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubTotalTransactionType1> =
    AvailableBalanceCloseSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotalTransactionType1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubTotal1$inboundSchema: z.ZodType<
  AvailableBalanceCloseSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceCloseSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(AvailableBalanceCloseSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    AvailableBalanceCloseSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(AvailableBalanceCloseSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(AvailableBalanceCloseSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceCloseSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceCloseSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type AvailableBalanceCloseSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const AvailableBalanceCloseSubTotal1$outboundSchema: z.ZodType<
  AvailableBalanceCloseSubTotal1$Outbound,
  z.ZodTypeDef,
  AvailableBalanceCloseSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceCloseSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    AvailableBalanceCloseSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    AvailableBalanceCloseSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    AvailableBalanceCloseSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(AvailableBalanceCloseSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceCloseSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceCloseSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubTotal1$ {
  /** @deprecated use `AvailableBalanceCloseSubTotal1$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceCloseSubTotal1$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotal1$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceCloseSubTotal1$outboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubTotal1$Outbound` instead. */
  export type Outbound = AvailableBalanceCloseSubTotal1$Outbound;
}

export function availableBalanceCloseSubTotal1ToJSON(
  availableBalanceCloseSubTotal1: AvailableBalanceCloseSubTotal1,
): string {
  return JSON.stringify(
    AvailableBalanceCloseSubTotal1$outboundSchema.parse(
      availableBalanceCloseSubTotal1,
    ),
  );
}

export function availableBalanceCloseSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceCloseSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceCloseSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceCloseSubTotal1' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceCloseSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalMethod2> = z.nativeEnum(
    AvailableBalanceCloseSubtotalMethod2,
  );

/** @internal */
export const AvailableBalanceCloseSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalMethod2> =
    AvailableBalanceCloseSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotalMethod2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubtotalMethod2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubtotalMethod2$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalCardIssuer2> = z
    .nativeEnum(AvailableBalanceCloseSubtotalCardIssuer2);

/** @internal */
export const AvailableBalanceCloseSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalCardIssuer2> =
    AvailableBalanceCloseSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotalCardIssuer2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalCardAudience2> = z
    .nativeEnum(AvailableBalanceCloseSubtotalCardAudience2);

/** @internal */
export const AvailableBalanceCloseSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalCardAudience2> =
    AvailableBalanceCloseSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotalCardAudience2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalCardRegion2> = z
    .nativeEnum(AvailableBalanceCloseSubtotalCardRegion2);

/** @internal */
export const AvailableBalanceCloseSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalCardRegion2> =
    AvailableBalanceCloseSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotalCardRegion2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalFeeType2> = z.nativeEnum(
    AvailableBalanceCloseSubtotalFeeType2,
  );

/** @internal */
export const AvailableBalanceCloseSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalFeeType2> =
    AvailableBalanceCloseSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotalFeeType2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubtotalFeeType2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalPrepaymentPartType2> = z
    .nativeEnum(AvailableBalanceCloseSubtotalPrepaymentPartType2);

/** @internal */
export const AvailableBalanceCloseSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalPrepaymentPartType2> =
    AvailableBalanceCloseSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotalPrepaymentPartType2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalTransactionType2> = z
    .nativeEnum(AvailableBalanceCloseSubtotalTransactionType2);

/** @internal */
export const AvailableBalanceCloseSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof AvailableBalanceCloseSubtotalTransactionType2> =
    AvailableBalanceCloseSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotalTransactionType2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    AvailableBalanceCloseSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    AvailableBalanceCloseSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const AvailableBalanceCloseSubtotal2$inboundSchema: z.ZodType<
  AvailableBalanceCloseSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => AvailableBalanceCloseSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceCloseSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(AvailableBalanceCloseSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    AvailableBalanceCloseSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(AvailableBalanceCloseSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(AvailableBalanceCloseSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceCloseSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceCloseSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type AvailableBalanceCloseSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<AvailableBalanceCloseSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const AvailableBalanceCloseSubtotal2$outboundSchema: z.ZodType<
  AvailableBalanceCloseSubtotal2$Outbound,
  z.ZodTypeDef,
  AvailableBalanceCloseSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => AvailableBalanceCloseSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(AvailableBalanceCloseSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    AvailableBalanceCloseSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    AvailableBalanceCloseSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    AvailableBalanceCloseSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(AvailableBalanceCloseSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    AvailableBalanceCloseSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    AvailableBalanceCloseSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceCloseSubtotal2$ {
  /** @deprecated use `AvailableBalanceCloseSubtotal2$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceCloseSubtotal2$inboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotal2$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceCloseSubtotal2$outboundSchema;
  /** @deprecated use `AvailableBalanceCloseSubtotal2$Outbound` instead. */
  export type Outbound = AvailableBalanceCloseSubtotal2$Outbound;
}

export function availableBalanceCloseSubtotal2ToJSON(
  availableBalanceCloseSubtotal2: AvailableBalanceCloseSubtotal2,
): string {
  return JSON.stringify(
    AvailableBalanceCloseSubtotal2$outboundSchema.parse(
      availableBalanceCloseSubtotal2,
    ),
  );
}

export function availableBalanceCloseSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceCloseSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceCloseSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceCloseSubtotal2' from JSON`,
  );
}

/** @internal */
export const AvailableBalanceClose$inboundSchema: z.ZodType<
  AvailableBalanceClose,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => AvailableBalanceCloseAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => AvailableBalanceCloseSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type AvailableBalanceClose$Outbound = {
  amount?: AvailableBalanceCloseAmount$Outbound | undefined;
  subtotals?: Array<AvailableBalanceCloseSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const AvailableBalanceClose$outboundSchema: z.ZodType<
  AvailableBalanceClose$Outbound,
  z.ZodTypeDef,
  AvailableBalanceClose
> = z.object({
  amount: z.lazy(() => AvailableBalanceCloseAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => AvailableBalanceCloseSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalanceClose$ {
  /** @deprecated use `AvailableBalanceClose$inboundSchema` instead. */
  export const inboundSchema = AvailableBalanceClose$inboundSchema;
  /** @deprecated use `AvailableBalanceClose$outboundSchema` instead. */
  export const outboundSchema = AvailableBalanceClose$outboundSchema;
  /** @deprecated use `AvailableBalanceClose$Outbound` instead. */
  export type Outbound = AvailableBalanceClose$Outbound;
}

export function availableBalanceCloseToJSON(
  availableBalanceClose: AvailableBalanceClose,
): string {
  return JSON.stringify(
    AvailableBalanceClose$outboundSchema.parse(availableBalanceClose),
  );
}

export function availableBalanceCloseFromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalanceClose, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalanceClose$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalanceClose' from JSON`,
  );
}

/** @internal */
export const AvailableBalance$inboundSchema: z.ZodType<
  AvailableBalance,
  z.ZodTypeDef,
  unknown
> = z.object({
  open: z.lazy(() => AvailableBalanceOpen$inboundSchema).optional(),
  movedFromPending: z.lazy(() => MovedFromPending$inboundSchema).optional(),
  immediatelyAvailable: z.lazy(() =>
    AvailableBalanceImmediatelyAvailable$inboundSchema
  ).optional(),
  close: z.lazy(() => AvailableBalanceClose$inboundSchema).optional(),
});

/** @internal */
export type AvailableBalance$Outbound = {
  open?: AvailableBalanceOpen$Outbound | undefined;
  movedFromPending?: MovedFromPending$Outbound | undefined;
  immediatelyAvailable?:
    | AvailableBalanceImmediatelyAvailable$Outbound
    | undefined;
  close?: AvailableBalanceClose$Outbound | undefined;
};

/** @internal */
export const AvailableBalance$outboundSchema: z.ZodType<
  AvailableBalance$Outbound,
  z.ZodTypeDef,
  AvailableBalance
> = z.object({
  open: z.lazy(() => AvailableBalanceOpen$outboundSchema).optional(),
  movedFromPending: z.lazy(() => MovedFromPending$outboundSchema).optional(),
  immediatelyAvailable: z.lazy(() =>
    AvailableBalanceImmediatelyAvailable$outboundSchema
  ).optional(),
  close: z.lazy(() => AvailableBalanceClose$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableBalance$ {
  /** @deprecated use `AvailableBalance$inboundSchema` instead. */
  export const inboundSchema = AvailableBalance$inboundSchema;
  /** @deprecated use `AvailableBalance$outboundSchema` instead. */
  export const outboundSchema = AvailableBalance$outboundSchema;
  /** @deprecated use `AvailableBalance$Outbound` instead. */
  export type Outbound = AvailableBalance$Outbound;
}

export function availableBalanceToJSON(
  availableBalance: AvailableBalance,
): string {
  return JSON.stringify(
    AvailableBalance$outboundSchema.parse(availableBalance),
  );
}

export function availableBalanceFromJSON(
  jsonString: string,
): SafeParseResult<AvailableBalance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableBalance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableBalance' from JSON`,
  );
}

/** @internal */
export const OpenPendingAmount$inboundSchema: z.ZodType<
  OpenPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type OpenPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const OpenPendingAmount$outboundSchema: z.ZodType<
  OpenPendingAmount$Outbound,
  z.ZodTypeDef,
  OpenPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingAmount$ {
  /** @deprecated use `OpenPendingAmount$inboundSchema` instead. */
  export const inboundSchema = OpenPendingAmount$inboundSchema;
  /** @deprecated use `OpenPendingAmount$outboundSchema` instead. */
  export const outboundSchema = OpenPendingAmount$outboundSchema;
  /** @deprecated use `OpenPendingAmount$Outbound` instead. */
  export type Outbound = OpenPendingAmount$Outbound;
}

export function openPendingAmountToJSON(
  openPendingAmount: OpenPendingAmount,
): string {
  return JSON.stringify(
    OpenPendingAmount$outboundSchema.parse(openPendingAmount),
  );
}

export function openPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<OpenPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenPendingAmount' from JSON`,
  );
}

/** @internal */
export const OpenPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalMethod1
> = z.nativeEnum(OpenPendingSubTotalMethod1);

/** @internal */
export const OpenPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalMethod1
> = OpenPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotalMethod1$ {
  /** @deprecated use `OpenPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const OpenPendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalCardIssuer1
> = z.nativeEnum(OpenPendingSubTotalCardIssuer1);

/** @internal */
export const OpenPendingSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalCardIssuer1
> = OpenPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotalCardIssuer1$ {
  /** @deprecated use `OpenPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const OpenPendingSubTotalCardAudience1$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalCardAudience1
> = z.nativeEnum(OpenPendingSubTotalCardAudience1);

/** @internal */
export const OpenPendingSubTotalCardAudience1$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalCardAudience1
> = OpenPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotalCardAudience1$ {
  /** @deprecated use `OpenPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const OpenPendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalCardRegion1
> = z.nativeEnum(OpenPendingSubTotalCardRegion1);

/** @internal */
export const OpenPendingSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalCardRegion1
> = OpenPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotalCardRegion1$ {
  /** @deprecated use `OpenPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const OpenPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalFeeType1
> = z.nativeEnum(OpenPendingSubTotalFeeType1);

/** @internal */
export const OpenPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalFeeType1
> = OpenPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotalFeeType1$ {
  /** @deprecated use `OpenPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const OpenPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof OpenPendingSubTotalPrepaymentPartType1> = z.nativeEnum(
    OpenPendingSubTotalPrepaymentPartType1,
  );

/** @internal */
export const OpenPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof OpenPendingSubTotalPrepaymentPartType1> =
    OpenPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `OpenPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    OpenPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    OpenPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const OpenPendingSubTotalTransactionType1$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubTotalTransactionType1
> = z.nativeEnum(OpenPendingSubTotalTransactionType1);

/** @internal */
export const OpenPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof OpenPendingSubTotalTransactionType1> =
    OpenPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotalTransactionType1$ {
  /** @deprecated use `OpenPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    OpenPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    OpenPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const OpenPendingSubTotal1$inboundSchema: z.ZodType<
  OpenPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(OpenPendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(OpenPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenPendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(OpenPendingSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(OpenPendingSubTotalTransactionType1$inboundSchema)
    .optional(),
});

/** @internal */
export type OpenPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const OpenPendingSubTotal1$outboundSchema: z.ZodType<
  OpenPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  OpenPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(OpenPendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(OpenPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenPendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(OpenPendingSubTotalFeeType1$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    OpenPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubTotal1$ {
  /** @deprecated use `OpenPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubTotal1$inboundSchema;
  /** @deprecated use `OpenPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubTotal1$outboundSchema;
  /** @deprecated use `OpenPendingSubTotal1$Outbound` instead. */
  export type Outbound = OpenPendingSubTotal1$Outbound;
}

export function openPendingSubTotal1ToJSON(
  openPendingSubTotal1: OpenPendingSubTotal1,
): string {
  return JSON.stringify(
    OpenPendingSubTotal1$outboundSchema.parse(openPendingSubTotal1),
  );
}

export function openPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<OpenPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const OpenPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalMethod2
> = z.nativeEnum(OpenPendingSubtotalMethod2);

/** @internal */
export const OpenPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalMethod2
> = OpenPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotalMethod2$ {
  /** @deprecated use `OpenPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const OpenPendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalCardIssuer2
> = z.nativeEnum(OpenPendingSubtotalCardIssuer2);

/** @internal */
export const OpenPendingSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalCardIssuer2
> = OpenPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotalCardIssuer2$ {
  /** @deprecated use `OpenPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const OpenPendingSubtotalCardAudience2$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalCardAudience2
> = z.nativeEnum(OpenPendingSubtotalCardAudience2);

/** @internal */
export const OpenPendingSubtotalCardAudience2$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalCardAudience2
> = OpenPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotalCardAudience2$ {
  /** @deprecated use `OpenPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const OpenPendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalCardRegion2
> = z.nativeEnum(OpenPendingSubtotalCardRegion2);

/** @internal */
export const OpenPendingSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalCardRegion2
> = OpenPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotalCardRegion2$ {
  /** @deprecated use `OpenPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const OpenPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalFeeType2
> = z.nativeEnum(OpenPendingSubtotalFeeType2);

/** @internal */
export const OpenPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalFeeType2
> = OpenPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotalFeeType2$ {
  /** @deprecated use `OpenPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const OpenPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof OpenPendingSubtotalPrepaymentPartType2> = z.nativeEnum(
    OpenPendingSubtotalPrepaymentPartType2,
  );

/** @internal */
export const OpenPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof OpenPendingSubtotalPrepaymentPartType2> =
    OpenPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `OpenPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    OpenPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    OpenPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const OpenPendingSubtotalTransactionType2$inboundSchema: z.ZodNativeEnum<
  typeof OpenPendingSubtotalTransactionType2
> = z.nativeEnum(OpenPendingSubtotalTransactionType2);

/** @internal */
export const OpenPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof OpenPendingSubtotalTransactionType2> =
    OpenPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotalTransactionType2$ {
  /** @deprecated use `OpenPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    OpenPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    OpenPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const OpenPendingSubtotal2$inboundSchema: z.ZodType<
  OpenPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => OpenPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(OpenPendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(OpenPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenPendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(OpenPendingSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(OpenPendingSubtotalTransactionType2$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type OpenPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<OpenPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const OpenPendingSubtotal2$outboundSchema: z.ZodType<
  OpenPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  OpenPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => OpenPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(OpenPendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(OpenPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenPendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(OpenPendingSubtotalFeeType2$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    OpenPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPendingSubtotal2$ {
  /** @deprecated use `OpenPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = OpenPendingSubtotal2$inboundSchema;
  /** @deprecated use `OpenPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = OpenPendingSubtotal2$outboundSchema;
  /** @deprecated use `OpenPendingSubtotal2$Outbound` instead. */
  export type Outbound = OpenPendingSubtotal2$Outbound;
}

export function openPendingSubtotal2ToJSON(
  openPendingSubtotal2: OpenPendingSubtotal2,
): string {
  return JSON.stringify(
    OpenPendingSubtotal2$outboundSchema.parse(openPendingSubtotal2),
  );
}

export function openPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<OpenPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const OpenPending$inboundSchema: z.ZodType<
  OpenPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => OpenPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => OpenPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type OpenPending$Outbound = {
  amount?: OpenPendingAmount$Outbound | undefined;
  subtotals?: Array<OpenPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const OpenPending$outboundSchema: z.ZodType<
  OpenPending$Outbound,
  z.ZodTypeDef,
  OpenPending
> = z.object({
  amount: z.lazy(() => OpenPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => OpenPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPending$ {
  /** @deprecated use `OpenPending$inboundSchema` instead. */
  export const inboundSchema = OpenPending$inboundSchema;
  /** @deprecated use `OpenPending$outboundSchema` instead. */
  export const outboundSchema = OpenPending$outboundSchema;
  /** @deprecated use `OpenPending$Outbound` instead. */
  export type Outbound = OpenPending$Outbound;
}

export function openPendingToJSON(openPending: OpenPending): string {
  return JSON.stringify(OpenPending$outboundSchema.parse(openPending));
}

export function openPendingFromJSON(
  jsonString: string,
): SafeParseResult<OpenPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenPending' from JSON`,
  );
}

/** @internal */
export const OpenAvailableAmount$inboundSchema: z.ZodType<
  OpenAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type OpenAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const OpenAvailableAmount$outboundSchema: z.ZodType<
  OpenAvailableAmount$Outbound,
  z.ZodTypeDef,
  OpenAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableAmount$ {
  /** @deprecated use `OpenAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableAmount$inboundSchema;
  /** @deprecated use `OpenAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableAmount$outboundSchema;
  /** @deprecated use `OpenAvailableAmount$Outbound` instead. */
  export type Outbound = OpenAvailableAmount$Outbound;
}

export function openAvailableAmountToJSON(
  openAvailableAmount: OpenAvailableAmount,
): string {
  return JSON.stringify(
    OpenAvailableAmount$outboundSchema.parse(openAvailableAmount),
  );
}

export function openAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<OpenAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAvailableAmount' from JSON`,
  );
}

/** @internal */
export const OpenAvailableSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalMethod1
> = z.nativeEnum(OpenAvailableSubTotalMethod1);

/** @internal */
export const OpenAvailableSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalMethod1
> = OpenAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotalMethod1$ {
  /** @deprecated use `OpenAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const OpenAvailableSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalCardIssuer1
> = z.nativeEnum(OpenAvailableSubTotalCardIssuer1);

/** @internal */
export const OpenAvailableSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalCardIssuer1
> = OpenAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `OpenAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const OpenAvailableSubTotalCardAudience1$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalCardAudience1
> = z.nativeEnum(OpenAvailableSubTotalCardAudience1);

/** @internal */
export const OpenAvailableSubTotalCardAudience1$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalCardAudience1
> = OpenAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotalCardAudience1$ {
  /** @deprecated use `OpenAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    OpenAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const OpenAvailableSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalCardRegion1
> = z.nativeEnum(OpenAvailableSubTotalCardRegion1);

/** @internal */
export const OpenAvailableSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalCardRegion1
> = OpenAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotalCardRegion1$ {
  /** @deprecated use `OpenAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const OpenAvailableSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalFeeType1
> = z.nativeEnum(OpenAvailableSubTotalFeeType1);

/** @internal */
export const OpenAvailableSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubTotalFeeType1
> = OpenAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotalFeeType1$ {
  /** @deprecated use `OpenAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const OpenAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubTotalPrepaymentPartType1> = z
    .nativeEnum(OpenAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const OpenAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubTotalPrepaymentPartType1> =
    OpenAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `OpenAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    OpenAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    OpenAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const OpenAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubTotalTransactionType1> = z.nativeEnum(
    OpenAvailableSubTotalTransactionType1,
  );

/** @internal */
export const OpenAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubTotalTransactionType1> =
    OpenAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotalTransactionType1$ {
  /** @deprecated use `OpenAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    OpenAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    OpenAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const OpenAvailableSubTotal1$inboundSchema: z.ZodType<
  OpenAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(OpenAvailableSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(OpenAvailableSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenAvailableSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenAvailableSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(OpenAvailableSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    OpenAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type OpenAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const OpenAvailableSubTotal1$outboundSchema: z.ZodType<
  OpenAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  OpenAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(OpenAvailableSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(OpenAvailableSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenAvailableSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenAvailableSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(OpenAvailableSubTotalFeeType1$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    OpenAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubTotal1$ {
  /** @deprecated use `OpenAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubTotal1$inboundSchema;
  /** @deprecated use `OpenAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubTotal1$outboundSchema;
  /** @deprecated use `OpenAvailableSubTotal1$Outbound` instead. */
  export type Outbound = OpenAvailableSubTotal1$Outbound;
}

export function openAvailableSubTotal1ToJSON(
  openAvailableSubTotal1: OpenAvailableSubTotal1,
): string {
  return JSON.stringify(
    OpenAvailableSubTotal1$outboundSchema.parse(openAvailableSubTotal1),
  );
}

export function openAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<OpenAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const OpenAvailableSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalMethod2
> = z.nativeEnum(OpenAvailableSubtotalMethod2);

/** @internal */
export const OpenAvailableSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalMethod2
> = OpenAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotalMethod2$ {
  /** @deprecated use `OpenAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const OpenAvailableSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalCardIssuer2
> = z.nativeEnum(OpenAvailableSubtotalCardIssuer2);

/** @internal */
export const OpenAvailableSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalCardIssuer2
> = OpenAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `OpenAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const OpenAvailableSubtotalCardAudience2$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalCardAudience2
> = z.nativeEnum(OpenAvailableSubtotalCardAudience2);

/** @internal */
export const OpenAvailableSubtotalCardAudience2$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalCardAudience2
> = OpenAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotalCardAudience2$ {
  /** @deprecated use `OpenAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    OpenAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const OpenAvailableSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalCardRegion2
> = z.nativeEnum(OpenAvailableSubtotalCardRegion2);

/** @internal */
export const OpenAvailableSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalCardRegion2
> = OpenAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotalCardRegion2$ {
  /** @deprecated use `OpenAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const OpenAvailableSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalFeeType2
> = z.nativeEnum(OpenAvailableSubtotalFeeType2);

/** @internal */
export const OpenAvailableSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof OpenAvailableSubtotalFeeType2
> = OpenAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotalFeeType2$ {
  /** @deprecated use `OpenAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const OpenAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubtotalPrepaymentPartType2> = z
    .nativeEnum(OpenAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const OpenAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubtotalPrepaymentPartType2> =
    OpenAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `OpenAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    OpenAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    OpenAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const OpenAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubtotalTransactionType2> = z.nativeEnum(
    OpenAvailableSubtotalTransactionType2,
  );

/** @internal */
export const OpenAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof OpenAvailableSubtotalTransactionType2> =
    OpenAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotalTransactionType2$ {
  /** @deprecated use `OpenAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    OpenAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    OpenAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const OpenAvailableSubtotal2$inboundSchema: z.ZodType<
  OpenAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => OpenAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(OpenAvailableSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(OpenAvailableSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenAvailableSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenAvailableSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(OpenAvailableSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    OpenAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type OpenAvailableSubtotal2$Outbound = {
  "sub-totals"?: Array<OpenAvailableSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const OpenAvailableSubtotal2$outboundSchema: z.ZodType<
  OpenAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  OpenAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => OpenAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(OpenAvailableSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(OpenAvailableSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(OpenAvailableSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(OpenAvailableSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(OpenAvailableSubtotalFeeType2$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    OpenAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    OpenAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailableSubtotal2$ {
  /** @deprecated use `OpenAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema = OpenAvailableSubtotal2$inboundSchema;
  /** @deprecated use `OpenAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema = OpenAvailableSubtotal2$outboundSchema;
  /** @deprecated use `OpenAvailableSubtotal2$Outbound` instead. */
  export type Outbound = OpenAvailableSubtotal2$Outbound;
}

export function openAvailableSubtotal2ToJSON(
  openAvailableSubtotal2: OpenAvailableSubtotal2,
): string {
  return JSON.stringify(
    OpenAvailableSubtotal2$outboundSchema.parse(openAvailableSubtotal2),
  );
}

export function openAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<OpenAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const OpenAvailable$inboundSchema: z.ZodType<
  OpenAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => OpenAvailableAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => OpenAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type OpenAvailable$Outbound = {
  amount?: OpenAvailableAmount$Outbound | undefined;
  subtotals?: Array<OpenAvailableSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const OpenAvailable$outboundSchema: z.ZodType<
  OpenAvailable$Outbound,
  z.ZodTypeDef,
  OpenAvailable
> = z.object({
  amount: z.lazy(() => OpenAvailableAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => OpenAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAvailable$ {
  /** @deprecated use `OpenAvailable$inboundSchema` instead. */
  export const inboundSchema = OpenAvailable$inboundSchema;
  /** @deprecated use `OpenAvailable$outboundSchema` instead. */
  export const outboundSchema = OpenAvailable$outboundSchema;
  /** @deprecated use `OpenAvailable$Outbound` instead. */
  export type Outbound = OpenAvailable$Outbound;
}

export function openAvailableToJSON(openAvailable: OpenAvailable): string {
  return JSON.stringify(OpenAvailable$outboundSchema.parse(openAvailable));
}

export function openAvailableFromJSON(
  jsonString: string,
): SafeParseResult<OpenAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAvailable' from JSON`,
  );
}

/** @internal */
export const Open$inboundSchema: z.ZodType<Open, z.ZodTypeDef, unknown> = z
  .object({
    pending: z.lazy(() => OpenPending$inboundSchema).optional(),
    available: z.lazy(() => OpenAvailable$inboundSchema).optional(),
  });

/** @internal */
export type Open$Outbound = {
  pending?: OpenPending$Outbound | undefined;
  available?: OpenAvailable$Outbound | undefined;
};

/** @internal */
export const Open$outboundSchema: z.ZodType<Open$Outbound, z.ZodTypeDef, Open> =
  z.object({
    pending: z.lazy(() => OpenPending$outboundSchema).optional(),
    available: z.lazy(() => OpenAvailable$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Open$ {
  /** @deprecated use `Open$inboundSchema` instead. */
  export const inboundSchema = Open$inboundSchema;
  /** @deprecated use `Open$outboundSchema` instead. */
  export const outboundSchema = Open$outboundSchema;
  /** @deprecated use `Open$Outbound` instead. */
  export type Outbound = Open$Outbound;
}

export function openToJSON(open: Open): string {
  return JSON.stringify(Open$outboundSchema.parse(open));
}

export function openFromJSON(
  jsonString: string,
): SafeParseResult<Open, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Open$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Open' from JSON`,
  );
}

/** @internal */
export const ClosePendingAmount$inboundSchema: z.ZodType<
  ClosePendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ClosePendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ClosePendingAmount$outboundSchema: z.ZodType<
  ClosePendingAmount$Outbound,
  z.ZodTypeDef,
  ClosePendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingAmount$ {
  /** @deprecated use `ClosePendingAmount$inboundSchema` instead. */
  export const inboundSchema = ClosePendingAmount$inboundSchema;
  /** @deprecated use `ClosePendingAmount$outboundSchema` instead. */
  export const outboundSchema = ClosePendingAmount$outboundSchema;
  /** @deprecated use `ClosePendingAmount$Outbound` instead. */
  export type Outbound = ClosePendingAmount$Outbound;
}

export function closePendingAmountToJSON(
  closePendingAmount: ClosePendingAmount,
): string {
  return JSON.stringify(
    ClosePendingAmount$outboundSchema.parse(closePendingAmount),
  );
}

export function closePendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<ClosePendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClosePendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClosePendingAmount' from JSON`,
  );
}

/** @internal */
export const ClosePendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalMethod1
> = z.nativeEnum(ClosePendingSubTotalMethod1);

/** @internal */
export const ClosePendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalMethod1
> = ClosePendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotalMethod1$ {
  /** @deprecated use `ClosePendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const ClosePendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalCardIssuer1
> = z.nativeEnum(ClosePendingSubTotalCardIssuer1);

/** @internal */
export const ClosePendingSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalCardIssuer1
> = ClosePendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotalCardIssuer1$ {
  /** @deprecated use `ClosePendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const ClosePendingSubTotalCardAudience1$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalCardAudience1
> = z.nativeEnum(ClosePendingSubTotalCardAudience1);

/** @internal */
export const ClosePendingSubTotalCardAudience1$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalCardAudience1
> = ClosePendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotalCardAudience1$ {
  /** @deprecated use `ClosePendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    ClosePendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const ClosePendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalCardRegion1
> = z.nativeEnum(ClosePendingSubTotalCardRegion1);

/** @internal */
export const ClosePendingSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalCardRegion1
> = ClosePendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotalCardRegion1$ {
  /** @deprecated use `ClosePendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const ClosePendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalFeeType1
> = z.nativeEnum(ClosePendingSubTotalFeeType1);

/** @internal */
export const ClosePendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubTotalFeeType1
> = ClosePendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotalFeeType1$ {
  /** @deprecated use `ClosePendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const ClosePendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(ClosePendingSubTotalPrepaymentPartType1);

/** @internal */
export const ClosePendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubTotalPrepaymentPartType1> =
    ClosePendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `ClosePendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    ClosePendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    ClosePendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const ClosePendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubTotalTransactionType1> = z.nativeEnum(
    ClosePendingSubTotalTransactionType1,
  );

/** @internal */
export const ClosePendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubTotalTransactionType1> =
    ClosePendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotalTransactionType1$ {
  /** @deprecated use `ClosePendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    ClosePendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    ClosePendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const ClosePendingSubTotal1$inboundSchema: z.ZodType<
  ClosePendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(ClosePendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(ClosePendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(ClosePendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(ClosePendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(ClosePendingSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    ClosePendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ClosePendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type ClosePendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ClosePendingSubTotal1$outboundSchema: z.ZodType<
  ClosePendingSubTotal1$Outbound,
  z.ZodTypeDef,
  ClosePendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(ClosePendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(ClosePendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(ClosePendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(ClosePendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(ClosePendingSubTotalFeeType1$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    ClosePendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ClosePendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubTotal1$ {
  /** @deprecated use `ClosePendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubTotal1$inboundSchema;
  /** @deprecated use `ClosePendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubTotal1$outboundSchema;
  /** @deprecated use `ClosePendingSubTotal1$Outbound` instead. */
  export type Outbound = ClosePendingSubTotal1$Outbound;
}

export function closePendingSubTotal1ToJSON(
  closePendingSubTotal1: ClosePendingSubTotal1,
): string {
  return JSON.stringify(
    ClosePendingSubTotal1$outboundSchema.parse(closePendingSubTotal1),
  );
}

export function closePendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<ClosePendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClosePendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClosePendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const ClosePendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalMethod2
> = z.nativeEnum(ClosePendingSubtotalMethod2);

/** @internal */
export const ClosePendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalMethod2
> = ClosePendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotalMethod2$ {
  /** @deprecated use `ClosePendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const ClosePendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalCardIssuer2
> = z.nativeEnum(ClosePendingSubtotalCardIssuer2);

/** @internal */
export const ClosePendingSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalCardIssuer2
> = ClosePendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotalCardIssuer2$ {
  /** @deprecated use `ClosePendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const ClosePendingSubtotalCardAudience2$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalCardAudience2
> = z.nativeEnum(ClosePendingSubtotalCardAudience2);

/** @internal */
export const ClosePendingSubtotalCardAudience2$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalCardAudience2
> = ClosePendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotalCardAudience2$ {
  /** @deprecated use `ClosePendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    ClosePendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const ClosePendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalCardRegion2
> = z.nativeEnum(ClosePendingSubtotalCardRegion2);

/** @internal */
export const ClosePendingSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalCardRegion2
> = ClosePendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotalCardRegion2$ {
  /** @deprecated use `ClosePendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const ClosePendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalFeeType2
> = z.nativeEnum(ClosePendingSubtotalFeeType2);

/** @internal */
export const ClosePendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof ClosePendingSubtotalFeeType2
> = ClosePendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotalFeeType2$ {
  /** @deprecated use `ClosePendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const ClosePendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(ClosePendingSubtotalPrepaymentPartType2);

/** @internal */
export const ClosePendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubtotalPrepaymentPartType2> =
    ClosePendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `ClosePendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    ClosePendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    ClosePendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const ClosePendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubtotalTransactionType2> = z.nativeEnum(
    ClosePendingSubtotalTransactionType2,
  );

/** @internal */
export const ClosePendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof ClosePendingSubtotalTransactionType2> =
    ClosePendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotalTransactionType2$ {
  /** @deprecated use `ClosePendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    ClosePendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    ClosePendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const ClosePendingSubtotal2$inboundSchema: z.ZodType<
  ClosePendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => ClosePendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(ClosePendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(ClosePendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(ClosePendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(ClosePendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(ClosePendingSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    ClosePendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ClosePendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type ClosePendingSubtotal2$Outbound = {
  "sub-totals"?: Array<ClosePendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ClosePendingSubtotal2$outboundSchema: z.ZodType<
  ClosePendingSubtotal2$Outbound,
  z.ZodTypeDef,
  ClosePendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => ClosePendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(ClosePendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(ClosePendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(ClosePendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(ClosePendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(ClosePendingSubtotalFeeType2$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    ClosePendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ClosePendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePendingSubtotal2$ {
  /** @deprecated use `ClosePendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = ClosePendingSubtotal2$inboundSchema;
  /** @deprecated use `ClosePendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = ClosePendingSubtotal2$outboundSchema;
  /** @deprecated use `ClosePendingSubtotal2$Outbound` instead. */
  export type Outbound = ClosePendingSubtotal2$Outbound;
}

export function closePendingSubtotal2ToJSON(
  closePendingSubtotal2: ClosePendingSubtotal2,
): string {
  return JSON.stringify(
    ClosePendingSubtotal2$outboundSchema.parse(closePendingSubtotal2),
  );
}

export function closePendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<ClosePendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClosePendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClosePendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const ClosePending$inboundSchema: z.ZodType<
  ClosePending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ClosePendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => ClosePendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type ClosePending$Outbound = {
  amount?: ClosePendingAmount$Outbound | undefined;
  subtotals?: Array<ClosePendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const ClosePending$outboundSchema: z.ZodType<
  ClosePending$Outbound,
  z.ZodTypeDef,
  ClosePending
> = z.object({
  amount: z.lazy(() => ClosePendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => ClosePendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClosePending$ {
  /** @deprecated use `ClosePending$inboundSchema` instead. */
  export const inboundSchema = ClosePending$inboundSchema;
  /** @deprecated use `ClosePending$outboundSchema` instead. */
  export const outboundSchema = ClosePending$outboundSchema;
  /** @deprecated use `ClosePending$Outbound` instead. */
  export type Outbound = ClosePending$Outbound;
}

export function closePendingToJSON(closePending: ClosePending): string {
  return JSON.stringify(ClosePending$outboundSchema.parse(closePending));
}

export function closePendingFromJSON(
  jsonString: string,
): SafeParseResult<ClosePending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClosePending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClosePending' from JSON`,
  );
}

/** @internal */
export const CloseAvailableAmount$inboundSchema: z.ZodType<
  CloseAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CloseAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CloseAvailableAmount$outboundSchema: z.ZodType<
  CloseAvailableAmount$Outbound,
  z.ZodTypeDef,
  CloseAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableAmount$ {
  /** @deprecated use `CloseAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableAmount$inboundSchema;
  /** @deprecated use `CloseAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = CloseAvailableAmount$outboundSchema;
  /** @deprecated use `CloseAvailableAmount$Outbound` instead. */
  export type Outbound = CloseAvailableAmount$Outbound;
}

export function closeAvailableAmountToJSON(
  closeAvailableAmount: CloseAvailableAmount,
): string {
  return JSON.stringify(
    CloseAvailableAmount$outboundSchema.parse(closeAvailableAmount),
  );
}

export function closeAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<CloseAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CloseAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CloseAvailableAmount' from JSON`,
  );
}

/** @internal */
export const CloseAvailableSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalMethod1
> = z.nativeEnum(CloseAvailableSubTotalMethod1);

/** @internal */
export const CloseAvailableSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalMethod1
> = CloseAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotalMethod1$ {
  /** @deprecated use `CloseAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = CloseAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const CloseAvailableSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalCardIssuer1
> = z.nativeEnum(CloseAvailableSubTotalCardIssuer1);

/** @internal */
export const CloseAvailableSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalCardIssuer1
> = CloseAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `CloseAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const CloseAvailableSubTotalCardAudience1$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalCardAudience1
> = z.nativeEnum(CloseAvailableSubTotalCardAudience1);

/** @internal */
export const CloseAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubTotalCardAudience1> =
    CloseAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotalCardAudience1$ {
  /** @deprecated use `CloseAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    CloseAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const CloseAvailableSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalCardRegion1
> = z.nativeEnum(CloseAvailableSubTotalCardRegion1);

/** @internal */
export const CloseAvailableSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalCardRegion1
> = CloseAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotalCardRegion1$ {
  /** @deprecated use `CloseAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const CloseAvailableSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalFeeType1
> = z.nativeEnum(CloseAvailableSubTotalFeeType1);

/** @internal */
export const CloseAvailableSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubTotalFeeType1
> = CloseAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotalFeeType1$ {
  /** @deprecated use `CloseAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = CloseAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const CloseAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubTotalPrepaymentPartType1> = z
    .nativeEnum(CloseAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const CloseAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubTotalPrepaymentPartType1> =
    CloseAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `CloseAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    CloseAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const CloseAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubTotalTransactionType1> = z.nativeEnum(
    CloseAvailableSubTotalTransactionType1,
  );

/** @internal */
export const CloseAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubTotalTransactionType1> =
    CloseAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotalTransactionType1$ {
  /** @deprecated use `CloseAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    CloseAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const CloseAvailableSubTotal1$inboundSchema: z.ZodType<
  CloseAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CloseAvailableSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(CloseAvailableSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(CloseAvailableSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(CloseAvailableSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(CloseAvailableSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CloseAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CloseAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type CloseAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CloseAvailableSubTotal1$outboundSchema: z.ZodType<
  CloseAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  CloseAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CloseAvailableSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(CloseAvailableSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(CloseAvailableSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(CloseAvailableSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(CloseAvailableSubTotalFeeType1$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CloseAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CloseAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubTotal1$ {
  /** @deprecated use `CloseAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubTotal1$inboundSchema;
  /** @deprecated use `CloseAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema = CloseAvailableSubTotal1$outboundSchema;
  /** @deprecated use `CloseAvailableSubTotal1$Outbound` instead. */
  export type Outbound = CloseAvailableSubTotal1$Outbound;
}

export function closeAvailableSubTotal1ToJSON(
  closeAvailableSubTotal1: CloseAvailableSubTotal1,
): string {
  return JSON.stringify(
    CloseAvailableSubTotal1$outboundSchema.parse(closeAvailableSubTotal1),
  );
}

export function closeAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<CloseAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CloseAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CloseAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const CloseAvailableSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalMethod2
> = z.nativeEnum(CloseAvailableSubtotalMethod2);

/** @internal */
export const CloseAvailableSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalMethod2
> = CloseAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotalMethod2$ {
  /** @deprecated use `CloseAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = CloseAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const CloseAvailableSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalCardIssuer2
> = z.nativeEnum(CloseAvailableSubtotalCardIssuer2);

/** @internal */
export const CloseAvailableSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalCardIssuer2
> = CloseAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `CloseAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const CloseAvailableSubtotalCardAudience2$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalCardAudience2
> = z.nativeEnum(CloseAvailableSubtotalCardAudience2);

/** @internal */
export const CloseAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubtotalCardAudience2> =
    CloseAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotalCardAudience2$ {
  /** @deprecated use `CloseAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    CloseAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const CloseAvailableSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalCardRegion2
> = z.nativeEnum(CloseAvailableSubtotalCardRegion2);

/** @internal */
export const CloseAvailableSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalCardRegion2
> = CloseAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotalCardRegion2$ {
  /** @deprecated use `CloseAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const CloseAvailableSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalFeeType2
> = z.nativeEnum(CloseAvailableSubtotalFeeType2);

/** @internal */
export const CloseAvailableSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof CloseAvailableSubtotalFeeType2
> = CloseAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotalFeeType2$ {
  /** @deprecated use `CloseAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = CloseAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const CloseAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubtotalPrepaymentPartType2> = z
    .nativeEnum(CloseAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const CloseAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubtotalPrepaymentPartType2> =
    CloseAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `CloseAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    CloseAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const CloseAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubtotalTransactionType2> = z.nativeEnum(
    CloseAvailableSubtotalTransactionType2,
  );

/** @internal */
export const CloseAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof CloseAvailableSubtotalTransactionType2> =
    CloseAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotalTransactionType2$ {
  /** @deprecated use `CloseAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    CloseAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    CloseAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const CloseAvailableSubtotal2$inboundSchema: z.ZodType<
  CloseAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => CloseAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CloseAvailableSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(CloseAvailableSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(CloseAvailableSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(CloseAvailableSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(CloseAvailableSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CloseAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CloseAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type CloseAvailableSubtotal2$Outbound = {
  "sub-totals"?: Array<CloseAvailableSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CloseAvailableSubtotal2$outboundSchema: z.ZodType<
  CloseAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  CloseAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => CloseAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CloseAvailableSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(CloseAvailableSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(CloseAvailableSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(CloseAvailableSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(CloseAvailableSubtotalFeeType2$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CloseAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CloseAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailableSubtotal2$ {
  /** @deprecated use `CloseAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema = CloseAvailableSubtotal2$inboundSchema;
  /** @deprecated use `CloseAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema = CloseAvailableSubtotal2$outboundSchema;
  /** @deprecated use `CloseAvailableSubtotal2$Outbound` instead. */
  export type Outbound = CloseAvailableSubtotal2$Outbound;
}

export function closeAvailableSubtotal2ToJSON(
  closeAvailableSubtotal2: CloseAvailableSubtotal2,
): string {
  return JSON.stringify(
    CloseAvailableSubtotal2$outboundSchema.parse(closeAvailableSubtotal2),
  );
}

export function closeAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<CloseAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CloseAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CloseAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const CloseAvailable$inboundSchema: z.ZodType<
  CloseAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CloseAvailableAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CloseAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type CloseAvailable$Outbound = {
  amount?: CloseAvailableAmount$Outbound | undefined;
  subtotals?: Array<CloseAvailableSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const CloseAvailable$outboundSchema: z.ZodType<
  CloseAvailable$Outbound,
  z.ZodTypeDef,
  CloseAvailable
> = z.object({
  amount: z.lazy(() => CloseAvailableAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CloseAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CloseAvailable$ {
  /** @deprecated use `CloseAvailable$inboundSchema` instead. */
  export const inboundSchema = CloseAvailable$inboundSchema;
  /** @deprecated use `CloseAvailable$outboundSchema` instead. */
  export const outboundSchema = CloseAvailable$outboundSchema;
  /** @deprecated use `CloseAvailable$Outbound` instead. */
  export type Outbound = CloseAvailable$Outbound;
}

export function closeAvailableToJSON(closeAvailable: CloseAvailable): string {
  return JSON.stringify(CloseAvailable$outboundSchema.parse(closeAvailable));
}

export function closeAvailableFromJSON(
  jsonString: string,
): SafeParseResult<CloseAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CloseAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CloseAvailable' from JSON`,
  );
}

/** @internal */
export const Close$inboundSchema: z.ZodType<Close, z.ZodTypeDef, unknown> = z
  .object({
    pending: z.lazy(() => ClosePending$inboundSchema).optional(),
    available: z.lazy(() => CloseAvailable$inboundSchema).optional(),
  });

/** @internal */
export type Close$Outbound = {
  pending?: ClosePending$Outbound | undefined;
  available?: CloseAvailable$Outbound | undefined;
};

/** @internal */
export const Close$outboundSchema: z.ZodType<
  Close$Outbound,
  z.ZodTypeDef,
  Close
> = z.object({
  pending: z.lazy(() => ClosePending$outboundSchema).optional(),
  available: z.lazy(() => CloseAvailable$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Close$ {
  /** @deprecated use `Close$inboundSchema` instead. */
  export const inboundSchema = Close$inboundSchema;
  /** @deprecated use `Close$outboundSchema` instead. */
  export const outboundSchema = Close$outboundSchema;
  /** @deprecated use `Close$Outbound` instead. */
  export type Outbound = Close$Outbound;
}

export function closeToJSON(close: Close): string {
  return JSON.stringify(Close$outboundSchema.parse(close));
}

export function closeFromJSON(
  jsonString: string,
): SafeParseResult<Close, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Close$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Close' from JSON`,
  );
}

/** @internal */
export const PaymentsPendingAmount$inboundSchema: z.ZodType<
  PaymentsPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type PaymentsPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const PaymentsPendingAmount$outboundSchema: z.ZodType<
  PaymentsPendingAmount$Outbound,
  z.ZodTypeDef,
  PaymentsPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingAmount$ {
  /** @deprecated use `PaymentsPendingAmount$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingAmount$inboundSchema;
  /** @deprecated use `PaymentsPendingAmount$outboundSchema` instead. */
  export const outboundSchema = PaymentsPendingAmount$outboundSchema;
  /** @deprecated use `PaymentsPendingAmount$Outbound` instead. */
  export type Outbound = PaymentsPendingAmount$Outbound;
}

export function paymentsPendingAmountToJSON(
  paymentsPendingAmount: PaymentsPendingAmount,
): string {
  return JSON.stringify(
    PaymentsPendingAmount$outboundSchema.parse(paymentsPendingAmount),
  );
}

export function paymentsPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsPendingAmount' from JSON`,
  );
}

/** @internal */
export const PaymentsPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalMethod1
> = z.nativeEnum(PaymentsPendingSubTotalMethod1);

/** @internal */
export const PaymentsPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalMethod1
> = PaymentsPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotalMethod1$ {
  /** @deprecated use `PaymentsPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = PaymentsPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalCardIssuer1
> = z.nativeEnum(PaymentsPendingSubTotalCardIssuer1);

/** @internal */
export const PaymentsPendingSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalCardIssuer1
> = PaymentsPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotalCardIssuer1$ {
  /** @deprecated use `PaymentsPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubTotalCardAudience1> = z.nativeEnum(
    PaymentsPendingSubTotalCardAudience1,
  );

/** @internal */
export const PaymentsPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubTotalCardAudience1> =
    PaymentsPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotalCardAudience1$ {
  /** @deprecated use `PaymentsPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalCardRegion1
> = z.nativeEnum(PaymentsPendingSubTotalCardRegion1);

/** @internal */
export const PaymentsPendingSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalCardRegion1
> = PaymentsPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotalCardRegion1$ {
  /** @deprecated use `PaymentsPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalFeeType1
> = z.nativeEnum(PaymentsPendingSubTotalFeeType1);

/** @internal */
export const PaymentsPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubTotalFeeType1
> = PaymentsPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotalFeeType1$ {
  /** @deprecated use `PaymentsPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = PaymentsPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(PaymentsPendingSubTotalPrepaymentPartType1);

/** @internal */
export const PaymentsPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubTotalPrepaymentPartType1> =
    PaymentsPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `PaymentsPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubTotalTransactionType1> = z
    .nativeEnum(PaymentsPendingSubTotalTransactionType1);

/** @internal */
export const PaymentsPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubTotalTransactionType1> =
    PaymentsPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotalTransactionType1$ {
  /** @deprecated use `PaymentsPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubTotal1$inboundSchema: z.ZodType<
  PaymentsPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PaymentsPendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(PaymentsPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(PaymentsPendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(PaymentsPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(PaymentsPendingSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    PaymentsPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type PaymentsPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PaymentsPendingSubTotal1$outboundSchema: z.ZodType<
  PaymentsPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  PaymentsPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PaymentsPendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(PaymentsPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(PaymentsPendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(PaymentsPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(PaymentsPendingSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PaymentsPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubTotal1$ {
  /** @deprecated use `PaymentsPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubTotal1$inboundSchema;
  /** @deprecated use `PaymentsPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = PaymentsPendingSubTotal1$outboundSchema;
  /** @deprecated use `PaymentsPendingSubTotal1$Outbound` instead. */
  export type Outbound = PaymentsPendingSubTotal1$Outbound;
}

export function paymentsPendingSubTotal1ToJSON(
  paymentsPendingSubTotal1: PaymentsPendingSubTotal1,
): string {
  return JSON.stringify(
    PaymentsPendingSubTotal1$outboundSchema.parse(paymentsPendingSubTotal1),
  );
}

export function paymentsPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<PaymentsPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const PaymentsPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalMethod2
> = z.nativeEnum(PaymentsPendingSubtotalMethod2);

/** @internal */
export const PaymentsPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalMethod2
> = PaymentsPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotalMethod2$ {
  /** @deprecated use `PaymentsPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = PaymentsPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalCardIssuer2
> = z.nativeEnum(PaymentsPendingSubtotalCardIssuer2);

/** @internal */
export const PaymentsPendingSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalCardIssuer2
> = PaymentsPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotalCardIssuer2$ {
  /** @deprecated use `PaymentsPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubtotalCardAudience2> = z.nativeEnum(
    PaymentsPendingSubtotalCardAudience2,
  );

/** @internal */
export const PaymentsPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubtotalCardAudience2> =
    PaymentsPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotalCardAudience2$ {
  /** @deprecated use `PaymentsPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalCardRegion2
> = z.nativeEnum(PaymentsPendingSubtotalCardRegion2);

/** @internal */
export const PaymentsPendingSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalCardRegion2
> = PaymentsPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotalCardRegion2$ {
  /** @deprecated use `PaymentsPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalFeeType2
> = z.nativeEnum(PaymentsPendingSubtotalFeeType2);

/** @internal */
export const PaymentsPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof PaymentsPendingSubtotalFeeType2
> = PaymentsPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotalFeeType2$ {
  /** @deprecated use `PaymentsPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = PaymentsPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(PaymentsPendingSubtotalPrepaymentPartType2);

/** @internal */
export const PaymentsPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubtotalPrepaymentPartType2> =
    PaymentsPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `PaymentsPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubtotalTransactionType2> = z
    .nativeEnum(PaymentsPendingSubtotalTransactionType2);

/** @internal */
export const PaymentsPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsPendingSubtotalTransactionType2> =
    PaymentsPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotalTransactionType2$ {
  /** @deprecated use `PaymentsPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const PaymentsPendingSubtotal2$inboundSchema: z.ZodType<
  PaymentsPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => PaymentsPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PaymentsPendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(PaymentsPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(PaymentsPendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(PaymentsPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(PaymentsPendingSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    PaymentsPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type PaymentsPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<PaymentsPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PaymentsPendingSubtotal2$outboundSchema: z.ZodType<
  PaymentsPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  PaymentsPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => PaymentsPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PaymentsPendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(PaymentsPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(PaymentsPendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(PaymentsPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(PaymentsPendingSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PaymentsPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPendingSubtotal2$ {
  /** @deprecated use `PaymentsPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = PaymentsPendingSubtotal2$inboundSchema;
  /** @deprecated use `PaymentsPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = PaymentsPendingSubtotal2$outboundSchema;
  /** @deprecated use `PaymentsPendingSubtotal2$Outbound` instead. */
  export type Outbound = PaymentsPendingSubtotal2$Outbound;
}

export function paymentsPendingSubtotal2ToJSON(
  paymentsPendingSubtotal2: PaymentsPendingSubtotal2,
): string {
  return JSON.stringify(
    PaymentsPendingSubtotal2$outboundSchema.parse(paymentsPendingSubtotal2),
  );
}

export function paymentsPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<PaymentsPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const PaymentsPending$inboundSchema: z.ZodType<
  PaymentsPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => PaymentsPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PaymentsPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PaymentsPending$Outbound = {
  amount?: PaymentsPendingAmount$Outbound | undefined;
  subtotals?: Array<PaymentsPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const PaymentsPending$outboundSchema: z.ZodType<
  PaymentsPending$Outbound,
  z.ZodTypeDef,
  PaymentsPending
> = z.object({
  amount: z.lazy(() => PaymentsPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PaymentsPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPending$ {
  /** @deprecated use `PaymentsPending$inboundSchema` instead. */
  export const inboundSchema = PaymentsPending$inboundSchema;
  /** @deprecated use `PaymentsPending$outboundSchema` instead. */
  export const outboundSchema = PaymentsPending$outboundSchema;
  /** @deprecated use `PaymentsPending$Outbound` instead. */
  export type Outbound = PaymentsPending$Outbound;
}

export function paymentsPendingToJSON(
  paymentsPending: PaymentsPending,
): string {
  return JSON.stringify(PaymentsPending$outboundSchema.parse(paymentsPending));
}

export function paymentsPendingFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsPending' from JSON`,
  );
}

/** @internal */
export const PaymentsMovedToAvailableAmount$inboundSchema: z.ZodType<
  PaymentsMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type PaymentsMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const PaymentsMovedToAvailableAmount$outboundSchema: z.ZodType<
  PaymentsMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  PaymentsMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableAmount$ {
  /** @deprecated use `PaymentsMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = PaymentsMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = PaymentsMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = PaymentsMovedToAvailableAmount$Outbound;
}

export function paymentsMovedToAvailableAmountToJSON(
  paymentsMovedToAvailableAmount: PaymentsMovedToAvailableAmount,
): string {
  return JSON.stringify(
    PaymentsMovedToAvailableAmount$outboundSchema.parse(
      paymentsMovedToAvailableAmount,
    ),
  );
}

export function paymentsMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const PaymentsMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalMethod1> = z
    .nativeEnum(PaymentsMovedToAvailableSubTotalMethod1);

/** @internal */
export const PaymentsMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalMethod1> =
    PaymentsMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(PaymentsMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const PaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalCardIssuer1> =
    PaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalCardAudience1> = z
    .nativeEnum(PaymentsMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const PaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalCardAudience1> =
    PaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(PaymentsMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const PaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalCardRegion1> =
    PaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(PaymentsMovedToAvailableSubTotalFeeType1);

/** @internal */
export const PaymentsMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalFeeType1> =
    PaymentsMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalPrepaymentPartType1> =
    z.nativeEnum(PaymentsMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const PaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalPrepaymentPartType1> =
    PaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalTransactionType1> = z
    .nativeEnum(PaymentsMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const PaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubTotalTransactionType1> =
    PaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  PaymentsMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PaymentsMovedToAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(PaymentsMovedToAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type PaymentsMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PaymentsMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  PaymentsMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  PaymentsMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PaymentsMovedToAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(PaymentsMovedToAvailableSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubTotal1$ {
  /** @deprecated use `PaymentsMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema = PaymentsMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = PaymentsMovedToAvailableSubTotal1$Outbound;
}

export function paymentsMovedToAvailableSubTotal1ToJSON(
  paymentsMovedToAvailableSubTotal1: PaymentsMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    PaymentsMovedToAvailableSubTotal1$outboundSchema.parse(
      paymentsMovedToAvailableSubTotal1,
    ),
  );
}

export function paymentsMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<PaymentsMovedToAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsMovedToAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const PaymentsMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalMethod2> = z
    .nativeEnum(PaymentsMovedToAvailableSubtotalMethod2);

/** @internal */
export const PaymentsMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalMethod2> =
    PaymentsMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(PaymentsMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const PaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalCardIssuer2> =
    PaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalCardAudience2> = z
    .nativeEnum(PaymentsMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const PaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalCardAudience2> =
    PaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(PaymentsMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const PaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalCardRegion2> =
    PaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(PaymentsMovedToAvailableSubtotalFeeType2);

/** @internal */
export const PaymentsMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalFeeType2> =
    PaymentsMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalPrepaymentPartType2> =
    z.nativeEnum(PaymentsMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const PaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalPrepaymentPartType2> =
    PaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalTransactionType2> = z
    .nativeEnum(PaymentsMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const PaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsMovedToAvailableSubtotalTransactionType2> =
    PaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const PaymentsMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  PaymentsMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => PaymentsMovedToAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PaymentsMovedToAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(PaymentsMovedToAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type PaymentsMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<PaymentsMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PaymentsMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  PaymentsMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  PaymentsMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => PaymentsMovedToAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PaymentsMovedToAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(PaymentsMovedToAvailableSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    PaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailableSubtotal2$ {
  /** @deprecated use `PaymentsMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema = PaymentsMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `PaymentsMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = PaymentsMovedToAvailableSubtotal2$Outbound;
}

export function paymentsMovedToAvailableSubtotal2ToJSON(
  paymentsMovedToAvailableSubtotal2: PaymentsMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    PaymentsMovedToAvailableSubtotal2$outboundSchema.parse(
      paymentsMovedToAvailableSubtotal2,
    ),
  );
}

export function paymentsMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<PaymentsMovedToAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsMovedToAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const PaymentsMovedToAvailable$inboundSchema: z.ZodType<
  PaymentsMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => PaymentsMovedToAvailableAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PaymentsMovedToAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PaymentsMovedToAvailable$Outbound = {
  amount?: PaymentsMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<PaymentsMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const PaymentsMovedToAvailable$outboundSchema: z.ZodType<
  PaymentsMovedToAvailable$Outbound,
  z.ZodTypeDef,
  PaymentsMovedToAvailable
> = z.object({
  amount: z.lazy(() => PaymentsMovedToAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PaymentsMovedToAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsMovedToAvailable$ {
  /** @deprecated use `PaymentsMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = PaymentsMovedToAvailable$inboundSchema;
  /** @deprecated use `PaymentsMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = PaymentsMovedToAvailable$outboundSchema;
  /** @deprecated use `PaymentsMovedToAvailable$Outbound` instead. */
  export type Outbound = PaymentsMovedToAvailable$Outbound;
}

export function paymentsMovedToAvailableToJSON(
  paymentsMovedToAvailable: PaymentsMovedToAvailable,
): string {
  return JSON.stringify(
    PaymentsMovedToAvailable$outboundSchema.parse(paymentsMovedToAvailable),
  );
}

export function paymentsMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const PaymentsImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  PaymentsImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type PaymentsImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const PaymentsImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  PaymentsImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  PaymentsImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableAmount$ {
  /** @deprecated use `PaymentsImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = PaymentsImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = PaymentsImmediatelyAvailableAmount$Outbound;
}

export function paymentsImmediatelyAvailableAmountToJSON(
  paymentsImmediatelyAvailableAmount: PaymentsImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    PaymentsImmediatelyAvailableAmount$outboundSchema.parse(
      paymentsImmediatelyAvailableAmount,
    ),
  );
}

export function paymentsImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsImmediatelyAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaymentsImmediatelyAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalMethod1> =
    PaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalCardIssuer1> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalCardIssuer1> =
    PaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalCardAudience1> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalCardAudience1> =
    PaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalCardRegion1> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalCardRegion1> =
    PaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalFeeType1> =
    PaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalTransactionType1> =
    z.nativeEnum(PaymentsImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const PaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubTotalTransactionType1> =
    PaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubTotal1$inboundSchema: z.ZodType<
  PaymentsImmediatelyAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    PaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type PaymentsImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PaymentsImmediatelyAvailableSubTotal1$outboundSchema: z.ZodType<
  PaymentsImmediatelyAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  PaymentsImmediatelyAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(PaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    PaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = PaymentsImmediatelyAvailableSubTotal1$Outbound;
}

export function paymentsImmediatelyAvailableSubTotal1ToJSON(
  paymentsImmediatelyAvailableSubTotal1: PaymentsImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    PaymentsImmediatelyAvailableSubTotal1$outboundSchema.parse(
      paymentsImmediatelyAvailableSubTotal1,
    ),
  );
}

export function paymentsImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<PaymentsImmediatelyAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaymentsImmediatelyAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalMethod2> =
    PaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalCardIssuer2> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalCardIssuer2> =
    PaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalCardAudience2> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalCardAudience2> =
    PaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalCardRegion2> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalCardRegion2> =
    PaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(PaymentsImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalFeeType2> =
    PaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalTransactionType2> =
    z.nativeEnum(PaymentsImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const PaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof PaymentsImmediatelyAvailableSubtotalTransactionType2> =
    PaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const PaymentsImmediatelyAvailableSubtotal2$inboundSchema: z.ZodType<
  PaymentsImmediatelyAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => PaymentsImmediatelyAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    PaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type PaymentsImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<PaymentsImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const PaymentsImmediatelyAvailableSubtotal2$outboundSchema: z.ZodType<
  PaymentsImmediatelyAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  PaymentsImmediatelyAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => PaymentsImmediatelyAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(PaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    PaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    PaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    PaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    PaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    PaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = PaymentsImmediatelyAvailableSubtotal2$Outbound;
}

export function paymentsImmediatelyAvailableSubtotal2ToJSON(
  paymentsImmediatelyAvailableSubtotal2: PaymentsImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    PaymentsImmediatelyAvailableSubtotal2$outboundSchema.parse(
      paymentsImmediatelyAvailableSubtotal2,
    ),
  );
}

export function paymentsImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<PaymentsImmediatelyAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaymentsImmediatelyAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const PaymentsImmediatelyAvailable$inboundSchema: z.ZodType<
  PaymentsImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => PaymentsImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PaymentsImmediatelyAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PaymentsImmediatelyAvailable$Outbound = {
  amount?: PaymentsImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<PaymentsImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const PaymentsImmediatelyAvailable$outboundSchema: z.ZodType<
  PaymentsImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  PaymentsImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => PaymentsImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => PaymentsImmediatelyAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsImmediatelyAvailable$ {
  /** @deprecated use `PaymentsImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = PaymentsImmediatelyAvailable$inboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema = PaymentsImmediatelyAvailable$outboundSchema;
  /** @deprecated use `PaymentsImmediatelyAvailable$Outbound` instead. */
  export type Outbound = PaymentsImmediatelyAvailable$Outbound;
}

export function paymentsImmediatelyAvailableToJSON(
  paymentsImmediatelyAvailable: PaymentsImmediatelyAvailable,
): string {
  return JSON.stringify(
    PaymentsImmediatelyAvailable$outboundSchema.parse(
      paymentsImmediatelyAvailable,
    ),
  );
}

export function paymentsImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportPayments$inboundSchema: z.ZodType<
  GetBalanceReportPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  pending: z.lazy(() => PaymentsPending$inboundSchema).optional(),
  movedToAvailable: z.lazy(() => PaymentsMovedToAvailable$inboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() => PaymentsImmediatelyAvailable$inboundSchema)
    .optional(),
});

/** @internal */
export type GetBalanceReportPayments$Outbound = {
  pending?: PaymentsPending$Outbound | undefined;
  movedToAvailable?: PaymentsMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?: PaymentsImmediatelyAvailable$Outbound | undefined;
};

/** @internal */
export const GetBalanceReportPayments$outboundSchema: z.ZodType<
  GetBalanceReportPayments$Outbound,
  z.ZodTypeDef,
  GetBalanceReportPayments
> = z.object({
  pending: z.lazy(() => PaymentsPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => PaymentsMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    PaymentsImmediatelyAvailable$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportPayments$ {
  /** @deprecated use `GetBalanceReportPayments$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportPayments$inboundSchema;
  /** @deprecated use `GetBalanceReportPayments$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportPayments$outboundSchema;
  /** @deprecated use `GetBalanceReportPayments$Outbound` instead. */
  export type Outbound = GetBalanceReportPayments$Outbound;
}

export function getBalanceReportPaymentsToJSON(
  getBalanceReportPayments: GetBalanceReportPayments,
): string {
  return JSON.stringify(
    GetBalanceReportPayments$outboundSchema.parse(getBalanceReportPayments),
  );
}

export function getBalanceReportPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportPayments' from JSON`,
  );
}

/** @internal */
export const RefundsPendingAmount$inboundSchema: z.ZodType<
  RefundsPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type RefundsPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const RefundsPendingAmount$outboundSchema: z.ZodType<
  RefundsPendingAmount$Outbound,
  z.ZodTypeDef,
  RefundsPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingAmount$ {
  /** @deprecated use `RefundsPendingAmount$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingAmount$inboundSchema;
  /** @deprecated use `RefundsPendingAmount$outboundSchema` instead. */
  export const outboundSchema = RefundsPendingAmount$outboundSchema;
  /** @deprecated use `RefundsPendingAmount$Outbound` instead. */
  export type Outbound = RefundsPendingAmount$Outbound;
}

export function refundsPendingAmountToJSON(
  refundsPendingAmount: RefundsPendingAmount,
): string {
  return JSON.stringify(
    RefundsPendingAmount$outboundSchema.parse(refundsPendingAmount),
  );
}

export function refundsPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<RefundsPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsPendingAmount' from JSON`,
  );
}

/** @internal */
export const RefundsPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalMethod1
> = z.nativeEnum(RefundsPendingSubTotalMethod1);

/** @internal */
export const RefundsPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalMethod1
> = RefundsPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotalMethod1$ {
  /** @deprecated use `RefundsPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = RefundsPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const RefundsPendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalCardIssuer1
> = z.nativeEnum(RefundsPendingSubTotalCardIssuer1);

/** @internal */
export const RefundsPendingSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalCardIssuer1
> = RefundsPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotalCardIssuer1$ {
  /** @deprecated use `RefundsPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const RefundsPendingSubTotalCardAudience1$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalCardAudience1
> = z.nativeEnum(RefundsPendingSubTotalCardAudience1);

/** @internal */
export const RefundsPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubTotalCardAudience1> =
    RefundsPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotalCardAudience1$ {
  /** @deprecated use `RefundsPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const RefundsPendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalCardRegion1
> = z.nativeEnum(RefundsPendingSubTotalCardRegion1);

/** @internal */
export const RefundsPendingSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalCardRegion1
> = RefundsPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotalCardRegion1$ {
  /** @deprecated use `RefundsPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const RefundsPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalFeeType1
> = z.nativeEnum(RefundsPendingSubTotalFeeType1);

/** @internal */
export const RefundsPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubTotalFeeType1
> = RefundsPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotalFeeType1$ {
  /** @deprecated use `RefundsPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = RefundsPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const RefundsPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(RefundsPendingSubTotalPrepaymentPartType1);

/** @internal */
export const RefundsPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubTotalPrepaymentPartType1> =
    RefundsPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `RefundsPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const RefundsPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubTotalTransactionType1> = z.nativeEnum(
    RefundsPendingSubTotalTransactionType1,
  );

/** @internal */
export const RefundsPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubTotalTransactionType1> =
    RefundsPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotalTransactionType1$ {
  /** @deprecated use `RefundsPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const RefundsPendingSubTotal1$inboundSchema: z.ZodType<
  RefundsPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(RefundsPendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(RefundsPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(RefundsPendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(RefundsPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(RefundsPendingSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    RefundsPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type RefundsPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const RefundsPendingSubTotal1$outboundSchema: z.ZodType<
  RefundsPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  RefundsPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(RefundsPendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(RefundsPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(RefundsPendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(RefundsPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(RefundsPendingSubTotalFeeType1$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    RefundsPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubTotal1$ {
  /** @deprecated use `RefundsPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubTotal1$inboundSchema;
  /** @deprecated use `RefundsPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = RefundsPendingSubTotal1$outboundSchema;
  /** @deprecated use `RefundsPendingSubTotal1$Outbound` instead. */
  export type Outbound = RefundsPendingSubTotal1$Outbound;
}

export function refundsPendingSubTotal1ToJSON(
  refundsPendingSubTotal1: RefundsPendingSubTotal1,
): string {
  return JSON.stringify(
    RefundsPendingSubTotal1$outboundSchema.parse(refundsPendingSubTotal1),
  );
}

export function refundsPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<RefundsPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const RefundsPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalMethod2
> = z.nativeEnum(RefundsPendingSubtotalMethod2);

/** @internal */
export const RefundsPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalMethod2
> = RefundsPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotalMethod2$ {
  /** @deprecated use `RefundsPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = RefundsPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const RefundsPendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalCardIssuer2
> = z.nativeEnum(RefundsPendingSubtotalCardIssuer2);

/** @internal */
export const RefundsPendingSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalCardIssuer2
> = RefundsPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotalCardIssuer2$ {
  /** @deprecated use `RefundsPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const RefundsPendingSubtotalCardAudience2$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalCardAudience2
> = z.nativeEnum(RefundsPendingSubtotalCardAudience2);

/** @internal */
export const RefundsPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubtotalCardAudience2> =
    RefundsPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotalCardAudience2$ {
  /** @deprecated use `RefundsPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const RefundsPendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalCardRegion2
> = z.nativeEnum(RefundsPendingSubtotalCardRegion2);

/** @internal */
export const RefundsPendingSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalCardRegion2
> = RefundsPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotalCardRegion2$ {
  /** @deprecated use `RefundsPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const RefundsPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalFeeType2
> = z.nativeEnum(RefundsPendingSubtotalFeeType2);

/** @internal */
export const RefundsPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof RefundsPendingSubtotalFeeType2
> = RefundsPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotalFeeType2$ {
  /** @deprecated use `RefundsPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = RefundsPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const RefundsPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(RefundsPendingSubtotalPrepaymentPartType2);

/** @internal */
export const RefundsPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubtotalPrepaymentPartType2> =
    RefundsPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `RefundsPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const RefundsPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubtotalTransactionType2> = z.nativeEnum(
    RefundsPendingSubtotalTransactionType2,
  );

/** @internal */
export const RefundsPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsPendingSubtotalTransactionType2> =
    RefundsPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotalTransactionType2$ {
  /** @deprecated use `RefundsPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const RefundsPendingSubtotal2$inboundSchema: z.ZodType<
  RefundsPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => RefundsPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(RefundsPendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(RefundsPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(RefundsPendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(RefundsPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(RefundsPendingSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    RefundsPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type RefundsPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<RefundsPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const RefundsPendingSubtotal2$outboundSchema: z.ZodType<
  RefundsPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  RefundsPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => RefundsPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(RefundsPendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(RefundsPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(RefundsPendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(RefundsPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(RefundsPendingSubtotalFeeType2$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    RefundsPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPendingSubtotal2$ {
  /** @deprecated use `RefundsPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = RefundsPendingSubtotal2$inboundSchema;
  /** @deprecated use `RefundsPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = RefundsPendingSubtotal2$outboundSchema;
  /** @deprecated use `RefundsPendingSubtotal2$Outbound` instead. */
  export type Outbound = RefundsPendingSubtotal2$Outbound;
}

export function refundsPendingSubtotal2ToJSON(
  refundsPendingSubtotal2: RefundsPendingSubtotal2,
): string {
  return JSON.stringify(
    RefundsPendingSubtotal2$outboundSchema.parse(refundsPendingSubtotal2),
  );
}

export function refundsPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<RefundsPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const RefundsPending$inboundSchema: z.ZodType<
  RefundsPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => RefundsPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => RefundsPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type RefundsPending$Outbound = {
  amount?: RefundsPendingAmount$Outbound | undefined;
  subtotals?: Array<RefundsPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const RefundsPending$outboundSchema: z.ZodType<
  RefundsPending$Outbound,
  z.ZodTypeDef,
  RefundsPending
> = z.object({
  amount: z.lazy(() => RefundsPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => RefundsPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsPending$ {
  /** @deprecated use `RefundsPending$inboundSchema` instead. */
  export const inboundSchema = RefundsPending$inboundSchema;
  /** @deprecated use `RefundsPending$outboundSchema` instead. */
  export const outboundSchema = RefundsPending$outboundSchema;
  /** @deprecated use `RefundsPending$Outbound` instead. */
  export type Outbound = RefundsPending$Outbound;
}

export function refundsPendingToJSON(refundsPending: RefundsPending): string {
  return JSON.stringify(RefundsPending$outboundSchema.parse(refundsPending));
}

export function refundsPendingFromJSON(
  jsonString: string,
): SafeParseResult<RefundsPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsPending' from JSON`,
  );
}

/** @internal */
export const RefundsMovedToAvailableAmount$inboundSchema: z.ZodType<
  RefundsMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type RefundsMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const RefundsMovedToAvailableAmount$outboundSchema: z.ZodType<
  RefundsMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  RefundsMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableAmount$ {
  /** @deprecated use `RefundsMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = RefundsMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = RefundsMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `RefundsMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = RefundsMovedToAvailableAmount$Outbound;
}

export function refundsMovedToAvailableAmountToJSON(
  refundsMovedToAvailableAmount: RefundsMovedToAvailableAmount,
): string {
  return JSON.stringify(
    RefundsMovedToAvailableAmount$outboundSchema.parse(
      refundsMovedToAvailableAmount,
    ),
  );
}

export function refundsMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<RefundsMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const RefundsMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalMethod1> = z.nativeEnum(
    RefundsMovedToAvailableSubTotalMethod1,
  );

/** @internal */
export const RefundsMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalMethod1> =
    RefundsMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(RefundsMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const RefundsMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalCardIssuer1> =
    RefundsMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalCardAudience1> = z
    .nativeEnum(RefundsMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const RefundsMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalCardAudience1> =
    RefundsMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(RefundsMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const RefundsMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalCardRegion1> =
    RefundsMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(RefundsMovedToAvailableSubTotalFeeType1);

/** @internal */
export const RefundsMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalFeeType1> =
    RefundsMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalPrepaymentPartType1> = z
    .nativeEnum(RefundsMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const RefundsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalPrepaymentPartType1> =
    RefundsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalTransactionType1> = z
    .nativeEnum(RefundsMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const RefundsMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubTotalTransactionType1> =
    RefundsMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  RefundsMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(RefundsMovedToAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(RefundsMovedToAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    RefundsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type RefundsMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const RefundsMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  RefundsMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  RefundsMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(RefundsMovedToAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(RefundsMovedToAvailableSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    RefundsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubTotal1$ {
  /** @deprecated use `RefundsMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema = RefundsMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema = RefundsMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = RefundsMovedToAvailableSubTotal1$Outbound;
}

export function refundsMovedToAvailableSubTotal1ToJSON(
  refundsMovedToAvailableSubTotal1: RefundsMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    RefundsMovedToAvailableSubTotal1$outboundSchema.parse(
      refundsMovedToAvailableSubTotal1,
    ),
  );
}

export function refundsMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<RefundsMovedToAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsMovedToAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const RefundsMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalMethod2> = z.nativeEnum(
    RefundsMovedToAvailableSubtotalMethod2,
  );

/** @internal */
export const RefundsMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalMethod2> =
    RefundsMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(RefundsMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const RefundsMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalCardIssuer2> =
    RefundsMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalCardAudience2> = z
    .nativeEnum(RefundsMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const RefundsMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalCardAudience2> =
    RefundsMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(RefundsMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const RefundsMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalCardRegion2> =
    RefundsMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(RefundsMovedToAvailableSubtotalFeeType2);

/** @internal */
export const RefundsMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalFeeType2> =
    RefundsMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalPrepaymentPartType2> = z
    .nativeEnum(RefundsMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const RefundsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalPrepaymentPartType2> =
    RefundsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalTransactionType2> = z
    .nativeEnum(RefundsMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const RefundsMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsMovedToAvailableSubtotalTransactionType2> =
    RefundsMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const RefundsMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  RefundsMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => RefundsMovedToAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(RefundsMovedToAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(RefundsMovedToAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    RefundsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type RefundsMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<RefundsMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const RefundsMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  RefundsMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  RefundsMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => RefundsMovedToAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(RefundsMovedToAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(RefundsMovedToAvailableSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    RefundsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailableSubtotal2$ {
  /** @deprecated use `RefundsMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema = RefundsMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema = RefundsMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `RefundsMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = RefundsMovedToAvailableSubtotal2$Outbound;
}

export function refundsMovedToAvailableSubtotal2ToJSON(
  refundsMovedToAvailableSubtotal2: RefundsMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    RefundsMovedToAvailableSubtotal2$outboundSchema.parse(
      refundsMovedToAvailableSubtotal2,
    ),
  );
}

export function refundsMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<RefundsMovedToAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsMovedToAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const RefundsMovedToAvailable$inboundSchema: z.ZodType<
  RefundsMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => RefundsMovedToAvailableAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => RefundsMovedToAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type RefundsMovedToAvailable$Outbound = {
  amount?: RefundsMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<RefundsMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const RefundsMovedToAvailable$outboundSchema: z.ZodType<
  RefundsMovedToAvailable$Outbound,
  z.ZodTypeDef,
  RefundsMovedToAvailable
> = z.object({
  amount: z.lazy(() => RefundsMovedToAvailableAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => RefundsMovedToAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsMovedToAvailable$ {
  /** @deprecated use `RefundsMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = RefundsMovedToAvailable$inboundSchema;
  /** @deprecated use `RefundsMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = RefundsMovedToAvailable$outboundSchema;
  /** @deprecated use `RefundsMovedToAvailable$Outbound` instead. */
  export type Outbound = RefundsMovedToAvailable$Outbound;
}

export function refundsMovedToAvailableToJSON(
  refundsMovedToAvailable: RefundsMovedToAvailable,
): string {
  return JSON.stringify(
    RefundsMovedToAvailable$outboundSchema.parse(refundsMovedToAvailable),
  );
}

export function refundsMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<RefundsMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const RefundsImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  RefundsImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type RefundsImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const RefundsImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  RefundsImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  RefundsImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableAmount$ {
  /** @deprecated use `RefundsImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = RefundsImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = RefundsImmediatelyAvailableAmount$Outbound;
}

export function refundsImmediatelyAvailableAmountToJSON(
  refundsImmediatelyAvailableAmount: RefundsImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    RefundsImmediatelyAvailableAmount$outboundSchema.parse(
      refundsImmediatelyAvailableAmount,
    ),
  );
}

export function refundsImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<RefundsImmediatelyAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsImmediatelyAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(RefundsImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const RefundsImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalMethod1> =
    RefundsImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalCardIssuer1> = z
    .nativeEnum(RefundsImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const RefundsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalCardIssuer1> =
    RefundsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalCardAudience1> = z
    .nativeEnum(RefundsImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const RefundsImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalCardAudience1> =
    RefundsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalCardRegion1> = z
    .nativeEnum(RefundsImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const RefundsImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalCardRegion1> =
    RefundsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(RefundsImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const RefundsImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalFeeType1> =
    RefundsImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof RefundsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(RefundsImmediatelyAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof RefundsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalTransactionType1> =
    z.nativeEnum(RefundsImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const RefundsImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubTotalTransactionType1> =
    RefundsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubTotal1$inboundSchema: z.ZodType<
  RefundsImmediatelyAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(RefundsImmediatelyAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(RefundsImmediatelyAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type RefundsImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const RefundsImmediatelyAvailableSubTotal1$outboundSchema: z.ZodType<
  RefundsImmediatelyAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  RefundsImmediatelyAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(RefundsImmediatelyAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    RefundsImmediatelyAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    RefundsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = RefundsImmediatelyAvailableSubTotal1$Outbound;
}

export function refundsImmediatelyAvailableSubTotal1ToJSON(
  refundsImmediatelyAvailableSubTotal1: RefundsImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    RefundsImmediatelyAvailableSubTotal1$outboundSchema.parse(
      refundsImmediatelyAvailableSubTotal1,
    ),
  );
}

export function refundsImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<RefundsImmediatelyAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RefundsImmediatelyAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(RefundsImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const RefundsImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalMethod2> =
    RefundsImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalCardIssuer2> = z
    .nativeEnum(RefundsImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const RefundsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalCardIssuer2> =
    RefundsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalCardAudience2> = z
    .nativeEnum(RefundsImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const RefundsImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalCardAudience2> =
    RefundsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalCardRegion2> = z
    .nativeEnum(RefundsImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const RefundsImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalCardRegion2> =
    RefundsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(RefundsImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const RefundsImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalFeeType2> =
    RefundsImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof RefundsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(RefundsImmediatelyAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof RefundsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalTransactionType2> =
    z.nativeEnum(RefundsImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const RefundsImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof RefundsImmediatelyAvailableSubtotalTransactionType2> =
    RefundsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const RefundsImmediatelyAvailableSubtotal2$inboundSchema: z.ZodType<
  RefundsImmediatelyAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => RefundsImmediatelyAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(RefundsImmediatelyAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(RefundsImmediatelyAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type RefundsImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<RefundsImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const RefundsImmediatelyAvailableSubtotal2$outboundSchema: z.ZodType<
  RefundsImmediatelyAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  RefundsImmediatelyAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => RefundsImmediatelyAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(RefundsImmediatelyAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    RefundsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    RefundsImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    RefundsImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    RefundsImmediatelyAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    RefundsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    RefundsImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `RefundsImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    RefundsImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    RefundsImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = RefundsImmediatelyAvailableSubtotal2$Outbound;
}

export function refundsImmediatelyAvailableSubtotal2ToJSON(
  refundsImmediatelyAvailableSubtotal2: RefundsImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    RefundsImmediatelyAvailableSubtotal2$outboundSchema.parse(
      refundsImmediatelyAvailableSubtotal2,
    ),
  );
}

export function refundsImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<RefundsImmediatelyAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RefundsImmediatelyAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const RefundsImmediatelyAvailable$inboundSchema: z.ZodType<
  RefundsImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => RefundsImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => RefundsImmediatelyAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type RefundsImmediatelyAvailable$Outbound = {
  amount?: RefundsImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<RefundsImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const RefundsImmediatelyAvailable$outboundSchema: z.ZodType<
  RefundsImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  RefundsImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => RefundsImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => RefundsImmediatelyAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsImmediatelyAvailable$ {
  /** @deprecated use `RefundsImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = RefundsImmediatelyAvailable$inboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema = RefundsImmediatelyAvailable$outboundSchema;
  /** @deprecated use `RefundsImmediatelyAvailable$Outbound` instead. */
  export type Outbound = RefundsImmediatelyAvailable$Outbound;
}

export function refundsImmediatelyAvailableToJSON(
  refundsImmediatelyAvailable: RefundsImmediatelyAvailable,
): string {
  return JSON.stringify(
    RefundsImmediatelyAvailable$outboundSchema.parse(
      refundsImmediatelyAvailable,
    ),
  );
}

export function refundsImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<RefundsImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportRefunds$inboundSchema: z.ZodType<
  GetBalanceReportRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  pending: z.lazy(() => RefundsPending$inboundSchema).optional(),
  movedToAvailable: z.lazy(() => RefundsMovedToAvailable$inboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() => RefundsImmediatelyAvailable$inboundSchema)
    .optional(),
});

/** @internal */
export type GetBalanceReportRefunds$Outbound = {
  pending?: RefundsPending$Outbound | undefined;
  movedToAvailable?: RefundsMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?: RefundsImmediatelyAvailable$Outbound | undefined;
};

/** @internal */
export const GetBalanceReportRefunds$outboundSchema: z.ZodType<
  GetBalanceReportRefunds$Outbound,
  z.ZodTypeDef,
  GetBalanceReportRefunds
> = z.object({
  pending: z.lazy(() => RefundsPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => RefundsMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() => RefundsImmediatelyAvailable$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportRefunds$ {
  /** @deprecated use `GetBalanceReportRefunds$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportRefunds$inboundSchema;
  /** @deprecated use `GetBalanceReportRefunds$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportRefunds$outboundSchema;
  /** @deprecated use `GetBalanceReportRefunds$Outbound` instead. */
  export type Outbound = GetBalanceReportRefunds$Outbound;
}

export function getBalanceReportRefundsToJSON(
  getBalanceReportRefunds: GetBalanceReportRefunds,
): string {
  return JSON.stringify(
    GetBalanceReportRefunds$outboundSchema.parse(getBalanceReportRefunds),
  );
}

export function getBalanceReportRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportRefunds' from JSON`,
  );
}

/** @internal */
export const ChargebacksPendingAmount$inboundSchema: z.ZodType<
  ChargebacksPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ChargebacksPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ChargebacksPendingAmount$outboundSchema: z.ZodType<
  ChargebacksPendingAmount$Outbound,
  z.ZodTypeDef,
  ChargebacksPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingAmount$ {
  /** @deprecated use `ChargebacksPendingAmount$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPendingAmount$inboundSchema;
  /** @deprecated use `ChargebacksPendingAmount$outboundSchema` instead. */
  export const outboundSchema = ChargebacksPendingAmount$outboundSchema;
  /** @deprecated use `ChargebacksPendingAmount$Outbound` instead. */
  export type Outbound = ChargebacksPendingAmount$Outbound;
}

export function chargebacksPendingAmountToJSON(
  chargebacksPendingAmount: ChargebacksPendingAmount,
): string {
  return JSON.stringify(
    ChargebacksPendingAmount$outboundSchema.parse(chargebacksPendingAmount),
  );
}

export function chargebacksPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebacksPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksPendingAmount' from JSON`,
  );
}

/** @internal */
export const ChargebacksPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubTotalMethod1
> = z.nativeEnum(ChargebacksPendingSubTotalMethod1);

/** @internal */
export const ChargebacksPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubTotalMethod1
> = ChargebacksPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotalMethod1$ {
  /** @deprecated use `ChargebacksPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalCardIssuer1> = z.nativeEnum(
    ChargebacksPendingSubTotalCardIssuer1,
  );

/** @internal */
export const ChargebacksPendingSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalCardIssuer1> =
    ChargebacksPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotalCardIssuer1$ {
  /** @deprecated use `ChargebacksPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalCardAudience1> = z
    .nativeEnum(ChargebacksPendingSubTotalCardAudience1);

/** @internal */
export const ChargebacksPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalCardAudience1> =
    ChargebacksPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotalCardAudience1$ {
  /** @deprecated use `ChargebacksPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalCardRegion1> = z.nativeEnum(
    ChargebacksPendingSubTotalCardRegion1,
  );

/** @internal */
export const ChargebacksPendingSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalCardRegion1> =
    ChargebacksPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotalCardRegion1$ {
  /** @deprecated use `ChargebacksPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubTotalFeeType1
> = z.nativeEnum(ChargebacksPendingSubTotalFeeType1);

/** @internal */
export const ChargebacksPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubTotalFeeType1
> = ChargebacksPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotalFeeType1$ {
  /** @deprecated use `ChargebacksPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(ChargebacksPendingSubTotalPrepaymentPartType1);

/** @internal */
export const ChargebacksPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalPrepaymentPartType1> =
    ChargebacksPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `ChargebacksPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalTransactionType1> = z
    .nativeEnum(ChargebacksPendingSubTotalTransactionType1);

/** @internal */
export const ChargebacksPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubTotalTransactionType1> =
    ChargebacksPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotalTransactionType1$ {
  /** @deprecated use `ChargebacksPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubTotal1$inboundSchema: z.ZodType<
  ChargebacksPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksPendingSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(ChargebacksPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    ChargebacksPendingSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(ChargebacksPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(ChargebacksPendingSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    ChargebacksPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type ChargebacksPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ChargebacksPendingSubTotal1$outboundSchema: z.ZodType<
  ChargebacksPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  ChargebacksPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksPendingSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(ChargebacksPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    ChargebacksPendingSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(ChargebacksPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(ChargebacksPendingSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    ChargebacksPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubTotal1$ {
  /** @deprecated use `ChargebacksPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPendingSubTotal1$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = ChargebacksPendingSubTotal1$outboundSchema;
  /** @deprecated use `ChargebacksPendingSubTotal1$Outbound` instead. */
  export type Outbound = ChargebacksPendingSubTotal1$Outbound;
}

export function chargebacksPendingSubTotal1ToJSON(
  chargebacksPendingSubTotal1: ChargebacksPendingSubTotal1,
): string {
  return JSON.stringify(
    ChargebacksPendingSubTotal1$outboundSchema.parse(
      chargebacksPendingSubTotal1,
    ),
  );
}

export function chargebacksPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebacksPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const ChargebacksPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubtotalMethod2
> = z.nativeEnum(ChargebacksPendingSubtotalMethod2);

/** @internal */
export const ChargebacksPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubtotalMethod2
> = ChargebacksPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotalMethod2$ {
  /** @deprecated use `ChargebacksPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalCardIssuer2> = z.nativeEnum(
    ChargebacksPendingSubtotalCardIssuer2,
  );

/** @internal */
export const ChargebacksPendingSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalCardIssuer2> =
    ChargebacksPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotalCardIssuer2$ {
  /** @deprecated use `ChargebacksPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalCardAudience2> = z
    .nativeEnum(ChargebacksPendingSubtotalCardAudience2);

/** @internal */
export const ChargebacksPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalCardAudience2> =
    ChargebacksPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotalCardAudience2$ {
  /** @deprecated use `ChargebacksPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalCardRegion2> = z.nativeEnum(
    ChargebacksPendingSubtotalCardRegion2,
  );

/** @internal */
export const ChargebacksPendingSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalCardRegion2> =
    ChargebacksPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotalCardRegion2$ {
  /** @deprecated use `ChargebacksPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubtotalFeeType2
> = z.nativeEnum(ChargebacksPendingSubtotalFeeType2);

/** @internal */
export const ChargebacksPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof ChargebacksPendingSubtotalFeeType2
> = ChargebacksPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotalFeeType2$ {
  /** @deprecated use `ChargebacksPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(ChargebacksPendingSubtotalPrepaymentPartType2);

/** @internal */
export const ChargebacksPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalPrepaymentPartType2> =
    ChargebacksPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `ChargebacksPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalTransactionType2> = z
    .nativeEnum(ChargebacksPendingSubtotalTransactionType2);

/** @internal */
export const ChargebacksPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksPendingSubtotalTransactionType2> =
    ChargebacksPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotalTransactionType2$ {
  /** @deprecated use `ChargebacksPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const ChargebacksPendingSubtotal2$inboundSchema: z.ZodType<
  ChargebacksPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => ChargebacksPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksPendingSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(ChargebacksPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    ChargebacksPendingSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(ChargebacksPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(ChargebacksPendingSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    ChargebacksPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type ChargebacksPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<ChargebacksPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ChargebacksPendingSubtotal2$outboundSchema: z.ZodType<
  ChargebacksPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  ChargebacksPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => ChargebacksPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksPendingSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(ChargebacksPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    ChargebacksPendingSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(ChargebacksPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(ChargebacksPendingSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    ChargebacksPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPendingSubtotal2$ {
  /** @deprecated use `ChargebacksPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPendingSubtotal2$inboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = ChargebacksPendingSubtotal2$outboundSchema;
  /** @deprecated use `ChargebacksPendingSubtotal2$Outbound` instead. */
  export type Outbound = ChargebacksPendingSubtotal2$Outbound;
}

export function chargebacksPendingSubtotal2ToJSON(
  chargebacksPendingSubtotal2: ChargebacksPendingSubtotal2,
): string {
  return JSON.stringify(
    ChargebacksPendingSubtotal2$outboundSchema.parse(
      chargebacksPendingSubtotal2,
    ),
  );
}

export function chargebacksPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebacksPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const ChargebacksPending$inboundSchema: z.ZodType<
  ChargebacksPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ChargebacksPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => ChargebacksPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type ChargebacksPending$Outbound = {
  amount?: ChargebacksPendingAmount$Outbound | undefined;
  subtotals?: Array<ChargebacksPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const ChargebacksPending$outboundSchema: z.ZodType<
  ChargebacksPending$Outbound,
  z.ZodTypeDef,
  ChargebacksPending
> = z.object({
  amount: z.lazy(() => ChargebacksPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => ChargebacksPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksPending$ {
  /** @deprecated use `ChargebacksPending$inboundSchema` instead. */
  export const inboundSchema = ChargebacksPending$inboundSchema;
  /** @deprecated use `ChargebacksPending$outboundSchema` instead. */
  export const outboundSchema = ChargebacksPending$outboundSchema;
  /** @deprecated use `ChargebacksPending$Outbound` instead. */
  export type Outbound = ChargebacksPending$Outbound;
}

export function chargebacksPendingToJSON(
  chargebacksPending: ChargebacksPending,
): string {
  return JSON.stringify(
    ChargebacksPending$outboundSchema.parse(chargebacksPending),
  );
}

export function chargebacksPendingFromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebacksPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksPending' from JSON`,
  );
}

/** @internal */
export const ChargebacksMovedToAvailableAmount$inboundSchema: z.ZodType<
  ChargebacksMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ChargebacksMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ChargebacksMovedToAvailableAmount$outboundSchema: z.ZodType<
  ChargebacksMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  ChargebacksMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableAmount$ {
  /** @deprecated use `ChargebacksMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = ChargebacksMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = ChargebacksMovedToAvailableAmount$Outbound;
}

export function chargebacksMovedToAvailableAmountToJSON(
  chargebacksMovedToAvailableAmount: ChargebacksMovedToAvailableAmount,
): string {
  return JSON.stringify(
    ChargebacksMovedToAvailableAmount$outboundSchema.parse(
      chargebacksMovedToAvailableAmount,
    ),
  );
}

export function chargebacksMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebacksMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalMethod1> = z
    .nativeEnum(ChargebacksMovedToAvailableSubTotalMethod1);

/** @internal */
export const ChargebacksMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalMethod1> =
    ChargebacksMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(ChargebacksMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const ChargebacksMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalCardIssuer1> =
    ChargebacksMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalCardAudience1> = z
    .nativeEnum(ChargebacksMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const ChargebacksMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalCardAudience1> =
    ChargebacksMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(ChargebacksMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const ChargebacksMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalCardRegion1> =
    ChargebacksMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(ChargebacksMovedToAvailableSubTotalFeeType1);

/** @internal */
export const ChargebacksMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalFeeType1> =
    ChargebacksMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksMovedToAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(ChargebacksMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksMovedToAvailableSubTotalPrepaymentPartType1
  > = ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalTransactionType1> =
    z.nativeEnum(ChargebacksMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const ChargebacksMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubTotalTransactionType1> =
    ChargebacksMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  ChargebacksMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksMovedToAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    ChargebacksMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(ChargebacksMovedToAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type ChargebacksMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ChargebacksMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  ChargebacksMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  ChargebacksMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksMovedToAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    ChargebacksMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    ChargebacksMovedToAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    ChargebacksMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubTotal1$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = ChargebacksMovedToAvailableSubTotal1$Outbound;
}

export function chargebacksMovedToAvailableSubTotal1ToJSON(
  chargebacksMovedToAvailableSubTotal1: ChargebacksMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    ChargebacksMovedToAvailableSubTotal1$outboundSchema.parse(
      chargebacksMovedToAvailableSubTotal1,
    ),
  );
}

export function chargebacksMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksMovedToAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChargebacksMovedToAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalMethod2> = z
    .nativeEnum(ChargebacksMovedToAvailableSubtotalMethod2);

/** @internal */
export const ChargebacksMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalMethod2> =
    ChargebacksMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(ChargebacksMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const ChargebacksMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalCardIssuer2> =
    ChargebacksMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalCardAudience2> = z
    .nativeEnum(ChargebacksMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const ChargebacksMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalCardAudience2> =
    ChargebacksMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(ChargebacksMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const ChargebacksMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalCardRegion2> =
    ChargebacksMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(ChargebacksMovedToAvailableSubtotalFeeType2);

/** @internal */
export const ChargebacksMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalFeeType2> =
    ChargebacksMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksMovedToAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(ChargebacksMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksMovedToAvailableSubtotalPrepaymentPartType2
  > = ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalTransactionType2> =
    z.nativeEnum(ChargebacksMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const ChargebacksMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksMovedToAvailableSubtotalTransactionType2> =
    ChargebacksMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const ChargebacksMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  ChargebacksMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => ChargebacksMovedToAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksMovedToAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    ChargebacksMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(ChargebacksMovedToAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type ChargebacksMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<ChargebacksMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ChargebacksMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  ChargebacksMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  ChargebacksMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => ChargebacksMovedToAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(ChargebacksMovedToAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    ChargebacksMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    ChargebacksMovedToAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    ChargebacksMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailableSubtotal2$ {
  /** @deprecated use `ChargebacksMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = ChargebacksMovedToAvailableSubtotal2$Outbound;
}

export function chargebacksMovedToAvailableSubtotal2ToJSON(
  chargebacksMovedToAvailableSubtotal2: ChargebacksMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    ChargebacksMovedToAvailableSubtotal2$outboundSchema.parse(
      chargebacksMovedToAvailableSubtotal2,
    ),
  );
}

export function chargebacksMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksMovedToAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChargebacksMovedToAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const ChargebacksMovedToAvailable$inboundSchema: z.ZodType<
  ChargebacksMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ChargebacksMovedToAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => ChargebacksMovedToAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type ChargebacksMovedToAvailable$Outbound = {
  amount?: ChargebacksMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<ChargebacksMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ChargebacksMovedToAvailable$outboundSchema: z.ZodType<
  ChargebacksMovedToAvailable$Outbound,
  z.ZodTypeDef,
  ChargebacksMovedToAvailable
> = z.object({
  amount: z.lazy(() => ChargebacksMovedToAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => ChargebacksMovedToAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksMovedToAvailable$ {
  /** @deprecated use `ChargebacksMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = ChargebacksMovedToAvailable$inboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = ChargebacksMovedToAvailable$outboundSchema;
  /** @deprecated use `ChargebacksMovedToAvailable$Outbound` instead. */
  export type Outbound = ChargebacksMovedToAvailable$Outbound;
}

export function chargebacksMovedToAvailableToJSON(
  chargebacksMovedToAvailable: ChargebacksMovedToAvailable,
): string {
  return JSON.stringify(
    ChargebacksMovedToAvailable$outboundSchema.parse(
      chargebacksMovedToAvailable,
    ),
  );
}

export function chargebacksMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebacksMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const ChargebacksImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ChargebacksImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ChargebacksImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  ChargebacksImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableAmount$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = ChargebacksImmediatelyAvailableAmount$Outbound;
}

export function chargebacksImmediatelyAvailableAmountToJSON(
  chargebacksImmediatelyAvailableAmount: ChargebacksImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    ChargebacksImmediatelyAvailableAmount$outboundSchema.parse(
      chargebacksImmediatelyAvailableAmount,
    ),
  );
}

export function chargebacksImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksImmediatelyAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChargebacksImmediatelyAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalMethod1> =
    ChargebacksImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalCardIssuer1> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalCardIssuer1> =
    ChargebacksImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalCardAudience1> =
    z.nativeEnum(ChargebacksImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalCardAudience1> =
    ChargebacksImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalCardRegion1> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalCardRegion1> =
    ChargebacksImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubTotalFeeType1> =
    ChargebacksImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1
  > = ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubTotalTransactionType1
  > = z.nativeEnum(ChargebacksImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubTotalTransactionType1
  > = ChargebacksImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotal1$inboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalMethod1$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalFeeType1$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type ChargebacksImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ChargebacksImmediatelyAvailableSubTotal1$outboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  ChargebacksImmediatelyAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalMethod1$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = ChargebacksImmediatelyAvailableSubTotal1$Outbound;
}

export function chargebacksImmediatelyAvailableSubTotal1ToJSON(
  chargebacksImmediatelyAvailableSubTotal1:
    ChargebacksImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    ChargebacksImmediatelyAvailableSubTotal1$outboundSchema.parse(
      chargebacksImmediatelyAvailableSubTotal1,
    ),
  );
}

export function chargebacksImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<
  ChargebacksImmediatelyAvailableSubTotal1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChargebacksImmediatelyAvailableSubTotal1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChargebacksImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalMethod2> =
    ChargebacksImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalCardIssuer2> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalCardIssuer2> =
    ChargebacksImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalCardAudience2> =
    z.nativeEnum(ChargebacksImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalCardAudience2> =
    ChargebacksImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalCardRegion2> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalCardRegion2> =
    ChargebacksImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(ChargebacksImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof ChargebacksImmediatelyAvailableSubtotalFeeType2> =
    ChargebacksImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2
  > = ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubtotalTransactionType2
  > = z.nativeEnum(ChargebacksImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<
    typeof ChargebacksImmediatelyAvailableSubtotalTransactionType2
  > = ChargebacksImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotal2$inboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(
      z.lazy(() => ChargebacksImmediatelyAvailableSubTotal1$inboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalMethod2$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalFeeType2$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type ChargebacksImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<ChargebacksImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const ChargebacksImmediatelyAvailableSubtotal2$outboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  ChargebacksImmediatelyAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(
      z.lazy(() => ChargebacksImmediatelyAvailableSubTotal1$outboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalMethod2$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    ChargebacksImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    ChargebacksImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    ChargebacksImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = ChargebacksImmediatelyAvailableSubtotal2$Outbound;
}

export function chargebacksImmediatelyAvailableSubtotal2ToJSON(
  chargebacksImmediatelyAvailableSubtotal2:
    ChargebacksImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    ChargebacksImmediatelyAvailableSubtotal2$outboundSchema.parse(
      chargebacksImmediatelyAvailableSubtotal2,
    ),
  );
}

export function chargebacksImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<
  ChargebacksImmediatelyAvailableSubtotal2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChargebacksImmediatelyAvailableSubtotal2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChargebacksImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const ChargebacksImmediatelyAvailable$inboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ChargebacksImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => ChargebacksImmediatelyAvailableSubtotal2$inboundSchema),
    ),
  ).optional(),
});

/** @internal */
export type ChargebacksImmediatelyAvailable$Outbound = {
  amount?: ChargebacksImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<ChargebacksImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ChargebacksImmediatelyAvailable$outboundSchema: z.ZodType<
  ChargebacksImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  ChargebacksImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => ChargebacksImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => ChargebacksImmediatelyAvailableSubtotal2$outboundSchema),
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebacksImmediatelyAvailable$ {
  /** @deprecated use `ChargebacksImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = ChargebacksImmediatelyAvailable$inboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema = ChargebacksImmediatelyAvailable$outboundSchema;
  /** @deprecated use `ChargebacksImmediatelyAvailable$Outbound` instead. */
  export type Outbound = ChargebacksImmediatelyAvailable$Outbound;
}

export function chargebacksImmediatelyAvailableToJSON(
  chargebacksImmediatelyAvailable: ChargebacksImmediatelyAvailable,
): string {
  return JSON.stringify(
    ChargebacksImmediatelyAvailable$outboundSchema.parse(
      chargebacksImmediatelyAvailable,
    ),
  );
}

export function chargebacksImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<ChargebacksImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebacksImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebacksImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportChargebacks$inboundSchema: z.ZodType<
  GetBalanceReportChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  pending: z.lazy(() => ChargebacksPending$inboundSchema).optional(),
  movedToAvailable: z.lazy(() => ChargebacksMovedToAvailable$inboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    ChargebacksImmediatelyAvailable$inboundSchema
  ).optional(),
});

/** @internal */
export type GetBalanceReportChargebacks$Outbound = {
  pending?: ChargebacksPending$Outbound | undefined;
  movedToAvailable?: ChargebacksMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?: ChargebacksImmediatelyAvailable$Outbound | undefined;
};

/** @internal */
export const GetBalanceReportChargebacks$outboundSchema: z.ZodType<
  GetBalanceReportChargebacks$Outbound,
  z.ZodTypeDef,
  GetBalanceReportChargebacks
> = z.object({
  pending: z.lazy(() => ChargebacksPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => ChargebacksMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    ChargebacksImmediatelyAvailable$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportChargebacks$ {
  /** @deprecated use `GetBalanceReportChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportChargebacks$inboundSchema;
  /** @deprecated use `GetBalanceReportChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportChargebacks$outboundSchema;
  /** @deprecated use `GetBalanceReportChargebacks$Outbound` instead. */
  export type Outbound = GetBalanceReportChargebacks$Outbound;
}

export function getBalanceReportChargebacksToJSON(
  getBalanceReportChargebacks: GetBalanceReportChargebacks,
): string {
  return JSON.stringify(
    GetBalanceReportChargebacks$outboundSchema.parse(
      getBalanceReportChargebacks,
    ),
  );
}

export function getBalanceReportChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportChargebacks' from JSON`,
  );
}

/** @internal */
export const CapitalPendingAmount$inboundSchema: z.ZodType<
  CapitalPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CapitalPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CapitalPendingAmount$outboundSchema: z.ZodType<
  CapitalPendingAmount$Outbound,
  z.ZodTypeDef,
  CapitalPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingAmount$ {
  /** @deprecated use `CapitalPendingAmount$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingAmount$inboundSchema;
  /** @deprecated use `CapitalPendingAmount$outboundSchema` instead. */
  export const outboundSchema = CapitalPendingAmount$outboundSchema;
  /** @deprecated use `CapitalPendingAmount$Outbound` instead. */
  export type Outbound = CapitalPendingAmount$Outbound;
}

export function capitalPendingAmountToJSON(
  capitalPendingAmount: CapitalPendingAmount,
): string {
  return JSON.stringify(
    CapitalPendingAmount$outboundSchema.parse(capitalPendingAmount),
  );
}

export function capitalPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<CapitalPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalPendingAmount' from JSON`,
  );
}

/** @internal */
export const CapitalPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalMethod1
> = z.nativeEnum(CapitalPendingSubTotalMethod1);

/** @internal */
export const CapitalPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalMethod1
> = CapitalPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotalMethod1$ {
  /** @deprecated use `CapitalPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = CapitalPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const CapitalPendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalCardIssuer1
> = z.nativeEnum(CapitalPendingSubTotalCardIssuer1);

/** @internal */
export const CapitalPendingSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalCardIssuer1
> = CapitalPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotalCardIssuer1$ {
  /** @deprecated use `CapitalPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const CapitalPendingSubTotalCardAudience1$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalCardAudience1
> = z.nativeEnum(CapitalPendingSubTotalCardAudience1);

/** @internal */
export const CapitalPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubTotalCardAudience1> =
    CapitalPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotalCardAudience1$ {
  /** @deprecated use `CapitalPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const CapitalPendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalCardRegion1
> = z.nativeEnum(CapitalPendingSubTotalCardRegion1);

/** @internal */
export const CapitalPendingSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalCardRegion1
> = CapitalPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotalCardRegion1$ {
  /** @deprecated use `CapitalPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const CapitalPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalFeeType1
> = z.nativeEnum(CapitalPendingSubTotalFeeType1);

/** @internal */
export const CapitalPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubTotalFeeType1
> = CapitalPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotalFeeType1$ {
  /** @deprecated use `CapitalPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = CapitalPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const CapitalPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(CapitalPendingSubTotalPrepaymentPartType1);

/** @internal */
export const CapitalPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubTotalPrepaymentPartType1> =
    CapitalPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `CapitalPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const CapitalPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubTotalTransactionType1> = z.nativeEnum(
    CapitalPendingSubTotalTransactionType1,
  );

/** @internal */
export const CapitalPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubTotalTransactionType1> =
    CapitalPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotalTransactionType1$ {
  /** @deprecated use `CapitalPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const CapitalPendingSubTotal1$inboundSchema: z.ZodType<
  CapitalPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CapitalPendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(CapitalPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(CapitalPendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(CapitalPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(CapitalPendingSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CapitalPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type CapitalPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CapitalPendingSubTotal1$outboundSchema: z.ZodType<
  CapitalPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  CapitalPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CapitalPendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(CapitalPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(CapitalPendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(CapitalPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(CapitalPendingSubTotalFeeType1$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CapitalPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubTotal1$ {
  /** @deprecated use `CapitalPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubTotal1$inboundSchema;
  /** @deprecated use `CapitalPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = CapitalPendingSubTotal1$outboundSchema;
  /** @deprecated use `CapitalPendingSubTotal1$Outbound` instead. */
  export type Outbound = CapitalPendingSubTotal1$Outbound;
}

export function capitalPendingSubTotal1ToJSON(
  capitalPendingSubTotal1: CapitalPendingSubTotal1,
): string {
  return JSON.stringify(
    CapitalPendingSubTotal1$outboundSchema.parse(capitalPendingSubTotal1),
  );
}

export function capitalPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<CapitalPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const CapitalPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalMethod2
> = z.nativeEnum(CapitalPendingSubtotalMethod2);

/** @internal */
export const CapitalPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalMethod2
> = CapitalPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotalMethod2$ {
  /** @deprecated use `CapitalPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = CapitalPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const CapitalPendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalCardIssuer2
> = z.nativeEnum(CapitalPendingSubtotalCardIssuer2);

/** @internal */
export const CapitalPendingSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalCardIssuer2
> = CapitalPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotalCardIssuer2$ {
  /** @deprecated use `CapitalPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const CapitalPendingSubtotalCardAudience2$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalCardAudience2
> = z.nativeEnum(CapitalPendingSubtotalCardAudience2);

/** @internal */
export const CapitalPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubtotalCardAudience2> =
    CapitalPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotalCardAudience2$ {
  /** @deprecated use `CapitalPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const CapitalPendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalCardRegion2
> = z.nativeEnum(CapitalPendingSubtotalCardRegion2);

/** @internal */
export const CapitalPendingSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalCardRegion2
> = CapitalPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotalCardRegion2$ {
  /** @deprecated use `CapitalPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const CapitalPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalFeeType2
> = z.nativeEnum(CapitalPendingSubtotalFeeType2);

/** @internal */
export const CapitalPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof CapitalPendingSubtotalFeeType2
> = CapitalPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotalFeeType2$ {
  /** @deprecated use `CapitalPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = CapitalPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const CapitalPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(CapitalPendingSubtotalPrepaymentPartType2);

/** @internal */
export const CapitalPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubtotalPrepaymentPartType2> =
    CapitalPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `CapitalPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const CapitalPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubtotalTransactionType2> = z.nativeEnum(
    CapitalPendingSubtotalTransactionType2,
  );

/** @internal */
export const CapitalPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalPendingSubtotalTransactionType2> =
    CapitalPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotalTransactionType2$ {
  /** @deprecated use `CapitalPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const CapitalPendingSubtotal2$inboundSchema: z.ZodType<
  CapitalPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => CapitalPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CapitalPendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(CapitalPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(CapitalPendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(CapitalPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(CapitalPendingSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CapitalPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type CapitalPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<CapitalPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CapitalPendingSubtotal2$outboundSchema: z.ZodType<
  CapitalPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  CapitalPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => CapitalPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CapitalPendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(CapitalPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(CapitalPendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(CapitalPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(CapitalPendingSubtotalFeeType2$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    CapitalPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPendingSubtotal2$ {
  /** @deprecated use `CapitalPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = CapitalPendingSubtotal2$inboundSchema;
  /** @deprecated use `CapitalPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = CapitalPendingSubtotal2$outboundSchema;
  /** @deprecated use `CapitalPendingSubtotal2$Outbound` instead. */
  export type Outbound = CapitalPendingSubtotal2$Outbound;
}

export function capitalPendingSubtotal2ToJSON(
  capitalPendingSubtotal2: CapitalPendingSubtotal2,
): string {
  return JSON.stringify(
    CapitalPendingSubtotal2$outboundSchema.parse(capitalPendingSubtotal2),
  );
}

export function capitalPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<CapitalPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const CapitalPending$inboundSchema: z.ZodType<
  CapitalPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CapitalPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CapitalPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type CapitalPending$Outbound = {
  amount?: CapitalPendingAmount$Outbound | undefined;
  subtotals?: Array<CapitalPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const CapitalPending$outboundSchema: z.ZodType<
  CapitalPending$Outbound,
  z.ZodTypeDef,
  CapitalPending
> = z.object({
  amount: z.lazy(() => CapitalPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CapitalPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalPending$ {
  /** @deprecated use `CapitalPending$inboundSchema` instead. */
  export const inboundSchema = CapitalPending$inboundSchema;
  /** @deprecated use `CapitalPending$outboundSchema` instead. */
  export const outboundSchema = CapitalPending$outboundSchema;
  /** @deprecated use `CapitalPending$Outbound` instead. */
  export type Outbound = CapitalPending$Outbound;
}

export function capitalPendingToJSON(capitalPending: CapitalPending): string {
  return JSON.stringify(CapitalPending$outboundSchema.parse(capitalPending));
}

export function capitalPendingFromJSON(
  jsonString: string,
): SafeParseResult<CapitalPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalPending' from JSON`,
  );
}

/** @internal */
export const CapitalMovedToAvailableAmount$inboundSchema: z.ZodType<
  CapitalMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CapitalMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CapitalMovedToAvailableAmount$outboundSchema: z.ZodType<
  CapitalMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  CapitalMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableAmount$ {
  /** @deprecated use `CapitalMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = CapitalMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = CapitalMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `CapitalMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = CapitalMovedToAvailableAmount$Outbound;
}

export function capitalMovedToAvailableAmountToJSON(
  capitalMovedToAvailableAmount: CapitalMovedToAvailableAmount,
): string {
  return JSON.stringify(
    CapitalMovedToAvailableAmount$outboundSchema.parse(
      capitalMovedToAvailableAmount,
    ),
  );
}

export function capitalMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<CapitalMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const CapitalMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalMethod1> = z.nativeEnum(
    CapitalMovedToAvailableSubTotalMethod1,
  );

/** @internal */
export const CapitalMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalMethod1> =
    CapitalMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(CapitalMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const CapitalMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalCardIssuer1> =
    CapitalMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalCardAudience1> = z
    .nativeEnum(CapitalMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const CapitalMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalCardAudience1> =
    CapitalMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(CapitalMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const CapitalMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalCardRegion1> =
    CapitalMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(CapitalMovedToAvailableSubTotalFeeType1);

/** @internal */
export const CapitalMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalFeeType1> =
    CapitalMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalPrepaymentPartType1> = z
    .nativeEnum(CapitalMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const CapitalMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalPrepaymentPartType1> =
    CapitalMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalTransactionType1> = z
    .nativeEnum(CapitalMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const CapitalMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubTotalTransactionType1> =
    CapitalMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  CapitalMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CapitalMovedToAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(CapitalMovedToAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CapitalMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type CapitalMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CapitalMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  CapitalMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  CapitalMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CapitalMovedToAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(CapitalMovedToAvailableSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CapitalMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubTotal1$ {
  /** @deprecated use `CapitalMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema = CapitalMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema = CapitalMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = CapitalMovedToAvailableSubTotal1$Outbound;
}

export function capitalMovedToAvailableSubTotal1ToJSON(
  capitalMovedToAvailableSubTotal1: CapitalMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    CapitalMovedToAvailableSubTotal1$outboundSchema.parse(
      capitalMovedToAvailableSubTotal1,
    ),
  );
}

export function capitalMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<CapitalMovedToAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalMovedToAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const CapitalMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalMethod2> = z.nativeEnum(
    CapitalMovedToAvailableSubtotalMethod2,
  );

/** @internal */
export const CapitalMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalMethod2> =
    CapitalMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(CapitalMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const CapitalMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalCardIssuer2> =
    CapitalMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalCardAudience2> = z
    .nativeEnum(CapitalMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const CapitalMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalCardAudience2> =
    CapitalMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(CapitalMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const CapitalMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalCardRegion2> =
    CapitalMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(CapitalMovedToAvailableSubtotalFeeType2);

/** @internal */
export const CapitalMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalFeeType2> =
    CapitalMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalPrepaymentPartType2> = z
    .nativeEnum(CapitalMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const CapitalMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalPrepaymentPartType2> =
    CapitalMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalTransactionType2> = z
    .nativeEnum(CapitalMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const CapitalMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalMovedToAvailableSubtotalTransactionType2> =
    CapitalMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const CapitalMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  CapitalMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => CapitalMovedToAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CapitalMovedToAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(CapitalMovedToAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CapitalMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type CapitalMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<CapitalMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CapitalMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  CapitalMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  CapitalMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => CapitalMovedToAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CapitalMovedToAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(CapitalMovedToAvailableSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CapitalMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailableSubtotal2$ {
  /** @deprecated use `CapitalMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema = CapitalMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema = CapitalMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `CapitalMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = CapitalMovedToAvailableSubtotal2$Outbound;
}

export function capitalMovedToAvailableSubtotal2ToJSON(
  capitalMovedToAvailableSubtotal2: CapitalMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    CapitalMovedToAvailableSubtotal2$outboundSchema.parse(
      capitalMovedToAvailableSubtotal2,
    ),
  );
}

export function capitalMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<CapitalMovedToAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalMovedToAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const CapitalMovedToAvailable$inboundSchema: z.ZodType<
  CapitalMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CapitalMovedToAvailableAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CapitalMovedToAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type CapitalMovedToAvailable$Outbound = {
  amount?: CapitalMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<CapitalMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CapitalMovedToAvailable$outboundSchema: z.ZodType<
  CapitalMovedToAvailable$Outbound,
  z.ZodTypeDef,
  CapitalMovedToAvailable
> = z.object({
  amount: z.lazy(() => CapitalMovedToAvailableAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CapitalMovedToAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalMovedToAvailable$ {
  /** @deprecated use `CapitalMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = CapitalMovedToAvailable$inboundSchema;
  /** @deprecated use `CapitalMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = CapitalMovedToAvailable$outboundSchema;
  /** @deprecated use `CapitalMovedToAvailable$Outbound` instead. */
  export type Outbound = CapitalMovedToAvailable$Outbound;
}

export function capitalMovedToAvailableToJSON(
  capitalMovedToAvailable: CapitalMovedToAvailable,
): string {
  return JSON.stringify(
    CapitalMovedToAvailable$outboundSchema.parse(capitalMovedToAvailable),
  );
}

export function capitalMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<CapitalMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const CapitalImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  CapitalImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CapitalImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CapitalImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  CapitalImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  CapitalImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableAmount$ {
  /** @deprecated use `CapitalImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = CapitalImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = CapitalImmediatelyAvailableAmount$Outbound;
}

export function capitalImmediatelyAvailableAmountToJSON(
  capitalImmediatelyAvailableAmount: CapitalImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    CapitalImmediatelyAvailableAmount$outboundSchema.parse(
      capitalImmediatelyAvailableAmount,
    ),
  );
}

export function capitalImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<CapitalImmediatelyAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalImmediatelyAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(CapitalImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const CapitalImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalMethod1> =
    CapitalImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalCardIssuer1> = z
    .nativeEnum(CapitalImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const CapitalImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalCardIssuer1> =
    CapitalImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalCardAudience1> = z
    .nativeEnum(CapitalImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const CapitalImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalCardAudience1> =
    CapitalImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalCardRegion1> = z
    .nativeEnum(CapitalImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const CapitalImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalCardRegion1> =
    CapitalImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(CapitalImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const CapitalImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalFeeType1> =
    CapitalImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof CapitalImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(CapitalImmediatelyAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof CapitalImmediatelyAvailableSubTotalPrepaymentPartType1
  > = CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalTransactionType1> =
    z.nativeEnum(CapitalImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const CapitalImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubTotalTransactionType1> =
    CapitalImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubTotal1$inboundSchema: z.ZodType<
  CapitalImmediatelyAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CapitalImmediatelyAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(CapitalImmediatelyAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type CapitalImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CapitalImmediatelyAvailableSubTotal1$outboundSchema: z.ZodType<
  CapitalImmediatelyAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  CapitalImmediatelyAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CapitalImmediatelyAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    CapitalImmediatelyAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CapitalImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = CapitalImmediatelyAvailableSubTotal1$Outbound;
}

export function capitalImmediatelyAvailableSubTotal1ToJSON(
  capitalImmediatelyAvailableSubTotal1: CapitalImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    CapitalImmediatelyAvailableSubTotal1$outboundSchema.parse(
      capitalImmediatelyAvailableSubTotal1,
    ),
  );
}

export function capitalImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<CapitalImmediatelyAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CapitalImmediatelyAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(CapitalImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const CapitalImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalMethod2> =
    CapitalImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalCardIssuer2> = z
    .nativeEnum(CapitalImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const CapitalImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalCardIssuer2> =
    CapitalImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalCardAudience2> = z
    .nativeEnum(CapitalImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const CapitalImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalCardAudience2> =
    CapitalImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalCardRegion2> = z
    .nativeEnum(CapitalImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const CapitalImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalCardRegion2> =
    CapitalImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(CapitalImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const CapitalImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalFeeType2> =
    CapitalImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof CapitalImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(CapitalImmediatelyAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof CapitalImmediatelyAvailableSubtotalPrepaymentPartType2
  > = CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalTransactionType2> =
    z.nativeEnum(CapitalImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const CapitalImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof CapitalImmediatelyAvailableSubtotalTransactionType2> =
    CapitalImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const CapitalImmediatelyAvailableSubtotal2$inboundSchema: z.ZodType<
  CapitalImmediatelyAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => CapitalImmediatelyAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CapitalImmediatelyAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(CapitalImmediatelyAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type CapitalImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<CapitalImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CapitalImmediatelyAvailableSubtotal2$outboundSchema: z.ZodType<
  CapitalImmediatelyAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  CapitalImmediatelyAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => CapitalImmediatelyAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CapitalImmediatelyAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CapitalImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CapitalImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CapitalImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    CapitalImmediatelyAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CapitalImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CapitalImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `CapitalImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    CapitalImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    CapitalImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = CapitalImmediatelyAvailableSubtotal2$Outbound;
}

export function capitalImmediatelyAvailableSubtotal2ToJSON(
  capitalImmediatelyAvailableSubtotal2: CapitalImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    CapitalImmediatelyAvailableSubtotal2$outboundSchema.parse(
      capitalImmediatelyAvailableSubtotal2,
    ),
  );
}

export function capitalImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<CapitalImmediatelyAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CapitalImmediatelyAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const CapitalImmediatelyAvailable$inboundSchema: z.ZodType<
  CapitalImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CapitalImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CapitalImmediatelyAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type CapitalImmediatelyAvailable$Outbound = {
  amount?: CapitalImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<CapitalImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CapitalImmediatelyAvailable$outboundSchema: z.ZodType<
  CapitalImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  CapitalImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => CapitalImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CapitalImmediatelyAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapitalImmediatelyAvailable$ {
  /** @deprecated use `CapitalImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = CapitalImmediatelyAvailable$inboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema = CapitalImmediatelyAvailable$outboundSchema;
  /** @deprecated use `CapitalImmediatelyAvailable$Outbound` instead. */
  export type Outbound = CapitalImmediatelyAvailable$Outbound;
}

export function capitalImmediatelyAvailableToJSON(
  capitalImmediatelyAvailable: CapitalImmediatelyAvailable,
): string {
  return JSON.stringify(
    CapitalImmediatelyAvailable$outboundSchema.parse(
      capitalImmediatelyAvailable,
    ),
  );
}

export function capitalImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<CapitalImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapitalImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapitalImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const Capital$inboundSchema: z.ZodType<Capital, z.ZodTypeDef, unknown> =
  z.object({
    pending: z.lazy(() => CapitalPending$inboundSchema).optional(),
    movedToAvailable: z.lazy(() => CapitalMovedToAvailable$inboundSchema)
      .optional(),
    immediatelyAvailable: z.lazy(() =>
      CapitalImmediatelyAvailable$inboundSchema
    ).optional(),
  });

/** @internal */
export type Capital$Outbound = {
  pending?: CapitalPending$Outbound | undefined;
  movedToAvailable?: CapitalMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?: CapitalImmediatelyAvailable$Outbound | undefined;
};

/** @internal */
export const Capital$outboundSchema: z.ZodType<
  Capital$Outbound,
  z.ZodTypeDef,
  Capital
> = z.object({
  pending: z.lazy(() => CapitalPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => CapitalMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() => CapitalImmediatelyAvailable$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Capital$ {
  /** @deprecated use `Capital$inboundSchema` instead. */
  export const inboundSchema = Capital$inboundSchema;
  /** @deprecated use `Capital$outboundSchema` instead. */
  export const outboundSchema = Capital$outboundSchema;
  /** @deprecated use `Capital$Outbound` instead. */
  export type Outbound = Capital$Outbound;
}

export function capitalToJSON(capital: Capital): string {
  return JSON.stringify(Capital$outboundSchema.parse(capital));
}

export function capitalFromJSON(
  jsonString: string,
): SafeParseResult<Capital, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Capital$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Capital' from JSON`,
  );
}

/** @internal */
export const TransfersPendingAmount$inboundSchema: z.ZodType<
  TransfersPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type TransfersPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const TransfersPendingAmount$outboundSchema: z.ZodType<
  TransfersPendingAmount$Outbound,
  z.ZodTypeDef,
  TransfersPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingAmount$ {
  /** @deprecated use `TransfersPendingAmount$inboundSchema` instead. */
  export const inboundSchema = TransfersPendingAmount$inboundSchema;
  /** @deprecated use `TransfersPendingAmount$outboundSchema` instead. */
  export const outboundSchema = TransfersPendingAmount$outboundSchema;
  /** @deprecated use `TransfersPendingAmount$Outbound` instead. */
  export type Outbound = TransfersPendingAmount$Outbound;
}

export function transfersPendingAmountToJSON(
  transfersPendingAmount: TransfersPendingAmount,
): string {
  return JSON.stringify(
    TransfersPendingAmount$outboundSchema.parse(transfersPendingAmount),
  );
}

export function transfersPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransfersPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransfersPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersPendingAmount' from JSON`,
  );
}

/** @internal */
export const TransfersPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubTotalMethod1
> = z.nativeEnum(TransfersPendingSubTotalMethod1);

/** @internal */
export const TransfersPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubTotalMethod1
> = TransfersPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotalMethod1$ {
  /** @deprecated use `TransfersPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = TransfersPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = TransfersPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const TransfersPendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubTotalCardIssuer1
> = z.nativeEnum(TransfersPendingSubTotalCardIssuer1);

/** @internal */
export const TransfersPendingSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalCardIssuer1> =
    TransfersPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotalCardIssuer1$ {
  /** @deprecated use `TransfersPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const TransfersPendingSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalCardAudience1> = z.nativeEnum(
    TransfersPendingSubTotalCardAudience1,
  );

/** @internal */
export const TransfersPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalCardAudience1> =
    TransfersPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotalCardAudience1$ {
  /** @deprecated use `TransfersPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const TransfersPendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubTotalCardRegion1
> = z.nativeEnum(TransfersPendingSubTotalCardRegion1);

/** @internal */
export const TransfersPendingSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalCardRegion1> =
    TransfersPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotalCardRegion1$ {
  /** @deprecated use `TransfersPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const TransfersPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubTotalFeeType1
> = z.nativeEnum(TransfersPendingSubTotalFeeType1);

/** @internal */
export const TransfersPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubTotalFeeType1
> = TransfersPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotalFeeType1$ {
  /** @deprecated use `TransfersPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = TransfersPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = TransfersPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const TransfersPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(TransfersPendingSubTotalPrepaymentPartType1);

/** @internal */
export const TransfersPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalPrepaymentPartType1> =
    TransfersPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `TransfersPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const TransfersPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalTransactionType1> = z
    .nativeEnum(TransfersPendingSubTotalTransactionType1);

/** @internal */
export const TransfersPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubTotalTransactionType1> =
    TransfersPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotalTransactionType1$ {
  /** @deprecated use `TransfersPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const TransfersPendingSubTotal1$inboundSchema: z.ZodType<
  TransfersPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TransfersPendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(TransfersPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(TransfersPendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(TransfersPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(TransfersPendingSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type TransfersPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TransfersPendingSubTotal1$outboundSchema: z.ZodType<
  TransfersPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  TransfersPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TransfersPendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(TransfersPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(TransfersPendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(TransfersPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(TransfersPendingSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubTotal1$ {
  /** @deprecated use `TransfersPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = TransfersPendingSubTotal1$inboundSchema;
  /** @deprecated use `TransfersPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = TransfersPendingSubTotal1$outboundSchema;
  /** @deprecated use `TransfersPendingSubTotal1$Outbound` instead. */
  export type Outbound = TransfersPendingSubTotal1$Outbound;
}

export function transfersPendingSubTotal1ToJSON(
  transfersPendingSubTotal1: TransfersPendingSubTotal1,
): string {
  return JSON.stringify(
    TransfersPendingSubTotal1$outboundSchema.parse(transfersPendingSubTotal1),
  );
}

export function transfersPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<TransfersPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransfersPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const TransfersPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubtotalMethod2
> = z.nativeEnum(TransfersPendingSubtotalMethod2);

/** @internal */
export const TransfersPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubtotalMethod2
> = TransfersPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotalMethod2$ {
  /** @deprecated use `TransfersPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = TransfersPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = TransfersPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const TransfersPendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubtotalCardIssuer2
> = z.nativeEnum(TransfersPendingSubtotalCardIssuer2);

/** @internal */
export const TransfersPendingSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalCardIssuer2> =
    TransfersPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotalCardIssuer2$ {
  /** @deprecated use `TransfersPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const TransfersPendingSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalCardAudience2> = z.nativeEnum(
    TransfersPendingSubtotalCardAudience2,
  );

/** @internal */
export const TransfersPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalCardAudience2> =
    TransfersPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotalCardAudience2$ {
  /** @deprecated use `TransfersPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const TransfersPendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubtotalCardRegion2
> = z.nativeEnum(TransfersPendingSubtotalCardRegion2);

/** @internal */
export const TransfersPendingSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalCardRegion2> =
    TransfersPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotalCardRegion2$ {
  /** @deprecated use `TransfersPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const TransfersPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubtotalFeeType2
> = z.nativeEnum(TransfersPendingSubtotalFeeType2);

/** @internal */
export const TransfersPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof TransfersPendingSubtotalFeeType2
> = TransfersPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotalFeeType2$ {
  /** @deprecated use `TransfersPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = TransfersPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = TransfersPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const TransfersPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(TransfersPendingSubtotalPrepaymentPartType2);

/** @internal */
export const TransfersPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalPrepaymentPartType2> =
    TransfersPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `TransfersPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const TransfersPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalTransactionType2> = z
    .nativeEnum(TransfersPendingSubtotalTransactionType2);

/** @internal */
export const TransfersPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersPendingSubtotalTransactionType2> =
    TransfersPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotalTransactionType2$ {
  /** @deprecated use `TransfersPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const TransfersPendingSubtotal2$inboundSchema: z.ZodType<
  TransfersPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => TransfersPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TransfersPendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(TransfersPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(TransfersPendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(TransfersPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(TransfersPendingSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type TransfersPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<TransfersPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TransfersPendingSubtotal2$outboundSchema: z.ZodType<
  TransfersPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  TransfersPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => TransfersPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TransfersPendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(TransfersPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(TransfersPendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(TransfersPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(TransfersPendingSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPendingSubtotal2$ {
  /** @deprecated use `TransfersPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = TransfersPendingSubtotal2$inboundSchema;
  /** @deprecated use `TransfersPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = TransfersPendingSubtotal2$outboundSchema;
  /** @deprecated use `TransfersPendingSubtotal2$Outbound` instead. */
  export type Outbound = TransfersPendingSubtotal2$Outbound;
}

export function transfersPendingSubtotal2ToJSON(
  transfersPendingSubtotal2: TransfersPendingSubtotal2,
): string {
  return JSON.stringify(
    TransfersPendingSubtotal2$outboundSchema.parse(transfersPendingSubtotal2),
  );
}

export function transfersPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<TransfersPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransfersPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const TransfersPending$inboundSchema: z.ZodType<
  TransfersPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => TransfersPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TransfersPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type TransfersPending$Outbound = {
  amount?: TransfersPendingAmount$Outbound | undefined;
  subtotals?: Array<TransfersPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const TransfersPending$outboundSchema: z.ZodType<
  TransfersPending$Outbound,
  z.ZodTypeDef,
  TransfersPending
> = z.object({
  amount: z.lazy(() => TransfersPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TransfersPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersPending$ {
  /** @deprecated use `TransfersPending$inboundSchema` instead. */
  export const inboundSchema = TransfersPending$inboundSchema;
  /** @deprecated use `TransfersPending$outboundSchema` instead. */
  export const outboundSchema = TransfersPending$outboundSchema;
  /** @deprecated use `TransfersPending$Outbound` instead. */
  export type Outbound = TransfersPending$Outbound;
}

export function transfersPendingToJSON(
  transfersPending: TransfersPending,
): string {
  return JSON.stringify(
    TransfersPending$outboundSchema.parse(transfersPending),
  );
}

export function transfersPendingFromJSON(
  jsonString: string,
): SafeParseResult<TransfersPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransfersPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersPending' from JSON`,
  );
}

/** @internal */
export const TransfersMovedToAvailableAmount$inboundSchema: z.ZodType<
  TransfersMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type TransfersMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const TransfersMovedToAvailableAmount$outboundSchema: z.ZodType<
  TransfersMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  TransfersMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableAmount$ {
  /** @deprecated use `TransfersMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = TransfersMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = TransfersMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `TransfersMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = TransfersMovedToAvailableAmount$Outbound;
}

export function transfersMovedToAvailableAmountToJSON(
  transfersMovedToAvailableAmount: TransfersMovedToAvailableAmount,
): string {
  return JSON.stringify(
    TransfersMovedToAvailableAmount$outboundSchema.parse(
      transfersMovedToAvailableAmount,
    ),
  );
}

export function transfersMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransfersMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransfersMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const TransfersMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalMethod1> = z
    .nativeEnum(TransfersMovedToAvailableSubTotalMethod1);

/** @internal */
export const TransfersMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalMethod1> =
    TransfersMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(TransfersMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const TransfersMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalCardIssuer1> =
    TransfersMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalCardAudience1> = z
    .nativeEnum(TransfersMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const TransfersMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalCardAudience1> =
    TransfersMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(TransfersMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const TransfersMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalCardRegion1> =
    TransfersMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(TransfersMovedToAvailableSubTotalFeeType1);

/** @internal */
export const TransfersMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalFeeType1> =
    TransfersMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalPrepaymentPartType1> =
    z.nativeEnum(TransfersMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const TransfersMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalPrepaymentPartType1> =
    TransfersMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalTransactionType1> = z
    .nativeEnum(TransfersMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const TransfersMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubTotalTransactionType1> =
    TransfersMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  TransfersMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TransfersMovedToAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TransfersMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(TransfersMovedToAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type TransfersMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TransfersMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  TransfersMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  TransfersMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TransfersMovedToAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TransfersMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(TransfersMovedToAvailableSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubTotal1$ {
  /** @deprecated use `TransfersMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema = TransfersMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = TransfersMovedToAvailableSubTotal1$Outbound;
}

export function transfersMovedToAvailableSubTotal1ToJSON(
  transfersMovedToAvailableSubTotal1: TransfersMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    TransfersMovedToAvailableSubTotal1$outboundSchema.parse(
      transfersMovedToAvailableSubTotal1,
    ),
  );
}

export function transfersMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<TransfersMovedToAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransfersMovedToAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const TransfersMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalMethod2> = z
    .nativeEnum(TransfersMovedToAvailableSubtotalMethod2);

/** @internal */
export const TransfersMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalMethod2> =
    TransfersMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(TransfersMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const TransfersMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalCardIssuer2> =
    TransfersMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalCardAudience2> = z
    .nativeEnum(TransfersMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const TransfersMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalCardAudience2> =
    TransfersMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(TransfersMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const TransfersMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalCardRegion2> =
    TransfersMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(TransfersMovedToAvailableSubtotalFeeType2);

/** @internal */
export const TransfersMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalFeeType2> =
    TransfersMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalPrepaymentPartType2> =
    z.nativeEnum(TransfersMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const TransfersMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalPrepaymentPartType2> =
    TransfersMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalTransactionType2> = z
    .nativeEnum(TransfersMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const TransfersMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersMovedToAvailableSubtotalTransactionType2> =
    TransfersMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const TransfersMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  TransfersMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => TransfersMovedToAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TransfersMovedToAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TransfersMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(TransfersMovedToAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type TransfersMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<TransfersMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TransfersMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  TransfersMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  TransfersMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => TransfersMovedToAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TransfersMovedToAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TransfersMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(TransfersMovedToAvailableSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TransfersMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailableSubtotal2$ {
  /** @deprecated use `TransfersMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema = TransfersMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `TransfersMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = TransfersMovedToAvailableSubtotal2$Outbound;
}

export function transfersMovedToAvailableSubtotal2ToJSON(
  transfersMovedToAvailableSubtotal2: TransfersMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    TransfersMovedToAvailableSubtotal2$outboundSchema.parse(
      transfersMovedToAvailableSubtotal2,
    ),
  );
}

export function transfersMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<TransfersMovedToAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransfersMovedToAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const TransfersMovedToAvailable$inboundSchema: z.ZodType<
  TransfersMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => TransfersMovedToAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TransfersMovedToAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type TransfersMovedToAvailable$Outbound = {
  amount?: TransfersMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<TransfersMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const TransfersMovedToAvailable$outboundSchema: z.ZodType<
  TransfersMovedToAvailable$Outbound,
  z.ZodTypeDef,
  TransfersMovedToAvailable
> = z.object({
  amount: z.lazy(() => TransfersMovedToAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TransfersMovedToAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersMovedToAvailable$ {
  /** @deprecated use `TransfersMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = TransfersMovedToAvailable$inboundSchema;
  /** @deprecated use `TransfersMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = TransfersMovedToAvailable$outboundSchema;
  /** @deprecated use `TransfersMovedToAvailable$Outbound` instead. */
  export type Outbound = TransfersMovedToAvailable$Outbound;
}

export function transfersMovedToAvailableToJSON(
  transfersMovedToAvailable: TransfersMovedToAvailable,
): string {
  return JSON.stringify(
    TransfersMovedToAvailable$outboundSchema.parse(transfersMovedToAvailable),
  );
}

export function transfersMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<TransfersMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransfersMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const TransfersImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  TransfersImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type TransfersImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const TransfersImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  TransfersImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  TransfersImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableAmount$ {
  /** @deprecated use `TransfersImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = TransfersImmediatelyAvailableAmount$Outbound;
}

export function transfersImmediatelyAvailableAmountToJSON(
  transfersImmediatelyAvailableAmount: TransfersImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    TransfersImmediatelyAvailableAmount$outboundSchema.parse(
      transfersImmediatelyAvailableAmount,
    ),
  );
}

export function transfersImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransfersImmediatelyAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransfersImmediatelyAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(TransfersImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const TransfersImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalMethod1> =
    TransfersImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalCardIssuer1> = z
    .nativeEnum(TransfersImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const TransfersImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalCardIssuer1> =
    TransfersImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalCardAudience1> = z
    .nativeEnum(TransfersImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const TransfersImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalCardAudience1> =
    TransfersImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalCardRegion1> = z
    .nativeEnum(TransfersImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const TransfersImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalCardRegion1> =
    TransfersImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(TransfersImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const TransfersImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubTotalFeeType1> =
    TransfersImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(TransfersImmediatelyAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubTotalPrepaymentPartType1
  > = TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubTotalTransactionType1
  > = z.nativeEnum(TransfersImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const TransfersImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubTotalTransactionType1
  > = TransfersImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubTotal1$inboundSchema: z.ZodType<
  TransfersImmediatelyAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TransfersImmediatelyAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TransfersImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    TransfersImmediatelyAvailableSubTotalFeeType1$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type TransfersImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TransfersImmediatelyAvailableSubTotal1$outboundSchema: z.ZodType<
  TransfersImmediatelyAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  TransfersImmediatelyAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    TransfersImmediatelyAvailableSubTotalMethod1$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    TransfersImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    TransfersImmediatelyAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    TransfersImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = TransfersImmediatelyAvailableSubTotal1$Outbound;
}

export function transfersImmediatelyAvailableSubTotal1ToJSON(
  transfersImmediatelyAvailableSubTotal1:
    TransfersImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    TransfersImmediatelyAvailableSubTotal1$outboundSchema.parse(
      transfersImmediatelyAvailableSubTotal1,
    ),
  );
}

export function transfersImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<TransfersImmediatelyAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransfersImmediatelyAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(TransfersImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const TransfersImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalMethod2> =
    TransfersImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalCardIssuer2> = z
    .nativeEnum(TransfersImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const TransfersImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalCardIssuer2> =
    TransfersImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalCardAudience2> = z
    .nativeEnum(TransfersImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const TransfersImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalCardAudience2> =
    TransfersImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalCardRegion2> = z
    .nativeEnum(TransfersImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const TransfersImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalCardRegion2> =
    TransfersImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(TransfersImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const TransfersImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof TransfersImmediatelyAvailableSubtotalFeeType2> =
    TransfersImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(TransfersImmediatelyAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubtotalPrepaymentPartType2
  > = TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubtotalTransactionType2
  > = z.nativeEnum(TransfersImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const TransfersImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<
    typeof TransfersImmediatelyAvailableSubtotalTransactionType2
  > = TransfersImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const TransfersImmediatelyAvailableSubtotal2$inboundSchema: z.ZodType<
  TransfersImmediatelyAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => TransfersImmediatelyAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TransfersImmediatelyAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TransfersImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    TransfersImmediatelyAvailableSubtotalFeeType2$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type TransfersImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<TransfersImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TransfersImmediatelyAvailableSubtotal2$outboundSchema: z.ZodType<
  TransfersImmediatelyAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  TransfersImmediatelyAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(
      z.lazy(() => TransfersImmediatelyAvailableSubTotal1$outboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    TransfersImmediatelyAvailableSubtotalMethod2$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    TransfersImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TransfersImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TransfersImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    TransfersImmediatelyAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    TransfersImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TransfersImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `TransfersImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    TransfersImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    TransfersImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = TransfersImmediatelyAvailableSubtotal2$Outbound;
}

export function transfersImmediatelyAvailableSubtotal2ToJSON(
  transfersImmediatelyAvailableSubtotal2:
    TransfersImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    TransfersImmediatelyAvailableSubtotal2$outboundSchema.parse(
      transfersImmediatelyAvailableSubtotal2,
    ),
  );
}

export function transfersImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<TransfersImmediatelyAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransfersImmediatelyAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const TransfersImmediatelyAvailable$inboundSchema: z.ZodType<
  TransfersImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => TransfersImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TransfersImmediatelyAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type TransfersImmediatelyAvailable$Outbound = {
  amount?: TransfersImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<TransfersImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const TransfersImmediatelyAvailable$outboundSchema: z.ZodType<
  TransfersImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  TransfersImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => TransfersImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => TransfersImmediatelyAvailableSubtotal2$outboundSchema),
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransfersImmediatelyAvailable$ {
  /** @deprecated use `TransfersImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = TransfersImmediatelyAvailable$inboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema = TransfersImmediatelyAvailable$outboundSchema;
  /** @deprecated use `TransfersImmediatelyAvailable$Outbound` instead. */
  export type Outbound = TransfersImmediatelyAvailable$Outbound;
}

export function transfersImmediatelyAvailableToJSON(
  transfersImmediatelyAvailable: TransfersImmediatelyAvailable,
): string {
  return JSON.stringify(
    TransfersImmediatelyAvailable$outboundSchema.parse(
      transfersImmediatelyAvailable,
    ),
  );
}

export function transfersImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<TransfersImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransfersImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransfersImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const Transfers$inboundSchema: z.ZodType<
  Transfers,
  z.ZodTypeDef,
  unknown
> = z.object({
  pending: z.lazy(() => TransfersPending$inboundSchema).optional(),
  movedToAvailable: z.lazy(() => TransfersMovedToAvailable$inboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    TransfersImmediatelyAvailable$inboundSchema
  ).optional(),
});

/** @internal */
export type Transfers$Outbound = {
  pending?: TransfersPending$Outbound | undefined;
  movedToAvailable?: TransfersMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?: TransfersImmediatelyAvailable$Outbound | undefined;
};

/** @internal */
export const Transfers$outboundSchema: z.ZodType<
  Transfers$Outbound,
  z.ZodTypeDef,
  Transfers
> = z.object({
  pending: z.lazy(() => TransfersPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => TransfersMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    TransfersImmediatelyAvailable$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transfers$ {
  /** @deprecated use `Transfers$inboundSchema` instead. */
  export const inboundSchema = Transfers$inboundSchema;
  /** @deprecated use `Transfers$outboundSchema` instead. */
  export const outboundSchema = Transfers$outboundSchema;
  /** @deprecated use `Transfers$Outbound` instead. */
  export type Outbound = Transfers$Outbound;
}

export function transfersToJSON(transfers: Transfers): string {
  return JSON.stringify(Transfers$outboundSchema.parse(transfers));
}

export function transfersFromJSON(
  jsonString: string,
): SafeParseResult<Transfers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transfers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transfers' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsPendingAmount$inboundSchema: z.ZodType<
  FeePrepaymentsPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type FeePrepaymentsPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const FeePrepaymentsPendingAmount$outboundSchema: z.ZodType<
  FeePrepaymentsPendingAmount$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingAmount$ {
  /** @deprecated use `FeePrepaymentsPendingAmount$inboundSchema` instead. */
  export const inboundSchema = FeePrepaymentsPendingAmount$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingAmount$outboundSchema` instead. */
  export const outboundSchema = FeePrepaymentsPendingAmount$outboundSchema;
  /** @deprecated use `FeePrepaymentsPendingAmount$Outbound` instead. */
  export type Outbound = FeePrepaymentsPendingAmount$Outbound;
}

export function feePrepaymentsPendingAmountToJSON(
  feePrepaymentsPendingAmount: FeePrepaymentsPendingAmount,
): string {
  return JSON.stringify(
    FeePrepaymentsPendingAmount$outboundSchema.parse(
      feePrepaymentsPendingAmount,
    ),
  );
}

export function feePrepaymentsPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<FeePrepaymentsPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeePrepaymentsPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepaymentsPendingAmount' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsPendingSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalMethod1> = z.nativeEnum(
    FeePrepaymentsPendingSubTotalMethod1,
  );

/** @internal */
export const FeePrepaymentsPendingSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalMethod1> =
    FeePrepaymentsPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotalMethod1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalCardIssuer1> = z
    .nativeEnum(FeePrepaymentsPendingSubTotalCardIssuer1);

/** @internal */
export const FeePrepaymentsPendingSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalCardIssuer1> =
    FeePrepaymentsPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotalCardIssuer1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalCardAudience1> = z
    .nativeEnum(FeePrepaymentsPendingSubTotalCardAudience1);

/** @internal */
export const FeePrepaymentsPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalCardAudience1> =
    FeePrepaymentsPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotalCardAudience1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalCardRegion1> = z
    .nativeEnum(FeePrepaymentsPendingSubTotalCardRegion1);

/** @internal */
export const FeePrepaymentsPendingSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalCardRegion1> =
    FeePrepaymentsPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotalCardRegion1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalFeeType1> = z.nativeEnum(
    FeePrepaymentsPendingSubTotalFeeType1,
  );

/** @internal */
export const FeePrepaymentsPendingSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalFeeType1> =
    FeePrepaymentsPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotalFeeType1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(FeePrepaymentsPendingSubTotalPrepaymentPartType1);

/** @internal */
export const FeePrepaymentsPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalPrepaymentPartType1> =
    FeePrepaymentsPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalTransactionType1> = z
    .nativeEnum(FeePrepaymentsPendingSubTotalTransactionType1);

/** @internal */
export const FeePrepaymentsPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubTotalTransactionType1> =
    FeePrepaymentsPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotalTransactionType1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubTotal1$inboundSchema: z.ZodType<
  FeePrepaymentsPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(FeePrepaymentsPendingSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(FeePrepaymentsPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    FeePrepaymentsPendingSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(FeePrepaymentsPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(FeePrepaymentsPendingSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type FeePrepaymentsPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const FeePrepaymentsPendingSubTotal1$outboundSchema: z.ZodType<
  FeePrepaymentsPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(FeePrepaymentsPendingSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    FeePrepaymentsPendingSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    FeePrepaymentsPendingSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    FeePrepaymentsPendingSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(FeePrepaymentsPendingSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubTotal1$ {
  /** @deprecated use `FeePrepaymentsPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = FeePrepaymentsPendingSubTotal1$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = FeePrepaymentsPendingSubTotal1$outboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubTotal1$Outbound` instead. */
  export type Outbound = FeePrepaymentsPendingSubTotal1$Outbound;
}

export function feePrepaymentsPendingSubTotal1ToJSON(
  feePrepaymentsPendingSubTotal1: FeePrepaymentsPendingSubTotal1,
): string {
  return JSON.stringify(
    FeePrepaymentsPendingSubTotal1$outboundSchema.parse(
      feePrepaymentsPendingSubTotal1,
    ),
  );
}

export function feePrepaymentsPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<FeePrepaymentsPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeePrepaymentsPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepaymentsPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsPendingSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalMethod2> = z.nativeEnum(
    FeePrepaymentsPendingSubtotalMethod2,
  );

/** @internal */
export const FeePrepaymentsPendingSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalMethod2> =
    FeePrepaymentsPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotalMethod2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalCardIssuer2> = z
    .nativeEnum(FeePrepaymentsPendingSubtotalCardIssuer2);

/** @internal */
export const FeePrepaymentsPendingSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalCardIssuer2> =
    FeePrepaymentsPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotalCardIssuer2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalCardAudience2> = z
    .nativeEnum(FeePrepaymentsPendingSubtotalCardAudience2);

/** @internal */
export const FeePrepaymentsPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalCardAudience2> =
    FeePrepaymentsPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotalCardAudience2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalCardRegion2> = z
    .nativeEnum(FeePrepaymentsPendingSubtotalCardRegion2);

/** @internal */
export const FeePrepaymentsPendingSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalCardRegion2> =
    FeePrepaymentsPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotalCardRegion2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalFeeType2> = z.nativeEnum(
    FeePrepaymentsPendingSubtotalFeeType2,
  );

/** @internal */
export const FeePrepaymentsPendingSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalFeeType2> =
    FeePrepaymentsPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotalFeeType2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(FeePrepaymentsPendingSubtotalPrepaymentPartType2);

/** @internal */
export const FeePrepaymentsPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalPrepaymentPartType2> =
    FeePrepaymentsPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalTransactionType2> = z
    .nativeEnum(FeePrepaymentsPendingSubtotalTransactionType2);

/** @internal */
export const FeePrepaymentsPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsPendingSubtotalTransactionType2> =
    FeePrepaymentsPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotalTransactionType2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsPendingSubtotal2$inboundSchema: z.ZodType<
  FeePrepaymentsPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => FeePrepaymentsPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(FeePrepaymentsPendingSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(FeePrepaymentsPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    FeePrepaymentsPendingSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(FeePrepaymentsPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(FeePrepaymentsPendingSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type FeePrepaymentsPendingSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<FeePrepaymentsPendingSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const FeePrepaymentsPendingSubtotal2$outboundSchema: z.ZodType<
  FeePrepaymentsPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => FeePrepaymentsPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(FeePrepaymentsPendingSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    FeePrepaymentsPendingSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    FeePrepaymentsPendingSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    FeePrepaymentsPendingSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(FeePrepaymentsPendingSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPendingSubtotal2$ {
  /** @deprecated use `FeePrepaymentsPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = FeePrepaymentsPendingSubtotal2$inboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = FeePrepaymentsPendingSubtotal2$outboundSchema;
  /** @deprecated use `FeePrepaymentsPendingSubtotal2$Outbound` instead. */
  export type Outbound = FeePrepaymentsPendingSubtotal2$Outbound;
}

export function feePrepaymentsPendingSubtotal2ToJSON(
  feePrepaymentsPendingSubtotal2: FeePrepaymentsPendingSubtotal2,
): string {
  return JSON.stringify(
    FeePrepaymentsPendingSubtotal2$outboundSchema.parse(
      feePrepaymentsPendingSubtotal2,
    ),
  );
}

export function feePrepaymentsPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<FeePrepaymentsPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeePrepaymentsPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepaymentsPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsPending$inboundSchema: z.ZodType<
  FeePrepaymentsPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => FeePrepaymentsPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => FeePrepaymentsPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type FeePrepaymentsPending$Outbound = {
  amount?: FeePrepaymentsPendingAmount$Outbound | undefined;
  subtotals?: Array<FeePrepaymentsPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const FeePrepaymentsPending$outboundSchema: z.ZodType<
  FeePrepaymentsPending$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsPending
> = z.object({
  amount: z.lazy(() => FeePrepaymentsPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => FeePrepaymentsPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsPending$ {
  /** @deprecated use `FeePrepaymentsPending$inboundSchema` instead. */
  export const inboundSchema = FeePrepaymentsPending$inboundSchema;
  /** @deprecated use `FeePrepaymentsPending$outboundSchema` instead. */
  export const outboundSchema = FeePrepaymentsPending$outboundSchema;
  /** @deprecated use `FeePrepaymentsPending$Outbound` instead. */
  export type Outbound = FeePrepaymentsPending$Outbound;
}

export function feePrepaymentsPendingToJSON(
  feePrepaymentsPending: FeePrepaymentsPending,
): string {
  return JSON.stringify(
    FeePrepaymentsPending$outboundSchema.parse(feePrepaymentsPending),
  );
}

export function feePrepaymentsPendingFromJSON(
  jsonString: string,
): SafeParseResult<FeePrepaymentsPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeePrepaymentsPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepaymentsPending' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsMovedToAvailableAmount$inboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type FeePrepaymentsMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const FeePrepaymentsMovedToAvailableAmount$outboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableAmount$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = FeePrepaymentsMovedToAvailableAmount$Outbound;
}

export function feePrepaymentsMovedToAvailableAmountToJSON(
  feePrepaymentsMovedToAvailableAmount: FeePrepaymentsMovedToAvailableAmount,
): string {
  return JSON.stringify(
    FeePrepaymentsMovedToAvailableAmount$outboundSchema.parse(
      feePrepaymentsMovedToAvailableAmount,
    ),
  );
}

export function feePrepaymentsMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<FeePrepaymentsMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FeePrepaymentsMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepaymentsMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalMethod1> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubTotalMethod1);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalMethod1> =
    FeePrepaymentsMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalCardIssuer1> =
    FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalCardAudience1> =
    z.nativeEnum(FeePrepaymentsMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalCardAudience1> =
    FeePrepaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalCardRegion1> =
    FeePrepaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubTotalFeeType1);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubTotalFeeType1> =
    FeePrepaymentsMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1
  > = FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubTotalTransactionType1
  > = z.nativeEnum(FeePrepaymentsMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubTotalTransactionType1
  > = FeePrepaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalMethod1$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalFeeType1$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type FeePrepaymentsMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const FeePrepaymentsMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalMethod1$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubTotal1$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = FeePrepaymentsMovedToAvailableSubTotal1$Outbound;
}

export function feePrepaymentsMovedToAvailableSubTotal1ToJSON(
  feePrepaymentsMovedToAvailableSubTotal1:
    FeePrepaymentsMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    FeePrepaymentsMovedToAvailableSubTotal1$outboundSchema.parse(
      feePrepaymentsMovedToAvailableSubTotal1,
    ),
  );
}

export function feePrepaymentsMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<
  FeePrepaymentsMovedToAvailableSubTotal1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FeePrepaymentsMovedToAvailableSubTotal1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FeePrepaymentsMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalMethod2> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubtotalMethod2);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalMethod2> =
    FeePrepaymentsMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalCardIssuer2> =
    FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalCardAudience2> =
    z.nativeEnum(FeePrepaymentsMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalCardAudience2> =
    FeePrepaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalCardRegion2> =
    FeePrepaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(FeePrepaymentsMovedToAvailableSubtotalFeeType2);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsMovedToAvailableSubtotalFeeType2> =
    FeePrepaymentsMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2
  > = FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubtotalTransactionType2
  > = z.nativeEnum(FeePrepaymentsMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsMovedToAvailableSubtotalTransactionType2
  > = FeePrepaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(
      z.lazy(() => FeePrepaymentsMovedToAvailableSubTotal1$inboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalMethod2$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalFeeType2$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type FeePrepaymentsMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<FeePrepaymentsMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const FeePrepaymentsMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(
      z.lazy(() => FeePrepaymentsMovedToAvailableSubTotal1$outboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalMethod2$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    FeePrepaymentsMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailableSubtotal2$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = FeePrepaymentsMovedToAvailableSubtotal2$Outbound;
}

export function feePrepaymentsMovedToAvailableSubtotal2ToJSON(
  feePrepaymentsMovedToAvailableSubtotal2:
    FeePrepaymentsMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    FeePrepaymentsMovedToAvailableSubtotal2$outboundSchema.parse(
      feePrepaymentsMovedToAvailableSubtotal2,
    ),
  );
}

export function feePrepaymentsMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<
  FeePrepaymentsMovedToAvailableSubtotal2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FeePrepaymentsMovedToAvailableSubtotal2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FeePrepaymentsMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsMovedToAvailable$inboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => FeePrepaymentsMovedToAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => FeePrepaymentsMovedToAvailableSubtotal2$inboundSchema),
    ),
  ).optional(),
});

/** @internal */
export type FeePrepaymentsMovedToAvailable$Outbound = {
  amount?: FeePrepaymentsMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<FeePrepaymentsMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const FeePrepaymentsMovedToAvailable$outboundSchema: z.ZodType<
  FeePrepaymentsMovedToAvailable$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsMovedToAvailable
> = z.object({
  amount: z.lazy(() => FeePrepaymentsMovedToAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => FeePrepaymentsMovedToAvailableSubtotal2$outboundSchema),
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsMovedToAvailable$ {
  /** @deprecated use `FeePrepaymentsMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = FeePrepaymentsMovedToAvailable$inboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = FeePrepaymentsMovedToAvailable$outboundSchema;
  /** @deprecated use `FeePrepaymentsMovedToAvailable$Outbound` instead. */
  export type Outbound = FeePrepaymentsMovedToAvailable$Outbound;
}

export function feePrepaymentsMovedToAvailableToJSON(
  feePrepaymentsMovedToAvailable: FeePrepaymentsMovedToAvailable,
): string {
  return JSON.stringify(
    FeePrepaymentsMovedToAvailable$outboundSchema.parse(
      feePrepaymentsMovedToAvailable,
    ),
  );
}

export function feePrepaymentsMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<FeePrepaymentsMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeePrepaymentsMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepaymentsMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  FeePrepaymentsImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type FeePrepaymentsImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const FeePrepaymentsImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  FeePrepaymentsImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableAmount$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = FeePrepaymentsImmediatelyAvailableAmount$Outbound;
}

export function feePrepaymentsImmediatelyAvailableAmountToJSON(
  feePrepaymentsImmediatelyAvailableAmount:
    FeePrepaymentsImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    FeePrepaymentsImmediatelyAvailableAmount$outboundSchema.parse(
      feePrepaymentsImmediatelyAvailableAmount,
    ),
  );
}

export function feePrepaymentsImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  FeePrepaymentsImmediatelyAvailableAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FeePrepaymentsImmediatelyAvailableAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FeePrepaymentsImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(FeePrepaymentsImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubTotalMethod1> =
    FeePrepaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1
  > = FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1
  > = FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1
  > = FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(FeePrepaymentsImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubTotalFeeType1> =
    FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(
    FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1,
  );

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1
  > =
    FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1
  > = FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotal1$inboundSchema:
  z.ZodType<
    FeePrepaymentsImmediatelyAvailableSubTotal1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    method: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalMethod1$inboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
    ).optional(),
    feeType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$inboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
    ).optional(),
    transactionType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
    ).optional(),
  });

/** @internal */
export type FeePrepaymentsImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubTotal1$outboundSchema:
  z.ZodType<
    FeePrepaymentsImmediatelyAvailableSubTotal1$Outbound,
    z.ZodTypeDef,
    FeePrepaymentsImmediatelyAvailableSubTotal1
  > = z.object({
    count: z.number().int().optional(),
    method: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalMethod1$outboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
    ).optional(),
    feeType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalFeeType1$outboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
    ).optional(),
    transactionType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = FeePrepaymentsImmediatelyAvailableSubTotal1$Outbound;
}

export function feePrepaymentsImmediatelyAvailableSubTotal1ToJSON(
  feePrepaymentsImmediatelyAvailableSubTotal1:
    FeePrepaymentsImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    FeePrepaymentsImmediatelyAvailableSubTotal1$outboundSchema.parse(
      feePrepaymentsImmediatelyAvailableSubTotal1,
    ),
  );
}

export function feePrepaymentsImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<
  FeePrepaymentsImmediatelyAvailableSubTotal1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FeePrepaymentsImmediatelyAvailableSubTotal1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FeePrepaymentsImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(FeePrepaymentsImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubtotalMethod2> =
    FeePrepaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2
  > = FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2
  > = FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2
  > = FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(FeePrepaymentsImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof FeePrepaymentsImmediatelyAvailableSubtotalFeeType2> =
    FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(
    FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2,
  );

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2
  > =
    FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2
  > = z.nativeEnum(FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<
    typeof FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2
  > = FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotal2$inboundSchema:
  z.ZodType<
    FeePrepaymentsImmediatelyAvailableSubtotal2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "sub-totals": z.nullable(
      z.array(z.lazy(() =>
        FeePrepaymentsImmediatelyAvailableSubTotal1$inboundSchema
      )),
    ).optional(),
    count: z.number().int().optional(),
    method: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalMethod2$inboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
    ).optional(),
    feeType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$inboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
    ).optional(),
    transactionType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "sub-totals": "subTotals",
    });
  });

/** @internal */
export type FeePrepaymentsImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<FeePrepaymentsImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const FeePrepaymentsImmediatelyAvailableSubtotal2$outboundSchema:
  z.ZodType<
    FeePrepaymentsImmediatelyAvailableSubtotal2$Outbound,
    z.ZodTypeDef,
    FeePrepaymentsImmediatelyAvailableSubtotal2
  > = z.object({
    subTotals: z.nullable(
      z.array(z.lazy(() =>
        FeePrepaymentsImmediatelyAvailableSubTotal1$outboundSchema
      )),
    ).optional(),
    count: z.number().int().optional(),
    method: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalMethod2$outboundSchema,
    ).optional(),
    cardIssuer: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
    ).optional(),
    cardAudience: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
    ).optional(),
    cardRegion: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
    ).optional(),
    feeType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalFeeType2$outboundSchema,
    ).optional(),
    prepaymentPartType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
    ).optional(),
    transactionType: z.nullable(
      FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      subTotals: "sub-totals",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = FeePrepaymentsImmediatelyAvailableSubtotal2$Outbound;
}

export function feePrepaymentsImmediatelyAvailableSubtotal2ToJSON(
  feePrepaymentsImmediatelyAvailableSubtotal2:
    FeePrepaymentsImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    FeePrepaymentsImmediatelyAvailableSubtotal2$outboundSchema.parse(
      feePrepaymentsImmediatelyAvailableSubtotal2,
    ),
  );
}

export function feePrepaymentsImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<
  FeePrepaymentsImmediatelyAvailableSubtotal2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FeePrepaymentsImmediatelyAvailableSubtotal2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FeePrepaymentsImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const FeePrepaymentsImmediatelyAvailable$inboundSchema: z.ZodType<
  FeePrepaymentsImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => FeePrepaymentsImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() =>
      FeePrepaymentsImmediatelyAvailableSubtotal2$inboundSchema
    )),
  ).optional(),
});

/** @internal */
export type FeePrepaymentsImmediatelyAvailable$Outbound = {
  amount?: FeePrepaymentsImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<FeePrepaymentsImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const FeePrepaymentsImmediatelyAvailable$outboundSchema: z.ZodType<
  FeePrepaymentsImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  FeePrepaymentsImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => FeePrepaymentsImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() =>
      FeePrepaymentsImmediatelyAvailableSubtotal2$outboundSchema
    )),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepaymentsImmediatelyAvailable$ {
  /** @deprecated use `FeePrepaymentsImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = FeePrepaymentsImmediatelyAvailable$inboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema =
    FeePrepaymentsImmediatelyAvailable$outboundSchema;
  /** @deprecated use `FeePrepaymentsImmediatelyAvailable$Outbound` instead. */
  export type Outbound = FeePrepaymentsImmediatelyAvailable$Outbound;
}

export function feePrepaymentsImmediatelyAvailableToJSON(
  feePrepaymentsImmediatelyAvailable: FeePrepaymentsImmediatelyAvailable,
): string {
  return JSON.stringify(
    FeePrepaymentsImmediatelyAvailable$outboundSchema.parse(
      feePrepaymentsImmediatelyAvailable,
    ),
  );
}

export function feePrepaymentsImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<FeePrepaymentsImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FeePrepaymentsImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepaymentsImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const FeePrepayments$inboundSchema: z.ZodType<
  FeePrepayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  pending: z.lazy(() => FeePrepaymentsPending$inboundSchema).optional(),
  movedToAvailable: z.lazy(() => FeePrepaymentsMovedToAvailable$inboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    FeePrepaymentsImmediatelyAvailable$inboundSchema
  ).optional(),
});

/** @internal */
export type FeePrepayments$Outbound = {
  pending?: FeePrepaymentsPending$Outbound | undefined;
  movedToAvailable?: FeePrepaymentsMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?:
    | FeePrepaymentsImmediatelyAvailable$Outbound
    | undefined;
};

/** @internal */
export const FeePrepayments$outboundSchema: z.ZodType<
  FeePrepayments$Outbound,
  z.ZodTypeDef,
  FeePrepayments
> = z.object({
  pending: z.lazy(() => FeePrepaymentsPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => FeePrepaymentsMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    FeePrepaymentsImmediatelyAvailable$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeePrepayments$ {
  /** @deprecated use `FeePrepayments$inboundSchema` instead. */
  export const inboundSchema = FeePrepayments$inboundSchema;
  /** @deprecated use `FeePrepayments$outboundSchema` instead. */
  export const outboundSchema = FeePrepayments$outboundSchema;
  /** @deprecated use `FeePrepayments$Outbound` instead. */
  export type Outbound = FeePrepayments$Outbound;
}

export function feePrepaymentsToJSON(feePrepayments: FeePrepayments): string {
  return JSON.stringify(FeePrepayments$outboundSchema.parse(feePrepayments));
}

export function feePrepaymentsFromJSON(
  jsonString: string,
): SafeParseResult<FeePrepayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeePrepayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeePrepayments' from JSON`,
  );
}

/** @internal */
export const CorrectionsPendingAmount$inboundSchema: z.ZodType<
  CorrectionsPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CorrectionsPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CorrectionsPendingAmount$outboundSchema: z.ZodType<
  CorrectionsPendingAmount$Outbound,
  z.ZodTypeDef,
  CorrectionsPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingAmount$ {
  /** @deprecated use `CorrectionsPendingAmount$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPendingAmount$inboundSchema;
  /** @deprecated use `CorrectionsPendingAmount$outboundSchema` instead. */
  export const outboundSchema = CorrectionsPendingAmount$outboundSchema;
  /** @deprecated use `CorrectionsPendingAmount$Outbound` instead. */
  export type Outbound = CorrectionsPendingAmount$Outbound;
}

export function correctionsPendingAmountToJSON(
  correctionsPendingAmount: CorrectionsPendingAmount,
): string {
  return JSON.stringify(
    CorrectionsPendingAmount$outboundSchema.parse(correctionsPendingAmount),
  );
}

export function correctionsPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectionsPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsPendingAmount' from JSON`,
  );
}

/** @internal */
export const CorrectionsPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubTotalMethod1
> = z.nativeEnum(CorrectionsPendingSubTotalMethod1);

/** @internal */
export const CorrectionsPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubTotalMethod1
> = CorrectionsPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotalMethod1$ {
  /** @deprecated use `CorrectionsPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalCardIssuer1> = z.nativeEnum(
    CorrectionsPendingSubTotalCardIssuer1,
  );

/** @internal */
export const CorrectionsPendingSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalCardIssuer1> =
    CorrectionsPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotalCardIssuer1$ {
  /** @deprecated use `CorrectionsPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalCardAudience1> = z
    .nativeEnum(CorrectionsPendingSubTotalCardAudience1);

/** @internal */
export const CorrectionsPendingSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalCardAudience1> =
    CorrectionsPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotalCardAudience1$ {
  /** @deprecated use `CorrectionsPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalCardRegion1> = z.nativeEnum(
    CorrectionsPendingSubTotalCardRegion1,
  );

/** @internal */
export const CorrectionsPendingSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalCardRegion1> =
    CorrectionsPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotalCardRegion1$ {
  /** @deprecated use `CorrectionsPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubTotalFeeType1
> = z.nativeEnum(CorrectionsPendingSubTotalFeeType1);

/** @internal */
export const CorrectionsPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubTotalFeeType1
> = CorrectionsPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotalFeeType1$ {
  /** @deprecated use `CorrectionsPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(CorrectionsPendingSubTotalPrepaymentPartType1);

/** @internal */
export const CorrectionsPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalPrepaymentPartType1> =
    CorrectionsPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `CorrectionsPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalTransactionType1> = z
    .nativeEnum(CorrectionsPendingSubTotalTransactionType1);

/** @internal */
export const CorrectionsPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubTotalTransactionType1> =
    CorrectionsPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotalTransactionType1$ {
  /** @deprecated use `CorrectionsPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubTotal1$inboundSchema: z.ZodType<
  CorrectionsPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsPendingSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(CorrectionsPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    CorrectionsPendingSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(CorrectionsPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(CorrectionsPendingSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CorrectionsPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type CorrectionsPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CorrectionsPendingSubTotal1$outboundSchema: z.ZodType<
  CorrectionsPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  CorrectionsPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsPendingSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(CorrectionsPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    CorrectionsPendingSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(CorrectionsPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(CorrectionsPendingSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CorrectionsPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubTotal1$ {
  /** @deprecated use `CorrectionsPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPendingSubTotal1$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = CorrectionsPendingSubTotal1$outboundSchema;
  /** @deprecated use `CorrectionsPendingSubTotal1$Outbound` instead. */
  export type Outbound = CorrectionsPendingSubTotal1$Outbound;
}

export function correctionsPendingSubTotal1ToJSON(
  correctionsPendingSubTotal1: CorrectionsPendingSubTotal1,
): string {
  return JSON.stringify(
    CorrectionsPendingSubTotal1$outboundSchema.parse(
      correctionsPendingSubTotal1,
    ),
  );
}

export function correctionsPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectionsPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const CorrectionsPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubtotalMethod2
> = z.nativeEnum(CorrectionsPendingSubtotalMethod2);

/** @internal */
export const CorrectionsPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubtotalMethod2
> = CorrectionsPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotalMethod2$ {
  /** @deprecated use `CorrectionsPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalCardIssuer2> = z.nativeEnum(
    CorrectionsPendingSubtotalCardIssuer2,
  );

/** @internal */
export const CorrectionsPendingSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalCardIssuer2> =
    CorrectionsPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotalCardIssuer2$ {
  /** @deprecated use `CorrectionsPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalCardAudience2> = z
    .nativeEnum(CorrectionsPendingSubtotalCardAudience2);

/** @internal */
export const CorrectionsPendingSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalCardAudience2> =
    CorrectionsPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotalCardAudience2$ {
  /** @deprecated use `CorrectionsPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalCardRegion2> = z.nativeEnum(
    CorrectionsPendingSubtotalCardRegion2,
  );

/** @internal */
export const CorrectionsPendingSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalCardRegion2> =
    CorrectionsPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotalCardRegion2$ {
  /** @deprecated use `CorrectionsPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubtotalFeeType2
> = z.nativeEnum(CorrectionsPendingSubtotalFeeType2);

/** @internal */
export const CorrectionsPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof CorrectionsPendingSubtotalFeeType2
> = CorrectionsPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotalFeeType2$ {
  /** @deprecated use `CorrectionsPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(CorrectionsPendingSubtotalPrepaymentPartType2);

/** @internal */
export const CorrectionsPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalPrepaymentPartType2> =
    CorrectionsPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `CorrectionsPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalTransactionType2> = z
    .nativeEnum(CorrectionsPendingSubtotalTransactionType2);

/** @internal */
export const CorrectionsPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsPendingSubtotalTransactionType2> =
    CorrectionsPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotalTransactionType2$ {
  /** @deprecated use `CorrectionsPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const CorrectionsPendingSubtotal2$inboundSchema: z.ZodType<
  CorrectionsPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => CorrectionsPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsPendingSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(CorrectionsPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(
    CorrectionsPendingSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(CorrectionsPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(CorrectionsPendingSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CorrectionsPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type CorrectionsPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<CorrectionsPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CorrectionsPendingSubtotal2$outboundSchema: z.ZodType<
  CorrectionsPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  CorrectionsPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => CorrectionsPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsPendingSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(CorrectionsPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(
    CorrectionsPendingSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(CorrectionsPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(CorrectionsPendingSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CorrectionsPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPendingSubtotal2$ {
  /** @deprecated use `CorrectionsPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPendingSubtotal2$inboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = CorrectionsPendingSubtotal2$outboundSchema;
  /** @deprecated use `CorrectionsPendingSubtotal2$Outbound` instead. */
  export type Outbound = CorrectionsPendingSubtotal2$Outbound;
}

export function correctionsPendingSubtotal2ToJSON(
  correctionsPendingSubtotal2: CorrectionsPendingSubtotal2,
): string {
  return JSON.stringify(
    CorrectionsPendingSubtotal2$outboundSchema.parse(
      correctionsPendingSubtotal2,
    ),
  );
}

export function correctionsPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectionsPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const CorrectionsPending$inboundSchema: z.ZodType<
  CorrectionsPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CorrectionsPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CorrectionsPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type CorrectionsPending$Outbound = {
  amount?: CorrectionsPendingAmount$Outbound | undefined;
  subtotals?: Array<CorrectionsPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const CorrectionsPending$outboundSchema: z.ZodType<
  CorrectionsPending$Outbound,
  z.ZodTypeDef,
  CorrectionsPending
> = z.object({
  amount: z.lazy(() => CorrectionsPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CorrectionsPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsPending$ {
  /** @deprecated use `CorrectionsPending$inboundSchema` instead. */
  export const inboundSchema = CorrectionsPending$inboundSchema;
  /** @deprecated use `CorrectionsPending$outboundSchema` instead. */
  export const outboundSchema = CorrectionsPending$outboundSchema;
  /** @deprecated use `CorrectionsPending$Outbound` instead. */
  export type Outbound = CorrectionsPending$Outbound;
}

export function correctionsPendingToJSON(
  correctionsPending: CorrectionsPending,
): string {
  return JSON.stringify(
    CorrectionsPending$outboundSchema.parse(correctionsPending),
  );
}

export function correctionsPendingFromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectionsPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsPending' from JSON`,
  );
}

/** @internal */
export const CorrectionsMovedToAvailableAmount$inboundSchema: z.ZodType<
  CorrectionsMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CorrectionsMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CorrectionsMovedToAvailableAmount$outboundSchema: z.ZodType<
  CorrectionsMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  CorrectionsMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableAmount$ {
  /** @deprecated use `CorrectionsMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = CorrectionsMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = CorrectionsMovedToAvailableAmount$Outbound;
}

export function correctionsMovedToAvailableAmountToJSON(
  correctionsMovedToAvailableAmount: CorrectionsMovedToAvailableAmount,
): string {
  return JSON.stringify(
    CorrectionsMovedToAvailableAmount$outboundSchema.parse(
      correctionsMovedToAvailableAmount,
    ),
  );
}

export function correctionsMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectionsMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalMethod1> = z
    .nativeEnum(CorrectionsMovedToAvailableSubTotalMethod1);

/** @internal */
export const CorrectionsMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalMethod1> =
    CorrectionsMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(CorrectionsMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const CorrectionsMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalCardIssuer1> =
    CorrectionsMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalCardAudience1> = z
    .nativeEnum(CorrectionsMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const CorrectionsMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalCardAudience1> =
    CorrectionsMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(CorrectionsMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const CorrectionsMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalCardRegion1> =
    CorrectionsMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalFeeType1> = z
    .nativeEnum(CorrectionsMovedToAvailableSubTotalFeeType1);

/** @internal */
export const CorrectionsMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalFeeType1> =
    CorrectionsMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsMovedToAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(CorrectionsMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsMovedToAvailableSubTotalPrepaymentPartType1
  > = CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalTransactionType1> =
    z.nativeEnum(CorrectionsMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const CorrectionsMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubTotalTransactionType1> =
    CorrectionsMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  CorrectionsMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsMovedToAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CorrectionsMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(CorrectionsMovedToAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type CorrectionsMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CorrectionsMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  CorrectionsMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  CorrectionsMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsMovedToAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CorrectionsMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    CorrectionsMovedToAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CorrectionsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubTotal1$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = CorrectionsMovedToAvailableSubTotal1$Outbound;
}

export function correctionsMovedToAvailableSubTotal1ToJSON(
  correctionsMovedToAvailableSubTotal1: CorrectionsMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    CorrectionsMovedToAvailableSubTotal1$outboundSchema.parse(
      correctionsMovedToAvailableSubTotal1,
    ),
  );
}

export function correctionsMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsMovedToAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CorrectionsMovedToAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalMethod2> = z
    .nativeEnum(CorrectionsMovedToAvailableSubtotalMethod2);

/** @internal */
export const CorrectionsMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalMethod2> =
    CorrectionsMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(CorrectionsMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const CorrectionsMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalCardIssuer2> =
    CorrectionsMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalCardAudience2> = z
    .nativeEnum(CorrectionsMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const CorrectionsMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalCardAudience2> =
    CorrectionsMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(CorrectionsMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const CorrectionsMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalCardRegion2> =
    CorrectionsMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalFeeType2> = z
    .nativeEnum(CorrectionsMovedToAvailableSubtotalFeeType2);

/** @internal */
export const CorrectionsMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalFeeType2> =
    CorrectionsMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsMovedToAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(CorrectionsMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsMovedToAvailableSubtotalPrepaymentPartType2
  > = CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalTransactionType2> =
    z.nativeEnum(CorrectionsMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const CorrectionsMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsMovedToAvailableSubtotalTransactionType2> =
    CorrectionsMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const CorrectionsMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  CorrectionsMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => CorrectionsMovedToAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsMovedToAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CorrectionsMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(CorrectionsMovedToAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type CorrectionsMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<CorrectionsMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CorrectionsMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  CorrectionsMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  CorrectionsMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => CorrectionsMovedToAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(CorrectionsMovedToAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    CorrectionsMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    CorrectionsMovedToAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CorrectionsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailableSubtotal2$ {
  /** @deprecated use `CorrectionsMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = CorrectionsMovedToAvailableSubtotal2$Outbound;
}

export function correctionsMovedToAvailableSubtotal2ToJSON(
  correctionsMovedToAvailableSubtotal2: CorrectionsMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    CorrectionsMovedToAvailableSubtotal2$outboundSchema.parse(
      correctionsMovedToAvailableSubtotal2,
    ),
  );
}

export function correctionsMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsMovedToAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CorrectionsMovedToAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const CorrectionsMovedToAvailable$inboundSchema: z.ZodType<
  CorrectionsMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CorrectionsMovedToAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CorrectionsMovedToAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type CorrectionsMovedToAvailable$Outbound = {
  amount?: CorrectionsMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<CorrectionsMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CorrectionsMovedToAvailable$outboundSchema: z.ZodType<
  CorrectionsMovedToAvailable$Outbound,
  z.ZodTypeDef,
  CorrectionsMovedToAvailable
> = z.object({
  amount: z.lazy(() => CorrectionsMovedToAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => CorrectionsMovedToAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsMovedToAvailable$ {
  /** @deprecated use `CorrectionsMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = CorrectionsMovedToAvailable$inboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = CorrectionsMovedToAvailable$outboundSchema;
  /** @deprecated use `CorrectionsMovedToAvailable$Outbound` instead. */
  export type Outbound = CorrectionsMovedToAvailable$Outbound;
}

export function correctionsMovedToAvailableToJSON(
  correctionsMovedToAvailable: CorrectionsMovedToAvailable,
): string {
  return JSON.stringify(
    CorrectionsMovedToAvailable$outboundSchema.parse(
      correctionsMovedToAvailable,
    ),
  );
}

export function correctionsMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectionsMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const CorrectionsImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CorrectionsImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CorrectionsImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  CorrectionsImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableAmount$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = CorrectionsImmediatelyAvailableAmount$Outbound;
}

export function correctionsImmediatelyAvailableAmountToJSON(
  correctionsImmediatelyAvailableAmount: CorrectionsImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    CorrectionsImmediatelyAvailableAmount$outboundSchema.parse(
      correctionsImmediatelyAvailableAmount,
    ),
  );
}

export function correctionsImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsImmediatelyAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CorrectionsImmediatelyAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalMethod1> =
    CorrectionsImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalCardIssuer1> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalCardIssuer1> =
    CorrectionsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalCardAudience1> =
    z.nativeEnum(CorrectionsImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalCardAudience1> =
    CorrectionsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalCardRegion1> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalCardRegion1> =
    CorrectionsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubTotalFeeType1> =
    CorrectionsImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubTotalTransactionType1
  > = z.nativeEnum(CorrectionsImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubTotalTransactionType1
  > = CorrectionsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotal1$inboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalMethod1$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalFeeType1$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type CorrectionsImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CorrectionsImmediatelyAvailableSubTotal1$outboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  CorrectionsImmediatelyAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalMethod1$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalFeeType1$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = CorrectionsImmediatelyAvailableSubTotal1$Outbound;
}

export function correctionsImmediatelyAvailableSubTotal1ToJSON(
  correctionsImmediatelyAvailableSubTotal1:
    CorrectionsImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    CorrectionsImmediatelyAvailableSubTotal1$outboundSchema.parse(
      correctionsImmediatelyAvailableSubTotal1,
    ),
  );
}

export function correctionsImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<
  CorrectionsImmediatelyAvailableSubTotal1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CorrectionsImmediatelyAvailableSubTotal1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CorrectionsImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalMethod2> =
    CorrectionsImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalCardIssuer2> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalCardIssuer2> =
    CorrectionsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalCardAudience2> =
    z.nativeEnum(CorrectionsImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalCardAudience2> =
    CorrectionsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalCardRegion2> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalCardRegion2> =
    CorrectionsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(CorrectionsImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof CorrectionsImmediatelyAvailableSubtotalFeeType2> =
    CorrectionsImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubtotalTransactionType2
  > = z.nativeEnum(CorrectionsImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<
    typeof CorrectionsImmediatelyAvailableSubtotalTransactionType2
  > = CorrectionsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotal2$inboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(
      z.lazy(() => CorrectionsImmediatelyAvailableSubTotal1$inboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalMethod2$inboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalFeeType2$inboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type CorrectionsImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<CorrectionsImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const CorrectionsImmediatelyAvailableSubtotal2$outboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  CorrectionsImmediatelyAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(
      z.lazy(() => CorrectionsImmediatelyAvailableSubTotal1$outboundSchema),
    ),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalMethod2$outboundSchema,
  ).optional(),
  cardIssuer: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalFeeType2$outboundSchema,
  ).optional(),
  prepaymentPartType: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    CorrectionsImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    CorrectionsImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    CorrectionsImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = CorrectionsImmediatelyAvailableSubtotal2$Outbound;
}

export function correctionsImmediatelyAvailableSubtotal2ToJSON(
  correctionsImmediatelyAvailableSubtotal2:
    CorrectionsImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    CorrectionsImmediatelyAvailableSubtotal2$outboundSchema.parse(
      correctionsImmediatelyAvailableSubtotal2,
    ),
  );
}

export function correctionsImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<
  CorrectionsImmediatelyAvailableSubtotal2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CorrectionsImmediatelyAvailableSubtotal2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CorrectionsImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const CorrectionsImmediatelyAvailable$inboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CorrectionsImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => CorrectionsImmediatelyAvailableSubtotal2$inboundSchema),
    ),
  ).optional(),
});

/** @internal */
export type CorrectionsImmediatelyAvailable$Outbound = {
  amount?: CorrectionsImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<CorrectionsImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CorrectionsImmediatelyAvailable$outboundSchema: z.ZodType<
  CorrectionsImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  CorrectionsImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => CorrectionsImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(
      z.lazy(() => CorrectionsImmediatelyAvailableSubtotal2$outboundSchema),
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CorrectionsImmediatelyAvailable$ {
  /** @deprecated use `CorrectionsImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = CorrectionsImmediatelyAvailable$inboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema = CorrectionsImmediatelyAvailable$outboundSchema;
  /** @deprecated use `CorrectionsImmediatelyAvailable$Outbound` instead. */
  export type Outbound = CorrectionsImmediatelyAvailable$Outbound;
}

export function correctionsImmediatelyAvailableToJSON(
  correctionsImmediatelyAvailable: CorrectionsImmediatelyAvailable,
): string {
  return JSON.stringify(
    CorrectionsImmediatelyAvailable$outboundSchema.parse(
      correctionsImmediatelyAvailable,
    ),
  );
}

export function correctionsImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<CorrectionsImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CorrectionsImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CorrectionsImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const Corrections$inboundSchema: z.ZodType<
  Corrections,
  z.ZodTypeDef,
  unknown
> = z.object({
  pending: z.lazy(() => CorrectionsPending$inboundSchema).optional(),
  movedToAvailable: z.lazy(() => CorrectionsMovedToAvailable$inboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    CorrectionsImmediatelyAvailable$inboundSchema
  ).optional(),
});

/** @internal */
export type Corrections$Outbound = {
  pending?: CorrectionsPending$Outbound | undefined;
  movedToAvailable?: CorrectionsMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?: CorrectionsImmediatelyAvailable$Outbound | undefined;
};

/** @internal */
export const Corrections$outboundSchema: z.ZodType<
  Corrections$Outbound,
  z.ZodTypeDef,
  Corrections
> = z.object({
  pending: z.lazy(() => CorrectionsPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => CorrectionsMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() =>
    CorrectionsImmediatelyAvailable$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Corrections$ {
  /** @deprecated use `Corrections$inboundSchema` instead. */
  export const inboundSchema = Corrections$inboundSchema;
  /** @deprecated use `Corrections$outboundSchema` instead. */
  export const outboundSchema = Corrections$outboundSchema;
  /** @deprecated use `Corrections$Outbound` instead. */
  export type Outbound = Corrections$Outbound;
}

export function correctionsToJSON(corrections: Corrections): string {
  return JSON.stringify(Corrections$outboundSchema.parse(corrections));
}

export function correctionsFromJSON(
  jsonString: string,
): SafeParseResult<Corrections, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Corrections$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Corrections' from JSON`,
  );
}

/** @internal */
export const TopupsPendingAmount$inboundSchema: z.ZodType<
  TopupsPendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type TopupsPendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const TopupsPendingAmount$outboundSchema: z.ZodType<
  TopupsPendingAmount$Outbound,
  z.ZodTypeDef,
  TopupsPendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingAmount$ {
  /** @deprecated use `TopupsPendingAmount$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingAmount$inboundSchema;
  /** @deprecated use `TopupsPendingAmount$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingAmount$outboundSchema;
  /** @deprecated use `TopupsPendingAmount$Outbound` instead. */
  export type Outbound = TopupsPendingAmount$Outbound;
}

export function topupsPendingAmountToJSON(
  topupsPendingAmount: TopupsPendingAmount,
): string {
  return JSON.stringify(
    TopupsPendingAmount$outboundSchema.parse(topupsPendingAmount),
  );
}

export function topupsPendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<TopupsPendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsPendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsPendingAmount' from JSON`,
  );
}

/** @internal */
export const TopupsPendingSubTotalMethod1$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalMethod1
> = z.nativeEnum(TopupsPendingSubTotalMethod1);

/** @internal */
export const TopupsPendingSubTotalMethod1$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalMethod1
> = TopupsPendingSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotalMethod1$ {
  /** @deprecated use `TopupsPendingSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubTotalMethod1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubTotalMethod1$outboundSchema;
}

/** @internal */
export const TopupsPendingSubTotalCardIssuer1$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalCardIssuer1
> = z.nativeEnum(TopupsPendingSubTotalCardIssuer1);

/** @internal */
export const TopupsPendingSubTotalCardIssuer1$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalCardIssuer1
> = TopupsPendingSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotalCardIssuer1$ {
  /** @deprecated use `TopupsPendingSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const TopupsPendingSubTotalCardAudience1$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalCardAudience1
> = z.nativeEnum(TopupsPendingSubTotalCardAudience1);

/** @internal */
export const TopupsPendingSubTotalCardAudience1$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalCardAudience1
> = TopupsPendingSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotalCardAudience1$ {
  /** @deprecated use `TopupsPendingSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsPendingSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const TopupsPendingSubTotalCardRegion1$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalCardRegion1
> = z.nativeEnum(TopupsPendingSubTotalCardRegion1);

/** @internal */
export const TopupsPendingSubTotalCardRegion1$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalCardRegion1
> = TopupsPendingSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotalCardRegion1$ {
  /** @deprecated use `TopupsPendingSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const TopupsPendingSubTotalFeeType1$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalFeeType1
> = z.nativeEnum(TopupsPendingSubTotalFeeType1);

/** @internal */
export const TopupsPendingSubTotalFeeType1$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubTotalFeeType1
> = TopupsPendingSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotalFeeType1$ {
  /** @deprecated use `TopupsPendingSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubTotalFeeType1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const TopupsPendingSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubTotalPrepaymentPartType1> = z
    .nativeEnum(TopupsPendingSubTotalPrepaymentPartType1);

/** @internal */
export const TopupsPendingSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubTotalPrepaymentPartType1> =
    TopupsPendingSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotalPrepaymentPartType1$ {
  /** @deprecated use `TopupsPendingSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsPendingSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsPendingSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const TopupsPendingSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubTotalTransactionType1> = z.nativeEnum(
    TopupsPendingSubTotalTransactionType1,
  );

/** @internal */
export const TopupsPendingSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubTotalTransactionType1> =
    TopupsPendingSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotalTransactionType1$ {
  /** @deprecated use `TopupsPendingSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsPendingSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsPendingSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const TopupsPendingSubTotal1$inboundSchema: z.ZodType<
  TopupsPendingSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TopupsPendingSubTotalMethod1$inboundSchema).optional(),
  cardIssuer: z.nullable(TopupsPendingSubTotalCardIssuer1$inboundSchema)
    .optional(),
  cardAudience: z.nullable(TopupsPendingSubTotalCardAudience1$inboundSchema)
    .optional(),
  cardRegion: z.nullable(TopupsPendingSubTotalCardRegion1$inboundSchema)
    .optional(),
  feeType: z.nullable(TopupsPendingSubTotalFeeType1$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    TopupsPendingSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsPendingSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type TopupsPendingSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TopupsPendingSubTotal1$outboundSchema: z.ZodType<
  TopupsPendingSubTotal1$Outbound,
  z.ZodTypeDef,
  TopupsPendingSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TopupsPendingSubTotalMethod1$outboundSchema).optional(),
  cardIssuer: z.nullable(TopupsPendingSubTotalCardIssuer1$outboundSchema)
    .optional(),
  cardAudience: z.nullable(TopupsPendingSubTotalCardAudience1$outboundSchema)
    .optional(),
  cardRegion: z.nullable(TopupsPendingSubTotalCardRegion1$outboundSchema)
    .optional(),
  feeType: z.nullable(TopupsPendingSubTotalFeeType1$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    TopupsPendingSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsPendingSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubTotal1$ {
  /** @deprecated use `TopupsPendingSubTotal1$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubTotal1$inboundSchema;
  /** @deprecated use `TopupsPendingSubTotal1$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubTotal1$outboundSchema;
  /** @deprecated use `TopupsPendingSubTotal1$Outbound` instead. */
  export type Outbound = TopupsPendingSubTotal1$Outbound;
}

export function topupsPendingSubTotal1ToJSON(
  topupsPendingSubTotal1: TopupsPendingSubTotal1,
): string {
  return JSON.stringify(
    TopupsPendingSubTotal1$outboundSchema.parse(topupsPendingSubTotal1),
  );
}

export function topupsPendingSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<TopupsPendingSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsPendingSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsPendingSubTotal1' from JSON`,
  );
}

/** @internal */
export const TopupsPendingSubtotalMethod2$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalMethod2
> = z.nativeEnum(TopupsPendingSubtotalMethod2);

/** @internal */
export const TopupsPendingSubtotalMethod2$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalMethod2
> = TopupsPendingSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotalMethod2$ {
  /** @deprecated use `TopupsPendingSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubtotalMethod2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubtotalMethod2$outboundSchema;
}

/** @internal */
export const TopupsPendingSubtotalCardIssuer2$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalCardIssuer2
> = z.nativeEnum(TopupsPendingSubtotalCardIssuer2);

/** @internal */
export const TopupsPendingSubtotalCardIssuer2$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalCardIssuer2
> = TopupsPendingSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotalCardIssuer2$ {
  /** @deprecated use `TopupsPendingSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const TopupsPendingSubtotalCardAudience2$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalCardAudience2
> = z.nativeEnum(TopupsPendingSubtotalCardAudience2);

/** @internal */
export const TopupsPendingSubtotalCardAudience2$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalCardAudience2
> = TopupsPendingSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotalCardAudience2$ {
  /** @deprecated use `TopupsPendingSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsPendingSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const TopupsPendingSubtotalCardRegion2$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalCardRegion2
> = z.nativeEnum(TopupsPendingSubtotalCardRegion2);

/** @internal */
export const TopupsPendingSubtotalCardRegion2$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalCardRegion2
> = TopupsPendingSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotalCardRegion2$ {
  /** @deprecated use `TopupsPendingSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const TopupsPendingSubtotalFeeType2$inboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalFeeType2
> = z.nativeEnum(TopupsPendingSubtotalFeeType2);

/** @internal */
export const TopupsPendingSubtotalFeeType2$outboundSchema: z.ZodNativeEnum<
  typeof TopupsPendingSubtotalFeeType2
> = TopupsPendingSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotalFeeType2$ {
  /** @deprecated use `TopupsPendingSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubtotalFeeType2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const TopupsPendingSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubtotalPrepaymentPartType2> = z
    .nativeEnum(TopupsPendingSubtotalPrepaymentPartType2);

/** @internal */
export const TopupsPendingSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubtotalPrepaymentPartType2> =
    TopupsPendingSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotalPrepaymentPartType2$ {
  /** @deprecated use `TopupsPendingSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsPendingSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsPendingSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const TopupsPendingSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubtotalTransactionType2> = z.nativeEnum(
    TopupsPendingSubtotalTransactionType2,
  );

/** @internal */
export const TopupsPendingSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsPendingSubtotalTransactionType2> =
    TopupsPendingSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotalTransactionType2$ {
  /** @deprecated use `TopupsPendingSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsPendingSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsPendingSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const TopupsPendingSubtotal2$inboundSchema: z.ZodType<
  TopupsPendingSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => TopupsPendingSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TopupsPendingSubtotalMethod2$inboundSchema).optional(),
  cardIssuer: z.nullable(TopupsPendingSubtotalCardIssuer2$inboundSchema)
    .optional(),
  cardAudience: z.nullable(TopupsPendingSubtotalCardAudience2$inboundSchema)
    .optional(),
  cardRegion: z.nullable(TopupsPendingSubtotalCardRegion2$inboundSchema)
    .optional(),
  feeType: z.nullable(TopupsPendingSubtotalFeeType2$inboundSchema).optional(),
  prepaymentPartType: z.nullable(
    TopupsPendingSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsPendingSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type TopupsPendingSubtotal2$Outbound = {
  "sub-totals"?: Array<TopupsPendingSubTotal1$Outbound> | null | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TopupsPendingSubtotal2$outboundSchema: z.ZodType<
  TopupsPendingSubtotal2$Outbound,
  z.ZodTypeDef,
  TopupsPendingSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => TopupsPendingSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TopupsPendingSubtotalMethod2$outboundSchema).optional(),
  cardIssuer: z.nullable(TopupsPendingSubtotalCardIssuer2$outboundSchema)
    .optional(),
  cardAudience: z.nullable(TopupsPendingSubtotalCardAudience2$outboundSchema)
    .optional(),
  cardRegion: z.nullable(TopupsPendingSubtotalCardRegion2$outboundSchema)
    .optional(),
  feeType: z.nullable(TopupsPendingSubtotalFeeType2$outboundSchema).optional(),
  prepaymentPartType: z.nullable(
    TopupsPendingSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsPendingSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPendingSubtotal2$ {
  /** @deprecated use `TopupsPendingSubtotal2$inboundSchema` instead. */
  export const inboundSchema = TopupsPendingSubtotal2$inboundSchema;
  /** @deprecated use `TopupsPendingSubtotal2$outboundSchema` instead. */
  export const outboundSchema = TopupsPendingSubtotal2$outboundSchema;
  /** @deprecated use `TopupsPendingSubtotal2$Outbound` instead. */
  export type Outbound = TopupsPendingSubtotal2$Outbound;
}

export function topupsPendingSubtotal2ToJSON(
  topupsPendingSubtotal2: TopupsPendingSubtotal2,
): string {
  return JSON.stringify(
    TopupsPendingSubtotal2$outboundSchema.parse(topupsPendingSubtotal2),
  );
}

export function topupsPendingSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<TopupsPendingSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsPendingSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsPendingSubtotal2' from JSON`,
  );
}

/** @internal */
export const TopupsPending$inboundSchema: z.ZodType<
  TopupsPending,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => TopupsPendingAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TopupsPendingSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type TopupsPending$Outbound = {
  amount?: TopupsPendingAmount$Outbound | undefined;
  subtotals?: Array<TopupsPendingSubtotal2$Outbound> | null | undefined;
};

/** @internal */
export const TopupsPending$outboundSchema: z.ZodType<
  TopupsPending$Outbound,
  z.ZodTypeDef,
  TopupsPending
> = z.object({
  amount: z.lazy(() => TopupsPendingAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TopupsPendingSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsPending$ {
  /** @deprecated use `TopupsPending$inboundSchema` instead. */
  export const inboundSchema = TopupsPending$inboundSchema;
  /** @deprecated use `TopupsPending$outboundSchema` instead. */
  export const outboundSchema = TopupsPending$outboundSchema;
  /** @deprecated use `TopupsPending$Outbound` instead. */
  export type Outbound = TopupsPending$Outbound;
}

export function topupsPendingToJSON(topupsPending: TopupsPending): string {
  return JSON.stringify(TopupsPending$outboundSchema.parse(topupsPending));
}

export function topupsPendingFromJSON(
  jsonString: string,
): SafeParseResult<TopupsPending, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsPending$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsPending' from JSON`,
  );
}

/** @internal */
export const TopupsMovedToAvailableAmount$inboundSchema: z.ZodType<
  TopupsMovedToAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type TopupsMovedToAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const TopupsMovedToAvailableAmount$outboundSchema: z.ZodType<
  TopupsMovedToAvailableAmount$Outbound,
  z.ZodTypeDef,
  TopupsMovedToAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableAmount$ {
  /** @deprecated use `TopupsMovedToAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = TopupsMovedToAvailableAmount$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = TopupsMovedToAvailableAmount$outboundSchema;
  /** @deprecated use `TopupsMovedToAvailableAmount$Outbound` instead. */
  export type Outbound = TopupsMovedToAvailableAmount$Outbound;
}

export function topupsMovedToAvailableAmountToJSON(
  topupsMovedToAvailableAmount: TopupsMovedToAvailableAmount,
): string {
  return JSON.stringify(
    TopupsMovedToAvailableAmount$outboundSchema.parse(
      topupsMovedToAvailableAmount,
    ),
  );
}

export function topupsMovedToAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<TopupsMovedToAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsMovedToAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsMovedToAvailableAmount' from JSON`,
  );
}

/** @internal */
export const TopupsMovedToAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalMethod1> = z.nativeEnum(
    TopupsMovedToAvailableSubTotalMethod1,
  );

/** @internal */
export const TopupsMovedToAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalMethod1> =
    TopupsMovedToAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotalMethod1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalCardIssuer1> = z
    .nativeEnum(TopupsMovedToAvailableSubTotalCardIssuer1);

/** @internal */
export const TopupsMovedToAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalCardIssuer1> =
    TopupsMovedToAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalCardAudience1> = z
    .nativeEnum(TopupsMovedToAvailableSubTotalCardAudience1);

/** @internal */
export const TopupsMovedToAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalCardAudience1> =
    TopupsMovedToAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotalCardAudience1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalCardRegion1> = z
    .nativeEnum(TopupsMovedToAvailableSubTotalCardRegion1);

/** @internal */
export const TopupsMovedToAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalCardRegion1> =
    TopupsMovedToAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotalCardRegion1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalFeeType1> = z.nativeEnum(
    TopupsMovedToAvailableSubTotalFeeType1,
  );

/** @internal */
export const TopupsMovedToAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalFeeType1> =
    TopupsMovedToAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotalFeeType1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalPrepaymentPartType1> = z
    .nativeEnum(TopupsMovedToAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const TopupsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalPrepaymentPartType1> =
    TopupsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalTransactionType1> = z
    .nativeEnum(TopupsMovedToAvailableSubTotalTransactionType1);

/** @internal */
export const TopupsMovedToAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubTotalTransactionType1> =
    TopupsMovedToAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotalTransactionType1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubTotal1$inboundSchema: z.ZodType<
  TopupsMovedToAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TopupsMovedToAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsMovedToAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsMovedToAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsMovedToAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsMovedToAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsMovedToAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsMovedToAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type TopupsMovedToAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TopupsMovedToAvailableSubTotal1$outboundSchema: z.ZodType<
  TopupsMovedToAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  TopupsMovedToAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TopupsMovedToAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsMovedToAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsMovedToAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsMovedToAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsMovedToAvailableSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsMovedToAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsMovedToAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubTotal1$ {
  /** @deprecated use `TopupsMovedToAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema = TopupsMovedToAvailableSubTotal1$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema = TopupsMovedToAvailableSubTotal1$outboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubTotal1$Outbound` instead. */
  export type Outbound = TopupsMovedToAvailableSubTotal1$Outbound;
}

export function topupsMovedToAvailableSubTotal1ToJSON(
  topupsMovedToAvailableSubTotal1: TopupsMovedToAvailableSubTotal1,
): string {
  return JSON.stringify(
    TopupsMovedToAvailableSubTotal1$outboundSchema.parse(
      topupsMovedToAvailableSubTotal1,
    ),
  );
}

export function topupsMovedToAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<TopupsMovedToAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsMovedToAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsMovedToAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const TopupsMovedToAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalMethod2> = z.nativeEnum(
    TopupsMovedToAvailableSubtotalMethod2,
  );

/** @internal */
export const TopupsMovedToAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalMethod2> =
    TopupsMovedToAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotalMethod2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalCardIssuer2> = z
    .nativeEnum(TopupsMovedToAvailableSubtotalCardIssuer2);

/** @internal */
export const TopupsMovedToAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalCardIssuer2> =
    TopupsMovedToAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalCardAudience2> = z
    .nativeEnum(TopupsMovedToAvailableSubtotalCardAudience2);

/** @internal */
export const TopupsMovedToAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalCardAudience2> =
    TopupsMovedToAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotalCardAudience2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalCardRegion2> = z
    .nativeEnum(TopupsMovedToAvailableSubtotalCardRegion2);

/** @internal */
export const TopupsMovedToAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalCardRegion2> =
    TopupsMovedToAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotalCardRegion2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalFeeType2> = z.nativeEnum(
    TopupsMovedToAvailableSubtotalFeeType2,
  );

/** @internal */
export const TopupsMovedToAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalFeeType2> =
    TopupsMovedToAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotalFeeType2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalPrepaymentPartType2> = z
    .nativeEnum(TopupsMovedToAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const TopupsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalPrepaymentPartType2> =
    TopupsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalTransactionType2> = z
    .nativeEnum(TopupsMovedToAvailableSubtotalTransactionType2);

/** @internal */
export const TopupsMovedToAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsMovedToAvailableSubtotalTransactionType2> =
    TopupsMovedToAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotalTransactionType2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsMovedToAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsMovedToAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const TopupsMovedToAvailableSubtotal2$inboundSchema: z.ZodType<
  TopupsMovedToAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => TopupsMovedToAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TopupsMovedToAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsMovedToAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsMovedToAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsMovedToAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsMovedToAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsMovedToAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsMovedToAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type TopupsMovedToAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<TopupsMovedToAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TopupsMovedToAvailableSubtotal2$outboundSchema: z.ZodType<
  TopupsMovedToAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  TopupsMovedToAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => TopupsMovedToAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TopupsMovedToAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsMovedToAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsMovedToAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsMovedToAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsMovedToAvailableSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsMovedToAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsMovedToAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailableSubtotal2$ {
  /** @deprecated use `TopupsMovedToAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema = TopupsMovedToAvailableSubtotal2$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema = TopupsMovedToAvailableSubtotal2$outboundSchema;
  /** @deprecated use `TopupsMovedToAvailableSubtotal2$Outbound` instead. */
  export type Outbound = TopupsMovedToAvailableSubtotal2$Outbound;
}

export function topupsMovedToAvailableSubtotal2ToJSON(
  topupsMovedToAvailableSubtotal2: TopupsMovedToAvailableSubtotal2,
): string {
  return JSON.stringify(
    TopupsMovedToAvailableSubtotal2$outboundSchema.parse(
      topupsMovedToAvailableSubtotal2,
    ),
  );
}

export function topupsMovedToAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<TopupsMovedToAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsMovedToAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsMovedToAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const TopupsMovedToAvailable$inboundSchema: z.ZodType<
  TopupsMovedToAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => TopupsMovedToAvailableAmount$inboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TopupsMovedToAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type TopupsMovedToAvailable$Outbound = {
  amount?: TopupsMovedToAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<TopupsMovedToAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const TopupsMovedToAvailable$outboundSchema: z.ZodType<
  TopupsMovedToAvailable$Outbound,
  z.ZodTypeDef,
  TopupsMovedToAvailable
> = z.object({
  amount: z.lazy(() => TopupsMovedToAvailableAmount$outboundSchema).optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TopupsMovedToAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsMovedToAvailable$ {
  /** @deprecated use `TopupsMovedToAvailable$inboundSchema` instead. */
  export const inboundSchema = TopupsMovedToAvailable$inboundSchema;
  /** @deprecated use `TopupsMovedToAvailable$outboundSchema` instead. */
  export const outboundSchema = TopupsMovedToAvailable$outboundSchema;
  /** @deprecated use `TopupsMovedToAvailable$Outbound` instead. */
  export type Outbound = TopupsMovedToAvailable$Outbound;
}

export function topupsMovedToAvailableToJSON(
  topupsMovedToAvailable: TopupsMovedToAvailable,
): string {
  return JSON.stringify(
    TopupsMovedToAvailable$outboundSchema.parse(topupsMovedToAvailable),
  );
}

export function topupsMovedToAvailableFromJSON(
  jsonString: string,
): SafeParseResult<TopupsMovedToAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsMovedToAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsMovedToAvailable' from JSON`,
  );
}

/** @internal */
export const TopupsImmediatelyAvailableAmount$inboundSchema: z.ZodType<
  TopupsImmediatelyAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type TopupsImmediatelyAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const TopupsImmediatelyAvailableAmount$outboundSchema: z.ZodType<
  TopupsImmediatelyAvailableAmount$Outbound,
  z.ZodTypeDef,
  TopupsImmediatelyAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableAmount$ {
  /** @deprecated use `TopupsImmediatelyAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = TopupsImmediatelyAvailableAmount$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = TopupsImmediatelyAvailableAmount$outboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableAmount$Outbound` instead. */
  export type Outbound = TopupsImmediatelyAvailableAmount$Outbound;
}

export function topupsImmediatelyAvailableAmountToJSON(
  topupsImmediatelyAvailableAmount: TopupsImmediatelyAvailableAmount,
): string {
  return JSON.stringify(
    TopupsImmediatelyAvailableAmount$outboundSchema.parse(
      topupsImmediatelyAvailableAmount,
    ),
  );
}

export function topupsImmediatelyAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<TopupsImmediatelyAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsImmediatelyAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsImmediatelyAvailableAmount' from JSON`,
  );
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotalMethod1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalMethod1> = z
    .nativeEnum(TopupsImmediatelyAvailableSubTotalMethod1);

/** @internal */
export const TopupsImmediatelyAvailableSubTotalMethod1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalMethod1> =
    TopupsImmediatelyAvailableSubTotalMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotalMethod1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalMethod1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotalMethod1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalMethod1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotalMethod1$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalCardIssuer1> = z
    .nativeEnum(TopupsImmediatelyAvailableSubTotalCardIssuer1);

/** @internal */
export const TopupsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalCardIssuer1> =
    TopupsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotalCardIssuer1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotalCardAudience1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalCardAudience1> = z
    .nativeEnum(TopupsImmediatelyAvailableSubTotalCardAudience1);

/** @internal */
export const TopupsImmediatelyAvailableSubTotalCardAudience1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalCardAudience1> =
    TopupsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotalCardAudience1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalCardAudience1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotalCardAudience1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalCardAudience1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotalCardAudience1$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotalCardRegion1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalCardRegion1> = z
    .nativeEnum(TopupsImmediatelyAvailableSubTotalCardRegion1);

/** @internal */
export const TopupsImmediatelyAvailableSubTotalCardRegion1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalCardRegion1> =
    TopupsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotalCardRegion1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalCardRegion1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotalCardRegion1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalCardRegion1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotalCardRegion1$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotalFeeType1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalFeeType1> = z
    .nativeEnum(TopupsImmediatelyAvailableSubTotalFeeType1);

/** @internal */
export const TopupsImmediatelyAvailableSubTotalFeeType1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalFeeType1> =
    TopupsImmediatelyAvailableSubTotalFeeType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotalFeeType1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalFeeType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotalFeeType1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalFeeType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotalFeeType1$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema:
  z.ZodNativeEnum<
    typeof TopupsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = z.nativeEnum(TopupsImmediatelyAvailableSubTotalPrepaymentPartType1);

/** @internal */
export const TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema:
  z.ZodNativeEnum<
    typeof TopupsImmediatelyAvailableSubTotalPrepaymentPartType1
  > = TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotalTransactionType1$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalTransactionType1> = z
    .nativeEnum(TopupsImmediatelyAvailableSubTotalTransactionType1);

/** @internal */
export const TopupsImmediatelyAvailableSubTotalTransactionType1$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubTotalTransactionType1> =
    TopupsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotalTransactionType1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalTransactionType1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotalTransactionType1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotalTransactionType1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotalTransactionType1$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubTotal1$inboundSchema: z.ZodType<
  TopupsImmediatelyAvailableSubTotal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TopupsImmediatelyAvailableSubTotalMethod1$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsImmediatelyAvailableSubTotalCardIssuer1$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsImmediatelyAvailableSubTotalCardAudience1$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsImmediatelyAvailableSubTotalCardRegion1$inboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsImmediatelyAvailableSubTotalFeeType1$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsImmediatelyAvailableSubTotalTransactionType1$inboundSchema,
  ).optional(),
});

/** @internal */
export type TopupsImmediatelyAvailableSubTotal1$Outbound = {
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TopupsImmediatelyAvailableSubTotal1$outboundSchema: z.ZodType<
  TopupsImmediatelyAvailableSubTotal1$Outbound,
  z.ZodTypeDef,
  TopupsImmediatelyAvailableSubTotal1
> = z.object({
  count: z.number().int().optional(),
  method: z.nullable(TopupsImmediatelyAvailableSubTotalMethod1$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsImmediatelyAvailableSubTotalCardIssuer1$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsImmediatelyAvailableSubTotalCardAudience1$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsImmediatelyAvailableSubTotalCardRegion1$outboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsImmediatelyAvailableSubTotalFeeType1$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsImmediatelyAvailableSubTotalPrepaymentPartType1$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsImmediatelyAvailableSubTotalTransactionType1$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubTotal1$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubTotal1$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubTotal1$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotal1$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubTotal1$outboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubTotal1$Outbound` instead. */
  export type Outbound = TopupsImmediatelyAvailableSubTotal1$Outbound;
}

export function topupsImmediatelyAvailableSubTotal1ToJSON(
  topupsImmediatelyAvailableSubTotal1: TopupsImmediatelyAvailableSubTotal1,
): string {
  return JSON.stringify(
    TopupsImmediatelyAvailableSubTotal1$outboundSchema.parse(
      topupsImmediatelyAvailableSubTotal1,
    ),
  );
}

export function topupsImmediatelyAvailableSubTotal1FromJSON(
  jsonString: string,
): SafeParseResult<TopupsImmediatelyAvailableSubTotal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopupsImmediatelyAvailableSubTotal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsImmediatelyAvailableSubTotal1' from JSON`,
  );
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotalMethod2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalMethod2> = z
    .nativeEnum(TopupsImmediatelyAvailableSubtotalMethod2);

/** @internal */
export const TopupsImmediatelyAvailableSubtotalMethod2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalMethod2> =
    TopupsImmediatelyAvailableSubtotalMethod2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotalMethod2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalMethod2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotalMethod2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalMethod2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotalMethod2$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalCardIssuer2> = z
    .nativeEnum(TopupsImmediatelyAvailableSubtotalCardIssuer2);

/** @internal */
export const TopupsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalCardIssuer2> =
    TopupsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotalCardIssuer2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotalCardAudience2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalCardAudience2> = z
    .nativeEnum(TopupsImmediatelyAvailableSubtotalCardAudience2);

/** @internal */
export const TopupsImmediatelyAvailableSubtotalCardAudience2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalCardAudience2> =
    TopupsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotalCardAudience2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalCardAudience2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotalCardAudience2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalCardAudience2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotalCardAudience2$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotalCardRegion2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalCardRegion2> = z
    .nativeEnum(TopupsImmediatelyAvailableSubtotalCardRegion2);

/** @internal */
export const TopupsImmediatelyAvailableSubtotalCardRegion2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalCardRegion2> =
    TopupsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotalCardRegion2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalCardRegion2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotalCardRegion2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalCardRegion2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotalCardRegion2$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotalFeeType2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalFeeType2> = z
    .nativeEnum(TopupsImmediatelyAvailableSubtotalFeeType2);

/** @internal */
export const TopupsImmediatelyAvailableSubtotalFeeType2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalFeeType2> =
    TopupsImmediatelyAvailableSubtotalFeeType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotalFeeType2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalFeeType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotalFeeType2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalFeeType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotalFeeType2$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema:
  z.ZodNativeEnum<
    typeof TopupsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = z.nativeEnum(TopupsImmediatelyAvailableSubtotalPrepaymentPartType2);

/** @internal */
export const TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema:
  z.ZodNativeEnum<
    typeof TopupsImmediatelyAvailableSubtotalPrepaymentPartType2
  > = TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotalTransactionType2$inboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalTransactionType2> = z
    .nativeEnum(TopupsImmediatelyAvailableSubtotalTransactionType2);

/** @internal */
export const TopupsImmediatelyAvailableSubtotalTransactionType2$outboundSchema:
  z.ZodNativeEnum<typeof TopupsImmediatelyAvailableSubtotalTransactionType2> =
    TopupsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotalTransactionType2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalTransactionType2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotalTransactionType2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotalTransactionType2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotalTransactionType2$outboundSchema;
}

/** @internal */
export const TopupsImmediatelyAvailableSubtotal2$inboundSchema: z.ZodType<
  TopupsImmediatelyAvailableSubtotal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "sub-totals": z.nullable(
    z.array(z.lazy(() => TopupsImmediatelyAvailableSubTotal1$inboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TopupsImmediatelyAvailableSubtotalMethod2$inboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsImmediatelyAvailableSubtotalCardIssuer2$inboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsImmediatelyAvailableSubtotalCardAudience2$inboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsImmediatelyAvailableSubtotalCardRegion2$inboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsImmediatelyAvailableSubtotalFeeType2$inboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$inboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsImmediatelyAvailableSubtotalTransactionType2$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub-totals": "subTotals",
  });
});

/** @internal */
export type TopupsImmediatelyAvailableSubtotal2$Outbound = {
  "sub-totals"?:
    | Array<TopupsImmediatelyAvailableSubTotal1$Outbound>
    | null
    | undefined;
  count?: number | undefined;
  method?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  cardAudience?: string | null | undefined;
  cardRegion?: string | null | undefined;
  feeType?: string | null | undefined;
  prepaymentPartType?: string | null | undefined;
  transactionType?: string | null | undefined;
};

/** @internal */
export const TopupsImmediatelyAvailableSubtotal2$outboundSchema: z.ZodType<
  TopupsImmediatelyAvailableSubtotal2$Outbound,
  z.ZodTypeDef,
  TopupsImmediatelyAvailableSubtotal2
> = z.object({
  subTotals: z.nullable(
    z.array(z.lazy(() => TopupsImmediatelyAvailableSubTotal1$outboundSchema)),
  ).optional(),
  count: z.number().int().optional(),
  method: z.nullable(TopupsImmediatelyAvailableSubtotalMethod2$outboundSchema)
    .optional(),
  cardIssuer: z.nullable(
    TopupsImmediatelyAvailableSubtotalCardIssuer2$outboundSchema,
  ).optional(),
  cardAudience: z.nullable(
    TopupsImmediatelyAvailableSubtotalCardAudience2$outboundSchema,
  ).optional(),
  cardRegion: z.nullable(
    TopupsImmediatelyAvailableSubtotalCardRegion2$outboundSchema,
  ).optional(),
  feeType: z.nullable(TopupsImmediatelyAvailableSubtotalFeeType2$outboundSchema)
    .optional(),
  prepaymentPartType: z.nullable(
    TopupsImmediatelyAvailableSubtotalPrepaymentPartType2$outboundSchema,
  ).optional(),
  transactionType: z.nullable(
    TopupsImmediatelyAvailableSubtotalTransactionType2$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    subTotals: "sub-totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailableSubtotal2$ {
  /** @deprecated use `TopupsImmediatelyAvailableSubtotal2$inboundSchema` instead. */
  export const inboundSchema =
    TopupsImmediatelyAvailableSubtotal2$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotal2$outboundSchema` instead. */
  export const outboundSchema =
    TopupsImmediatelyAvailableSubtotal2$outboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailableSubtotal2$Outbound` instead. */
  export type Outbound = TopupsImmediatelyAvailableSubtotal2$Outbound;
}

export function topupsImmediatelyAvailableSubtotal2ToJSON(
  topupsImmediatelyAvailableSubtotal2: TopupsImmediatelyAvailableSubtotal2,
): string {
  return JSON.stringify(
    TopupsImmediatelyAvailableSubtotal2$outboundSchema.parse(
      topupsImmediatelyAvailableSubtotal2,
    ),
  );
}

export function topupsImmediatelyAvailableSubtotal2FromJSON(
  jsonString: string,
): SafeParseResult<TopupsImmediatelyAvailableSubtotal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopupsImmediatelyAvailableSubtotal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsImmediatelyAvailableSubtotal2' from JSON`,
  );
}

/** @internal */
export const TopupsImmediatelyAvailable$inboundSchema: z.ZodType<
  TopupsImmediatelyAvailable,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => TopupsImmediatelyAvailableAmount$inboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TopupsImmediatelyAvailableSubtotal2$inboundSchema)),
  ).optional(),
});

/** @internal */
export type TopupsImmediatelyAvailable$Outbound = {
  amount?: TopupsImmediatelyAvailableAmount$Outbound | undefined;
  subtotals?:
    | Array<TopupsImmediatelyAvailableSubtotal2$Outbound>
    | null
    | undefined;
};

/** @internal */
export const TopupsImmediatelyAvailable$outboundSchema: z.ZodType<
  TopupsImmediatelyAvailable$Outbound,
  z.ZodTypeDef,
  TopupsImmediatelyAvailable
> = z.object({
  amount: z.lazy(() => TopupsImmediatelyAvailableAmount$outboundSchema)
    .optional(),
  subtotals: z.nullable(
    z.array(z.lazy(() => TopupsImmediatelyAvailableSubtotal2$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopupsImmediatelyAvailable$ {
  /** @deprecated use `TopupsImmediatelyAvailable$inboundSchema` instead. */
  export const inboundSchema = TopupsImmediatelyAvailable$inboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailable$outboundSchema` instead. */
  export const outboundSchema = TopupsImmediatelyAvailable$outboundSchema;
  /** @deprecated use `TopupsImmediatelyAvailable$Outbound` instead. */
  export type Outbound = TopupsImmediatelyAvailable$Outbound;
}

export function topupsImmediatelyAvailableToJSON(
  topupsImmediatelyAvailable: TopupsImmediatelyAvailable,
): string {
  return JSON.stringify(
    TopupsImmediatelyAvailable$outboundSchema.parse(topupsImmediatelyAvailable),
  );
}

export function topupsImmediatelyAvailableFromJSON(
  jsonString: string,
): SafeParseResult<TopupsImmediatelyAvailable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopupsImmediatelyAvailable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopupsImmediatelyAvailable' from JSON`,
  );
}

/** @internal */
export const Topups$inboundSchema: z.ZodType<Topups, z.ZodTypeDef, unknown> = z
  .object({
    pending: z.lazy(() => TopupsPending$inboundSchema).optional(),
    movedToAvailable: z.lazy(() => TopupsMovedToAvailable$inboundSchema)
      .optional(),
    immediatelyAvailable: z.lazy(() => TopupsImmediatelyAvailable$inboundSchema)
      .optional(),
  });

/** @internal */
export type Topups$Outbound = {
  pending?: TopupsPending$Outbound | undefined;
  movedToAvailable?: TopupsMovedToAvailable$Outbound | undefined;
  immediatelyAvailable?: TopupsImmediatelyAvailable$Outbound | undefined;
};

/** @internal */
export const Topups$outboundSchema: z.ZodType<
  Topups$Outbound,
  z.ZodTypeDef,
  Topups
> = z.object({
  pending: z.lazy(() => TopupsPending$outboundSchema).optional(),
  movedToAvailable: z.lazy(() => TopupsMovedToAvailable$outboundSchema)
    .optional(),
  immediatelyAvailable: z.lazy(() => TopupsImmediatelyAvailable$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Topups$ {
  /** @deprecated use `Topups$inboundSchema` instead. */
  export const inboundSchema = Topups$inboundSchema;
  /** @deprecated use `Topups$outboundSchema` instead. */
  export const outboundSchema = Topups$outboundSchema;
  /** @deprecated use `Topups$Outbound` instead. */
  export type Outbound = Topups$Outbound;
}

export function topupsToJSON(topups: Topups): string {
  return JSON.stringify(Topups$outboundSchema.parse(topups));
}

export function topupsFromJSON(
  jsonString: string,
): SafeParseResult<Topups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Topups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Topups' from JSON`,
  );
}

/** @internal */
export const Totals$inboundSchema: z.ZodType<Totals, z.ZodTypeDef, unknown> = z
  .object({
    pendingBalance: z.nullable(z.lazy(() => PendingBalance$inboundSchema))
      .optional(),
    availableBalance: z.nullable(z.lazy(() => AvailableBalance$inboundSchema))
      .optional(),
    open: z.lazy(() => Open$inboundSchema).optional(),
    close: z.lazy(() => Close$inboundSchema).optional(),
    payments: z.lazy(() => GetBalanceReportPayments$inboundSchema).optional(),
    refunds: z.lazy(() => GetBalanceReportRefunds$inboundSchema).optional(),
    chargebacks: z.lazy(() => GetBalanceReportChargebacks$inboundSchema)
      .optional(),
    capital: z.lazy(() => Capital$inboundSchema).optional(),
    transfers: z.lazy(() => Transfers$inboundSchema).optional(),
    "fee-prepayments": z.lazy(() => FeePrepayments$inboundSchema).optional(),
    corrections: z.lazy(() => Corrections$inboundSchema).optional(),
    topups: z.lazy(() => Topups$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "fee-prepayments": "feePrepayments",
    });
  });

/** @internal */
export type Totals$Outbound = {
  pendingBalance?: PendingBalance$Outbound | null | undefined;
  availableBalance?: AvailableBalance$Outbound | null | undefined;
  open?: Open$Outbound | undefined;
  close?: Close$Outbound | undefined;
  payments?: GetBalanceReportPayments$Outbound | undefined;
  refunds?: GetBalanceReportRefunds$Outbound | undefined;
  chargebacks?: GetBalanceReportChargebacks$Outbound | undefined;
  capital?: Capital$Outbound | undefined;
  transfers?: Transfers$Outbound | undefined;
  "fee-prepayments"?: FeePrepayments$Outbound | undefined;
  corrections?: Corrections$Outbound | undefined;
  topups?: Topups$Outbound | undefined;
};

/** @internal */
export const Totals$outboundSchema: z.ZodType<
  Totals$Outbound,
  z.ZodTypeDef,
  Totals
> = z.object({
  pendingBalance: z.nullable(z.lazy(() => PendingBalance$outboundSchema))
    .optional(),
  availableBalance: z.nullable(z.lazy(() => AvailableBalance$outboundSchema))
    .optional(),
  open: z.lazy(() => Open$outboundSchema).optional(),
  close: z.lazy(() => Close$outboundSchema).optional(),
  payments: z.lazy(() => GetBalanceReportPayments$outboundSchema).optional(),
  refunds: z.lazy(() => GetBalanceReportRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetBalanceReportChargebacks$outboundSchema)
    .optional(),
  capital: z.lazy(() => Capital$outboundSchema).optional(),
  transfers: z.lazy(() => Transfers$outboundSchema).optional(),
  feePrepayments: z.lazy(() => FeePrepayments$outboundSchema).optional(),
  corrections: z.lazy(() => Corrections$outboundSchema).optional(),
  topups: z.lazy(() => Topups$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    feePrepayments: "fee-prepayments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Totals$ {
  /** @deprecated use `Totals$inboundSchema` instead. */
  export const inboundSchema = Totals$inboundSchema;
  /** @deprecated use `Totals$outboundSchema` instead. */
  export const outboundSchema = Totals$outboundSchema;
  /** @deprecated use `Totals$Outbound` instead. */
  export type Outbound = Totals$Outbound;
}

export function totalsToJSON(totals: Totals): string {
  return JSON.stringify(Totals$outboundSchema.parse(totals));
}

export function totalsFromJSON(
  jsonString: string,
): SafeParseResult<Totals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Totals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Totals' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportSelf$inboundSchema: z.ZodType<
  GetBalanceReportSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetBalanceReportSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetBalanceReportSelf$outboundSchema: z.ZodType<
  GetBalanceReportSelf$Outbound,
  z.ZodTypeDef,
  GetBalanceReportSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportSelf$ {
  /** @deprecated use `GetBalanceReportSelf$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportSelf$inboundSchema;
  /** @deprecated use `GetBalanceReportSelf$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportSelf$outboundSchema;
  /** @deprecated use `GetBalanceReportSelf$Outbound` instead. */
  export type Outbound = GetBalanceReportSelf$Outbound;
}

export function getBalanceReportSelfToJSON(
  getBalanceReportSelf: GetBalanceReportSelf,
): string {
  return JSON.stringify(
    GetBalanceReportSelf$outboundSchema.parse(getBalanceReportSelf),
  );
}

export function getBalanceReportSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportSelf' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportDocumentation$inboundSchema: z.ZodType<
  GetBalanceReportDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetBalanceReportDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetBalanceReportDocumentation$outboundSchema: z.ZodType<
  GetBalanceReportDocumentation$Outbound,
  z.ZodTypeDef,
  GetBalanceReportDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportDocumentation$ {
  /** @deprecated use `GetBalanceReportDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportDocumentation$inboundSchema;
  /** @deprecated use `GetBalanceReportDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportDocumentation$outboundSchema;
  /** @deprecated use `GetBalanceReportDocumentation$Outbound` instead. */
  export type Outbound = GetBalanceReportDocumentation$Outbound;
}

export function getBalanceReportDocumentationToJSON(
  getBalanceReportDocumentation: GetBalanceReportDocumentation,
): string {
  return JSON.stringify(
    GetBalanceReportDocumentation$outboundSchema.parse(
      getBalanceReportDocumentation,
    ),
  );
}

export function getBalanceReportDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportDocumentation' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportLinks$inboundSchema: z.ZodType<
  GetBalanceReportLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetBalanceReportSelf$inboundSchema).optional(),
  documentation: z.lazy(() => GetBalanceReportDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetBalanceReportLinks$Outbound = {
  self?: GetBalanceReportSelf$Outbound | undefined;
  documentation?: GetBalanceReportDocumentation$Outbound | undefined;
};

/** @internal */
export const GetBalanceReportLinks$outboundSchema: z.ZodType<
  GetBalanceReportLinks$Outbound,
  z.ZodTypeDef,
  GetBalanceReportLinks
> = z.object({
  self: z.lazy(() => GetBalanceReportSelf$outboundSchema).optional(),
  documentation: z.lazy(() => GetBalanceReportDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportLinks$ {
  /** @deprecated use `GetBalanceReportLinks$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportLinks$inboundSchema;
  /** @deprecated use `GetBalanceReportLinks$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportLinks$outboundSchema;
  /** @deprecated use `GetBalanceReportLinks$Outbound` instead. */
  export type Outbound = GetBalanceReportLinks$Outbound;
}

export function getBalanceReportLinksToJSON(
  getBalanceReportLinks: GetBalanceReportLinks,
): string {
  return JSON.stringify(
    GetBalanceReportLinks$outboundSchema.parse(getBalanceReportLinks),
  );
}

export function getBalanceReportLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportLinks' from JSON`,
  );
}

/** @internal */
export const GetBalanceReportResponse$inboundSchema: z.ZodType<
  GetBalanceReportResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  balanceId: z.string().optional(),
  timeZone: z.string().optional(),
  from: z.string().optional(),
  until: z.string().optional(),
  grouping: GroupingResponse$inboundSchema.optional(),
  totals: z.lazy(() => Totals$inboundSchema).optional(),
  _links: z.lazy(() => GetBalanceReportLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetBalanceReportResponse$Outbound = {
  resource?: string | undefined;
  balanceId?: string | undefined;
  timeZone?: string | undefined;
  from?: string | undefined;
  until?: string | undefined;
  grouping?: string | undefined;
  totals?: Totals$Outbound | undefined;
  _links?: GetBalanceReportLinks$Outbound | undefined;
};

/** @internal */
export const GetBalanceReportResponse$outboundSchema: z.ZodType<
  GetBalanceReportResponse$Outbound,
  z.ZodTypeDef,
  GetBalanceReportResponse
> = z.object({
  resource: z.string().optional(),
  balanceId: z.string().optional(),
  timeZone: z.string().optional(),
  from: z.string().optional(),
  until: z.string().optional(),
  grouping: GroupingResponse$outboundSchema.optional(),
  totals: z.lazy(() => Totals$outboundSchema).optional(),
  links: z.lazy(() => GetBalanceReportLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportResponse$ {
  /** @deprecated use `GetBalanceReportResponse$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportResponse$inboundSchema;
  /** @deprecated use `GetBalanceReportResponse$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportResponse$outboundSchema;
  /** @deprecated use `GetBalanceReportResponse$Outbound` instead. */
  export type Outbound = GetBalanceReportResponse$Outbound;
}

export function getBalanceReportResponseToJSON(
  getBalanceReportResponse: GetBalanceReportResponse,
): string {
  return JSON.stringify(
    GetBalanceReportResponse$outboundSchema.parse(getBalanceReportResponse),
  );
}

export function getBalanceReportResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportResponse' from JSON`,
  );
}
