/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetBalanceReportRequest = {
  /**
   * Provide the ID of the related balance.
   */
  balanceId: string;
  /**
   * The start date of the report, in `YYYY-MM-DD` format. The from date is
   *
   * @remarks
   * 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
   * include transactions from 2024-01-01 0:00:00 CET and onwards.
   */
  from: string;
  /**
   * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
   *
   * @remarks
   * This means a report with for example `until=2024-02-01` will include transactions up until
   * 2024-01-31 23:59:59 CET.
   */
  until: string;
  /**
   * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
   *
   * @remarks
   * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
   * available (e.g. payment method).
   *
   * With the `transaction-categories` format, transactions are grouped by
   * transaction type, then by status, and then again by other sub-groupings where available.
   */
  grouping?: models.BalanceReportGrouping | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const GetBalanceReportRequest$inboundSchema: z.ZodType<
  GetBalanceReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  balanceId: z.string(),
  from: z.string(),
  until: z.string(),
  grouping: models.BalanceReportGrouping$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetBalanceReportRequest$Outbound = {
  balanceId: string;
  from: string;
  until: string;
  grouping?: string | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetBalanceReportRequest$outboundSchema: z.ZodType<
  GetBalanceReportRequest$Outbound,
  z.ZodTypeDef,
  GetBalanceReportRequest
> = z.object({
  balanceId: z.string(),
  from: z.string(),
  until: z.string(),
  grouping: models.BalanceReportGrouping$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceReportRequest$ {
  /** @deprecated use `GetBalanceReportRequest$inboundSchema` instead. */
  export const inboundSchema = GetBalanceReportRequest$inboundSchema;
  /** @deprecated use `GetBalanceReportRequest$outboundSchema` instead. */
  export const outboundSchema = GetBalanceReportRequest$outboundSchema;
  /** @deprecated use `GetBalanceReportRequest$Outbound` instead. */
  export type Outbound = GetBalanceReportRequest$Outbound;
}

export function getBalanceReportRequestToJSON(
  getBalanceReportRequest: GetBalanceReportRequest,
): string {
  return JSON.stringify(
    GetBalanceReportRequest$outboundSchema.parse(getBalanceReportRequest),
  );
}

export function getBalanceReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceReportRequest' from JSON`,
  );
}
