/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListAllChargebacksRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.ListSort | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve chargebacks for.
   *
   * Most API credentials are linked to a single profile. In these cases the
   * `profileId` is already implied.
   *
   * To retrieve all chargebacks across the organization, use an
   * organization-level API credential and omit the `profileId` parameter.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type ListAllChargebacksEmbedded = {
  /**
   * A list of chargeback objects.
   */
  chargebacks?: Array<models.EntityChargeback> | undefined;
};

/**
 * A list of chargeback objects.
 */
export type ListAllChargebacksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListAllChargebacksEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: models.ListLinks | undefined;
};

/** @internal */
export const ListAllChargebacksRequest$inboundSchema: z.ZodType<
  ListAllChargebacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  sort: z.nullable(models.ListSort$inboundSchema).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListAllChargebacksRequest$Outbound = {
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | null | undefined;
  sort?: string | null | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListAllChargebacksRequest$outboundSchema: z.ZodType<
  ListAllChargebacksRequest$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  sort: z.nullable(models.ListSort$outboundSchema).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksRequest$ {
  /** @deprecated use `ListAllChargebacksRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksRequest$inboundSchema;
  /** @deprecated use `ListAllChargebacksRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksRequest$outboundSchema;
  /** @deprecated use `ListAllChargebacksRequest$Outbound` instead. */
  export type Outbound = ListAllChargebacksRequest$Outbound;
}

export function listAllChargebacksRequestToJSON(
  listAllChargebacksRequest: ListAllChargebacksRequest,
): string {
  return JSON.stringify(
    ListAllChargebacksRequest$outboundSchema.parse(listAllChargebacksRequest),
  );
}

export function listAllChargebacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksRequest' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksEmbedded$inboundSchema: z.ZodType<
  ListAllChargebacksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  chargebacks: z.array(models.EntityChargeback$inboundSchema).optional(),
});

/** @internal */
export type ListAllChargebacksEmbedded$Outbound = {
  chargebacks?: Array<models.EntityChargeback$Outbound> | undefined;
};

/** @internal */
export const ListAllChargebacksEmbedded$outboundSchema: z.ZodType<
  ListAllChargebacksEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksEmbedded
> = z.object({
  chargebacks: z.array(models.EntityChargeback$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksEmbedded$ {
  /** @deprecated use `ListAllChargebacksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksEmbedded$inboundSchema;
  /** @deprecated use `ListAllChargebacksEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksEmbedded$outboundSchema;
  /** @deprecated use `ListAllChargebacksEmbedded$Outbound` instead. */
  export type Outbound = ListAllChargebacksEmbedded$Outbound;
}

export function listAllChargebacksEmbeddedToJSON(
  listAllChargebacksEmbedded: ListAllChargebacksEmbedded,
): string {
  return JSON.stringify(
    ListAllChargebacksEmbedded$outboundSchema.parse(listAllChargebacksEmbedded),
  );
}

export function listAllChargebacksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksEmbedded' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksResponse$inboundSchema: z.ZodType<
  ListAllChargebacksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListAllChargebacksEmbedded$inboundSchema).optional(),
  _links: models.ListLinks$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllChargebacksResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListAllChargebacksEmbedded$Outbound | undefined;
  _links?: models.ListLinks$Outbound | undefined;
};

/** @internal */
export const ListAllChargebacksResponse$outboundSchema: z.ZodType<
  ListAllChargebacksResponse$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListAllChargebacksEmbedded$outboundSchema).optional(),
  links: models.ListLinks$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksResponse$ {
  /** @deprecated use `ListAllChargebacksResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksResponse$inboundSchema;
  /** @deprecated use `ListAllChargebacksResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksResponse$outboundSchema;
  /** @deprecated use `ListAllChargebacksResponse$Outbound` instead. */
  export type Outbound = ListAllChargebacksResponse$Outbound;
}

export function listAllChargebacksResponseToJSON(
  listAllChargebacksResponse: ListAllChargebacksResponse,
): string {
  return JSON.stringify(
    ListAllChargebacksResponse$outboundSchema.parse(listAllChargebacksResponse),
  );
}

export function listAllChargebacksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksResponse' from JSON`,
  );
}
