/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional information via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export const ListAllChargebacksEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional information via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export type ListAllChargebacksEmbed = ClosedEnum<
  typeof ListAllChargebacksEmbed
>;

/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export const ListAllChargebacksSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export type ListAllChargebacksSort = ClosedEnum<typeof ListAllChargebacksSort>;

export type ListAllChargebacksRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to embed additional information via the
   *
   * @remarks
   * `embed` query string parameter.
   */
  embed?: ListAllChargebacksEmbed | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: ListAllChargebacksSort | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve chargebacks for.
   *
   * Most API credentials are linked to a single profile. In these cases the
   * `profileId` is already implied.
   *
   * To retrieve all chargebacks across the organization, use an
   * organization-level API credential and omit the `profileId` parameter.
   */
  profileId?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListAllChargebacksNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListAllChargebacksNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListAllChargebacksNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListAllChargebacksBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListAllChargebacksBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListAllChargebacksBadRequestDocumentation;
};

/**
 * The amount charged back by the customer.
 */
export type ListAllChargebacksAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve
 * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
 * instead.
 */
export type ListAllChargebacksSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
 */
export type ListAllChargebacksReason = {
  /**
   * Technical code provided by the bank.
   */
  code: string;
  /**
   * A more detailed human-friendly description.
   */
  description: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllChargebacksChargebackSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
 */
export type ListAllChargebacksPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if
 *
 * @remarks
 * not yet settled.
 */
export type ListAllChargebacksSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllChargebacksChargebackDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListAllChargebacksChargebackLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListAllChargebacksChargebackSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
   */
  payment: ListAllChargebacksPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if
   *
   * @remarks
   * not yet settled.
   */
  settlement?: ListAllChargebacksSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListAllChargebacksChargebackDocumentation;
};

export type ListAllChargebacksChargeback = {
  /**
   * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
   */
  id: string;
  /**
   * The amount charged back by the customer.
   */
  amount: ListAllChargebacksAmount;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve
   * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
   * instead.
   */
  settlementAmount?: ListAllChargebacksSettlementAmount | null | undefined;
  /**
   * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
   */
  reason?: ListAllChargebacksReason | null | undefined;
  /**
   * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field
   *
   * @remarks
   * is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the chargeback was reversed if applicable, in
   *
   * @remarks
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  reversedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListAllChargebacksChargebackLinks;
};

export type ListAllChargebacksEmbedded = {
  /**
   * A list of chargeback objects.
   */
  chargebacks?: Array<ListAllChargebacksChargeback> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListAllChargebacksSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListAllChargebacksPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListAllChargebacksNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllChargebacksDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListAllChargebacksLinks = {
  /**
   * The URL to the current set of items.
   */
  self: ListAllChargebacksSelf;
  /**
   * The previous set of items, if available.
   */
  previous: ListAllChargebacksPrevious | null;
  /**
   * The next set of items, if available.
   */
  next: ListAllChargebacksNext | null;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListAllChargebacksDocumentation;
};

/**
 * A list of chargeback objects.
 */
export type ListAllChargebacksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListAllChargebacksEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListAllChargebacksLinks | undefined;
};

/** @internal */
export const ListAllChargebacksEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListAllChargebacksEmbed
> = z.nativeEnum(ListAllChargebacksEmbed);

/** @internal */
export const ListAllChargebacksEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListAllChargebacksEmbed
> = ListAllChargebacksEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksEmbed$ {
  /** @deprecated use `ListAllChargebacksEmbed$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksEmbed$inboundSchema;
  /** @deprecated use `ListAllChargebacksEmbed$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksEmbed$outboundSchema;
}

/** @internal */
export const ListAllChargebacksSort$inboundSchema: z.ZodNativeEnum<
  typeof ListAllChargebacksSort
> = z.nativeEnum(ListAllChargebacksSort);

/** @internal */
export const ListAllChargebacksSort$outboundSchema: z.ZodNativeEnum<
  typeof ListAllChargebacksSort
> = ListAllChargebacksSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksSort$ {
  /** @deprecated use `ListAllChargebacksSort$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksSort$inboundSchema;
  /** @deprecated use `ListAllChargebacksSort$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksSort$outboundSchema;
}

/** @internal */
export const ListAllChargebacksRequest$inboundSchema: z.ZodType<
  ListAllChargebacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: ListAllChargebacksEmbed$inboundSchema.optional(),
  sort: z.nullable(ListAllChargebacksSort$inboundSchema).optional(),
  profileId: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListAllChargebacksRequest$Outbound = {
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | undefined;
  sort?: string | null | undefined;
  profileId?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListAllChargebacksRequest$outboundSchema: z.ZodType<
  ListAllChargebacksRequest$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: ListAllChargebacksEmbed$outboundSchema.optional(),
  sort: z.nullable(ListAllChargebacksSort$outboundSchema).optional(),
  profileId: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksRequest$ {
  /** @deprecated use `ListAllChargebacksRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksRequest$inboundSchema;
  /** @deprecated use `ListAllChargebacksRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksRequest$outboundSchema;
  /** @deprecated use `ListAllChargebacksRequest$Outbound` instead. */
  export type Outbound = ListAllChargebacksRequest$Outbound;
}

export function listAllChargebacksRequestToJSON(
  listAllChargebacksRequest: ListAllChargebacksRequest,
): string {
  return JSON.stringify(
    ListAllChargebacksRequest$outboundSchema.parse(listAllChargebacksRequest),
  );
}

export function listAllChargebacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksRequest' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksNotFoundDocumentation$inboundSchema: z.ZodType<
  ListAllChargebacksNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllChargebacksNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllChargebacksNotFoundDocumentation$outboundSchema: z.ZodType<
  ListAllChargebacksNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksNotFoundDocumentation$ {
  /** @deprecated use `ListAllChargebacksNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListAllChargebacksNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListAllChargebacksNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllChargebacksNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListAllChargebacksNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListAllChargebacksNotFoundDocumentation$Outbound;
}

export function listAllChargebacksNotFoundDocumentationToJSON(
  listAllChargebacksNotFoundDocumentation:
    ListAllChargebacksNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListAllChargebacksNotFoundDocumentation$outboundSchema.parse(
      listAllChargebacksNotFoundDocumentation,
    ),
  );
}

export function listAllChargebacksNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAllChargebacksNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllChargebacksNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAllChargebacksNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksNotFoundLinks$inboundSchema: z.ZodType<
  ListAllChargebacksNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListAllChargebacksNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListAllChargebacksNotFoundLinks$Outbound = {
  documentation: ListAllChargebacksNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListAllChargebacksNotFoundLinks$outboundSchema: z.ZodType<
  ListAllChargebacksNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListAllChargebacksNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksNotFoundLinks$ {
  /** @deprecated use `ListAllChargebacksNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksNotFoundLinks$inboundSchema;
  /** @deprecated use `ListAllChargebacksNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksNotFoundLinks$outboundSchema;
  /** @deprecated use `ListAllChargebacksNotFoundLinks$Outbound` instead. */
  export type Outbound = ListAllChargebacksNotFoundLinks$Outbound;
}

export function listAllChargebacksNotFoundLinksToJSON(
  listAllChargebacksNotFoundLinks: ListAllChargebacksNotFoundLinks,
): string {
  return JSON.stringify(
    ListAllChargebacksNotFoundLinks$outboundSchema.parse(
      listAllChargebacksNotFoundLinks,
    ),
  );
}

export function listAllChargebacksNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksBadRequestDocumentation$inboundSchema: z.ZodType<
  ListAllChargebacksBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllChargebacksBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllChargebacksBadRequestDocumentation$outboundSchema:
  z.ZodType<
    ListAllChargebacksBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    ListAllChargebacksBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksBadRequestDocumentation$ {
  /** @deprecated use `ListAllChargebacksBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListAllChargebacksBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListAllChargebacksBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllChargebacksBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListAllChargebacksBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListAllChargebacksBadRequestDocumentation$Outbound;
}

export function listAllChargebacksBadRequestDocumentationToJSON(
  listAllChargebacksBadRequestDocumentation:
    ListAllChargebacksBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListAllChargebacksBadRequestDocumentation$outboundSchema.parse(
      listAllChargebacksBadRequestDocumentation,
    ),
  );
}

export function listAllChargebacksBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAllChargebacksBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllChargebacksBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAllChargebacksBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksBadRequestLinks$inboundSchema: z.ZodType<
  ListAllChargebacksBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListAllChargebacksBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListAllChargebacksBadRequestLinks$Outbound = {
  documentation: ListAllChargebacksBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListAllChargebacksBadRequestLinks$outboundSchema: z.ZodType<
  ListAllChargebacksBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListAllChargebacksBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksBadRequestLinks$ {
  /** @deprecated use `ListAllChargebacksBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksBadRequestLinks$inboundSchema;
  /** @deprecated use `ListAllChargebacksBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListAllChargebacksBadRequestLinks$outboundSchema;
  /** @deprecated use `ListAllChargebacksBadRequestLinks$Outbound` instead. */
  export type Outbound = ListAllChargebacksBadRequestLinks$Outbound;
}

export function listAllChargebacksBadRequestLinksToJSON(
  listAllChargebacksBadRequestLinks: ListAllChargebacksBadRequestLinks,
): string {
  return JSON.stringify(
    ListAllChargebacksBadRequestLinks$outboundSchema.parse(
      listAllChargebacksBadRequestLinks,
    ),
  );
}

export function listAllChargebacksBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksAmount$inboundSchema: z.ZodType<
  ListAllChargebacksAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllChargebacksAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllChargebacksAmount$outboundSchema: z.ZodType<
  ListAllChargebacksAmount$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksAmount$ {
  /** @deprecated use `ListAllChargebacksAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksAmount$inboundSchema;
  /** @deprecated use `ListAllChargebacksAmount$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksAmount$outboundSchema;
  /** @deprecated use `ListAllChargebacksAmount$Outbound` instead. */
  export type Outbound = ListAllChargebacksAmount$Outbound;
}

export function listAllChargebacksAmountToJSON(
  listAllChargebacksAmount: ListAllChargebacksAmount,
): string {
  return JSON.stringify(
    ListAllChargebacksAmount$outboundSchema.parse(listAllChargebacksAmount),
  );
}

export function listAllChargebacksAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksAmount' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksSettlementAmount$inboundSchema: z.ZodType<
  ListAllChargebacksSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllChargebacksSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllChargebacksSettlementAmount$outboundSchema: z.ZodType<
  ListAllChargebacksSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksSettlementAmount$ {
  /** @deprecated use `ListAllChargebacksSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksSettlementAmount$inboundSchema;
  /** @deprecated use `ListAllChargebacksSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListAllChargebacksSettlementAmount$outboundSchema;
  /** @deprecated use `ListAllChargebacksSettlementAmount$Outbound` instead. */
  export type Outbound = ListAllChargebacksSettlementAmount$Outbound;
}

export function listAllChargebacksSettlementAmountToJSON(
  listAllChargebacksSettlementAmount: ListAllChargebacksSettlementAmount,
): string {
  return JSON.stringify(
    ListAllChargebacksSettlementAmount$outboundSchema.parse(
      listAllChargebacksSettlementAmount,
    ),
  );
}

export function listAllChargebacksSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllChargebacksSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksReason$inboundSchema: z.ZodType<
  ListAllChargebacksReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  description: z.string(),
});

/** @internal */
export type ListAllChargebacksReason$Outbound = {
  code: string;
  description: string;
};

/** @internal */
export const ListAllChargebacksReason$outboundSchema: z.ZodType<
  ListAllChargebacksReason$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksReason
> = z.object({
  code: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksReason$ {
  /** @deprecated use `ListAllChargebacksReason$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksReason$inboundSchema;
  /** @deprecated use `ListAllChargebacksReason$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksReason$outboundSchema;
  /** @deprecated use `ListAllChargebacksReason$Outbound` instead. */
  export type Outbound = ListAllChargebacksReason$Outbound;
}

export function listAllChargebacksReasonToJSON(
  listAllChargebacksReason: ListAllChargebacksReason,
): string {
  return JSON.stringify(
    ListAllChargebacksReason$outboundSchema.parse(listAllChargebacksReason),
  );
}

export function listAllChargebacksReasonFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksReason' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksChargebackSelf$inboundSchema: z.ZodType<
  ListAllChargebacksChargebackSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllChargebacksChargebackSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllChargebacksChargebackSelf$outboundSchema: z.ZodType<
  ListAllChargebacksChargebackSelf$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksChargebackSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksChargebackSelf$ {
  /** @deprecated use `ListAllChargebacksChargebackSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksChargebackSelf$inboundSchema;
  /** @deprecated use `ListAllChargebacksChargebackSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksChargebackSelf$outboundSchema;
  /** @deprecated use `ListAllChargebacksChargebackSelf$Outbound` instead. */
  export type Outbound = ListAllChargebacksChargebackSelf$Outbound;
}

export function listAllChargebacksChargebackSelfToJSON(
  listAllChargebacksChargebackSelf: ListAllChargebacksChargebackSelf,
): string {
  return JSON.stringify(
    ListAllChargebacksChargebackSelf$outboundSchema.parse(
      listAllChargebacksChargebackSelf,
    ),
  );
}

export function listAllChargebacksChargebackSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksChargebackSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksChargebackSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksChargebackSelf' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksPayment$inboundSchema: z.ZodType<
  ListAllChargebacksPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllChargebacksPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllChargebacksPayment$outboundSchema: z.ZodType<
  ListAllChargebacksPayment$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksPayment$ {
  /** @deprecated use `ListAllChargebacksPayment$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksPayment$inboundSchema;
  /** @deprecated use `ListAllChargebacksPayment$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksPayment$outboundSchema;
  /** @deprecated use `ListAllChargebacksPayment$Outbound` instead. */
  export type Outbound = ListAllChargebacksPayment$Outbound;
}

export function listAllChargebacksPaymentToJSON(
  listAllChargebacksPayment: ListAllChargebacksPayment,
): string {
  return JSON.stringify(
    ListAllChargebacksPayment$outboundSchema.parse(listAllChargebacksPayment),
  );
}

export function listAllChargebacksPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksPayment' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksSettlement$inboundSchema: z.ZodType<
  ListAllChargebacksSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllChargebacksSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllChargebacksSettlement$outboundSchema: z.ZodType<
  ListAllChargebacksSettlement$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksSettlement$ {
  /** @deprecated use `ListAllChargebacksSettlement$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksSettlement$inboundSchema;
  /** @deprecated use `ListAllChargebacksSettlement$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksSettlement$outboundSchema;
  /** @deprecated use `ListAllChargebacksSettlement$Outbound` instead. */
  export type Outbound = ListAllChargebacksSettlement$Outbound;
}

export function listAllChargebacksSettlementToJSON(
  listAllChargebacksSettlement: ListAllChargebacksSettlement,
): string {
  return JSON.stringify(
    ListAllChargebacksSettlement$outboundSchema.parse(
      listAllChargebacksSettlement,
    ),
  );
}

export function listAllChargebacksSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksSettlement' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksChargebackDocumentation$inboundSchema: z.ZodType<
  ListAllChargebacksChargebackDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllChargebacksChargebackDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllChargebacksChargebackDocumentation$outboundSchema:
  z.ZodType<
    ListAllChargebacksChargebackDocumentation$Outbound,
    z.ZodTypeDef,
    ListAllChargebacksChargebackDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksChargebackDocumentation$ {
  /** @deprecated use `ListAllChargebacksChargebackDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListAllChargebacksChargebackDocumentation$inboundSchema;
  /** @deprecated use `ListAllChargebacksChargebackDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllChargebacksChargebackDocumentation$outboundSchema;
  /** @deprecated use `ListAllChargebacksChargebackDocumentation$Outbound` instead. */
  export type Outbound = ListAllChargebacksChargebackDocumentation$Outbound;
}

export function listAllChargebacksChargebackDocumentationToJSON(
  listAllChargebacksChargebackDocumentation:
    ListAllChargebacksChargebackDocumentation,
): string {
  return JSON.stringify(
    ListAllChargebacksChargebackDocumentation$outboundSchema.parse(
      listAllChargebacksChargebackDocumentation,
    ),
  );
}

export function listAllChargebacksChargebackDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAllChargebacksChargebackDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllChargebacksChargebackDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAllChargebacksChargebackDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksChargebackLinks$inboundSchema: z.ZodType<
  ListAllChargebacksChargebackLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllChargebacksChargebackSelf$inboundSchema),
  payment: z.lazy(() => ListAllChargebacksPayment$inboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListAllChargebacksSettlement$inboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListAllChargebacksChargebackDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListAllChargebacksChargebackLinks$Outbound = {
  self: ListAllChargebacksChargebackSelf$Outbound;
  payment: ListAllChargebacksPayment$Outbound;
  settlement?: ListAllChargebacksSettlement$Outbound | null | undefined;
  documentation: ListAllChargebacksChargebackDocumentation$Outbound;
};

/** @internal */
export const ListAllChargebacksChargebackLinks$outboundSchema: z.ZodType<
  ListAllChargebacksChargebackLinks$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksChargebackLinks
> = z.object({
  self: z.lazy(() => ListAllChargebacksChargebackSelf$outboundSchema),
  payment: z.lazy(() => ListAllChargebacksPayment$outboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListAllChargebacksSettlement$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListAllChargebacksChargebackDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksChargebackLinks$ {
  /** @deprecated use `ListAllChargebacksChargebackLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksChargebackLinks$inboundSchema;
  /** @deprecated use `ListAllChargebacksChargebackLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListAllChargebacksChargebackLinks$outboundSchema;
  /** @deprecated use `ListAllChargebacksChargebackLinks$Outbound` instead. */
  export type Outbound = ListAllChargebacksChargebackLinks$Outbound;
}

export function listAllChargebacksChargebackLinksToJSON(
  listAllChargebacksChargebackLinks: ListAllChargebacksChargebackLinks,
): string {
  return JSON.stringify(
    ListAllChargebacksChargebackLinks$outboundSchema.parse(
      listAllChargebacksChargebackLinks,
    ),
  );
}

export function listAllChargebacksChargebackLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksChargebackLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksChargebackLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksChargebackLinks' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksChargeback$inboundSchema: z.ZodType<
  ListAllChargebacksChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => ListAllChargebacksAmount$inboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => ListAllChargebacksSettlementAmount$inboundSchema),
  ).optional(),
  reason: z.nullable(z.lazy(() => ListAllChargebacksReason$inboundSchema))
    .optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ListAllChargebacksChargebackLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListAllChargebacksChargeback$Outbound = {
  resource: string;
  id: string;
  amount: ListAllChargebacksAmount$Outbound;
  settlementAmount?:
    | ListAllChargebacksSettlementAmount$Outbound
    | null
    | undefined;
  reason?: ListAllChargebacksReason$Outbound | null | undefined;
  paymentId: string;
  settlementId?: string | null | undefined;
  createdAt: string;
  reversedAt?: string | null | undefined;
  _links: ListAllChargebacksChargebackLinks$Outbound;
};

/** @internal */
export const ListAllChargebacksChargeback$outboundSchema: z.ZodType<
  ListAllChargebacksChargeback$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksChargeback
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => ListAllChargebacksAmount$outboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => ListAllChargebacksSettlementAmount$outboundSchema),
  ).optional(),
  reason: z.nullable(z.lazy(() => ListAllChargebacksReason$outboundSchema))
    .optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => ListAllChargebacksChargebackLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksChargeback$ {
  /** @deprecated use `ListAllChargebacksChargeback$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksChargeback$inboundSchema;
  /** @deprecated use `ListAllChargebacksChargeback$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksChargeback$outboundSchema;
  /** @deprecated use `ListAllChargebacksChargeback$Outbound` instead. */
  export type Outbound = ListAllChargebacksChargeback$Outbound;
}

export function listAllChargebacksChargebackToJSON(
  listAllChargebacksChargeback: ListAllChargebacksChargeback,
): string {
  return JSON.stringify(
    ListAllChargebacksChargeback$outboundSchema.parse(
      listAllChargebacksChargeback,
    ),
  );
}

export function listAllChargebacksChargebackFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksChargeback' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksEmbedded$inboundSchema: z.ZodType<
  ListAllChargebacksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  chargebacks: z.array(z.lazy(() => ListAllChargebacksChargeback$inboundSchema))
    .optional(),
});

/** @internal */
export type ListAllChargebacksEmbedded$Outbound = {
  chargebacks?: Array<ListAllChargebacksChargeback$Outbound> | undefined;
};

/** @internal */
export const ListAllChargebacksEmbedded$outboundSchema: z.ZodType<
  ListAllChargebacksEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksEmbedded
> = z.object({
  chargebacks: z.array(
    z.lazy(() => ListAllChargebacksChargeback$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksEmbedded$ {
  /** @deprecated use `ListAllChargebacksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksEmbedded$inboundSchema;
  /** @deprecated use `ListAllChargebacksEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksEmbedded$outboundSchema;
  /** @deprecated use `ListAllChargebacksEmbedded$Outbound` instead. */
  export type Outbound = ListAllChargebacksEmbedded$Outbound;
}

export function listAllChargebacksEmbeddedToJSON(
  listAllChargebacksEmbedded: ListAllChargebacksEmbedded,
): string {
  return JSON.stringify(
    ListAllChargebacksEmbedded$outboundSchema.parse(listAllChargebacksEmbedded),
  );
}

export function listAllChargebacksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksEmbedded' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksSelf$inboundSchema: z.ZodType<
  ListAllChargebacksSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllChargebacksSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllChargebacksSelf$outboundSchema: z.ZodType<
  ListAllChargebacksSelf$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksSelf$ {
  /** @deprecated use `ListAllChargebacksSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksSelf$inboundSchema;
  /** @deprecated use `ListAllChargebacksSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksSelf$outboundSchema;
  /** @deprecated use `ListAllChargebacksSelf$Outbound` instead. */
  export type Outbound = ListAllChargebacksSelf$Outbound;
}

export function listAllChargebacksSelfToJSON(
  listAllChargebacksSelf: ListAllChargebacksSelf,
): string {
  return JSON.stringify(
    ListAllChargebacksSelf$outboundSchema.parse(listAllChargebacksSelf),
  );
}

export function listAllChargebacksSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksSelf' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksPrevious$inboundSchema: z.ZodType<
  ListAllChargebacksPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllChargebacksPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllChargebacksPrevious$outboundSchema: z.ZodType<
  ListAllChargebacksPrevious$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksPrevious$ {
  /** @deprecated use `ListAllChargebacksPrevious$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksPrevious$inboundSchema;
  /** @deprecated use `ListAllChargebacksPrevious$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksPrevious$outboundSchema;
  /** @deprecated use `ListAllChargebacksPrevious$Outbound` instead. */
  export type Outbound = ListAllChargebacksPrevious$Outbound;
}

export function listAllChargebacksPreviousToJSON(
  listAllChargebacksPrevious: ListAllChargebacksPrevious,
): string {
  return JSON.stringify(
    ListAllChargebacksPrevious$outboundSchema.parse(listAllChargebacksPrevious),
  );
}

export function listAllChargebacksPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksPrevious' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksNext$inboundSchema: z.ZodType<
  ListAllChargebacksNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllChargebacksNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllChargebacksNext$outboundSchema: z.ZodType<
  ListAllChargebacksNext$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksNext$ {
  /** @deprecated use `ListAllChargebacksNext$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksNext$inboundSchema;
  /** @deprecated use `ListAllChargebacksNext$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksNext$outboundSchema;
  /** @deprecated use `ListAllChargebacksNext$Outbound` instead. */
  export type Outbound = ListAllChargebacksNext$Outbound;
}

export function listAllChargebacksNextToJSON(
  listAllChargebacksNext: ListAllChargebacksNext,
): string {
  return JSON.stringify(
    ListAllChargebacksNext$outboundSchema.parse(listAllChargebacksNext),
  );
}

export function listAllChargebacksNextFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksNext' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksDocumentation$inboundSchema: z.ZodType<
  ListAllChargebacksDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllChargebacksDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllChargebacksDocumentation$outboundSchema: z.ZodType<
  ListAllChargebacksDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksDocumentation$ {
  /** @deprecated use `ListAllChargebacksDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksDocumentation$inboundSchema;
  /** @deprecated use `ListAllChargebacksDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksDocumentation$outboundSchema;
  /** @deprecated use `ListAllChargebacksDocumentation$Outbound` instead. */
  export type Outbound = ListAllChargebacksDocumentation$Outbound;
}

export function listAllChargebacksDocumentationToJSON(
  listAllChargebacksDocumentation: ListAllChargebacksDocumentation,
): string {
  return JSON.stringify(
    ListAllChargebacksDocumentation$outboundSchema.parse(
      listAllChargebacksDocumentation,
    ),
  );
}

export function listAllChargebacksDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksLinks$inboundSchema: z.ZodType<
  ListAllChargebacksLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllChargebacksSelf$inboundSchema),
  previous: z.nullable(z.lazy(() => ListAllChargebacksPrevious$inboundSchema)),
  next: z.nullable(z.lazy(() => ListAllChargebacksNext$inboundSchema)),
  documentation: z.lazy(() => ListAllChargebacksDocumentation$inboundSchema),
});

/** @internal */
export type ListAllChargebacksLinks$Outbound = {
  self: ListAllChargebacksSelf$Outbound;
  previous: ListAllChargebacksPrevious$Outbound | null;
  next: ListAllChargebacksNext$Outbound | null;
  documentation: ListAllChargebacksDocumentation$Outbound;
};

/** @internal */
export const ListAllChargebacksLinks$outboundSchema: z.ZodType<
  ListAllChargebacksLinks$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksLinks
> = z.object({
  self: z.lazy(() => ListAllChargebacksSelf$outboundSchema),
  previous: z.nullable(z.lazy(() => ListAllChargebacksPrevious$outboundSchema)),
  next: z.nullable(z.lazy(() => ListAllChargebacksNext$outboundSchema)),
  documentation: z.lazy(() => ListAllChargebacksDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksLinks$ {
  /** @deprecated use `ListAllChargebacksLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksLinks$inboundSchema;
  /** @deprecated use `ListAllChargebacksLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksLinks$outboundSchema;
  /** @deprecated use `ListAllChargebacksLinks$Outbound` instead. */
  export type Outbound = ListAllChargebacksLinks$Outbound;
}

export function listAllChargebacksLinksToJSON(
  listAllChargebacksLinks: ListAllChargebacksLinks,
): string {
  return JSON.stringify(
    ListAllChargebacksLinks$outboundSchema.parse(listAllChargebacksLinks),
  );
}

export function listAllChargebacksLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksLinks' from JSON`,
  );
}

/** @internal */
export const ListAllChargebacksResponse$inboundSchema: z.ZodType<
  ListAllChargebacksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListAllChargebacksEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListAllChargebacksLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllChargebacksResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListAllChargebacksEmbedded$Outbound | undefined;
  _links?: ListAllChargebacksLinks$Outbound | undefined;
};

/** @internal */
export const ListAllChargebacksResponse$outboundSchema: z.ZodType<
  ListAllChargebacksResponse$Outbound,
  z.ZodTypeDef,
  ListAllChargebacksResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListAllChargebacksEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListAllChargebacksLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllChargebacksResponse$ {
  /** @deprecated use `ListAllChargebacksResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllChargebacksResponse$inboundSchema;
  /** @deprecated use `ListAllChargebacksResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllChargebacksResponse$outboundSchema;
  /** @deprecated use `ListAllChargebacksResponse$Outbound` instead. */
  export type Outbound = ListAllChargebacksResponse$Outbound;
}

export function listAllChargebacksResponseToJSON(
  listAllChargebacksResponse: ListAllChargebacksResponse,
): string {
  return JSON.stringify(
    ListAllChargebacksResponse$outboundSchema.parse(listAllChargebacksResponse),
  );
}

export function listAllChargebacksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllChargebacksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllChargebacksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllChargebacksResponse' from JSON`,
  );
}
