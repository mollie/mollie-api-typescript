/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Provides the currencies to retrieve the settlements. It accepts multiple currencies in a comma-separated format.
 */
export const Currencies = {
  Eur: "EUR",
  Gbp: "GBP",
  Chf: "CHF",
  Dkk: "DKK",
  Nok: "NOK",
  Pln: "PLN",
  Sek: "SEK",
  Usd: "USD",
  Czk: "CZK",
  Huf: "HUF",
  Aud: "AUD",
  Cad: "CAD",
} as const;
/**
 * Provides the currencies to retrieve the settlements. It accepts multiple currencies in a comma-separated format.
 */
export type Currencies = ClosedEnum<typeof Currencies>;

export type ListSettlementsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Provide the token of the balance to filter the settlements by. This is
   *
   * @remarks
   * the balance token that the settlement was settled to.
   */
  balanceId?: string | null | undefined;
  /**
   * Provide the year to query the settlements. Must be used combined with `month` parameter
   */
  year?: string | null | undefined;
  /**
   * Provide the month to query the settlements. Must be used combined with `year` parameter
   */
  month?: string | null | undefined;
  /**
   * Provides the currencies to retrieve the settlements. It accepts multiple currencies in a comma-separated format.
   */
  currencies?: Currencies | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementsNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementsNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementsNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementsBadRequestDocumentation;
};

/**
 * The status of the settlement.
 */
export const ListSettlementsStatus = {
  Open: "open",
  Pending: "pending",
  Paidout: "paidout",
  Failed: "failed",
} as const;
/**
 * The status of the settlement.
 */
export type ListSettlementsStatus = ClosedEnum<typeof ListSettlementsStatus>;

/**
 * The total amount of the settlement.
 */
export type ListSettlementsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The payment method, if applicable
 */
export const ListSettlementsCostMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type ListSettlementsCostMethod = ClosedEnum<
  typeof ListSettlementsCostMethod
>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListSettlementsFixed = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListSettlementsPercentage = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The service rates, further divided into `fixed` and `percentage` costs.
 */
export type ListSettlementsRate = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  fixed?: ListSettlementsFixed | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  percentage?: ListSettlementsPercentage | undefined;
};

/**
 * The net total cost, i.e. excluding VAT
 */
export type ListSettlementsCostAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type ListSettlementsCostAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total cost, i.e. including VAT
 */
export type ListSettlementsCostAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListSettlementsCost = {
  /**
   * A description of the cost subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: ListSettlementsCostMethod | null | undefined;
  /**
   * The number of fees
   */
  count?: number | undefined;
  /**
   * The service rates, further divided into `fixed` and `percentage` costs.
   */
  rate?: ListSettlementsRate | undefined;
  /**
   * The net total cost, i.e. excluding VAT
   */
  amountNet?: ListSettlementsCostAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: ListSettlementsCostAmountVat | undefined;
  /**
   * The gross total cost, i.e. including VAT
   */
  amountGross?: ListSettlementsCostAmountGross | undefined;
};

/**
 * The payment method, if applicable
 */
export const ListSettlementsRevenueMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type ListSettlementsRevenueMethod = ClosedEnum<
  typeof ListSettlementsRevenueMethod
>;

/**
 * The net total of received funds, i.e. excluding VAT
 */
export type ListSettlementsRevenueAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type ListSettlementsRevenueAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total of received funds, i.e. including VAT
 */
export type ListSettlementsRevenueAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListSettlementsRevenue = {
  /**
   * A description of the revenue subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: ListSettlementsRevenueMethod | null | undefined;
  /**
   * The number of payments
   */
  count?: number | undefined;
  /**
   * The net total of received funds, i.e. excluding VAT
   */
  amountNet?: ListSettlementsRevenueAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: ListSettlementsRevenueAmountVat | undefined;
  /**
   * The gross total of received funds, i.e. including VAT
   */
  amountGross?: ListSettlementsRevenueAmountGross | undefined;
};

export type ListSettlementsLessThanMonthGreaterThan = {
  /**
   * An array of cost objects, describing the fees withheld for each payment method during this period.
   */
  costs?: Array<ListSettlementsCost> | undefined;
  /**
   * An array of revenue objects containing the total revenue for each payment method during this period.
   */
  revenue?: Array<ListSettlementsRevenue> | undefined;
  /**
   * The ID of the invoice created for this period, if the invoice has been created already.
   */
  invoiceId?: string | null | undefined;
  /**
   * The invoice reference, if the invoice has been created already.
   */
  invoiceReference?: string | null | undefined;
};

export type ListSettlementsLessThanYearGreaterThan = {
  lessThanMonthGreaterThan?:
    | ListSettlementsLessThanMonthGreaterThan
    | undefined;
};

/**
 * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
 *
 * @remarks
 * transactions are grouped into 'period' objects — one for each calendar month.
 *
 * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
 * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
 *
 * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
 * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
 *
 * The example response should give a good idea of what this looks like in practise.
 */
export type ListSettlementsPeriods = {
  lessThanYearGreaterThan?: ListSettlementsLessThanYearGreaterThan | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type SettlementSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) included in this settlement.
 */
export type ListSettlementsPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-captures) included in this settlement.
 */
export type ListSettlementsCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
 */
export type ListSettlementsRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
 */
export type ListSettlementsChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [invoice](list-invoices).
 */
export type ListSettlementsInvoice = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type SettlementDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type SettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: SettlementSelf | undefined;
  /**
   * The API resource URL of the [payments](list-payments) included in this settlement.
   */
  payments?: ListSettlementsPayments | undefined;
  /**
   * The API resource URL of the [captures](list-captures) included in this settlement.
   */
  captures?: ListSettlementsCaptures | undefined;
  /**
   * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
   */
  refunds?: ListSettlementsRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
   */
  chargebacks?: ListSettlementsChargebacks | undefined;
  /**
   * The API resource URL of the [invoice](list-invoices).
   */
  invoice?: ListSettlementsInvoice | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: SettlementDocumentation | undefined;
};

export type ListSettlementsSettlement = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this settlement.
   */
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: ListSettlementsStatus | undefined;
  /**
   * The total amount of the settlement.
   */
  amount?: ListSettlementsAmount | undefined;
  /**
   * The balance token that the settlement was settled to.
   */
  balanceId?: string | undefined;
  /**
   * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
   */
  invoiceId?: string | null | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects — one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: ListSettlementsPeriods | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: SettlementLinks | undefined;
};

export type ListSettlementsEmbedded = {
  /**
   * An array of settlement objects. For a complete reference
   *
   * @remarks
   * of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
   */
  settlements?: Array<ListSettlementsSettlement> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListSettlementsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListSettlementsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListSettlementsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListSettlementsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListSettlementsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListSettlementsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListSettlementsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListSettlementsDocumentation | undefined;
};

/**
 * A list of settlement objects. For a complete reference of the settlement
 *
 * @remarks
 * object, refer to the [Get settlement endpoint](get-settlement) documentation.
 */
export type ListSettlementsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListSettlementsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListSettlementsLinks | undefined;
};

/** @internal */
export const Currencies$inboundSchema: z.ZodNativeEnum<typeof Currencies> = z
  .nativeEnum(Currencies);

/** @internal */
export const Currencies$outboundSchema: z.ZodNativeEnum<typeof Currencies> =
  Currencies$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Currencies$ {
  /** @deprecated use `Currencies$inboundSchema` instead. */
  export const inboundSchema = Currencies$inboundSchema;
  /** @deprecated use `Currencies$outboundSchema` instead. */
  export const outboundSchema = Currencies$outboundSchema;
}

/** @internal */
export const ListSettlementsRequest$inboundSchema: z.ZodType<
  ListSettlementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  balanceId: z.nullable(z.string()).optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  currencies: z.nullable(Currencies$inboundSchema).optional(),
});

/** @internal */
export type ListSettlementsRequest$Outbound = {
  from?: string | undefined;
  limit: number | null;
  balanceId?: string | null | undefined;
  year?: string | null | undefined;
  month?: string | null | undefined;
  currencies?: string | null | undefined;
};

/** @internal */
export const ListSettlementsRequest$outboundSchema: z.ZodType<
  ListSettlementsRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementsRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  balanceId: z.nullable(z.string()).optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  currencies: z.nullable(Currencies$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRequest$ {
  /** @deprecated use `ListSettlementsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRequest$inboundSchema;
  /** @deprecated use `ListSettlementsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRequest$outboundSchema;
  /** @deprecated use `ListSettlementsRequest$Outbound` instead. */
  export type Outbound = ListSettlementsRequest$Outbound;
}

export function listSettlementsRequestToJSON(
  listSettlementsRequest: ListSettlementsRequest,
): string {
  return JSON.stringify(
    ListSettlementsRequest$outboundSchema.parse(listSettlementsRequest),
  );
}

export function listSettlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementsNotFoundDocumentation$inboundSchema: z.ZodType<
  ListSettlementsNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsNotFoundDocumentation$outboundSchema: z.ZodType<
  ListSettlementsNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListSettlementsNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsNotFoundDocumentation$ {
  /** @deprecated use `ListSettlementsNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementsNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementsNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementsNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementsNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementsNotFoundDocumentation$Outbound;
}

export function listSettlementsNotFoundDocumentationToJSON(
  listSettlementsNotFoundDocumentation: ListSettlementsNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListSettlementsNotFoundDocumentation$outboundSchema.parse(
      listSettlementsNotFoundDocumentation,
    ),
  );
}

export function listSettlementsNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementsNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementsNotFoundLinks$inboundSchema: z.ZodType<
  ListSettlementsNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementsNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementsNotFoundLinks$Outbound = {
  documentation: ListSettlementsNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListSettlementsNotFoundLinks$outboundSchema: z.ZodType<
  ListSettlementsNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementsNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementsNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsNotFoundLinks$ {
  /** @deprecated use `ListSettlementsNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsNotFoundLinks$inboundSchema;
  /** @deprecated use `ListSettlementsNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsNotFoundLinks$outboundSchema;
  /** @deprecated use `ListSettlementsNotFoundLinks$Outbound` instead. */
  export type Outbound = ListSettlementsNotFoundLinks$Outbound;
}

export function listSettlementsNotFoundLinksToJSON(
  listSettlementsNotFoundLinks: ListSettlementsNotFoundLinks,
): string {
  return JSON.stringify(
    ListSettlementsNotFoundLinks$outboundSchema.parse(
      listSettlementsNotFoundLinks,
    ),
  );
}

export function listSettlementsNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementsBadRequestDocumentation$inboundSchema: z.ZodType<
  ListSettlementsBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsBadRequestDocumentation$outboundSchema: z.ZodType<
  ListSettlementsBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListSettlementsBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsBadRequestDocumentation$ {
  /** @deprecated use `ListSettlementsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementsBadRequestDocumentation$Outbound;
}

export function listSettlementsBadRequestDocumentationToJSON(
  listSettlementsBadRequestDocumentation:
    ListSettlementsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListSettlementsBadRequestDocumentation$outboundSchema.parse(
      listSettlementsBadRequestDocumentation,
    ),
  );
}

export function listSettlementsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementsBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementsBadRequestLinks$inboundSchema: z.ZodType<
  ListSettlementsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementsBadRequestLinks$Outbound = {
  documentation: ListSettlementsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListSettlementsBadRequestLinks$outboundSchema: z.ZodType<
  ListSettlementsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsBadRequestLinks$ {
  /** @deprecated use `ListSettlementsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListSettlementsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListSettlementsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListSettlementsBadRequestLinks$Outbound;
}

export function listSettlementsBadRequestLinksToJSON(
  listSettlementsBadRequestLinks: ListSettlementsBadRequestLinks,
): string {
  return JSON.stringify(
    ListSettlementsBadRequestLinks$outboundSchema.parse(
      listSettlementsBadRequestLinks,
    ),
  );
}

export function listSettlementsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementsStatus
> = z.nativeEnum(ListSettlementsStatus);

/** @internal */
export const ListSettlementsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementsStatus
> = ListSettlementsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsStatus$ {
  /** @deprecated use `ListSettlementsStatus$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsStatus$inboundSchema;
  /** @deprecated use `ListSettlementsStatus$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsStatus$outboundSchema;
}

/** @internal */
export const ListSettlementsAmount$inboundSchema: z.ZodType<
  ListSettlementsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsAmount$outboundSchema: z.ZodType<
  ListSettlementsAmount$Outbound,
  z.ZodTypeDef,
  ListSettlementsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsAmount$ {
  /** @deprecated use `ListSettlementsAmount$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsAmount$inboundSchema;
  /** @deprecated use `ListSettlementsAmount$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsAmount$outboundSchema;
  /** @deprecated use `ListSettlementsAmount$Outbound` instead. */
  export type Outbound = ListSettlementsAmount$Outbound;
}

export function listSettlementsAmountToJSON(
  listSettlementsAmount: ListSettlementsAmount,
): string {
  return JSON.stringify(
    ListSettlementsAmount$outboundSchema.parse(listSettlementsAmount),
  );
}

export function listSettlementsAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementsCostMethod$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementsCostMethod
> = z.nativeEnum(ListSettlementsCostMethod);

/** @internal */
export const ListSettlementsCostMethod$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementsCostMethod
> = ListSettlementsCostMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsCostMethod$ {
  /** @deprecated use `ListSettlementsCostMethod$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsCostMethod$inboundSchema;
  /** @deprecated use `ListSettlementsCostMethod$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsCostMethod$outboundSchema;
}

/** @internal */
export const ListSettlementsFixed$inboundSchema: z.ZodType<
  ListSettlementsFixed,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsFixed$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsFixed$outboundSchema: z.ZodType<
  ListSettlementsFixed$Outbound,
  z.ZodTypeDef,
  ListSettlementsFixed
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsFixed$ {
  /** @deprecated use `ListSettlementsFixed$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsFixed$inboundSchema;
  /** @deprecated use `ListSettlementsFixed$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsFixed$outboundSchema;
  /** @deprecated use `ListSettlementsFixed$Outbound` instead. */
  export type Outbound = ListSettlementsFixed$Outbound;
}

export function listSettlementsFixedToJSON(
  listSettlementsFixed: ListSettlementsFixed,
): string {
  return JSON.stringify(
    ListSettlementsFixed$outboundSchema.parse(listSettlementsFixed),
  );
}

export function listSettlementsFixedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsFixed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsFixed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsFixed' from JSON`,
  );
}

/** @internal */
export const ListSettlementsPercentage$inboundSchema: z.ZodType<
  ListSettlementsPercentage,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsPercentage$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsPercentage$outboundSchema: z.ZodType<
  ListSettlementsPercentage$Outbound,
  z.ZodTypeDef,
  ListSettlementsPercentage
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsPercentage$ {
  /** @deprecated use `ListSettlementsPercentage$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsPercentage$inboundSchema;
  /** @deprecated use `ListSettlementsPercentage$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsPercentage$outboundSchema;
  /** @deprecated use `ListSettlementsPercentage$Outbound` instead. */
  export type Outbound = ListSettlementsPercentage$Outbound;
}

export function listSettlementsPercentageToJSON(
  listSettlementsPercentage: ListSettlementsPercentage,
): string {
  return JSON.stringify(
    ListSettlementsPercentage$outboundSchema.parse(listSettlementsPercentage),
  );
}

export function listSettlementsPercentageFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsPercentage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsPercentage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsPercentage' from JSON`,
  );
}

/** @internal */
export const ListSettlementsRate$inboundSchema: z.ZodType<
  ListSettlementsRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  fixed: z.lazy(() => ListSettlementsFixed$inboundSchema).optional(),
  percentage: z.lazy(() => ListSettlementsPercentage$inboundSchema).optional(),
});

/** @internal */
export type ListSettlementsRate$Outbound = {
  fixed?: ListSettlementsFixed$Outbound | undefined;
  percentage?: ListSettlementsPercentage$Outbound | undefined;
};

/** @internal */
export const ListSettlementsRate$outboundSchema: z.ZodType<
  ListSettlementsRate$Outbound,
  z.ZodTypeDef,
  ListSettlementsRate
> = z.object({
  fixed: z.lazy(() => ListSettlementsFixed$outboundSchema).optional(),
  percentage: z.lazy(() => ListSettlementsPercentage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRate$ {
  /** @deprecated use `ListSettlementsRate$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRate$inboundSchema;
  /** @deprecated use `ListSettlementsRate$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRate$outboundSchema;
  /** @deprecated use `ListSettlementsRate$Outbound` instead. */
  export type Outbound = ListSettlementsRate$Outbound;
}

export function listSettlementsRateToJSON(
  listSettlementsRate: ListSettlementsRate,
): string {
  return JSON.stringify(
    ListSettlementsRate$outboundSchema.parse(listSettlementsRate),
  );
}

export function listSettlementsRateFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRate' from JSON`,
  );
}

/** @internal */
export const ListSettlementsCostAmountNet$inboundSchema: z.ZodType<
  ListSettlementsCostAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsCostAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsCostAmountNet$outboundSchema: z.ZodType<
  ListSettlementsCostAmountNet$Outbound,
  z.ZodTypeDef,
  ListSettlementsCostAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsCostAmountNet$ {
  /** @deprecated use `ListSettlementsCostAmountNet$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsCostAmountNet$inboundSchema;
  /** @deprecated use `ListSettlementsCostAmountNet$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsCostAmountNet$outboundSchema;
  /** @deprecated use `ListSettlementsCostAmountNet$Outbound` instead. */
  export type Outbound = ListSettlementsCostAmountNet$Outbound;
}

export function listSettlementsCostAmountNetToJSON(
  listSettlementsCostAmountNet: ListSettlementsCostAmountNet,
): string {
  return JSON.stringify(
    ListSettlementsCostAmountNet$outboundSchema.parse(
      listSettlementsCostAmountNet,
    ),
  );
}

export function listSettlementsCostAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsCostAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsCostAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsCostAmountNet' from JSON`,
  );
}

/** @internal */
export const ListSettlementsCostAmountVat$inboundSchema: z.ZodType<
  ListSettlementsCostAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsCostAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsCostAmountVat$outboundSchema: z.ZodType<
  ListSettlementsCostAmountVat$Outbound,
  z.ZodTypeDef,
  ListSettlementsCostAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsCostAmountVat$ {
  /** @deprecated use `ListSettlementsCostAmountVat$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsCostAmountVat$inboundSchema;
  /** @deprecated use `ListSettlementsCostAmountVat$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsCostAmountVat$outboundSchema;
  /** @deprecated use `ListSettlementsCostAmountVat$Outbound` instead. */
  export type Outbound = ListSettlementsCostAmountVat$Outbound;
}

export function listSettlementsCostAmountVatToJSON(
  listSettlementsCostAmountVat: ListSettlementsCostAmountVat,
): string {
  return JSON.stringify(
    ListSettlementsCostAmountVat$outboundSchema.parse(
      listSettlementsCostAmountVat,
    ),
  );
}

export function listSettlementsCostAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsCostAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsCostAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsCostAmountVat' from JSON`,
  );
}

/** @internal */
export const ListSettlementsCostAmountGross$inboundSchema: z.ZodType<
  ListSettlementsCostAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsCostAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsCostAmountGross$outboundSchema: z.ZodType<
  ListSettlementsCostAmountGross$Outbound,
  z.ZodTypeDef,
  ListSettlementsCostAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsCostAmountGross$ {
  /** @deprecated use `ListSettlementsCostAmountGross$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsCostAmountGross$inboundSchema;
  /** @deprecated use `ListSettlementsCostAmountGross$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsCostAmountGross$outboundSchema;
  /** @deprecated use `ListSettlementsCostAmountGross$Outbound` instead. */
  export type Outbound = ListSettlementsCostAmountGross$Outbound;
}

export function listSettlementsCostAmountGrossToJSON(
  listSettlementsCostAmountGross: ListSettlementsCostAmountGross,
): string {
  return JSON.stringify(
    ListSettlementsCostAmountGross$outboundSchema.parse(
      listSettlementsCostAmountGross,
    ),
  );
}

export function listSettlementsCostAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsCostAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsCostAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsCostAmountGross' from JSON`,
  );
}

/** @internal */
export const ListSettlementsCost$inboundSchema: z.ZodType<
  ListSettlementsCost,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(ListSettlementsCostMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => ListSettlementsRate$inboundSchema).optional(),
  amountNet: z.lazy(() => ListSettlementsCostAmountNet$inboundSchema)
    .optional(),
  amountVat: z.lazy(() => ListSettlementsCostAmountVat$inboundSchema)
    .optional(),
  amountGross: z.lazy(() => ListSettlementsCostAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type ListSettlementsCost$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  rate?: ListSettlementsRate$Outbound | undefined;
  amountNet?: ListSettlementsCostAmountNet$Outbound | undefined;
  amountVat?: ListSettlementsCostAmountVat$Outbound | undefined;
  amountGross?: ListSettlementsCostAmountGross$Outbound | undefined;
};

/** @internal */
export const ListSettlementsCost$outboundSchema: z.ZodType<
  ListSettlementsCost$Outbound,
  z.ZodTypeDef,
  ListSettlementsCost
> = z.object({
  description: z.string().optional(),
  method: z.nullable(ListSettlementsCostMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => ListSettlementsRate$outboundSchema).optional(),
  amountNet: z.lazy(() => ListSettlementsCostAmountNet$outboundSchema)
    .optional(),
  amountVat: z.lazy(() => ListSettlementsCostAmountVat$outboundSchema)
    .optional(),
  amountGross: z.lazy(() => ListSettlementsCostAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsCost$ {
  /** @deprecated use `ListSettlementsCost$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsCost$inboundSchema;
  /** @deprecated use `ListSettlementsCost$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsCost$outboundSchema;
  /** @deprecated use `ListSettlementsCost$Outbound` instead. */
  export type Outbound = ListSettlementsCost$Outbound;
}

export function listSettlementsCostToJSON(
  listSettlementsCost: ListSettlementsCost,
): string {
  return JSON.stringify(
    ListSettlementsCost$outboundSchema.parse(listSettlementsCost),
  );
}

export function listSettlementsCostFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsCost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsCost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsCost' from JSON`,
  );
}

/** @internal */
export const ListSettlementsRevenueMethod$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementsRevenueMethod
> = z.nativeEnum(ListSettlementsRevenueMethod);

/** @internal */
export const ListSettlementsRevenueMethod$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementsRevenueMethod
> = ListSettlementsRevenueMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRevenueMethod$ {
  /** @deprecated use `ListSettlementsRevenueMethod$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRevenueMethod$inboundSchema;
  /** @deprecated use `ListSettlementsRevenueMethod$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRevenueMethod$outboundSchema;
}

/** @internal */
export const ListSettlementsRevenueAmountNet$inboundSchema: z.ZodType<
  ListSettlementsRevenueAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsRevenueAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsRevenueAmountNet$outboundSchema: z.ZodType<
  ListSettlementsRevenueAmountNet$Outbound,
  z.ZodTypeDef,
  ListSettlementsRevenueAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRevenueAmountNet$ {
  /** @deprecated use `ListSettlementsRevenueAmountNet$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRevenueAmountNet$inboundSchema;
  /** @deprecated use `ListSettlementsRevenueAmountNet$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRevenueAmountNet$outboundSchema;
  /** @deprecated use `ListSettlementsRevenueAmountNet$Outbound` instead. */
  export type Outbound = ListSettlementsRevenueAmountNet$Outbound;
}

export function listSettlementsRevenueAmountNetToJSON(
  listSettlementsRevenueAmountNet: ListSettlementsRevenueAmountNet,
): string {
  return JSON.stringify(
    ListSettlementsRevenueAmountNet$outboundSchema.parse(
      listSettlementsRevenueAmountNet,
    ),
  );
}

export function listSettlementsRevenueAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRevenueAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRevenueAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRevenueAmountNet' from JSON`,
  );
}

/** @internal */
export const ListSettlementsRevenueAmountVat$inboundSchema: z.ZodType<
  ListSettlementsRevenueAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsRevenueAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsRevenueAmountVat$outboundSchema: z.ZodType<
  ListSettlementsRevenueAmountVat$Outbound,
  z.ZodTypeDef,
  ListSettlementsRevenueAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRevenueAmountVat$ {
  /** @deprecated use `ListSettlementsRevenueAmountVat$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRevenueAmountVat$inboundSchema;
  /** @deprecated use `ListSettlementsRevenueAmountVat$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRevenueAmountVat$outboundSchema;
  /** @deprecated use `ListSettlementsRevenueAmountVat$Outbound` instead. */
  export type Outbound = ListSettlementsRevenueAmountVat$Outbound;
}

export function listSettlementsRevenueAmountVatToJSON(
  listSettlementsRevenueAmountVat: ListSettlementsRevenueAmountVat,
): string {
  return JSON.stringify(
    ListSettlementsRevenueAmountVat$outboundSchema.parse(
      listSettlementsRevenueAmountVat,
    ),
  );
}

export function listSettlementsRevenueAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRevenueAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRevenueAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRevenueAmountVat' from JSON`,
  );
}

/** @internal */
export const ListSettlementsRevenueAmountGross$inboundSchema: z.ZodType<
  ListSettlementsRevenueAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementsRevenueAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementsRevenueAmountGross$outboundSchema: z.ZodType<
  ListSettlementsRevenueAmountGross$Outbound,
  z.ZodTypeDef,
  ListSettlementsRevenueAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRevenueAmountGross$ {
  /** @deprecated use `ListSettlementsRevenueAmountGross$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRevenueAmountGross$inboundSchema;
  /** @deprecated use `ListSettlementsRevenueAmountGross$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementsRevenueAmountGross$outboundSchema;
  /** @deprecated use `ListSettlementsRevenueAmountGross$Outbound` instead. */
  export type Outbound = ListSettlementsRevenueAmountGross$Outbound;
}

export function listSettlementsRevenueAmountGrossToJSON(
  listSettlementsRevenueAmountGross: ListSettlementsRevenueAmountGross,
): string {
  return JSON.stringify(
    ListSettlementsRevenueAmountGross$outboundSchema.parse(
      listSettlementsRevenueAmountGross,
    ),
  );
}

export function listSettlementsRevenueAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRevenueAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRevenueAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRevenueAmountGross' from JSON`,
  );
}

/** @internal */
export const ListSettlementsRevenue$inboundSchema: z.ZodType<
  ListSettlementsRevenue,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(ListSettlementsRevenueMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => ListSettlementsRevenueAmountNet$inboundSchema)
    .optional(),
  amountVat: z.lazy(() => ListSettlementsRevenueAmountVat$inboundSchema)
    .optional(),
  amountGross: z.lazy(() => ListSettlementsRevenueAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type ListSettlementsRevenue$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  amountNet?: ListSettlementsRevenueAmountNet$Outbound | undefined;
  amountVat?: ListSettlementsRevenueAmountVat$Outbound | undefined;
  amountGross?: ListSettlementsRevenueAmountGross$Outbound | undefined;
};

/** @internal */
export const ListSettlementsRevenue$outboundSchema: z.ZodType<
  ListSettlementsRevenue$Outbound,
  z.ZodTypeDef,
  ListSettlementsRevenue
> = z.object({
  description: z.string().optional(),
  method: z.nullable(ListSettlementsRevenueMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => ListSettlementsRevenueAmountNet$outboundSchema)
    .optional(),
  amountVat: z.lazy(() => ListSettlementsRevenueAmountVat$outboundSchema)
    .optional(),
  amountGross: z.lazy(() => ListSettlementsRevenueAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRevenue$ {
  /** @deprecated use `ListSettlementsRevenue$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRevenue$inboundSchema;
  /** @deprecated use `ListSettlementsRevenue$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRevenue$outboundSchema;
  /** @deprecated use `ListSettlementsRevenue$Outbound` instead. */
  export type Outbound = ListSettlementsRevenue$Outbound;
}

export function listSettlementsRevenueToJSON(
  listSettlementsRevenue: ListSettlementsRevenue,
): string {
  return JSON.stringify(
    ListSettlementsRevenue$outboundSchema.parse(listSettlementsRevenue),
  );
}

export function listSettlementsRevenueFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRevenue' from JSON`,
  );
}

/** @internal */
export const ListSettlementsLessThanMonthGreaterThan$inboundSchema: z.ZodType<
  ListSettlementsLessThanMonthGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  costs: z.array(z.lazy(() => ListSettlementsCost$inboundSchema)).optional(),
  revenue: z.array(z.lazy(() => ListSettlementsRevenue$inboundSchema))
    .optional(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListSettlementsLessThanMonthGreaterThan$Outbound = {
  costs?: Array<ListSettlementsCost$Outbound> | undefined;
  revenue?: Array<ListSettlementsRevenue$Outbound> | undefined;
  invoiceId?: string | null | undefined;
  invoiceReference?: string | null | undefined;
};

/** @internal */
export const ListSettlementsLessThanMonthGreaterThan$outboundSchema: z.ZodType<
  ListSettlementsLessThanMonthGreaterThan$Outbound,
  z.ZodTypeDef,
  ListSettlementsLessThanMonthGreaterThan
> = z.object({
  costs: z.array(z.lazy(() => ListSettlementsCost$outboundSchema)).optional(),
  revenue: z.array(z.lazy(() => ListSettlementsRevenue$outboundSchema))
    .optional(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsLessThanMonthGreaterThan$ {
  /** @deprecated use `ListSettlementsLessThanMonthGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementsLessThanMonthGreaterThan$inboundSchema;
  /** @deprecated use `ListSettlementsLessThanMonthGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementsLessThanMonthGreaterThan$outboundSchema;
  /** @deprecated use `ListSettlementsLessThanMonthGreaterThan$Outbound` instead. */
  export type Outbound = ListSettlementsLessThanMonthGreaterThan$Outbound;
}

export function listSettlementsLessThanMonthGreaterThanToJSON(
  listSettlementsLessThanMonthGreaterThan:
    ListSettlementsLessThanMonthGreaterThan,
): string {
  return JSON.stringify(
    ListSettlementsLessThanMonthGreaterThan$outboundSchema.parse(
      listSettlementsLessThanMonthGreaterThan,
    ),
  );
}

export function listSettlementsLessThanMonthGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementsLessThanMonthGreaterThan,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementsLessThanMonthGreaterThan$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementsLessThanMonthGreaterThan' from JSON`,
  );
}

/** @internal */
export const ListSettlementsLessThanYearGreaterThan$inboundSchema: z.ZodType<
  ListSettlementsLessThanYearGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<month>": z.lazy(() => ListSettlementsLessThanMonthGreaterThan$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "<month>": "lessThanMonthGreaterThan",
  });
});

/** @internal */
export type ListSettlementsLessThanYearGreaterThan$Outbound = {
  "<month>"?: ListSettlementsLessThanMonthGreaterThan$Outbound | undefined;
};

/** @internal */
export const ListSettlementsLessThanYearGreaterThan$outboundSchema: z.ZodType<
  ListSettlementsLessThanYearGreaterThan$Outbound,
  z.ZodTypeDef,
  ListSettlementsLessThanYearGreaterThan
> = z.object({
  lessThanMonthGreaterThan: z.lazy(() =>
    ListSettlementsLessThanMonthGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanMonthGreaterThan: "<month>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsLessThanYearGreaterThan$ {
  /** @deprecated use `ListSettlementsLessThanYearGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementsLessThanYearGreaterThan$inboundSchema;
  /** @deprecated use `ListSettlementsLessThanYearGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementsLessThanYearGreaterThan$outboundSchema;
  /** @deprecated use `ListSettlementsLessThanYearGreaterThan$Outbound` instead. */
  export type Outbound = ListSettlementsLessThanYearGreaterThan$Outbound;
}

export function listSettlementsLessThanYearGreaterThanToJSON(
  listSettlementsLessThanYearGreaterThan:
    ListSettlementsLessThanYearGreaterThan,
): string {
  return JSON.stringify(
    ListSettlementsLessThanYearGreaterThan$outboundSchema.parse(
      listSettlementsLessThanYearGreaterThan,
    ),
  );
}

export function listSettlementsLessThanYearGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsLessThanYearGreaterThan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementsLessThanYearGreaterThan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsLessThanYearGreaterThan' from JSON`,
  );
}

/** @internal */
export const ListSettlementsPeriods$inboundSchema: z.ZodType<
  ListSettlementsPeriods,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<year>": z.lazy(() => ListSettlementsLessThanYearGreaterThan$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "<year>": "lessThanYearGreaterThan",
  });
});

/** @internal */
export type ListSettlementsPeriods$Outbound = {
  "<year>"?: ListSettlementsLessThanYearGreaterThan$Outbound | undefined;
};

/** @internal */
export const ListSettlementsPeriods$outboundSchema: z.ZodType<
  ListSettlementsPeriods$Outbound,
  z.ZodTypeDef,
  ListSettlementsPeriods
> = z.object({
  lessThanYearGreaterThan: z.lazy(() =>
    ListSettlementsLessThanYearGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanYearGreaterThan: "<year>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsPeriods$ {
  /** @deprecated use `ListSettlementsPeriods$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsPeriods$inboundSchema;
  /** @deprecated use `ListSettlementsPeriods$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsPeriods$outboundSchema;
  /** @deprecated use `ListSettlementsPeriods$Outbound` instead. */
  export type Outbound = ListSettlementsPeriods$Outbound;
}

export function listSettlementsPeriodsToJSON(
  listSettlementsPeriods: ListSettlementsPeriods,
): string {
  return JSON.stringify(
    ListSettlementsPeriods$outboundSchema.parse(listSettlementsPeriods),
  );
}

export function listSettlementsPeriodsFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsPeriods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsPeriods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsPeriods' from JSON`,
  );
}

/** @internal */
export const SettlementSelf$inboundSchema: z.ZodType<
  SettlementSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type SettlementSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const SettlementSelf$outboundSchema: z.ZodType<
  SettlementSelf$Outbound,
  z.ZodTypeDef,
  SettlementSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettlementSelf$ {
  /** @deprecated use `SettlementSelf$inboundSchema` instead. */
  export const inboundSchema = SettlementSelf$inboundSchema;
  /** @deprecated use `SettlementSelf$outboundSchema` instead. */
  export const outboundSchema = SettlementSelf$outboundSchema;
  /** @deprecated use `SettlementSelf$Outbound` instead. */
  export type Outbound = SettlementSelf$Outbound;
}

export function settlementSelfToJSON(settlementSelf: SettlementSelf): string {
  return JSON.stringify(SettlementSelf$outboundSchema.parse(settlementSelf));
}

export function settlementSelfFromJSON(
  jsonString: string,
): SafeParseResult<SettlementSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettlementSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettlementSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementsPayments$inboundSchema: z.ZodType<
  ListSettlementsPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsPayments$outboundSchema: z.ZodType<
  ListSettlementsPayments$Outbound,
  z.ZodTypeDef,
  ListSettlementsPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsPayments$ {
  /** @deprecated use `ListSettlementsPayments$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsPayments$inboundSchema;
  /** @deprecated use `ListSettlementsPayments$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsPayments$outboundSchema;
  /** @deprecated use `ListSettlementsPayments$Outbound` instead. */
  export type Outbound = ListSettlementsPayments$Outbound;
}

export function listSettlementsPaymentsToJSON(
  listSettlementsPayments: ListSettlementsPayments,
): string {
  return JSON.stringify(
    ListSettlementsPayments$outboundSchema.parse(listSettlementsPayments),
  );
}

export function listSettlementsPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsPayments' from JSON`,
  );
}

/** @internal */
export const ListSettlementsCaptures$inboundSchema: z.ZodType<
  ListSettlementsCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsCaptures$outboundSchema: z.ZodType<
  ListSettlementsCaptures$Outbound,
  z.ZodTypeDef,
  ListSettlementsCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsCaptures$ {
  /** @deprecated use `ListSettlementsCaptures$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsCaptures$inboundSchema;
  /** @deprecated use `ListSettlementsCaptures$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsCaptures$outboundSchema;
  /** @deprecated use `ListSettlementsCaptures$Outbound` instead. */
  export type Outbound = ListSettlementsCaptures$Outbound;
}

export function listSettlementsCapturesToJSON(
  listSettlementsCaptures: ListSettlementsCaptures,
): string {
  return JSON.stringify(
    ListSettlementsCaptures$outboundSchema.parse(listSettlementsCaptures),
  );
}

export function listSettlementsCapturesFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsCaptures' from JSON`,
  );
}

/** @internal */
export const ListSettlementsRefunds$inboundSchema: z.ZodType<
  ListSettlementsRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsRefunds$outboundSchema: z.ZodType<
  ListSettlementsRefunds$Outbound,
  z.ZodTypeDef,
  ListSettlementsRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRefunds$ {
  /** @deprecated use `ListSettlementsRefunds$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRefunds$inboundSchema;
  /** @deprecated use `ListSettlementsRefunds$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRefunds$outboundSchema;
  /** @deprecated use `ListSettlementsRefunds$Outbound` instead. */
  export type Outbound = ListSettlementsRefunds$Outbound;
}

export function listSettlementsRefundsToJSON(
  listSettlementsRefunds: ListSettlementsRefunds,
): string {
  return JSON.stringify(
    ListSettlementsRefunds$outboundSchema.parse(listSettlementsRefunds),
  );
}

export function listSettlementsRefundsFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRefunds' from JSON`,
  );
}

/** @internal */
export const ListSettlementsChargebacks$inboundSchema: z.ZodType<
  ListSettlementsChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsChargebacks$outboundSchema: z.ZodType<
  ListSettlementsChargebacks$Outbound,
  z.ZodTypeDef,
  ListSettlementsChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsChargebacks$ {
  /** @deprecated use `ListSettlementsChargebacks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsChargebacks$inboundSchema;
  /** @deprecated use `ListSettlementsChargebacks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsChargebacks$outboundSchema;
  /** @deprecated use `ListSettlementsChargebacks$Outbound` instead. */
  export type Outbound = ListSettlementsChargebacks$Outbound;
}

export function listSettlementsChargebacksToJSON(
  listSettlementsChargebacks: ListSettlementsChargebacks,
): string {
  return JSON.stringify(
    ListSettlementsChargebacks$outboundSchema.parse(listSettlementsChargebacks),
  );
}

export function listSettlementsChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsChargebacks' from JSON`,
  );
}

/** @internal */
export const ListSettlementsInvoice$inboundSchema: z.ZodType<
  ListSettlementsInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementsInvoice$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementsInvoice$outboundSchema: z.ZodType<
  ListSettlementsInvoice$Outbound,
  z.ZodTypeDef,
  ListSettlementsInvoice
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsInvoice$ {
  /** @deprecated use `ListSettlementsInvoice$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsInvoice$inboundSchema;
  /** @deprecated use `ListSettlementsInvoice$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsInvoice$outboundSchema;
  /** @deprecated use `ListSettlementsInvoice$Outbound` instead. */
  export type Outbound = ListSettlementsInvoice$Outbound;
}

export function listSettlementsInvoiceToJSON(
  listSettlementsInvoice: ListSettlementsInvoice,
): string {
  return JSON.stringify(
    ListSettlementsInvoice$outboundSchema.parse(listSettlementsInvoice),
  );
}

export function listSettlementsInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsInvoice' from JSON`,
  );
}

/** @internal */
export const SettlementDocumentation$inboundSchema: z.ZodType<
  SettlementDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type SettlementDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const SettlementDocumentation$outboundSchema: z.ZodType<
  SettlementDocumentation$Outbound,
  z.ZodTypeDef,
  SettlementDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettlementDocumentation$ {
  /** @deprecated use `SettlementDocumentation$inboundSchema` instead. */
  export const inboundSchema = SettlementDocumentation$inboundSchema;
  /** @deprecated use `SettlementDocumentation$outboundSchema` instead. */
  export const outboundSchema = SettlementDocumentation$outboundSchema;
  /** @deprecated use `SettlementDocumentation$Outbound` instead. */
  export type Outbound = SettlementDocumentation$Outbound;
}

export function settlementDocumentationToJSON(
  settlementDocumentation: SettlementDocumentation,
): string {
  return JSON.stringify(
    SettlementDocumentation$outboundSchema.parse(settlementDocumentation),
  );
}

export function settlementDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<SettlementDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettlementDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettlementDocumentation' from JSON`,
  );
}

/** @internal */
export const SettlementLinks$inboundSchema: z.ZodType<
  SettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => SettlementSelf$inboundSchema).optional(),
  payments: z.lazy(() => ListSettlementsPayments$inboundSchema).optional(),
  captures: z.lazy(() => ListSettlementsCaptures$inboundSchema).optional(),
  refunds: z.lazy(() => ListSettlementsRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => ListSettlementsChargebacks$inboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => ListSettlementsInvoice$inboundSchema))
    .optional(),
  documentation: z.lazy(() => SettlementDocumentation$inboundSchema).optional(),
});

/** @internal */
export type SettlementLinks$Outbound = {
  self?: SettlementSelf$Outbound | undefined;
  payments?: ListSettlementsPayments$Outbound | undefined;
  captures?: ListSettlementsCaptures$Outbound | undefined;
  refunds?: ListSettlementsRefunds$Outbound | undefined;
  chargebacks?: ListSettlementsChargebacks$Outbound | undefined;
  invoice?: ListSettlementsInvoice$Outbound | null | undefined;
  documentation?: SettlementDocumentation$Outbound | undefined;
};

/** @internal */
export const SettlementLinks$outboundSchema: z.ZodType<
  SettlementLinks$Outbound,
  z.ZodTypeDef,
  SettlementLinks
> = z.object({
  self: z.lazy(() => SettlementSelf$outboundSchema).optional(),
  payments: z.lazy(() => ListSettlementsPayments$outboundSchema).optional(),
  captures: z.lazy(() => ListSettlementsCaptures$outboundSchema).optional(),
  refunds: z.lazy(() => ListSettlementsRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => ListSettlementsChargebacks$outboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => ListSettlementsInvoice$outboundSchema))
    .optional(),
  documentation: z.lazy(() => SettlementDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettlementLinks$ {
  /** @deprecated use `SettlementLinks$inboundSchema` instead. */
  export const inboundSchema = SettlementLinks$inboundSchema;
  /** @deprecated use `SettlementLinks$outboundSchema` instead. */
  export const outboundSchema = SettlementLinks$outboundSchema;
  /** @deprecated use `SettlementLinks$Outbound` instead. */
  export type Outbound = SettlementLinks$Outbound;
}

export function settlementLinksToJSON(
  settlementLinks: SettlementLinks,
): string {
  return JSON.stringify(SettlementLinks$outboundSchema.parse(settlementLinks));
}

export function settlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<SettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettlementLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementsSettlement$inboundSchema: z.ZodType<
  ListSettlementsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("settlement"),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: ListSettlementsStatus$inboundSchema.optional(),
  amount: z.lazy(() => ListSettlementsAmount$inboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => ListSettlementsPeriods$inboundSchema).optional(),
  _links: z.lazy(() => SettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementsSettlement$Outbound = {
  resource: string;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: ListSettlementsAmount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | null | undefined;
  periods?: ListSettlementsPeriods$Outbound | undefined;
  _links?: SettlementLinks$Outbound | undefined;
};

/** @internal */
export const ListSettlementsSettlement$outboundSchema: z.ZodType<
  ListSettlementsSettlement$Outbound,
  z.ZodTypeDef,
  ListSettlementsSettlement
> = z.object({
  resource: z.string().default("settlement"),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: ListSettlementsStatus$outboundSchema.optional(),
  amount: z.lazy(() => ListSettlementsAmount$outboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => ListSettlementsPeriods$outboundSchema).optional(),
  links: z.lazy(() => SettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsSettlement$ {
  /** @deprecated use `ListSettlementsSettlement$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsSettlement$inboundSchema;
  /** @deprecated use `ListSettlementsSettlement$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsSettlement$outboundSchema;
  /** @deprecated use `ListSettlementsSettlement$Outbound` instead. */
  export type Outbound = ListSettlementsSettlement$Outbound;
}

export function listSettlementsSettlementToJSON(
  listSettlementsSettlement: ListSettlementsSettlement,
): string {
  return JSON.stringify(
    ListSettlementsSettlement$outboundSchema.parse(listSettlementsSettlement),
  );
}

export function listSettlementsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsSettlement' from JSON`,
  );
}

/** @internal */
export const ListSettlementsEmbedded$inboundSchema: z.ZodType<
  ListSettlementsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlements: z.array(z.lazy(() => ListSettlementsSettlement$inboundSchema))
    .optional(),
});

/** @internal */
export type ListSettlementsEmbedded$Outbound = {
  settlements?: Array<ListSettlementsSettlement$Outbound> | undefined;
};

/** @internal */
export const ListSettlementsEmbedded$outboundSchema: z.ZodType<
  ListSettlementsEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementsEmbedded
> = z.object({
  settlements: z.array(z.lazy(() => ListSettlementsSettlement$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsEmbedded$ {
  /** @deprecated use `ListSettlementsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementsEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementsEmbedded$Outbound;
}

export function listSettlementsEmbeddedToJSON(
  listSettlementsEmbedded: ListSettlementsEmbedded,
): string {
  return JSON.stringify(
    ListSettlementsEmbedded$outboundSchema.parse(listSettlementsEmbedded),
  );
}

export function listSettlementsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementsSelf$inboundSchema: z.ZodType<
  ListSettlementsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsSelf$outboundSchema: z.ZodType<
  ListSettlementsSelf$Outbound,
  z.ZodTypeDef,
  ListSettlementsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsSelf$ {
  /** @deprecated use `ListSettlementsSelf$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsSelf$inboundSchema;
  /** @deprecated use `ListSettlementsSelf$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsSelf$outboundSchema;
  /** @deprecated use `ListSettlementsSelf$Outbound` instead. */
  export type Outbound = ListSettlementsSelf$Outbound;
}

export function listSettlementsSelfToJSON(
  listSettlementsSelf: ListSettlementsSelf,
): string {
  return JSON.stringify(
    ListSettlementsSelf$outboundSchema.parse(listSettlementsSelf),
  );
}

export function listSettlementsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementsPrevious$inboundSchema: z.ZodType<
  ListSettlementsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementsPrevious$outboundSchema: z.ZodType<
  ListSettlementsPrevious$Outbound,
  z.ZodTypeDef,
  ListSettlementsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsPrevious$ {
  /** @deprecated use `ListSettlementsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsPrevious$inboundSchema;
  /** @deprecated use `ListSettlementsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsPrevious$outboundSchema;
  /** @deprecated use `ListSettlementsPrevious$Outbound` instead. */
  export type Outbound = ListSettlementsPrevious$Outbound;
}

export function listSettlementsPreviousToJSON(
  listSettlementsPrevious: ListSettlementsPrevious,
): string {
  return JSON.stringify(
    ListSettlementsPrevious$outboundSchema.parse(listSettlementsPrevious),
  );
}

export function listSettlementsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsPrevious' from JSON`,
  );
}

/** @internal */
export const ListSettlementsNext$inboundSchema: z.ZodType<
  ListSettlementsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementsNext$outboundSchema: z.ZodType<
  ListSettlementsNext$Outbound,
  z.ZodTypeDef,
  ListSettlementsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsNext$ {
  /** @deprecated use `ListSettlementsNext$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsNext$inboundSchema;
  /** @deprecated use `ListSettlementsNext$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsNext$outboundSchema;
  /** @deprecated use `ListSettlementsNext$Outbound` instead. */
  export type Outbound = ListSettlementsNext$Outbound;
}

export function listSettlementsNextToJSON(
  listSettlementsNext: ListSettlementsNext,
): string {
  return JSON.stringify(
    ListSettlementsNext$outboundSchema.parse(listSettlementsNext),
  );
}

export function listSettlementsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsNext' from JSON`,
  );
}

/** @internal */
export const ListSettlementsDocumentation$inboundSchema: z.ZodType<
  ListSettlementsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementsDocumentation$outboundSchema: z.ZodType<
  ListSettlementsDocumentation$Outbound,
  z.ZodTypeDef,
  ListSettlementsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsDocumentation$ {
  /** @deprecated use `ListSettlementsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementsDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementsDocumentation$Outbound;
}

export function listSettlementsDocumentationToJSON(
  listSettlementsDocumentation: ListSettlementsDocumentation,
): string {
  return JSON.stringify(
    ListSettlementsDocumentation$outboundSchema.parse(
      listSettlementsDocumentation,
    ),
  );
}

export function listSettlementsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementsLinks$inboundSchema: z.ZodType<
  ListSettlementsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSettlementsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListSettlementsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListSettlementsNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListSettlementsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListSettlementsLinks$Outbound = {
  self?: ListSettlementsSelf$Outbound | undefined;
  previous?: ListSettlementsPrevious$Outbound | null | undefined;
  next?: ListSettlementsNext$Outbound | null | undefined;
  documentation?: ListSettlementsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListSettlementsLinks$outboundSchema: z.ZodType<
  ListSettlementsLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementsLinks
> = z.object({
  self: z.lazy(() => ListSettlementsSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListSettlementsPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListSettlementsNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListSettlementsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsLinks$ {
  /** @deprecated use `ListSettlementsLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsLinks$inboundSchema;
  /** @deprecated use `ListSettlementsLinks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsLinks$outboundSchema;
  /** @deprecated use `ListSettlementsLinks$Outbound` instead. */
  export type Outbound = ListSettlementsLinks$Outbound;
}

export function listSettlementsLinksToJSON(
  listSettlementsLinks: ListSettlementsLinks,
): string {
  return JSON.stringify(
    ListSettlementsLinks$outboundSchema.parse(listSettlementsLinks),
  );
}

export function listSettlementsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementsResponse$inboundSchema: z.ZodType<
  ListSettlementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListSettlementsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListSettlementsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListSettlementsEmbedded$Outbound | undefined;
  _links?: ListSettlementsLinks$Outbound | undefined;
};

/** @internal */
export const ListSettlementsResponse$outboundSchema: z.ZodType<
  ListSettlementsResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListSettlementsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListSettlementsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsResponse$ {
  /** @deprecated use `ListSettlementsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsResponse$inboundSchema;
  /** @deprecated use `ListSettlementsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsResponse$outboundSchema;
  /** @deprecated use `ListSettlementsResponse$Outbound` instead. */
  export type Outbound = ListSettlementsResponse$Outbound;
}

export function listSettlementsResponseToJSON(
  listSettlementsResponse: ListSettlementsResponse,
): string {
  return JSON.stringify(
    ListSettlementsResponse$outboundSchema.parse(listSettlementsResponse),
  );
}

export function listSettlementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsResponse' from JSON`,
  );
}
