/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListSettlementsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Provide the token of the balance to filter the settlements by. This is
   *
   * @remarks
   * the balance token that the settlement was settled to.
   */
  balanceId?: string | undefined;
  /**
   * Provide the year to query the settlements. Must be used combined with `month` parameter
   */
  year?: string | null | undefined;
  /**
   * Provide the month to query the settlements. Must be used combined with `year` parameter
   */
  month?: string | null | undefined;
  /**
   * Provides the currencies to retrieve the settlements. It accepts multiple currencies in a comma-separated format.
   */
  currencies?: models.Currencies | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListSettlementsEmbedded = {
  /**
   * An array of settlement objects. For a complete reference
   *
   * @remarks
   * of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
   */
  settlements: Array<models.EntitySettlement>;
};

/**
 * A list of settlement objects. For a complete reference of the settlement
 *
 * @remarks
 * object, refer to the [Get settlement endpoint](get-settlement) documentation.
 */
export type ListSettlementsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListSettlementsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListSettlementsRequest$inboundSchema: z.ZodType<
  ListSettlementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  balanceId: z.string().optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  currencies: models.Currencies$inboundSchema.optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListSettlementsRequest$Outbound = {
  from?: string | null | undefined;
  limit?: number | null | undefined;
  balanceId?: string | undefined;
  year?: string | null | undefined;
  month?: string | null | undefined;
  currencies?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListSettlementsRequest$outboundSchema: z.ZodType<
  ListSettlementsRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementsRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  balanceId: z.string().optional(),
  year: z.nullable(z.string()).optional(),
  month: z.nullable(z.string()).optional(),
  currencies: models.Currencies$outboundSchema.optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsRequest$ {
  /** @deprecated use `ListSettlementsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsRequest$inboundSchema;
  /** @deprecated use `ListSettlementsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsRequest$outboundSchema;
  /** @deprecated use `ListSettlementsRequest$Outbound` instead. */
  export type Outbound = ListSettlementsRequest$Outbound;
}

export function listSettlementsRequestToJSON(
  listSettlementsRequest: ListSettlementsRequest,
): string {
  return JSON.stringify(
    ListSettlementsRequest$outboundSchema.parse(listSettlementsRequest),
  );
}

export function listSettlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementsEmbedded$inboundSchema: z.ZodType<
  ListSettlementsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlements: z.array(models.EntitySettlement$inboundSchema),
});

/** @internal */
export type ListSettlementsEmbedded$Outbound = {
  settlements: Array<models.EntitySettlement$Outbound>;
};

/** @internal */
export const ListSettlementsEmbedded$outboundSchema: z.ZodType<
  ListSettlementsEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementsEmbedded
> = z.object({
  settlements: z.array(models.EntitySettlement$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsEmbedded$ {
  /** @deprecated use `ListSettlementsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementsEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementsEmbedded$Outbound;
}

export function listSettlementsEmbeddedToJSON(
  listSettlementsEmbedded: ListSettlementsEmbedded,
): string {
  return JSON.stringify(
    ListSettlementsEmbedded$outboundSchema.parse(listSettlementsEmbedded),
  );
}

export function listSettlementsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementsResponse$inboundSchema: z.ZodType<
  ListSettlementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListSettlementsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementsResponse$Outbound = {
  count: number;
  _embedded: ListSettlementsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListSettlementsResponse$outboundSchema: z.ZodType<
  ListSettlementsResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListSettlementsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementsResponse$ {
  /** @deprecated use `ListSettlementsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementsResponse$inboundSchema;
  /** @deprecated use `ListSettlementsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSettlementsResponse$outboundSchema;
  /** @deprecated use `ListSettlementsResponse$Outbound` instead. */
  export type Outbound = ListSettlementsResponse$Outbound;
}

export function listSettlementsResponseToJSON(
  listSettlementsResponse: ListSettlementsResponse,
): string {
  return JSON.stringify(
    ListSettlementsResponse$outboundSchema.parse(listSettlementsResponse),
  );
}

export function listSettlementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementsResponse' from JSON`,
  );
}
