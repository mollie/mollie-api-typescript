/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListCapabilitiesStatus = {
  Unrequested: "unrequested",
  Enabled: "enabled",
  Disabled: "disabled",
  Pending: "pending",
} as const;
export type ListCapabilitiesStatus = ClosedEnum<typeof ListCapabilitiesStatus>;

export const ListCapabilitiesStatusReason = {
  RequirementPastDue: "requirement-past-due",
  OnboardingInformationNeeded: "onboarding-information-needed",
} as const;
export type ListCapabilitiesStatusReason = ClosedEnum<
  typeof ListCapabilitiesStatusReason
>;

/**
 * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled. For example, where necessary documents are to be uploaded.
 */
export type ListCapabilitiesDashboard = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

export type CapabilityLinks = {
  /**
   * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled. For example, where necessary documents are to be uploaded.
   */
  dashboard?: ListCapabilitiesDashboard | undefined;
};

export type ListCapabilitiesRequirement = {
  /**
   * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
   */
  id?: string | undefined;
  /**
   * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
   *
   * @remarks
   *
   * Possible values: `currently-due` `past-due` `requested`
   */
  status?: string | undefined;
  /**
   * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
   */
  dueDate?: string | null | undefined;
  links?: CapabilityLinks | undefined;
};

export type Capability = {
  /**
   * Always the word `capability` for this resource type.
   */
  resource?: string | undefined;
  /**
   * A unique name for this capability like `payments` / `settlements`.
   */
  name?: string | undefined;
  status?: ListCapabilitiesStatus | undefined;
  statusReason?: ListCapabilitiesStatusReason | null | undefined;
  requirements?: Array<ListCapabilitiesRequirement> | undefined;
};

export type ListCapabilitiesEmbedded = {
  capabilities?: Array<Capability> | undefined;
};

export type ListCapabilitiesDocumentation = {
  href?: string | undefined;
  type?: string | undefined;
};

export type ListCapabilitiesLinks = {
  documentation?: ListCapabilitiesDocumentation | undefined;
};

/**
 * A list of capabilities.
 */
export type ListCapabilitiesResponse = {
  /**
   * The number of items in this result set.
   */
  count?: number | undefined;
  embedded?: ListCapabilitiesEmbedded | undefined;
  links?: ListCapabilitiesLinks | undefined;
};

/** @internal */
export const ListCapabilitiesStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListCapabilitiesStatus
> = z.nativeEnum(ListCapabilitiesStatus);

/** @internal */
export const ListCapabilitiesStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListCapabilitiesStatus
> = ListCapabilitiesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesStatus$ {
  /** @deprecated use `ListCapabilitiesStatus$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesStatus$inboundSchema;
  /** @deprecated use `ListCapabilitiesStatus$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesStatus$outboundSchema;
}

/** @internal */
export const ListCapabilitiesStatusReason$inboundSchema: z.ZodNativeEnum<
  typeof ListCapabilitiesStatusReason
> = z.nativeEnum(ListCapabilitiesStatusReason);

/** @internal */
export const ListCapabilitiesStatusReason$outboundSchema: z.ZodNativeEnum<
  typeof ListCapabilitiesStatusReason
> = ListCapabilitiesStatusReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesStatusReason$ {
  /** @deprecated use `ListCapabilitiesStatusReason$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesStatusReason$inboundSchema;
  /** @deprecated use `ListCapabilitiesStatusReason$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesStatusReason$outboundSchema;
}

/** @internal */
export const ListCapabilitiesDashboard$inboundSchema: z.ZodType<
  ListCapabilitiesDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapabilitiesDashboard$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapabilitiesDashboard$outboundSchema: z.ZodType<
  ListCapabilitiesDashboard$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesDashboard
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesDashboard$ {
  /** @deprecated use `ListCapabilitiesDashboard$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesDashboard$inboundSchema;
  /** @deprecated use `ListCapabilitiesDashboard$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesDashboard$outboundSchema;
  /** @deprecated use `ListCapabilitiesDashboard$Outbound` instead. */
  export type Outbound = ListCapabilitiesDashboard$Outbound;
}

export function listCapabilitiesDashboardToJSON(
  listCapabilitiesDashboard: ListCapabilitiesDashboard,
): string {
  return JSON.stringify(
    ListCapabilitiesDashboard$outboundSchema.parse(listCapabilitiesDashboard),
  );
}

export function listCapabilitiesDashboardFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesDashboard' from JSON`,
  );
}

/** @internal */
export const CapabilityLinks$inboundSchema: z.ZodType<
  CapabilityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  dashboard: z.lazy(() => ListCapabilitiesDashboard$inboundSchema).optional(),
});

/** @internal */
export type CapabilityLinks$Outbound = {
  dashboard?: ListCapabilitiesDashboard$Outbound | undefined;
};

/** @internal */
export const CapabilityLinks$outboundSchema: z.ZodType<
  CapabilityLinks$Outbound,
  z.ZodTypeDef,
  CapabilityLinks
> = z.object({
  dashboard: z.lazy(() => ListCapabilitiesDashboard$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CapabilityLinks$ {
  /** @deprecated use `CapabilityLinks$inboundSchema` instead. */
  export const inboundSchema = CapabilityLinks$inboundSchema;
  /** @deprecated use `CapabilityLinks$outboundSchema` instead. */
  export const outboundSchema = CapabilityLinks$outboundSchema;
  /** @deprecated use `CapabilityLinks$Outbound` instead. */
  export type Outbound = CapabilityLinks$Outbound;
}

export function capabilityLinksToJSON(
  capabilityLinks: CapabilityLinks,
): string {
  return JSON.stringify(CapabilityLinks$outboundSchema.parse(capabilityLinks));
}

export function capabilityLinksFromJSON(
  jsonString: string,
): SafeParseResult<CapabilityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CapabilityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CapabilityLinks' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesRequirement$inboundSchema: z.ZodType<
  ListCapabilitiesRequirement,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: z.string().optional(),
  dueDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => CapabilityLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListCapabilitiesRequirement$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  dueDate?: string | null | undefined;
  _links?: CapabilityLinks$Outbound | undefined;
};

/** @internal */
export const ListCapabilitiesRequirement$outboundSchema: z.ZodType<
  ListCapabilitiesRequirement$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesRequirement
> = z.object({
  id: z.string().optional(),
  status: z.string().optional(),
  dueDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => CapabilityLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesRequirement$ {
  /** @deprecated use `ListCapabilitiesRequirement$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesRequirement$inboundSchema;
  /** @deprecated use `ListCapabilitiesRequirement$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesRequirement$outboundSchema;
  /** @deprecated use `ListCapabilitiesRequirement$Outbound` instead. */
  export type Outbound = ListCapabilitiesRequirement$Outbound;
}

export function listCapabilitiesRequirementToJSON(
  listCapabilitiesRequirement: ListCapabilitiesRequirement,
): string {
  return JSON.stringify(
    ListCapabilitiesRequirement$outboundSchema.parse(
      listCapabilitiesRequirement,
    ),
  );
}

export function listCapabilitiesRequirementFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesRequirement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesRequirement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesRequirement' from JSON`,
  );
}

/** @internal */
export const Capability$inboundSchema: z.ZodType<
  Capability,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: ListCapabilitiesStatus$inboundSchema.optional(),
  statusReason: z.nullable(ListCapabilitiesStatusReason$inboundSchema)
    .optional(),
  requirements: z.array(z.lazy(() => ListCapabilitiesRequirement$inboundSchema))
    .optional(),
});

/** @internal */
export type Capability$Outbound = {
  resource?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  statusReason?: string | null | undefined;
  requirements?: Array<ListCapabilitiesRequirement$Outbound> | undefined;
};

/** @internal */
export const Capability$outboundSchema: z.ZodType<
  Capability$Outbound,
  z.ZodTypeDef,
  Capability
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: ListCapabilitiesStatus$outboundSchema.optional(),
  statusReason: z.nullable(ListCapabilitiesStatusReason$outboundSchema)
    .optional(),
  requirements: z.array(
    z.lazy(() => ListCapabilitiesRequirement$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Capability$ {
  /** @deprecated use `Capability$inboundSchema` instead. */
  export const inboundSchema = Capability$inboundSchema;
  /** @deprecated use `Capability$outboundSchema` instead. */
  export const outboundSchema = Capability$outboundSchema;
  /** @deprecated use `Capability$Outbound` instead. */
  export type Outbound = Capability$Outbound;
}

export function capabilityToJSON(capability: Capability): string {
  return JSON.stringify(Capability$outboundSchema.parse(capability));
}

export function capabilityFromJSON(
  jsonString: string,
): SafeParseResult<Capability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Capability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Capability' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesEmbedded$inboundSchema: z.ZodType<
  ListCapabilitiesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  capabilities: z.array(z.lazy(() => Capability$inboundSchema)).optional(),
});

/** @internal */
export type ListCapabilitiesEmbedded$Outbound = {
  capabilities?: Array<Capability$Outbound> | undefined;
};

/** @internal */
export const ListCapabilitiesEmbedded$outboundSchema: z.ZodType<
  ListCapabilitiesEmbedded$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesEmbedded
> = z.object({
  capabilities: z.array(z.lazy(() => Capability$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesEmbedded$ {
  /** @deprecated use `ListCapabilitiesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesEmbedded$inboundSchema;
  /** @deprecated use `ListCapabilitiesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesEmbedded$outboundSchema;
  /** @deprecated use `ListCapabilitiesEmbedded$Outbound` instead. */
  export type Outbound = ListCapabilitiesEmbedded$Outbound;
}

export function listCapabilitiesEmbeddedToJSON(
  listCapabilitiesEmbedded: ListCapabilitiesEmbedded,
): string {
  return JSON.stringify(
    ListCapabilitiesEmbedded$outboundSchema.parse(listCapabilitiesEmbedded),
  );
}

export function listCapabilitiesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesDocumentation$inboundSchema: z.ZodType<
  ListCapabilitiesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapabilitiesDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapabilitiesDocumentation$outboundSchema: z.ZodType<
  ListCapabilitiesDocumentation$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesDocumentation$ {
  /** @deprecated use `ListCapabilitiesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesDocumentation$inboundSchema;
  /** @deprecated use `ListCapabilitiesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesDocumentation$outboundSchema;
  /** @deprecated use `ListCapabilitiesDocumentation$Outbound` instead. */
  export type Outbound = ListCapabilitiesDocumentation$Outbound;
}

export function listCapabilitiesDocumentationToJSON(
  listCapabilitiesDocumentation: ListCapabilitiesDocumentation,
): string {
  return JSON.stringify(
    ListCapabilitiesDocumentation$outboundSchema.parse(
      listCapabilitiesDocumentation,
    ),
  );
}

export function listCapabilitiesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesLinks$inboundSchema: z.ZodType<
  ListCapabilitiesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListCapabilitiesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListCapabilitiesLinks$Outbound = {
  documentation?: ListCapabilitiesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListCapabilitiesLinks$outboundSchema: z.ZodType<
  ListCapabilitiesLinks$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesLinks
> = z.object({
  documentation: z.lazy(() => ListCapabilitiesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesLinks$ {
  /** @deprecated use `ListCapabilitiesLinks$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesLinks$inboundSchema;
  /** @deprecated use `ListCapabilitiesLinks$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesLinks$outboundSchema;
  /** @deprecated use `ListCapabilitiesLinks$Outbound` instead. */
  export type Outbound = ListCapabilitiesLinks$Outbound;
}

export function listCapabilitiesLinksToJSON(
  listCapabilitiesLinks: ListCapabilitiesLinks,
): string {
  return JSON.stringify(
    ListCapabilitiesLinks$outboundSchema.parse(listCapabilitiesLinks),
  );
}

export function listCapabilitiesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesLinks' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesResponse$inboundSchema: z.ZodType<
  ListCapabilitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListCapabilitiesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListCapabilitiesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListCapabilitiesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListCapabilitiesEmbedded$Outbound | undefined;
  _links?: ListCapabilitiesLinks$Outbound | undefined;
};

/** @internal */
export const ListCapabilitiesResponse$outboundSchema: z.ZodType<
  ListCapabilitiesResponse$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListCapabilitiesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListCapabilitiesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesResponse$ {
  /** @deprecated use `ListCapabilitiesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesResponse$inboundSchema;
  /** @deprecated use `ListCapabilitiesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesResponse$outboundSchema;
  /** @deprecated use `ListCapabilitiesResponse$Outbound` instead. */
  export type Outbound = ListCapabilitiesResponse$Outbound;
}

export function listCapabilitiesResponseToJSON(
  listCapabilitiesResponse: ListCapabilitiesResponse,
): string {
  return JSON.stringify(
    ListCapabilitiesResponse$outboundSchema.parse(listCapabilitiesResponse),
  );
}

export function listCapabilitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesResponse' from JSON`,
  );
}
