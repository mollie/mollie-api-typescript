/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListCapabilitiesEmbedded = {
  capabilities?: Array<models.EntityCapability> | undefined;
};

export type Documentation = {
  href?: string | undefined;
  type?: string | undefined;
};

export type ListCapabilitiesLinks = {
  documentation?: Documentation | undefined;
};

/**
 * A list of capabilities.
 */
export type ListCapabilitiesResponse = {
  /**
   * The number of items in this result set.
   */
  count?: number | undefined;
  embedded?: ListCapabilitiesEmbedded | undefined;
  links?: ListCapabilitiesLinks | undefined;
};

/** @internal */
export const ListCapabilitiesEmbedded$inboundSchema: z.ZodType<
  ListCapabilitiesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  capabilities: z.array(models.EntityCapability$inboundSchema).optional(),
});

/** @internal */
export type ListCapabilitiesEmbedded$Outbound = {
  capabilities?: Array<models.EntityCapability$Outbound> | undefined;
};

/** @internal */
export const ListCapabilitiesEmbedded$outboundSchema: z.ZodType<
  ListCapabilitiesEmbedded$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesEmbedded
> = z.object({
  capabilities: z.array(models.EntityCapability$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesEmbedded$ {
  /** @deprecated use `ListCapabilitiesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesEmbedded$inboundSchema;
  /** @deprecated use `ListCapabilitiesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesEmbedded$outboundSchema;
  /** @deprecated use `ListCapabilitiesEmbedded$Outbound` instead. */
  export type Outbound = ListCapabilitiesEmbedded$Outbound;
}

export function listCapabilitiesEmbeddedToJSON(
  listCapabilitiesEmbedded: ListCapabilitiesEmbedded,
): string {
  return JSON.stringify(
    ListCapabilitiesEmbedded$outboundSchema.parse(listCapabilitiesEmbedded),
  );
}

export function listCapabilitiesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesEmbedded' from JSON`,
  );
}

/** @internal */
export const Documentation$inboundSchema: z.ZodType<
  Documentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Documentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Documentation$outboundSchema: z.ZodType<
  Documentation$Outbound,
  z.ZodTypeDef,
  Documentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documentation$ {
  /** @deprecated use `Documentation$inboundSchema` instead. */
  export const inboundSchema = Documentation$inboundSchema;
  /** @deprecated use `Documentation$outboundSchema` instead. */
  export const outboundSchema = Documentation$outboundSchema;
  /** @deprecated use `Documentation$Outbound` instead. */
  export type Outbound = Documentation$Outbound;
}

export function documentationToJSON(documentation: Documentation): string {
  return JSON.stringify(Documentation$outboundSchema.parse(documentation));
}

export function documentationFromJSON(
  jsonString: string,
): SafeParseResult<Documentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Documentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Documentation' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesLinks$inboundSchema: z.ZodType<
  ListCapabilitiesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => Documentation$inboundSchema).optional(),
});

/** @internal */
export type ListCapabilitiesLinks$Outbound = {
  documentation?: Documentation$Outbound | undefined;
};

/** @internal */
export const ListCapabilitiesLinks$outboundSchema: z.ZodType<
  ListCapabilitiesLinks$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesLinks
> = z.object({
  documentation: z.lazy(() => Documentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesLinks$ {
  /** @deprecated use `ListCapabilitiesLinks$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesLinks$inboundSchema;
  /** @deprecated use `ListCapabilitiesLinks$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesLinks$outboundSchema;
  /** @deprecated use `ListCapabilitiesLinks$Outbound` instead. */
  export type Outbound = ListCapabilitiesLinks$Outbound;
}

export function listCapabilitiesLinksToJSON(
  listCapabilitiesLinks: ListCapabilitiesLinks,
): string {
  return JSON.stringify(
    ListCapabilitiesLinks$outboundSchema.parse(listCapabilitiesLinks),
  );
}

export function listCapabilitiesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesLinks' from JSON`,
  );
}

/** @internal */
export const ListCapabilitiesResponse$inboundSchema: z.ZodType<
  ListCapabilitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListCapabilitiesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListCapabilitiesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListCapabilitiesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListCapabilitiesEmbedded$Outbound | undefined;
  _links?: ListCapabilitiesLinks$Outbound | undefined;
};

/** @internal */
export const ListCapabilitiesResponse$outboundSchema: z.ZodType<
  ListCapabilitiesResponse$Outbound,
  z.ZodTypeDef,
  ListCapabilitiesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListCapabilitiesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListCapabilitiesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapabilitiesResponse$ {
  /** @deprecated use `ListCapabilitiesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCapabilitiesResponse$inboundSchema;
  /** @deprecated use `ListCapabilitiesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCapabilitiesResponse$outboundSchema;
  /** @deprecated use `ListCapabilitiesResponse$Outbound` instead. */
  export type Outbound = ListCapabilitiesResponse$Outbound;
}

export function listCapabilitiesResponseToJSON(
  listCapabilitiesResponse: ListCapabilitiesResponse,
): string {
  return JSON.stringify(
    ListCapabilitiesResponse$outboundSchema.parse(listCapabilitiesResponse),
  );
}

export function listCapabilitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCapabilitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCapabilitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCapabilitiesResponse' from JSON`,
  );
}
