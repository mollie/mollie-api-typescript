/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount captured. If no amount is provided, the full authorized amount is captured.
 */
export type CreateCaptureAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type CreateCaptureMetadataRequest = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateCaptureMetadataRequestUnion =
  | CreateCaptureMetadataRequest
  | string
  | Array<string>;

export type CreateCaptureRequestBody = {
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * The amount captured. If no amount is provided, the full authorized amount is captured.
   */
  amount?: CreateCaptureAmountRequest | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateCaptureMetadataRequest
    | string
    | Array<string>
    | null
    | undefined;
};

export type CreateCaptureRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  requestBody?: CreateCaptureRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateCaptureUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type CreateCaptureUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateCaptureUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateCaptureNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CreateCaptureNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateCaptureNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const CreateCaptureMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type CreateCaptureMode = ClosedEnum<typeof CreateCaptureMode>;

/**
 * The amount captured. If no amount is provided, the full authorized amount is captured.
 */
export type CreateCaptureAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the
 *
 * @remarks
 * currency your account is settled in.
 *
 * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
 * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
 * instead.
 */
export type CreateCaptureSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The capture's status.
 */
export const CreateCaptureStatus = {
  Pending: "pending",
  Succeeded: "succeeded",
  Failed: "failed",
} as const;
/**
 * The capture's status.
 */
export type CreateCaptureStatus = ClosedEnum<typeof CreateCaptureStatus>;

export type CreateCaptureMetadataResponse = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateCaptureMetadataResponseUnion =
  | CreateCaptureMetadataResponse
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateCaptureSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this capture belongs to.
 */
export type CreateCapturePayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
 *
 * @remarks
 * not yet settled.
 */
export type CreateCaptureSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
 *
 * @remarks
 * it isn't associated with a shipment.
 */
export type CreateCaptureShipment = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateCaptureDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateCaptureLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: CreateCaptureSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this capture belongs to.
   */
  payment: CreateCapturePayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
   *
   * @remarks
   * not yet settled.
   */
  settlement?: CreateCaptureSettlement | null | undefined;
  /**
   * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
   *
   * @remarks
   * it isn't associated with a shipment.
   */
  shipment?: CreateCaptureShipment | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: CreateCaptureDocumentation;
};

/**
 * The newly created capture object. For a complete reference of the
 *
 * @remarks
 * capture object, refer to the [Get capture endpoint](get-capture) documentation.
 */
export type CreateCaptureResponse = {
  /**
   * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: CreateCaptureMode;
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * The amount captured. If no amount is provided, the full authorized amount is captured.
   */
  amount: CreateCaptureAmountResponse | null;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the
   *
   * @remarks
   * currency your account is settled in.
   *
   * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
   * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
   * instead.
   */
  settlementAmount?: CreateCaptureSettlementAmount | null | undefined;
  /**
   * The capture's status.
   */
  status: CreateCaptureStatus;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateCaptureMetadataResponse
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
   *
   * @remarks
   * `shp_gNapNy9qQTUFZYnCrCF7J`.
   */
  shipmentId?: string | null | undefined;
  /**
   * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
   *
   * @remarks
   * is omitted if the capture is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: CreateCaptureLinks;
};

/** @internal */
export const CreateCaptureAmountRequest$inboundSchema: z.ZodType<
  CreateCaptureAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateCaptureAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateCaptureAmountRequest$outboundSchema: z.ZodType<
  CreateCaptureAmountRequest$Outbound,
  z.ZodTypeDef,
  CreateCaptureAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureAmountRequest$ {
  /** @deprecated use `CreateCaptureAmountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureAmountRequest$inboundSchema;
  /** @deprecated use `CreateCaptureAmountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureAmountRequest$outboundSchema;
  /** @deprecated use `CreateCaptureAmountRequest$Outbound` instead. */
  export type Outbound = CreateCaptureAmountRequest$Outbound;
}

export function createCaptureAmountRequestToJSON(
  createCaptureAmountRequest: CreateCaptureAmountRequest,
): string {
  return JSON.stringify(
    CreateCaptureAmountRequest$outboundSchema.parse(createCaptureAmountRequest),
  );
}

export function createCaptureAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureAmountRequest' from JSON`,
  );
}

/** @internal */
export const CreateCaptureMetadataRequest$inboundSchema: z.ZodType<
  CreateCaptureMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateCaptureMetadataRequest$Outbound = {};

/** @internal */
export const CreateCaptureMetadataRequest$outboundSchema: z.ZodType<
  CreateCaptureMetadataRequest$Outbound,
  z.ZodTypeDef,
  CreateCaptureMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureMetadataRequest$ {
  /** @deprecated use `CreateCaptureMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureMetadataRequest$inboundSchema;
  /** @deprecated use `CreateCaptureMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureMetadataRequest$outboundSchema;
  /** @deprecated use `CreateCaptureMetadataRequest$Outbound` instead. */
  export type Outbound = CreateCaptureMetadataRequest$Outbound;
}

export function createCaptureMetadataRequestToJSON(
  createCaptureMetadataRequest: CreateCaptureMetadataRequest,
): string {
  return JSON.stringify(
    CreateCaptureMetadataRequest$outboundSchema.parse(
      createCaptureMetadataRequest,
    ),
  );
}

export function createCaptureMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureMetadataRequest' from JSON`,
  );
}

/** @internal */
export const CreateCaptureMetadataRequestUnion$inboundSchema: z.ZodType<
  CreateCaptureMetadataRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCaptureMetadataRequest$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateCaptureMetadataRequestUnion$Outbound =
  | CreateCaptureMetadataRequest$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateCaptureMetadataRequestUnion$outboundSchema: z.ZodType<
  CreateCaptureMetadataRequestUnion$Outbound,
  z.ZodTypeDef,
  CreateCaptureMetadataRequestUnion
> = z.union([
  z.lazy(() => CreateCaptureMetadataRequest$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureMetadataRequestUnion$ {
  /** @deprecated use `CreateCaptureMetadataRequestUnion$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureMetadataRequestUnion$inboundSchema;
  /** @deprecated use `CreateCaptureMetadataRequestUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateCaptureMetadataRequestUnion$outboundSchema;
  /** @deprecated use `CreateCaptureMetadataRequestUnion$Outbound` instead. */
  export type Outbound = CreateCaptureMetadataRequestUnion$Outbound;
}

export function createCaptureMetadataRequestUnionToJSON(
  createCaptureMetadataRequestUnion: CreateCaptureMetadataRequestUnion,
): string {
  return JSON.stringify(
    CreateCaptureMetadataRequestUnion$outboundSchema.parse(
      createCaptureMetadataRequestUnion,
    ),
  );
}

export function createCaptureMetadataRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureMetadataRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureMetadataRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureMetadataRequestUnion' from JSON`,
  );
}

/** @internal */
export const CreateCaptureRequestBody$inboundSchema: z.ZodType<
  CreateCaptureRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => CreateCaptureAmountRequest$inboundSchema))
    .optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCaptureMetadataRequest$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
});

/** @internal */
export type CreateCaptureRequestBody$Outbound = {
  description?: string | undefined;
  amount?: CreateCaptureAmountRequest$Outbound | null | undefined;
  metadata?:
    | CreateCaptureMetadataRequest$Outbound
    | string
    | Array<string>
    | null
    | undefined;
};

/** @internal */
export const CreateCaptureRequestBody$outboundSchema: z.ZodType<
  CreateCaptureRequestBody$Outbound,
  z.ZodTypeDef,
  CreateCaptureRequestBody
> = z.object({
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => CreateCaptureAmountRequest$outboundSchema))
    .optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCaptureMetadataRequest$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureRequestBody$ {
  /** @deprecated use `CreateCaptureRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureRequestBody$inboundSchema;
  /** @deprecated use `CreateCaptureRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureRequestBody$outboundSchema;
  /** @deprecated use `CreateCaptureRequestBody$Outbound` instead. */
  export type Outbound = CreateCaptureRequestBody$Outbound;
}

export function createCaptureRequestBodyToJSON(
  createCaptureRequestBody: CreateCaptureRequestBody,
): string {
  return JSON.stringify(
    CreateCaptureRequestBody$outboundSchema.parse(createCaptureRequestBody),
  );
}

export function createCaptureRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateCaptureRequest$inboundSchema: z.ZodType<
  CreateCaptureRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  RequestBody: z.lazy(() => CreateCaptureRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateCaptureRequest$Outbound = {
  paymentId: string;
  RequestBody?: CreateCaptureRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateCaptureRequest$outboundSchema: z.ZodType<
  CreateCaptureRequest$Outbound,
  z.ZodTypeDef,
  CreateCaptureRequest
> = z.object({
  paymentId: z.string(),
  requestBody: z.lazy(() => CreateCaptureRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureRequest$ {
  /** @deprecated use `CreateCaptureRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureRequest$inboundSchema;
  /** @deprecated use `CreateCaptureRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureRequest$outboundSchema;
  /** @deprecated use `CreateCaptureRequest$Outbound` instead. */
  export type Outbound = CreateCaptureRequest$Outbound;
}

export function createCaptureRequestToJSON(
  createCaptureRequest: CreateCaptureRequest,
): string {
  return JSON.stringify(
    CreateCaptureRequest$outboundSchema.parse(createCaptureRequest),
  );
}

export function createCaptureRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureRequest' from JSON`,
  );
}

/** @internal */
export const CreateCaptureUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    CreateCaptureUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type CreateCaptureUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCaptureUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    CreateCaptureUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    CreateCaptureUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureUnprocessableEntityDocumentation$ {
  /** @deprecated use `CreateCaptureUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateCaptureUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `CreateCaptureUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateCaptureUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `CreateCaptureUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = CreateCaptureUnprocessableEntityDocumentation$Outbound;
}

export function createCaptureUnprocessableEntityDocumentationToJSON(
  createCaptureUnprocessableEntityDocumentation:
    CreateCaptureUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    CreateCaptureUnprocessableEntityDocumentation$outboundSchema.parse(
      createCaptureUnprocessableEntityDocumentation,
    ),
  );
}

export function createCaptureUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCaptureUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCaptureUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCaptureUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateCaptureUnprocessableEntityLinks$inboundSchema: z.ZodType<
  CreateCaptureUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateCaptureUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateCaptureUnprocessableEntityLinks$Outbound = {
  documentation: CreateCaptureUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const CreateCaptureUnprocessableEntityLinks$outboundSchema: z.ZodType<
  CreateCaptureUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  CreateCaptureUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateCaptureUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureUnprocessableEntityLinks$ {
  /** @deprecated use `CreateCaptureUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateCaptureUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `CreateCaptureUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateCaptureUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `CreateCaptureUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = CreateCaptureUnprocessableEntityLinks$Outbound;
}

export function createCaptureUnprocessableEntityLinksToJSON(
  createCaptureUnprocessableEntityLinks: CreateCaptureUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    CreateCaptureUnprocessableEntityLinks$outboundSchema.parse(
      createCaptureUnprocessableEntityLinks,
    ),
  );
}

export function createCaptureUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCaptureUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const CreateCaptureNotFoundDocumentation$inboundSchema: z.ZodType<
  CreateCaptureNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCaptureNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCaptureNotFoundDocumentation$outboundSchema: z.ZodType<
  CreateCaptureNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateCaptureNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureNotFoundDocumentation$ {
  /** @deprecated use `CreateCaptureNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CreateCaptureNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateCaptureNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CreateCaptureNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CreateCaptureNotFoundDocumentation$Outbound;
}

export function createCaptureNotFoundDocumentationToJSON(
  createCaptureNotFoundDocumentation: CreateCaptureNotFoundDocumentation,
): string {
  return JSON.stringify(
    CreateCaptureNotFoundDocumentation$outboundSchema.parse(
      createCaptureNotFoundDocumentation,
    ),
  );
}

export function createCaptureNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCaptureNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateCaptureNotFoundLinks$inboundSchema: z.ZodType<
  CreateCaptureNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => CreateCaptureNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type CreateCaptureNotFoundLinks$Outbound = {
  documentation: CreateCaptureNotFoundDocumentation$Outbound;
};

/** @internal */
export const CreateCaptureNotFoundLinks$outboundSchema: z.ZodType<
  CreateCaptureNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CreateCaptureNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateCaptureNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureNotFoundLinks$ {
  /** @deprecated use `CreateCaptureNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureNotFoundLinks$inboundSchema;
  /** @deprecated use `CreateCaptureNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureNotFoundLinks$outboundSchema;
  /** @deprecated use `CreateCaptureNotFoundLinks$Outbound` instead. */
  export type Outbound = CreateCaptureNotFoundLinks$Outbound;
}

export function createCaptureNotFoundLinksToJSON(
  createCaptureNotFoundLinks: CreateCaptureNotFoundLinks,
): string {
  return JSON.stringify(
    CreateCaptureNotFoundLinks$outboundSchema.parse(createCaptureNotFoundLinks),
  );
}

export function createCaptureNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CreateCaptureMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateCaptureMode
> = z.nativeEnum(CreateCaptureMode);

/** @internal */
export const CreateCaptureMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateCaptureMode
> = CreateCaptureMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureMode$ {
  /** @deprecated use `CreateCaptureMode$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureMode$inboundSchema;
  /** @deprecated use `CreateCaptureMode$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureMode$outboundSchema;
}

/** @internal */
export const CreateCaptureAmountResponse$inboundSchema: z.ZodType<
  CreateCaptureAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateCaptureAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateCaptureAmountResponse$outboundSchema: z.ZodType<
  CreateCaptureAmountResponse$Outbound,
  z.ZodTypeDef,
  CreateCaptureAmountResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureAmountResponse$ {
  /** @deprecated use `CreateCaptureAmountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureAmountResponse$inboundSchema;
  /** @deprecated use `CreateCaptureAmountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureAmountResponse$outboundSchema;
  /** @deprecated use `CreateCaptureAmountResponse$Outbound` instead. */
  export type Outbound = CreateCaptureAmountResponse$Outbound;
}

export function createCaptureAmountResponseToJSON(
  createCaptureAmountResponse: CreateCaptureAmountResponse,
): string {
  return JSON.stringify(
    CreateCaptureAmountResponse$outboundSchema.parse(
      createCaptureAmountResponse,
    ),
  );
}

export function createCaptureAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureAmountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureAmountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureAmountResponse' from JSON`,
  );
}

/** @internal */
export const CreateCaptureSettlementAmount$inboundSchema: z.ZodType<
  CreateCaptureSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateCaptureSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateCaptureSettlementAmount$outboundSchema: z.ZodType<
  CreateCaptureSettlementAmount$Outbound,
  z.ZodTypeDef,
  CreateCaptureSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureSettlementAmount$ {
  /** @deprecated use `CreateCaptureSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureSettlementAmount$inboundSchema;
  /** @deprecated use `CreateCaptureSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureSettlementAmount$outboundSchema;
  /** @deprecated use `CreateCaptureSettlementAmount$Outbound` instead. */
  export type Outbound = CreateCaptureSettlementAmount$Outbound;
}

export function createCaptureSettlementAmountToJSON(
  createCaptureSettlementAmount: CreateCaptureSettlementAmount,
): string {
  return JSON.stringify(
    CreateCaptureSettlementAmount$outboundSchema.parse(
      createCaptureSettlementAmount,
    ),
  );
}

export function createCaptureSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureSettlementAmount' from JSON`,
  );
}

/** @internal */
export const CreateCaptureStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateCaptureStatus
> = z.nativeEnum(CreateCaptureStatus);

/** @internal */
export const CreateCaptureStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateCaptureStatus
> = CreateCaptureStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureStatus$ {
  /** @deprecated use `CreateCaptureStatus$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureStatus$inboundSchema;
  /** @deprecated use `CreateCaptureStatus$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureStatus$outboundSchema;
}

/** @internal */
export const CreateCaptureMetadataResponse$inboundSchema: z.ZodType<
  CreateCaptureMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateCaptureMetadataResponse$Outbound = {};

/** @internal */
export const CreateCaptureMetadataResponse$outboundSchema: z.ZodType<
  CreateCaptureMetadataResponse$Outbound,
  z.ZodTypeDef,
  CreateCaptureMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureMetadataResponse$ {
  /** @deprecated use `CreateCaptureMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureMetadataResponse$inboundSchema;
  /** @deprecated use `CreateCaptureMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureMetadataResponse$outboundSchema;
  /** @deprecated use `CreateCaptureMetadataResponse$Outbound` instead. */
  export type Outbound = CreateCaptureMetadataResponse$Outbound;
}

export function createCaptureMetadataResponseToJSON(
  createCaptureMetadataResponse: CreateCaptureMetadataResponse,
): string {
  return JSON.stringify(
    CreateCaptureMetadataResponse$outboundSchema.parse(
      createCaptureMetadataResponse,
    ),
  );
}

export function createCaptureMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureMetadataResponse' from JSON`,
  );
}

/** @internal */
export const CreateCaptureMetadataResponseUnion$inboundSchema: z.ZodType<
  CreateCaptureMetadataResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCaptureMetadataResponse$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateCaptureMetadataResponseUnion$Outbound =
  | CreateCaptureMetadataResponse$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateCaptureMetadataResponseUnion$outboundSchema: z.ZodType<
  CreateCaptureMetadataResponseUnion$Outbound,
  z.ZodTypeDef,
  CreateCaptureMetadataResponseUnion
> = z.union([
  z.lazy(() => CreateCaptureMetadataResponse$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureMetadataResponseUnion$ {
  /** @deprecated use `CreateCaptureMetadataResponseUnion$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureMetadataResponseUnion$inboundSchema;
  /** @deprecated use `CreateCaptureMetadataResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateCaptureMetadataResponseUnion$outboundSchema;
  /** @deprecated use `CreateCaptureMetadataResponseUnion$Outbound` instead. */
  export type Outbound = CreateCaptureMetadataResponseUnion$Outbound;
}

export function createCaptureMetadataResponseUnionToJSON(
  createCaptureMetadataResponseUnion: CreateCaptureMetadataResponseUnion,
): string {
  return JSON.stringify(
    CreateCaptureMetadataResponseUnion$outboundSchema.parse(
      createCaptureMetadataResponseUnion,
    ),
  );
}

export function createCaptureMetadataResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureMetadataResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCaptureMetadataResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureMetadataResponseUnion' from JSON`,
  );
}

/** @internal */
export const CreateCaptureSelf$inboundSchema: z.ZodType<
  CreateCaptureSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCaptureSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCaptureSelf$outboundSchema: z.ZodType<
  CreateCaptureSelf$Outbound,
  z.ZodTypeDef,
  CreateCaptureSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureSelf$ {
  /** @deprecated use `CreateCaptureSelf$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureSelf$inboundSchema;
  /** @deprecated use `CreateCaptureSelf$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureSelf$outboundSchema;
  /** @deprecated use `CreateCaptureSelf$Outbound` instead. */
  export type Outbound = CreateCaptureSelf$Outbound;
}

export function createCaptureSelfToJSON(
  createCaptureSelf: CreateCaptureSelf,
): string {
  return JSON.stringify(
    CreateCaptureSelf$outboundSchema.parse(createCaptureSelf),
  );
}

export function createCaptureSelfFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureSelf' from JSON`,
  );
}

/** @internal */
export const CreateCapturePayment$inboundSchema: z.ZodType<
  CreateCapturePayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCapturePayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCapturePayment$outboundSchema: z.ZodType<
  CreateCapturePayment$Outbound,
  z.ZodTypeDef,
  CreateCapturePayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCapturePayment$ {
  /** @deprecated use `CreateCapturePayment$inboundSchema` instead. */
  export const inboundSchema = CreateCapturePayment$inboundSchema;
  /** @deprecated use `CreateCapturePayment$outboundSchema` instead. */
  export const outboundSchema = CreateCapturePayment$outboundSchema;
  /** @deprecated use `CreateCapturePayment$Outbound` instead. */
  export type Outbound = CreateCapturePayment$Outbound;
}

export function createCapturePaymentToJSON(
  createCapturePayment: CreateCapturePayment,
): string {
  return JSON.stringify(
    CreateCapturePayment$outboundSchema.parse(createCapturePayment),
  );
}

export function createCapturePaymentFromJSON(
  jsonString: string,
): SafeParseResult<CreateCapturePayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCapturePayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCapturePayment' from JSON`,
  );
}

/** @internal */
export const CreateCaptureSettlement$inboundSchema: z.ZodType<
  CreateCaptureSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type CreateCaptureSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CreateCaptureSettlement$outboundSchema: z.ZodType<
  CreateCaptureSettlement$Outbound,
  z.ZodTypeDef,
  CreateCaptureSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureSettlement$ {
  /** @deprecated use `CreateCaptureSettlement$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureSettlement$inboundSchema;
  /** @deprecated use `CreateCaptureSettlement$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureSettlement$outboundSchema;
  /** @deprecated use `CreateCaptureSettlement$Outbound` instead. */
  export type Outbound = CreateCaptureSettlement$Outbound;
}

export function createCaptureSettlementToJSON(
  createCaptureSettlement: CreateCaptureSettlement,
): string {
  return JSON.stringify(
    CreateCaptureSettlement$outboundSchema.parse(createCaptureSettlement),
  );
}

export function createCaptureSettlementFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureSettlement' from JSON`,
  );
}

/** @internal */
export const CreateCaptureShipment$inboundSchema: z.ZodType<
  CreateCaptureShipment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type CreateCaptureShipment$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CreateCaptureShipment$outboundSchema: z.ZodType<
  CreateCaptureShipment$Outbound,
  z.ZodTypeDef,
  CreateCaptureShipment
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureShipment$ {
  /** @deprecated use `CreateCaptureShipment$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureShipment$inboundSchema;
  /** @deprecated use `CreateCaptureShipment$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureShipment$outboundSchema;
  /** @deprecated use `CreateCaptureShipment$Outbound` instead. */
  export type Outbound = CreateCaptureShipment$Outbound;
}

export function createCaptureShipmentToJSON(
  createCaptureShipment: CreateCaptureShipment,
): string {
  return JSON.stringify(
    CreateCaptureShipment$outboundSchema.parse(createCaptureShipment),
  );
}

export function createCaptureShipmentFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureShipment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureShipment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureShipment' from JSON`,
  );
}

/** @internal */
export const CreateCaptureDocumentation$inboundSchema: z.ZodType<
  CreateCaptureDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateCaptureDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateCaptureDocumentation$outboundSchema: z.ZodType<
  CreateCaptureDocumentation$Outbound,
  z.ZodTypeDef,
  CreateCaptureDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureDocumentation$ {
  /** @deprecated use `CreateCaptureDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureDocumentation$inboundSchema;
  /** @deprecated use `CreateCaptureDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureDocumentation$outboundSchema;
  /** @deprecated use `CreateCaptureDocumentation$Outbound` instead. */
  export type Outbound = CreateCaptureDocumentation$Outbound;
}

export function createCaptureDocumentationToJSON(
  createCaptureDocumentation: CreateCaptureDocumentation,
): string {
  return JSON.stringify(
    CreateCaptureDocumentation$outboundSchema.parse(createCaptureDocumentation),
  );
}

export function createCaptureDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateCaptureLinks$inboundSchema: z.ZodType<
  CreateCaptureLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CreateCaptureSelf$inboundSchema),
  payment: z.lazy(() => CreateCapturePayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => CreateCaptureSettlement$inboundSchema))
    .optional(),
  shipment: z.nullable(z.lazy(() => CreateCaptureShipment$inboundSchema))
    .optional(),
  documentation: z.lazy(() => CreateCaptureDocumentation$inboundSchema),
});

/** @internal */
export type CreateCaptureLinks$Outbound = {
  self: CreateCaptureSelf$Outbound;
  payment: CreateCapturePayment$Outbound;
  settlement?: CreateCaptureSettlement$Outbound | null | undefined;
  shipment?: CreateCaptureShipment$Outbound | null | undefined;
  documentation: CreateCaptureDocumentation$Outbound;
};

/** @internal */
export const CreateCaptureLinks$outboundSchema: z.ZodType<
  CreateCaptureLinks$Outbound,
  z.ZodTypeDef,
  CreateCaptureLinks
> = z.object({
  self: z.lazy(() => CreateCaptureSelf$outboundSchema),
  payment: z.lazy(() => CreateCapturePayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => CreateCaptureSettlement$outboundSchema))
    .optional(),
  shipment: z.nullable(z.lazy(() => CreateCaptureShipment$outboundSchema))
    .optional(),
  documentation: z.lazy(() => CreateCaptureDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureLinks$ {
  /** @deprecated use `CreateCaptureLinks$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureLinks$inboundSchema;
  /** @deprecated use `CreateCaptureLinks$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureLinks$outboundSchema;
  /** @deprecated use `CreateCaptureLinks$Outbound` instead. */
  export type Outbound = CreateCaptureLinks$Outbound;
}

export function createCaptureLinksToJSON(
  createCaptureLinks: CreateCaptureLinks,
): string {
  return JSON.stringify(
    CreateCaptureLinks$outboundSchema.parse(createCaptureLinks),
  );
}

export function createCaptureLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureLinks' from JSON`,
  );
}

/** @internal */
export const CreateCaptureResponse$inboundSchema: z.ZodType<
  CreateCaptureResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: CreateCaptureMode$inboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => CreateCaptureAmountResponse$inboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => CreateCaptureSettlementAmount$inboundSchema),
  ).optional(),
  status: CreateCaptureStatus$inboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCaptureMetadataResponse$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  _links: z.lazy(() => CreateCaptureLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCaptureResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description?: string | undefined;
  amount: CreateCaptureAmountResponse$Outbound | null;
  settlementAmount?: CreateCaptureSettlementAmount$Outbound | null | undefined;
  status: string;
  metadata?:
    | CreateCaptureMetadataResponse$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId: string;
  shipmentId?: string | null | undefined;
  settlementId?: string | null | undefined;
  createdAt: string;
  _links: CreateCaptureLinks$Outbound;
};

/** @internal */
export const CreateCaptureResponse$outboundSchema: z.ZodType<
  CreateCaptureResponse$Outbound,
  z.ZodTypeDef,
  CreateCaptureResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: CreateCaptureMode$outboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => CreateCaptureAmountResponse$outboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => CreateCaptureSettlementAmount$outboundSchema),
  ).optional(),
  status: CreateCaptureStatus$outboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateCaptureMetadataResponse$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  links: z.lazy(() => CreateCaptureLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCaptureResponse$ {
  /** @deprecated use `CreateCaptureResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCaptureResponse$inboundSchema;
  /** @deprecated use `CreateCaptureResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCaptureResponse$outboundSchema;
  /** @deprecated use `CreateCaptureResponse$Outbound` instead. */
  export type Outbound = CreateCaptureResponse$Outbound;
}

export function createCaptureResponseToJSON(
  createCaptureResponse: CreateCaptureResponse,
): string {
  return JSON.stringify(
    CreateCaptureResponse$outboundSchema.parse(createCaptureResponse),
  );
}

export function createCaptureResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCaptureResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCaptureResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCaptureResponse' from JSON`,
  );
}
