/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to include additional information via the `include` query string parameter.
 */
export const GetRefundInclude = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to include additional information via the `include` query string parameter.
 */
export type GetRefundInclude = ClosedEnum<typeof GetRefundInclude>;

export type GetRefundRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide the ID of the related refund.
   */
  refundId: string;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   */
  include?: GetRefundInclude | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetRefundNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetRefundNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetRefundNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetRefundMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetRefundMode = ClosedEnum<typeof GetRefundMode>;

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
 *
 * @remarks
 * amount.
 */
export type GetRefundAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
 * zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
 * the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the
 * [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type GetRefundSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetRefundMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type GetRefundMetadataUnion = GetRefundMetadata | string | Array<string>;

/**
 * Refunds may take some time to get confirmed.
 */
export const GetRefundStatus = {
  Queued: "queued",
  Pending: "pending",
  Processing: "processing",
  Refunded: "refunded",
  Failed: "failed",
  Canceled: "canceled",
} as const;
/**
 * Refunds may take some time to get confirmed.
 */
export type GetRefundStatus = ClosedEnum<typeof GetRefundStatus>;

/**
 * Specifies the reference type
 */
export const GetRefundType = {
  AcquirerReference: "acquirer-reference",
} as const;
/**
 * Specifies the reference type
 */
export type GetRefundType = ClosedEnum<typeof GetRefundType>;

export type GetRefundExternalReference = {
  /**
   * Specifies the reference type
   */
  type?: GetRefundType | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * The amount that will be pulled back.
 */
export type GetRefundRoutingReversalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Where the funds will be pulled back from.
 */
export type GetRefundSource = {
  /**
   * Required for source type `organization`. The ID of the connected organization the funds should be pulled
   *
   * @remarks
   * back from.
   */
  organizationId?: string | undefined;
};

export type GetRefundRoutingReversal = {
  /**
   * The amount that will be pulled back.
   */
  amount?: GetRefundRoutingReversalAmount | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: GetRefundSource | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this refund belongs to.
 */
export type GetRefundPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
 *
 * @remarks
 * yet settled.
 */
export type GetRefundSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetRefundSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this refund belongs to.
   */
  payment: GetRefundPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
   *
   * @remarks
   * yet settled.
   */
  settlement?: GetRefundSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: GetRefundDocumentation;
};

/**
 * The payment object.
 */
export type GetRefundResponse = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
   *
   * @remarks
   * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: GetRefundMode | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
   *
   * @remarks
   * amount.
   */
  amount?: GetRefundAmount | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
   * zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
   * the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the
   * [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: GetRefundSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: GetRefundMetadata | string | Array<string> | null | undefined;
  /**
   * The unique identifier of the payment this refund was created for.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   */
  status?: GetRefundStatus | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: GetRefundExternalReference | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
   * needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?: Array<GetRefundRoutingReversal> | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetRefundLinks | undefined;
};

/** @internal */
export const GetRefundInclude$inboundSchema: z.ZodNativeEnum<
  typeof GetRefundInclude
> = z.nativeEnum(GetRefundInclude);

/** @internal */
export const GetRefundInclude$outboundSchema: z.ZodNativeEnum<
  typeof GetRefundInclude
> = GetRefundInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundInclude$ {
  /** @deprecated use `GetRefundInclude$inboundSchema` instead. */
  export const inboundSchema = GetRefundInclude$inboundSchema;
  /** @deprecated use `GetRefundInclude$outboundSchema` instead. */
  export const outboundSchema = GetRefundInclude$outboundSchema;
}

/** @internal */
export const GetRefundRequest$inboundSchema: z.ZodType<
  GetRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  refundId: z.string(),
  include: z.nullable(GetRefundInclude$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetRefundRequest$Outbound = {
  paymentId: string;
  refundId: string;
  include?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetRefundRequest$outboundSchema: z.ZodType<
  GetRefundRequest$Outbound,
  z.ZodTypeDef,
  GetRefundRequest
> = z.object({
  paymentId: z.string(),
  refundId: z.string(),
  include: z.nullable(GetRefundInclude$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundRequest$ {
  /** @deprecated use `GetRefundRequest$inboundSchema` instead. */
  export const inboundSchema = GetRefundRequest$inboundSchema;
  /** @deprecated use `GetRefundRequest$outboundSchema` instead. */
  export const outboundSchema = GetRefundRequest$outboundSchema;
  /** @deprecated use `GetRefundRequest$Outbound` instead. */
  export type Outbound = GetRefundRequest$Outbound;
}

export function getRefundRequestToJSON(
  getRefundRequest: GetRefundRequest,
): string {
  return JSON.stringify(
    GetRefundRequest$outboundSchema.parse(getRefundRequest),
  );
}

export function getRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundRequest' from JSON`,
  );
}

/** @internal */
export const GetRefundNotFoundDocumentation$inboundSchema: z.ZodType<
  GetRefundNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetRefundNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetRefundNotFoundDocumentation$outboundSchema: z.ZodType<
  GetRefundNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetRefundNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundNotFoundDocumentation$ {
  /** @deprecated use `GetRefundNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetRefundNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetRefundNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetRefundNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetRefundNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetRefundNotFoundDocumentation$Outbound;
}

export function getRefundNotFoundDocumentationToJSON(
  getRefundNotFoundDocumentation: GetRefundNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetRefundNotFoundDocumentation$outboundSchema.parse(
      getRefundNotFoundDocumentation,
    ),
  );
}

export function getRefundNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetRefundNotFoundLinks$inboundSchema: z.ZodType<
  GetRefundNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetRefundNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetRefundNotFoundLinks$Outbound = {
  documentation: GetRefundNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetRefundNotFoundLinks$outboundSchema: z.ZodType<
  GetRefundNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetRefundNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetRefundNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundNotFoundLinks$ {
  /** @deprecated use `GetRefundNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetRefundNotFoundLinks$inboundSchema;
  /** @deprecated use `GetRefundNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetRefundNotFoundLinks$outboundSchema;
  /** @deprecated use `GetRefundNotFoundLinks$Outbound` instead. */
  export type Outbound = GetRefundNotFoundLinks$Outbound;
}

export function getRefundNotFoundLinksToJSON(
  getRefundNotFoundLinks: GetRefundNotFoundLinks,
): string {
  return JSON.stringify(
    GetRefundNotFoundLinks$outboundSchema.parse(getRefundNotFoundLinks),
  );
}

export function getRefundNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetRefundMode$inboundSchema: z.ZodNativeEnum<
  typeof GetRefundMode
> = z.nativeEnum(GetRefundMode);

/** @internal */
export const GetRefundMode$outboundSchema: z.ZodNativeEnum<
  typeof GetRefundMode
> = GetRefundMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundMode$ {
  /** @deprecated use `GetRefundMode$inboundSchema` instead. */
  export const inboundSchema = GetRefundMode$inboundSchema;
  /** @deprecated use `GetRefundMode$outboundSchema` instead. */
  export const outboundSchema = GetRefundMode$outboundSchema;
}

/** @internal */
export const GetRefundAmount$inboundSchema: z.ZodType<
  GetRefundAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetRefundAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetRefundAmount$outboundSchema: z.ZodType<
  GetRefundAmount$Outbound,
  z.ZodTypeDef,
  GetRefundAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundAmount$ {
  /** @deprecated use `GetRefundAmount$inboundSchema` instead. */
  export const inboundSchema = GetRefundAmount$inboundSchema;
  /** @deprecated use `GetRefundAmount$outboundSchema` instead. */
  export const outboundSchema = GetRefundAmount$outboundSchema;
  /** @deprecated use `GetRefundAmount$Outbound` instead. */
  export type Outbound = GetRefundAmount$Outbound;
}

export function getRefundAmountToJSON(
  getRefundAmount: GetRefundAmount,
): string {
  return JSON.stringify(GetRefundAmount$outboundSchema.parse(getRefundAmount));
}

export function getRefundAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundAmount' from JSON`,
  );
}

/** @internal */
export const GetRefundSettlementAmount$inboundSchema: z.ZodType<
  GetRefundSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetRefundSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetRefundSettlementAmount$outboundSchema: z.ZodType<
  GetRefundSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetRefundSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundSettlementAmount$ {
  /** @deprecated use `GetRefundSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetRefundSettlementAmount$inboundSchema;
  /** @deprecated use `GetRefundSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetRefundSettlementAmount$outboundSchema;
  /** @deprecated use `GetRefundSettlementAmount$Outbound` instead. */
  export type Outbound = GetRefundSettlementAmount$Outbound;
}

export function getRefundSettlementAmountToJSON(
  getRefundSettlementAmount: GetRefundSettlementAmount,
): string {
  return JSON.stringify(
    GetRefundSettlementAmount$outboundSchema.parse(getRefundSettlementAmount),
  );
}

export function getRefundSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetRefundMetadata$inboundSchema: z.ZodType<
  GetRefundMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetRefundMetadata$Outbound = {};

/** @internal */
export const GetRefundMetadata$outboundSchema: z.ZodType<
  GetRefundMetadata$Outbound,
  z.ZodTypeDef,
  GetRefundMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundMetadata$ {
  /** @deprecated use `GetRefundMetadata$inboundSchema` instead. */
  export const inboundSchema = GetRefundMetadata$inboundSchema;
  /** @deprecated use `GetRefundMetadata$outboundSchema` instead. */
  export const outboundSchema = GetRefundMetadata$outboundSchema;
  /** @deprecated use `GetRefundMetadata$Outbound` instead. */
  export type Outbound = GetRefundMetadata$Outbound;
}

export function getRefundMetadataToJSON(
  getRefundMetadata: GetRefundMetadata,
): string {
  return JSON.stringify(
    GetRefundMetadata$outboundSchema.parse(getRefundMetadata),
  );
}

export function getRefundMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundMetadata' from JSON`,
  );
}

/** @internal */
export const GetRefundMetadataUnion$inboundSchema: z.ZodType<
  GetRefundMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetRefundMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type GetRefundMetadataUnion$Outbound =
  | GetRefundMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const GetRefundMetadataUnion$outboundSchema: z.ZodType<
  GetRefundMetadataUnion$Outbound,
  z.ZodTypeDef,
  GetRefundMetadataUnion
> = z.union([
  z.lazy(() => GetRefundMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundMetadataUnion$ {
  /** @deprecated use `GetRefundMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = GetRefundMetadataUnion$inboundSchema;
  /** @deprecated use `GetRefundMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = GetRefundMetadataUnion$outboundSchema;
  /** @deprecated use `GetRefundMetadataUnion$Outbound` instead. */
  export type Outbound = GetRefundMetadataUnion$Outbound;
}

export function getRefundMetadataUnionToJSON(
  getRefundMetadataUnion: GetRefundMetadataUnion,
): string {
  return JSON.stringify(
    GetRefundMetadataUnion$outboundSchema.parse(getRefundMetadataUnion),
  );
}

export function getRefundMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundMetadataUnion' from JSON`,
  );
}

/** @internal */
export const GetRefundStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetRefundStatus
> = z.nativeEnum(GetRefundStatus);

/** @internal */
export const GetRefundStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetRefundStatus
> = GetRefundStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundStatus$ {
  /** @deprecated use `GetRefundStatus$inboundSchema` instead. */
  export const inboundSchema = GetRefundStatus$inboundSchema;
  /** @deprecated use `GetRefundStatus$outboundSchema` instead. */
  export const outboundSchema = GetRefundStatus$outboundSchema;
}

/** @internal */
export const GetRefundType$inboundSchema: z.ZodNativeEnum<
  typeof GetRefundType
> = z.nativeEnum(GetRefundType);

/** @internal */
export const GetRefundType$outboundSchema: z.ZodNativeEnum<
  typeof GetRefundType
> = GetRefundType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundType$ {
  /** @deprecated use `GetRefundType$inboundSchema` instead. */
  export const inboundSchema = GetRefundType$inboundSchema;
  /** @deprecated use `GetRefundType$outboundSchema` instead. */
  export const outboundSchema = GetRefundType$outboundSchema;
}

/** @internal */
export const GetRefundExternalReference$inboundSchema: z.ZodType<
  GetRefundExternalReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetRefundType$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type GetRefundExternalReference$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetRefundExternalReference$outboundSchema: z.ZodType<
  GetRefundExternalReference$Outbound,
  z.ZodTypeDef,
  GetRefundExternalReference
> = z.object({
  type: GetRefundType$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundExternalReference$ {
  /** @deprecated use `GetRefundExternalReference$inboundSchema` instead. */
  export const inboundSchema = GetRefundExternalReference$inboundSchema;
  /** @deprecated use `GetRefundExternalReference$outboundSchema` instead. */
  export const outboundSchema = GetRefundExternalReference$outboundSchema;
  /** @deprecated use `GetRefundExternalReference$Outbound` instead. */
  export type Outbound = GetRefundExternalReference$Outbound;
}

export function getRefundExternalReferenceToJSON(
  getRefundExternalReference: GetRefundExternalReference,
): string {
  return JSON.stringify(
    GetRefundExternalReference$outboundSchema.parse(getRefundExternalReference),
  );
}

export function getRefundExternalReferenceFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundExternalReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundExternalReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundExternalReference' from JSON`,
  );
}

/** @internal */
export const GetRefundRoutingReversalAmount$inboundSchema: z.ZodType<
  GetRefundRoutingReversalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetRefundRoutingReversalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetRefundRoutingReversalAmount$outboundSchema: z.ZodType<
  GetRefundRoutingReversalAmount$Outbound,
  z.ZodTypeDef,
  GetRefundRoutingReversalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundRoutingReversalAmount$ {
  /** @deprecated use `GetRefundRoutingReversalAmount$inboundSchema` instead. */
  export const inboundSchema = GetRefundRoutingReversalAmount$inboundSchema;
  /** @deprecated use `GetRefundRoutingReversalAmount$outboundSchema` instead. */
  export const outboundSchema = GetRefundRoutingReversalAmount$outboundSchema;
  /** @deprecated use `GetRefundRoutingReversalAmount$Outbound` instead. */
  export type Outbound = GetRefundRoutingReversalAmount$Outbound;
}

export function getRefundRoutingReversalAmountToJSON(
  getRefundRoutingReversalAmount: GetRefundRoutingReversalAmount,
): string {
  return JSON.stringify(
    GetRefundRoutingReversalAmount$outboundSchema.parse(
      getRefundRoutingReversalAmount,
    ),
  );
}

export function getRefundRoutingReversalAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundRoutingReversalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundRoutingReversalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundRoutingReversalAmount' from JSON`,
  );
}

/** @internal */
export const GetRefundSource$inboundSchema: z.ZodType<
  GetRefundSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string().optional(),
});

/** @internal */
export type GetRefundSource$Outbound = {
  organizationId?: string | undefined;
};

/** @internal */
export const GetRefundSource$outboundSchema: z.ZodType<
  GetRefundSource$Outbound,
  z.ZodTypeDef,
  GetRefundSource
> = z.object({
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundSource$ {
  /** @deprecated use `GetRefundSource$inboundSchema` instead. */
  export const inboundSchema = GetRefundSource$inboundSchema;
  /** @deprecated use `GetRefundSource$outboundSchema` instead. */
  export const outboundSchema = GetRefundSource$outboundSchema;
  /** @deprecated use `GetRefundSource$Outbound` instead. */
  export type Outbound = GetRefundSource$Outbound;
}

export function getRefundSourceToJSON(
  getRefundSource: GetRefundSource,
): string {
  return JSON.stringify(GetRefundSource$outboundSchema.parse(getRefundSource));
}

export function getRefundSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundSource' from JSON`,
  );
}

/** @internal */
export const GetRefundRoutingReversal$inboundSchema: z.ZodType<
  GetRefundRoutingReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetRefundRoutingReversalAmount$inboundSchema).optional(),
  source: z.lazy(() => GetRefundSource$inboundSchema).optional(),
});

/** @internal */
export type GetRefundRoutingReversal$Outbound = {
  amount?: GetRefundRoutingReversalAmount$Outbound | undefined;
  source?: GetRefundSource$Outbound | undefined;
};

/** @internal */
export const GetRefundRoutingReversal$outboundSchema: z.ZodType<
  GetRefundRoutingReversal$Outbound,
  z.ZodTypeDef,
  GetRefundRoutingReversal
> = z.object({
  amount: z.lazy(() => GetRefundRoutingReversalAmount$outboundSchema)
    .optional(),
  source: z.lazy(() => GetRefundSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundRoutingReversal$ {
  /** @deprecated use `GetRefundRoutingReversal$inboundSchema` instead. */
  export const inboundSchema = GetRefundRoutingReversal$inboundSchema;
  /** @deprecated use `GetRefundRoutingReversal$outboundSchema` instead. */
  export const outboundSchema = GetRefundRoutingReversal$outboundSchema;
  /** @deprecated use `GetRefundRoutingReversal$Outbound` instead. */
  export type Outbound = GetRefundRoutingReversal$Outbound;
}

export function getRefundRoutingReversalToJSON(
  getRefundRoutingReversal: GetRefundRoutingReversal,
): string {
  return JSON.stringify(
    GetRefundRoutingReversal$outboundSchema.parse(getRefundRoutingReversal),
  );
}

export function getRefundRoutingReversalFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundRoutingReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundRoutingReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundRoutingReversal' from JSON`,
  );
}

/** @internal */
export const GetRefundSelf$inboundSchema: z.ZodType<
  GetRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetRefundSelf$outboundSchema: z.ZodType<
  GetRefundSelf$Outbound,
  z.ZodTypeDef,
  GetRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundSelf$ {
  /** @deprecated use `GetRefundSelf$inboundSchema` instead. */
  export const inboundSchema = GetRefundSelf$inboundSchema;
  /** @deprecated use `GetRefundSelf$outboundSchema` instead. */
  export const outboundSchema = GetRefundSelf$outboundSchema;
  /** @deprecated use `GetRefundSelf$Outbound` instead. */
  export type Outbound = GetRefundSelf$Outbound;
}

export function getRefundSelfToJSON(getRefundSelf: GetRefundSelf): string {
  return JSON.stringify(GetRefundSelf$outboundSchema.parse(getRefundSelf));
}

export function getRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundSelf' from JSON`,
  );
}

/** @internal */
export const GetRefundPayment$inboundSchema: z.ZodType<
  GetRefundPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetRefundPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetRefundPayment$outboundSchema: z.ZodType<
  GetRefundPayment$Outbound,
  z.ZodTypeDef,
  GetRefundPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundPayment$ {
  /** @deprecated use `GetRefundPayment$inboundSchema` instead. */
  export const inboundSchema = GetRefundPayment$inboundSchema;
  /** @deprecated use `GetRefundPayment$outboundSchema` instead. */
  export const outboundSchema = GetRefundPayment$outboundSchema;
  /** @deprecated use `GetRefundPayment$Outbound` instead. */
  export type Outbound = GetRefundPayment$Outbound;
}

export function getRefundPaymentToJSON(
  getRefundPayment: GetRefundPayment,
): string {
  return JSON.stringify(
    GetRefundPayment$outboundSchema.parse(getRefundPayment),
  );
}

export function getRefundPaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundPayment' from JSON`,
  );
}

/** @internal */
export const GetRefundSettlement$inboundSchema: z.ZodType<
  GetRefundSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetRefundSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetRefundSettlement$outboundSchema: z.ZodType<
  GetRefundSettlement$Outbound,
  z.ZodTypeDef,
  GetRefundSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundSettlement$ {
  /** @deprecated use `GetRefundSettlement$inboundSchema` instead. */
  export const inboundSchema = GetRefundSettlement$inboundSchema;
  /** @deprecated use `GetRefundSettlement$outboundSchema` instead. */
  export const outboundSchema = GetRefundSettlement$outboundSchema;
  /** @deprecated use `GetRefundSettlement$Outbound` instead. */
  export type Outbound = GetRefundSettlement$Outbound;
}

export function getRefundSettlementToJSON(
  getRefundSettlement: GetRefundSettlement,
): string {
  return JSON.stringify(
    GetRefundSettlement$outboundSchema.parse(getRefundSettlement),
  );
}

export function getRefundSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundSettlement' from JSON`,
  );
}

/** @internal */
export const GetRefundDocumentation$inboundSchema: z.ZodType<
  GetRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetRefundDocumentation$outboundSchema: z.ZodType<
  GetRefundDocumentation$Outbound,
  z.ZodTypeDef,
  GetRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundDocumentation$ {
  /** @deprecated use `GetRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetRefundDocumentation$inboundSchema;
  /** @deprecated use `GetRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetRefundDocumentation$outboundSchema;
  /** @deprecated use `GetRefundDocumentation$Outbound` instead. */
  export type Outbound = GetRefundDocumentation$Outbound;
}

export function getRefundDocumentationToJSON(
  getRefundDocumentation: GetRefundDocumentation,
): string {
  return JSON.stringify(
    GetRefundDocumentation$outboundSchema.parse(getRefundDocumentation),
  );
}

export function getRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetRefundLinks$inboundSchema: z.ZodType<
  GetRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetRefundSelf$inboundSchema),
  payment: z.lazy(() => GetRefundPayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => GetRefundSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetRefundDocumentation$inboundSchema),
});

/** @internal */
export type GetRefundLinks$Outbound = {
  self: GetRefundSelf$Outbound;
  payment: GetRefundPayment$Outbound;
  settlement?: GetRefundSettlement$Outbound | null | undefined;
  documentation: GetRefundDocumentation$Outbound;
};

/** @internal */
export const GetRefundLinks$outboundSchema: z.ZodType<
  GetRefundLinks$Outbound,
  z.ZodTypeDef,
  GetRefundLinks
> = z.object({
  self: z.lazy(() => GetRefundSelf$outboundSchema),
  payment: z.lazy(() => GetRefundPayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => GetRefundSettlement$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetRefundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundLinks$ {
  /** @deprecated use `GetRefundLinks$inboundSchema` instead. */
  export const inboundSchema = GetRefundLinks$inboundSchema;
  /** @deprecated use `GetRefundLinks$outboundSchema` instead. */
  export const outboundSchema = GetRefundLinks$outboundSchema;
  /** @deprecated use `GetRefundLinks$Outbound` instead. */
  export type Outbound = GetRefundLinks$Outbound;
}

export function getRefundLinksToJSON(getRefundLinks: GetRefundLinks): string {
  return JSON.stringify(GetRefundLinks$outboundSchema.parse(getRefundLinks));
}

export function getRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundLinks' from JSON`,
  );
}

/** @internal */
export const GetRefundResponse$inboundSchema: z.ZodType<
  GetRefundResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: GetRefundMode$inboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetRefundAmount$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => GetRefundSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetRefundMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: GetRefundStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() => GetRefundExternalReference$inboundSchema)
    .optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => GetRefundRoutingReversal$inboundSchema)),
  ).optional(),
  _links: z.lazy(() => GetRefundLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetRefundResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: GetRefundAmount$Outbound | undefined;
  settlementAmount?: GetRefundSettlementAmount$Outbound | null | undefined;
  metadata?:
    | GetRefundMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?: GetRefundExternalReference$Outbound | undefined;
  routingReversals?:
    | Array<GetRefundRoutingReversal$Outbound>
    | null
    | undefined;
  _links?: GetRefundLinks$Outbound | undefined;
};

/** @internal */
export const GetRefundResponse$outboundSchema: z.ZodType<
  GetRefundResponse$Outbound,
  z.ZodTypeDef,
  GetRefundResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: GetRefundMode$outboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetRefundAmount$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => GetRefundSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetRefundMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: GetRefundStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() => GetRefundExternalReference$outboundSchema)
    .optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => GetRefundRoutingReversal$outboundSchema)),
  ).optional(),
  links: z.lazy(() => GetRefundLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundResponse$ {
  /** @deprecated use `GetRefundResponse$inboundSchema` instead. */
  export const inboundSchema = GetRefundResponse$inboundSchema;
  /** @deprecated use `GetRefundResponse$outboundSchema` instead. */
  export const outboundSchema = GetRefundResponse$outboundSchema;
  /** @deprecated use `GetRefundResponse$Outbound` instead. */
  export type Outbound = GetRefundResponse$Outbound;
}

export function getRefundResponseToJSON(
  getRefundResponse: GetRefundResponse,
): string {
  return JSON.stringify(
    GetRefundResponse$outboundSchema.parse(getRefundResponse),
  );
}

export function getRefundResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundResponse' from JSON`,
  );
}
