/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSettlementPaymentsRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
   *
   * @remarks
   *
   * Possible values: `asc` `desc` (default: `desc`)
   */
  sort?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementPaymentsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementPaymentsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementPaymentsBadRequestDocumentation;
};

/**
 * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
 *
 * @remarks
 *
 * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
 *
 * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
 */
export type GetSettlementPaymentsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
 */
export type GetSettlementPaymentsAmountRefunded = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The remaining amount that can be refunded. Only available when refunds are available for this payment.
 */
export type GetSettlementPaymentsAmountRemaining = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already captured for this payment. Only available when this payment supports captures.
 */
export type GetSettlementPaymentsAmountCaptured = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
 */
export type GetSettlementPaymentsAmountChargedBack = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
 *
 * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
 */
export type GetSettlementPaymentsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type GetSettlementPaymentsUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
 */
export type GetSettlementPaymentsDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type GetSettlementPaymentsTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * @remarks
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type GetSettlementPaymentsVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const GetSettlementPaymentsCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type GetSettlementPaymentsCategory = ClosedEnum<
  typeof GetSettlementPaymentsCategory
>;

/**
 * Total amount and currency of the recurring item.
 */
export type GetSettlementPaymentsRecurringAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
 */
export type GetSettlementPaymentsRecurring = {
  /**
   * A description of the recurring item. If not present, the main description of the item will be used.
   */
  description?: string | undefined;
  /**
   * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
   *
   * @remarks
   *
   * Possible values: `... months` `... weeks` `... days`
   */
  interval: string;
  /**
   * Total amount and currency of the recurring item.
   */
  amount?: GetSettlementPaymentsRecurringAmount | undefined;
  /**
   * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
   */
  times?: number | undefined;
  /**
   * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
   */
  startDate?: string | null | undefined;
};

export type GetSettlementPaymentsLine = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   *
   * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
   */
  type?: string | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: GetSettlementPaymentsUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
   */
  discountAmount?: GetSettlementPaymentsDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: GetSettlementPaymentsTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * @remarks
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: GetSettlementPaymentsVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
   */
  categories?: Array<GetSettlementPaymentsCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
  /**
   * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
   */
  recurring?: GetSettlementPaymentsRecurring | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type GetSettlementPaymentsBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 */
export type GetSettlementPaymentsShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

export type GetSettlementPaymentsMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type GetSettlementPaymentsMetadataUnion =
  | GetSettlementPaymentsMetadata
  | string
  | Array<string>;

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
 */
export type GetSettlementPaymentsApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
 *
 * @remarks
 *
 * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
 *
 * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
 */
export type GetSettlementPaymentsApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
   */
  amount?: GetSettlementPaymentsApplicationFeeAmount | undefined;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
   */
  description?: string | undefined;
};

/**
 * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
 */
export type GetSettlementPaymentsRoutingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination of this portion of the payment.
 */
export type GetSettlementPaymentsDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   *
   * @remarks
   *
   * Possible values: `organization`
   */
  type: string;
  /**
   * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
   */
  organizationId: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementPaymentsRoutingSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that belong to this route.
 */
export type GetSettlementPaymentsRoutingPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementPaymentsRoutingLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetSettlementPaymentsRoutingSelf;
  /**
   * The API resource URL of the [payment](get-payment) that belong to this route.
   */
  payment: GetSettlementPaymentsRoutingPayment;
};

export type GetSettlementPaymentsRouting = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
   */
  amount: GetSettlementPaymentsRoutingAmount;
  /**
   * The destination of this portion of the payment.
   */
  destination: GetSettlementPaymentsDestination;
  /**
   * The date and time when the route was created. The date is given in ISO 8601 format.
   */
  createdAt: string;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
   *
   * @remarks
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetSettlementPaymentsRoutingLinks;
};

/**
 * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
 *
 * @remarks
 *
 * You can find more information about the possible values of this object on [this page](status-reasons).**
 */
export type GetSettlementPaymentsStatusReason = {
  /**
   * A machine-readable code that indicates the reason for the payment's status.
   */
  code: string;
  /**
   * A description of the status reason, localized according to the payment `locale`.
   */
  message: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementPaymentsPaymentSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type GetSettlementPaymentsCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
 */
export type GetSettlementPaymentsMobileAppCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
 *
 * @remarks
 *
 * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
 *
 * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
 */
export type GetSettlementPaymentsChangePaymentState = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the payment in the Mollie Dashboard.
 */
export type GetSettlementPaymentsDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
 */
export type GetSettlementPaymentsRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
 */
export type GetSettlementPaymentsChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
 */
export type GetSettlementPaymentsCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
 */
export type GetSettlementPaymentsSettlement = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer).
 */
export type GetSettlementPaymentsCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [mandate](get-mandate).
 */
export type GetSettlementPaymentsMandate = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [subscription](get-subscription).
 */
export type GetSettlementPaymentsSubscription = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
 */
export type GetSettlementPaymentsOrder = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
 */
export type GetSettlementPaymentsTerminal = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementPaymentsPaymentDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementPaymentsPaymentLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetSettlementPaymentsPaymentSelf;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  checkout?: GetSettlementPaymentsCheckout | undefined;
  /**
   * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
   */
  mobileAppCheckout?: GetSettlementPaymentsMobileAppCheckout | undefined;
  /**
   * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
   *
   * @remarks
   *
   * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
   *
   * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
   */
  changePaymentState?: GetSettlementPaymentsChangePaymentState | undefined;
  /**
   * Direct link to the payment in the Mollie Dashboard.
   */
  dashboard: GetSettlementPaymentsDashboard;
  /**
   * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
   */
  refunds?: GetSettlementPaymentsRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
   */
  chargebacks?: GetSettlementPaymentsChargebacks | undefined;
  /**
   * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
   */
  captures?: GetSettlementPaymentsCaptures | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
   */
  settlement?: GetSettlementPaymentsSettlement | undefined;
  /**
   * The API resource URL of the [customer](get-customer).
   */
  customer?: GetSettlementPaymentsCustomer | undefined;
  /**
   * The API resource URL of the [mandate](get-mandate).
   */
  mandate?: GetSettlementPaymentsMandate | undefined;
  /**
   * The API resource URL of the [subscription](get-subscription).
   */
  subscription?: GetSettlementPaymentsSubscription | undefined;
  /**
   * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
   */
  order?: GetSettlementPaymentsOrder | undefined;
  /**
   * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
   */
  terminal?: GetSettlementPaymentsTerminal | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSettlementPaymentsPaymentDocumentation | undefined;
};

export type GetSettlementPaymentsPaymentOutput = {
  /**
   * Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The description of the payment. This will be shown to your customer on their card or bank statement when possible. We truncate the description automatically according to the limits of the used payment method. The description is also visible in any exports you generate.
   *
   * @remarks
   *
   * We recommend you use a unique identifier so that you can always link the payment to the order in your back office. This is particularly useful for bookkeeping.
   *
   * The maximum length of the description field differs per payment method, with the absolute maximum being 255 characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
   */
  description: string;
  /**
   * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
   *
   * @remarks
   *
   * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
   *
   * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
   */
  amount: GetSettlementPaymentsAmount;
  /**
   * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
   */
  amountRefunded?: GetSettlementPaymentsAmountRefunded | undefined;
  /**
   * The remaining amount that can be refunded. Only available when refunds are available for this payment.
   */
  amountRemaining?: GetSettlementPaymentsAmountRemaining | undefined;
  /**
   * The total amount that is already captured for this payment. Only available when this payment supports captures.
   */
  amountCaptured?: GetSettlementPaymentsAmountCaptured | undefined;
  /**
   * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
   */
  amountChargedBack?: GetSettlementPaymentsAmountChargedBack | undefined;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
   *
   * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
   */
  settlementAmount?: GetSettlementPaymentsSettlementAmount | undefined;
  /**
   * The URL your customer will be redirected to after the payment process.
   *
   * @remarks
   *
   * It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the right page referencing the order when your customer returns.
   *
   * The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for Apple Pay payments with an `applePayPaymentToken`.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not provided, the customer will be redirected to the `redirectUrl` instead — see above.
   *
   * @remarks
   *
   * Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle payment cancellations.
   */
  cancelUrl?: string | null | undefined;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
   */
  webhookUrl?: string | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<GetSettlementPaymentsLine> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: GetSettlementPaymentsBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   */
  shippingAddress?: GetSettlementPaymentsShippingAddress | undefined;
  /**
   * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897 locale, but our hosted payment pages currently only support the specified languages.
   *
   * @remarks
   *
   * For bank transfer payments specifically, the locale will determine the target bank account the customer has to transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the customer use a local bank account greatly increases the conversion and speed of payment.
   */
  locale?: string | null | undefined;
  /**
   * This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This field is omitted if the country code was not detected.
   */
  countryCode?: string | null | undefined;
  /**
   * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment method and your customer will skip the selection screen and is sent directly to the chosen payment method. The parameter enables you to fully integrate the payment method selection into your website.
   *
   * @remarks
   *
   * You can also specify the methods in an array. By doing so we will still show the payment method selection screen but will only show the methods specified in the array. For example, you can use this functionality to only show payment methods from a specific country to your customer `['bancontact', 'belfius']`.
   *
   * Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `mbway` `multibanco` `mybank` `payconiq` `paypal` `paysafecard` `pointofsale` `przelewy24` `riverty` `satispay` `swish` `trustly` `twint` `voucher`
   */
  method?: string | null | undefined;
  /**
   * For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT rates you have used for the order to ensure your customer's country matches the VAT country.
   *
   * @remarks
   *
   * Use this parameter to restrict the payment methods available to your customer to those from a single country.
   *
   * If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
   *
   * The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
   */
  restrictPaymentMethodsToCountry?: string | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | GetSettlementPaymentsMetadata
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/) and capture at a later time.
   *
   * @remarks
   *
   * This field needs to be set to `manual` for method `riverty`.
   *
   * Possible values: `automatic` `manual` (default: `automatic`)
   */
  captureMode?: string | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a later point either be 'captured' or canceled.
   *
   * By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For example `8 hours` or `2 days`.
   *
   * To schedule an automatic capture, the `captureMode` must be set to `automatic`.
   *
   * The maximum delay is 7 days (168 hours).
   *
   * Possible values: `... hours` `... days`
   */
  captureDelay?: string | null | undefined;
  /**
   * Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
   */
  captureBefore?: string | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * @remarks
   *
   * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
   *
   * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
   */
  applicationFee?: GetSettlementPaymentsApplicationFee | null | undefined;
  /**
   * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
   *
   * @remarks
   *
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * If you create payments on your own account that you want to split between yourself and one or more connected merchants, you can use this `routing` parameter to route the payment accordingly.
   *
   * The `routing` parameter should contain an array of objects, with each object describing the destination for a specific portion of the payment.
   *
   * It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total payment amount have been routed, the amount left will be routed to the current organization automatically.
   *
   * If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee` parameter.
   */
  routing?: Array<GetSettlementPaymentsRouting> | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * Indicate which part of a recurring sequence this payment is for.
   *
   * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place on their account in the future.
   *
   * If set to `recurring`, the customer's card is charged automatically.
   *
   * Defaults to `oneoff`, which is a regular non-recurring payment.
   *
   * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account are set up correctly for recurring payments.
   *
   * Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
   */
  sequenceType: string | null;
  /**
   * If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will be added to the response.
   */
  subscriptionId?: string | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of the customer's accounts should be credited.
   */
  mandateId?: string | null | undefined;
  /**
   * The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring payments, but can also be used on regular payments to enable single-click payments.
   *
   * @remarks
   *
   * If `sequenceType` is set to `recurring`, this field is required.
   */
  customerId?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and Organization tokens, the `profileId` is required.
   *
   * For more information, see [Authentication](authentication).
   */
  profileId: string;
  /**
   * The identifier referring to the [settlement](get-settlement) this payment was settled with.
   */
  settlementId?: string | null | undefined;
  /**
   * If the payment was created for an [order](get-order), the ID of that order will be part of the response.
   */
  orderId?: string | null | undefined;
  /**
   * The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which statuses occur at what point.
   *
   * @remarks
   *
   * Possible values: `open` `pending` `authorized` `paid` `canceled` `expired` `failed`
   */
  status: string;
  /**
   * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
   *
   * @remarks
   *
   * You can find more information about the possible values of this object on [this page](status-reasons).**
   */
  statusReason?: GetSettlementPaymentsStatusReason | null | undefined;
  /**
   * Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
   */
  isCancelable?: boolean | null | undefined;
  /**
   * An object containing payment details collected during the payment process. For example, details may include the customer's card or bank details and a payment reference. For the full list of details, please refer to the [method-specific parameters](extra-payment-parameters) guide.
   */
  details?: { [k: string]: any } | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is not authorized (yet).
   */
  authorizedAt?: string | null | undefined;
  /**
   * The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not completed (yet).
   */
  paidAt?: string | null | undefined;
  /**
   * The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not canceled (yet).
   */
  canceledAt?: string | null | undefined;
  /**
   * The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no longer expire.
   */
  expiresAt?: string | null | undefined;
  /**
   * The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not expire (yet).
   */
  expiredAt?: string | null | undefined;
  /**
   * The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail (yet).
   */
  failedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetSettlementPaymentsPaymentLinks;
};

export type GetSettlementPaymentsEmbedded = {
  /**
   * An array of payment objects.
   */
  payments?: Array<GetSettlementPaymentsPaymentOutput> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type GetSettlementPaymentsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type GetSettlementPaymentsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type GetSettlementPaymentsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementPaymentsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementPaymentsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: GetSettlementPaymentsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: GetSettlementPaymentsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: GetSettlementPaymentsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSettlementPaymentsDocumentation | undefined;
};

/**
 * A list of payment objects.
 */
export type GetSettlementPaymentsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: GetSettlementPaymentsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSettlementPaymentsLinks | undefined;
};

/** @internal */
export const GetSettlementPaymentsRequest$inboundSchema: z.ZodType<
  GetSettlementPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetSettlementPaymentsRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit: number | null;
  sort?: string | null | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetSettlementPaymentsRequest$outboundSchema: z.ZodType<
  GetSettlementPaymentsRequest$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRequest$ {
  /** @deprecated use `GetSettlementPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsRequest$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsRequest$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRequest$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRequest$Outbound;
}

export function getSettlementPaymentsRequestToJSON(
  getSettlementPaymentsRequest: GetSettlementPaymentsRequest,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRequest$outboundSchema.parse(
      getSettlementPaymentsRequest,
    ),
  );
}

export function getSettlementPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsBadRequestDocumentation$inboundSchema:
  z.ZodType<
    GetSettlementPaymentsBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetSettlementPaymentsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsBadRequestDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementPaymentsBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementPaymentsBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsBadRequestDocumentation$ {
  /** @deprecated use `GetSettlementPaymentsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsBadRequestDocumentation$Outbound;
}

export function getSettlementPaymentsBadRequestDocumentationToJSON(
  getSettlementPaymentsBadRequestDocumentation:
    GetSettlementPaymentsBadRequestDocumentation,
): string {
  return JSON.stringify(
    GetSettlementPaymentsBadRequestDocumentation$outboundSchema.parse(
      getSettlementPaymentsBadRequestDocumentation,
    ),
  );
}

export function getSettlementPaymentsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementPaymentsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementPaymentsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsBadRequestLinks$inboundSchema: z.ZodType<
  GetSettlementPaymentsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementPaymentsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementPaymentsBadRequestLinks$Outbound = {
  documentation: GetSettlementPaymentsBadRequestDocumentation$Outbound;
};

/** @internal */
export const GetSettlementPaymentsBadRequestLinks$outboundSchema: z.ZodType<
  GetSettlementPaymentsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementPaymentsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsBadRequestLinks$ {
  /** @deprecated use `GetSettlementPaymentsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsBadRequestLinks$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsBadRequestLinks$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsBadRequestLinks$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsBadRequestLinks$Outbound;
}

export function getSettlementPaymentsBadRequestLinksToJSON(
  getSettlementPaymentsBadRequestLinks: GetSettlementPaymentsBadRequestLinks,
): string {
  return JSON.stringify(
    GetSettlementPaymentsBadRequestLinks$outboundSchema.parse(
      getSettlementPaymentsBadRequestLinks,
    ),
  );
}

export function getSettlementPaymentsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsAmount$outboundSchema: z.ZodType<
  GetSettlementPaymentsAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsAmount$ {
  /** @deprecated use `GetSettlementPaymentsAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmount$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsAmount$Outbound;
}

export function getSettlementPaymentsAmountToJSON(
  getSettlementPaymentsAmount: GetSettlementPaymentsAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsAmount$outboundSchema.parse(
      getSettlementPaymentsAmount,
    ),
  );
}

export function getSettlementPaymentsAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsAmountRefunded$inboundSchema: z.ZodType<
  GetSettlementPaymentsAmountRefunded,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsAmountRefunded$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsAmountRefunded$outboundSchema: z.ZodType<
  GetSettlementPaymentsAmountRefunded$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsAmountRefunded
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsAmountRefunded$ {
  /** @deprecated use `GetSettlementPaymentsAmountRefunded$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsAmountRefunded$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountRefunded$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsAmountRefunded$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountRefunded$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsAmountRefunded$Outbound;
}

export function getSettlementPaymentsAmountRefundedToJSON(
  getSettlementPaymentsAmountRefunded: GetSettlementPaymentsAmountRefunded,
): string {
  return JSON.stringify(
    GetSettlementPaymentsAmountRefunded$outboundSchema.parse(
      getSettlementPaymentsAmountRefunded,
    ),
  );
}

export function getSettlementPaymentsAmountRefundedFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsAmountRefunded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsAmountRefunded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsAmountRefunded' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsAmountRemaining$inboundSchema: z.ZodType<
  GetSettlementPaymentsAmountRemaining,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsAmountRemaining$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsAmountRemaining$outboundSchema: z.ZodType<
  GetSettlementPaymentsAmountRemaining$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsAmountRemaining
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsAmountRemaining$ {
  /** @deprecated use `GetSettlementPaymentsAmountRemaining$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsAmountRemaining$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountRemaining$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsAmountRemaining$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountRemaining$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsAmountRemaining$Outbound;
}

export function getSettlementPaymentsAmountRemainingToJSON(
  getSettlementPaymentsAmountRemaining: GetSettlementPaymentsAmountRemaining,
): string {
  return JSON.stringify(
    GetSettlementPaymentsAmountRemaining$outboundSchema.parse(
      getSettlementPaymentsAmountRemaining,
    ),
  );
}

export function getSettlementPaymentsAmountRemainingFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsAmountRemaining, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsAmountRemaining$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsAmountRemaining' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsAmountCaptured$inboundSchema: z.ZodType<
  GetSettlementPaymentsAmountCaptured,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsAmountCaptured$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsAmountCaptured$outboundSchema: z.ZodType<
  GetSettlementPaymentsAmountCaptured$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsAmountCaptured
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsAmountCaptured$ {
  /** @deprecated use `GetSettlementPaymentsAmountCaptured$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsAmountCaptured$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountCaptured$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsAmountCaptured$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountCaptured$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsAmountCaptured$Outbound;
}

export function getSettlementPaymentsAmountCapturedToJSON(
  getSettlementPaymentsAmountCaptured: GetSettlementPaymentsAmountCaptured,
): string {
  return JSON.stringify(
    GetSettlementPaymentsAmountCaptured$outboundSchema.parse(
      getSettlementPaymentsAmountCaptured,
    ),
  );
}

export function getSettlementPaymentsAmountCapturedFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsAmountCaptured, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsAmountCaptured$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsAmountCaptured' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsAmountChargedBack$inboundSchema: z.ZodType<
  GetSettlementPaymentsAmountChargedBack,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsAmountChargedBack$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsAmountChargedBack$outboundSchema: z.ZodType<
  GetSettlementPaymentsAmountChargedBack$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsAmountChargedBack
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsAmountChargedBack$ {
  /** @deprecated use `GetSettlementPaymentsAmountChargedBack$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsAmountChargedBack$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountChargedBack$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsAmountChargedBack$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsAmountChargedBack$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsAmountChargedBack$Outbound;
}

export function getSettlementPaymentsAmountChargedBackToJSON(
  getSettlementPaymentsAmountChargedBack:
    GetSettlementPaymentsAmountChargedBack,
): string {
  return JSON.stringify(
    GetSettlementPaymentsAmountChargedBack$outboundSchema.parse(
      getSettlementPaymentsAmountChargedBack,
    ),
  );
}

export function getSettlementPaymentsAmountChargedBackFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsAmountChargedBack, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsAmountChargedBack$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsAmountChargedBack' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsSettlementAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsSettlementAmount$outboundSchema: z.ZodType<
  GetSettlementPaymentsSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsSettlementAmount$ {
  /** @deprecated use `GetSettlementPaymentsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsSettlementAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsSettlementAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsSettlementAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsSettlementAmount$Outbound;
}

export function getSettlementPaymentsSettlementAmountToJSON(
  getSettlementPaymentsSettlementAmount: GetSettlementPaymentsSettlementAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsSettlementAmount$outboundSchema.parse(
      getSettlementPaymentsSettlementAmount,
    ),
  );
}

export function getSettlementPaymentsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsUnitPrice$inboundSchema: z.ZodType<
  GetSettlementPaymentsUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsUnitPrice$outboundSchema: z.ZodType<
  GetSettlementPaymentsUnitPrice$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsUnitPrice$ {
  /** @deprecated use `GetSettlementPaymentsUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsUnitPrice$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsUnitPrice$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsUnitPrice$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsUnitPrice$Outbound;
}

export function getSettlementPaymentsUnitPriceToJSON(
  getSettlementPaymentsUnitPrice: GetSettlementPaymentsUnitPrice,
): string {
  return JSON.stringify(
    GetSettlementPaymentsUnitPrice$outboundSchema.parse(
      getSettlementPaymentsUnitPrice,
    ),
  );
}

export function getSettlementPaymentsUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsDiscountAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsDiscountAmount$outboundSchema: z.ZodType<
  GetSettlementPaymentsDiscountAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsDiscountAmount$ {
  /** @deprecated use `GetSettlementPaymentsDiscountAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsDiscountAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsDiscountAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsDiscountAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsDiscountAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsDiscountAmount$Outbound;
}

export function getSettlementPaymentsDiscountAmountToJSON(
  getSettlementPaymentsDiscountAmount: GetSettlementPaymentsDiscountAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsDiscountAmount$outboundSchema.parse(
      getSettlementPaymentsDiscountAmount,
    ),
  );
}

export function getSettlementPaymentsDiscountAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsDiscountAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsDiscountAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsDiscountAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsTotalAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsTotalAmount$outboundSchema: z.ZodType<
  GetSettlementPaymentsTotalAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsTotalAmount$ {
  /** @deprecated use `GetSettlementPaymentsTotalAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsTotalAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsTotalAmount$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsTotalAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsTotalAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsTotalAmount$Outbound;
}

export function getSettlementPaymentsTotalAmountToJSON(
  getSettlementPaymentsTotalAmount: GetSettlementPaymentsTotalAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsTotalAmount$outboundSchema.parse(
      getSettlementPaymentsTotalAmount,
    ),
  );
}

export function getSettlementPaymentsTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsTotalAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsVatAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsVatAmount$outboundSchema: z.ZodType<
  GetSettlementPaymentsVatAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsVatAmount$ {
  /** @deprecated use `GetSettlementPaymentsVatAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsVatAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsVatAmount$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsVatAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsVatAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsVatAmount$Outbound;
}

export function getSettlementPaymentsVatAmountToJSON(
  getSettlementPaymentsVatAmount: GetSettlementPaymentsVatAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsVatAmount$outboundSchema.parse(
      getSettlementPaymentsVatAmount,
    ),
  );
}

export function getSettlementPaymentsVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsVatAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsCategory$inboundSchema: z.ZodNativeEnum<
  typeof GetSettlementPaymentsCategory
> = z.nativeEnum(GetSettlementPaymentsCategory);

/** @internal */
export const GetSettlementPaymentsCategory$outboundSchema: z.ZodNativeEnum<
  typeof GetSettlementPaymentsCategory
> = GetSettlementPaymentsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsCategory$ {
  /** @deprecated use `GetSettlementPaymentsCategory$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsCategory$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsCategory$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsCategory$outboundSchema;
}

/** @internal */
export const GetSettlementPaymentsRecurringAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsRecurringAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsRecurringAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsRecurringAmount$outboundSchema: z.ZodType<
  GetSettlementPaymentsRecurringAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRecurringAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRecurringAmount$ {
  /** @deprecated use `GetSettlementPaymentsRecurringAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsRecurringAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRecurringAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsRecurringAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRecurringAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRecurringAmount$Outbound;
}

export function getSettlementPaymentsRecurringAmountToJSON(
  getSettlementPaymentsRecurringAmount: GetSettlementPaymentsRecurringAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRecurringAmount$outboundSchema.parse(
      getSettlementPaymentsRecurringAmount,
    ),
  );
}

export function getSettlementPaymentsRecurringAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRecurringAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsRecurringAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRecurringAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsRecurring$inboundSchema: z.ZodType<
  GetSettlementPaymentsRecurring,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => GetSettlementPaymentsRecurringAmount$inboundSchema)
    .optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetSettlementPaymentsRecurring$Outbound = {
  description?: string | undefined;
  interval: string;
  amount?: GetSettlementPaymentsRecurringAmount$Outbound | undefined;
  times?: number | undefined;
  startDate?: string | null | undefined;
};

/** @internal */
export const GetSettlementPaymentsRecurring$outboundSchema: z.ZodType<
  GetSettlementPaymentsRecurring$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRecurring
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => GetSettlementPaymentsRecurringAmount$outboundSchema)
    .optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRecurring$ {
  /** @deprecated use `GetSettlementPaymentsRecurring$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsRecurring$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRecurring$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsRecurring$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRecurring$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRecurring$Outbound;
}

export function getSettlementPaymentsRecurringToJSON(
  getSettlementPaymentsRecurring: GetSettlementPaymentsRecurring,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRecurring$outboundSchema.parse(
      getSettlementPaymentsRecurring,
    ),
  );
}

export function getSettlementPaymentsRecurringFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRecurring, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsRecurring$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRecurring' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsLine$inboundSchema: z.ZodType<
  GetSettlementPaymentsLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetSettlementPaymentsUnitPrice$inboundSchema),
  discountAmount: z.lazy(() =>
    GetSettlementPaymentsDiscountAmount$inboundSchema
  ).optional(),
  totalAmount: z.lazy(() => GetSettlementPaymentsTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetSettlementPaymentsVatAmount$inboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(GetSettlementPaymentsCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => GetSettlementPaymentsRecurring$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSettlementPaymentsLine$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: GetSettlementPaymentsUnitPrice$Outbound;
  discountAmount?: GetSettlementPaymentsDiscountAmount$Outbound | undefined;
  totalAmount: GetSettlementPaymentsTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: GetSettlementPaymentsVatAmount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
  recurring?: GetSettlementPaymentsRecurring$Outbound | undefined;
};

/** @internal */
export const GetSettlementPaymentsLine$outboundSchema: z.ZodType<
  GetSettlementPaymentsLine$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsLine
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetSettlementPaymentsUnitPrice$outboundSchema),
  discountAmount: z.lazy(() =>
    GetSettlementPaymentsDiscountAmount$outboundSchema
  ).optional(),
  totalAmount: z.lazy(() => GetSettlementPaymentsTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetSettlementPaymentsVatAmount$outboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(GetSettlementPaymentsCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => GetSettlementPaymentsRecurring$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsLine$ {
  /** @deprecated use `GetSettlementPaymentsLine$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsLine$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsLine$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsLine$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsLine$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsLine$Outbound;
}

export function getSettlementPaymentsLineToJSON(
  getSettlementPaymentsLine: GetSettlementPaymentsLine,
): string {
  return JSON.stringify(
    GetSettlementPaymentsLine$outboundSchema.parse(getSettlementPaymentsLine),
  );
}

export function getSettlementPaymentsLineFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsLine' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsBillingAddress$inboundSchema: z.ZodType<
  GetSettlementPaymentsBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetSettlementPaymentsBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetSettlementPaymentsBillingAddress$outboundSchema: z.ZodType<
  GetSettlementPaymentsBillingAddress$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsBillingAddress$ {
  /** @deprecated use `GetSettlementPaymentsBillingAddress$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsBillingAddress$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsBillingAddress$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsBillingAddress$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsBillingAddress$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsBillingAddress$Outbound;
}

export function getSettlementPaymentsBillingAddressToJSON(
  getSettlementPaymentsBillingAddress: GetSettlementPaymentsBillingAddress,
): string {
  return JSON.stringify(
    GetSettlementPaymentsBillingAddress$outboundSchema.parse(
      getSettlementPaymentsBillingAddress,
    ),
  );
}

export function getSettlementPaymentsBillingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsBillingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsBillingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsBillingAddress' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsShippingAddress$inboundSchema: z.ZodType<
  GetSettlementPaymentsShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetSettlementPaymentsShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetSettlementPaymentsShippingAddress$outboundSchema: z.ZodType<
  GetSettlementPaymentsShippingAddress$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsShippingAddress$ {
  /** @deprecated use `GetSettlementPaymentsShippingAddress$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsShippingAddress$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsShippingAddress$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsShippingAddress$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsShippingAddress$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsShippingAddress$Outbound;
}

export function getSettlementPaymentsShippingAddressToJSON(
  getSettlementPaymentsShippingAddress: GetSettlementPaymentsShippingAddress,
): string {
  return JSON.stringify(
    GetSettlementPaymentsShippingAddress$outboundSchema.parse(
      getSettlementPaymentsShippingAddress,
    ),
  );
}

export function getSettlementPaymentsShippingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsShippingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsShippingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsShippingAddress' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsMetadata$inboundSchema: z.ZodType<
  GetSettlementPaymentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetSettlementPaymentsMetadata$Outbound = {};

/** @internal */
export const GetSettlementPaymentsMetadata$outboundSchema: z.ZodType<
  GetSettlementPaymentsMetadata$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsMetadata$ {
  /** @deprecated use `GetSettlementPaymentsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsMetadata$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsMetadata$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsMetadata$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsMetadata$Outbound;
}

export function getSettlementPaymentsMetadataToJSON(
  getSettlementPaymentsMetadata: GetSettlementPaymentsMetadata,
): string {
  return JSON.stringify(
    GetSettlementPaymentsMetadata$outboundSchema.parse(
      getSettlementPaymentsMetadata,
    ),
  );
}

export function getSettlementPaymentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsMetadata' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsMetadataUnion$inboundSchema: z.ZodType<
  GetSettlementPaymentsMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetSettlementPaymentsMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type GetSettlementPaymentsMetadataUnion$Outbound =
  | GetSettlementPaymentsMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const GetSettlementPaymentsMetadataUnion$outboundSchema: z.ZodType<
  GetSettlementPaymentsMetadataUnion$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsMetadataUnion
> = z.union([
  z.lazy(() => GetSettlementPaymentsMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsMetadataUnion$ {
  /** @deprecated use `GetSettlementPaymentsMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsMetadataUnion$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsMetadataUnion$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsMetadataUnion$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsMetadataUnion$Outbound;
}

export function getSettlementPaymentsMetadataUnionToJSON(
  getSettlementPaymentsMetadataUnion: GetSettlementPaymentsMetadataUnion,
): string {
  return JSON.stringify(
    GetSettlementPaymentsMetadataUnion$outboundSchema.parse(
      getSettlementPaymentsMetadataUnion,
    ),
  );
}

export function getSettlementPaymentsMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsMetadataUnion' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsApplicationFeeAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsApplicationFeeAmount$outboundSchema:
  z.ZodType<
    GetSettlementPaymentsApplicationFeeAmount$Outbound,
    z.ZodTypeDef,
    GetSettlementPaymentsApplicationFeeAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsApplicationFeeAmount$ {
  /** @deprecated use `GetSettlementPaymentsApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsApplicationFeeAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsApplicationFeeAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsApplicationFeeAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsApplicationFeeAmount$Outbound;
}

export function getSettlementPaymentsApplicationFeeAmountToJSON(
  getSettlementPaymentsApplicationFeeAmount:
    GetSettlementPaymentsApplicationFeeAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsApplicationFeeAmount$outboundSchema.parse(
      getSettlementPaymentsApplicationFeeAmount,
    ),
  );
}

export function getSettlementPaymentsApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementPaymentsApplicationFeeAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsApplicationFeeAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementPaymentsApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsApplicationFee$inboundSchema: z.ZodType<
  GetSettlementPaymentsApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetSettlementPaymentsApplicationFeeAmount$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type GetSettlementPaymentsApplicationFee$Outbound = {
  amount?: GetSettlementPaymentsApplicationFeeAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const GetSettlementPaymentsApplicationFee$outboundSchema: z.ZodType<
  GetSettlementPaymentsApplicationFee$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsApplicationFee
> = z.object({
  amount: z.lazy(() => GetSettlementPaymentsApplicationFeeAmount$outboundSchema)
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsApplicationFee$ {
  /** @deprecated use `GetSettlementPaymentsApplicationFee$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsApplicationFee$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsApplicationFee$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsApplicationFee$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsApplicationFee$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsApplicationFee$Outbound;
}

export function getSettlementPaymentsApplicationFeeToJSON(
  getSettlementPaymentsApplicationFee: GetSettlementPaymentsApplicationFee,
): string {
  return JSON.stringify(
    GetSettlementPaymentsApplicationFee$outboundSchema.parse(
      getSettlementPaymentsApplicationFee,
    ),
  );
}

export function getSettlementPaymentsApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsApplicationFee' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsRoutingAmount$inboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPaymentsRoutingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPaymentsRoutingAmount$outboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRoutingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRoutingAmount$ {
  /** @deprecated use `GetSettlementPaymentsRoutingAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsRoutingAmount$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsRoutingAmount$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingAmount$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRoutingAmount$Outbound;
}

export function getSettlementPaymentsRoutingAmountToJSON(
  getSettlementPaymentsRoutingAmount: GetSettlementPaymentsRoutingAmount,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRoutingAmount$outboundSchema.parse(
      getSettlementPaymentsRoutingAmount,
    ),
  );
}

export function getSettlementPaymentsRoutingAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRoutingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsRoutingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRoutingAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsDestination$inboundSchema: z.ZodType<
  GetSettlementPaymentsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/** @internal */
export type GetSettlementPaymentsDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const GetSettlementPaymentsDestination$outboundSchema: z.ZodType<
  GetSettlementPaymentsDestination$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsDestination
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsDestination$ {
  /** @deprecated use `GetSettlementPaymentsDestination$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsDestination$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsDestination$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsDestination$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsDestination$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsDestination$Outbound;
}

export function getSettlementPaymentsDestinationToJSON(
  getSettlementPaymentsDestination: GetSettlementPaymentsDestination,
): string {
  return JSON.stringify(
    GetSettlementPaymentsDestination$outboundSchema.parse(
      getSettlementPaymentsDestination,
    ),
  );
}

export function getSettlementPaymentsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsDestination' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsRoutingSelf$inboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsRoutingSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsRoutingSelf$outboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRoutingSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRoutingSelf$ {
  /** @deprecated use `GetSettlementPaymentsRoutingSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsRoutingSelf$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsRoutingSelf$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingSelf$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRoutingSelf$Outbound;
}

export function getSettlementPaymentsRoutingSelfToJSON(
  getSettlementPaymentsRoutingSelf: GetSettlementPaymentsRoutingSelf,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRoutingSelf$outboundSchema.parse(
      getSettlementPaymentsRoutingSelf,
    ),
  );
}

export function getSettlementPaymentsRoutingSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRoutingSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsRoutingSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRoutingSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsRoutingPayment$inboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsRoutingPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsRoutingPayment$outboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingPayment$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRoutingPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRoutingPayment$ {
  /** @deprecated use `GetSettlementPaymentsRoutingPayment$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsRoutingPayment$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingPayment$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsRoutingPayment$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingPayment$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRoutingPayment$Outbound;
}

export function getSettlementPaymentsRoutingPaymentToJSON(
  getSettlementPaymentsRoutingPayment: GetSettlementPaymentsRoutingPayment,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRoutingPayment$outboundSchema.parse(
      getSettlementPaymentsRoutingPayment,
    ),
  );
}

export function getSettlementPaymentsRoutingPaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRoutingPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsRoutingPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRoutingPayment' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsRoutingLinks$inboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementPaymentsRoutingSelf$inboundSchema),
  payment: z.lazy(() => GetSettlementPaymentsRoutingPayment$inboundSchema),
});

/** @internal */
export type GetSettlementPaymentsRoutingLinks$Outbound = {
  self: GetSettlementPaymentsRoutingSelf$Outbound;
  payment: GetSettlementPaymentsRoutingPayment$Outbound;
};

/** @internal */
export const GetSettlementPaymentsRoutingLinks$outboundSchema: z.ZodType<
  GetSettlementPaymentsRoutingLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRoutingLinks
> = z.object({
  self: z.lazy(() => GetSettlementPaymentsRoutingSelf$outboundSchema),
  payment: z.lazy(() => GetSettlementPaymentsRoutingPayment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRoutingLinks$ {
  /** @deprecated use `GetSettlementPaymentsRoutingLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsRoutingLinks$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsRoutingLinks$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRoutingLinks$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRoutingLinks$Outbound;
}

export function getSettlementPaymentsRoutingLinksToJSON(
  getSettlementPaymentsRoutingLinks: GetSettlementPaymentsRoutingLinks,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRoutingLinks$outboundSchema.parse(
      getSettlementPaymentsRoutingLinks,
    ),
  );
}

export function getSettlementPaymentsRoutingLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRoutingLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsRoutingLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRoutingLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsRouting$inboundSchema: z.ZodType<
  GetSettlementPaymentsRouting,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => GetSettlementPaymentsRoutingAmount$inboundSchema),
  destination: z.lazy(() => GetSettlementPaymentsDestination$inboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetSettlementPaymentsRoutingLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementPaymentsRouting$Outbound = {
  resource: string;
  id: string;
  mode: string;
  amount: GetSettlementPaymentsRoutingAmount$Outbound;
  destination: GetSettlementPaymentsDestination$Outbound;
  createdAt: string;
  releaseDate?: string | null | undefined;
  _links: GetSettlementPaymentsRoutingLinks$Outbound;
};

/** @internal */
export const GetSettlementPaymentsRouting$outboundSchema: z.ZodType<
  GetSettlementPaymentsRouting$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRouting
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => GetSettlementPaymentsRoutingAmount$outboundSchema),
  destination: z.lazy(() => GetSettlementPaymentsDestination$outboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetSettlementPaymentsRoutingLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRouting$ {
  /** @deprecated use `GetSettlementPaymentsRouting$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsRouting$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRouting$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsRouting$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRouting$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRouting$Outbound;
}

export function getSettlementPaymentsRoutingToJSON(
  getSettlementPaymentsRouting: GetSettlementPaymentsRouting,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRouting$outboundSchema.parse(
      getSettlementPaymentsRouting,
    ),
  );
}

export function getSettlementPaymentsRoutingFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRouting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsRouting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRouting' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsStatusReason$inboundSchema: z.ZodType<
  GetSettlementPaymentsStatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type GetSettlementPaymentsStatusReason$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const GetSettlementPaymentsStatusReason$outboundSchema: z.ZodType<
  GetSettlementPaymentsStatusReason$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsStatusReason
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsStatusReason$ {
  /** @deprecated use `GetSettlementPaymentsStatusReason$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsStatusReason$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsStatusReason$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsStatusReason$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsStatusReason$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsStatusReason$Outbound;
}

export function getSettlementPaymentsStatusReasonToJSON(
  getSettlementPaymentsStatusReason: GetSettlementPaymentsStatusReason,
): string {
  return JSON.stringify(
    GetSettlementPaymentsStatusReason$outboundSchema.parse(
      getSettlementPaymentsStatusReason,
    ),
  );
}

export function getSettlementPaymentsStatusReasonFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsStatusReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsStatusReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsStatusReason' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsPaymentSelf$inboundSchema: z.ZodType<
  GetSettlementPaymentsPaymentSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsPaymentSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsPaymentSelf$outboundSchema: z.ZodType<
  GetSettlementPaymentsPaymentSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsPaymentSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsPaymentSelf$ {
  /** @deprecated use `GetSettlementPaymentsPaymentSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsPaymentSelf$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsPaymentSelf$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentSelf$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsPaymentSelf$Outbound;
}

export function getSettlementPaymentsPaymentSelfToJSON(
  getSettlementPaymentsPaymentSelf: GetSettlementPaymentsPaymentSelf,
): string {
  return JSON.stringify(
    GetSettlementPaymentsPaymentSelf$outboundSchema.parse(
      getSettlementPaymentsPaymentSelf,
    ),
  );
}

export function getSettlementPaymentsPaymentSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsPaymentSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsPaymentSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsPaymentSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsCheckout$inboundSchema: z.ZodType<
  GetSettlementPaymentsCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsCheckout$outboundSchema: z.ZodType<
  GetSettlementPaymentsCheckout$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsCheckout$ {
  /** @deprecated use `GetSettlementPaymentsCheckout$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsCheckout$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsCheckout$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsCheckout$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsCheckout$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsCheckout$Outbound;
}

export function getSettlementPaymentsCheckoutToJSON(
  getSettlementPaymentsCheckout: GetSettlementPaymentsCheckout,
): string {
  return JSON.stringify(
    GetSettlementPaymentsCheckout$outboundSchema.parse(
      getSettlementPaymentsCheckout,
    ),
  );
}

export function getSettlementPaymentsCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsCheckout' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsMobileAppCheckout$inboundSchema: z.ZodType<
  GetSettlementPaymentsMobileAppCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsMobileAppCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsMobileAppCheckout$outboundSchema: z.ZodType<
  GetSettlementPaymentsMobileAppCheckout$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsMobileAppCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsMobileAppCheckout$ {
  /** @deprecated use `GetSettlementPaymentsMobileAppCheckout$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsMobileAppCheckout$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsMobileAppCheckout$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsMobileAppCheckout$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsMobileAppCheckout$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsMobileAppCheckout$Outbound;
}

export function getSettlementPaymentsMobileAppCheckoutToJSON(
  getSettlementPaymentsMobileAppCheckout:
    GetSettlementPaymentsMobileAppCheckout,
): string {
  return JSON.stringify(
    GetSettlementPaymentsMobileAppCheckout$outboundSchema.parse(
      getSettlementPaymentsMobileAppCheckout,
    ),
  );
}

export function getSettlementPaymentsMobileAppCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsMobileAppCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsMobileAppCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsMobileAppCheckout' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsChangePaymentState$inboundSchema: z.ZodType<
  GetSettlementPaymentsChangePaymentState,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsChangePaymentState$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsChangePaymentState$outboundSchema: z.ZodType<
  GetSettlementPaymentsChangePaymentState$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsChangePaymentState
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsChangePaymentState$ {
  /** @deprecated use `GetSettlementPaymentsChangePaymentState$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsChangePaymentState$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsChangePaymentState$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsChangePaymentState$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsChangePaymentState$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsChangePaymentState$Outbound;
}

export function getSettlementPaymentsChangePaymentStateToJSON(
  getSettlementPaymentsChangePaymentState:
    GetSettlementPaymentsChangePaymentState,
): string {
  return JSON.stringify(
    GetSettlementPaymentsChangePaymentState$outboundSchema.parse(
      getSettlementPaymentsChangePaymentState,
    ),
  );
}

export function getSettlementPaymentsChangePaymentStateFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementPaymentsChangePaymentState,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsChangePaymentState$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementPaymentsChangePaymentState' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsDashboard$inboundSchema: z.ZodType<
  GetSettlementPaymentsDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsDashboard$outboundSchema: z.ZodType<
  GetSettlementPaymentsDashboard$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsDashboard$ {
  /** @deprecated use `GetSettlementPaymentsDashboard$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsDashboard$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsDashboard$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsDashboard$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsDashboard$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsDashboard$Outbound;
}

export function getSettlementPaymentsDashboardToJSON(
  getSettlementPaymentsDashboard: GetSettlementPaymentsDashboard,
): string {
  return JSON.stringify(
    GetSettlementPaymentsDashboard$outboundSchema.parse(
      getSettlementPaymentsDashboard,
    ),
  );
}

export function getSettlementPaymentsDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsDashboard' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsRefunds$inboundSchema: z.ZodType<
  GetSettlementPaymentsRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsRefunds$outboundSchema: z.ZodType<
  GetSettlementPaymentsRefunds$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsRefunds$ {
  /** @deprecated use `GetSettlementPaymentsRefunds$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsRefunds$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsRefunds$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsRefunds$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsRefunds$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsRefunds$Outbound;
}

export function getSettlementPaymentsRefundsToJSON(
  getSettlementPaymentsRefunds: GetSettlementPaymentsRefunds,
): string {
  return JSON.stringify(
    GetSettlementPaymentsRefunds$outboundSchema.parse(
      getSettlementPaymentsRefunds,
    ),
  );
}

export function getSettlementPaymentsRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsRefunds' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsChargebacks$inboundSchema: z.ZodType<
  GetSettlementPaymentsChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsChargebacks$outboundSchema: z.ZodType<
  GetSettlementPaymentsChargebacks$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsChargebacks$ {
  /** @deprecated use `GetSettlementPaymentsChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsChargebacks$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsChargebacks$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsChargebacks$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsChargebacks$Outbound;
}

export function getSettlementPaymentsChargebacksToJSON(
  getSettlementPaymentsChargebacks: GetSettlementPaymentsChargebacks,
): string {
  return JSON.stringify(
    GetSettlementPaymentsChargebacks$outboundSchema.parse(
      getSettlementPaymentsChargebacks,
    ),
  );
}

export function getSettlementPaymentsChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsChargebacks' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsCaptures$inboundSchema: z.ZodType<
  GetSettlementPaymentsCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsCaptures$outboundSchema: z.ZodType<
  GetSettlementPaymentsCaptures$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsCaptures$ {
  /** @deprecated use `GetSettlementPaymentsCaptures$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsCaptures$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsCaptures$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsCaptures$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsCaptures$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsCaptures$Outbound;
}

export function getSettlementPaymentsCapturesToJSON(
  getSettlementPaymentsCaptures: GetSettlementPaymentsCaptures,
): string {
  return JSON.stringify(
    GetSettlementPaymentsCaptures$outboundSchema.parse(
      getSettlementPaymentsCaptures,
    ),
  );
}

export function getSettlementPaymentsCapturesFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsCaptures' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsSettlement$inboundSchema: z.ZodType<
  GetSettlementPaymentsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsSettlement$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsSettlement$outboundSchema: z.ZodType<
  GetSettlementPaymentsSettlement$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsSettlement
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsSettlement$ {
  /** @deprecated use `GetSettlementPaymentsSettlement$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsSettlement$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsSettlement$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsSettlement$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsSettlement$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsSettlement$Outbound;
}

export function getSettlementPaymentsSettlementToJSON(
  getSettlementPaymentsSettlement: GetSettlementPaymentsSettlement,
): string {
  return JSON.stringify(
    GetSettlementPaymentsSettlement$outboundSchema.parse(
      getSettlementPaymentsSettlement,
    ),
  );
}

export function getSettlementPaymentsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsSettlement' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsCustomer$inboundSchema: z.ZodType<
  GetSettlementPaymentsCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsCustomer$outboundSchema: z.ZodType<
  GetSettlementPaymentsCustomer$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsCustomer$ {
  /** @deprecated use `GetSettlementPaymentsCustomer$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsCustomer$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsCustomer$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsCustomer$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsCustomer$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsCustomer$Outbound;
}

export function getSettlementPaymentsCustomerToJSON(
  getSettlementPaymentsCustomer: GetSettlementPaymentsCustomer,
): string {
  return JSON.stringify(
    GetSettlementPaymentsCustomer$outboundSchema.parse(
      getSettlementPaymentsCustomer,
    ),
  );
}

export function getSettlementPaymentsCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsCustomer' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsMandate$inboundSchema: z.ZodType<
  GetSettlementPaymentsMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsMandate$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsMandate$outboundSchema: z.ZodType<
  GetSettlementPaymentsMandate$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsMandate
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsMandate$ {
  /** @deprecated use `GetSettlementPaymentsMandate$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsMandate$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsMandate$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsMandate$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsMandate$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsMandate$Outbound;
}

export function getSettlementPaymentsMandateToJSON(
  getSettlementPaymentsMandate: GetSettlementPaymentsMandate,
): string {
  return JSON.stringify(
    GetSettlementPaymentsMandate$outboundSchema.parse(
      getSettlementPaymentsMandate,
    ),
  );
}

export function getSettlementPaymentsMandateFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsMandate' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsSubscription$inboundSchema: z.ZodType<
  GetSettlementPaymentsSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsSubscription$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsSubscription$outboundSchema: z.ZodType<
  GetSettlementPaymentsSubscription$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsSubscription
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsSubscription$ {
  /** @deprecated use `GetSettlementPaymentsSubscription$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsSubscription$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsSubscription$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsSubscription$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsSubscription$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsSubscription$Outbound;
}

export function getSettlementPaymentsSubscriptionToJSON(
  getSettlementPaymentsSubscription: GetSettlementPaymentsSubscription,
): string {
  return JSON.stringify(
    GetSettlementPaymentsSubscription$outboundSchema.parse(
      getSettlementPaymentsSubscription,
    ),
  );
}

export function getSettlementPaymentsSubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsSubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsSubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsSubscription' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsOrder$inboundSchema: z.ZodType<
  GetSettlementPaymentsOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsOrder$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsOrder$outboundSchema: z.ZodType<
  GetSettlementPaymentsOrder$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsOrder
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsOrder$ {
  /** @deprecated use `GetSettlementPaymentsOrder$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsOrder$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsOrder$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsOrder$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsOrder$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsOrder$Outbound;
}

export function getSettlementPaymentsOrderToJSON(
  getSettlementPaymentsOrder: GetSettlementPaymentsOrder,
): string {
  return JSON.stringify(
    GetSettlementPaymentsOrder$outboundSchema.parse(getSettlementPaymentsOrder),
  );
}

export function getSettlementPaymentsOrderFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsOrder' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsTerminal$inboundSchema: z.ZodType<
  GetSettlementPaymentsTerminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsTerminal$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsTerminal$outboundSchema: z.ZodType<
  GetSettlementPaymentsTerminal$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsTerminal
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsTerminal$ {
  /** @deprecated use `GetSettlementPaymentsTerminal$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsTerminal$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsTerminal$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsTerminal$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsTerminal$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsTerminal$Outbound;
}

export function getSettlementPaymentsTerminalToJSON(
  getSettlementPaymentsTerminal: GetSettlementPaymentsTerminal,
): string {
  return JSON.stringify(
    GetSettlementPaymentsTerminal$outboundSchema.parse(
      getSettlementPaymentsTerminal,
    ),
  );
}

export function getSettlementPaymentsTerminalFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsTerminal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsTerminal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsTerminal' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsPaymentDocumentation$inboundSchema: z.ZodType<
  GetSettlementPaymentsPaymentDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsPaymentDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsPaymentDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementPaymentsPaymentDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementPaymentsPaymentDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsPaymentDocumentation$ {
  /** @deprecated use `GetSettlementPaymentsPaymentDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementPaymentsPaymentDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsPaymentDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsPaymentDocumentation$Outbound;
}

export function getSettlementPaymentsPaymentDocumentationToJSON(
  getSettlementPaymentsPaymentDocumentation:
    GetSettlementPaymentsPaymentDocumentation,
): string {
  return JSON.stringify(
    GetSettlementPaymentsPaymentDocumentation$outboundSchema.parse(
      getSettlementPaymentsPaymentDocumentation,
    ),
  );
}

export function getSettlementPaymentsPaymentDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementPaymentsPaymentDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsPaymentDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementPaymentsPaymentDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsPaymentLinks$inboundSchema: z.ZodType<
  GetSettlementPaymentsPaymentLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementPaymentsPaymentSelf$inboundSchema),
  checkout: z.lazy(() => GetSettlementPaymentsCheckout$inboundSchema)
    .optional(),
  mobileAppCheckout: z.lazy(() =>
    GetSettlementPaymentsMobileAppCheckout$inboundSchema
  ).optional(),
  changePaymentState: z.lazy(() =>
    GetSettlementPaymentsChangePaymentState$inboundSchema
  ).optional(),
  dashboard: z.lazy(() => GetSettlementPaymentsDashboard$inboundSchema),
  refunds: z.lazy(() => GetSettlementPaymentsRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetSettlementPaymentsChargebacks$inboundSchema)
    .optional(),
  captures: z.lazy(() => GetSettlementPaymentsCaptures$inboundSchema)
    .optional(),
  settlement: z.lazy(() => GetSettlementPaymentsSettlement$inboundSchema)
    .optional(),
  customer: z.lazy(() => GetSettlementPaymentsCustomer$inboundSchema)
    .optional(),
  mandate: z.lazy(() => GetSettlementPaymentsMandate$inboundSchema).optional(),
  subscription: z.lazy(() => GetSettlementPaymentsSubscription$inboundSchema)
    .optional(),
  order: z.lazy(() => GetSettlementPaymentsOrder$inboundSchema).optional(),
  terminal: z.lazy(() => GetSettlementPaymentsTerminal$inboundSchema)
    .optional(),
  documentation: z.lazy(() =>
    GetSettlementPaymentsPaymentDocumentation$inboundSchema
  ).optional(),
});

/** @internal */
export type GetSettlementPaymentsPaymentLinks$Outbound = {
  self: GetSettlementPaymentsPaymentSelf$Outbound;
  checkout?: GetSettlementPaymentsCheckout$Outbound | undefined;
  mobileAppCheckout?:
    | GetSettlementPaymentsMobileAppCheckout$Outbound
    | undefined;
  changePaymentState?:
    | GetSettlementPaymentsChangePaymentState$Outbound
    | undefined;
  dashboard: GetSettlementPaymentsDashboard$Outbound;
  refunds?: GetSettlementPaymentsRefunds$Outbound | undefined;
  chargebacks?: GetSettlementPaymentsChargebacks$Outbound | undefined;
  captures?: GetSettlementPaymentsCaptures$Outbound | undefined;
  settlement?: GetSettlementPaymentsSettlement$Outbound | undefined;
  customer?: GetSettlementPaymentsCustomer$Outbound | undefined;
  mandate?: GetSettlementPaymentsMandate$Outbound | undefined;
  subscription?: GetSettlementPaymentsSubscription$Outbound | undefined;
  order?: GetSettlementPaymentsOrder$Outbound | undefined;
  terminal?: GetSettlementPaymentsTerminal$Outbound | undefined;
  documentation?:
    | GetSettlementPaymentsPaymentDocumentation$Outbound
    | undefined;
};

/** @internal */
export const GetSettlementPaymentsPaymentLinks$outboundSchema: z.ZodType<
  GetSettlementPaymentsPaymentLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsPaymentLinks
> = z.object({
  self: z.lazy(() => GetSettlementPaymentsPaymentSelf$outboundSchema),
  checkout: z.lazy(() => GetSettlementPaymentsCheckout$outboundSchema)
    .optional(),
  mobileAppCheckout: z.lazy(() =>
    GetSettlementPaymentsMobileAppCheckout$outboundSchema
  ).optional(),
  changePaymentState: z.lazy(() =>
    GetSettlementPaymentsChangePaymentState$outboundSchema
  ).optional(),
  dashboard: z.lazy(() => GetSettlementPaymentsDashboard$outboundSchema),
  refunds: z.lazy(() => GetSettlementPaymentsRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetSettlementPaymentsChargebacks$outboundSchema)
    .optional(),
  captures: z.lazy(() => GetSettlementPaymentsCaptures$outboundSchema)
    .optional(),
  settlement: z.lazy(() => GetSettlementPaymentsSettlement$outboundSchema)
    .optional(),
  customer: z.lazy(() => GetSettlementPaymentsCustomer$outboundSchema)
    .optional(),
  mandate: z.lazy(() => GetSettlementPaymentsMandate$outboundSchema).optional(),
  subscription: z.lazy(() => GetSettlementPaymentsSubscription$outboundSchema)
    .optional(),
  order: z.lazy(() => GetSettlementPaymentsOrder$outboundSchema).optional(),
  terminal: z.lazy(() => GetSettlementPaymentsTerminal$outboundSchema)
    .optional(),
  documentation: z.lazy(() =>
    GetSettlementPaymentsPaymentDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsPaymentLinks$ {
  /** @deprecated use `GetSettlementPaymentsPaymentLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsPaymentLinks$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsPaymentLinks$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentLinks$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsPaymentLinks$Outbound;
}

export function getSettlementPaymentsPaymentLinksToJSON(
  getSettlementPaymentsPaymentLinks: GetSettlementPaymentsPaymentLinks,
): string {
  return JSON.stringify(
    GetSettlementPaymentsPaymentLinks$outboundSchema.parse(
      getSettlementPaymentsPaymentLinks,
    ),
  );
}

export function getSettlementPaymentsPaymentLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsPaymentLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsPaymentLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsPaymentLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsPaymentOutput$inboundSchema: z.ZodType<
  GetSettlementPaymentsPaymentOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => GetSettlementPaymentsAmount$inboundSchema),
  amountRefunded: z.lazy(() =>
    GetSettlementPaymentsAmountRefunded$inboundSchema
  ).optional(),
  amountRemaining: z.lazy(() =>
    GetSettlementPaymentsAmountRemaining$inboundSchema
  ).optional(),
  amountCaptured: z.lazy(() =>
    GetSettlementPaymentsAmountCaptured$inboundSchema
  ).optional(),
  amountChargedBack: z.lazy(() =>
    GetSettlementPaymentsAmountChargedBack$inboundSchema
  ).optional(),
  settlementAmount: z.lazy(() =>
    GetSettlementPaymentsSettlementAmount$inboundSchema
  ).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => GetSettlementPaymentsLine$inboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    GetSettlementPaymentsBillingAddress$inboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    GetSettlementPaymentsShippingAddress$inboundSchema
  ).optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSettlementPaymentsMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => GetSettlementPaymentsApplicationFee$inboundSchema),
  ).optional(),
  routing: z.nullable(
    z.array(z.lazy(() => GetSettlementPaymentsRouting$inboundSchema)),
  ).optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(
    z.lazy(() => GetSettlementPaymentsStatusReason$inboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetSettlementPaymentsPaymentLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementPaymentsPaymentOutput$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: GetSettlementPaymentsAmount$Outbound;
  amountRefunded?: GetSettlementPaymentsAmountRefunded$Outbound | undefined;
  amountRemaining?: GetSettlementPaymentsAmountRemaining$Outbound | undefined;
  amountCaptured?: GetSettlementPaymentsAmountCaptured$Outbound | undefined;
  amountChargedBack?:
    | GetSettlementPaymentsAmountChargedBack$Outbound
    | undefined;
  settlementAmount?: GetSettlementPaymentsSettlementAmount$Outbound | undefined;
  redirectUrl?: string | null | undefined;
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  lines?: Array<GetSettlementPaymentsLine$Outbound> | null | undefined;
  billingAddress?: GetSettlementPaymentsBillingAddress$Outbound | undefined;
  shippingAddress?: GetSettlementPaymentsShippingAddress$Outbound | undefined;
  locale?: string | null | undefined;
  countryCode?: string | null | undefined;
  method?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  metadata?:
    | GetSettlementPaymentsMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  captureMode?: string | null | undefined;
  captureDelay?: string | null | undefined;
  captureBefore?: string | null | undefined;
  applicationFee?:
    | GetSettlementPaymentsApplicationFee$Outbound
    | null
    | undefined;
  routing?: Array<GetSettlementPaymentsRouting$Outbound> | null | undefined;
  sequenceType: string | null;
  subscriptionId?: string | null | undefined;
  mandateId?: string | null | undefined;
  customerId?: string | null | undefined;
  profileId: string;
  settlementId?: string | null | undefined;
  orderId?: string | null | undefined;
  status: string;
  statusReason?: GetSettlementPaymentsStatusReason$Outbound | null | undefined;
  isCancelable?: boolean | null | undefined;
  details?: { [k: string]: any } | null | undefined;
  createdAt: string;
  authorizedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  canceledAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredAt?: string | null | undefined;
  failedAt?: string | null | undefined;
  _links: GetSettlementPaymentsPaymentLinks$Outbound;
};

/** @internal */
export const GetSettlementPaymentsPaymentOutput$outboundSchema: z.ZodType<
  GetSettlementPaymentsPaymentOutput$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsPaymentOutput
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => GetSettlementPaymentsAmount$outboundSchema),
  amountRefunded: z.lazy(() =>
    GetSettlementPaymentsAmountRefunded$outboundSchema
  ).optional(),
  amountRemaining: z.lazy(() =>
    GetSettlementPaymentsAmountRemaining$outboundSchema
  ).optional(),
  amountCaptured: z.lazy(() =>
    GetSettlementPaymentsAmountCaptured$outboundSchema
  ).optional(),
  amountChargedBack: z.lazy(() =>
    GetSettlementPaymentsAmountChargedBack$outboundSchema
  ).optional(),
  settlementAmount: z.lazy(() =>
    GetSettlementPaymentsSettlementAmount$outboundSchema
  ).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => GetSettlementPaymentsLine$outboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    GetSettlementPaymentsBillingAddress$outboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    GetSettlementPaymentsShippingAddress$outboundSchema
  ).optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSettlementPaymentsMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => GetSettlementPaymentsApplicationFee$outboundSchema),
  ).optional(),
  routing: z.nullable(
    z.array(z.lazy(() => GetSettlementPaymentsRouting$outboundSchema)),
  ).optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(
    z.lazy(() => GetSettlementPaymentsStatusReason$outboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetSettlementPaymentsPaymentLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsPaymentOutput$ {
  /** @deprecated use `GetSettlementPaymentsPaymentOutput$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsPaymentOutput$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentOutput$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsPaymentOutput$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsPaymentOutput$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsPaymentOutput$Outbound;
}

export function getSettlementPaymentsPaymentOutputToJSON(
  getSettlementPaymentsPaymentOutput: GetSettlementPaymentsPaymentOutput,
): string {
  return JSON.stringify(
    GetSettlementPaymentsPaymentOutput$outboundSchema.parse(
      getSettlementPaymentsPaymentOutput,
    ),
  );
}

export function getSettlementPaymentsPaymentOutputFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsPaymentOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsPaymentOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsPaymentOutput' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsEmbedded$inboundSchema: z.ZodType<
  GetSettlementPaymentsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  payments: z.array(
    z.lazy(() => GetSettlementPaymentsPaymentOutput$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetSettlementPaymentsEmbedded$Outbound = {
  payments?: Array<GetSettlementPaymentsPaymentOutput$Outbound> | undefined;
};

/** @internal */
export const GetSettlementPaymentsEmbedded$outboundSchema: z.ZodType<
  GetSettlementPaymentsEmbedded$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsEmbedded
> = z.object({
  payments: z.array(
    z.lazy(() => GetSettlementPaymentsPaymentOutput$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsEmbedded$ {
  /** @deprecated use `GetSettlementPaymentsEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsEmbedded$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsEmbedded$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsEmbedded$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsEmbedded$Outbound;
}

export function getSettlementPaymentsEmbeddedToJSON(
  getSettlementPaymentsEmbedded: GetSettlementPaymentsEmbedded,
): string {
  return JSON.stringify(
    GetSettlementPaymentsEmbedded$outboundSchema.parse(
      getSettlementPaymentsEmbedded,
    ),
  );
}

export function getSettlementPaymentsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsEmbedded' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsSelf$inboundSchema: z.ZodType<
  GetSettlementPaymentsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsSelf$outboundSchema: z.ZodType<
  GetSettlementPaymentsSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsSelf$ {
  /** @deprecated use `GetSettlementPaymentsSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsSelf$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsSelf$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsSelf$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsSelf$Outbound;
}

export function getSettlementPaymentsSelfToJSON(
  getSettlementPaymentsSelf: GetSettlementPaymentsSelf,
): string {
  return JSON.stringify(
    GetSettlementPaymentsSelf$outboundSchema.parse(getSettlementPaymentsSelf),
  );
}

export function getSettlementPaymentsSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsPrevious$inboundSchema: z.ZodType<
  GetSettlementPaymentsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementPaymentsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementPaymentsPrevious$outboundSchema: z.ZodType<
  GetSettlementPaymentsPrevious$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsPrevious$ {
  /** @deprecated use `GetSettlementPaymentsPrevious$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsPrevious$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsPrevious$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsPrevious$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsPrevious$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsPrevious$Outbound;
}

export function getSettlementPaymentsPreviousToJSON(
  getSettlementPaymentsPrevious: GetSettlementPaymentsPrevious,
): string {
  return JSON.stringify(
    GetSettlementPaymentsPrevious$outboundSchema.parse(
      getSettlementPaymentsPrevious,
    ),
  );
}

export function getSettlementPaymentsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsPrevious' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsNext$inboundSchema: z.ZodType<
  GetSettlementPaymentsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementPaymentsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementPaymentsNext$outboundSchema: z.ZodType<
  GetSettlementPaymentsNext$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsNext$ {
  /** @deprecated use `GetSettlementPaymentsNext$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsNext$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsNext$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsNext$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsNext$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsNext$Outbound;
}

export function getSettlementPaymentsNextToJSON(
  getSettlementPaymentsNext: GetSettlementPaymentsNext,
): string {
  return JSON.stringify(
    GetSettlementPaymentsNext$outboundSchema.parse(getSettlementPaymentsNext),
  );
}

export function getSettlementPaymentsNextFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsNext' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsDocumentation$inboundSchema: z.ZodType<
  GetSettlementPaymentsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPaymentsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPaymentsDocumentation$outboundSchema: z.ZodType<
  GetSettlementPaymentsDocumentation$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsDocumentation$ {
  /** @deprecated use `GetSettlementPaymentsDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementPaymentsDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsDocumentation$Outbound;
}

export function getSettlementPaymentsDocumentationToJSON(
  getSettlementPaymentsDocumentation: GetSettlementPaymentsDocumentation,
): string {
  return JSON.stringify(
    GetSettlementPaymentsDocumentation$outboundSchema.parse(
      getSettlementPaymentsDocumentation,
    ),
  );
}

export function getSettlementPaymentsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementPaymentsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsLinks$inboundSchema: z.ZodType<
  GetSettlementPaymentsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementPaymentsSelf$inboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => GetSettlementPaymentsPrevious$inboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => GetSettlementPaymentsNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementPaymentsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSettlementPaymentsLinks$Outbound = {
  self?: GetSettlementPaymentsSelf$Outbound | undefined;
  previous?: GetSettlementPaymentsPrevious$Outbound | null | undefined;
  next?: GetSettlementPaymentsNext$Outbound | null | undefined;
  documentation?: GetSettlementPaymentsDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSettlementPaymentsLinks$outboundSchema: z.ZodType<
  GetSettlementPaymentsLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsLinks
> = z.object({
  self: z.lazy(() => GetSettlementPaymentsSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => GetSettlementPaymentsPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => GetSettlementPaymentsNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementPaymentsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsLinks$ {
  /** @deprecated use `GetSettlementPaymentsLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsLinks$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsLinks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsLinks$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsLinks$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsLinks$Outbound;
}

export function getSettlementPaymentsLinksToJSON(
  getSettlementPaymentsLinks: GetSettlementPaymentsLinks,
): string {
  return JSON.stringify(
    GetSettlementPaymentsLinks$outboundSchema.parse(getSettlementPaymentsLinks),
  );
}

export function getSettlementPaymentsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementPaymentsResponse$inboundSchema: z.ZodType<
  GetSettlementPaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => GetSettlementPaymentsEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => GetSettlementPaymentsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementPaymentsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: GetSettlementPaymentsEmbedded$Outbound | undefined;
  _links?: GetSettlementPaymentsLinks$Outbound | undefined;
};

/** @internal */
export const GetSettlementPaymentsResponse$outboundSchema: z.ZodType<
  GetSettlementPaymentsResponse$Outbound,
  z.ZodTypeDef,
  GetSettlementPaymentsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => GetSettlementPaymentsEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => GetSettlementPaymentsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPaymentsResponse$ {
  /** @deprecated use `GetSettlementPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPaymentsResponse$inboundSchema;
  /** @deprecated use `GetSettlementPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPaymentsResponse$outboundSchema;
  /** @deprecated use `GetSettlementPaymentsResponse$Outbound` instead. */
  export type Outbound = GetSettlementPaymentsResponse$Outbound;
}

export function getSettlementPaymentsResponseToJSON(
  getSettlementPaymentsResponse: GetSettlementPaymentsResponse,
): string {
  return JSON.stringify(
    GetSettlementPaymentsResponse$outboundSchema.parse(
      getSettlementPaymentsResponse,
    ),
  );
}

export function getSettlementPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPaymentsResponse' from JSON`,
  );
}
