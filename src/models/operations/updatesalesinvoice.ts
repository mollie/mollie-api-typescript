/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * Dependent parameters: `paymentDetails` for `paid`, `emailDetails` for `issued` and `paid`.
 */
export const UpdateSalesInvoiceStatusRequest = {
  Draft: "draft",
  Issued: "issued",
  Paid: "paid",
} as const;
/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * Dependent parameters: `paymentDetails` for `paid`, `emailDetails` for `issued` and `paid`.
 */
export type UpdateSalesInvoiceStatusRequest = ClosedEnum<
  typeof UpdateSalesInvoiceStatusRequest
>;

/**
 * The payment term to be set on the invoice.
 */
export const UpdateSalesInvoicePaymentTermRequest = {
  Sevendays: "7 days",
  Fourteendays: "14 days",
  Thirtydays: "30 days",
  FortyFivedays: "45 days",
  Sixtydays: "60 days",
  Ninetydays: "90 days",
  OneHundredAndTwentydays: "120 days",
} as const;
/**
 * The payment term to be set on the invoice.
 */
export type UpdateSalesInvoicePaymentTermRequest = ClosedEnum<
  typeof UpdateSalesInvoicePaymentTermRequest
>;

/**
 * The way through which the invoice is to be set to paid.
 */
export const UpdateSalesInvoiceSourceRequest = {
  Manual: "manual",
  PaymentLink: "payment-link",
  Payment: "payment",
} as const;
/**
 * The way through which the invoice is to be set to paid.
 */
export type UpdateSalesInvoiceSourceRequest = ClosedEnum<
  typeof UpdateSalesInvoiceSourceRequest
>;

/**
 * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
 *
 * @remarks
 * provided details. Required for `paid` status.
 */
export type UpdateSalesInvoicePaymentDetailsRequest = {
  /**
   * The way through which the invoice is to be set to paid.
   */
  source: UpdateSalesInvoiceSourceRequest;
  /**
   * A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
   *
   * @remarks
   * `payment`.
   */
  sourceReference?: string | null | undefined;
};

/**
 * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
 *
 * @remarks
 * recipient with the provided `subject` and `body`. Required for `issued` status.
 */
export type UpdateSalesInvoiceEmailDetailsRequest = {
  /**
   * The subject of the email to be sent.
   */
  subject: string;
  /**
   * The body of the email to be sent. To add newline characters, you can use `\n`.
   */
  body: string;
};

/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export const UpdateSalesInvoiceRecipientTypeRequest = {
  Consumer: "consumer",
  Business: "business",
} as const;
/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export type UpdateSalesInvoiceRecipientTypeRequest = ClosedEnum<
  typeof UpdateSalesInvoiceRecipientTypeRequest
>;

/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export const UpdateSalesInvoiceLocaleRequest = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
} as const;
/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export type UpdateSalesInvoiceLocaleRequest = ClosedEnum<
  typeof UpdateSalesInvoiceLocaleRequest
>;

/**
 * The recipient object should contain all the information relevant to create an invoice for an intended
 *
 * @remarks
 * recipient. This data will be stored, updated, and re-used as appropriate, based on the `recipientIdentifier`.
 */
export type UpdateSalesInvoiceRecipientRequest = {
  /**
   * The type of recipient, either `consumer` or `business`. This will determine what further fields are
   *
   * @remarks
   * required on the `recipient` object.
   */
  type: UpdateSalesInvoiceRecipientTypeRequest;
  /**
   * The title of the `consumer` type recipient, for example Mr. or Mrs..
   */
  title?: string | null | undefined;
  /**
   * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  givenName?: string | null | undefined;
  /**
   * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  familyName?: string | null | undefined;
  /**
   * The trading name of the `business` type recipient.
   */
  organizationName?: string | null | undefined;
  /**
   * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
   *
   * @remarks
   * has to be provided.
   */
  organizationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
   *
   * @remarks
   * has to be provided.
   */
  vatNumber?: string | null | undefined;
  /**
   * The email address of the recipient.
   */
  email: string;
  /**
   * The phone number of the recipient.
   */
  phone?: string | null | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | null | undefined;
  /**
   * A postal code.
   */
  postalCode: string;
  /**
   * The recipient's city.
   */
  city: string;
  /**
   * The recipient's region.
   */
  region?: string | null | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
  /**
   * The locale for the recipient, to be used for translations in PDF generation and payment pages.
   */
  locale: UpdateSalesInvoiceLocaleRequest;
};

/**
 * The price of a single item excluding VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * The unit price can be zero in case of free items.
 */
export type UpdateSalesInvoiceUnitPriceRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of discount.
 */
export const UpdateSalesInvoiceLineTypeRequest = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type UpdateSalesInvoiceLineTypeRequest = ClosedEnum<
  typeof UpdateSalesInvoiceLineTypeRequest
>;

/**
 * The discount to be applied to the line item.
 */
export type UpdateSalesInvoiceLineDiscountRequest = {
  /**
   * The type of discount.
   */
  type: UpdateSalesInvoiceLineTypeRequest;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type UpdateSalesInvoiceLineRequest = {
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The vat rate to be applied to this line item.
   */
  vatRate: string;
  /**
   * The price of a single item excluding VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: UpdateSalesInvoiceUnitPriceRequest;
  /**
   * The discount to be applied to the line item.
   */
  discount?: UpdateSalesInvoiceLineDiscountRequest | null | undefined;
};

/**
 * The type of discount.
 */
export const UpdateSalesInvoiceDiscountTypeRequest = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type UpdateSalesInvoiceDiscountTypeRequest = ClosedEnum<
  typeof UpdateSalesInvoiceDiscountTypeRequest
>;

/**
 * The discount to be applied to the entire invoice, possibly on top of the line item discounts.
 */
export type UpdateSalesInvoiceDiscountRequest = {
  /**
   * The type of discount.
   */
  type: UpdateSalesInvoiceDiscountTypeRequest;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type UpdateSalesInvoiceRequestBody = {
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * The status for the invoice to end up in.
   *
   * @remarks
   *
   * Dependent parameters: `paymentDetails` for `paid`, `emailDetails` for `issued` and `paid`.
   */
  status?: UpdateSalesInvoiceStatusRequest | undefined;
  /**
   * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
   */
  memo?: string | null | undefined;
  /**
   * The payment term to be set on the invoice.
   */
  paymentTerm?: UpdateSalesInvoicePaymentTermRequest | null | undefined;
  /**
   * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
   *
   * @remarks
   * provided details. Required for `paid` status.
   */
  paymentDetails?: UpdateSalesInvoicePaymentDetailsRequest | null | undefined;
  /**
   * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
   *
   * @remarks
   * recipient with the provided `subject` and `body`. Required for `issued` status.
   */
  emailDetails?: UpdateSalesInvoiceEmailDetailsRequest | null | undefined;
  /**
   * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
   *
   * @remarks
   * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
   * is not required to send a first invoice to a recipient.
   */
  recipientIdentifier?: string | undefined;
  /**
   * The recipient object should contain all the information relevant to create an invoice for an intended
   *
   * @remarks
   * recipient. This data will be stored, updated, and re-used as appropriate, based on the `recipientIdentifier`.
   */
  recipient?: UpdateSalesInvoiceRecipientRequest | null | undefined;
  /**
   * Provide the line items for the invoice. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the invoice.
   */
  lines?: Array<UpdateSalesInvoiceLineRequest> | null | undefined;
  /**
   * The discount to be applied to the entire invoice, possibly on top of the line item discounts.
   */
  discount?: UpdateSalesInvoiceDiscountRequest | null | undefined;
};

export type UpdateSalesInvoiceRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  requestBody?: UpdateSalesInvoiceRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateSalesInvoiceUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type UpdateSalesInvoiceUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateSalesInvoiceUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateSalesInvoiceNotFoundDocumentation = {
  href: string;
  type: string;
};

export type UpdateSalesInvoiceNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateSalesInvoiceNotFoundDocumentation;
};

/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
 * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
 * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
 *
 * A status value that cannot be set but can be returned is `canceled`, for invoices which were
 * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
 *
 * Dependent parameters:
 *   - `paymentDetails` is required if invoice should be set directly to `paid`
 *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
 *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
 */
export const UpdateSalesInvoiceStatusResponse = {
  Draft: "draft",
  Issued: "issued",
  Paid: "paid",
} as const;
/**
 * The status for the invoice to end up in.
 *
 * @remarks
 *
 * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
 * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
 * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
 *
 * A status value that cannot be set but can be returned is `canceled`, for invoices which were
 * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
 *
 * Dependent parameters:
 *   - `paymentDetails` is required if invoice should be set directly to `paid`
 *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
 *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
 */
export type UpdateSalesInvoiceStatusResponse = ClosedEnum<
  typeof UpdateSalesInvoiceStatusResponse
>;

/**
 * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
 */
export const UpdateSalesInvoiceVatScheme = {
  Standard: "standard",
  OneStopShop: "one-stop-shop",
} as const;
/**
 * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
 */
export type UpdateSalesInvoiceVatScheme = ClosedEnum<
  typeof UpdateSalesInvoiceVatScheme
>;

/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export const UpdateSalesInvoiceVatMode = {
  Exclusive: "exclusive",
  Inclusive: "inclusive",
} as const;
/**
 * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
 *
 * @remarks
 * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
 */
export type UpdateSalesInvoiceVatMode = ClosedEnum<
  typeof UpdateSalesInvoiceVatMode
>;

/**
 * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type UpdateSalesInvoiceMetadata = {};

/**
 * The payment term to be set on the invoice.
 */
export const UpdateSalesInvoicePaymentTermResponse = {
  Sevendays: "7 days",
  Fourteendays: "14 days",
  Thirtydays: "30 days",
  FortyFivedays: "45 days",
  Sixtydays: "60 days",
  Ninetydays: "90 days",
  OneHundredAndTwentydays: "120 days",
} as const;
/**
 * The payment term to be set on the invoice.
 */
export type UpdateSalesInvoicePaymentTermResponse = ClosedEnum<
  typeof UpdateSalesInvoicePaymentTermResponse
>;

/**
 * The way through which the invoice is to be set to paid.
 */
export const UpdateSalesInvoiceSourceResponse = {
  Manual: "manual",
  PaymentLink: "payment-link",
  Payment: "payment",
} as const;
/**
 * The way through which the invoice is to be set to paid.
 */
export type UpdateSalesInvoiceSourceResponse = ClosedEnum<
  typeof UpdateSalesInvoiceSourceResponse
>;

/**
 * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
 *
 * @remarks
 * provided details. Required for `paid` status.
 */
export type UpdateSalesInvoicePaymentDetailsResponse = {
  /**
   * The way through which the invoice is to be set to paid.
   */
  source: UpdateSalesInvoiceSourceResponse;
  /**
   * A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
   *
   * @remarks
   * `payment`.
   */
  sourceReference?: string | null | undefined;
};

/**
 * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
 *
 * @remarks
 * recipient with the provided `subject` and `body`. Required for `issued` status.
 */
export type UpdateSalesInvoiceEmailDetailsResponse = {
  /**
   * The subject of the email to be sent.
   */
  subject: string;
  /**
   * The body of the email to be sent. To add newline characters, you can use `\n`.
   */
  body: string;
};

/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export const UpdateSalesInvoiceRecipientTypeResponse = {
  Consumer: "consumer",
  Business: "business",
} as const;
/**
 * The type of recipient, either `consumer` or `business`. This will determine what further fields are
 *
 * @remarks
 * required on the `recipient` object.
 */
export type UpdateSalesInvoiceRecipientTypeResponse = ClosedEnum<
  typeof UpdateSalesInvoiceRecipientTypeResponse
>;

/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export const UpdateSalesInvoiceLocaleResponse = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
} as const;
/**
 * The locale for the recipient, to be used for translations in PDF generation and payment pages.
 */
export type UpdateSalesInvoiceLocaleResponse = ClosedEnum<
  typeof UpdateSalesInvoiceLocaleResponse
>;

export type UpdateSalesInvoiceRecipientResponse = {
  /**
   * The type of recipient, either `consumer` or `business`. This will determine what further fields are
   *
   * @remarks
   * required on the `recipient` object.
   */
  type: UpdateSalesInvoiceRecipientTypeResponse;
  /**
   * The title of the `consumer` type recipient, for example Mr. or Mrs..
   */
  title?: string | null | undefined;
  /**
   * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  givenName?: string | null | undefined;
  /**
   * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
   *
   * @remarks
   * only numbers.
   */
  familyName?: string | null | undefined;
  /**
   * The trading name of the `business` type recipient.
   */
  organizationName?: string | null | undefined;
  /**
   * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
   *
   * @remarks
   * has to be provided.
   */
  organizationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
   *
   * @remarks
   * has to be provided.
   */
  vatNumber?: string | null | undefined;
  /**
   * The email address of the recipient.
   */
  email: string;
  /**
   * The phone number of the recipient.
   */
  phone?: string | null | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | null | undefined;
  /**
   * A postal code.
   */
  postalCode: string;
  /**
   * The recipient's city.
   */
  city: string;
  /**
   * The recipient's region.
   */
  region?: string | null | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
  /**
   * The locale for the recipient, to be used for translations in PDF generation and payment pages.
   */
  locale: UpdateSalesInvoiceLocaleResponse;
};

/**
 * The price of a single item excluding VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * The unit price can be zero in case of free items.
 */
export type UpdateSalesInvoiceUnitPriceResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of discount.
 */
export const UpdateSalesInvoiceLineTypeResponse = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type UpdateSalesInvoiceLineTypeResponse = ClosedEnum<
  typeof UpdateSalesInvoiceLineTypeResponse
>;

/**
 * The discount to be applied to the line item.
 */
export type UpdateSalesInvoiceLineDiscountResponse = {
  /**
   * The type of discount.
   */
  type: UpdateSalesInvoiceLineTypeResponse;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type UpdateSalesInvoiceLineResponse = {
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The vat rate to be applied to this line item.
   */
  vatRate: string;
  /**
   * The price of a single item excluding VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: UpdateSalesInvoiceUnitPriceResponse;
  /**
   * The discount to be applied to the line item.
   */
  discount?: UpdateSalesInvoiceLineDiscountResponse | null | undefined;
};

/**
 * The type of discount.
 */
export const UpdateSalesInvoiceDiscountTypeResponse = {
  Amount: "amount",
  Percentage: "percentage",
} as const;
/**
 * The type of discount.
 */
export type UpdateSalesInvoiceDiscountTypeResponse = ClosedEnum<
  typeof UpdateSalesInvoiceDiscountTypeResponse
>;

/**
 * The discount to be applied to the entire invoice, applied on top of any line item discounts.
 */
export type UpdateSalesInvoiceDiscountResponse = {
  /**
   * The type of discount.
   */
  type: UpdateSalesInvoiceDiscountTypeResponse;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

/**
 * The amount that is left to be paid.
 */
export type UpdateSalesInvoiceAmountDue = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT before discounts.
 */
export type UpdateSalesInvoiceSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount with VAT.
 */
export type UpdateSalesInvoiceTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total VAT amount.
 */
export type UpdateSalesInvoiceTotalVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT after discounts.
 */
export type UpdateSalesInvoiceDiscountedSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdateSalesInvoiceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make payment for the invoice. This is where you should redirect the
 *
 * @remarks
 * customer to unless the `status` is set to `paid`.
 */
export type UpdateSalesInvoiceInvoicePayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL the invoice is available at, if generated.
 */
export type UpdateSalesInvoicePdfLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdateSalesInvoiceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type UpdateSalesInvoiceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: UpdateSalesInvoiceSelf | undefined;
  /**
   * The URL your customer should visit to make payment for the invoice. This is where you should redirect the
   *
   * @remarks
   * customer to unless the `status` is set to `paid`.
   */
  invoicePayment?: UpdateSalesInvoiceInvoicePayment | undefined;
  /**
   * The URL the invoice is available at, if generated.
   */
  pdfLink?: UpdateSalesInvoicePdfLink | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: UpdateSalesInvoiceDocumentation | undefined;
};

/**
 * The sales invoice object.
 */
export type UpdateSalesInvoiceResponse = {
  /**
   * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
   */
  id?: string | undefined;
  /**
   * When issued, an invoice number will be set for the sales invoice.
   */
  invoiceNumber?: string | null | undefined;
  /**
   * The status for the invoice to end up in.
   *
   * @remarks
   *
   * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
   * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
   * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
   *
   * A status value that cannot be set but can be returned is `canceled`, for invoices which were
   * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
   *
   * Dependent parameters:
   *   - `paymentDetails` is required if invoice should be set directly to `paid`
   *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
   *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
   */
  status?: UpdateSalesInvoiceStatusResponse | undefined;
  /**
   * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
   */
  vatScheme?: UpdateSalesInvoiceVatScheme | undefined;
  /**
   * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
   *
   * @remarks
   * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
   */
  vatMode?: UpdateSalesInvoiceVatMode | undefined;
  /**
   * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
   */
  memo?: string | null | undefined;
  /**
   * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: UpdateSalesInvoiceMetadata | null | undefined;
  /**
   * The payment term to be set on the invoice.
   */
  paymentTerm?: UpdateSalesInvoicePaymentTermResponse | null | undefined;
  /**
   * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
   *
   * @remarks
   * provided details. Required for `paid` status.
   */
  paymentDetails?: UpdateSalesInvoicePaymentDetailsResponse | null | undefined;
  /**
   * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
   *
   * @remarks
   * recipient with the provided `subject` and `body`. Required for `issued` status.
   */
  emailDetails?: UpdateSalesInvoiceEmailDetailsResponse | null | undefined;
  /**
   * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
   *
   * @remarks
   * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  customerId?: string | undefined;
  /**
   * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
   *
   * @remarks
   * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  mandateId?: string | undefined;
  /**
   * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
   *
   * @remarks
   * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
   * is not required to send a first invoice to a recipient.
   */
  recipientIdentifier?: string | undefined;
  recipient?: UpdateSalesInvoiceRecipientResponse | null | undefined;
  /**
   * Provide the line items for the invoice. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the invoice.
   */
  lines?: Array<UpdateSalesInvoiceLineResponse> | null | undefined;
  /**
   * The discount to be applied to the entire invoice, applied on top of any line item discounts.
   */
  discount?: UpdateSalesInvoiceDiscountResponse | null | undefined;
  /**
   * The amount that is left to be paid.
   */
  amountDue?: UpdateSalesInvoiceAmountDue | undefined;
  /**
   * The total amount without VAT before discounts.
   */
  subtotalAmount?: UpdateSalesInvoiceSubtotalAmount | undefined;
  /**
   * The total amount with VAT.
   */
  totalAmount?: UpdateSalesInvoiceTotalAmount | undefined;
  /**
   * The total VAT amount.
   */
  totalVatAmount?: UpdateSalesInvoiceTotalVatAmount | undefined;
  /**
   * The total amount without VAT after discounts.
   */
  discountedSubtotalAmount?:
    | UpdateSalesInvoiceDiscountedSubtotalAmount
    | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  issuedAt?: string | null | undefined;
  /**
   * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  paidAt?: string | null | undefined;
  /**
   * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  dueAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: UpdateSalesInvoiceLinks | undefined;
};

/** @internal */
export const UpdateSalesInvoiceStatusRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceStatusRequest
> = z.nativeEnum(UpdateSalesInvoiceStatusRequest);

/** @internal */
export const UpdateSalesInvoiceStatusRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceStatusRequest
> = UpdateSalesInvoiceStatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceStatusRequest$ {
  /** @deprecated use `UpdateSalesInvoiceStatusRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceStatusRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceStatusRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceStatusRequest$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoicePaymentTermRequest$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoicePaymentTermRequest> = z.nativeEnum(
    UpdateSalesInvoicePaymentTermRequest,
  );

/** @internal */
export const UpdateSalesInvoicePaymentTermRequest$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoicePaymentTermRequest> =
    UpdateSalesInvoicePaymentTermRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoicePaymentTermRequest$ {
  /** @deprecated use `UpdateSalesInvoicePaymentTermRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoicePaymentTermRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoicePaymentTermRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoicePaymentTermRequest$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceSourceRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceSourceRequest
> = z.nativeEnum(UpdateSalesInvoiceSourceRequest);

/** @internal */
export const UpdateSalesInvoiceSourceRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceSourceRequest
> = UpdateSalesInvoiceSourceRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceSourceRequest$ {
  /** @deprecated use `UpdateSalesInvoiceSourceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceSourceRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceSourceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceSourceRequest$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoicePaymentDetailsRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoicePaymentDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: UpdateSalesInvoiceSourceRequest$inboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateSalesInvoicePaymentDetailsRequest$Outbound = {
  source: string;
  sourceReference?: string | null | undefined;
};

/** @internal */
export const UpdateSalesInvoicePaymentDetailsRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoicePaymentDetailsRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoicePaymentDetailsRequest
> = z.object({
  source: UpdateSalesInvoiceSourceRequest$outboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoicePaymentDetailsRequest$ {
  /** @deprecated use `UpdateSalesInvoicePaymentDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoicePaymentDetailsRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoicePaymentDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoicePaymentDetailsRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoicePaymentDetailsRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoicePaymentDetailsRequest$Outbound;
}

export function updateSalesInvoicePaymentDetailsRequestToJSON(
  updateSalesInvoicePaymentDetailsRequest:
    UpdateSalesInvoicePaymentDetailsRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoicePaymentDetailsRequest$outboundSchema.parse(
      updateSalesInvoicePaymentDetailsRequest,
    ),
  );
}

export function updateSalesInvoicePaymentDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSalesInvoicePaymentDetailsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoicePaymentDetailsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSalesInvoicePaymentDetailsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceEmailDetailsRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceEmailDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceEmailDetailsRequest$Outbound = {
  subject: string;
  body: string;
};

/** @internal */
export const UpdateSalesInvoiceEmailDetailsRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceEmailDetailsRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceEmailDetailsRequest
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceEmailDetailsRequest$ {
  /** @deprecated use `UpdateSalesInvoiceEmailDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceEmailDetailsRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceEmailDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceEmailDetailsRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceEmailDetailsRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceEmailDetailsRequest$Outbound;
}

export function updateSalesInvoiceEmailDetailsRequestToJSON(
  updateSalesInvoiceEmailDetailsRequest: UpdateSalesInvoiceEmailDetailsRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceEmailDetailsRequest$outboundSchema.parse(
      updateSalesInvoiceEmailDetailsRequest,
    ),
  );
}

export function updateSalesInvoiceEmailDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceEmailDetailsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceEmailDetailsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceEmailDetailsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceRecipientTypeRequest$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceRecipientTypeRequest> = z.nativeEnum(
    UpdateSalesInvoiceRecipientTypeRequest,
  );

/** @internal */
export const UpdateSalesInvoiceRecipientTypeRequest$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceRecipientTypeRequest> =
    UpdateSalesInvoiceRecipientTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceRecipientTypeRequest$ {
  /** @deprecated use `UpdateSalesInvoiceRecipientTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceRecipientTypeRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRecipientTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceRecipientTypeRequest$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceLocaleRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLocaleRequest
> = z.nativeEnum(UpdateSalesInvoiceLocaleRequest);

/** @internal */
export const UpdateSalesInvoiceLocaleRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLocaleRequest
> = UpdateSalesInvoiceLocaleRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLocaleRequest$ {
  /** @deprecated use `UpdateSalesInvoiceLocaleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceLocaleRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLocaleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceLocaleRequest$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceRecipientRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceRecipientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateSalesInvoiceRecipientTypeRequest$inboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: UpdateSalesInvoiceLocaleRequest$inboundSchema,
});

/** @internal */
export type UpdateSalesInvoiceRecipientRequest$Outbound = {
  type: string;
  title?: string | null | undefined;
  givenName?: string | null | undefined;
  familyName?: string | null | undefined;
  organizationName?: string | null | undefined;
  organizationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
  email: string;
  phone?: string | null | undefined;
  streetAndNumber: string;
  streetAdditional?: string | null | undefined;
  postalCode: string;
  city: string;
  region?: string | null | undefined;
  country: string;
  locale: string;
};

/** @internal */
export const UpdateSalesInvoiceRecipientRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceRecipientRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceRecipientRequest
> = z.object({
  type: UpdateSalesInvoiceRecipientTypeRequest$outboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: UpdateSalesInvoiceLocaleRequest$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceRecipientRequest$ {
  /** @deprecated use `UpdateSalesInvoiceRecipientRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceRecipientRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRecipientRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceRecipientRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRecipientRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceRecipientRequest$Outbound;
}

export function updateSalesInvoiceRecipientRequestToJSON(
  updateSalesInvoiceRecipientRequest: UpdateSalesInvoiceRecipientRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceRecipientRequest$outboundSchema.parse(
      updateSalesInvoiceRecipientRequest,
    ),
  );
}

export function updateSalesInvoiceRecipientRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceRecipientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceRecipientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceRecipientRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceUnitPriceRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceUnitPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceUnitPriceRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceUnitPriceRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceUnitPriceRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceUnitPriceRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceUnitPriceRequest$ {
  /** @deprecated use `UpdateSalesInvoiceUnitPriceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceUnitPriceRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnitPriceRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceUnitPriceRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnitPriceRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceUnitPriceRequest$Outbound;
}

export function updateSalesInvoiceUnitPriceRequestToJSON(
  updateSalesInvoiceUnitPriceRequest: UpdateSalesInvoiceUnitPriceRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceUnitPriceRequest$outboundSchema.parse(
      updateSalesInvoiceUnitPriceRequest,
    ),
  );
}

export function updateSalesInvoiceUnitPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceUnitPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceUnitPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceUnitPriceRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceLineTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLineTypeRequest
> = z.nativeEnum(UpdateSalesInvoiceLineTypeRequest);

/** @internal */
export const UpdateSalesInvoiceLineTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLineTypeRequest
> = UpdateSalesInvoiceLineTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLineTypeRequest$ {
  /** @deprecated use `UpdateSalesInvoiceLineTypeRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceLineTypeRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceLineTypeRequest$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceLineDiscountRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceLineDiscountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateSalesInvoiceLineTypeRequest$inboundSchema,
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceLineDiscountRequest$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceLineDiscountRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceLineDiscountRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceLineDiscountRequest
> = z.object({
  type: UpdateSalesInvoiceLineTypeRequest$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLineDiscountRequest$ {
  /** @deprecated use `UpdateSalesInvoiceLineDiscountRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceLineDiscountRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineDiscountRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceLineDiscountRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineDiscountRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceLineDiscountRequest$Outbound;
}

export function updateSalesInvoiceLineDiscountRequestToJSON(
  updateSalesInvoiceLineDiscountRequest: UpdateSalesInvoiceLineDiscountRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceLineDiscountRequest$outboundSchema.parse(
      updateSalesInvoiceLineDiscountRequest,
    ),
  );
}

export function updateSalesInvoiceLineDiscountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceLineDiscountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceLineDiscountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceLineDiscountRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceLineRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceLineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => UpdateSalesInvoiceUnitPriceRequest$inboundSchema),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceLineDiscountRequest$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateSalesInvoiceLineRequest$Outbound = {
  description: string;
  quantity: number;
  vatRate: string;
  unitPrice: UpdateSalesInvoiceUnitPriceRequest$Outbound;
  discount?: UpdateSalesInvoiceLineDiscountRequest$Outbound | null | undefined;
};

/** @internal */
export const UpdateSalesInvoiceLineRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceLineRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceLineRequest
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => UpdateSalesInvoiceUnitPriceRequest$outboundSchema),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceLineDiscountRequest$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLineRequest$ {
  /** @deprecated use `UpdateSalesInvoiceLineRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceLineRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceLineRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceLineRequest$Outbound;
}

export function updateSalesInvoiceLineRequestToJSON(
  updateSalesInvoiceLineRequest: UpdateSalesInvoiceLineRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceLineRequest$outboundSchema.parse(
      updateSalesInvoiceLineRequest,
    ),
  );
}

export function updateSalesInvoiceLineRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceLineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceLineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceLineRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceDiscountTypeRequest$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceDiscountTypeRequest> = z.nativeEnum(
    UpdateSalesInvoiceDiscountTypeRequest,
  );

/** @internal */
export const UpdateSalesInvoiceDiscountTypeRequest$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceDiscountTypeRequest> =
    UpdateSalesInvoiceDiscountTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceDiscountTypeRequest$ {
  /** @deprecated use `UpdateSalesInvoiceDiscountTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceDiscountTypeRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceDiscountTypeRequest$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceDiscountRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceDiscountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateSalesInvoiceDiscountTypeRequest$inboundSchema,
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceDiscountRequest$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceDiscountRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceDiscountRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceDiscountRequest
> = z.object({
  type: UpdateSalesInvoiceDiscountTypeRequest$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceDiscountRequest$ {
  /** @deprecated use `UpdateSalesInvoiceDiscountRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceDiscountRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceDiscountRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceDiscountRequest$Outbound;
}

export function updateSalesInvoiceDiscountRequestToJSON(
  updateSalesInvoiceDiscountRequest: UpdateSalesInvoiceDiscountRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceDiscountRequest$outboundSchema.parse(
      updateSalesInvoiceDiscountRequest,
    ),
  );
}

export function updateSalesInvoiceDiscountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceDiscountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceDiscountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceDiscountRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceRequestBody$inboundSchema: z.ZodType<
  UpdateSalesInvoiceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
  status: UpdateSalesInvoiceStatusRequest$inboundSchema.optional(),
  memo: z.nullable(z.string()).optional(),
  paymentTerm: z.nullable(UpdateSalesInvoicePaymentTermRequest$inboundSchema)
    .optional(),
  paymentDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoicePaymentDetailsRequest$inboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoiceEmailDetailsRequest$inboundSchema),
  ).optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(
    z.lazy(() => UpdateSalesInvoiceRecipientRequest$inboundSchema),
  ).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdateSalesInvoiceLineRequest$inboundSchema)),
  ).optional(),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceDiscountRequest$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateSalesInvoiceRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
  status?: string | undefined;
  memo?: string | null | undefined;
  paymentTerm?: string | null | undefined;
  paymentDetails?:
    | UpdateSalesInvoicePaymentDetailsRequest$Outbound
    | null
    | undefined;
  emailDetails?:
    | UpdateSalesInvoiceEmailDetailsRequest$Outbound
    | null
    | undefined;
  recipientIdentifier?: string | undefined;
  recipient?: UpdateSalesInvoiceRecipientRequest$Outbound | null | undefined;
  lines?: Array<UpdateSalesInvoiceLineRequest$Outbound> | null | undefined;
  discount?: UpdateSalesInvoiceDiscountRequest$Outbound | null | undefined;
};

/** @internal */
export const UpdateSalesInvoiceRequestBody$outboundSchema: z.ZodType<
  UpdateSalesInvoiceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
  status: UpdateSalesInvoiceStatusRequest$outboundSchema.optional(),
  memo: z.nullable(z.string()).optional(),
  paymentTerm: z.nullable(UpdateSalesInvoicePaymentTermRequest$outboundSchema)
    .optional(),
  paymentDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoicePaymentDetailsRequest$outboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoiceEmailDetailsRequest$outboundSchema),
  ).optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(
    z.lazy(() => UpdateSalesInvoiceRecipientRequest$outboundSchema),
  ).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdateSalesInvoiceLineRequest$outboundSchema)),
  ).optional(),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceDiscountRequest$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceRequestBody$ {
  /** @deprecated use `UpdateSalesInvoiceRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceRequestBody$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceRequestBody$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRequestBody$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceRequestBody$Outbound;
}

export function updateSalesInvoiceRequestBodyToJSON(
  updateSalesInvoiceRequestBody: UpdateSalesInvoiceRequestBody,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceRequestBody$outboundSchema.parse(
      updateSalesInvoiceRequestBody,
    ),
  );
}

export function updateSalesInvoiceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateSalesInvoiceRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSalesInvoiceRequest$Outbound = {
  id: string;
  RequestBody?: UpdateSalesInvoiceRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateSalesInvoiceRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateSalesInvoiceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceRequest$ {
  /** @deprecated use `UpdateSalesInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceRequest$Outbound;
}

export function updateSalesInvoiceRequestToJSON(
  updateSalesInvoiceRequest: UpdateSalesInvoiceRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceRequest$outboundSchema.parse(updateSalesInvoiceRequest),
  );
}

export function updateSalesInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    UpdateSalesInvoiceUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type UpdateSalesInvoiceUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    UpdateSalesInvoiceUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    UpdateSalesInvoiceUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceUnprocessableEntityDocumentation$ {
  /** @deprecated use `UpdateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    UpdateSalesInvoiceUnprocessableEntityDocumentation$Outbound;
}

export function updateSalesInvoiceUnprocessableEntityDocumentationToJSON(
  updateSalesInvoiceUnprocessableEntityDocumentation:
    UpdateSalesInvoiceUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema.parse(
      updateSalesInvoiceUnprocessableEntityDocumentation,
    ),
  );
}

export function updateSalesInvoiceUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSalesInvoiceUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSalesInvoiceUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceUnprocessableEntityLinks$inboundSchema:
  z.ZodType<UpdateSalesInvoiceUnprocessableEntityLinks, z.ZodTypeDef, unknown> =
    z.object({
      documentation: z.lazy(() =>
        UpdateSalesInvoiceUnprocessableEntityDocumentation$inboundSchema
      ),
    });

/** @internal */
export type UpdateSalesInvoiceUnprocessableEntityLinks$Outbound = {
  documentation: UpdateSalesInvoiceUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const UpdateSalesInvoiceUnprocessableEntityLinks$outboundSchema:
  z.ZodType<
    UpdateSalesInvoiceUnprocessableEntityLinks$Outbound,
    z.ZodTypeDef,
    UpdateSalesInvoiceUnprocessableEntityLinks
  > = z.object({
    documentation: z.lazy(() =>
      UpdateSalesInvoiceUnprocessableEntityDocumentation$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceUnprocessableEntityLinks$ {
  /** @deprecated use `UpdateSalesInvoiceUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceUnprocessableEntityLinks$Outbound;
}

export function updateSalesInvoiceUnprocessableEntityLinksToJSON(
  updateSalesInvoiceUnprocessableEntityLinks:
    UpdateSalesInvoiceUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceUnprocessableEntityLinks$outboundSchema.parse(
      updateSalesInvoiceUnprocessableEntityLinks,
    ),
  );
}

export function updateSalesInvoiceUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSalesInvoiceUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSalesInvoiceUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceNotFoundDocumentation$inboundSchema: z.ZodType<
  UpdateSalesInvoiceNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateSalesInvoiceNotFoundDocumentation$outboundSchema: z.ZodType<
  UpdateSalesInvoiceNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceNotFoundDocumentation$ {
  /** @deprecated use `UpdateSalesInvoiceNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceNotFoundDocumentation$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceNotFoundDocumentation$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceNotFoundDocumentation$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceNotFoundDocumentation$Outbound;
}

export function updateSalesInvoiceNotFoundDocumentationToJSON(
  updateSalesInvoiceNotFoundDocumentation:
    UpdateSalesInvoiceNotFoundDocumentation,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceNotFoundDocumentation$outboundSchema.parse(
      updateSalesInvoiceNotFoundDocumentation,
    ),
  );
}

export function updateSalesInvoiceNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSalesInvoiceNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSalesInvoiceNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceNotFoundLinks$inboundSchema: z.ZodType<
  UpdateSalesInvoiceNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    UpdateSalesInvoiceNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type UpdateSalesInvoiceNotFoundLinks$Outbound = {
  documentation: UpdateSalesInvoiceNotFoundDocumentation$Outbound;
};

/** @internal */
export const UpdateSalesInvoiceNotFoundLinks$outboundSchema: z.ZodType<
  UpdateSalesInvoiceNotFoundLinks$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    UpdateSalesInvoiceNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceNotFoundLinks$ {
  /** @deprecated use `UpdateSalesInvoiceNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceNotFoundLinks$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceNotFoundLinks$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceNotFoundLinks$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceNotFoundLinks$Outbound;
}

export function updateSalesInvoiceNotFoundLinksToJSON(
  updateSalesInvoiceNotFoundLinks: UpdateSalesInvoiceNotFoundLinks,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceNotFoundLinks$outboundSchema.parse(
      updateSalesInvoiceNotFoundLinks,
    ),
  );
}

export function updateSalesInvoiceNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceStatusResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceStatusResponse
> = z.nativeEnum(UpdateSalesInvoiceStatusResponse);

/** @internal */
export const UpdateSalesInvoiceStatusResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceStatusResponse
> = UpdateSalesInvoiceStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceStatusResponse$ {
  /** @deprecated use `UpdateSalesInvoiceStatusResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceStatusResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceStatusResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceStatusResponse$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceVatScheme$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceVatScheme
> = z.nativeEnum(UpdateSalesInvoiceVatScheme);

/** @internal */
export const UpdateSalesInvoiceVatScheme$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceVatScheme
> = UpdateSalesInvoiceVatScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceVatScheme$ {
  /** @deprecated use `UpdateSalesInvoiceVatScheme$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceVatScheme$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceVatScheme$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceVatScheme$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceVatMode$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceVatMode
> = z.nativeEnum(UpdateSalesInvoiceVatMode);

/** @internal */
export const UpdateSalesInvoiceVatMode$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceVatMode
> = UpdateSalesInvoiceVatMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceVatMode$ {
  /** @deprecated use `UpdateSalesInvoiceVatMode$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceVatMode$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceVatMode$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceVatMode$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceMetadata$inboundSchema: z.ZodType<
  UpdateSalesInvoiceMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateSalesInvoiceMetadata$Outbound = {};

/** @internal */
export const UpdateSalesInvoiceMetadata$outboundSchema: z.ZodType<
  UpdateSalesInvoiceMetadata$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceMetadata$ {
  /** @deprecated use `UpdateSalesInvoiceMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceMetadata$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceMetadata$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceMetadata$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceMetadata$Outbound;
}

export function updateSalesInvoiceMetadataToJSON(
  updateSalesInvoiceMetadata: UpdateSalesInvoiceMetadata,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceMetadata$outboundSchema.parse(updateSalesInvoiceMetadata),
  );
}

export function updateSalesInvoiceMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceMetadata' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoicePaymentTermResponse$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoicePaymentTermResponse> = z.nativeEnum(
    UpdateSalesInvoicePaymentTermResponse,
  );

/** @internal */
export const UpdateSalesInvoicePaymentTermResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoicePaymentTermResponse> =
    UpdateSalesInvoicePaymentTermResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoicePaymentTermResponse$ {
  /** @deprecated use `UpdateSalesInvoicePaymentTermResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoicePaymentTermResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoicePaymentTermResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoicePaymentTermResponse$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceSourceResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceSourceResponse
> = z.nativeEnum(UpdateSalesInvoiceSourceResponse);

/** @internal */
export const UpdateSalesInvoiceSourceResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceSourceResponse
> = UpdateSalesInvoiceSourceResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceSourceResponse$ {
  /** @deprecated use `UpdateSalesInvoiceSourceResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceSourceResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceSourceResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceSourceResponse$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoicePaymentDetailsResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoicePaymentDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: UpdateSalesInvoiceSourceResponse$inboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateSalesInvoicePaymentDetailsResponse$Outbound = {
  source: string;
  sourceReference?: string | null | undefined;
};

/** @internal */
export const UpdateSalesInvoicePaymentDetailsResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoicePaymentDetailsResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoicePaymentDetailsResponse
> = z.object({
  source: UpdateSalesInvoiceSourceResponse$outboundSchema,
  sourceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoicePaymentDetailsResponse$ {
  /** @deprecated use `UpdateSalesInvoicePaymentDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoicePaymentDetailsResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoicePaymentDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoicePaymentDetailsResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoicePaymentDetailsResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoicePaymentDetailsResponse$Outbound;
}

export function updateSalesInvoicePaymentDetailsResponseToJSON(
  updateSalesInvoicePaymentDetailsResponse:
    UpdateSalesInvoicePaymentDetailsResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoicePaymentDetailsResponse$outboundSchema.parse(
      updateSalesInvoicePaymentDetailsResponse,
    ),
  );
}

export function updateSalesInvoicePaymentDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSalesInvoicePaymentDetailsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoicePaymentDetailsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSalesInvoicePaymentDetailsResponse' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceEmailDetailsResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoiceEmailDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceEmailDetailsResponse$Outbound = {
  subject: string;
  body: string;
};

/** @internal */
export const UpdateSalesInvoiceEmailDetailsResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoiceEmailDetailsResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceEmailDetailsResponse
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceEmailDetailsResponse$ {
  /** @deprecated use `UpdateSalesInvoiceEmailDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceEmailDetailsResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceEmailDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceEmailDetailsResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceEmailDetailsResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceEmailDetailsResponse$Outbound;
}

export function updateSalesInvoiceEmailDetailsResponseToJSON(
  updateSalesInvoiceEmailDetailsResponse:
    UpdateSalesInvoiceEmailDetailsResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceEmailDetailsResponse$outboundSchema.parse(
      updateSalesInvoiceEmailDetailsResponse,
    ),
  );
}

export function updateSalesInvoiceEmailDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceEmailDetailsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceEmailDetailsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceEmailDetailsResponse' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceRecipientTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceRecipientTypeResponse> = z
    .nativeEnum(UpdateSalesInvoiceRecipientTypeResponse);

/** @internal */
export const UpdateSalesInvoiceRecipientTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceRecipientTypeResponse> =
    UpdateSalesInvoiceRecipientTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceRecipientTypeResponse$ {
  /** @deprecated use `UpdateSalesInvoiceRecipientTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceRecipientTypeResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRecipientTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceRecipientTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceLocaleResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLocaleResponse
> = z.nativeEnum(UpdateSalesInvoiceLocaleResponse);

/** @internal */
export const UpdateSalesInvoiceLocaleResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLocaleResponse
> = UpdateSalesInvoiceLocaleResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLocaleResponse$ {
  /** @deprecated use `UpdateSalesInvoiceLocaleResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceLocaleResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLocaleResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceLocaleResponse$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceRecipientResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoiceRecipientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateSalesInvoiceRecipientTypeResponse$inboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: UpdateSalesInvoiceLocaleResponse$inboundSchema,
});

/** @internal */
export type UpdateSalesInvoiceRecipientResponse$Outbound = {
  type: string;
  title?: string | null | undefined;
  givenName?: string | null | undefined;
  familyName?: string | null | undefined;
  organizationName?: string | null | undefined;
  organizationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
  email: string;
  phone?: string | null | undefined;
  streetAndNumber: string;
  streetAdditional?: string | null | undefined;
  postalCode: string;
  city: string;
  region?: string | null | undefined;
  country: string;
  locale: string;
};

/** @internal */
export const UpdateSalesInvoiceRecipientResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoiceRecipientResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceRecipientResponse
> = z.object({
  type: UpdateSalesInvoiceRecipientTypeResponse$outboundSchema,
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: UpdateSalesInvoiceLocaleResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceRecipientResponse$ {
  /** @deprecated use `UpdateSalesInvoiceRecipientResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceRecipientResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRecipientResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceRecipientResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRecipientResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceRecipientResponse$Outbound;
}

export function updateSalesInvoiceRecipientResponseToJSON(
  updateSalesInvoiceRecipientResponse: UpdateSalesInvoiceRecipientResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceRecipientResponse$outboundSchema.parse(
      updateSalesInvoiceRecipientResponse,
    ),
  );
}

export function updateSalesInvoiceRecipientResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceRecipientResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceRecipientResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceRecipientResponse' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceUnitPriceResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoiceUnitPriceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceUnitPriceResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceUnitPriceResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoiceUnitPriceResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceUnitPriceResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceUnitPriceResponse$ {
  /** @deprecated use `UpdateSalesInvoiceUnitPriceResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceUnitPriceResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnitPriceResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceUnitPriceResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceUnitPriceResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceUnitPriceResponse$Outbound;
}

export function updateSalesInvoiceUnitPriceResponseToJSON(
  updateSalesInvoiceUnitPriceResponse: UpdateSalesInvoiceUnitPriceResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceUnitPriceResponse$outboundSchema.parse(
      updateSalesInvoiceUnitPriceResponse,
    ),
  );
}

export function updateSalesInvoiceUnitPriceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceUnitPriceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceUnitPriceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceUnitPriceResponse' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceLineTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLineTypeResponse
> = z.nativeEnum(UpdateSalesInvoiceLineTypeResponse);

/** @internal */
export const UpdateSalesInvoiceLineTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSalesInvoiceLineTypeResponse
> = UpdateSalesInvoiceLineTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLineTypeResponse$ {
  /** @deprecated use `UpdateSalesInvoiceLineTypeResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceLineTypeResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceLineTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceLineDiscountResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoiceLineDiscountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateSalesInvoiceLineTypeResponse$inboundSchema,
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceLineDiscountResponse$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceLineDiscountResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoiceLineDiscountResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceLineDiscountResponse
> = z.object({
  type: UpdateSalesInvoiceLineTypeResponse$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLineDiscountResponse$ {
  /** @deprecated use `UpdateSalesInvoiceLineDiscountResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceLineDiscountResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineDiscountResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceLineDiscountResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineDiscountResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceLineDiscountResponse$Outbound;
}

export function updateSalesInvoiceLineDiscountResponseToJSON(
  updateSalesInvoiceLineDiscountResponse:
    UpdateSalesInvoiceLineDiscountResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceLineDiscountResponse$outboundSchema.parse(
      updateSalesInvoiceLineDiscountResponse,
    ),
  );
}

export function updateSalesInvoiceLineDiscountResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceLineDiscountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceLineDiscountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceLineDiscountResponse' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceLineResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoiceLineResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => UpdateSalesInvoiceUnitPriceResponse$inboundSchema),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceLineDiscountResponse$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateSalesInvoiceLineResponse$Outbound = {
  description: string;
  quantity: number;
  vatRate: string;
  unitPrice: UpdateSalesInvoiceUnitPriceResponse$Outbound;
  discount?: UpdateSalesInvoiceLineDiscountResponse$Outbound | null | undefined;
};

/** @internal */
export const UpdateSalesInvoiceLineResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoiceLineResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceLineResponse
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => UpdateSalesInvoiceUnitPriceResponse$outboundSchema),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceLineDiscountResponse$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLineResponse$ {
  /** @deprecated use `UpdateSalesInvoiceLineResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceLineResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceLineResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLineResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceLineResponse$Outbound;
}

export function updateSalesInvoiceLineResponseToJSON(
  updateSalesInvoiceLineResponse: UpdateSalesInvoiceLineResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceLineResponse$outboundSchema.parse(
      updateSalesInvoiceLineResponse,
    ),
  );
}

export function updateSalesInvoiceLineResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceLineResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceLineResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceLineResponse' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceDiscountTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceDiscountTypeResponse> = z.nativeEnum(
    UpdateSalesInvoiceDiscountTypeResponse,
  );

/** @internal */
export const UpdateSalesInvoiceDiscountTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSalesInvoiceDiscountTypeResponse> =
    UpdateSalesInvoiceDiscountTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceDiscountTypeResponse$ {
  /** @deprecated use `UpdateSalesInvoiceDiscountTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceDiscountTypeResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceDiscountTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateSalesInvoiceDiscountResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoiceDiscountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateSalesInvoiceDiscountTypeResponse$inboundSchema,
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceDiscountResponse$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceDiscountResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoiceDiscountResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceDiscountResponse
> = z.object({
  type: UpdateSalesInvoiceDiscountTypeResponse$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceDiscountResponse$ {
  /** @deprecated use `UpdateSalesInvoiceDiscountResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceDiscountResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceDiscountResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceDiscountResponse$Outbound;
}

export function updateSalesInvoiceDiscountResponseToJSON(
  updateSalesInvoiceDiscountResponse: UpdateSalesInvoiceDiscountResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceDiscountResponse$outboundSchema.parse(
      updateSalesInvoiceDiscountResponse,
    ),
  );
}

export function updateSalesInvoiceDiscountResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceDiscountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceDiscountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceDiscountResponse' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceAmountDue$inboundSchema: z.ZodType<
  UpdateSalesInvoiceAmountDue,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceAmountDue$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceAmountDue$outboundSchema: z.ZodType<
  UpdateSalesInvoiceAmountDue$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceAmountDue
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceAmountDue$ {
  /** @deprecated use `UpdateSalesInvoiceAmountDue$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceAmountDue$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceAmountDue$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceAmountDue$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceAmountDue$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceAmountDue$Outbound;
}

export function updateSalesInvoiceAmountDueToJSON(
  updateSalesInvoiceAmountDue: UpdateSalesInvoiceAmountDue,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceAmountDue$outboundSchema.parse(
      updateSalesInvoiceAmountDue,
    ),
  );
}

export function updateSalesInvoiceAmountDueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceAmountDue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceAmountDue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceAmountDue' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceSubtotalAmount$inboundSchema: z.ZodType<
  UpdateSalesInvoiceSubtotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceSubtotalAmount$outboundSchema: z.ZodType<
  UpdateSalesInvoiceSubtotalAmount$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceSubtotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceSubtotalAmount$ {
  /** @deprecated use `UpdateSalesInvoiceSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceSubtotalAmount$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceSubtotalAmount$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceSubtotalAmount$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceSubtotalAmount$Outbound;
}

export function updateSalesInvoiceSubtotalAmountToJSON(
  updateSalesInvoiceSubtotalAmount: UpdateSalesInvoiceSubtotalAmount,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceSubtotalAmount$outboundSchema.parse(
      updateSalesInvoiceSubtotalAmount,
    ),
  );
}

export function updateSalesInvoiceSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceSubtotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceSubtotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceTotalAmount$inboundSchema: z.ZodType<
  UpdateSalesInvoiceTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceTotalAmount$outboundSchema: z.ZodType<
  UpdateSalesInvoiceTotalAmount$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceTotalAmount$ {
  /** @deprecated use `UpdateSalesInvoiceTotalAmount$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceTotalAmount$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceTotalAmount$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceTotalAmount$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceTotalAmount$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceTotalAmount$Outbound;
}

export function updateSalesInvoiceTotalAmountToJSON(
  updateSalesInvoiceTotalAmount: UpdateSalesInvoiceTotalAmount,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceTotalAmount$outboundSchema.parse(
      updateSalesInvoiceTotalAmount,
    ),
  );
}

export function updateSalesInvoiceTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceTotalAmount' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceTotalVatAmount$inboundSchema: z.ZodType<
  UpdateSalesInvoiceTotalVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceTotalVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceTotalVatAmount$outboundSchema: z.ZodType<
  UpdateSalesInvoiceTotalVatAmount$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceTotalVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceTotalVatAmount$ {
  /** @deprecated use `UpdateSalesInvoiceTotalVatAmount$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceTotalVatAmount$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceTotalVatAmount$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceTotalVatAmount$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceTotalVatAmount$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceTotalVatAmount$Outbound;
}

export function updateSalesInvoiceTotalVatAmountToJSON(
  updateSalesInvoiceTotalVatAmount: UpdateSalesInvoiceTotalVatAmount,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceTotalVatAmount$outboundSchema.parse(
      updateSalesInvoiceTotalVatAmount,
    ),
  );
}

export function updateSalesInvoiceTotalVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceTotalVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceTotalVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceTotalVatAmount' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceDiscountedSubtotalAmount$inboundSchema:
  z.ZodType<UpdateSalesInvoiceDiscountedSubtotalAmount, z.ZodTypeDef, unknown> =
    z.object({
      currency: z.string(),
      value: z.string(),
    });

/** @internal */
export type UpdateSalesInvoiceDiscountedSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdateSalesInvoiceDiscountedSubtotalAmount$outboundSchema:
  z.ZodType<
    UpdateSalesInvoiceDiscountedSubtotalAmount$Outbound,
    z.ZodTypeDef,
    UpdateSalesInvoiceDiscountedSubtotalAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceDiscountedSubtotalAmount$ {
  /** @deprecated use `UpdateSalesInvoiceDiscountedSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSalesInvoiceDiscountedSubtotalAmount$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountedSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSalesInvoiceDiscountedSubtotalAmount$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDiscountedSubtotalAmount$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceDiscountedSubtotalAmount$Outbound;
}

export function updateSalesInvoiceDiscountedSubtotalAmountToJSON(
  updateSalesInvoiceDiscountedSubtotalAmount:
    UpdateSalesInvoiceDiscountedSubtotalAmount,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceDiscountedSubtotalAmount$outboundSchema.parse(
      updateSalesInvoiceDiscountedSubtotalAmount,
    ),
  );
}

export function updateSalesInvoiceDiscountedSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSalesInvoiceDiscountedSubtotalAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSalesInvoiceDiscountedSubtotalAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSalesInvoiceDiscountedSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceSelf$inboundSchema: z.ZodType<
  UpdateSalesInvoiceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateSalesInvoiceSelf$outboundSchema: z.ZodType<
  UpdateSalesInvoiceSelf$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceSelf$ {
  /** @deprecated use `UpdateSalesInvoiceSelf$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceSelf$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceSelf$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceSelf$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceSelf$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceSelf$Outbound;
}

export function updateSalesInvoiceSelfToJSON(
  updateSalesInvoiceSelf: UpdateSalesInvoiceSelf,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceSelf$outboundSchema.parse(updateSalesInvoiceSelf),
  );
}

export function updateSalesInvoiceSelfFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceSelf' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceInvoicePayment$inboundSchema: z.ZodType<
  UpdateSalesInvoiceInvoicePayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceInvoicePayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateSalesInvoiceInvoicePayment$outboundSchema: z.ZodType<
  UpdateSalesInvoiceInvoicePayment$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceInvoicePayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceInvoicePayment$ {
  /** @deprecated use `UpdateSalesInvoiceInvoicePayment$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceInvoicePayment$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceInvoicePayment$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceInvoicePayment$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceInvoicePayment$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceInvoicePayment$Outbound;
}

export function updateSalesInvoiceInvoicePaymentToJSON(
  updateSalesInvoiceInvoicePayment: UpdateSalesInvoiceInvoicePayment,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceInvoicePayment$outboundSchema.parse(
      updateSalesInvoiceInvoicePayment,
    ),
  );
}

export function updateSalesInvoiceInvoicePaymentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceInvoicePayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceInvoicePayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceInvoicePayment' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoicePdfLink$inboundSchema: z.ZodType<
  UpdateSalesInvoicePdfLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateSalesInvoicePdfLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateSalesInvoicePdfLink$outboundSchema: z.ZodType<
  UpdateSalesInvoicePdfLink$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoicePdfLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoicePdfLink$ {
  /** @deprecated use `UpdateSalesInvoicePdfLink$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoicePdfLink$inboundSchema;
  /** @deprecated use `UpdateSalesInvoicePdfLink$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoicePdfLink$outboundSchema;
  /** @deprecated use `UpdateSalesInvoicePdfLink$Outbound` instead. */
  export type Outbound = UpdateSalesInvoicePdfLink$Outbound;
}

export function updateSalesInvoicePdfLinkToJSON(
  updateSalesInvoicePdfLink: UpdateSalesInvoicePdfLink,
): string {
  return JSON.stringify(
    UpdateSalesInvoicePdfLink$outboundSchema.parse(updateSalesInvoicePdfLink),
  );
}

export function updateSalesInvoicePdfLinkFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoicePdfLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoicePdfLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoicePdfLink' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceDocumentation$inboundSchema: z.ZodType<
  UpdateSalesInvoiceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateSalesInvoiceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateSalesInvoiceDocumentation$outboundSchema: z.ZodType<
  UpdateSalesInvoiceDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceDocumentation$ {
  /** @deprecated use `UpdateSalesInvoiceDocumentation$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceDocumentation$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDocumentation$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceDocumentation$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceDocumentation$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceDocumentation$Outbound;
}

export function updateSalesInvoiceDocumentationToJSON(
  updateSalesInvoiceDocumentation: UpdateSalesInvoiceDocumentation,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceDocumentation$outboundSchema.parse(
      updateSalesInvoiceDocumentation,
    ),
  );
}

export function updateSalesInvoiceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceLinks$inboundSchema: z.ZodType<
  UpdateSalesInvoiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => UpdateSalesInvoiceSelf$inboundSchema).optional(),
  invoicePayment: z.lazy(() => UpdateSalesInvoiceInvoicePayment$inboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => UpdateSalesInvoicePdfLink$inboundSchema))
    .optional(),
  documentation: z.lazy(() => UpdateSalesInvoiceDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateSalesInvoiceLinks$Outbound = {
  self?: UpdateSalesInvoiceSelf$Outbound | undefined;
  invoicePayment?: UpdateSalesInvoiceInvoicePayment$Outbound | undefined;
  pdfLink?: UpdateSalesInvoicePdfLink$Outbound | null | undefined;
  documentation?: UpdateSalesInvoiceDocumentation$Outbound | undefined;
};

/** @internal */
export const UpdateSalesInvoiceLinks$outboundSchema: z.ZodType<
  UpdateSalesInvoiceLinks$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceLinks
> = z.object({
  self: z.lazy(() => UpdateSalesInvoiceSelf$outboundSchema).optional(),
  invoicePayment: z.lazy(() => UpdateSalesInvoiceInvoicePayment$outboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => UpdateSalesInvoicePdfLink$outboundSchema))
    .optional(),
  documentation: z.lazy(() => UpdateSalesInvoiceDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceLinks$ {
  /** @deprecated use `UpdateSalesInvoiceLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceLinks$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceLinks$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceLinks$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceLinks$Outbound;
}

export function updateSalesInvoiceLinksToJSON(
  updateSalesInvoiceLinks: UpdateSalesInvoiceLinks,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceLinks$outboundSchema.parse(updateSalesInvoiceLinks),
  );
}

export function updateSalesInvoiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceLinks' from JSON`,
  );
}

/** @internal */
export const UpdateSalesInvoiceResponse$inboundSchema: z.ZodType<
  UpdateSalesInvoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: UpdateSalesInvoiceStatusResponse$inboundSchema.optional(),
  vatScheme: UpdateSalesInvoiceVatScheme$inboundSchema.optional(),
  vatMode: UpdateSalesInvoiceVatMode$inboundSchema.optional(),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => UpdateSalesInvoiceMetadata$inboundSchema))
    .optional(),
  paymentTerm: z.nullable(UpdateSalesInvoicePaymentTermResponse$inboundSchema)
    .optional(),
  paymentDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoicePaymentDetailsResponse$inboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoiceEmailDetailsResponse$inboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(
    z.lazy(() => UpdateSalesInvoiceRecipientResponse$inboundSchema),
  ).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdateSalesInvoiceLineResponse$inboundSchema)),
  ).optional(),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceDiscountResponse$inboundSchema),
  ).optional(),
  amountDue: z.lazy(() => UpdateSalesInvoiceAmountDue$inboundSchema).optional(),
  subtotalAmount: z.lazy(() => UpdateSalesInvoiceSubtotalAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => UpdateSalesInvoiceTotalAmount$inboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => UpdateSalesInvoiceTotalVatAmount$inboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    UpdateSalesInvoiceDiscountedSubtotalAmount$inboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => UpdateSalesInvoiceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type UpdateSalesInvoiceResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  invoiceNumber?: string | null | undefined;
  status?: string | undefined;
  vatScheme?: string | undefined;
  vatMode?: string | undefined;
  memo?: string | null | undefined;
  metadata?: UpdateSalesInvoiceMetadata$Outbound | null | undefined;
  paymentTerm?: string | null | undefined;
  paymentDetails?:
    | UpdateSalesInvoicePaymentDetailsResponse$Outbound
    | null
    | undefined;
  emailDetails?:
    | UpdateSalesInvoiceEmailDetailsResponse$Outbound
    | null
    | undefined;
  customerId?: string | undefined;
  mandateId?: string | undefined;
  recipientIdentifier?: string | undefined;
  recipient?: UpdateSalesInvoiceRecipientResponse$Outbound | null | undefined;
  lines?: Array<UpdateSalesInvoiceLineResponse$Outbound> | null | undefined;
  discount?: UpdateSalesInvoiceDiscountResponse$Outbound | null | undefined;
  amountDue?: UpdateSalesInvoiceAmountDue$Outbound | undefined;
  subtotalAmount?: UpdateSalesInvoiceSubtotalAmount$Outbound | undefined;
  totalAmount?: UpdateSalesInvoiceTotalAmount$Outbound | undefined;
  totalVatAmount?: UpdateSalesInvoiceTotalVatAmount$Outbound | undefined;
  discountedSubtotalAmount?:
    | UpdateSalesInvoiceDiscountedSubtotalAmount$Outbound
    | undefined;
  createdAt?: string | undefined;
  issuedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  dueAt?: string | null | undefined;
  _links?: UpdateSalesInvoiceLinks$Outbound | undefined;
};

/** @internal */
export const UpdateSalesInvoiceResponse$outboundSchema: z.ZodType<
  UpdateSalesInvoiceResponse$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: UpdateSalesInvoiceStatusResponse$outboundSchema.optional(),
  vatScheme: UpdateSalesInvoiceVatScheme$outboundSchema.optional(),
  vatMode: UpdateSalesInvoiceVatMode$outboundSchema.optional(),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => UpdateSalesInvoiceMetadata$outboundSchema))
    .optional(),
  paymentTerm: z.nullable(UpdateSalesInvoicePaymentTermResponse$outboundSchema)
    .optional(),
  paymentDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoicePaymentDetailsResponse$outboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => UpdateSalesInvoiceEmailDetailsResponse$outboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(
    z.lazy(() => UpdateSalesInvoiceRecipientResponse$outboundSchema),
  ).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdateSalesInvoiceLineResponse$outboundSchema)),
  ).optional(),
  discount: z.nullable(
    z.lazy(() => UpdateSalesInvoiceDiscountResponse$outboundSchema),
  ).optional(),
  amountDue: z.lazy(() => UpdateSalesInvoiceAmountDue$outboundSchema)
    .optional(),
  subtotalAmount: z.lazy(() => UpdateSalesInvoiceSubtotalAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => UpdateSalesInvoiceTotalAmount$outboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => UpdateSalesInvoiceTotalVatAmount$outboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    UpdateSalesInvoiceDiscountedSubtotalAmount$outboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => UpdateSalesInvoiceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceResponse$ {
  /** @deprecated use `UpdateSalesInvoiceResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceResponse$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceResponse$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceResponse$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceResponse$Outbound;
}

export function updateSalesInvoiceResponseToJSON(
  updateSalesInvoiceResponse: UpdateSalesInvoiceResponse,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceResponse$outboundSchema.parse(updateSalesInvoiceResponse),
  );
}

export function updateSalesInvoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceResponse' from JSON`,
  );
}
