/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateSalesInvoiceRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  updateValuesSalesInvoice?: models.UpdateValuesSalesInvoice | undefined;
};

/** @internal */
export const UpdateSalesInvoiceRequest$inboundSchema: z.ZodType<
  UpdateSalesInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "update-values-sales-invoice": models.UpdateValuesSalesInvoice$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "update-values-sales-invoice": "updateValuesSalesInvoice",
  });
});

/** @internal */
export type UpdateSalesInvoiceRequest$Outbound = {
  id: string;
  "update-values-sales-invoice"?:
    | models.UpdateValuesSalesInvoice$Outbound
    | undefined;
};

/** @internal */
export const UpdateSalesInvoiceRequest$outboundSchema: z.ZodType<
  UpdateSalesInvoiceRequest$Outbound,
  z.ZodTypeDef,
  UpdateSalesInvoiceRequest
> = z.object({
  id: z.string(),
  updateValuesSalesInvoice: models.UpdateValuesSalesInvoice$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    updateValuesSalesInvoice: "update-values-sales-invoice",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSalesInvoiceRequest$ {
  /** @deprecated use `UpdateSalesInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSalesInvoiceRequest$inboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSalesInvoiceRequest$outboundSchema;
  /** @deprecated use `UpdateSalesInvoiceRequest$Outbound` instead. */
  export type Outbound = UpdateSalesInvoiceRequest$Outbound;
}

export function updateSalesInvoiceRequestToJSON(
  updateSalesInvoiceRequest: UpdateSalesInvoiceRequest,
): string {
  return JSON.stringify(
    UpdateSalesInvoiceRequest$outboundSchema.parse(updateSalesInvoiceRequest),
  );
}

export function updateSalesInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSalesInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSalesInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSalesInvoiceRequest' from JSON`,
  );
}
