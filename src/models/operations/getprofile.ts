/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProfileRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetProfileGoneDocumentation = {
  href: string;
  type: string;
};

export type GetProfileGoneLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetProfileGoneDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetProfileNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetProfileNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetProfileNotFoundDocumentation;
};

/**
 * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
 */
export type GetProfileReview = {
  /**
   * The status of the requested changes.
   *
   * @remarks
   *
   * Possible values: `pending` `rejected`
   */
  status?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetProfileSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Link to the profile in the Mollie dashboard.
 */
export type GetProfileDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the chargebacks that belong to this profile.
 */
export type GetProfileChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the methods that are enabled for this profile.
 */
export type GetProfileMethods = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the payments that belong to this profile.
 */
export type GetProfilePayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the refunds that belong to this profile.
 */
export type GetProfileRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The hosted checkout preview URL. You need to be logged in to access this page.
 */
export type GetProfileCheckoutPreviewUrl = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetProfileDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetProfileLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetProfileSelf | undefined;
  /**
   * Link to the profile in the Mollie dashboard.
   */
  dashboard?: GetProfileDashboard | undefined;
  /**
   * The API resource URL of the chargebacks that belong to this profile.
   */
  chargebacks?: GetProfileChargebacks | undefined;
  /**
   * The API resource URL of the methods that are enabled for this profile.
   */
  methods?: GetProfileMethods | undefined;
  /**
   * The API resource URL of the payments that belong to this profile.
   */
  payments?: GetProfilePayments | undefined;
  /**
   * The API resource URL of the refunds that belong to this profile.
   */
  refunds?: GetProfileRefunds | undefined;
  /**
   * The hosted checkout preview URL. You need to be logged in to access this page.
   */
  checkoutPreviewUrl?: GetProfileCheckoutPreviewUrl | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetProfileDocumentation | undefined;
};

/**
 * The profile object.
 */
export type GetProfileResponse = {
  /**
   * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
   */
  website?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
   */
  businessCategory?: string | undefined;
  /**
   * The profile status determines whether the profile is able to receive live payments.
   *
   * @remarks
   *
   * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
   * * `verified`: The profile has been verified and can be used to create live payments and test payments.
   * * `blocked`: The profile is blocked and can no longer be used or changed.
   *
   * Possible values: `unverified` `verified` `blocked`
   */
  status?: string | undefined;
  /**
   * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
   */
  review?: GetProfileReview | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetProfileLinks | undefined;
};

/** @internal */
export const GetProfileRequest$inboundSchema: z.ZodType<
  GetProfileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetProfileRequest$Outbound = {
  id: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetProfileRequest$outboundSchema: z.ZodType<
  GetProfileRequest$Outbound,
  z.ZodTypeDef,
  GetProfileRequest
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileRequest$ {
  /** @deprecated use `GetProfileRequest$inboundSchema` instead. */
  export const inboundSchema = GetProfileRequest$inboundSchema;
  /** @deprecated use `GetProfileRequest$outboundSchema` instead. */
  export const outboundSchema = GetProfileRequest$outboundSchema;
  /** @deprecated use `GetProfileRequest$Outbound` instead. */
  export type Outbound = GetProfileRequest$Outbound;
}

export function getProfileRequestToJSON(
  getProfileRequest: GetProfileRequest,
): string {
  return JSON.stringify(
    GetProfileRequest$outboundSchema.parse(getProfileRequest),
  );
}

export function getProfileRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileRequest' from JSON`,
  );
}

/** @internal */
export const GetProfileGoneDocumentation$inboundSchema: z.ZodType<
  GetProfileGoneDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileGoneDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileGoneDocumentation$outboundSchema: z.ZodType<
  GetProfileGoneDocumentation$Outbound,
  z.ZodTypeDef,
  GetProfileGoneDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileGoneDocumentation$ {
  /** @deprecated use `GetProfileGoneDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetProfileGoneDocumentation$inboundSchema;
  /** @deprecated use `GetProfileGoneDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetProfileGoneDocumentation$outboundSchema;
  /** @deprecated use `GetProfileGoneDocumentation$Outbound` instead. */
  export type Outbound = GetProfileGoneDocumentation$Outbound;
}

export function getProfileGoneDocumentationToJSON(
  getProfileGoneDocumentation: GetProfileGoneDocumentation,
): string {
  return JSON.stringify(
    GetProfileGoneDocumentation$outboundSchema.parse(
      getProfileGoneDocumentation,
    ),
  );
}

export function getProfileGoneDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileGoneDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileGoneDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileGoneDocumentation' from JSON`,
  );
}

/** @internal */
export const GetProfileGoneLinks$inboundSchema: z.ZodType<
  GetProfileGoneLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetProfileGoneDocumentation$inboundSchema),
});

/** @internal */
export type GetProfileGoneLinks$Outbound = {
  documentation: GetProfileGoneDocumentation$Outbound;
};

/** @internal */
export const GetProfileGoneLinks$outboundSchema: z.ZodType<
  GetProfileGoneLinks$Outbound,
  z.ZodTypeDef,
  GetProfileGoneLinks
> = z.object({
  documentation: z.lazy(() => GetProfileGoneDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileGoneLinks$ {
  /** @deprecated use `GetProfileGoneLinks$inboundSchema` instead. */
  export const inboundSchema = GetProfileGoneLinks$inboundSchema;
  /** @deprecated use `GetProfileGoneLinks$outboundSchema` instead. */
  export const outboundSchema = GetProfileGoneLinks$outboundSchema;
  /** @deprecated use `GetProfileGoneLinks$Outbound` instead. */
  export type Outbound = GetProfileGoneLinks$Outbound;
}

export function getProfileGoneLinksToJSON(
  getProfileGoneLinks: GetProfileGoneLinks,
): string {
  return JSON.stringify(
    GetProfileGoneLinks$outboundSchema.parse(getProfileGoneLinks),
  );
}

export function getProfileGoneLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileGoneLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileGoneLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileGoneLinks' from JSON`,
  );
}

/** @internal */
export const GetProfileNotFoundDocumentation$inboundSchema: z.ZodType<
  GetProfileNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileNotFoundDocumentation$outboundSchema: z.ZodType<
  GetProfileNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetProfileNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileNotFoundDocumentation$ {
  /** @deprecated use `GetProfileNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetProfileNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetProfileNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetProfileNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetProfileNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetProfileNotFoundDocumentation$Outbound;
}

export function getProfileNotFoundDocumentationToJSON(
  getProfileNotFoundDocumentation: GetProfileNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetProfileNotFoundDocumentation$outboundSchema.parse(
      getProfileNotFoundDocumentation,
    ),
  );
}

export function getProfileNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetProfileNotFoundLinks$inboundSchema: z.ZodType<
  GetProfileNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetProfileNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetProfileNotFoundLinks$Outbound = {
  documentation: GetProfileNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetProfileNotFoundLinks$outboundSchema: z.ZodType<
  GetProfileNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetProfileNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetProfileNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileNotFoundLinks$ {
  /** @deprecated use `GetProfileNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetProfileNotFoundLinks$inboundSchema;
  /** @deprecated use `GetProfileNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetProfileNotFoundLinks$outboundSchema;
  /** @deprecated use `GetProfileNotFoundLinks$Outbound` instead. */
  export type Outbound = GetProfileNotFoundLinks$Outbound;
}

export function getProfileNotFoundLinksToJSON(
  getProfileNotFoundLinks: GetProfileNotFoundLinks,
): string {
  return JSON.stringify(
    GetProfileNotFoundLinks$outboundSchema.parse(getProfileNotFoundLinks),
  );
}

export function getProfileNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetProfileReview$inboundSchema: z.ZodType<
  GetProfileReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
});

/** @internal */
export type GetProfileReview$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const GetProfileReview$outboundSchema: z.ZodType<
  GetProfileReview$Outbound,
  z.ZodTypeDef,
  GetProfileReview
> = z.object({
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileReview$ {
  /** @deprecated use `GetProfileReview$inboundSchema` instead. */
  export const inboundSchema = GetProfileReview$inboundSchema;
  /** @deprecated use `GetProfileReview$outboundSchema` instead. */
  export const outboundSchema = GetProfileReview$outboundSchema;
  /** @deprecated use `GetProfileReview$Outbound` instead. */
  export type Outbound = GetProfileReview$Outbound;
}

export function getProfileReviewToJSON(
  getProfileReview: GetProfileReview,
): string {
  return JSON.stringify(
    GetProfileReview$outboundSchema.parse(getProfileReview),
  );
}

export function getProfileReviewFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileReview' from JSON`,
  );
}

/** @internal */
export const GetProfileSelf$inboundSchema: z.ZodType<
  GetProfileSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileSelf$outboundSchema: z.ZodType<
  GetProfileSelf$Outbound,
  z.ZodTypeDef,
  GetProfileSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileSelf$ {
  /** @deprecated use `GetProfileSelf$inboundSchema` instead. */
  export const inboundSchema = GetProfileSelf$inboundSchema;
  /** @deprecated use `GetProfileSelf$outboundSchema` instead. */
  export const outboundSchema = GetProfileSelf$outboundSchema;
  /** @deprecated use `GetProfileSelf$Outbound` instead. */
  export type Outbound = GetProfileSelf$Outbound;
}

export function getProfileSelfToJSON(getProfileSelf: GetProfileSelf): string {
  return JSON.stringify(GetProfileSelf$outboundSchema.parse(getProfileSelf));
}

export function getProfileSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileSelf' from JSON`,
  );
}

/** @internal */
export const GetProfileDashboard$inboundSchema: z.ZodType<
  GetProfileDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileDashboard$outboundSchema: z.ZodType<
  GetProfileDashboard$Outbound,
  z.ZodTypeDef,
  GetProfileDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileDashboard$ {
  /** @deprecated use `GetProfileDashboard$inboundSchema` instead. */
  export const inboundSchema = GetProfileDashboard$inboundSchema;
  /** @deprecated use `GetProfileDashboard$outboundSchema` instead. */
  export const outboundSchema = GetProfileDashboard$outboundSchema;
  /** @deprecated use `GetProfileDashboard$Outbound` instead. */
  export type Outbound = GetProfileDashboard$Outbound;
}

export function getProfileDashboardToJSON(
  getProfileDashboard: GetProfileDashboard,
): string {
  return JSON.stringify(
    GetProfileDashboard$outboundSchema.parse(getProfileDashboard),
  );
}

export function getProfileDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileDashboard' from JSON`,
  );
}

/** @internal */
export const GetProfileChargebacks$inboundSchema: z.ZodType<
  GetProfileChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileChargebacks$outboundSchema: z.ZodType<
  GetProfileChargebacks$Outbound,
  z.ZodTypeDef,
  GetProfileChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileChargebacks$ {
  /** @deprecated use `GetProfileChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetProfileChargebacks$inboundSchema;
  /** @deprecated use `GetProfileChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetProfileChargebacks$outboundSchema;
  /** @deprecated use `GetProfileChargebacks$Outbound` instead. */
  export type Outbound = GetProfileChargebacks$Outbound;
}

export function getProfileChargebacksToJSON(
  getProfileChargebacks: GetProfileChargebacks,
): string {
  return JSON.stringify(
    GetProfileChargebacks$outboundSchema.parse(getProfileChargebacks),
  );
}

export function getProfileChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileChargebacks' from JSON`,
  );
}

/** @internal */
export const GetProfileMethods$inboundSchema: z.ZodType<
  GetProfileMethods,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileMethods$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileMethods$outboundSchema: z.ZodType<
  GetProfileMethods$Outbound,
  z.ZodTypeDef,
  GetProfileMethods
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileMethods$ {
  /** @deprecated use `GetProfileMethods$inboundSchema` instead. */
  export const inboundSchema = GetProfileMethods$inboundSchema;
  /** @deprecated use `GetProfileMethods$outboundSchema` instead. */
  export const outboundSchema = GetProfileMethods$outboundSchema;
  /** @deprecated use `GetProfileMethods$Outbound` instead. */
  export type Outbound = GetProfileMethods$Outbound;
}

export function getProfileMethodsToJSON(
  getProfileMethods: GetProfileMethods,
): string {
  return JSON.stringify(
    GetProfileMethods$outboundSchema.parse(getProfileMethods),
  );
}

export function getProfileMethodsFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileMethods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileMethods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileMethods' from JSON`,
  );
}

/** @internal */
export const GetProfilePayments$inboundSchema: z.ZodType<
  GetProfilePayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfilePayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfilePayments$outboundSchema: z.ZodType<
  GetProfilePayments$Outbound,
  z.ZodTypeDef,
  GetProfilePayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfilePayments$ {
  /** @deprecated use `GetProfilePayments$inboundSchema` instead. */
  export const inboundSchema = GetProfilePayments$inboundSchema;
  /** @deprecated use `GetProfilePayments$outboundSchema` instead. */
  export const outboundSchema = GetProfilePayments$outboundSchema;
  /** @deprecated use `GetProfilePayments$Outbound` instead. */
  export type Outbound = GetProfilePayments$Outbound;
}

export function getProfilePaymentsToJSON(
  getProfilePayments: GetProfilePayments,
): string {
  return JSON.stringify(
    GetProfilePayments$outboundSchema.parse(getProfilePayments),
  );
}

export function getProfilePaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetProfilePayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfilePayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfilePayments' from JSON`,
  );
}

/** @internal */
export const GetProfileRefunds$inboundSchema: z.ZodType<
  GetProfileRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileRefunds$outboundSchema: z.ZodType<
  GetProfileRefunds$Outbound,
  z.ZodTypeDef,
  GetProfileRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileRefunds$ {
  /** @deprecated use `GetProfileRefunds$inboundSchema` instead. */
  export const inboundSchema = GetProfileRefunds$inboundSchema;
  /** @deprecated use `GetProfileRefunds$outboundSchema` instead. */
  export const outboundSchema = GetProfileRefunds$outboundSchema;
  /** @deprecated use `GetProfileRefunds$Outbound` instead. */
  export type Outbound = GetProfileRefunds$Outbound;
}

export function getProfileRefundsToJSON(
  getProfileRefunds: GetProfileRefunds,
): string {
  return JSON.stringify(
    GetProfileRefunds$outboundSchema.parse(getProfileRefunds),
  );
}

export function getProfileRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileRefunds' from JSON`,
  );
}

/** @internal */
export const GetProfileCheckoutPreviewUrl$inboundSchema: z.ZodType<
  GetProfileCheckoutPreviewUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileCheckoutPreviewUrl$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileCheckoutPreviewUrl$outboundSchema: z.ZodType<
  GetProfileCheckoutPreviewUrl$Outbound,
  z.ZodTypeDef,
  GetProfileCheckoutPreviewUrl
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileCheckoutPreviewUrl$ {
  /** @deprecated use `GetProfileCheckoutPreviewUrl$inboundSchema` instead. */
  export const inboundSchema = GetProfileCheckoutPreviewUrl$inboundSchema;
  /** @deprecated use `GetProfileCheckoutPreviewUrl$outboundSchema` instead. */
  export const outboundSchema = GetProfileCheckoutPreviewUrl$outboundSchema;
  /** @deprecated use `GetProfileCheckoutPreviewUrl$Outbound` instead. */
  export type Outbound = GetProfileCheckoutPreviewUrl$Outbound;
}

export function getProfileCheckoutPreviewUrlToJSON(
  getProfileCheckoutPreviewUrl: GetProfileCheckoutPreviewUrl,
): string {
  return JSON.stringify(
    GetProfileCheckoutPreviewUrl$outboundSchema.parse(
      getProfileCheckoutPreviewUrl,
    ),
  );
}

export function getProfileCheckoutPreviewUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileCheckoutPreviewUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileCheckoutPreviewUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileCheckoutPreviewUrl' from JSON`,
  );
}

/** @internal */
export const GetProfileDocumentation$inboundSchema: z.ZodType<
  GetProfileDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetProfileDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetProfileDocumentation$outboundSchema: z.ZodType<
  GetProfileDocumentation$Outbound,
  z.ZodTypeDef,
  GetProfileDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileDocumentation$ {
  /** @deprecated use `GetProfileDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetProfileDocumentation$inboundSchema;
  /** @deprecated use `GetProfileDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetProfileDocumentation$outboundSchema;
  /** @deprecated use `GetProfileDocumentation$Outbound` instead. */
  export type Outbound = GetProfileDocumentation$Outbound;
}

export function getProfileDocumentationToJSON(
  getProfileDocumentation: GetProfileDocumentation,
): string {
  return JSON.stringify(
    GetProfileDocumentation$outboundSchema.parse(getProfileDocumentation),
  );
}

export function getProfileDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileDocumentation' from JSON`,
  );
}

/** @internal */
export const GetProfileLinks$inboundSchema: z.ZodType<
  GetProfileLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetProfileSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => GetProfileDashboard$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetProfileChargebacks$inboundSchema).optional(),
  methods: z.lazy(() => GetProfileMethods$inboundSchema).optional(),
  payments: z.lazy(() => GetProfilePayments$inboundSchema).optional(),
  refunds: z.lazy(() => GetProfileRefunds$inboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() => GetProfileCheckoutPreviewUrl$inboundSchema)
    .optional(),
  documentation: z.lazy(() => GetProfileDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetProfileLinks$Outbound = {
  self?: GetProfileSelf$Outbound | undefined;
  dashboard?: GetProfileDashboard$Outbound | undefined;
  chargebacks?: GetProfileChargebacks$Outbound | undefined;
  methods?: GetProfileMethods$Outbound | undefined;
  payments?: GetProfilePayments$Outbound | undefined;
  refunds?: GetProfileRefunds$Outbound | undefined;
  checkoutPreviewUrl?: GetProfileCheckoutPreviewUrl$Outbound | undefined;
  documentation?: GetProfileDocumentation$Outbound | undefined;
};

/** @internal */
export const GetProfileLinks$outboundSchema: z.ZodType<
  GetProfileLinks$Outbound,
  z.ZodTypeDef,
  GetProfileLinks
> = z.object({
  self: z.lazy(() => GetProfileSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => GetProfileDashboard$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetProfileChargebacks$outboundSchema).optional(),
  methods: z.lazy(() => GetProfileMethods$outboundSchema).optional(),
  payments: z.lazy(() => GetProfilePayments$outboundSchema).optional(),
  refunds: z.lazy(() => GetProfileRefunds$outboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() => GetProfileCheckoutPreviewUrl$outboundSchema)
    .optional(),
  documentation: z.lazy(() => GetProfileDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileLinks$ {
  /** @deprecated use `GetProfileLinks$inboundSchema` instead. */
  export const inboundSchema = GetProfileLinks$inboundSchema;
  /** @deprecated use `GetProfileLinks$outboundSchema` instead. */
  export const outboundSchema = GetProfileLinks$outboundSchema;
  /** @deprecated use `GetProfileLinks$Outbound` instead. */
  export type Outbound = GetProfileLinks$Outbound;
}

export function getProfileLinksToJSON(
  getProfileLinks: GetProfileLinks,
): string {
  return JSON.stringify(GetProfileLinks$outboundSchema.parse(getProfileLinks));
}

export function getProfileLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileLinks' from JSON`,
  );
}

/** @internal */
export const GetProfileResponse$inboundSchema: z.ZodType<
  GetProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("profile"),
  id: z.string().optional(),
  mode: z.string().optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: z.string().optional(),
  review: z.lazy(() => GetProfileReview$inboundSchema).optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => GetProfileLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetProfileResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | undefined;
  countriesOfActivity?: Array<string> | undefined;
  businessCategory?: string | undefined;
  status?: string | undefined;
  review?: GetProfileReview$Outbound | undefined;
  createdAt?: string | undefined;
  _links?: GetProfileLinks$Outbound | undefined;
};

/** @internal */
export const GetProfileResponse$outboundSchema: z.ZodType<
  GetProfileResponse$Outbound,
  z.ZodTypeDef,
  GetProfileResponse
> = z.object({
  resource: z.string().default("profile"),
  id: z.string().optional(),
  mode: z.string().optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: z.string().optional(),
  review: z.lazy(() => GetProfileReview$outboundSchema).optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => GetProfileLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProfileResponse$ {
  /** @deprecated use `GetProfileResponse$inboundSchema` instead. */
  export const inboundSchema = GetProfileResponse$inboundSchema;
  /** @deprecated use `GetProfileResponse$outboundSchema` instead. */
  export const outboundSchema = GetProfileResponse$outboundSchema;
  /** @deprecated use `GetProfileResponse$Outbound` instead. */
  export type Outbound = GetProfileResponse$Outbound;
}

export function getProfileResponseToJSON(
  getProfileResponse: GetProfileResponse,
): string {
  return JSON.stringify(
    GetProfileResponse$outboundSchema.parse(getProfileResponse),
  );
}

export function getProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProfileResponse' from JSON`,
  );
}
