/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdatePaymentLinkRequestBody = {
  /**
   * A short description of the payment link. The description is visible in the Dashboard and will be shown
   *
   * @remarks
   * on the customer's bank or card statement when possible.
   *
   * Updating the description does not affect any previously existing payments created for this payment link.
   */
  description?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  minimumAmount?: models.Amount | undefined;
  /**
   * Whether the payment link is archived. Customers will not be able to complete payments on archived
   *
   * @remarks
   * payment links.
   */
  archived?: boolean | undefined;
  /**
   * An array of payment methods that are allowed to be used for this payment link. When this parameter is
   *
   * @remarks
   * not provided or is an empty array, all enabled payment methods will be available.
   *
   * Enum: 'applepay', 'bacs', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'billie', 'blik', 'creditcard', 'eps',
   * 'giftcard', 'ideal', 'in3', 'kbc', 'klarna', 'mbway', 'multibanco', 'mybank', 'paybybank', 'paypal', 'paysafecard',
   * 'pointofsale', 'przelewy24', 'riverty', 'satispay', 'swish', 'trustly', 'twint', 'voucher'.
   */
  allowedMethods?: Array<string> | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<models.PaymentLineItem> | null | undefined;
  billingAddress?: models.PaymentAddress | undefined;
  shippingAddress?: models.PaymentAddress | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type UpdatePaymentLinkRequest = {
  /**
   * Provide the ID of the related payment link.
   */
  paymentLinkId: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: UpdatePaymentLinkRequestBody | undefined;
};

/** @internal */
export const UpdatePaymentLinkRequestBody$inboundSchema: z.ZodType<
  UpdatePaymentLinkRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  minimumAmount: models.Amount$inboundSchema.optional(),
  archived: z.boolean().optional(),
  allowedMethods: z.nullable(z.array(z.string())).optional(),
  lines: z.nullable(z.array(models.PaymentLineItem$inboundSchema)).optional(),
  billingAddress: models.PaymentAddress$inboundSchema.optional(),
  shippingAddress: models.PaymentAddress$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdatePaymentLinkRequestBody$Outbound = {
  description?: string | undefined;
  minimumAmount?: models.Amount$Outbound | undefined;
  archived?: boolean | undefined;
  allowedMethods?: Array<string> | null | undefined;
  lines?: Array<models.PaymentLineItem$Outbound> | null | undefined;
  billingAddress?: models.PaymentAddress$Outbound | undefined;
  shippingAddress?: models.PaymentAddress$Outbound | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const UpdatePaymentLinkRequestBody$outboundSchema: z.ZodType<
  UpdatePaymentLinkRequestBody$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkRequestBody
> = z.object({
  description: z.string().optional(),
  minimumAmount: models.Amount$outboundSchema.optional(),
  archived: z.boolean().optional(),
  allowedMethods: z.nullable(z.array(z.string())).optional(),
  lines: z.nullable(z.array(models.PaymentLineItem$outboundSchema)).optional(),
  billingAddress: models.PaymentAddress$outboundSchema.optional(),
  shippingAddress: models.PaymentAddress$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkRequestBody$ {
  /** @deprecated use `UpdatePaymentLinkRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkRequestBody$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkRequestBody$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequestBody$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkRequestBody$Outbound;
}

export function updatePaymentLinkRequestBodyToJSON(
  updatePaymentLinkRequestBody: UpdatePaymentLinkRequestBody,
): string {
  return JSON.stringify(
    UpdatePaymentLinkRequestBody$outboundSchema.parse(
      updatePaymentLinkRequestBody,
    ),
  );
}

export function updatePaymentLinkRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentLinkId: z.string(),
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => UpdatePaymentLinkRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdatePaymentLinkRequest$Outbound = {
  paymentLinkId: string;
  "idempotency-key"?: string | undefined;
  RequestBody?: UpdatePaymentLinkRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdatePaymentLinkRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkRequest
> = z.object({
  paymentLinkId: z.string(),
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => UpdatePaymentLinkRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkRequest$ {
  /** @deprecated use `UpdatePaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkRequest$Outbound;
}

export function updatePaymentLinkRequestToJSON(
  updatePaymentLinkRequest: UpdatePaymentLinkRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkRequest$outboundSchema.parse(updatePaymentLinkRequest),
  );
}

export function updatePaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkRequest' from JSON`,
  );
}
