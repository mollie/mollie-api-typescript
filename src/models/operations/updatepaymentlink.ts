/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
 */
export type UpdatePaymentLinkMinimumAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type UpdatePaymentLinkUnitPriceRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
 */
export type UpdatePaymentLinkDiscountAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type UpdatePaymentLinkTotalAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * @remarks
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type UpdatePaymentLinkVatAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const UpdatePaymentLinkCategoryRequest = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type UpdatePaymentLinkCategoryRequest = ClosedEnum<
  typeof UpdatePaymentLinkCategoryRequest
>;

export type UpdatePaymentLinkLineRequest = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   *
   * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
   */
  type?: string | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: UpdatePaymentLinkUnitPriceRequest;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
   */
  discountAmount?: UpdatePaymentLinkDiscountAmountRequest | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: UpdatePaymentLinkTotalAmountRequest;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * @remarks
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: UpdatePaymentLinkVatAmountRequest | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
   */
  categories?: Array<UpdatePaymentLinkCategoryRequest> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type UpdatePaymentLinkBillingAddressRequest = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 */
export type UpdatePaymentLinkShippingAddressRequest = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

export type UpdatePaymentLinkRequestBody = {
  /**
   * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
   *
   * @remarks
   *
   * Updating the description does not affect any previously existing payments created for this payment link.
   */
  description?: string | undefined;
  /**
   * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
   */
  minimumAmount?: UpdatePaymentLinkMinimumAmountRequest | undefined;
  /**
   * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
   */
  archived?: boolean | undefined;
  /**
   * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
   *
   * @remarks
   *
   * Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
   */
  allowedMethods?: Array<string> | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<UpdatePaymentLinkLineRequest> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: UpdatePaymentLinkBillingAddressRequest | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   */
  shippingAddress?: UpdatePaymentLinkShippingAddressRequest | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type UpdatePaymentLinkRequest = {
  /**
   * Provide the ID of the related payment link.
   */
  paymentLinkId: string;
  requestBody?: UpdatePaymentLinkRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdatePaymentLinkUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type UpdatePaymentLinkUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdatePaymentLinkUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdatePaymentLinkNotFoundDocumentation = {
  href: string;
  type: string;
};

export type UpdatePaymentLinkNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdatePaymentLinkNotFoundDocumentation;
};

/**
 * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
 */
export type UpdatePaymentLinkAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
 */
export type UpdatePaymentLinkMinimumAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type UpdatePaymentLinkUnitPriceResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
 */
export type UpdatePaymentLinkDiscountAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type UpdatePaymentLinkTotalAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * @remarks
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type UpdatePaymentLinkVatAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const UpdatePaymentLinkCategoryResponse = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type UpdatePaymentLinkCategoryResponse = ClosedEnum<
  typeof UpdatePaymentLinkCategoryResponse
>;

export type UpdatePaymentLinkLineResponse = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   *
   * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
   */
  type?: string | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: UpdatePaymentLinkUnitPriceResponse;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
   */
  discountAmount?: UpdatePaymentLinkDiscountAmountResponse | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: UpdatePaymentLinkTotalAmountResponse;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * @remarks
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: UpdatePaymentLinkVatAmountResponse | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
   */
  categories?: Array<UpdatePaymentLinkCategoryResponse> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type UpdatePaymentLinkBillingAddressResponse = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 */
export type UpdatePaymentLinkShippingAddressResponse = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
 */
export type UpdatePaymentLinkApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
 *
 * @remarks
 *
 * If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
 */
export type UpdatePaymentLinkApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
   */
  amount?: UpdatePaymentLinkApplicationFeeAmount | undefined;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
   */
  description?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdatePaymentLinkSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type UpdatePaymentLinkPaymentLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdatePaymentLinkDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type UpdatePaymentLinkLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: UpdatePaymentLinkSelf | undefined;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  paymentLink?: UpdatePaymentLinkPaymentLink | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: UpdatePaymentLinkDocumentation | undefined;
};

/**
 * The payment link object.
 */
export type UpdatePaymentLinkResponse = {
  /**
   * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
   */
  description?: string | undefined;
  /**
   * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
   */
  amount?: UpdatePaymentLinkAmount | null | undefined;
  /**
   * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
   */
  minimumAmount?: UpdatePaymentLinkMinimumAmountResponse | null | undefined;
  /**
   * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
   */
  archived?: boolean | undefined;
  /**
   * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided, the customer will be shown a generic message after completing the payment.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments resulting from the payment link.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
   */
  webhookUrl?: string | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<UpdatePaymentLinkLineResponse> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: UpdatePaymentLinkBillingAddressResponse | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   */
  shippingAddress?: UpdatePaymentLinkShippingAddressResponse | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | null | undefined;
  /**
   * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple payments using the same link.
   *
   * @remarks
   *
   * If no value is specified, the field defaults to `false`, allowing only a single payment per link.
   */
  reusable?: boolean | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The date and time the payment link became paid, in ISO 8601 format.
   */
  paidAt?: string | null | undefined;
  /**
   * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front, the payment link will not expire automatically.
   */
  expiresAt?: string | null | undefined;
  /**
   * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
   *
   * @remarks
   *
   * Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
   */
  allowedMethods?: Array<string> | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
   *
   * @remarks
   *
   * If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
   */
  applicationFee?: UpdatePaymentLinkApplicationFee | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: UpdatePaymentLinkLinks | undefined;
};

/** @internal */
export const UpdatePaymentLinkMinimumAmountRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkMinimumAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkMinimumAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkMinimumAmountRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkMinimumAmountRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkMinimumAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkMinimumAmountRequest$ {
  /** @deprecated use `UpdatePaymentLinkMinimumAmountRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkMinimumAmountRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkMinimumAmountRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkMinimumAmountRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkMinimumAmountRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkMinimumAmountRequest$Outbound;
}

export function updatePaymentLinkMinimumAmountRequestToJSON(
  updatePaymentLinkMinimumAmountRequest: UpdatePaymentLinkMinimumAmountRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkMinimumAmountRequest$outboundSchema.parse(
      updatePaymentLinkMinimumAmountRequest,
    ),
  );
}

export function updatePaymentLinkMinimumAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkMinimumAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkMinimumAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkMinimumAmountRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkUnitPriceRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkUnitPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkUnitPriceRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkUnitPriceRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkUnitPriceRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkUnitPriceRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkUnitPriceRequest$ {
  /** @deprecated use `UpdatePaymentLinkUnitPriceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkUnitPriceRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnitPriceRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkUnitPriceRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnitPriceRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkUnitPriceRequest$Outbound;
}

export function updatePaymentLinkUnitPriceRequestToJSON(
  updatePaymentLinkUnitPriceRequest: UpdatePaymentLinkUnitPriceRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkUnitPriceRequest$outboundSchema.parse(
      updatePaymentLinkUnitPriceRequest,
    ),
  );
}

export function updatePaymentLinkUnitPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkUnitPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkUnitPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkUnitPriceRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkDiscountAmountRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkDiscountAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkDiscountAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkDiscountAmountRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkDiscountAmountRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkDiscountAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkDiscountAmountRequest$ {
  /** @deprecated use `UpdatePaymentLinkDiscountAmountRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkDiscountAmountRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkDiscountAmountRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkDiscountAmountRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkDiscountAmountRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkDiscountAmountRequest$Outbound;
}

export function updatePaymentLinkDiscountAmountRequestToJSON(
  updatePaymentLinkDiscountAmountRequest:
    UpdatePaymentLinkDiscountAmountRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkDiscountAmountRequest$outboundSchema.parse(
      updatePaymentLinkDiscountAmountRequest,
    ),
  );
}

export function updatePaymentLinkDiscountAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkDiscountAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkDiscountAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkDiscountAmountRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkTotalAmountRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkTotalAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkTotalAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkTotalAmountRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkTotalAmountRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkTotalAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkTotalAmountRequest$ {
  /** @deprecated use `UpdatePaymentLinkTotalAmountRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkTotalAmountRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkTotalAmountRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkTotalAmountRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkTotalAmountRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkTotalAmountRequest$Outbound;
}

export function updatePaymentLinkTotalAmountRequestToJSON(
  updatePaymentLinkTotalAmountRequest: UpdatePaymentLinkTotalAmountRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkTotalAmountRequest$outboundSchema.parse(
      updatePaymentLinkTotalAmountRequest,
    ),
  );
}

export function updatePaymentLinkTotalAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkTotalAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkTotalAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkTotalAmountRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkVatAmountRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkVatAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkVatAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkVatAmountRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkVatAmountRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkVatAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkVatAmountRequest$ {
  /** @deprecated use `UpdatePaymentLinkVatAmountRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkVatAmountRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkVatAmountRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkVatAmountRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkVatAmountRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkVatAmountRequest$Outbound;
}

export function updatePaymentLinkVatAmountRequestToJSON(
  updatePaymentLinkVatAmountRequest: UpdatePaymentLinkVatAmountRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkVatAmountRequest$outboundSchema.parse(
      updatePaymentLinkVatAmountRequest,
    ),
  );
}

export function updatePaymentLinkVatAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkVatAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkVatAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkVatAmountRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkCategoryRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePaymentLinkCategoryRequest
> = z.nativeEnum(UpdatePaymentLinkCategoryRequest);

/** @internal */
export const UpdatePaymentLinkCategoryRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePaymentLinkCategoryRequest
> = UpdatePaymentLinkCategoryRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkCategoryRequest$ {
  /** @deprecated use `UpdatePaymentLinkCategoryRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkCategoryRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkCategoryRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkCategoryRequest$outboundSchema;
}

/** @internal */
export const UpdatePaymentLinkLineRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkLineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => UpdatePaymentLinkUnitPriceRequest$inboundSchema),
  discountAmount: z.lazy(() =>
    UpdatePaymentLinkDiscountAmountRequest$inboundSchema
  ).optional(),
  totalAmount: z.lazy(() => UpdatePaymentLinkTotalAmountRequest$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => UpdatePaymentLinkVatAmountRequest$inboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(UpdatePaymentLinkCategoryRequest$inboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/** @internal */
export type UpdatePaymentLinkLineRequest$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: UpdatePaymentLinkUnitPriceRequest$Outbound;
  discountAmount?: UpdatePaymentLinkDiscountAmountRequest$Outbound | undefined;
  totalAmount: UpdatePaymentLinkTotalAmountRequest$Outbound;
  vatRate?: string | undefined;
  vatAmount?: UpdatePaymentLinkVatAmountRequest$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
};

/** @internal */
export const UpdatePaymentLinkLineRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkLineRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkLineRequest
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => UpdatePaymentLinkUnitPriceRequest$outboundSchema),
  discountAmount: z.lazy(() =>
    UpdatePaymentLinkDiscountAmountRequest$outboundSchema
  ).optional(),
  totalAmount: z.lazy(() => UpdatePaymentLinkTotalAmountRequest$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => UpdatePaymentLinkVatAmountRequest$outboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(UpdatePaymentLinkCategoryRequest$outboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkLineRequest$ {
  /** @deprecated use `UpdatePaymentLinkLineRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkLineRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkLineRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkLineRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkLineRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkLineRequest$Outbound;
}

export function updatePaymentLinkLineRequestToJSON(
  updatePaymentLinkLineRequest: UpdatePaymentLinkLineRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkLineRequest$outboundSchema.parse(
      updatePaymentLinkLineRequest,
    ),
  );
}

export function updatePaymentLinkLineRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkLineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkLineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkLineRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkBillingAddressRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkBillingAddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type UpdatePaymentLinkBillingAddressRequest$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const UpdatePaymentLinkBillingAddressRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkBillingAddressRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkBillingAddressRequest
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkBillingAddressRequest$ {
  /** @deprecated use `UpdatePaymentLinkBillingAddressRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkBillingAddressRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkBillingAddressRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkBillingAddressRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkBillingAddressRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkBillingAddressRequest$Outbound;
}

export function updatePaymentLinkBillingAddressRequestToJSON(
  updatePaymentLinkBillingAddressRequest:
    UpdatePaymentLinkBillingAddressRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkBillingAddressRequest$outboundSchema.parse(
      updatePaymentLinkBillingAddressRequest,
    ),
  );
}

export function updatePaymentLinkBillingAddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkBillingAddressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkBillingAddressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkBillingAddressRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkShippingAddressRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkShippingAddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type UpdatePaymentLinkShippingAddressRequest$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const UpdatePaymentLinkShippingAddressRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkShippingAddressRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkShippingAddressRequest
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkShippingAddressRequest$ {
  /** @deprecated use `UpdatePaymentLinkShippingAddressRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkShippingAddressRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkShippingAddressRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkShippingAddressRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkShippingAddressRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkShippingAddressRequest$Outbound;
}

export function updatePaymentLinkShippingAddressRequestToJSON(
  updatePaymentLinkShippingAddressRequest:
    UpdatePaymentLinkShippingAddressRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkShippingAddressRequest$outboundSchema.parse(
      updatePaymentLinkShippingAddressRequest,
    ),
  );
}

export function updatePaymentLinkShippingAddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePaymentLinkShippingAddressRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkShippingAddressRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePaymentLinkShippingAddressRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkRequestBody$inboundSchema: z.ZodType<
  UpdatePaymentLinkRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  minimumAmount: z.lazy(() =>
    UpdatePaymentLinkMinimumAmountRequest$inboundSchema
  ).optional(),
  archived: z.boolean().optional(),
  allowedMethods: z.nullable(z.array(z.string())).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdatePaymentLinkLineRequest$inboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    UpdatePaymentLinkBillingAddressRequest$inboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    UpdatePaymentLinkShippingAddressRequest$inboundSchema
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdatePaymentLinkRequestBody$Outbound = {
  description?: string | undefined;
  minimumAmount?: UpdatePaymentLinkMinimumAmountRequest$Outbound | undefined;
  archived?: boolean | undefined;
  allowedMethods?: Array<string> | null | undefined;
  lines?: Array<UpdatePaymentLinkLineRequest$Outbound> | null | undefined;
  billingAddress?: UpdatePaymentLinkBillingAddressRequest$Outbound | undefined;
  shippingAddress?:
    | UpdatePaymentLinkShippingAddressRequest$Outbound
    | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const UpdatePaymentLinkRequestBody$outboundSchema: z.ZodType<
  UpdatePaymentLinkRequestBody$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkRequestBody
> = z.object({
  description: z.string().optional(),
  minimumAmount: z.lazy(() =>
    UpdatePaymentLinkMinimumAmountRequest$outboundSchema
  ).optional(),
  archived: z.boolean().optional(),
  allowedMethods: z.nullable(z.array(z.string())).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdatePaymentLinkLineRequest$outboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    UpdatePaymentLinkBillingAddressRequest$outboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    UpdatePaymentLinkShippingAddressRequest$outboundSchema
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkRequestBody$ {
  /** @deprecated use `UpdatePaymentLinkRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkRequestBody$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkRequestBody$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequestBody$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkRequestBody$Outbound;
}

export function updatePaymentLinkRequestBodyToJSON(
  updatePaymentLinkRequestBody: UpdatePaymentLinkRequestBody,
): string {
  return JSON.stringify(
    UpdatePaymentLinkRequestBody$outboundSchema.parse(
      updatePaymentLinkRequestBody,
    ),
  );
}

export function updatePaymentLinkRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkRequest$inboundSchema: z.ZodType<
  UpdatePaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentLinkId: z.string(),
  RequestBody: z.lazy(() => UpdatePaymentLinkRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdatePaymentLinkRequest$Outbound = {
  paymentLinkId: string;
  RequestBody?: UpdatePaymentLinkRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdatePaymentLinkRequest$outboundSchema: z.ZodType<
  UpdatePaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkRequest
> = z.object({
  paymentLinkId: z.string(),
  requestBody: z.lazy(() => UpdatePaymentLinkRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkRequest$ {
  /** @deprecated use `UpdatePaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkRequest$Outbound;
}

export function updatePaymentLinkRequestToJSON(
  updatePaymentLinkRequest: UpdatePaymentLinkRequest,
): string {
  return JSON.stringify(
    UpdatePaymentLinkRequest$outboundSchema.parse(updatePaymentLinkRequest),
  );
}

export function updatePaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    UpdatePaymentLinkUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type UpdatePaymentLinkUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdatePaymentLinkUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    UpdatePaymentLinkUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    UpdatePaymentLinkUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkUnprocessableEntityDocumentation$ {
  /** @deprecated use `UpdatePaymentLinkUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    UpdatePaymentLinkUnprocessableEntityDocumentation$Outbound;
}

export function updatePaymentLinkUnprocessableEntityDocumentationToJSON(
  updatePaymentLinkUnprocessableEntityDocumentation:
    UpdatePaymentLinkUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    UpdatePaymentLinkUnprocessableEntityDocumentation$outboundSchema.parse(
      updatePaymentLinkUnprocessableEntityDocumentation,
    ),
  );
}

export function updatePaymentLinkUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePaymentLinkUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePaymentLinkUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkUnprocessableEntityLinks$inboundSchema: z.ZodType<
  UpdatePaymentLinkUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    UpdatePaymentLinkUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type UpdatePaymentLinkUnprocessableEntityLinks$Outbound = {
  documentation: UpdatePaymentLinkUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const UpdatePaymentLinkUnprocessableEntityLinks$outboundSchema:
  z.ZodType<
    UpdatePaymentLinkUnprocessableEntityLinks$Outbound,
    z.ZodTypeDef,
    UpdatePaymentLinkUnprocessableEntityLinks
  > = z.object({
    documentation: z.lazy(() =>
      UpdatePaymentLinkUnprocessableEntityDocumentation$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkUnprocessableEntityLinks$ {
  /** @deprecated use `UpdatePaymentLinkUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkUnprocessableEntityLinks$Outbound;
}

export function updatePaymentLinkUnprocessableEntityLinksToJSON(
  updatePaymentLinkUnprocessableEntityLinks:
    UpdatePaymentLinkUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    UpdatePaymentLinkUnprocessableEntityLinks$outboundSchema.parse(
      updatePaymentLinkUnprocessableEntityLinks,
    ),
  );
}

export function updatePaymentLinkUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePaymentLinkUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePaymentLinkUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkNotFoundDocumentation$inboundSchema: z.ZodType<
  UpdatePaymentLinkNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdatePaymentLinkNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdatePaymentLinkNotFoundDocumentation$outboundSchema: z.ZodType<
  UpdatePaymentLinkNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkNotFoundDocumentation$ {
  /** @deprecated use `UpdatePaymentLinkNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkNotFoundDocumentation$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkNotFoundDocumentation$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkNotFoundDocumentation$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkNotFoundDocumentation$Outbound;
}

export function updatePaymentLinkNotFoundDocumentationToJSON(
  updatePaymentLinkNotFoundDocumentation:
    UpdatePaymentLinkNotFoundDocumentation,
): string {
  return JSON.stringify(
    UpdatePaymentLinkNotFoundDocumentation$outboundSchema.parse(
      updatePaymentLinkNotFoundDocumentation,
    ),
  );
}

export function updatePaymentLinkNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkNotFoundLinks$inboundSchema: z.ZodType<
  UpdatePaymentLinkNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    UpdatePaymentLinkNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type UpdatePaymentLinkNotFoundLinks$Outbound = {
  documentation: UpdatePaymentLinkNotFoundDocumentation$Outbound;
};

/** @internal */
export const UpdatePaymentLinkNotFoundLinks$outboundSchema: z.ZodType<
  UpdatePaymentLinkNotFoundLinks$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    UpdatePaymentLinkNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkNotFoundLinks$ {
  /** @deprecated use `UpdatePaymentLinkNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkNotFoundLinks$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkNotFoundLinks$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkNotFoundLinks$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkNotFoundLinks$Outbound;
}

export function updatePaymentLinkNotFoundLinksToJSON(
  updatePaymentLinkNotFoundLinks: UpdatePaymentLinkNotFoundLinks,
): string {
  return JSON.stringify(
    UpdatePaymentLinkNotFoundLinks$outboundSchema.parse(
      updatePaymentLinkNotFoundLinks,
    ),
  );
}

export function updatePaymentLinkNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkAmount$inboundSchema: z.ZodType<
  UpdatePaymentLinkAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkAmount$outboundSchema: z.ZodType<
  UpdatePaymentLinkAmount$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkAmount$ {
  /** @deprecated use `UpdatePaymentLinkAmount$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkAmount$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkAmount$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkAmount$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkAmount$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkAmount$Outbound;
}

export function updatePaymentLinkAmountToJSON(
  updatePaymentLinkAmount: UpdatePaymentLinkAmount,
): string {
  return JSON.stringify(
    UpdatePaymentLinkAmount$outboundSchema.parse(updatePaymentLinkAmount),
  );
}

export function updatePaymentLinkAmountFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkAmount' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkMinimumAmountResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkMinimumAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkMinimumAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkMinimumAmountResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkMinimumAmountResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkMinimumAmountResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkMinimumAmountResponse$ {
  /** @deprecated use `UpdatePaymentLinkMinimumAmountResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkMinimumAmountResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkMinimumAmountResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkMinimumAmountResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkMinimumAmountResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkMinimumAmountResponse$Outbound;
}

export function updatePaymentLinkMinimumAmountResponseToJSON(
  updatePaymentLinkMinimumAmountResponse:
    UpdatePaymentLinkMinimumAmountResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkMinimumAmountResponse$outboundSchema.parse(
      updatePaymentLinkMinimumAmountResponse,
    ),
  );
}

export function updatePaymentLinkMinimumAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkMinimumAmountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkMinimumAmountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkMinimumAmountResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkUnitPriceResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkUnitPriceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkUnitPriceResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkUnitPriceResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkUnitPriceResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkUnitPriceResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkUnitPriceResponse$ {
  /** @deprecated use `UpdatePaymentLinkUnitPriceResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkUnitPriceResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnitPriceResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkUnitPriceResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkUnitPriceResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkUnitPriceResponse$Outbound;
}

export function updatePaymentLinkUnitPriceResponseToJSON(
  updatePaymentLinkUnitPriceResponse: UpdatePaymentLinkUnitPriceResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkUnitPriceResponse$outboundSchema.parse(
      updatePaymentLinkUnitPriceResponse,
    ),
  );
}

export function updatePaymentLinkUnitPriceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkUnitPriceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkUnitPriceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkUnitPriceResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkDiscountAmountResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkDiscountAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkDiscountAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkDiscountAmountResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkDiscountAmountResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkDiscountAmountResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkDiscountAmountResponse$ {
  /** @deprecated use `UpdatePaymentLinkDiscountAmountResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkDiscountAmountResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkDiscountAmountResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkDiscountAmountResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkDiscountAmountResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkDiscountAmountResponse$Outbound;
}

export function updatePaymentLinkDiscountAmountResponseToJSON(
  updatePaymentLinkDiscountAmountResponse:
    UpdatePaymentLinkDiscountAmountResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkDiscountAmountResponse$outboundSchema.parse(
      updatePaymentLinkDiscountAmountResponse,
    ),
  );
}

export function updatePaymentLinkDiscountAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePaymentLinkDiscountAmountResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkDiscountAmountResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePaymentLinkDiscountAmountResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkTotalAmountResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkTotalAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkTotalAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkTotalAmountResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkTotalAmountResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkTotalAmountResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkTotalAmountResponse$ {
  /** @deprecated use `UpdatePaymentLinkTotalAmountResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkTotalAmountResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkTotalAmountResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkTotalAmountResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkTotalAmountResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkTotalAmountResponse$Outbound;
}

export function updatePaymentLinkTotalAmountResponseToJSON(
  updatePaymentLinkTotalAmountResponse: UpdatePaymentLinkTotalAmountResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkTotalAmountResponse$outboundSchema.parse(
      updatePaymentLinkTotalAmountResponse,
    ),
  );
}

export function updatePaymentLinkTotalAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkTotalAmountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkTotalAmountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkTotalAmountResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkVatAmountResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkVatAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkVatAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkVatAmountResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkVatAmountResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkVatAmountResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkVatAmountResponse$ {
  /** @deprecated use `UpdatePaymentLinkVatAmountResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkVatAmountResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkVatAmountResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkVatAmountResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkVatAmountResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkVatAmountResponse$Outbound;
}

export function updatePaymentLinkVatAmountResponseToJSON(
  updatePaymentLinkVatAmountResponse: UpdatePaymentLinkVatAmountResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkVatAmountResponse$outboundSchema.parse(
      updatePaymentLinkVatAmountResponse,
    ),
  );
}

export function updatePaymentLinkVatAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkVatAmountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkVatAmountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkVatAmountResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkCategoryResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdatePaymentLinkCategoryResponse
> = z.nativeEnum(UpdatePaymentLinkCategoryResponse);

/** @internal */
export const UpdatePaymentLinkCategoryResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdatePaymentLinkCategoryResponse
> = UpdatePaymentLinkCategoryResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkCategoryResponse$ {
  /** @deprecated use `UpdatePaymentLinkCategoryResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkCategoryResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkCategoryResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkCategoryResponse$outboundSchema;
}

/** @internal */
export const UpdatePaymentLinkLineResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkLineResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => UpdatePaymentLinkUnitPriceResponse$inboundSchema),
  discountAmount: z.lazy(() =>
    UpdatePaymentLinkDiscountAmountResponse$inboundSchema
  ).optional(),
  totalAmount: z.lazy(() => UpdatePaymentLinkTotalAmountResponse$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => UpdatePaymentLinkVatAmountResponse$inboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(UpdatePaymentLinkCategoryResponse$inboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/** @internal */
export type UpdatePaymentLinkLineResponse$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: UpdatePaymentLinkUnitPriceResponse$Outbound;
  discountAmount?: UpdatePaymentLinkDiscountAmountResponse$Outbound | undefined;
  totalAmount: UpdatePaymentLinkTotalAmountResponse$Outbound;
  vatRate?: string | undefined;
  vatAmount?: UpdatePaymentLinkVatAmountResponse$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
};

/** @internal */
export const UpdatePaymentLinkLineResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkLineResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkLineResponse
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => UpdatePaymentLinkUnitPriceResponse$outboundSchema),
  discountAmount: z.lazy(() =>
    UpdatePaymentLinkDiscountAmountResponse$outboundSchema
  ).optional(),
  totalAmount: z.lazy(() =>
    UpdatePaymentLinkTotalAmountResponse$outboundSchema
  ),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => UpdatePaymentLinkVatAmountResponse$outboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(UpdatePaymentLinkCategoryResponse$outboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkLineResponse$ {
  /** @deprecated use `UpdatePaymentLinkLineResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkLineResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkLineResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkLineResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkLineResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkLineResponse$Outbound;
}

export function updatePaymentLinkLineResponseToJSON(
  updatePaymentLinkLineResponse: UpdatePaymentLinkLineResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkLineResponse$outboundSchema.parse(
      updatePaymentLinkLineResponse,
    ),
  );
}

export function updatePaymentLinkLineResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkLineResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkLineResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkLineResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkBillingAddressResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkBillingAddressResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type UpdatePaymentLinkBillingAddressResponse$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const UpdatePaymentLinkBillingAddressResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkBillingAddressResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkBillingAddressResponse
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkBillingAddressResponse$ {
  /** @deprecated use `UpdatePaymentLinkBillingAddressResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkBillingAddressResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkBillingAddressResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkBillingAddressResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkBillingAddressResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkBillingAddressResponse$Outbound;
}

export function updatePaymentLinkBillingAddressResponseToJSON(
  updatePaymentLinkBillingAddressResponse:
    UpdatePaymentLinkBillingAddressResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkBillingAddressResponse$outboundSchema.parse(
      updatePaymentLinkBillingAddressResponse,
    ),
  );
}

export function updatePaymentLinkBillingAddressResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePaymentLinkBillingAddressResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkBillingAddressResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePaymentLinkBillingAddressResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkShippingAddressResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkShippingAddressResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type UpdatePaymentLinkShippingAddressResponse$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const UpdatePaymentLinkShippingAddressResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkShippingAddressResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkShippingAddressResponse
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkShippingAddressResponse$ {
  /** @deprecated use `UpdatePaymentLinkShippingAddressResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkShippingAddressResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkShippingAddressResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkShippingAddressResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkShippingAddressResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkShippingAddressResponse$Outbound;
}

export function updatePaymentLinkShippingAddressResponseToJSON(
  updatePaymentLinkShippingAddressResponse:
    UpdatePaymentLinkShippingAddressResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkShippingAddressResponse$outboundSchema.parse(
      updatePaymentLinkShippingAddressResponse,
    ),
  );
}

export function updatePaymentLinkShippingAddressResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePaymentLinkShippingAddressResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkShippingAddressResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePaymentLinkShippingAddressResponse' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkApplicationFeeAmount$inboundSchema: z.ZodType<
  UpdatePaymentLinkApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdatePaymentLinkApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const UpdatePaymentLinkApplicationFeeAmount$outboundSchema: z.ZodType<
  UpdatePaymentLinkApplicationFeeAmount$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkApplicationFeeAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkApplicationFeeAmount$ {
  /** @deprecated use `UpdatePaymentLinkApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePaymentLinkApplicationFeeAmount$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePaymentLinkApplicationFeeAmount$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkApplicationFeeAmount$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkApplicationFeeAmount$Outbound;
}

export function updatePaymentLinkApplicationFeeAmountToJSON(
  updatePaymentLinkApplicationFeeAmount: UpdatePaymentLinkApplicationFeeAmount,
): string {
  return JSON.stringify(
    UpdatePaymentLinkApplicationFeeAmount$outboundSchema.parse(
      updatePaymentLinkApplicationFeeAmount,
    ),
  );
}

export function updatePaymentLinkApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkApplicationFeeAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePaymentLinkApplicationFeeAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkApplicationFee$inboundSchema: z.ZodType<
  UpdatePaymentLinkApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => UpdatePaymentLinkApplicationFeeAmount$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type UpdatePaymentLinkApplicationFee$Outbound = {
  amount?: UpdatePaymentLinkApplicationFeeAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const UpdatePaymentLinkApplicationFee$outboundSchema: z.ZodType<
  UpdatePaymentLinkApplicationFee$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkApplicationFee
> = z.object({
  amount: z.lazy(() => UpdatePaymentLinkApplicationFeeAmount$outboundSchema)
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkApplicationFee$ {
  /** @deprecated use `UpdatePaymentLinkApplicationFee$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkApplicationFee$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkApplicationFee$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkApplicationFee$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkApplicationFee$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkApplicationFee$Outbound;
}

export function updatePaymentLinkApplicationFeeToJSON(
  updatePaymentLinkApplicationFee: UpdatePaymentLinkApplicationFee,
): string {
  return JSON.stringify(
    UpdatePaymentLinkApplicationFee$outboundSchema.parse(
      updatePaymentLinkApplicationFee,
    ),
  );
}

export function updatePaymentLinkApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkApplicationFee' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkSelf$inboundSchema: z.ZodType<
  UpdatePaymentLinkSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdatePaymentLinkSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdatePaymentLinkSelf$outboundSchema: z.ZodType<
  UpdatePaymentLinkSelf$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkSelf$ {
  /** @deprecated use `UpdatePaymentLinkSelf$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkSelf$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkSelf$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkSelf$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkSelf$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkSelf$Outbound;
}

export function updatePaymentLinkSelfToJSON(
  updatePaymentLinkSelf: UpdatePaymentLinkSelf,
): string {
  return JSON.stringify(
    UpdatePaymentLinkSelf$outboundSchema.parse(updatePaymentLinkSelf),
  );
}

export function updatePaymentLinkSelfFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkSelf' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkPaymentLink$inboundSchema: z.ZodType<
  UpdatePaymentLinkPaymentLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdatePaymentLinkPaymentLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdatePaymentLinkPaymentLink$outboundSchema: z.ZodType<
  UpdatePaymentLinkPaymentLink$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkPaymentLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkPaymentLink$ {
  /** @deprecated use `UpdatePaymentLinkPaymentLink$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkPaymentLink$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkPaymentLink$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkPaymentLink$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkPaymentLink$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkPaymentLink$Outbound;
}

export function updatePaymentLinkPaymentLinkToJSON(
  updatePaymentLinkPaymentLink: UpdatePaymentLinkPaymentLink,
): string {
  return JSON.stringify(
    UpdatePaymentLinkPaymentLink$outboundSchema.parse(
      updatePaymentLinkPaymentLink,
    ),
  );
}

export function updatePaymentLinkPaymentLinkFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkPaymentLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkPaymentLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkPaymentLink' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkDocumentation$inboundSchema: z.ZodType<
  UpdatePaymentLinkDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdatePaymentLinkDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdatePaymentLinkDocumentation$outboundSchema: z.ZodType<
  UpdatePaymentLinkDocumentation$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkDocumentation$ {
  /** @deprecated use `UpdatePaymentLinkDocumentation$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkDocumentation$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkDocumentation$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkDocumentation$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkDocumentation$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkDocumentation$Outbound;
}

export function updatePaymentLinkDocumentationToJSON(
  updatePaymentLinkDocumentation: UpdatePaymentLinkDocumentation,
): string {
  return JSON.stringify(
    UpdatePaymentLinkDocumentation$outboundSchema.parse(
      updatePaymentLinkDocumentation,
    ),
  );
}

export function updatePaymentLinkDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkLinks$inboundSchema: z.ZodType<
  UpdatePaymentLinkLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => UpdatePaymentLinkSelf$inboundSchema).optional(),
  paymentLink: z.lazy(() => UpdatePaymentLinkPaymentLink$inboundSchema)
    .optional(),
  documentation: z.lazy(() => UpdatePaymentLinkDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdatePaymentLinkLinks$Outbound = {
  self?: UpdatePaymentLinkSelf$Outbound | undefined;
  paymentLink?: UpdatePaymentLinkPaymentLink$Outbound | undefined;
  documentation?: UpdatePaymentLinkDocumentation$Outbound | undefined;
};

/** @internal */
export const UpdatePaymentLinkLinks$outboundSchema: z.ZodType<
  UpdatePaymentLinkLinks$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkLinks
> = z.object({
  self: z.lazy(() => UpdatePaymentLinkSelf$outboundSchema).optional(),
  paymentLink: z.lazy(() => UpdatePaymentLinkPaymentLink$outboundSchema)
    .optional(),
  documentation: z.lazy(() => UpdatePaymentLinkDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkLinks$ {
  /** @deprecated use `UpdatePaymentLinkLinks$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkLinks$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkLinks$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkLinks$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkLinks$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkLinks$Outbound;
}

export function updatePaymentLinkLinksToJSON(
  updatePaymentLinkLinks: UpdatePaymentLinkLinks,
): string {
  return JSON.stringify(
    UpdatePaymentLinkLinks$outboundSchema.parse(updatePaymentLinkLinks),
  );
}

export function updatePaymentLinkLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkLinks' from JSON`,
  );
}

/** @internal */
export const UpdatePaymentLinkResponse$inboundSchema: z.ZodType<
  UpdatePaymentLinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("payment-link"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => UpdatePaymentLinkAmount$inboundSchema))
    .optional(),
  minimumAmount: z.nullable(
    z.lazy(() => UpdatePaymentLinkMinimumAmountResponse$inboundSchema),
  ).optional(),
  archived: z.boolean().optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdatePaymentLinkLineResponse$inboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    UpdatePaymentLinkBillingAddressResponse$inboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    UpdatePaymentLinkShippingAddressResponse$inboundSchema
  ).optional(),
  profileId: z.nullable(z.string()).optional(),
  reusable: z.nullable(z.boolean().default(false)),
  createdAt: z.string().optional(),
  paidAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  allowedMethods: z.nullable(z.array(z.string())).optional(),
  applicationFee: z.lazy(() => UpdatePaymentLinkApplicationFee$inboundSchema)
    .optional(),
  _links: z.lazy(() => UpdatePaymentLinkLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type UpdatePaymentLinkResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: UpdatePaymentLinkAmount$Outbound | null | undefined;
  minimumAmount?:
    | UpdatePaymentLinkMinimumAmountResponse$Outbound
    | null
    | undefined;
  archived?: boolean | undefined;
  redirectUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  lines?: Array<UpdatePaymentLinkLineResponse$Outbound> | null | undefined;
  billingAddress?: UpdatePaymentLinkBillingAddressResponse$Outbound | undefined;
  shippingAddress?:
    | UpdatePaymentLinkShippingAddressResponse$Outbound
    | undefined;
  profileId?: string | null | undefined;
  reusable: boolean | null;
  createdAt?: string | undefined;
  paidAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  allowedMethods?: Array<string> | null | undefined;
  applicationFee?: UpdatePaymentLinkApplicationFee$Outbound | undefined;
  _links?: UpdatePaymentLinkLinks$Outbound | undefined;
};

/** @internal */
export const UpdatePaymentLinkResponse$outboundSchema: z.ZodType<
  UpdatePaymentLinkResponse$Outbound,
  z.ZodTypeDef,
  UpdatePaymentLinkResponse
> = z.object({
  resource: z.string().default("payment-link"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => UpdatePaymentLinkAmount$outboundSchema))
    .optional(),
  minimumAmount: z.nullable(
    z.lazy(() => UpdatePaymentLinkMinimumAmountResponse$outboundSchema),
  ).optional(),
  archived: z.boolean().optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => UpdatePaymentLinkLineResponse$outboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    UpdatePaymentLinkBillingAddressResponse$outboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    UpdatePaymentLinkShippingAddressResponse$outboundSchema
  ).optional(),
  profileId: z.nullable(z.string()).optional(),
  reusable: z.nullable(z.boolean().default(false)),
  createdAt: z.string().optional(),
  paidAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  allowedMethods: z.nullable(z.array(z.string())).optional(),
  applicationFee: z.lazy(() => UpdatePaymentLinkApplicationFee$outboundSchema)
    .optional(),
  links: z.lazy(() => UpdatePaymentLinkLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentLinkResponse$ {
  /** @deprecated use `UpdatePaymentLinkResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentLinkResponse$inboundSchema;
  /** @deprecated use `UpdatePaymentLinkResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentLinkResponse$outboundSchema;
  /** @deprecated use `UpdatePaymentLinkResponse$Outbound` instead. */
  export type Outbound = UpdatePaymentLinkResponse$Outbound;
}

export function updatePaymentLinkResponseToJSON(
  updatePaymentLinkResponse: UpdatePaymentLinkResponse,
): string {
  return JSON.stringify(
    UpdatePaymentLinkResponse$outboundSchema.parse(updatePaymentLinkResponse),
  );
}

export function updatePaymentLinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePaymentLinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePaymentLinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePaymentLinkResponse' from JSON`,
  );
}
