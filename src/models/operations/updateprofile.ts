/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
 *
 * @remarks
 * the profile before it can start accepting payments.
 */
export const Mode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
 *
 * @remarks
 * the profile before it can start accepting payments.
 */
export type Mode = ClosedEnum<typeof Mode>;

export type UpdateProfileRequestBody = {
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or
   *
   * @remarks
   * application.
   */
  name?: string | null | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs
   *
   * @remarks
   * are allowed.
   */
  website?: string | null | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | null | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | null | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | null | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside,
   *
   * @remarks
   * in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | null | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the
   *
   * @remarks
   * [business category list](common-data-types) for all possible options.
   */
  businessCategory?: string | null | undefined;
  /**
   * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
   *
   * @remarks
   * the profile before it can start accepting payments.
   */
  mode?: Mode | null | undefined;
};

export type UpdateProfileRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody: UpdateProfileRequestBody;
};

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const UpdateProfileRequestBody$inboundSchema: z.ZodType<
  UpdateProfileRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  countriesOfActivity: z.nullable(z.array(z.string())).optional(),
  businessCategory: z.nullable(z.string()).optional(),
  mode: z.nullable(Mode$inboundSchema).optional(),
});

/** @internal */
export type UpdateProfileRequestBody$Outbound = {
  name?: string | null | undefined;
  website?: string | null | undefined;
  email?: string | null | undefined;
  phone?: string | null | undefined;
  description?: string | null | undefined;
  countriesOfActivity?: Array<string> | null | undefined;
  businessCategory?: string | null | undefined;
  mode?: string | null | undefined;
};

/** @internal */
export const UpdateProfileRequestBody$outboundSchema: z.ZodType<
  UpdateProfileRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateProfileRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  countriesOfActivity: z.nullable(z.array(z.string())).optional(),
  businessCategory: z.nullable(z.string()).optional(),
  mode: z.nullable(Mode$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileRequestBody$ {
  /** @deprecated use `UpdateProfileRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileRequestBody$inboundSchema;
  /** @deprecated use `UpdateProfileRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileRequestBody$outboundSchema;
  /** @deprecated use `UpdateProfileRequestBody$Outbound` instead. */
  export type Outbound = UpdateProfileRequestBody$Outbound;
}

export function updateProfileRequestBodyToJSON(
  updateProfileRequestBody: UpdateProfileRequestBody,
): string {
  return JSON.stringify(
    UpdateProfileRequestBody$outboundSchema.parse(updateProfileRequestBody),
  );
}

export function updateProfileRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateProfileRequest$inboundSchema: z.ZodType<
  UpdateProfileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => UpdateProfileRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateProfileRequest$Outbound = {
  id: string;
  "idempotency-key"?: string | undefined;
  RequestBody: UpdateProfileRequestBody$Outbound;
};

/** @internal */
export const UpdateProfileRequest$outboundSchema: z.ZodType<
  UpdateProfileRequest$Outbound,
  z.ZodTypeDef,
  UpdateProfileRequest
> = z.object({
  id: z.string(),
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => UpdateProfileRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileRequest$ {
  /** @deprecated use `UpdateProfileRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileRequest$inboundSchema;
  /** @deprecated use `UpdateProfileRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileRequest$outboundSchema;
  /** @deprecated use `UpdateProfileRequest$Outbound` instead. */
  export type Outbound = UpdateProfileRequest$Outbound;
}

export function updateProfileRequestToJSON(
  updateProfileRequest: UpdateProfileRequest,
): string {
  return JSON.stringify(
    UpdateProfileRequest$outboundSchema.parse(updateProfileRequest),
  );
}

export function updateProfileRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileRequest' from JSON`,
  );
}
