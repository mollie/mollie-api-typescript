/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
 *
 * @remarks
 * the profile before it can start accepting payments.
 */
export const ModeRequest = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
 *
 * @remarks
 * the profile before it can start accepting payments.
 */
export type ModeRequest = ClosedEnum<typeof ModeRequest>;

export type UpdateProfileRequestBody = {
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or
   *
   * @remarks
   * application.
   */
  name?: string | null | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs
   *
   * @remarks
   * are allowed.
   */
  website?: string | null | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | null | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | null | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | null | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside,
   *
   * @remarks
   * in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | null | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the
   *
   * @remarks
   * [business category list](common-data-types) for all possible options.
   */
  businessCategory?: string | null | undefined;
  /**
   * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
   *
   * @remarks
   * the profile before it can start accepting payments.
   */
  mode?: ModeRequest | null | undefined;
};

export type UpdateProfileRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  requestBody: UpdateProfileRequestBody;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateProfileUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type UpdateProfileUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateProfileUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateProfileGoneDocumentation = {
  href: string;
  type: string;
};

export type UpdateProfileGoneLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateProfileGoneDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateProfileNotFoundDocumentation = {
  href: string;
  type: string;
};

export type UpdateProfileNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateProfileNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const UpdateProfileModeResponse = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type UpdateProfileModeResponse = ClosedEnum<
  typeof UpdateProfileModeResponse
>;

/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export const UpdateProfileStatus = {
  Unverified: "unverified",
  Verified: "verified",
  Blocked: "blocked",
} as const;
/**
 * The profile status determines whether the profile is able to receive live payments.
 *
 * @remarks
 *
 * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
 * * `verified`: The profile has been verified and can be used to create live payments and test payments.
 * * `blocked`: The profile is blocked and can no longer be used or changed.
 */
export type UpdateProfileStatus = ClosedEnum<typeof UpdateProfileStatus>;

/**
 * The status of the requested changes.
 */
export const UpdateProfileReviewStatus = {
  Pending: "pending",
  Rejected: "rejected",
} as const;
/**
 * The status of the requested changes.
 */
export type UpdateProfileReviewStatus = ClosedEnum<
  typeof UpdateProfileReviewStatus
>;

/**
 * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
 *
 * @remarks
 * automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
 * `null` in test mode.
 */
export type UpdateProfileReview = {
  /**
   * The status of the requested changes.
   */
  status?: UpdateProfileReviewStatus | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdateProfileSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Link to the profile in the Mollie dashboard.
 */
export type UpdateProfileDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the chargebacks that belong to this profile.
 */
export type UpdateProfileChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the methods that are enabled for this profile.
 */
export type UpdateProfileMethods = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the payments that belong to this profile.
 */
export type UpdateProfilePayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the refunds that belong to this profile.
 */
export type UpdateProfileRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The hosted checkout preview URL. You need to be logged in to access this page.
 */
export type UpdateProfileCheckoutPreviewUrl = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type UpdateProfileDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type UpdateProfileLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: UpdateProfileSelf | undefined;
  /**
   * Link to the profile in the Mollie dashboard.
   */
  dashboard?: UpdateProfileDashboard | undefined;
  /**
   * The API resource URL of the chargebacks that belong to this profile.
   */
  chargebacks?: UpdateProfileChargebacks | undefined;
  /**
   * The API resource URL of the methods that are enabled for this profile.
   */
  methods?: UpdateProfileMethods | undefined;
  /**
   * The API resource URL of the payments that belong to this profile.
   */
  payments?: UpdateProfilePayments | undefined;
  /**
   * The API resource URL of the refunds that belong to this profile.
   */
  refunds?: UpdateProfileRefunds | undefined;
  /**
   * The hosted checkout preview URL. You need to be logged in to access this page.
   */
  checkoutPreviewUrl?: UpdateProfileCheckoutPreviewUrl | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: UpdateProfileDocumentation | undefined;
};

/**
 * The updated profile object.
 */
export type UpdateProfileResponse = {
  /**
   * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: UpdateProfileModeResponse | undefined;
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or
   *
   * @remarks
   * application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are
   *
   * @remarks
   * allowed.
   */
  website?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside,
   *
   * @remarks
   * in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the
   *
   * @remarks
   * [business category list](common-data-types#business-category) for all possible options.
   */
  businessCategory?: string | undefined;
  /**
   * The profile status determines whether the profile is able to receive live payments.
   *
   * @remarks
   *
   * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
   * * `verified`: The profile has been verified and can be used to create live payments and test payments.
   * * `blocked`: The profile is blocked and can no longer be used or changed.
   */
  status?: UpdateProfileStatus | undefined;
  /**
   * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
   *
   * @remarks
   * automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
   * `null` in test mode.
   */
  review?: UpdateProfileReview | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: UpdateProfileLinks | undefined;
};

/** @internal */
export const ModeRequest$inboundSchema: z.ZodNativeEnum<typeof ModeRequest> = z
  .nativeEnum(ModeRequest);

/** @internal */
export const ModeRequest$outboundSchema: z.ZodNativeEnum<typeof ModeRequest> =
  ModeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModeRequest$ {
  /** @deprecated use `ModeRequest$inboundSchema` instead. */
  export const inboundSchema = ModeRequest$inboundSchema;
  /** @deprecated use `ModeRequest$outboundSchema` instead. */
  export const outboundSchema = ModeRequest$outboundSchema;
}

/** @internal */
export const UpdateProfileRequestBody$inboundSchema: z.ZodType<
  UpdateProfileRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  countriesOfActivity: z.nullable(z.array(z.string())).optional(),
  businessCategory: z.nullable(z.string()).optional(),
  mode: z.nullable(ModeRequest$inboundSchema).optional(),
});

/** @internal */
export type UpdateProfileRequestBody$Outbound = {
  name?: string | null | undefined;
  website?: string | null | undefined;
  email?: string | null | undefined;
  phone?: string | null | undefined;
  description?: string | null | undefined;
  countriesOfActivity?: Array<string> | null | undefined;
  businessCategory?: string | null | undefined;
  mode?: string | null | undefined;
};

/** @internal */
export const UpdateProfileRequestBody$outboundSchema: z.ZodType<
  UpdateProfileRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateProfileRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  countriesOfActivity: z.nullable(z.array(z.string())).optional(),
  businessCategory: z.nullable(z.string()).optional(),
  mode: z.nullable(ModeRequest$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileRequestBody$ {
  /** @deprecated use `UpdateProfileRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileRequestBody$inboundSchema;
  /** @deprecated use `UpdateProfileRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileRequestBody$outboundSchema;
  /** @deprecated use `UpdateProfileRequestBody$Outbound` instead. */
  export type Outbound = UpdateProfileRequestBody$Outbound;
}

export function updateProfileRequestBodyToJSON(
  updateProfileRequestBody: UpdateProfileRequestBody,
): string {
  return JSON.stringify(
    UpdateProfileRequestBody$outboundSchema.parse(updateProfileRequestBody),
  );
}

export function updateProfileRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateProfileRequest$inboundSchema: z.ZodType<
  UpdateProfileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateProfileRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateProfileRequest$Outbound = {
  id: string;
  RequestBody: UpdateProfileRequestBody$Outbound;
};

/** @internal */
export const UpdateProfileRequest$outboundSchema: z.ZodType<
  UpdateProfileRequest$Outbound,
  z.ZodTypeDef,
  UpdateProfileRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateProfileRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileRequest$ {
  /** @deprecated use `UpdateProfileRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileRequest$inboundSchema;
  /** @deprecated use `UpdateProfileRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileRequest$outboundSchema;
  /** @deprecated use `UpdateProfileRequest$Outbound` instead. */
  export type Outbound = UpdateProfileRequest$Outbound;
}

export function updateProfileRequestToJSON(
  updateProfileRequest: UpdateProfileRequest,
): string {
  return JSON.stringify(
    UpdateProfileRequest$outboundSchema.parse(updateProfileRequest),
  );
}

export function updateProfileRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileRequest' from JSON`,
  );
}

/** @internal */
export const UpdateProfileUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    UpdateProfileUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type UpdateProfileUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    UpdateProfileUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    UpdateProfileUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileUnprocessableEntityDocumentation$ {
  /** @deprecated use `UpdateProfileUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    UpdateProfileUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `UpdateProfileUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateProfileUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `UpdateProfileUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = UpdateProfileUnprocessableEntityDocumentation$Outbound;
}

export function updateProfileUnprocessableEntityDocumentationToJSON(
  updateProfileUnprocessableEntityDocumentation:
    UpdateProfileUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    UpdateProfileUnprocessableEntityDocumentation$outboundSchema.parse(
      updateProfileUnprocessableEntityDocumentation,
    ),
  );
}

export function updateProfileUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateProfileUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateProfileUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateProfileUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateProfileUnprocessableEntityLinks$inboundSchema: z.ZodType<
  UpdateProfileUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    UpdateProfileUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type UpdateProfileUnprocessableEntityLinks$Outbound = {
  documentation: UpdateProfileUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const UpdateProfileUnprocessableEntityLinks$outboundSchema: z.ZodType<
  UpdateProfileUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  UpdateProfileUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    UpdateProfileUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileUnprocessableEntityLinks$ {
  /** @deprecated use `UpdateProfileUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    UpdateProfileUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `UpdateProfileUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    UpdateProfileUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `UpdateProfileUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = UpdateProfileUnprocessableEntityLinks$Outbound;
}

export function updateProfileUnprocessableEntityLinksToJSON(
  updateProfileUnprocessableEntityLinks: UpdateProfileUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    UpdateProfileUnprocessableEntityLinks$outboundSchema.parse(
      updateProfileUnprocessableEntityLinks,
    ),
  );
}

export function updateProfileUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateProfileUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const UpdateProfileGoneDocumentation$inboundSchema: z.ZodType<
  UpdateProfileGoneDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileGoneDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileGoneDocumentation$outboundSchema: z.ZodType<
  UpdateProfileGoneDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateProfileGoneDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileGoneDocumentation$ {
  /** @deprecated use `UpdateProfileGoneDocumentation$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileGoneDocumentation$inboundSchema;
  /** @deprecated use `UpdateProfileGoneDocumentation$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileGoneDocumentation$outboundSchema;
  /** @deprecated use `UpdateProfileGoneDocumentation$Outbound` instead. */
  export type Outbound = UpdateProfileGoneDocumentation$Outbound;
}

export function updateProfileGoneDocumentationToJSON(
  updateProfileGoneDocumentation: UpdateProfileGoneDocumentation,
): string {
  return JSON.stringify(
    UpdateProfileGoneDocumentation$outboundSchema.parse(
      updateProfileGoneDocumentation,
    ),
  );
}

export function updateProfileGoneDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileGoneDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileGoneDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileGoneDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateProfileGoneLinks$inboundSchema: z.ZodType<
  UpdateProfileGoneLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => UpdateProfileGoneDocumentation$inboundSchema),
});

/** @internal */
export type UpdateProfileGoneLinks$Outbound = {
  documentation: UpdateProfileGoneDocumentation$Outbound;
};

/** @internal */
export const UpdateProfileGoneLinks$outboundSchema: z.ZodType<
  UpdateProfileGoneLinks$Outbound,
  z.ZodTypeDef,
  UpdateProfileGoneLinks
> = z.object({
  documentation: z.lazy(() => UpdateProfileGoneDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileGoneLinks$ {
  /** @deprecated use `UpdateProfileGoneLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileGoneLinks$inboundSchema;
  /** @deprecated use `UpdateProfileGoneLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileGoneLinks$outboundSchema;
  /** @deprecated use `UpdateProfileGoneLinks$Outbound` instead. */
  export type Outbound = UpdateProfileGoneLinks$Outbound;
}

export function updateProfileGoneLinksToJSON(
  updateProfileGoneLinks: UpdateProfileGoneLinks,
): string {
  return JSON.stringify(
    UpdateProfileGoneLinks$outboundSchema.parse(updateProfileGoneLinks),
  );
}

export function updateProfileGoneLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileGoneLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileGoneLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileGoneLinks' from JSON`,
  );
}

/** @internal */
export const UpdateProfileNotFoundDocumentation$inboundSchema: z.ZodType<
  UpdateProfileNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileNotFoundDocumentation$outboundSchema: z.ZodType<
  UpdateProfileNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateProfileNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileNotFoundDocumentation$ {
  /** @deprecated use `UpdateProfileNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileNotFoundDocumentation$inboundSchema;
  /** @deprecated use `UpdateProfileNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateProfileNotFoundDocumentation$outboundSchema;
  /** @deprecated use `UpdateProfileNotFoundDocumentation$Outbound` instead. */
  export type Outbound = UpdateProfileNotFoundDocumentation$Outbound;
}

export function updateProfileNotFoundDocumentationToJSON(
  updateProfileNotFoundDocumentation: UpdateProfileNotFoundDocumentation,
): string {
  return JSON.stringify(
    UpdateProfileNotFoundDocumentation$outboundSchema.parse(
      updateProfileNotFoundDocumentation,
    ),
  );
}

export function updateProfileNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateProfileNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateProfileNotFoundLinks$inboundSchema: z.ZodType<
  UpdateProfileNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => UpdateProfileNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type UpdateProfileNotFoundLinks$Outbound = {
  documentation: UpdateProfileNotFoundDocumentation$Outbound;
};

/** @internal */
export const UpdateProfileNotFoundLinks$outboundSchema: z.ZodType<
  UpdateProfileNotFoundLinks$Outbound,
  z.ZodTypeDef,
  UpdateProfileNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    UpdateProfileNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileNotFoundLinks$ {
  /** @deprecated use `UpdateProfileNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileNotFoundLinks$inboundSchema;
  /** @deprecated use `UpdateProfileNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileNotFoundLinks$outboundSchema;
  /** @deprecated use `UpdateProfileNotFoundLinks$Outbound` instead. */
  export type Outbound = UpdateProfileNotFoundLinks$Outbound;
}

export function updateProfileNotFoundLinksToJSON(
  updateProfileNotFoundLinks: UpdateProfileNotFoundLinks,
): string {
  return JSON.stringify(
    UpdateProfileNotFoundLinks$outboundSchema.parse(updateProfileNotFoundLinks),
  );
}

export function updateProfileNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const UpdateProfileModeResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateProfileModeResponse
> = z.nativeEnum(UpdateProfileModeResponse);

/** @internal */
export const UpdateProfileModeResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateProfileModeResponse
> = UpdateProfileModeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileModeResponse$ {
  /** @deprecated use `UpdateProfileModeResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileModeResponse$inboundSchema;
  /** @deprecated use `UpdateProfileModeResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileModeResponse$outboundSchema;
}

/** @internal */
export const UpdateProfileStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateProfileStatus
> = z.nativeEnum(UpdateProfileStatus);

/** @internal */
export const UpdateProfileStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateProfileStatus
> = UpdateProfileStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileStatus$ {
  /** @deprecated use `UpdateProfileStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileStatus$inboundSchema;
  /** @deprecated use `UpdateProfileStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileStatus$outboundSchema;
}

/** @internal */
export const UpdateProfileReviewStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateProfileReviewStatus
> = z.nativeEnum(UpdateProfileReviewStatus);

/** @internal */
export const UpdateProfileReviewStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateProfileReviewStatus
> = UpdateProfileReviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileReviewStatus$ {
  /** @deprecated use `UpdateProfileReviewStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileReviewStatus$inboundSchema;
  /** @deprecated use `UpdateProfileReviewStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileReviewStatus$outboundSchema;
}

/** @internal */
export const UpdateProfileReview$inboundSchema: z.ZodType<
  UpdateProfileReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: UpdateProfileReviewStatus$inboundSchema.optional(),
});

/** @internal */
export type UpdateProfileReview$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const UpdateProfileReview$outboundSchema: z.ZodType<
  UpdateProfileReview$Outbound,
  z.ZodTypeDef,
  UpdateProfileReview
> = z.object({
  status: UpdateProfileReviewStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileReview$ {
  /** @deprecated use `UpdateProfileReview$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileReview$inboundSchema;
  /** @deprecated use `UpdateProfileReview$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileReview$outboundSchema;
  /** @deprecated use `UpdateProfileReview$Outbound` instead. */
  export type Outbound = UpdateProfileReview$Outbound;
}

export function updateProfileReviewToJSON(
  updateProfileReview: UpdateProfileReview,
): string {
  return JSON.stringify(
    UpdateProfileReview$outboundSchema.parse(updateProfileReview),
  );
}

export function updateProfileReviewFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileReview' from JSON`,
  );
}

/** @internal */
export const UpdateProfileSelf$inboundSchema: z.ZodType<
  UpdateProfileSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileSelf$outboundSchema: z.ZodType<
  UpdateProfileSelf$Outbound,
  z.ZodTypeDef,
  UpdateProfileSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileSelf$ {
  /** @deprecated use `UpdateProfileSelf$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileSelf$inboundSchema;
  /** @deprecated use `UpdateProfileSelf$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileSelf$outboundSchema;
  /** @deprecated use `UpdateProfileSelf$Outbound` instead. */
  export type Outbound = UpdateProfileSelf$Outbound;
}

export function updateProfileSelfToJSON(
  updateProfileSelf: UpdateProfileSelf,
): string {
  return JSON.stringify(
    UpdateProfileSelf$outboundSchema.parse(updateProfileSelf),
  );
}

export function updateProfileSelfFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileSelf' from JSON`,
  );
}

/** @internal */
export const UpdateProfileDashboard$inboundSchema: z.ZodType<
  UpdateProfileDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileDashboard$outboundSchema: z.ZodType<
  UpdateProfileDashboard$Outbound,
  z.ZodTypeDef,
  UpdateProfileDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileDashboard$ {
  /** @deprecated use `UpdateProfileDashboard$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileDashboard$inboundSchema;
  /** @deprecated use `UpdateProfileDashboard$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileDashboard$outboundSchema;
  /** @deprecated use `UpdateProfileDashboard$Outbound` instead. */
  export type Outbound = UpdateProfileDashboard$Outbound;
}

export function updateProfileDashboardToJSON(
  updateProfileDashboard: UpdateProfileDashboard,
): string {
  return JSON.stringify(
    UpdateProfileDashboard$outboundSchema.parse(updateProfileDashboard),
  );
}

export function updateProfileDashboardFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileDashboard' from JSON`,
  );
}

/** @internal */
export const UpdateProfileChargebacks$inboundSchema: z.ZodType<
  UpdateProfileChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileChargebacks$outboundSchema: z.ZodType<
  UpdateProfileChargebacks$Outbound,
  z.ZodTypeDef,
  UpdateProfileChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileChargebacks$ {
  /** @deprecated use `UpdateProfileChargebacks$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileChargebacks$inboundSchema;
  /** @deprecated use `UpdateProfileChargebacks$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileChargebacks$outboundSchema;
  /** @deprecated use `UpdateProfileChargebacks$Outbound` instead. */
  export type Outbound = UpdateProfileChargebacks$Outbound;
}

export function updateProfileChargebacksToJSON(
  updateProfileChargebacks: UpdateProfileChargebacks,
): string {
  return JSON.stringify(
    UpdateProfileChargebacks$outboundSchema.parse(updateProfileChargebacks),
  );
}

export function updateProfileChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileChargebacks' from JSON`,
  );
}

/** @internal */
export const UpdateProfileMethods$inboundSchema: z.ZodType<
  UpdateProfileMethods,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileMethods$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileMethods$outboundSchema: z.ZodType<
  UpdateProfileMethods$Outbound,
  z.ZodTypeDef,
  UpdateProfileMethods
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileMethods$ {
  /** @deprecated use `UpdateProfileMethods$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileMethods$inboundSchema;
  /** @deprecated use `UpdateProfileMethods$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileMethods$outboundSchema;
  /** @deprecated use `UpdateProfileMethods$Outbound` instead. */
  export type Outbound = UpdateProfileMethods$Outbound;
}

export function updateProfileMethodsToJSON(
  updateProfileMethods: UpdateProfileMethods,
): string {
  return JSON.stringify(
    UpdateProfileMethods$outboundSchema.parse(updateProfileMethods),
  );
}

export function updateProfileMethodsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileMethods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileMethods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileMethods' from JSON`,
  );
}

/** @internal */
export const UpdateProfilePayments$inboundSchema: z.ZodType<
  UpdateProfilePayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfilePayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfilePayments$outboundSchema: z.ZodType<
  UpdateProfilePayments$Outbound,
  z.ZodTypeDef,
  UpdateProfilePayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfilePayments$ {
  /** @deprecated use `UpdateProfilePayments$inboundSchema` instead. */
  export const inboundSchema = UpdateProfilePayments$inboundSchema;
  /** @deprecated use `UpdateProfilePayments$outboundSchema` instead. */
  export const outboundSchema = UpdateProfilePayments$outboundSchema;
  /** @deprecated use `UpdateProfilePayments$Outbound` instead. */
  export type Outbound = UpdateProfilePayments$Outbound;
}

export function updateProfilePaymentsToJSON(
  updateProfilePayments: UpdateProfilePayments,
): string {
  return JSON.stringify(
    UpdateProfilePayments$outboundSchema.parse(updateProfilePayments),
  );
}

export function updateProfilePaymentsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfilePayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfilePayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfilePayments' from JSON`,
  );
}

/** @internal */
export const UpdateProfileRefunds$inboundSchema: z.ZodType<
  UpdateProfileRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileRefunds$outboundSchema: z.ZodType<
  UpdateProfileRefunds$Outbound,
  z.ZodTypeDef,
  UpdateProfileRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileRefunds$ {
  /** @deprecated use `UpdateProfileRefunds$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileRefunds$inboundSchema;
  /** @deprecated use `UpdateProfileRefunds$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileRefunds$outboundSchema;
  /** @deprecated use `UpdateProfileRefunds$Outbound` instead. */
  export type Outbound = UpdateProfileRefunds$Outbound;
}

export function updateProfileRefundsToJSON(
  updateProfileRefunds: UpdateProfileRefunds,
): string {
  return JSON.stringify(
    UpdateProfileRefunds$outboundSchema.parse(updateProfileRefunds),
  );
}

export function updateProfileRefundsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileRefunds' from JSON`,
  );
}

/** @internal */
export const UpdateProfileCheckoutPreviewUrl$inboundSchema: z.ZodType<
  UpdateProfileCheckoutPreviewUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileCheckoutPreviewUrl$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileCheckoutPreviewUrl$outboundSchema: z.ZodType<
  UpdateProfileCheckoutPreviewUrl$Outbound,
  z.ZodTypeDef,
  UpdateProfileCheckoutPreviewUrl
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileCheckoutPreviewUrl$ {
  /** @deprecated use `UpdateProfileCheckoutPreviewUrl$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileCheckoutPreviewUrl$inboundSchema;
  /** @deprecated use `UpdateProfileCheckoutPreviewUrl$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileCheckoutPreviewUrl$outboundSchema;
  /** @deprecated use `UpdateProfileCheckoutPreviewUrl$Outbound` instead. */
  export type Outbound = UpdateProfileCheckoutPreviewUrl$Outbound;
}

export function updateProfileCheckoutPreviewUrlToJSON(
  updateProfileCheckoutPreviewUrl: UpdateProfileCheckoutPreviewUrl,
): string {
  return JSON.stringify(
    UpdateProfileCheckoutPreviewUrl$outboundSchema.parse(
      updateProfileCheckoutPreviewUrl,
    ),
  );
}

export function updateProfileCheckoutPreviewUrlFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileCheckoutPreviewUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileCheckoutPreviewUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileCheckoutPreviewUrl' from JSON`,
  );
}

/** @internal */
export const UpdateProfileDocumentation$inboundSchema: z.ZodType<
  UpdateProfileDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateProfileDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateProfileDocumentation$outboundSchema: z.ZodType<
  UpdateProfileDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateProfileDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileDocumentation$ {
  /** @deprecated use `UpdateProfileDocumentation$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileDocumentation$inboundSchema;
  /** @deprecated use `UpdateProfileDocumentation$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileDocumentation$outboundSchema;
  /** @deprecated use `UpdateProfileDocumentation$Outbound` instead. */
  export type Outbound = UpdateProfileDocumentation$Outbound;
}

export function updateProfileDocumentationToJSON(
  updateProfileDocumentation: UpdateProfileDocumentation,
): string {
  return JSON.stringify(
    UpdateProfileDocumentation$outboundSchema.parse(updateProfileDocumentation),
  );
}

export function updateProfileDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateProfileLinks$inboundSchema: z.ZodType<
  UpdateProfileLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => UpdateProfileSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => UpdateProfileDashboard$inboundSchema).optional(),
  chargebacks: z.lazy(() => UpdateProfileChargebacks$inboundSchema).optional(),
  methods: z.lazy(() => UpdateProfileMethods$inboundSchema).optional(),
  payments: z.lazy(() => UpdateProfilePayments$inboundSchema).optional(),
  refunds: z.lazy(() => UpdateProfileRefunds$inboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() =>
    UpdateProfileCheckoutPreviewUrl$inboundSchema
  ).optional(),
  documentation: z.lazy(() => UpdateProfileDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateProfileLinks$Outbound = {
  self?: UpdateProfileSelf$Outbound | undefined;
  dashboard?: UpdateProfileDashboard$Outbound | undefined;
  chargebacks?: UpdateProfileChargebacks$Outbound | undefined;
  methods?: UpdateProfileMethods$Outbound | undefined;
  payments?: UpdateProfilePayments$Outbound | undefined;
  refunds?: UpdateProfileRefunds$Outbound | undefined;
  checkoutPreviewUrl?: UpdateProfileCheckoutPreviewUrl$Outbound | undefined;
  documentation?: UpdateProfileDocumentation$Outbound | undefined;
};

/** @internal */
export const UpdateProfileLinks$outboundSchema: z.ZodType<
  UpdateProfileLinks$Outbound,
  z.ZodTypeDef,
  UpdateProfileLinks
> = z.object({
  self: z.lazy(() => UpdateProfileSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => UpdateProfileDashboard$outboundSchema).optional(),
  chargebacks: z.lazy(() => UpdateProfileChargebacks$outboundSchema).optional(),
  methods: z.lazy(() => UpdateProfileMethods$outboundSchema).optional(),
  payments: z.lazy(() => UpdateProfilePayments$outboundSchema).optional(),
  refunds: z.lazy(() => UpdateProfileRefunds$outboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() =>
    UpdateProfileCheckoutPreviewUrl$outboundSchema
  ).optional(),
  documentation: z.lazy(() => UpdateProfileDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileLinks$ {
  /** @deprecated use `UpdateProfileLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileLinks$inboundSchema;
  /** @deprecated use `UpdateProfileLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileLinks$outboundSchema;
  /** @deprecated use `UpdateProfileLinks$Outbound` instead. */
  export type Outbound = UpdateProfileLinks$Outbound;
}

export function updateProfileLinksToJSON(
  updateProfileLinks: UpdateProfileLinks,
): string {
  return JSON.stringify(
    UpdateProfileLinks$outboundSchema.parse(updateProfileLinks),
  );
}

export function updateProfileLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileLinks' from JSON`,
  );
}

/** @internal */
export const UpdateProfileResponse$inboundSchema: z.ZodType<
  UpdateProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("profile"),
  id: z.string().optional(),
  mode: UpdateProfileModeResponse$inboundSchema.optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: UpdateProfileStatus$inboundSchema.optional(),
  review: z.lazy(() => UpdateProfileReview$inboundSchema).optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => UpdateProfileLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type UpdateProfileResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | undefined;
  countriesOfActivity?: Array<string> | undefined;
  businessCategory?: string | undefined;
  status?: string | undefined;
  review?: UpdateProfileReview$Outbound | undefined;
  createdAt?: string | undefined;
  _links?: UpdateProfileLinks$Outbound | undefined;
};

/** @internal */
export const UpdateProfileResponse$outboundSchema: z.ZodType<
  UpdateProfileResponse$Outbound,
  z.ZodTypeDef,
  UpdateProfileResponse
> = z.object({
  resource: z.string().default("profile"),
  id: z.string().optional(),
  mode: UpdateProfileModeResponse$outboundSchema.optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: UpdateProfileStatus$outboundSchema.optional(),
  review: z.lazy(() => UpdateProfileReview$outboundSchema).optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => UpdateProfileLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProfileResponse$ {
  /** @deprecated use `UpdateProfileResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateProfileResponse$inboundSchema;
  /** @deprecated use `UpdateProfileResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateProfileResponse$outboundSchema;
  /** @deprecated use `UpdateProfileResponse$Outbound` instead. */
  export type Outbound = UpdateProfileResponse$Outbound;
}

export function updateProfileResponseToJSON(
  updateProfileResponse: UpdateProfileResponse,
): string {
  return JSON.stringify(
    UpdateProfileResponse$outboundSchema.parse(updateProfileResponse),
  );
}

export function updateProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProfileResponse' from JSON`,
  );
}
