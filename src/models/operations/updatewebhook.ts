/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateWebhookRequestBody = {
  /**
   * A name that identifies the webhook.
   */
  name?: string | undefined;
  /**
   * The URL Mollie will send the events to. This URL must be publicly accessible.
   */
  url?: string | undefined;
  /**
   * The event's type
   */
  webhookEventTypes?: models.WebhookEventTypes | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type UpdateWebhookRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: UpdateWebhookRequestBody | undefined;
};

/** @internal */
export const UpdateWebhookRequestBody$inboundSchema: z.ZodType<
  UpdateWebhookRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  eventTypes: models.WebhookEventTypes$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "eventTypes": "webhookEventTypes",
  });
});

/** @internal */
export type UpdateWebhookRequestBody$Outbound = {
  name?: string | undefined;
  url?: string | undefined;
  eventTypes?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const UpdateWebhookRequestBody$outboundSchema: z.ZodType<
  UpdateWebhookRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateWebhookRequestBody
> = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  webhookEventTypes: models.WebhookEventTypes$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    webhookEventTypes: "eventTypes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequestBody$ {
  /** @deprecated use `UpdateWebhookRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookRequestBody$inboundSchema;
  /** @deprecated use `UpdateWebhookRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookRequestBody$outboundSchema;
  /** @deprecated use `UpdateWebhookRequestBody$Outbound` instead. */
  export type Outbound = UpdateWebhookRequestBody$Outbound;
}

export function updateWebhookRequestBodyToJSON(
  updateWebhookRequestBody: UpdateWebhookRequestBody,
): string {
  return JSON.stringify(
    UpdateWebhookRequestBody$outboundSchema.parse(updateWebhookRequestBody),
  );
}

export function updateWebhookRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookRequest$inboundSchema: z.ZodType<
  UpdateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => UpdateWebhookRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateWebhookRequest$Outbound = {
  id: string;
  "idempotency-key"?: string | undefined;
  RequestBody?: UpdateWebhookRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateWebhookRequest$outboundSchema: z.ZodType<
  UpdateWebhookRequest$Outbound,
  z.ZodTypeDef,
  UpdateWebhookRequest
> = z.object({
  id: z.string(),
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => UpdateWebhookRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequest$ {
  /** @deprecated use `UpdateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookRequest$inboundSchema;
  /** @deprecated use `UpdateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookRequest$outboundSchema;
  /** @deprecated use `UpdateWebhookRequest$Outbound` instead. */
  export type Outbound = UpdateWebhookRequest$Outbound;
}

export function updateWebhookRequestToJSON(
  updateWebhookRequest: UpdateWebhookRequest,
): string {
  return JSON.stringify(
    UpdateWebhookRequest$outboundSchema.parse(updateWebhookRequest),
  );
}

export function updateWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookRequest' from JSON`,
  );
}
