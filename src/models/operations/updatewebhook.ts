/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
 */
export const UpdateWebhookEventTypes = {
  PaymentLinkPaid: "payment-link.paid",
} as const;
/**
 * The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
 */
export type UpdateWebhookEventTypes = ClosedEnum<
  typeof UpdateWebhookEventTypes
>;

export type UpdateWebhookRequestBody = {
  /**
   * A name that identifies the webhook.
   */
  name?: string | undefined;
  /**
   * The URL Mollie will send the events to. This URL must be publicly accessible.
   */
  url?: string | undefined;
  /**
   * The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
   */
  eventTypes?: UpdateWebhookEventTypes | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type UpdateWebhookRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  requestBody?: UpdateWebhookRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateWebhookUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type UpdateWebhookUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateWebhookUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type UpdateWebhookNotFoundDocumentation = {
  href: string;
  type: string;
};

export type UpdateWebhookNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: UpdateWebhookNotFoundDocumentation;
};

/**
 * The webhook object.
 */
export type UpdateWebhookResponse = {
  /**
   * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this subscription.
   */
  id?: string | undefined;
  /**
   * The subscription's events destination.
   */
  url?: string | undefined;
  /**
   * The identifier uniquely referring to the profile that created the subscription.
   */
  profileId?: string | undefined;
  /**
   * The subscription's date time of creation.
   */
  createdAt?: string | undefined;
  /**
   * The subscription's name.
   */
  name?: string | undefined;
  /**
   * The events types that are subscribed.
   */
  eventTypes?: string | undefined;
  /**
   * The subscription's current status.
   *
   * @remarks
   *
   * Possible values: `enabled` `blocked` `disabled`
   */
  status?: string | undefined;
};

/** @internal */
export const UpdateWebhookEventTypes$inboundSchema: z.ZodNativeEnum<
  typeof UpdateWebhookEventTypes
> = z.nativeEnum(UpdateWebhookEventTypes);

/** @internal */
export const UpdateWebhookEventTypes$outboundSchema: z.ZodNativeEnum<
  typeof UpdateWebhookEventTypes
> = UpdateWebhookEventTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookEventTypes$ {
  /** @deprecated use `UpdateWebhookEventTypes$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookEventTypes$inboundSchema;
  /** @deprecated use `UpdateWebhookEventTypes$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookEventTypes$outboundSchema;
}

/** @internal */
export const UpdateWebhookRequestBody$inboundSchema: z.ZodType<
  UpdateWebhookRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  eventTypes: UpdateWebhookEventTypes$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateWebhookRequestBody$Outbound = {
  name?: string | undefined;
  url?: string | undefined;
  eventTypes?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const UpdateWebhookRequestBody$outboundSchema: z.ZodType<
  UpdateWebhookRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateWebhookRequestBody
> = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  eventTypes: UpdateWebhookEventTypes$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequestBody$ {
  /** @deprecated use `UpdateWebhookRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookRequestBody$inboundSchema;
  /** @deprecated use `UpdateWebhookRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookRequestBody$outboundSchema;
  /** @deprecated use `UpdateWebhookRequestBody$Outbound` instead. */
  export type Outbound = UpdateWebhookRequestBody$Outbound;
}

export function updateWebhookRequestBodyToJSON(
  updateWebhookRequestBody: UpdateWebhookRequestBody,
): string {
  return JSON.stringify(
    UpdateWebhookRequestBody$outboundSchema.parse(updateWebhookRequestBody),
  );
}

export function updateWebhookRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookRequest$inboundSchema: z.ZodType<
  UpdateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateWebhookRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateWebhookRequest$Outbound = {
  id: string;
  RequestBody?: UpdateWebhookRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateWebhookRequest$outboundSchema: z.ZodType<
  UpdateWebhookRequest$Outbound,
  z.ZodTypeDef,
  UpdateWebhookRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateWebhookRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequest$ {
  /** @deprecated use `UpdateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookRequest$inboundSchema;
  /** @deprecated use `UpdateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookRequest$outboundSchema;
  /** @deprecated use `UpdateWebhookRequest$Outbound` instead. */
  export type Outbound = UpdateWebhookRequest$Outbound;
}

export function updateWebhookRequestToJSON(
  updateWebhookRequest: UpdateWebhookRequest,
): string {
  return JSON.stringify(
    UpdateWebhookRequest$outboundSchema.parse(updateWebhookRequest),
  );
}

export function updateWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookRequest' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    UpdateWebhookUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type UpdateWebhookUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateWebhookUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    UpdateWebhookUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    UpdateWebhookUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookUnprocessableEntityDocumentation$ {
  /** @deprecated use `UpdateWebhookUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    UpdateWebhookUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `UpdateWebhookUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateWebhookUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `UpdateWebhookUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = UpdateWebhookUnprocessableEntityDocumentation$Outbound;
}

export function updateWebhookUnprocessableEntityDocumentationToJSON(
  updateWebhookUnprocessableEntityDocumentation:
    UpdateWebhookUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    UpdateWebhookUnprocessableEntityDocumentation$outboundSchema.parse(
      updateWebhookUnprocessableEntityDocumentation,
    ),
  );
}

export function updateWebhookUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateWebhookUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateWebhookUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateWebhookUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookUnprocessableEntityLinks$inboundSchema: z.ZodType<
  UpdateWebhookUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    UpdateWebhookUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type UpdateWebhookUnprocessableEntityLinks$Outbound = {
  documentation: UpdateWebhookUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const UpdateWebhookUnprocessableEntityLinks$outboundSchema: z.ZodType<
  UpdateWebhookUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  UpdateWebhookUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    UpdateWebhookUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookUnprocessableEntityLinks$ {
  /** @deprecated use `UpdateWebhookUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    UpdateWebhookUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `UpdateWebhookUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    UpdateWebhookUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `UpdateWebhookUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = UpdateWebhookUnprocessableEntityLinks$Outbound;
}

export function updateWebhookUnprocessableEntityLinksToJSON(
  updateWebhookUnprocessableEntityLinks: UpdateWebhookUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    UpdateWebhookUnprocessableEntityLinks$outboundSchema.parse(
      updateWebhookUnprocessableEntityLinks,
    ),
  );
}

export function updateWebhookUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateWebhookUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookNotFoundDocumentation$inboundSchema: z.ZodType<
  UpdateWebhookNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateWebhookNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const UpdateWebhookNotFoundDocumentation$outboundSchema: z.ZodType<
  UpdateWebhookNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  UpdateWebhookNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookNotFoundDocumentation$ {
  /** @deprecated use `UpdateWebhookNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookNotFoundDocumentation$inboundSchema;
  /** @deprecated use `UpdateWebhookNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    UpdateWebhookNotFoundDocumentation$outboundSchema;
  /** @deprecated use `UpdateWebhookNotFoundDocumentation$Outbound` instead. */
  export type Outbound = UpdateWebhookNotFoundDocumentation$Outbound;
}

export function updateWebhookNotFoundDocumentationToJSON(
  updateWebhookNotFoundDocumentation: UpdateWebhookNotFoundDocumentation,
): string {
  return JSON.stringify(
    UpdateWebhookNotFoundDocumentation$outboundSchema.parse(
      updateWebhookNotFoundDocumentation,
    ),
  );
}

export function updateWebhookNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateWebhookNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookNotFoundLinks$inboundSchema: z.ZodType<
  UpdateWebhookNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => UpdateWebhookNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type UpdateWebhookNotFoundLinks$Outbound = {
  documentation: UpdateWebhookNotFoundDocumentation$Outbound;
};

/** @internal */
export const UpdateWebhookNotFoundLinks$outboundSchema: z.ZodType<
  UpdateWebhookNotFoundLinks$Outbound,
  z.ZodTypeDef,
  UpdateWebhookNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    UpdateWebhookNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookNotFoundLinks$ {
  /** @deprecated use `UpdateWebhookNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookNotFoundLinks$inboundSchema;
  /** @deprecated use `UpdateWebhookNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookNotFoundLinks$outboundSchema;
  /** @deprecated use `UpdateWebhookNotFoundLinks$Outbound` instead. */
  export type Outbound = UpdateWebhookNotFoundLinks$Outbound;
}

export function updateWebhookNotFoundLinksToJSON(
  updateWebhookNotFoundLinks: UpdateWebhookNotFoundLinks,
): string {
  return JSON.stringify(
    UpdateWebhookNotFoundLinks$outboundSchema.parse(updateWebhookNotFoundLinks),
  );
}

export function updateWebhookNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookResponse$inboundSchema: z.ZodType<
  UpdateWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("webhook"),
  id: z.string().optional(),
  url: z.string().optional(),
  profileId: z.string().optional(),
  createdAt: z.string().optional(),
  name: z.string().optional(),
  eventTypes: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type UpdateWebhookResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  url?: string | undefined;
  profileId?: string | undefined;
  createdAt?: string | undefined;
  name?: string | undefined;
  eventTypes?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const UpdateWebhookResponse$outboundSchema: z.ZodType<
  UpdateWebhookResponse$Outbound,
  z.ZodTypeDef,
  UpdateWebhookResponse
> = z.object({
  resource: z.string().default("webhook"),
  id: z.string().optional(),
  url: z.string().optional(),
  profileId: z.string().optional(),
  createdAt: z.string().optional(),
  name: z.string().optional(),
  eventTypes: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookResponse$ {
  /** @deprecated use `UpdateWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookResponse$inboundSchema;
  /** @deprecated use `UpdateWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookResponse$outboundSchema;
  /** @deprecated use `UpdateWebhookResponse$Outbound` instead. */
  export type Outbound = UpdateWebhookResponse$Outbound;
}

export function updateWebhookResponseToJSON(
  updateWebhookResponse: UpdateWebhookResponse,
): string {
  return JSON.stringify(
    UpdateWebhookResponse$outboundSchema.parse(updateWebhookResponse),
  );
}

export function updateWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookResponse' from JSON`,
  );
}
