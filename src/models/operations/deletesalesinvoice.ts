/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeleteSalesInvoiceRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  deleteValuesSalesInvoice?: models.DeleteValuesSalesInvoice | undefined;
};

/** @internal */
export const DeleteSalesInvoiceRequest$inboundSchema: z.ZodType<
  DeleteSalesInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "idempotency-key": z.string().optional(),
  "delete-values-sales-invoice": models.DeleteValuesSalesInvoice$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "delete-values-sales-invoice": "deleteValuesSalesInvoice",
  });
});

/** @internal */
export type DeleteSalesInvoiceRequest$Outbound = {
  id: string;
  "idempotency-key"?: string | undefined;
  "delete-values-sales-invoice"?:
    | models.DeleteValuesSalesInvoice$Outbound
    | undefined;
};

/** @internal */
export const DeleteSalesInvoiceRequest$outboundSchema: z.ZodType<
  DeleteSalesInvoiceRequest$Outbound,
  z.ZodTypeDef,
  DeleteSalesInvoiceRequest
> = z.object({
  id: z.string(),
  idempotencyKey: z.string().optional(),
  deleteValuesSalesInvoice: models.DeleteValuesSalesInvoice$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    deleteValuesSalesInvoice: "delete-values-sales-invoice",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSalesInvoiceRequest$ {
  /** @deprecated use `DeleteSalesInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSalesInvoiceRequest$inboundSchema;
  /** @deprecated use `DeleteSalesInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSalesInvoiceRequest$outboundSchema;
  /** @deprecated use `DeleteSalesInvoiceRequest$Outbound` instead. */
  export type Outbound = DeleteSalesInvoiceRequest$Outbound;
}

export function deleteSalesInvoiceRequestToJSON(
  deleteSalesInvoiceRequest: DeleteSalesInvoiceRequest,
): string {
  return JSON.stringify(
    DeleteSalesInvoiceRequest$outboundSchema.parse(deleteSalesInvoiceRequest),
  );
}

export function deleteSalesInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSalesInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSalesInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSalesInvoiceRequest' from JSON`,
  );
}
