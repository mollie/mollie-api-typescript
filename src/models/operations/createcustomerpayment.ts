/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCustomerPaymentRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  paymentRequest?: models.PaymentRequest | undefined;
};

/** @internal */
export const CreateCustomerPaymentRequest$inboundSchema: z.ZodType<
  CreateCustomerPaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  "payment-request": models.PaymentRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "payment-request": "paymentRequest",
  });
});

/** @internal */
export type CreateCustomerPaymentRequest$Outbound = {
  customerId: string;
  "payment-request"?: models.PaymentRequest$Outbound | undefined;
};

/** @internal */
export const CreateCustomerPaymentRequest$outboundSchema: z.ZodType<
  CreateCustomerPaymentRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerPaymentRequest
> = z.object({
  customerId: z.string(),
  paymentRequest: models.PaymentRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    paymentRequest: "payment-request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerPaymentRequest$ {
  /** @deprecated use `CreateCustomerPaymentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerPaymentRequest$inboundSchema;
  /** @deprecated use `CreateCustomerPaymentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerPaymentRequest$outboundSchema;
  /** @deprecated use `CreateCustomerPaymentRequest$Outbound` instead. */
  export type Outbound = CreateCustomerPaymentRequest$Outbound;
}

export function createCustomerPaymentRequestToJSON(
  createCustomerPaymentRequest: CreateCustomerPaymentRequest,
): string {
  return JSON.stringify(
    CreateCustomerPaymentRequest$outboundSchema.parse(
      createCustomerPaymentRequest,
    ),
  );
}

export function createCustomerPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerPaymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerPaymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerPaymentRequest' from JSON`,
  );
}
