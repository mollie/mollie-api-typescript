/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional resources via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export const GetCaptureEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional resources via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export type GetCaptureEmbed = ClosedEnum<typeof GetCaptureEmbed>;

export type GetCaptureRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide the ID of the related capture.
   */
  captureId: string;
  /**
   * This endpoint allows you to embed additional resources via the
   *
   * @remarks
   * `embed` query string parameter.
   */
  embed?: GetCaptureEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetCaptureNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetCaptureNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetCaptureNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetCaptureMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetCaptureMode = ClosedEnum<typeof GetCaptureMode>;

/**
 * The amount captured. If no amount is provided, the full authorized amount is captured.
 */
export type GetCaptureAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the
 *
 * @remarks
 * currency your account is settled in.
 *
 * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
 * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
 * instead.
 */
export type GetCaptureSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The capture's status.
 */
export const GetCaptureStatus = {
  Pending: "pending",
  Succeeded: "succeeded",
  Failed: "failed",
} as const;
/**
 * The capture's status.
 */
export type GetCaptureStatus = ClosedEnum<typeof GetCaptureStatus>;

export type GetCaptureMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type GetCaptureMetadataUnion =
  | GetCaptureMetadata
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetCaptureSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this capture belongs to.
 */
export type GetCapturePayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
 *
 * @remarks
 * not yet settled.
 */
export type GetCaptureSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
 *
 * @remarks
 * it isn't associated with a shipment.
 */
export type GetCaptureShipment = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetCaptureDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetCaptureLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetCaptureSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this capture belongs to.
   */
  payment: GetCapturePayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
   *
   * @remarks
   * not yet settled.
   */
  settlement?: GetCaptureSettlement | null | undefined;
  /**
   * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
   *
   * @remarks
   * it isn't associated with a shipment.
   */
  shipment?: GetCaptureShipment | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: GetCaptureDocumentation;
};

/**
 * The capture object.
 */
export type GetCaptureResponse = {
  /**
   * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: GetCaptureMode;
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * The amount captured. If no amount is provided, the full authorized amount is captured.
   */
  amount: GetCaptureAmount | null;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the
   *
   * @remarks
   * currency your account is settled in.
   *
   * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
   * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
   * instead.
   */
  settlementAmount?: GetCaptureSettlementAmount | null | undefined;
  /**
   * The capture's status.
   */
  status: GetCaptureStatus;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: GetCaptureMetadata | string | Array<string> | null | undefined;
  /**
   * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
   *
   * @remarks
   * `shp_gNapNy9qQTUFZYnCrCF7J`.
   */
  shipmentId?: string | null | undefined;
  /**
   * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
   *
   * @remarks
   * is omitted if the capture is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetCaptureLinks;
};

/** @internal */
export const GetCaptureEmbed$inboundSchema: z.ZodNativeEnum<
  typeof GetCaptureEmbed
> = z.nativeEnum(GetCaptureEmbed);

/** @internal */
export const GetCaptureEmbed$outboundSchema: z.ZodNativeEnum<
  typeof GetCaptureEmbed
> = GetCaptureEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureEmbed$ {
  /** @deprecated use `GetCaptureEmbed$inboundSchema` instead. */
  export const inboundSchema = GetCaptureEmbed$inboundSchema;
  /** @deprecated use `GetCaptureEmbed$outboundSchema` instead. */
  export const outboundSchema = GetCaptureEmbed$outboundSchema;
}

/** @internal */
export const GetCaptureRequest$inboundSchema: z.ZodType<
  GetCaptureRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  captureId: z.string(),
  embed: GetCaptureEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetCaptureRequest$Outbound = {
  paymentId: string;
  captureId: string;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetCaptureRequest$outboundSchema: z.ZodType<
  GetCaptureRequest$Outbound,
  z.ZodTypeDef,
  GetCaptureRequest
> = z.object({
  paymentId: z.string(),
  captureId: z.string(),
  embed: GetCaptureEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureRequest$ {
  /** @deprecated use `GetCaptureRequest$inboundSchema` instead. */
  export const inboundSchema = GetCaptureRequest$inboundSchema;
  /** @deprecated use `GetCaptureRequest$outboundSchema` instead. */
  export const outboundSchema = GetCaptureRequest$outboundSchema;
  /** @deprecated use `GetCaptureRequest$Outbound` instead. */
  export type Outbound = GetCaptureRequest$Outbound;
}

export function getCaptureRequestToJSON(
  getCaptureRequest: GetCaptureRequest,
): string {
  return JSON.stringify(
    GetCaptureRequest$outboundSchema.parse(getCaptureRequest),
  );
}

export function getCaptureRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureRequest' from JSON`,
  );
}

/** @internal */
export const GetCaptureNotFoundDocumentation$inboundSchema: z.ZodType<
  GetCaptureNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetCaptureNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetCaptureNotFoundDocumentation$outboundSchema: z.ZodType<
  GetCaptureNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetCaptureNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureNotFoundDocumentation$ {
  /** @deprecated use `GetCaptureNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetCaptureNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetCaptureNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetCaptureNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetCaptureNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetCaptureNotFoundDocumentation$Outbound;
}

export function getCaptureNotFoundDocumentationToJSON(
  getCaptureNotFoundDocumentation: GetCaptureNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetCaptureNotFoundDocumentation$outboundSchema.parse(
      getCaptureNotFoundDocumentation,
    ),
  );
}

export function getCaptureNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetCaptureNotFoundLinks$inboundSchema: z.ZodType<
  GetCaptureNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetCaptureNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetCaptureNotFoundLinks$Outbound = {
  documentation: GetCaptureNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetCaptureNotFoundLinks$outboundSchema: z.ZodType<
  GetCaptureNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetCaptureNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetCaptureNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureNotFoundLinks$ {
  /** @deprecated use `GetCaptureNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetCaptureNotFoundLinks$inboundSchema;
  /** @deprecated use `GetCaptureNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetCaptureNotFoundLinks$outboundSchema;
  /** @deprecated use `GetCaptureNotFoundLinks$Outbound` instead. */
  export type Outbound = GetCaptureNotFoundLinks$Outbound;
}

export function getCaptureNotFoundLinksToJSON(
  getCaptureNotFoundLinks: GetCaptureNotFoundLinks,
): string {
  return JSON.stringify(
    GetCaptureNotFoundLinks$outboundSchema.parse(getCaptureNotFoundLinks),
  );
}

export function getCaptureNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetCaptureMode$inboundSchema: z.ZodNativeEnum<
  typeof GetCaptureMode
> = z.nativeEnum(GetCaptureMode);

/** @internal */
export const GetCaptureMode$outboundSchema: z.ZodNativeEnum<
  typeof GetCaptureMode
> = GetCaptureMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureMode$ {
  /** @deprecated use `GetCaptureMode$inboundSchema` instead. */
  export const inboundSchema = GetCaptureMode$inboundSchema;
  /** @deprecated use `GetCaptureMode$outboundSchema` instead. */
  export const outboundSchema = GetCaptureMode$outboundSchema;
}

/** @internal */
export const GetCaptureAmount$inboundSchema: z.ZodType<
  GetCaptureAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetCaptureAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetCaptureAmount$outboundSchema: z.ZodType<
  GetCaptureAmount$Outbound,
  z.ZodTypeDef,
  GetCaptureAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureAmount$ {
  /** @deprecated use `GetCaptureAmount$inboundSchema` instead. */
  export const inboundSchema = GetCaptureAmount$inboundSchema;
  /** @deprecated use `GetCaptureAmount$outboundSchema` instead. */
  export const outboundSchema = GetCaptureAmount$outboundSchema;
  /** @deprecated use `GetCaptureAmount$Outbound` instead. */
  export type Outbound = GetCaptureAmount$Outbound;
}

export function getCaptureAmountToJSON(
  getCaptureAmount: GetCaptureAmount,
): string {
  return JSON.stringify(
    GetCaptureAmount$outboundSchema.parse(getCaptureAmount),
  );
}

export function getCaptureAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureAmount' from JSON`,
  );
}

/** @internal */
export const GetCaptureSettlementAmount$inboundSchema: z.ZodType<
  GetCaptureSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetCaptureSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetCaptureSettlementAmount$outboundSchema: z.ZodType<
  GetCaptureSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetCaptureSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureSettlementAmount$ {
  /** @deprecated use `GetCaptureSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetCaptureSettlementAmount$inboundSchema;
  /** @deprecated use `GetCaptureSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetCaptureSettlementAmount$outboundSchema;
  /** @deprecated use `GetCaptureSettlementAmount$Outbound` instead. */
  export type Outbound = GetCaptureSettlementAmount$Outbound;
}

export function getCaptureSettlementAmountToJSON(
  getCaptureSettlementAmount: GetCaptureSettlementAmount,
): string {
  return JSON.stringify(
    GetCaptureSettlementAmount$outboundSchema.parse(getCaptureSettlementAmount),
  );
}

export function getCaptureSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetCaptureStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetCaptureStatus
> = z.nativeEnum(GetCaptureStatus);

/** @internal */
export const GetCaptureStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetCaptureStatus
> = GetCaptureStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureStatus$ {
  /** @deprecated use `GetCaptureStatus$inboundSchema` instead. */
  export const inboundSchema = GetCaptureStatus$inboundSchema;
  /** @deprecated use `GetCaptureStatus$outboundSchema` instead. */
  export const outboundSchema = GetCaptureStatus$outboundSchema;
}

/** @internal */
export const GetCaptureMetadata$inboundSchema: z.ZodType<
  GetCaptureMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetCaptureMetadata$Outbound = {};

/** @internal */
export const GetCaptureMetadata$outboundSchema: z.ZodType<
  GetCaptureMetadata$Outbound,
  z.ZodTypeDef,
  GetCaptureMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureMetadata$ {
  /** @deprecated use `GetCaptureMetadata$inboundSchema` instead. */
  export const inboundSchema = GetCaptureMetadata$inboundSchema;
  /** @deprecated use `GetCaptureMetadata$outboundSchema` instead. */
  export const outboundSchema = GetCaptureMetadata$outboundSchema;
  /** @deprecated use `GetCaptureMetadata$Outbound` instead. */
  export type Outbound = GetCaptureMetadata$Outbound;
}

export function getCaptureMetadataToJSON(
  getCaptureMetadata: GetCaptureMetadata,
): string {
  return JSON.stringify(
    GetCaptureMetadata$outboundSchema.parse(getCaptureMetadata),
  );
}

export function getCaptureMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureMetadata' from JSON`,
  );
}

/** @internal */
export const GetCaptureMetadataUnion$inboundSchema: z.ZodType<
  GetCaptureMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetCaptureMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type GetCaptureMetadataUnion$Outbound =
  | GetCaptureMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const GetCaptureMetadataUnion$outboundSchema: z.ZodType<
  GetCaptureMetadataUnion$Outbound,
  z.ZodTypeDef,
  GetCaptureMetadataUnion
> = z.union([
  z.lazy(() => GetCaptureMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureMetadataUnion$ {
  /** @deprecated use `GetCaptureMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = GetCaptureMetadataUnion$inboundSchema;
  /** @deprecated use `GetCaptureMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = GetCaptureMetadataUnion$outboundSchema;
  /** @deprecated use `GetCaptureMetadataUnion$Outbound` instead. */
  export type Outbound = GetCaptureMetadataUnion$Outbound;
}

export function getCaptureMetadataUnionToJSON(
  getCaptureMetadataUnion: GetCaptureMetadataUnion,
): string {
  return JSON.stringify(
    GetCaptureMetadataUnion$outboundSchema.parse(getCaptureMetadataUnion),
  );
}

export function getCaptureMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureMetadataUnion' from JSON`,
  );
}

/** @internal */
export const GetCaptureSelf$inboundSchema: z.ZodType<
  GetCaptureSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetCaptureSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetCaptureSelf$outboundSchema: z.ZodType<
  GetCaptureSelf$Outbound,
  z.ZodTypeDef,
  GetCaptureSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureSelf$ {
  /** @deprecated use `GetCaptureSelf$inboundSchema` instead. */
  export const inboundSchema = GetCaptureSelf$inboundSchema;
  /** @deprecated use `GetCaptureSelf$outboundSchema` instead. */
  export const outboundSchema = GetCaptureSelf$outboundSchema;
  /** @deprecated use `GetCaptureSelf$Outbound` instead. */
  export type Outbound = GetCaptureSelf$Outbound;
}

export function getCaptureSelfToJSON(getCaptureSelf: GetCaptureSelf): string {
  return JSON.stringify(GetCaptureSelf$outboundSchema.parse(getCaptureSelf));
}

export function getCaptureSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureSelf' from JSON`,
  );
}

/** @internal */
export const GetCapturePayment$inboundSchema: z.ZodType<
  GetCapturePayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetCapturePayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetCapturePayment$outboundSchema: z.ZodType<
  GetCapturePayment$Outbound,
  z.ZodTypeDef,
  GetCapturePayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCapturePayment$ {
  /** @deprecated use `GetCapturePayment$inboundSchema` instead. */
  export const inboundSchema = GetCapturePayment$inboundSchema;
  /** @deprecated use `GetCapturePayment$outboundSchema` instead. */
  export const outboundSchema = GetCapturePayment$outboundSchema;
  /** @deprecated use `GetCapturePayment$Outbound` instead. */
  export type Outbound = GetCapturePayment$Outbound;
}

export function getCapturePaymentToJSON(
  getCapturePayment: GetCapturePayment,
): string {
  return JSON.stringify(
    GetCapturePayment$outboundSchema.parse(getCapturePayment),
  );
}

export function getCapturePaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetCapturePayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCapturePayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCapturePayment' from JSON`,
  );
}

/** @internal */
export const GetCaptureSettlement$inboundSchema: z.ZodType<
  GetCaptureSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetCaptureSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetCaptureSettlement$outboundSchema: z.ZodType<
  GetCaptureSettlement$Outbound,
  z.ZodTypeDef,
  GetCaptureSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureSettlement$ {
  /** @deprecated use `GetCaptureSettlement$inboundSchema` instead. */
  export const inboundSchema = GetCaptureSettlement$inboundSchema;
  /** @deprecated use `GetCaptureSettlement$outboundSchema` instead. */
  export const outboundSchema = GetCaptureSettlement$outboundSchema;
  /** @deprecated use `GetCaptureSettlement$Outbound` instead. */
  export type Outbound = GetCaptureSettlement$Outbound;
}

export function getCaptureSettlementToJSON(
  getCaptureSettlement: GetCaptureSettlement,
): string {
  return JSON.stringify(
    GetCaptureSettlement$outboundSchema.parse(getCaptureSettlement),
  );
}

export function getCaptureSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureSettlement' from JSON`,
  );
}

/** @internal */
export const GetCaptureShipment$inboundSchema: z.ZodType<
  GetCaptureShipment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetCaptureShipment$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetCaptureShipment$outboundSchema: z.ZodType<
  GetCaptureShipment$Outbound,
  z.ZodTypeDef,
  GetCaptureShipment
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureShipment$ {
  /** @deprecated use `GetCaptureShipment$inboundSchema` instead. */
  export const inboundSchema = GetCaptureShipment$inboundSchema;
  /** @deprecated use `GetCaptureShipment$outboundSchema` instead. */
  export const outboundSchema = GetCaptureShipment$outboundSchema;
  /** @deprecated use `GetCaptureShipment$Outbound` instead. */
  export type Outbound = GetCaptureShipment$Outbound;
}

export function getCaptureShipmentToJSON(
  getCaptureShipment: GetCaptureShipment,
): string {
  return JSON.stringify(
    GetCaptureShipment$outboundSchema.parse(getCaptureShipment),
  );
}

export function getCaptureShipmentFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureShipment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureShipment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureShipment' from JSON`,
  );
}

/** @internal */
export const GetCaptureDocumentation$inboundSchema: z.ZodType<
  GetCaptureDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetCaptureDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetCaptureDocumentation$outboundSchema: z.ZodType<
  GetCaptureDocumentation$Outbound,
  z.ZodTypeDef,
  GetCaptureDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureDocumentation$ {
  /** @deprecated use `GetCaptureDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetCaptureDocumentation$inboundSchema;
  /** @deprecated use `GetCaptureDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetCaptureDocumentation$outboundSchema;
  /** @deprecated use `GetCaptureDocumentation$Outbound` instead. */
  export type Outbound = GetCaptureDocumentation$Outbound;
}

export function getCaptureDocumentationToJSON(
  getCaptureDocumentation: GetCaptureDocumentation,
): string {
  return JSON.stringify(
    GetCaptureDocumentation$outboundSchema.parse(getCaptureDocumentation),
  );
}

export function getCaptureDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureDocumentation' from JSON`,
  );
}

/** @internal */
export const GetCaptureLinks$inboundSchema: z.ZodType<
  GetCaptureLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetCaptureSelf$inboundSchema),
  payment: z.lazy(() => GetCapturePayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => GetCaptureSettlement$inboundSchema))
    .optional(),
  shipment: z.nullable(z.lazy(() => GetCaptureShipment$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetCaptureDocumentation$inboundSchema),
});

/** @internal */
export type GetCaptureLinks$Outbound = {
  self: GetCaptureSelf$Outbound;
  payment: GetCapturePayment$Outbound;
  settlement?: GetCaptureSettlement$Outbound | null | undefined;
  shipment?: GetCaptureShipment$Outbound | null | undefined;
  documentation: GetCaptureDocumentation$Outbound;
};

/** @internal */
export const GetCaptureLinks$outboundSchema: z.ZodType<
  GetCaptureLinks$Outbound,
  z.ZodTypeDef,
  GetCaptureLinks
> = z.object({
  self: z.lazy(() => GetCaptureSelf$outboundSchema),
  payment: z.lazy(() => GetCapturePayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => GetCaptureSettlement$outboundSchema))
    .optional(),
  shipment: z.nullable(z.lazy(() => GetCaptureShipment$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetCaptureDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureLinks$ {
  /** @deprecated use `GetCaptureLinks$inboundSchema` instead. */
  export const inboundSchema = GetCaptureLinks$inboundSchema;
  /** @deprecated use `GetCaptureLinks$outboundSchema` instead. */
  export const outboundSchema = GetCaptureLinks$outboundSchema;
  /** @deprecated use `GetCaptureLinks$Outbound` instead. */
  export type Outbound = GetCaptureLinks$Outbound;
}

export function getCaptureLinksToJSON(
  getCaptureLinks: GetCaptureLinks,
): string {
  return JSON.stringify(GetCaptureLinks$outboundSchema.parse(getCaptureLinks));
}

export function getCaptureLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureLinks' from JSON`,
  );
}

/** @internal */
export const GetCaptureResponse$inboundSchema: z.ZodType<
  GetCaptureResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetCaptureMode$inboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => GetCaptureAmount$inboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => GetCaptureSettlementAmount$inboundSchema),
  ).optional(),
  status: GetCaptureStatus$inboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetCaptureMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  _links: z.lazy(() => GetCaptureLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetCaptureResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description?: string | undefined;
  amount: GetCaptureAmount$Outbound | null;
  settlementAmount?: GetCaptureSettlementAmount$Outbound | null | undefined;
  status: string;
  metadata?:
    | GetCaptureMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId: string;
  shipmentId?: string | null | undefined;
  settlementId?: string | null | undefined;
  createdAt: string;
  _links: GetCaptureLinks$Outbound;
};

/** @internal */
export const GetCaptureResponse$outboundSchema: z.ZodType<
  GetCaptureResponse$Outbound,
  z.ZodTypeDef,
  GetCaptureResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetCaptureMode$outboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => GetCaptureAmount$outboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => GetCaptureSettlementAmount$outboundSchema),
  ).optional(),
  status: GetCaptureStatus$outboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetCaptureMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  links: z.lazy(() => GetCaptureLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCaptureResponse$ {
  /** @deprecated use `GetCaptureResponse$inboundSchema` instead. */
  export const inboundSchema = GetCaptureResponse$inboundSchema;
  /** @deprecated use `GetCaptureResponse$outboundSchema` instead. */
  export const outboundSchema = GetCaptureResponse$outboundSchema;
  /** @deprecated use `GetCaptureResponse$Outbound` instead. */
  export type Outbound = GetCaptureResponse$Outbound;
}

export function getCaptureResponseToJSON(
  getCaptureResponse: GetCaptureResponse,
): string {
  return JSON.stringify(
    GetCaptureResponse$outboundSchema.parse(getCaptureResponse),
  );
}

export function getCaptureResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCaptureResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCaptureResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCaptureResponse' from JSON`,
  );
}
