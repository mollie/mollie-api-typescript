/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional resources via the `embed` query string parameter.
 */
export const GetSettlementCapturesEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional resources via the `embed` query string parameter.
 */
export type GetSettlementCapturesEmbed = ClosedEnum<
  typeof GetSettlementCapturesEmbed
>;

export type GetSettlementCapturesRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to embed additional resources via the `embed` query string parameter.
   */
  embed?: GetSettlementCapturesEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementCapturesNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementCapturesNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementCapturesNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementCapturesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementCapturesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementCapturesBadRequestDocumentation;
};

/**
 * The amount captured. If no amount is provided, the full authorized amount is captured.
 */
export type GetSettlementCapturesAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type GetSettlementCapturesSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetSettlementCapturesMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type GetSettlementCapturesMetadataUnion =
  | GetSettlementCapturesMetadata
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementCapturesCaptureSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this capture belongs to.
 */
export type GetSettlementCapturesPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if not yet settled.
 */
export type GetSettlementCapturesSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if it isn't associated with a shipment.
 */
export type GetSettlementCapturesShipment = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementCapturesCaptureDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementCapturesCaptureLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetSettlementCapturesCaptureSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this capture belongs to.
   */
  payment: GetSettlementCapturesPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if not yet settled.
   */
  settlement?: GetSettlementCapturesSettlement | null | undefined;
  /**
   * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if it isn't associated with a shipment.
   */
  shipment?: GetSettlementCapturesShipment | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: GetSettlementCapturesCaptureDocumentation;
};

export type GetSettlementCapturesCapture = {
  /**
   * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * The amount captured. If no amount is provided, the full authorized amount is captured.
   */
  amount: GetSettlementCapturesAmount | null;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: GetSettlementCapturesSettlementAmount | null | undefined;
  /**
   * The capture's status.
   *
   * @remarks
   *
   * Possible values: `pending` `succeeded` `failed`
   */
  status: string;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | GetSettlementCapturesMetadata
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example: `shp_gNapNy9qQTUFZYnCrCF7J`.
   */
  shipmentId?: string | null | undefined;
  /**
   * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the capture is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetSettlementCapturesCaptureLinks;
};

export type GetSettlementCapturesEmbedded = {
  /**
   * An array of capture objects.
   */
  captures?: Array<GetSettlementCapturesCapture> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type GetSettlementCapturesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type GetSettlementCapturesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type GetSettlementCapturesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementCapturesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementCapturesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: GetSettlementCapturesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: GetSettlementCapturesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: GetSettlementCapturesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSettlementCapturesDocumentation | undefined;
};

/**
 * A list of capture objects.
 */
export type GetSettlementCapturesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: GetSettlementCapturesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSettlementCapturesLinks | undefined;
};

/** @internal */
export const GetSettlementCapturesEmbed$inboundSchema: z.ZodNativeEnum<
  typeof GetSettlementCapturesEmbed
> = z.nativeEnum(GetSettlementCapturesEmbed);

/** @internal */
export const GetSettlementCapturesEmbed$outboundSchema: z.ZodNativeEnum<
  typeof GetSettlementCapturesEmbed
> = GetSettlementCapturesEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesEmbed$ {
  /** @deprecated use `GetSettlementCapturesEmbed$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesEmbed$inboundSchema;
  /** @deprecated use `GetSettlementCapturesEmbed$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesEmbed$outboundSchema;
}

/** @internal */
export const GetSettlementCapturesRequest$inboundSchema: z.ZodType<
  GetSettlementCapturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: GetSettlementCapturesEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetSettlementCapturesRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit: number | null;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetSettlementCapturesRequest$outboundSchema: z.ZodType<
  GetSettlementCapturesRequest$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: GetSettlementCapturesEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesRequest$ {
  /** @deprecated use `GetSettlementCapturesRequest$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesRequest$inboundSchema;
  /** @deprecated use `GetSettlementCapturesRequest$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesRequest$outboundSchema;
  /** @deprecated use `GetSettlementCapturesRequest$Outbound` instead. */
  export type Outbound = GetSettlementCapturesRequest$Outbound;
}

export function getSettlementCapturesRequestToJSON(
  getSettlementCapturesRequest: GetSettlementCapturesRequest,
): string {
  return JSON.stringify(
    GetSettlementCapturesRequest$outboundSchema.parse(
      getSettlementCapturesRequest,
    ),
  );
}

export function getSettlementCapturesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesRequest' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesNotFoundDocumentation$inboundSchema:
  z.ZodType<GetSettlementCapturesNotFoundDocumentation, z.ZodTypeDef, unknown> =
    z.object({
      href: z.string(),
      type: z.string(),
    });

/** @internal */
export type GetSettlementCapturesNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCapturesNotFoundDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementCapturesNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementCapturesNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesNotFoundDocumentation$ {
  /** @deprecated use `GetSettlementCapturesNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementCapturesNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementCapturesNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementCapturesNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementCapturesNotFoundDocumentation$Outbound;
}

export function getSettlementCapturesNotFoundDocumentationToJSON(
  getSettlementCapturesNotFoundDocumentation:
    GetSettlementCapturesNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetSettlementCapturesNotFoundDocumentation$outboundSchema.parse(
      getSettlementCapturesNotFoundDocumentation,
    ),
  );
}

export function getSettlementCapturesNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementCapturesNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementCapturesNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesNotFoundLinks$inboundSchema: z.ZodType<
  GetSettlementCapturesNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementCapturesNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementCapturesNotFoundLinks$Outbound = {
  documentation: GetSettlementCapturesNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetSettlementCapturesNotFoundLinks$outboundSchema: z.ZodType<
  GetSettlementCapturesNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementCapturesNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesNotFoundLinks$ {
  /** @deprecated use `GetSettlementCapturesNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesNotFoundLinks$inboundSchema;
  /** @deprecated use `GetSettlementCapturesNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesNotFoundLinks$outboundSchema;
  /** @deprecated use `GetSettlementCapturesNotFoundLinks$Outbound` instead. */
  export type Outbound = GetSettlementCapturesNotFoundLinks$Outbound;
}

export function getSettlementCapturesNotFoundLinksToJSON(
  getSettlementCapturesNotFoundLinks: GetSettlementCapturesNotFoundLinks,
): string {
  return JSON.stringify(
    GetSettlementCapturesNotFoundLinks$outboundSchema.parse(
      getSettlementCapturesNotFoundLinks,
    ),
  );
}

export function getSettlementCapturesNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesBadRequestDocumentation$inboundSchema:
  z.ZodType<
    GetSettlementCapturesBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetSettlementCapturesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCapturesBadRequestDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementCapturesBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementCapturesBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesBadRequestDocumentation$ {
  /** @deprecated use `GetSettlementCapturesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementCapturesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementCapturesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementCapturesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementCapturesBadRequestDocumentation$Outbound;
}

export function getSettlementCapturesBadRequestDocumentationToJSON(
  getSettlementCapturesBadRequestDocumentation:
    GetSettlementCapturesBadRequestDocumentation,
): string {
  return JSON.stringify(
    GetSettlementCapturesBadRequestDocumentation$outboundSchema.parse(
      getSettlementCapturesBadRequestDocumentation,
    ),
  );
}

export function getSettlementCapturesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementCapturesBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementCapturesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesBadRequestLinks$inboundSchema: z.ZodType<
  GetSettlementCapturesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementCapturesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementCapturesBadRequestLinks$Outbound = {
  documentation: GetSettlementCapturesBadRequestDocumentation$Outbound;
};

/** @internal */
export const GetSettlementCapturesBadRequestLinks$outboundSchema: z.ZodType<
  GetSettlementCapturesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementCapturesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesBadRequestLinks$ {
  /** @deprecated use `GetSettlementCapturesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementCapturesBadRequestLinks$inboundSchema;
  /** @deprecated use `GetSettlementCapturesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesBadRequestLinks$outboundSchema;
  /** @deprecated use `GetSettlementCapturesBadRequestLinks$Outbound` instead. */
  export type Outbound = GetSettlementCapturesBadRequestLinks$Outbound;
}

export function getSettlementCapturesBadRequestLinksToJSON(
  getSettlementCapturesBadRequestLinks: GetSettlementCapturesBadRequestLinks,
): string {
  return JSON.stringify(
    GetSettlementCapturesBadRequestLinks$outboundSchema.parse(
      getSettlementCapturesBadRequestLinks,
    ),
  );
}

export function getSettlementCapturesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesAmount$inboundSchema: z.ZodType<
  GetSettlementCapturesAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementCapturesAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementCapturesAmount$outboundSchema: z.ZodType<
  GetSettlementCapturesAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesAmount$ {
  /** @deprecated use `GetSettlementCapturesAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesAmount$inboundSchema;
  /** @deprecated use `GetSettlementCapturesAmount$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesAmount$outboundSchema;
  /** @deprecated use `GetSettlementCapturesAmount$Outbound` instead. */
  export type Outbound = GetSettlementCapturesAmount$Outbound;
}

export function getSettlementCapturesAmountToJSON(
  getSettlementCapturesAmount: GetSettlementCapturesAmount,
): string {
  return JSON.stringify(
    GetSettlementCapturesAmount$outboundSchema.parse(
      getSettlementCapturesAmount,
    ),
  );
}

export function getSettlementCapturesAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesSettlementAmount$inboundSchema: z.ZodType<
  GetSettlementCapturesSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementCapturesSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementCapturesSettlementAmount$outboundSchema: z.ZodType<
  GetSettlementCapturesSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesSettlementAmount$ {
  /** @deprecated use `GetSettlementCapturesSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementCapturesSettlementAmount$inboundSchema;
  /** @deprecated use `GetSettlementCapturesSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesSettlementAmount$outboundSchema;
  /** @deprecated use `GetSettlementCapturesSettlementAmount$Outbound` instead. */
  export type Outbound = GetSettlementCapturesSettlementAmount$Outbound;
}

export function getSettlementCapturesSettlementAmountToJSON(
  getSettlementCapturesSettlementAmount: GetSettlementCapturesSettlementAmount,
): string {
  return JSON.stringify(
    GetSettlementCapturesSettlementAmount$outboundSchema.parse(
      getSettlementCapturesSettlementAmount,
    ),
  );
}

export function getSettlementCapturesSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesMetadata$inboundSchema: z.ZodType<
  GetSettlementCapturesMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetSettlementCapturesMetadata$Outbound = {};

/** @internal */
export const GetSettlementCapturesMetadata$outboundSchema: z.ZodType<
  GetSettlementCapturesMetadata$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesMetadata$ {
  /** @deprecated use `GetSettlementCapturesMetadata$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesMetadata$inboundSchema;
  /** @deprecated use `GetSettlementCapturesMetadata$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesMetadata$outboundSchema;
  /** @deprecated use `GetSettlementCapturesMetadata$Outbound` instead. */
  export type Outbound = GetSettlementCapturesMetadata$Outbound;
}

export function getSettlementCapturesMetadataToJSON(
  getSettlementCapturesMetadata: GetSettlementCapturesMetadata,
): string {
  return JSON.stringify(
    GetSettlementCapturesMetadata$outboundSchema.parse(
      getSettlementCapturesMetadata,
    ),
  );
}

export function getSettlementCapturesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesMetadata' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesMetadataUnion$inboundSchema: z.ZodType<
  GetSettlementCapturesMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetSettlementCapturesMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type GetSettlementCapturesMetadataUnion$Outbound =
  | GetSettlementCapturesMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const GetSettlementCapturesMetadataUnion$outboundSchema: z.ZodType<
  GetSettlementCapturesMetadataUnion$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesMetadataUnion
> = z.union([
  z.lazy(() => GetSettlementCapturesMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesMetadataUnion$ {
  /** @deprecated use `GetSettlementCapturesMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesMetadataUnion$inboundSchema;
  /** @deprecated use `GetSettlementCapturesMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesMetadataUnion$outboundSchema;
  /** @deprecated use `GetSettlementCapturesMetadataUnion$Outbound` instead. */
  export type Outbound = GetSettlementCapturesMetadataUnion$Outbound;
}

export function getSettlementCapturesMetadataUnionToJSON(
  getSettlementCapturesMetadataUnion: GetSettlementCapturesMetadataUnion,
): string {
  return JSON.stringify(
    GetSettlementCapturesMetadataUnion$outboundSchema.parse(
      getSettlementCapturesMetadataUnion,
    ),
  );
}

export function getSettlementCapturesMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesMetadataUnion' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesCaptureSelf$inboundSchema: z.ZodType<
  GetSettlementCapturesCaptureSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementCapturesCaptureSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCapturesCaptureSelf$outboundSchema: z.ZodType<
  GetSettlementCapturesCaptureSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesCaptureSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesCaptureSelf$ {
  /** @deprecated use `GetSettlementCapturesCaptureSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesCaptureSelf$inboundSchema;
  /** @deprecated use `GetSettlementCapturesCaptureSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesCaptureSelf$outboundSchema;
  /** @deprecated use `GetSettlementCapturesCaptureSelf$Outbound` instead. */
  export type Outbound = GetSettlementCapturesCaptureSelf$Outbound;
}

export function getSettlementCapturesCaptureSelfToJSON(
  getSettlementCapturesCaptureSelf: GetSettlementCapturesCaptureSelf,
): string {
  return JSON.stringify(
    GetSettlementCapturesCaptureSelf$outboundSchema.parse(
      getSettlementCapturesCaptureSelf,
    ),
  );
}

export function getSettlementCapturesCaptureSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesCaptureSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesCaptureSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesCaptureSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesPayment$inboundSchema: z.ZodType<
  GetSettlementCapturesPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementCapturesPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCapturesPayment$outboundSchema: z.ZodType<
  GetSettlementCapturesPayment$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesPayment$ {
  /** @deprecated use `GetSettlementCapturesPayment$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesPayment$inboundSchema;
  /** @deprecated use `GetSettlementCapturesPayment$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesPayment$outboundSchema;
  /** @deprecated use `GetSettlementCapturesPayment$Outbound` instead. */
  export type Outbound = GetSettlementCapturesPayment$Outbound;
}

export function getSettlementCapturesPaymentToJSON(
  getSettlementCapturesPayment: GetSettlementCapturesPayment,
): string {
  return JSON.stringify(
    GetSettlementCapturesPayment$outboundSchema.parse(
      getSettlementCapturesPayment,
    ),
  );
}

export function getSettlementCapturesPaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesPayment' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesSettlement$inboundSchema: z.ZodType<
  GetSettlementCapturesSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementCapturesSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementCapturesSettlement$outboundSchema: z.ZodType<
  GetSettlementCapturesSettlement$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesSettlement$ {
  /** @deprecated use `GetSettlementCapturesSettlement$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesSettlement$inboundSchema;
  /** @deprecated use `GetSettlementCapturesSettlement$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesSettlement$outboundSchema;
  /** @deprecated use `GetSettlementCapturesSettlement$Outbound` instead. */
  export type Outbound = GetSettlementCapturesSettlement$Outbound;
}

export function getSettlementCapturesSettlementToJSON(
  getSettlementCapturesSettlement: GetSettlementCapturesSettlement,
): string {
  return JSON.stringify(
    GetSettlementCapturesSettlement$outboundSchema.parse(
      getSettlementCapturesSettlement,
    ),
  );
}

export function getSettlementCapturesSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesSettlement' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesShipment$inboundSchema: z.ZodType<
  GetSettlementCapturesShipment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementCapturesShipment$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementCapturesShipment$outboundSchema: z.ZodType<
  GetSettlementCapturesShipment$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesShipment
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesShipment$ {
  /** @deprecated use `GetSettlementCapturesShipment$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesShipment$inboundSchema;
  /** @deprecated use `GetSettlementCapturesShipment$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesShipment$outboundSchema;
  /** @deprecated use `GetSettlementCapturesShipment$Outbound` instead. */
  export type Outbound = GetSettlementCapturesShipment$Outbound;
}

export function getSettlementCapturesShipmentToJSON(
  getSettlementCapturesShipment: GetSettlementCapturesShipment,
): string {
  return JSON.stringify(
    GetSettlementCapturesShipment$outboundSchema.parse(
      getSettlementCapturesShipment,
    ),
  );
}

export function getSettlementCapturesShipmentFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesShipment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesShipment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesShipment' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesCaptureDocumentation$inboundSchema: z.ZodType<
  GetSettlementCapturesCaptureDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementCapturesCaptureDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCapturesCaptureDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementCapturesCaptureDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementCapturesCaptureDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesCaptureDocumentation$ {
  /** @deprecated use `GetSettlementCapturesCaptureDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementCapturesCaptureDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementCapturesCaptureDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesCaptureDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementCapturesCaptureDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementCapturesCaptureDocumentation$Outbound;
}

export function getSettlementCapturesCaptureDocumentationToJSON(
  getSettlementCapturesCaptureDocumentation:
    GetSettlementCapturesCaptureDocumentation,
): string {
  return JSON.stringify(
    GetSettlementCapturesCaptureDocumentation$outboundSchema.parse(
      getSettlementCapturesCaptureDocumentation,
    ),
  );
}

export function getSettlementCapturesCaptureDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementCapturesCaptureDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesCaptureDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementCapturesCaptureDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesCaptureLinks$inboundSchema: z.ZodType<
  GetSettlementCapturesCaptureLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementCapturesCaptureSelf$inboundSchema),
  payment: z.lazy(() => GetSettlementCapturesPayment$inboundSchema),
  settlement: z.nullable(
    z.lazy(() => GetSettlementCapturesSettlement$inboundSchema),
  ).optional(),
  shipment: z.nullable(
    z.lazy(() => GetSettlementCapturesShipment$inboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    GetSettlementCapturesCaptureDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementCapturesCaptureLinks$Outbound = {
  self: GetSettlementCapturesCaptureSelf$Outbound;
  payment: GetSettlementCapturesPayment$Outbound;
  settlement?: GetSettlementCapturesSettlement$Outbound | null | undefined;
  shipment?: GetSettlementCapturesShipment$Outbound | null | undefined;
  documentation: GetSettlementCapturesCaptureDocumentation$Outbound;
};

/** @internal */
export const GetSettlementCapturesCaptureLinks$outboundSchema: z.ZodType<
  GetSettlementCapturesCaptureLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesCaptureLinks
> = z.object({
  self: z.lazy(() => GetSettlementCapturesCaptureSelf$outboundSchema),
  payment: z.lazy(() => GetSettlementCapturesPayment$outboundSchema),
  settlement: z.nullable(
    z.lazy(() => GetSettlementCapturesSettlement$outboundSchema),
  ).optional(),
  shipment: z.nullable(
    z.lazy(() => GetSettlementCapturesShipment$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    GetSettlementCapturesCaptureDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesCaptureLinks$ {
  /** @deprecated use `GetSettlementCapturesCaptureLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesCaptureLinks$inboundSchema;
  /** @deprecated use `GetSettlementCapturesCaptureLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesCaptureLinks$outboundSchema;
  /** @deprecated use `GetSettlementCapturesCaptureLinks$Outbound` instead. */
  export type Outbound = GetSettlementCapturesCaptureLinks$Outbound;
}

export function getSettlementCapturesCaptureLinksToJSON(
  getSettlementCapturesCaptureLinks: GetSettlementCapturesCaptureLinks,
): string {
  return JSON.stringify(
    GetSettlementCapturesCaptureLinks$outboundSchema.parse(
      getSettlementCapturesCaptureLinks,
    ),
  );
}

export function getSettlementCapturesCaptureLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesCaptureLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesCaptureLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesCaptureLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesCapture$inboundSchema: z.ZodType<
  GetSettlementCapturesCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => GetSettlementCapturesAmount$inboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => GetSettlementCapturesSettlementAmount$inboundSchema),
  ).optional(),
  status: z.string(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSettlementCapturesMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  _links: z.lazy(() => GetSettlementCapturesCaptureLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementCapturesCapture$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description?: string | undefined;
  amount: GetSettlementCapturesAmount$Outbound | null;
  settlementAmount?:
    | GetSettlementCapturesSettlementAmount$Outbound
    | null
    | undefined;
  status: string;
  metadata?:
    | GetSettlementCapturesMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId: string;
  shipmentId?: string | null | undefined;
  settlementId?: string | null | undefined;
  createdAt: string;
  _links: GetSettlementCapturesCaptureLinks$Outbound;
};

/** @internal */
export const GetSettlementCapturesCapture$outboundSchema: z.ZodType<
  GetSettlementCapturesCapture$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesCapture
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => GetSettlementCapturesAmount$outboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => GetSettlementCapturesSettlementAmount$outboundSchema),
  ).optional(),
  status: z.string(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSettlementCapturesMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  links: z.lazy(() => GetSettlementCapturesCaptureLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesCapture$ {
  /** @deprecated use `GetSettlementCapturesCapture$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesCapture$inboundSchema;
  /** @deprecated use `GetSettlementCapturesCapture$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesCapture$outboundSchema;
  /** @deprecated use `GetSettlementCapturesCapture$Outbound` instead. */
  export type Outbound = GetSettlementCapturesCapture$Outbound;
}

export function getSettlementCapturesCaptureToJSON(
  getSettlementCapturesCapture: GetSettlementCapturesCapture,
): string {
  return JSON.stringify(
    GetSettlementCapturesCapture$outboundSchema.parse(
      getSettlementCapturesCapture,
    ),
  );
}

export function getSettlementCapturesCaptureFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesCapture' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesEmbedded$inboundSchema: z.ZodType<
  GetSettlementCapturesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  captures: z.array(z.lazy(() => GetSettlementCapturesCapture$inboundSchema))
    .optional(),
});

/** @internal */
export type GetSettlementCapturesEmbedded$Outbound = {
  captures?: Array<GetSettlementCapturesCapture$Outbound> | undefined;
};

/** @internal */
export const GetSettlementCapturesEmbedded$outboundSchema: z.ZodType<
  GetSettlementCapturesEmbedded$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesEmbedded
> = z.object({
  captures: z.array(z.lazy(() => GetSettlementCapturesCapture$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesEmbedded$ {
  /** @deprecated use `GetSettlementCapturesEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesEmbedded$inboundSchema;
  /** @deprecated use `GetSettlementCapturesEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesEmbedded$outboundSchema;
  /** @deprecated use `GetSettlementCapturesEmbedded$Outbound` instead. */
  export type Outbound = GetSettlementCapturesEmbedded$Outbound;
}

export function getSettlementCapturesEmbeddedToJSON(
  getSettlementCapturesEmbedded: GetSettlementCapturesEmbedded,
): string {
  return JSON.stringify(
    GetSettlementCapturesEmbedded$outboundSchema.parse(
      getSettlementCapturesEmbedded,
    ),
  );
}

export function getSettlementCapturesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesEmbedded' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesSelf$inboundSchema: z.ZodType<
  GetSettlementCapturesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementCapturesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCapturesSelf$outboundSchema: z.ZodType<
  GetSettlementCapturesSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesSelf$ {
  /** @deprecated use `GetSettlementCapturesSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesSelf$inboundSchema;
  /** @deprecated use `GetSettlementCapturesSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesSelf$outboundSchema;
  /** @deprecated use `GetSettlementCapturesSelf$Outbound` instead. */
  export type Outbound = GetSettlementCapturesSelf$Outbound;
}

export function getSettlementCapturesSelfToJSON(
  getSettlementCapturesSelf: GetSettlementCapturesSelf,
): string {
  return JSON.stringify(
    GetSettlementCapturesSelf$outboundSchema.parse(getSettlementCapturesSelf),
  );
}

export function getSettlementCapturesSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesPrevious$inboundSchema: z.ZodType<
  GetSettlementCapturesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementCapturesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementCapturesPrevious$outboundSchema: z.ZodType<
  GetSettlementCapturesPrevious$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesPrevious$ {
  /** @deprecated use `GetSettlementCapturesPrevious$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesPrevious$inboundSchema;
  /** @deprecated use `GetSettlementCapturesPrevious$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesPrevious$outboundSchema;
  /** @deprecated use `GetSettlementCapturesPrevious$Outbound` instead. */
  export type Outbound = GetSettlementCapturesPrevious$Outbound;
}

export function getSettlementCapturesPreviousToJSON(
  getSettlementCapturesPrevious: GetSettlementCapturesPrevious,
): string {
  return JSON.stringify(
    GetSettlementCapturesPrevious$outboundSchema.parse(
      getSettlementCapturesPrevious,
    ),
  );
}

export function getSettlementCapturesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesPrevious' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesNext$inboundSchema: z.ZodType<
  GetSettlementCapturesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementCapturesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementCapturesNext$outboundSchema: z.ZodType<
  GetSettlementCapturesNext$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesNext$ {
  /** @deprecated use `GetSettlementCapturesNext$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesNext$inboundSchema;
  /** @deprecated use `GetSettlementCapturesNext$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesNext$outboundSchema;
  /** @deprecated use `GetSettlementCapturesNext$Outbound` instead. */
  export type Outbound = GetSettlementCapturesNext$Outbound;
}

export function getSettlementCapturesNextToJSON(
  getSettlementCapturesNext: GetSettlementCapturesNext,
): string {
  return JSON.stringify(
    GetSettlementCapturesNext$outboundSchema.parse(getSettlementCapturesNext),
  );
}

export function getSettlementCapturesNextFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesNext' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesDocumentation$inboundSchema: z.ZodType<
  GetSettlementCapturesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementCapturesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCapturesDocumentation$outboundSchema: z.ZodType<
  GetSettlementCapturesDocumentation$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesDocumentation$ {
  /** @deprecated use `GetSettlementCapturesDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementCapturesDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementCapturesDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementCapturesDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementCapturesDocumentation$Outbound;
}

export function getSettlementCapturesDocumentationToJSON(
  getSettlementCapturesDocumentation: GetSettlementCapturesDocumentation,
): string {
  return JSON.stringify(
    GetSettlementCapturesDocumentation$outboundSchema.parse(
      getSettlementCapturesDocumentation,
    ),
  );
}

export function getSettlementCapturesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementCapturesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesLinks$inboundSchema: z.ZodType<
  GetSettlementCapturesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementCapturesSelf$inboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => GetSettlementCapturesPrevious$inboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => GetSettlementCapturesNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementCapturesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSettlementCapturesLinks$Outbound = {
  self?: GetSettlementCapturesSelf$Outbound | undefined;
  previous?: GetSettlementCapturesPrevious$Outbound | null | undefined;
  next?: GetSettlementCapturesNext$Outbound | null | undefined;
  documentation?: GetSettlementCapturesDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSettlementCapturesLinks$outboundSchema: z.ZodType<
  GetSettlementCapturesLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesLinks
> = z.object({
  self: z.lazy(() => GetSettlementCapturesSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => GetSettlementCapturesPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => GetSettlementCapturesNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementCapturesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesLinks$ {
  /** @deprecated use `GetSettlementCapturesLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesLinks$inboundSchema;
  /** @deprecated use `GetSettlementCapturesLinks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesLinks$outboundSchema;
  /** @deprecated use `GetSettlementCapturesLinks$Outbound` instead. */
  export type Outbound = GetSettlementCapturesLinks$Outbound;
}

export function getSettlementCapturesLinksToJSON(
  getSettlementCapturesLinks: GetSettlementCapturesLinks,
): string {
  return JSON.stringify(
    GetSettlementCapturesLinks$outboundSchema.parse(getSettlementCapturesLinks),
  );
}

export function getSettlementCapturesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementCapturesResponse$inboundSchema: z.ZodType<
  GetSettlementCapturesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => GetSettlementCapturesEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => GetSettlementCapturesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementCapturesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: GetSettlementCapturesEmbedded$Outbound | undefined;
  _links?: GetSettlementCapturesLinks$Outbound | undefined;
};

/** @internal */
export const GetSettlementCapturesResponse$outboundSchema: z.ZodType<
  GetSettlementCapturesResponse$Outbound,
  z.ZodTypeDef,
  GetSettlementCapturesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => GetSettlementCapturesEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => GetSettlementCapturesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCapturesResponse$ {
  /** @deprecated use `GetSettlementCapturesResponse$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCapturesResponse$inboundSchema;
  /** @deprecated use `GetSettlementCapturesResponse$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCapturesResponse$outboundSchema;
  /** @deprecated use `GetSettlementCapturesResponse$Outbound` instead. */
  export type Outbound = GetSettlementCapturesResponse$Outbound;
}

export function getSettlementCapturesResponseToJSON(
  getSettlementCapturesResponse: GetSettlementCapturesResponse,
): string {
  return JSON.stringify(
    GetSettlementCapturesResponse$outboundSchema.parse(
      getSettlementCapturesResponse,
    ),
  );
}

export function getSettlementCapturesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCapturesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCapturesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCapturesResponse' from JSON`,
  );
}
