/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTerminalRequest = {
  /**
   * Provide the ID of the related terminal.
   */
  terminalId: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const GetTerminalRequest$inboundSchema: z.ZodType<
  GetTerminalRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  terminalId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetTerminalRequest$Outbound = {
  terminalId: string;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetTerminalRequest$outboundSchema: z.ZodType<
  GetTerminalRequest$Outbound,
  z.ZodTypeDef,
  GetTerminalRequest
> = z.object({
  terminalId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTerminalRequest$ {
  /** @deprecated use `GetTerminalRequest$inboundSchema` instead. */
  export const inboundSchema = GetTerminalRequest$inboundSchema;
  /** @deprecated use `GetTerminalRequest$outboundSchema` instead. */
  export const outboundSchema = GetTerminalRequest$outboundSchema;
  /** @deprecated use `GetTerminalRequest$Outbound` instead. */
  export type Outbound = GetTerminalRequest$Outbound;
}

export function getTerminalRequestToJSON(
  getTerminalRequest: GetTerminalRequest,
): string {
  return JSON.stringify(
    GetTerminalRequest$outboundSchema.parse(getTerminalRequest),
  );
}

export function getTerminalRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTerminalRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTerminalRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTerminalRequest' from JSON`,
  );
}
