/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPaymentLinkRequest = {
  /**
   * Provide the ID of the related payment link.
   */
  paymentLinkId: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetPaymentLinkDocumentation = {
  href: string;
  type: string;
};

export type GetPaymentLinkNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetPaymentLinkDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetPaymentLinkMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetPaymentLinkMode = ClosedEnum<typeof GetPaymentLinkMode>;

/**
 * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
 *
 * @remarks
 * amount.
 */
export type GetPaymentLinkAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
 *
 * @remarks
 * customer will be prompted to enter a value greater than or equal to the minimum amount.
 */
export type GetPaymentLinkMinimumAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export const GetPaymentLinkType = {
  Physical: "physical",
  Digital: "digital",
  ShippingFee: "shipping_fee",
  Discount: "discount",
  StoreCredit: "store_credit",
  GiftCard: "gift_card",
  Surcharge: "surcharge",
  Tip: "tip",
} as const;
/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export type GetPaymentLinkType = ClosedEnum<typeof GetPaymentLinkType>;

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type GetPaymentLinkUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
 *
 * @remarks
 * type.
 */
export type GetPaymentLinkDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type GetPaymentLinkTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
 *
 * @remarks
 * calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
 * `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type GetPaymentLinkVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const GetPaymentLinkCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type GetPaymentLinkCategory = ClosedEnum<typeof GetPaymentLinkCategory>;

export type GetPaymentLinkLine = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   */
  type?: GetPaymentLinkType | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: GetPaymentLinkUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
   *
   * @remarks
   * type.
   */
  discountAmount?: GetPaymentLinkDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: GetPaymentLinkTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
   *
   * @remarks
   * not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
   *
   * @remarks
   * calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
   * `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: GetPaymentLinkVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the
   *
   * @remarks
   * [Integrating Vouchers](integrating-vouchers) guide for more information.
   */
  categories?: Array<GetPaymentLinkCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and
 *
 * @remarks
 * conversion.
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
 * `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type GetPaymentLinkBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
   * email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and
 *
 * @remarks
 * conversion.
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
 * `country`.
 */
export type GetPaymentLinkShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
   * email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
 * a €0.99 fee on a €1.00 payment.
 */
export type GetPaymentLinkApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
 *
 * @remarks
 * merchants.
 *
 * If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
 * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
 * to your own account balance.
 */
export type GetPaymentLinkApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
   * a €0.99 fee on a €1.00 payment.
   */
  amount: GetPaymentLinkApplicationFeeAmount;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the
   *
   * @remarks
   * connected merchant.
   */
  description: string;
};

/**
 * If set to `first`, a payment mandate is established right after a payment is made by the customer.
 *
 * @remarks
 *
 * Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
 *
 * The mandate ID can be retrieved by making a call to the
 * [Payment Link Payments Endpoint](get-payment-link-payments).
 */
export const GetPaymentLinkSequenceType = {
  Oneoff: "oneoff",
  First: "first",
} as const;
/**
 * If set to `first`, a payment mandate is established right after a payment is made by the customer.
 *
 * @remarks
 *
 * Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
 *
 * The mandate ID can be retrieved by making a call to the
 * [Payment Link Payments Endpoint](get-payment-link-payments).
 */
export type GetPaymentLinkSequenceType = ClosedEnum<
  typeof GetPaymentLinkSequenceType
>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPaymentLinkSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type GetPaymentLinkPaymentLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetPaymentLinkLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetPaymentLinkSelf;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  paymentLink: GetPaymentLinkPaymentLink;
};

/**
 * The payment link object.
 */
export type GetPaymentLinkResponse = {
  /**
   * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: GetPaymentLinkMode;
  /**
   * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
   *
   * @remarks
   * customer's bank or card statement when possible.
   */
  description: string;
  /**
   * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
   *
   * @remarks
   * amount.
   */
  amount: GetPaymentLinkAmount | null;
  /**
   * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
   *
   * @remarks
   * customer will be prompted to enter a value greater than or equal to the minimum amount.
   */
  minimumAmount?: GetPaymentLinkMinimumAmount | null | undefined;
  /**
   * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
   */
  archived: boolean;
  /**
   * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
   *
   * @remarks
   * the customer will be shown a generic message after completing the payment.
   */
  redirectUrl: string | null;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
   * resulting from the payment link.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
   * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
   * local machine.
   */
  webhookUrl: string | null;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<GetPaymentLinkLine> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and
   *
   * @remarks
   * conversion.
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
   * `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: GetPaymentLinkBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and
   *
   * @remarks
   * conversion.
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
   * `country`.
   */
  shippingAddress?: GetPaymentLinkShippingAddress | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
   * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
   * required.
   */
  profileId: string | null;
  /**
   * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
   *
   * @remarks
   * payments using the same link.
   *
   * If no value is specified, the field defaults to `false`, allowing only a single payment per link.
   */
  reusable?: boolean | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the payment link became paid, in ISO 8601 format.
   */
  paidAt: string | null;
  /**
   * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
   *
   * @remarks
   * the payment link will not expire automatically.
   */
  expiresAt: string | null;
  /**
   * An array of payment methods that are allowed to be used for this payment link. When this parameter is
   *
   * @remarks
   * not provided or is an empty array, all enabled payment methods will be available.
   *
   * Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
   * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
   * 'in3', 'riverty', 'klarna', 'billie'.
   */
  allowedMethods: Array<string> | null;
  /**
   * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
   *
   * @remarks
   * merchants.
   *
   * If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
   * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
   * to your own account balance.
   */
  applicationFee?: GetPaymentLinkApplicationFee | undefined;
  /**
   * If set to `first`, a payment mandate is established right after a payment is made by the customer.
   *
   * @remarks
   *
   * Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
   *
   * The mandate ID can be retrieved by making a call to the
   * [Payment Link Payments Endpoint](get-payment-link-payments).
   */
  sequenceType?: GetPaymentLinkSequenceType | null | undefined;
  /**
   * **Only relevant when `sequenceType` is set to `first`**
   *
   * @remarks
   *
   * The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
   * the customer will be required to input relevant information which will be used to establish a mandate after
   * the payment is made.
   */
  customerId?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetPaymentLinkLinks;
};

/** @internal */
export const GetPaymentLinkRequest$inboundSchema: z.ZodType<
  GetPaymentLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentLinkId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetPaymentLinkRequest$Outbound = {
  paymentLinkId: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetPaymentLinkRequest$outboundSchema: z.ZodType<
  GetPaymentLinkRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkRequest
> = z.object({
  paymentLinkId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkRequest$ {
  /** @deprecated use `GetPaymentLinkRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkRequest$inboundSchema;
  /** @deprecated use `GetPaymentLinkRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkRequest$outboundSchema;
  /** @deprecated use `GetPaymentLinkRequest$Outbound` instead. */
  export type Outbound = GetPaymentLinkRequest$Outbound;
}

export function getPaymentLinkRequestToJSON(
  getPaymentLinkRequest: GetPaymentLinkRequest,
): string {
  return JSON.stringify(
    GetPaymentLinkRequest$outboundSchema.parse(getPaymentLinkRequest),
  );
}

export function getPaymentLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkRequest' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkDocumentation$inboundSchema: z.ZodType<
  GetPaymentLinkDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkDocumentation$outboundSchema: z.ZodType<
  GetPaymentLinkDocumentation$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkDocumentation$ {
  /** @deprecated use `GetPaymentLinkDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkDocumentation$inboundSchema;
  /** @deprecated use `GetPaymentLinkDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkDocumentation$outboundSchema;
  /** @deprecated use `GetPaymentLinkDocumentation$Outbound` instead. */
  export type Outbound = GetPaymentLinkDocumentation$Outbound;
}

export function getPaymentLinkDocumentationToJSON(
  getPaymentLinkDocumentation: GetPaymentLinkDocumentation,
): string {
  return JSON.stringify(
    GetPaymentLinkDocumentation$outboundSchema.parse(
      getPaymentLinkDocumentation,
    ),
  );
}

export function getPaymentLinkDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkDocumentation' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkNotFoundLinks$inboundSchema: z.ZodType<
  GetPaymentLinkNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetPaymentLinkDocumentation$inboundSchema),
});

/** @internal */
export type GetPaymentLinkNotFoundLinks$Outbound = {
  documentation: GetPaymentLinkDocumentation$Outbound;
};

/** @internal */
export const GetPaymentLinkNotFoundLinks$outboundSchema: z.ZodType<
  GetPaymentLinkNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetPaymentLinkDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkNotFoundLinks$ {
  /** @deprecated use `GetPaymentLinkNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkNotFoundLinks$inboundSchema;
  /** @deprecated use `GetPaymentLinkNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkNotFoundLinks$outboundSchema;
  /** @deprecated use `GetPaymentLinkNotFoundLinks$Outbound` instead. */
  export type Outbound = GetPaymentLinkNotFoundLinks$Outbound;
}

export function getPaymentLinkNotFoundLinksToJSON(
  getPaymentLinkNotFoundLinks: GetPaymentLinkNotFoundLinks,
): string {
  return JSON.stringify(
    GetPaymentLinkNotFoundLinks$outboundSchema.parse(
      getPaymentLinkNotFoundLinks,
    ),
  );
}

export function getPaymentLinkNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkMode$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkMode
> = z.nativeEnum(GetPaymentLinkMode);

/** @internal */
export const GetPaymentLinkMode$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkMode
> = GetPaymentLinkMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkMode$ {
  /** @deprecated use `GetPaymentLinkMode$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkMode$inboundSchema;
  /** @deprecated use `GetPaymentLinkMode$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkMode$outboundSchema;
}

/** @internal */
export const GetPaymentLinkAmount$inboundSchema: z.ZodType<
  GetPaymentLinkAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkAmount$outboundSchema: z.ZodType<
  GetPaymentLinkAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkAmount$ {
  /** @deprecated use `GetPaymentLinkAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkAmount$Outbound;
}

export function getPaymentLinkAmountToJSON(
  getPaymentLinkAmount: GetPaymentLinkAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkAmount$outboundSchema.parse(getPaymentLinkAmount),
  );
}

export function getPaymentLinkAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkMinimumAmount$inboundSchema: z.ZodType<
  GetPaymentLinkMinimumAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkMinimumAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkMinimumAmount$outboundSchema: z.ZodType<
  GetPaymentLinkMinimumAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkMinimumAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkMinimumAmount$ {
  /** @deprecated use `GetPaymentLinkMinimumAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkMinimumAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkMinimumAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkMinimumAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkMinimumAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkMinimumAmount$Outbound;
}

export function getPaymentLinkMinimumAmountToJSON(
  getPaymentLinkMinimumAmount: GetPaymentLinkMinimumAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkMinimumAmount$outboundSchema.parse(
      getPaymentLinkMinimumAmount,
    ),
  );
}

export function getPaymentLinkMinimumAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkMinimumAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkMinimumAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkMinimumAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkType$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkType
> = z.nativeEnum(GetPaymentLinkType);

/** @internal */
export const GetPaymentLinkType$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkType
> = GetPaymentLinkType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkType$ {
  /** @deprecated use `GetPaymentLinkType$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkType$inboundSchema;
  /** @deprecated use `GetPaymentLinkType$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkType$outboundSchema;
}

/** @internal */
export const GetPaymentLinkUnitPrice$inboundSchema: z.ZodType<
  GetPaymentLinkUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkUnitPrice$outboundSchema: z.ZodType<
  GetPaymentLinkUnitPrice$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkUnitPrice$ {
  /** @deprecated use `GetPaymentLinkUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkUnitPrice$inboundSchema;
  /** @deprecated use `GetPaymentLinkUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkUnitPrice$outboundSchema;
  /** @deprecated use `GetPaymentLinkUnitPrice$Outbound` instead. */
  export type Outbound = GetPaymentLinkUnitPrice$Outbound;
}

export function getPaymentLinkUnitPriceToJSON(
  getPaymentLinkUnitPrice: GetPaymentLinkUnitPrice,
): string {
  return JSON.stringify(
    GetPaymentLinkUnitPrice$outboundSchema.parse(getPaymentLinkUnitPrice),
  );
}

export function getPaymentLinkUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkDiscountAmount$inboundSchema: z.ZodType<
  GetPaymentLinkDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkDiscountAmount$outboundSchema: z.ZodType<
  GetPaymentLinkDiscountAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkDiscountAmount$ {
  /** @deprecated use `GetPaymentLinkDiscountAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkDiscountAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkDiscountAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkDiscountAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkDiscountAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkDiscountAmount$Outbound;
}

export function getPaymentLinkDiscountAmountToJSON(
  getPaymentLinkDiscountAmount: GetPaymentLinkDiscountAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkDiscountAmount$outboundSchema.parse(
      getPaymentLinkDiscountAmount,
    ),
  );
}

export function getPaymentLinkDiscountAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkDiscountAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkDiscountAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkDiscountAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkTotalAmount$inboundSchema: z.ZodType<
  GetPaymentLinkTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkTotalAmount$outboundSchema: z.ZodType<
  GetPaymentLinkTotalAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkTotalAmount$ {
  /** @deprecated use `GetPaymentLinkTotalAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkTotalAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkTotalAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkTotalAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkTotalAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkTotalAmount$Outbound;
}

export function getPaymentLinkTotalAmountToJSON(
  getPaymentLinkTotalAmount: GetPaymentLinkTotalAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkTotalAmount$outboundSchema.parse(getPaymentLinkTotalAmount),
  );
}

export function getPaymentLinkTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkTotalAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkVatAmount$inboundSchema: z.ZodType<
  GetPaymentLinkVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkVatAmount$outboundSchema: z.ZodType<
  GetPaymentLinkVatAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkVatAmount$ {
  /** @deprecated use `GetPaymentLinkVatAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkVatAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkVatAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkVatAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkVatAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkVatAmount$Outbound;
}

export function getPaymentLinkVatAmountToJSON(
  getPaymentLinkVatAmount: GetPaymentLinkVatAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkVatAmount$outboundSchema.parse(getPaymentLinkVatAmount),
  );
}

export function getPaymentLinkVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkVatAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkCategory$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkCategory
> = z.nativeEnum(GetPaymentLinkCategory);

/** @internal */
export const GetPaymentLinkCategory$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkCategory
> = GetPaymentLinkCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkCategory$ {
  /** @deprecated use `GetPaymentLinkCategory$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkCategory$inboundSchema;
  /** @deprecated use `GetPaymentLinkCategory$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkCategory$outboundSchema;
}

/** @internal */
export const GetPaymentLinkLine$inboundSchema: z.ZodType<
  GetPaymentLinkLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetPaymentLinkType$inboundSchema.default("physical"),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetPaymentLinkUnitPrice$inboundSchema),
  discountAmount: z.lazy(() => GetPaymentLinkDiscountAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetPaymentLinkTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetPaymentLinkVatAmount$inboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(GetPaymentLinkCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkLine$Outbound = {
  type: string;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: GetPaymentLinkUnitPrice$Outbound;
  discountAmount?: GetPaymentLinkDiscountAmount$Outbound | undefined;
  totalAmount: GetPaymentLinkTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: GetPaymentLinkVatAmount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
};

/** @internal */
export const GetPaymentLinkLine$outboundSchema: z.ZodType<
  GetPaymentLinkLine$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkLine
> = z.object({
  type: GetPaymentLinkType$outboundSchema.default("physical"),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetPaymentLinkUnitPrice$outboundSchema),
  discountAmount: z.lazy(() => GetPaymentLinkDiscountAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetPaymentLinkTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetPaymentLinkVatAmount$outboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(GetPaymentLinkCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkLine$ {
  /** @deprecated use `GetPaymentLinkLine$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkLine$inboundSchema;
  /** @deprecated use `GetPaymentLinkLine$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkLine$outboundSchema;
  /** @deprecated use `GetPaymentLinkLine$Outbound` instead. */
  export type Outbound = GetPaymentLinkLine$Outbound;
}

export function getPaymentLinkLineToJSON(
  getPaymentLinkLine: GetPaymentLinkLine,
): string {
  return JSON.stringify(
    GetPaymentLinkLine$outboundSchema.parse(getPaymentLinkLine),
  );
}

export function getPaymentLinkLineFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkLine' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkBillingAddress$inboundSchema: z.ZodType<
  GetPaymentLinkBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetPaymentLinkBillingAddress$outboundSchema: z.ZodType<
  GetPaymentLinkBillingAddress$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkBillingAddress$ {
  /** @deprecated use `GetPaymentLinkBillingAddress$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkBillingAddress$inboundSchema;
  /** @deprecated use `GetPaymentLinkBillingAddress$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkBillingAddress$outboundSchema;
  /** @deprecated use `GetPaymentLinkBillingAddress$Outbound` instead. */
  export type Outbound = GetPaymentLinkBillingAddress$Outbound;
}

export function getPaymentLinkBillingAddressToJSON(
  getPaymentLinkBillingAddress: GetPaymentLinkBillingAddress,
): string {
  return JSON.stringify(
    GetPaymentLinkBillingAddress$outboundSchema.parse(
      getPaymentLinkBillingAddress,
    ),
  );
}

export function getPaymentLinkBillingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkBillingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkBillingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkBillingAddress' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkShippingAddress$inboundSchema: z.ZodType<
  GetPaymentLinkShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetPaymentLinkShippingAddress$outboundSchema: z.ZodType<
  GetPaymentLinkShippingAddress$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkShippingAddress$ {
  /** @deprecated use `GetPaymentLinkShippingAddress$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkShippingAddress$inboundSchema;
  /** @deprecated use `GetPaymentLinkShippingAddress$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkShippingAddress$outboundSchema;
  /** @deprecated use `GetPaymentLinkShippingAddress$Outbound` instead. */
  export type Outbound = GetPaymentLinkShippingAddress$Outbound;
}

export function getPaymentLinkShippingAddressToJSON(
  getPaymentLinkShippingAddress: GetPaymentLinkShippingAddress,
): string {
  return JSON.stringify(
    GetPaymentLinkShippingAddress$outboundSchema.parse(
      getPaymentLinkShippingAddress,
    ),
  );
}

export function getPaymentLinkShippingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkShippingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkShippingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkShippingAddress' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkApplicationFeeAmount$inboundSchema: z.ZodType<
  GetPaymentLinkApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkApplicationFeeAmount$outboundSchema: z.ZodType<
  GetPaymentLinkApplicationFeeAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkApplicationFeeAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkApplicationFeeAmount$ {
  /** @deprecated use `GetPaymentLinkApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkApplicationFeeAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkApplicationFeeAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkApplicationFeeAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkApplicationFeeAmount$Outbound;
}

export function getPaymentLinkApplicationFeeAmountToJSON(
  getPaymentLinkApplicationFeeAmount: GetPaymentLinkApplicationFeeAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkApplicationFeeAmount$outboundSchema.parse(
      getPaymentLinkApplicationFeeAmount,
    ),
  );
}

export function getPaymentLinkApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkApplicationFeeAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkApplicationFeeAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkApplicationFee$inboundSchema: z.ZodType<
  GetPaymentLinkApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetPaymentLinkApplicationFeeAmount$inboundSchema),
  description: z.string(),
});

/** @internal */
export type GetPaymentLinkApplicationFee$Outbound = {
  amount: GetPaymentLinkApplicationFeeAmount$Outbound;
  description: string;
};

/** @internal */
export const GetPaymentLinkApplicationFee$outboundSchema: z.ZodType<
  GetPaymentLinkApplicationFee$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkApplicationFee
> = z.object({
  amount: z.lazy(() => GetPaymentLinkApplicationFeeAmount$outboundSchema),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkApplicationFee$ {
  /** @deprecated use `GetPaymentLinkApplicationFee$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkApplicationFee$inboundSchema;
  /** @deprecated use `GetPaymentLinkApplicationFee$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkApplicationFee$outboundSchema;
  /** @deprecated use `GetPaymentLinkApplicationFee$Outbound` instead. */
  export type Outbound = GetPaymentLinkApplicationFee$Outbound;
}

export function getPaymentLinkApplicationFeeToJSON(
  getPaymentLinkApplicationFee: GetPaymentLinkApplicationFee,
): string {
  return JSON.stringify(
    GetPaymentLinkApplicationFee$outboundSchema.parse(
      getPaymentLinkApplicationFee,
    ),
  );
}

export function getPaymentLinkApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkApplicationFee' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkSequenceType$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkSequenceType
> = z.nativeEnum(GetPaymentLinkSequenceType);

/** @internal */
export const GetPaymentLinkSequenceType$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkSequenceType
> = GetPaymentLinkSequenceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkSequenceType$ {
  /** @deprecated use `GetPaymentLinkSequenceType$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkSequenceType$inboundSchema;
  /** @deprecated use `GetPaymentLinkSequenceType$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkSequenceType$outboundSchema;
}

/** @internal */
export const GetPaymentLinkSelf$inboundSchema: z.ZodType<
  GetPaymentLinkSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkSelf$outboundSchema: z.ZodType<
  GetPaymentLinkSelf$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkSelf$ {
  /** @deprecated use `GetPaymentLinkSelf$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkSelf$inboundSchema;
  /** @deprecated use `GetPaymentLinkSelf$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkSelf$outboundSchema;
  /** @deprecated use `GetPaymentLinkSelf$Outbound` instead. */
  export type Outbound = GetPaymentLinkSelf$Outbound;
}

export function getPaymentLinkSelfToJSON(
  getPaymentLinkSelf: GetPaymentLinkSelf,
): string {
  return JSON.stringify(
    GetPaymentLinkSelf$outboundSchema.parse(getPaymentLinkSelf),
  );
}

export function getPaymentLinkSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkSelf' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentLink$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentLink$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentLink$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentLink$ {
  /** @deprecated use `GetPaymentLinkPaymentLink$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentLink$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentLink$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentLink$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentLink$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentLink$Outbound;
}

export function getPaymentLinkPaymentLinkToJSON(
  getPaymentLinkPaymentLink: GetPaymentLinkPaymentLink,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentLink$outboundSchema.parse(getPaymentLinkPaymentLink),
  );
}

export function getPaymentLinkPaymentLinkFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentLink' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkLinks$inboundSchema: z.ZodType<
  GetPaymentLinkLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetPaymentLinkSelf$inboundSchema),
  paymentLink: z.lazy(() => GetPaymentLinkPaymentLink$inboundSchema),
});

/** @internal */
export type GetPaymentLinkLinks$Outbound = {
  self: GetPaymentLinkSelf$Outbound;
  paymentLink: GetPaymentLinkPaymentLink$Outbound;
};

/** @internal */
export const GetPaymentLinkLinks$outboundSchema: z.ZodType<
  GetPaymentLinkLinks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkLinks
> = z.object({
  self: z.lazy(() => GetPaymentLinkSelf$outboundSchema),
  paymentLink: z.lazy(() => GetPaymentLinkPaymentLink$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkLinks$ {
  /** @deprecated use `GetPaymentLinkLinks$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkLinks$inboundSchema;
  /** @deprecated use `GetPaymentLinkLinks$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkLinks$outboundSchema;
  /** @deprecated use `GetPaymentLinkLinks$Outbound` instead. */
  export type Outbound = GetPaymentLinkLinks$Outbound;
}

export function getPaymentLinkLinksToJSON(
  getPaymentLinkLinks: GetPaymentLinkLinks,
): string {
  return JSON.stringify(
    GetPaymentLinkLinks$outboundSchema.parse(getPaymentLinkLinks),
  );
}

export function getPaymentLinkLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkLinks' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkResponse$inboundSchema: z.ZodType<
  GetPaymentLinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("payment-link"),
  id: z.string(),
  mode: GetPaymentLinkMode$inboundSchema,
  description: z.string(),
  amount: z.nullable(z.lazy(() => GetPaymentLinkAmount$inboundSchema)),
  minimumAmount: z.nullable(
    z.lazy(() => GetPaymentLinkMinimumAmount$inboundSchema),
  ).optional(),
  archived: z.boolean(),
  redirectUrl: z.nullable(z.string()),
  webhookUrl: z.nullable(z.string()),
  lines: z.nullable(z.array(z.lazy(() => GetPaymentLinkLine$inboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => GetPaymentLinkBillingAddress$inboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => GetPaymentLinkShippingAddress$inboundSchema)
    .optional(),
  profileId: z.nullable(z.string()),
  reusable: z.nullable(z.boolean().default(false)),
  createdAt: z.string(),
  paidAt: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  allowedMethods: z.nullable(z.array(z.string())),
  applicationFee: z.lazy(() => GetPaymentLinkApplicationFee$inboundSchema)
    .optional(),
  sequenceType: z.nullable(GetPaymentLinkSequenceType$inboundSchema).optional(),
  customerId: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetPaymentLinkLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetPaymentLinkResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: GetPaymentLinkAmount$Outbound | null;
  minimumAmount?: GetPaymentLinkMinimumAmount$Outbound | null | undefined;
  archived: boolean;
  redirectUrl: string | null;
  webhookUrl: string | null;
  lines?: Array<GetPaymentLinkLine$Outbound> | null | undefined;
  billingAddress?: GetPaymentLinkBillingAddress$Outbound | undefined;
  shippingAddress?: GetPaymentLinkShippingAddress$Outbound | undefined;
  profileId: string | null;
  reusable: boolean | null;
  createdAt: string;
  paidAt: string | null;
  expiresAt: string | null;
  allowedMethods: Array<string> | null;
  applicationFee?: GetPaymentLinkApplicationFee$Outbound | undefined;
  sequenceType?: string | null | undefined;
  customerId?: string | null | undefined;
  _links: GetPaymentLinkLinks$Outbound;
};

/** @internal */
export const GetPaymentLinkResponse$outboundSchema: z.ZodType<
  GetPaymentLinkResponse$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkResponse
> = z.object({
  resource: z.string().default("payment-link"),
  id: z.string(),
  mode: GetPaymentLinkMode$outboundSchema,
  description: z.string(),
  amount: z.nullable(z.lazy(() => GetPaymentLinkAmount$outboundSchema)),
  minimumAmount: z.nullable(
    z.lazy(() => GetPaymentLinkMinimumAmount$outboundSchema),
  ).optional(),
  archived: z.boolean(),
  redirectUrl: z.nullable(z.string()),
  webhookUrl: z.nullable(z.string()),
  lines: z.nullable(z.array(z.lazy(() => GetPaymentLinkLine$outboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => GetPaymentLinkBillingAddress$outboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => GetPaymentLinkShippingAddress$outboundSchema)
    .optional(),
  profileId: z.nullable(z.string()),
  reusable: z.nullable(z.boolean().default(false)),
  createdAt: z.string(),
  paidAt: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  allowedMethods: z.nullable(z.array(z.string())),
  applicationFee: z.lazy(() => GetPaymentLinkApplicationFee$outboundSchema)
    .optional(),
  sequenceType: z.nullable(GetPaymentLinkSequenceType$outboundSchema)
    .optional(),
  customerId: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetPaymentLinkLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkResponse$ {
  /** @deprecated use `GetPaymentLinkResponse$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkResponse$inboundSchema;
  /** @deprecated use `GetPaymentLinkResponse$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkResponse$outboundSchema;
  /** @deprecated use `GetPaymentLinkResponse$Outbound` instead. */
  export type Outbound = GetPaymentLinkResponse$Outbound;
}

export function getPaymentLinkResponseToJSON(
  getPaymentLinkResponse: GetPaymentLinkResponse,
): string {
  return JSON.stringify(
    GetPaymentLinkResponse$outboundSchema.parse(getPaymentLinkResponse),
  );
}

export function getPaymentLinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkResponse' from JSON`,
  );
}
