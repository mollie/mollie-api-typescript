/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export const CreateMandateMethodRequest = {
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Paypal: "paypal",
} as const;
/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export type CreateMandateMethodRequest = ClosedEnum<
  typeof CreateMandateMethodRequest
>;

export type CreateMandateRequestBody = {
  /**
   * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
   */
  id?: string | undefined;
  /**
   * Payment method of the mandate.
   *
   * @remarks
   *
   * SEPA Direct Debit and PayPal mandates can be created directly.
   */
  method: CreateMandateMethodRequest;
  /**
   * The customer's name.
   */
  consumerName: string;
  /**
   * The customer's IBAN. Required for SEPA Direct Debit mandates.
   */
  consumerAccount?: string | null | undefined;
  /**
   * The BIC of the customer's bank.
   */
  consumerBic?: string | null | undefined;
  /**
   * The customer's email address. Required for PayPal mandates.
   */
  consumerEmail?: string | null | undefined;
  /**
   * The date when the mandate was signed in `YYYY-MM-DD` format.
   */
  signatureDate?: string | null | undefined;
  /**
   * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
   *
   * @remarks
   * decline Direct Debit payments if the mandate reference is not unique.
   */
  mandateReference?: string | null | undefined;
  /**
   * The billing agreement ID given by PayPal. For example: `B-12A34567B8901234CD`. Required for PayPal mandates.
   *
   * @remarks
   * Must provide either this field or `payPalVaultId`, but not both.
   */
  paypalBillingAgreementId?: string | null | undefined;
  /**
   * The Vault ID given by PayPal. For example: `8kk8451t`. Required for PayPal mandates.
   *
   * @remarks
   * Must provide either this field or `paypalBillingAgreementId`, but not both.
   */
  payPalVaultId?: string | null | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type CreateMandateRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  requestBody?: CreateMandateRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateMandateNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CreateMandateNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateMandateNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const CreateMandateMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type CreateMandateMode = ClosedEnum<typeof CreateMandateMode>;

/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export const CreateMandateMethodResponse = {
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Paypal: "paypal",
} as const;
/**
 * Payment method of the mandate.
 *
 * @remarks
 *
 * SEPA Direct Debit and PayPal mandates can be created directly.
 */
export type CreateMandateMethodResponse = ClosedEnum<
  typeof CreateMandateMethodResponse
>;

/**
 * The card's label. Available for card mandates, if the card label could be detected.
 */
export const CreateMandateCardLabel = {
  AmericanExpress: "American Express",
  CartaSi: "Carta Si",
  CarteBleue: "Carte Bleue",
  Dankort: "Dankort",
  DinersClub: "Diners Club",
  Discover: "Discover",
  Jcb: "JCB",
  Laser: "Laser",
  Maestro: "Maestro",
  Mastercard: "Mastercard",
  Unionpay: "Unionpay",
  Visa: "Visa",
} as const;
/**
 * The card's label. Available for card mandates, if the card label could be detected.
 */
export type CreateMandateCardLabel = ClosedEnum<typeof CreateMandateCardLabel>;

export type CreateMandateDetails = {
  /**
   * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
   */
  consumerName?: string | null | undefined;
  /**
   * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
   */
  consumerAccount?: string | null | undefined;
  /**
   * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
   */
  consumerBic?: string | null | undefined;
  /**
   * The card holder's name. Available for card mandates.
   */
  cardHolder?: string | null | undefined;
  /**
   * The last four digits of the card number. Available for card mandates.
   */
  cardNumber?: string | null | undefined;
  /**
   * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
   */
  cardExpiryDate?: string | null | undefined;
  /**
   * The card's label. Available for card mandates, if the card label could be detected.
   */
  cardLabel?: CreateMandateCardLabel | null | undefined;
  /**
   * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify
   *
   * @remarks
   * returning customers.
   */
  cardFingerprint?: string | null | undefined;
};

/**
 * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
 *
 * @remarks
 * when we did not received the IBAN yet from the first payment.
 */
export const CreateMandateStatus = {
  Valid: "valid",
  Pending: "pending",
  Invalid: "invalid",
} as const;
/**
 * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
 *
 * @remarks
 * when we did not received the IBAN yet from the first payment.
 */
export type CreateMandateStatus = ClosedEnum<typeof CreateMandateStatus>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateMandateSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer) that this mandate belongs to.
 */
export type CreateMandateCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateMandateDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateMandateLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: CreateMandateSelf | undefined;
  /**
   * The API resource URL of the [customer](get-customer) that this mandate belongs to.
   */
  customer?: CreateMandateCustomer | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: CreateMandateDocumentation | undefined;
};

/**
 * The newly created mandate object.
 */
export type CreateMandateResponse = {
  /**
   * Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: CreateMandateMode | undefined;
  /**
   * Payment method of the mandate.
   *
   * @remarks
   *
   * SEPA Direct Debit and PayPal mandates can be created directly.
   */
  method?: CreateMandateMethodResponse | undefined;
  details?: CreateMandateDetails | undefined;
  /**
   * The date when the mandate was signed in `YYYY-MM-DD` format.
   */
  signatureDate?: string | null | undefined;
  /**
   * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
   *
   * @remarks
   * decline Direct Debit payments if the mandate reference is not unique.
   */
  mandateReference?: string | null | undefined;
  /**
   * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
   *
   * @remarks
   * when we did not received the IBAN yet from the first payment.
   */
  status?: CreateMandateStatus | undefined;
  /**
   * The identifier referring to the [customer](get-customer) this mandate was linked to.
   */
  customerId?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CreateMandateLinks | undefined;
};

/** @internal */
export const CreateMandateMethodRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateMandateMethodRequest
> = z.nativeEnum(CreateMandateMethodRequest);

/** @internal */
export const CreateMandateMethodRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateMandateMethodRequest
> = CreateMandateMethodRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateMethodRequest$ {
  /** @deprecated use `CreateMandateMethodRequest$inboundSchema` instead. */
  export const inboundSchema = CreateMandateMethodRequest$inboundSchema;
  /** @deprecated use `CreateMandateMethodRequest$outboundSchema` instead. */
  export const outboundSchema = CreateMandateMethodRequest$outboundSchema;
}

/** @internal */
export const CreateMandateRequestBody$inboundSchema: z.ZodType<
  CreateMandateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  method: CreateMandateMethodRequest$inboundSchema,
  consumerName: z.string(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  consumerEmail: z.nullable(z.string()).optional(),
  signatureDate: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  paypalBillingAgreementId: z.nullable(z.string()).optional(),
  payPalVaultId: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CreateMandateRequestBody$Outbound = {
  id?: string | undefined;
  method: string;
  consumerName: string;
  consumerAccount?: string | null | undefined;
  consumerBic?: string | null | undefined;
  consumerEmail?: string | null | undefined;
  signatureDate?: string | null | undefined;
  mandateReference?: string | null | undefined;
  paypalBillingAgreementId?: string | null | undefined;
  payPalVaultId?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CreateMandateRequestBody$outboundSchema: z.ZodType<
  CreateMandateRequestBody$Outbound,
  z.ZodTypeDef,
  CreateMandateRequestBody
> = z.object({
  id: z.string().optional(),
  method: CreateMandateMethodRequest$outboundSchema,
  consumerName: z.string(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  consumerEmail: z.nullable(z.string()).optional(),
  signatureDate: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  paypalBillingAgreementId: z.nullable(z.string()).optional(),
  payPalVaultId: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateRequestBody$ {
  /** @deprecated use `CreateMandateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateMandateRequestBody$inboundSchema;
  /** @deprecated use `CreateMandateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateMandateRequestBody$outboundSchema;
  /** @deprecated use `CreateMandateRequestBody$Outbound` instead. */
  export type Outbound = CreateMandateRequestBody$Outbound;
}

export function createMandateRequestBodyToJSON(
  createMandateRequestBody: CreateMandateRequestBody,
): string {
  return JSON.stringify(
    CreateMandateRequestBody$outboundSchema.parse(createMandateRequestBody),
  );
}

export function createMandateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateMandateRequest$inboundSchema: z.ZodType<
  CreateMandateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  RequestBody: z.lazy(() => CreateMandateRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateMandateRequest$Outbound = {
  customerId: string;
  RequestBody?: CreateMandateRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateMandateRequest$outboundSchema: z.ZodType<
  CreateMandateRequest$Outbound,
  z.ZodTypeDef,
  CreateMandateRequest
> = z.object({
  customerId: z.string(),
  requestBody: z.lazy(() => CreateMandateRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateRequest$ {
  /** @deprecated use `CreateMandateRequest$inboundSchema` instead. */
  export const inboundSchema = CreateMandateRequest$inboundSchema;
  /** @deprecated use `CreateMandateRequest$outboundSchema` instead. */
  export const outboundSchema = CreateMandateRequest$outboundSchema;
  /** @deprecated use `CreateMandateRequest$Outbound` instead. */
  export type Outbound = CreateMandateRequest$Outbound;
}

export function createMandateRequestToJSON(
  createMandateRequest: CreateMandateRequest,
): string {
  return JSON.stringify(
    CreateMandateRequest$outboundSchema.parse(createMandateRequest),
  );
}

export function createMandateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateRequest' from JSON`,
  );
}

/** @internal */
export const CreateMandateNotFoundDocumentation$inboundSchema: z.ZodType<
  CreateMandateNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateMandateNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateMandateNotFoundDocumentation$outboundSchema: z.ZodType<
  CreateMandateNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateMandateNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateNotFoundDocumentation$ {
  /** @deprecated use `CreateMandateNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateMandateNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CreateMandateNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateMandateNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CreateMandateNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CreateMandateNotFoundDocumentation$Outbound;
}

export function createMandateNotFoundDocumentationToJSON(
  createMandateNotFoundDocumentation: CreateMandateNotFoundDocumentation,
): string {
  return JSON.stringify(
    CreateMandateNotFoundDocumentation$outboundSchema.parse(
      createMandateNotFoundDocumentation,
    ),
  );
}

export function createMandateNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateMandateNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateMandateNotFoundLinks$inboundSchema: z.ZodType<
  CreateMandateNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => CreateMandateNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type CreateMandateNotFoundLinks$Outbound = {
  documentation: CreateMandateNotFoundDocumentation$Outbound;
};

/** @internal */
export const CreateMandateNotFoundLinks$outboundSchema: z.ZodType<
  CreateMandateNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CreateMandateNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateMandateNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateNotFoundLinks$ {
  /** @deprecated use `CreateMandateNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateMandateNotFoundLinks$inboundSchema;
  /** @deprecated use `CreateMandateNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateMandateNotFoundLinks$outboundSchema;
  /** @deprecated use `CreateMandateNotFoundLinks$Outbound` instead. */
  export type Outbound = CreateMandateNotFoundLinks$Outbound;
}

export function createMandateNotFoundLinksToJSON(
  createMandateNotFoundLinks: CreateMandateNotFoundLinks,
): string {
  return JSON.stringify(
    CreateMandateNotFoundLinks$outboundSchema.parse(createMandateNotFoundLinks),
  );
}

export function createMandateNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CreateMandateMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateMandateMode
> = z.nativeEnum(CreateMandateMode);

/** @internal */
export const CreateMandateMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateMandateMode
> = CreateMandateMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateMode$ {
  /** @deprecated use `CreateMandateMode$inboundSchema` instead. */
  export const inboundSchema = CreateMandateMode$inboundSchema;
  /** @deprecated use `CreateMandateMode$outboundSchema` instead. */
  export const outboundSchema = CreateMandateMode$outboundSchema;
}

/** @internal */
export const CreateMandateMethodResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateMandateMethodResponse
> = z.nativeEnum(CreateMandateMethodResponse);

/** @internal */
export const CreateMandateMethodResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateMandateMethodResponse
> = CreateMandateMethodResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateMethodResponse$ {
  /** @deprecated use `CreateMandateMethodResponse$inboundSchema` instead. */
  export const inboundSchema = CreateMandateMethodResponse$inboundSchema;
  /** @deprecated use `CreateMandateMethodResponse$outboundSchema` instead. */
  export const outboundSchema = CreateMandateMethodResponse$outboundSchema;
}

/** @internal */
export const CreateMandateCardLabel$inboundSchema: z.ZodNativeEnum<
  typeof CreateMandateCardLabel
> = z.nativeEnum(CreateMandateCardLabel);

/** @internal */
export const CreateMandateCardLabel$outboundSchema: z.ZodNativeEnum<
  typeof CreateMandateCardLabel
> = CreateMandateCardLabel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateCardLabel$ {
  /** @deprecated use `CreateMandateCardLabel$inboundSchema` instead. */
  export const inboundSchema = CreateMandateCardLabel$inboundSchema;
  /** @deprecated use `CreateMandateCardLabel$outboundSchema` instead. */
  export const outboundSchema = CreateMandateCardLabel$outboundSchema;
}

/** @internal */
export const CreateMandateDetails$inboundSchema: z.ZodType<
  CreateMandateDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardLabel: z.nullable(CreateMandateCardLabel$inboundSchema).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateMandateDetails$Outbound = {
  consumerName?: string | null | undefined;
  consumerAccount?: string | null | undefined;
  consumerBic?: string | null | undefined;
  cardHolder?: string | null | undefined;
  cardNumber?: string | null | undefined;
  cardExpiryDate?: string | null | undefined;
  cardLabel?: string | null | undefined;
  cardFingerprint?: string | null | undefined;
};

/** @internal */
export const CreateMandateDetails$outboundSchema: z.ZodType<
  CreateMandateDetails$Outbound,
  z.ZodTypeDef,
  CreateMandateDetails
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardLabel: z.nullable(CreateMandateCardLabel$outboundSchema).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateDetails$ {
  /** @deprecated use `CreateMandateDetails$inboundSchema` instead. */
  export const inboundSchema = CreateMandateDetails$inboundSchema;
  /** @deprecated use `CreateMandateDetails$outboundSchema` instead. */
  export const outboundSchema = CreateMandateDetails$outboundSchema;
  /** @deprecated use `CreateMandateDetails$Outbound` instead. */
  export type Outbound = CreateMandateDetails$Outbound;
}

export function createMandateDetailsToJSON(
  createMandateDetails: CreateMandateDetails,
): string {
  return JSON.stringify(
    CreateMandateDetails$outboundSchema.parse(createMandateDetails),
  );
}

export function createMandateDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateDetails' from JSON`,
  );
}

/** @internal */
export const CreateMandateStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateMandateStatus
> = z.nativeEnum(CreateMandateStatus);

/** @internal */
export const CreateMandateStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateMandateStatus
> = CreateMandateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateStatus$ {
  /** @deprecated use `CreateMandateStatus$inboundSchema` instead. */
  export const inboundSchema = CreateMandateStatus$inboundSchema;
  /** @deprecated use `CreateMandateStatus$outboundSchema` instead. */
  export const outboundSchema = CreateMandateStatus$outboundSchema;
}

/** @internal */
export const CreateMandateSelf$inboundSchema: z.ZodType<
  CreateMandateSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateMandateSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateMandateSelf$outboundSchema: z.ZodType<
  CreateMandateSelf$Outbound,
  z.ZodTypeDef,
  CreateMandateSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateSelf$ {
  /** @deprecated use `CreateMandateSelf$inboundSchema` instead. */
  export const inboundSchema = CreateMandateSelf$inboundSchema;
  /** @deprecated use `CreateMandateSelf$outboundSchema` instead. */
  export const outboundSchema = CreateMandateSelf$outboundSchema;
  /** @deprecated use `CreateMandateSelf$Outbound` instead. */
  export type Outbound = CreateMandateSelf$Outbound;
}

export function createMandateSelfToJSON(
  createMandateSelf: CreateMandateSelf,
): string {
  return JSON.stringify(
    CreateMandateSelf$outboundSchema.parse(createMandateSelf),
  );
}

export function createMandateSelfFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateSelf' from JSON`,
  );
}

/** @internal */
export const CreateMandateCustomer$inboundSchema: z.ZodType<
  CreateMandateCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateMandateCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateMandateCustomer$outboundSchema: z.ZodType<
  CreateMandateCustomer$Outbound,
  z.ZodTypeDef,
  CreateMandateCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateCustomer$ {
  /** @deprecated use `CreateMandateCustomer$inboundSchema` instead. */
  export const inboundSchema = CreateMandateCustomer$inboundSchema;
  /** @deprecated use `CreateMandateCustomer$outboundSchema` instead. */
  export const outboundSchema = CreateMandateCustomer$outboundSchema;
  /** @deprecated use `CreateMandateCustomer$Outbound` instead. */
  export type Outbound = CreateMandateCustomer$Outbound;
}

export function createMandateCustomerToJSON(
  createMandateCustomer: CreateMandateCustomer,
): string {
  return JSON.stringify(
    CreateMandateCustomer$outboundSchema.parse(createMandateCustomer),
  );
}

export function createMandateCustomerFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateCustomer' from JSON`,
  );
}

/** @internal */
export const CreateMandateDocumentation$inboundSchema: z.ZodType<
  CreateMandateDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateMandateDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateMandateDocumentation$outboundSchema: z.ZodType<
  CreateMandateDocumentation$Outbound,
  z.ZodTypeDef,
  CreateMandateDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateDocumentation$ {
  /** @deprecated use `CreateMandateDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateMandateDocumentation$inboundSchema;
  /** @deprecated use `CreateMandateDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateMandateDocumentation$outboundSchema;
  /** @deprecated use `CreateMandateDocumentation$Outbound` instead. */
  export type Outbound = CreateMandateDocumentation$Outbound;
}

export function createMandateDocumentationToJSON(
  createMandateDocumentation: CreateMandateDocumentation,
): string {
  return JSON.stringify(
    CreateMandateDocumentation$outboundSchema.parse(createMandateDocumentation),
  );
}

export function createMandateDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateMandateLinks$inboundSchema: z.ZodType<
  CreateMandateLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CreateMandateSelf$inboundSchema).optional(),
  customer: z.lazy(() => CreateMandateCustomer$inboundSchema).optional(),
  documentation: z.lazy(() => CreateMandateDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateMandateLinks$Outbound = {
  self?: CreateMandateSelf$Outbound | undefined;
  customer?: CreateMandateCustomer$Outbound | undefined;
  documentation?: CreateMandateDocumentation$Outbound | undefined;
};

/** @internal */
export const CreateMandateLinks$outboundSchema: z.ZodType<
  CreateMandateLinks$Outbound,
  z.ZodTypeDef,
  CreateMandateLinks
> = z.object({
  self: z.lazy(() => CreateMandateSelf$outboundSchema).optional(),
  customer: z.lazy(() => CreateMandateCustomer$outboundSchema).optional(),
  documentation: z.lazy(() => CreateMandateDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateLinks$ {
  /** @deprecated use `CreateMandateLinks$inboundSchema` instead. */
  export const inboundSchema = CreateMandateLinks$inboundSchema;
  /** @deprecated use `CreateMandateLinks$outboundSchema` instead. */
  export const outboundSchema = CreateMandateLinks$outboundSchema;
  /** @deprecated use `CreateMandateLinks$Outbound` instead. */
  export type Outbound = CreateMandateLinks$Outbound;
}

export function createMandateLinksToJSON(
  createMandateLinks: CreateMandateLinks,
): string {
  return JSON.stringify(
    CreateMandateLinks$outboundSchema.parse(createMandateLinks),
  );
}

export function createMandateLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateLinks' from JSON`,
  );
}

/** @internal */
export const CreateMandateResponse$inboundSchema: z.ZodType<
  CreateMandateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("mandate"),
  id: z.string().optional(),
  mode: CreateMandateMode$inboundSchema.optional(),
  method: CreateMandateMethodResponse$inboundSchema.optional(),
  details: z.lazy(() => CreateMandateDetails$inboundSchema).optional(),
  signatureDate: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  status: CreateMandateStatus$inboundSchema.optional(),
  customerId: z.string().optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => CreateMandateLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateMandateResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  method?: string | undefined;
  details?: CreateMandateDetails$Outbound | undefined;
  signatureDate?: string | null | undefined;
  mandateReference?: string | null | undefined;
  status?: string | undefined;
  customerId?: string | undefined;
  createdAt?: string | undefined;
  _links?: CreateMandateLinks$Outbound | undefined;
};

/** @internal */
export const CreateMandateResponse$outboundSchema: z.ZodType<
  CreateMandateResponse$Outbound,
  z.ZodTypeDef,
  CreateMandateResponse
> = z.object({
  resource: z.string().default("mandate"),
  id: z.string().optional(),
  mode: CreateMandateMode$outboundSchema.optional(),
  method: CreateMandateMethodResponse$outboundSchema.optional(),
  details: z.lazy(() => CreateMandateDetails$outboundSchema).optional(),
  signatureDate: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  status: CreateMandateStatus$outboundSchema.optional(),
  customerId: z.string().optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => CreateMandateLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMandateResponse$ {
  /** @deprecated use `CreateMandateResponse$inboundSchema` instead. */
  export const inboundSchema = CreateMandateResponse$inboundSchema;
  /** @deprecated use `CreateMandateResponse$outboundSchema` instead. */
  export const outboundSchema = CreateMandateResponse$outboundSchema;
  /** @deprecated use `CreateMandateResponse$Outbound` instead. */
  export type Outbound = CreateMandateResponse$Outbound;
}

export function createMandateResponseToJSON(
  createMandateResponse: CreateMandateResponse,
): string {
  return JSON.stringify(
    CreateMandateResponse$outboundSchema.parse(createMandateResponse),
  );
}

export function createMandateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateMandateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMandateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMandateResponse' from JSON`,
  );
}
