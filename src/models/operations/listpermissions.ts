/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListPermissionsRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListPermissionsEmbedded = {
  /**
   * An array of permission objects.
   */
  permissions: Array<models.EntityPermission>;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListPermissionsLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: models.Url | undefined;
};

/**
 * A list of permission objects.
 */
export type ListPermissionsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListPermissionsEmbedded;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListPermissionsLinks;
};

/** @internal */
export const ListPermissionsRequest$inboundSchema: z.ZodType<
  ListPermissionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListPermissionsRequest$Outbound = {
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListPermissionsRequest$outboundSchema: z.ZodType<
  ListPermissionsRequest$Outbound,
  z.ZodTypeDef,
  ListPermissionsRequest
> = z.object({
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPermissionsRequest$ {
  /** @deprecated use `ListPermissionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPermissionsRequest$inboundSchema;
  /** @deprecated use `ListPermissionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPermissionsRequest$outboundSchema;
  /** @deprecated use `ListPermissionsRequest$Outbound` instead. */
  export type Outbound = ListPermissionsRequest$Outbound;
}

export function listPermissionsRequestToJSON(
  listPermissionsRequest: ListPermissionsRequest,
): string {
  return JSON.stringify(
    ListPermissionsRequest$outboundSchema.parse(listPermissionsRequest),
  );
}

export function listPermissionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPermissionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPermissionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPermissionsRequest' from JSON`,
  );
}

/** @internal */
export const ListPermissionsEmbedded$inboundSchema: z.ZodType<
  ListPermissionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  permissions: z.array(models.EntityPermission$inboundSchema),
});

/** @internal */
export type ListPermissionsEmbedded$Outbound = {
  permissions: Array<models.EntityPermission$Outbound>;
};

/** @internal */
export const ListPermissionsEmbedded$outboundSchema: z.ZodType<
  ListPermissionsEmbedded$Outbound,
  z.ZodTypeDef,
  ListPermissionsEmbedded
> = z.object({
  permissions: z.array(models.EntityPermission$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPermissionsEmbedded$ {
  /** @deprecated use `ListPermissionsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListPermissionsEmbedded$inboundSchema;
  /** @deprecated use `ListPermissionsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListPermissionsEmbedded$outboundSchema;
  /** @deprecated use `ListPermissionsEmbedded$Outbound` instead. */
  export type Outbound = ListPermissionsEmbedded$Outbound;
}

export function listPermissionsEmbeddedToJSON(
  listPermissionsEmbedded: ListPermissionsEmbedded,
): string {
  return JSON.stringify(
    ListPermissionsEmbedded$outboundSchema.parse(listPermissionsEmbedded),
  );
}

export function listPermissionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListPermissionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPermissionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPermissionsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListPermissionsLinks$inboundSchema: z.ZodType<
  ListPermissionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema.optional(),
  documentation: models.Url$inboundSchema.optional(),
});

/** @internal */
export type ListPermissionsLinks$Outbound = {
  self?: models.Url$Outbound | undefined;
  documentation?: models.Url$Outbound | undefined;
};

/** @internal */
export const ListPermissionsLinks$outboundSchema: z.ZodType<
  ListPermissionsLinks$Outbound,
  z.ZodTypeDef,
  ListPermissionsLinks
> = z.object({
  self: models.Url$outboundSchema.optional(),
  documentation: models.Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPermissionsLinks$ {
  /** @deprecated use `ListPermissionsLinks$inboundSchema` instead. */
  export const inboundSchema = ListPermissionsLinks$inboundSchema;
  /** @deprecated use `ListPermissionsLinks$outboundSchema` instead. */
  export const outboundSchema = ListPermissionsLinks$outboundSchema;
  /** @deprecated use `ListPermissionsLinks$Outbound` instead. */
  export type Outbound = ListPermissionsLinks$Outbound;
}

export function listPermissionsLinksToJSON(
  listPermissionsLinks: ListPermissionsLinks,
): string {
  return JSON.stringify(
    ListPermissionsLinks$outboundSchema.parse(listPermissionsLinks),
  );
}

export function listPermissionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListPermissionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPermissionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPermissionsLinks' from JSON`,
  );
}

/** @internal */
export const ListPermissionsResponse$inboundSchema: z.ZodType<
  ListPermissionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListPermissionsEmbedded$inboundSchema),
  _links: z.lazy(() => ListPermissionsLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListPermissionsResponse$Outbound = {
  count: number;
  _embedded: ListPermissionsEmbedded$Outbound;
  _links: ListPermissionsLinks$Outbound;
};

/** @internal */
export const ListPermissionsResponse$outboundSchema: z.ZodType<
  ListPermissionsResponse$Outbound,
  z.ZodTypeDef,
  ListPermissionsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListPermissionsEmbedded$outboundSchema),
  links: z.lazy(() => ListPermissionsLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPermissionsResponse$ {
  /** @deprecated use `ListPermissionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPermissionsResponse$inboundSchema;
  /** @deprecated use `ListPermissionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPermissionsResponse$outboundSchema;
  /** @deprecated use `ListPermissionsResponse$Outbound` instead. */
  export type Outbound = ListPermissionsResponse$Outbound;
}

export function listPermissionsResponseToJSON(
  listPermissionsResponse: ListPermissionsResponse,
): string {
  return JSON.stringify(
    ListPermissionsResponse$outboundSchema.parse(listPermissionsResponse),
  );
}

export function listPermissionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPermissionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPermissionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPermissionsResponse' from JSON`,
  );
}
