/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows embedding related API items by appending the following values via the `embed` query string
 *
 * @remarks
 * parameter.
 */
export const ListSettlementRefundsEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows embedding related API items by appending the following values via the `embed` query string
 *
 * @remarks
 * parameter.
 */
export type ListSettlementRefundsEmbed = ClosedEnum<
  typeof ListSettlementRefundsEmbed
>;

export type ListSettlementRefundsRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: ListSettlementRefundsEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementRefundsNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementRefundsNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementRefundsNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementRefundsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementRefundsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementRefundsBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const ListSettlementRefundsMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type ListSettlementRefundsMode = ClosedEnum<
  typeof ListSettlementRefundsMode
>;

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
 *
 * @remarks
 * amount.
 */
export type ListSettlementRefundsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
 * zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
 * the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the
 * [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type ListSettlementRefundsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListSettlementRefundsMetadata =
  | string
  | { [k: string]: any }
  | Array<string>;

/**
 * Refunds may take some time to get confirmed.
 */
export const ListSettlementRefundsStatus = {
  Queued: "queued",
  Pending: "pending",
  Processing: "processing",
  Refunded: "refunded",
  Failed: "failed",
  Canceled: "canceled",
} as const;
/**
 * Refunds may take some time to get confirmed.
 */
export type ListSettlementRefundsStatus = ClosedEnum<
  typeof ListSettlementRefundsStatus
>;

/**
 * Specifies the reference type
 */
export const ListSettlementRefundsType = {
  AcquirerReference: "acquirer-reference",
} as const;
/**
 * Specifies the reference type
 */
export type ListSettlementRefundsType = ClosedEnum<
  typeof ListSettlementRefundsType
>;

export type ListSettlementRefundsExternalReference = {
  /**
   * Specifies the reference type
   */
  type?: ListSettlementRefundsType | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * The amount that will be pulled back.
 */
export type ListSettlementRefundsRoutingReversalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Where the funds will be pulled back from.
 */
export type ListSettlementRefundsSource = {
  /**
   * Required for source type `organization`. The ID of the connected organization the funds should be pulled
   *
   * @remarks
   * back from.
   */
  organizationId?: string | undefined;
};

export type ListSettlementRefundsRoutingReversal = {
  /**
   * The amount that will be pulled back.
   */
  amount?: ListSettlementRefundsRoutingReversalAmount | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: ListSettlementRefundsSource | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementRefundsRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this refund belongs to.
 */
export type ListSettlementRefundsPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
 *
 * @remarks
 * yet settled.
 */
export type ListSettlementRefundsSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementRefundsRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListSettlementRefundsRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListSettlementRefundsRefundSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this refund belongs to.
   */
  payment: ListSettlementRefundsPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
   *
   * @remarks
   * yet settled.
   */
  settlement?: ListSettlementRefundsSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListSettlementRefundsRefundDocumentation;
};

export type ListSettlementRefundsRefund = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
   *
   * @remarks
   * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: ListSettlementRefundsMode | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
   *
   * @remarks
   * amount.
   */
  amount?: ListSettlementRefundsAmount | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
   * zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
   * the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the
   * [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: ListSettlementRefundsSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: string | { [k: string]: any } | Array<string> | null | undefined;
  /**
   * The unique identifier of the payment this refund was created for.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   */
  status?: ListSettlementRefundsStatus | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: ListSettlementRefundsExternalReference | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
   * needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?:
    | Array<ListSettlementRefundsRoutingReversal>
    | null
    | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListSettlementRefundsRefundLinks | undefined;
};

export type ListSettlementRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds?: Array<ListSettlementRefundsRefund> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListSettlementRefundsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListSettlementRefundsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListSettlementRefundsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementRefundsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListSettlementRefundsLinks = {
  /**
   * The URL to the current set of items.
   */
  self: ListSettlementRefundsSelf;
  /**
   * The previous set of items, if available.
   */
  previous: ListSettlementRefundsPrevious | null;
  /**
   * The next set of items, if available.
   */
  next: ListSettlementRefundsNext | null;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListSettlementRefundsDocumentation;
};

/**
 * A list of refund objects. For a complete reference of the refund object, refer to the
 *
 * @remarks
 * [Get refund endpoint](get-refund) documentation.
 */
export type ListSettlementRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListSettlementRefundsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListSettlementRefundsLinks | undefined;
};

/** @internal */
export const ListSettlementRefundsEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsEmbed
> = z.nativeEnum(ListSettlementRefundsEmbed);

/** @internal */
export const ListSettlementRefundsEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsEmbed
> = ListSettlementRefundsEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsEmbed$ {
  /** @deprecated use `ListSettlementRefundsEmbed$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsEmbed$inboundSchema;
  /** @deprecated use `ListSettlementRefundsEmbed$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsEmbed$outboundSchema;
}

/** @internal */
export const ListSettlementRefundsRequest$inboundSchema: z.ZodType<
  ListSettlementRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: ListSettlementRefundsEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListSettlementRefundsRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListSettlementRefundsRequest$outboundSchema: z.ZodType<
  ListSettlementRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: ListSettlementRefundsEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRequest$ {
  /** @deprecated use `ListSettlementRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsRequest$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsRequest$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRequest$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRequest$Outbound;
}

export function listSettlementRefundsRequestToJSON(
  listSettlementRefundsRequest: ListSettlementRefundsRequest,
): string {
  return JSON.stringify(
    ListSettlementRefundsRequest$outboundSchema.parse(
      listSettlementRefundsRequest,
    ),
  );
}

export function listSettlementRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsNotFoundDocumentation$inboundSchema:
  z.ZodType<ListSettlementRefundsNotFoundDocumentation, z.ZodTypeDef, unknown> =
    z.object({
      href: z.string(),
      type: z.string(),
    });

/** @internal */
export type ListSettlementRefundsNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementRefundsNotFoundDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementRefundsNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementRefundsNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsNotFoundDocumentation$ {
  /** @deprecated use `ListSettlementRefundsNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementRefundsNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementRefundsNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementRefundsNotFoundDocumentation$Outbound;
}

export function listSettlementRefundsNotFoundDocumentationToJSON(
  listSettlementRefundsNotFoundDocumentation:
    ListSettlementRefundsNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListSettlementRefundsNotFoundDocumentation$outboundSchema.parse(
      listSettlementRefundsNotFoundDocumentation,
    ),
  );
}

export function listSettlementRefundsNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementRefundsNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementRefundsNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsNotFoundLinks$inboundSchema: z.ZodType<
  ListSettlementRefundsNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementRefundsNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementRefundsNotFoundLinks$Outbound = {
  documentation: ListSettlementRefundsNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListSettlementRefundsNotFoundLinks$outboundSchema: z.ZodType<
  ListSettlementRefundsNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementRefundsNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsNotFoundLinks$ {
  /** @deprecated use `ListSettlementRefundsNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsNotFoundLinks$inboundSchema;
  /** @deprecated use `ListSettlementRefundsNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsNotFoundLinks$outboundSchema;
  /** @deprecated use `ListSettlementRefundsNotFoundLinks$Outbound` instead. */
  export type Outbound = ListSettlementRefundsNotFoundLinks$Outbound;
}

export function listSettlementRefundsNotFoundLinksToJSON(
  listSettlementRefundsNotFoundLinks: ListSettlementRefundsNotFoundLinks,
): string {
  return JSON.stringify(
    ListSettlementRefundsNotFoundLinks$outboundSchema.parse(
      listSettlementRefundsNotFoundLinks,
    ),
  );
}

export function listSettlementRefundsNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsBadRequestDocumentation$inboundSchema:
  z.ZodType<
    ListSettlementRefundsBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListSettlementRefundsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementRefundsBadRequestDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementRefundsBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementRefundsBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsBadRequestDocumentation$ {
  /** @deprecated use `ListSettlementRefundsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementRefundsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementRefundsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementRefundsBadRequestDocumentation$Outbound;
}

export function listSettlementRefundsBadRequestDocumentationToJSON(
  listSettlementRefundsBadRequestDocumentation:
    ListSettlementRefundsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListSettlementRefundsBadRequestDocumentation$outboundSchema.parse(
      listSettlementRefundsBadRequestDocumentation,
    ),
  );
}

export function listSettlementRefundsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementRefundsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementRefundsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsBadRequestLinks$inboundSchema: z.ZodType<
  ListSettlementRefundsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementRefundsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementRefundsBadRequestLinks$Outbound = {
  documentation: ListSettlementRefundsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListSettlementRefundsBadRequestLinks$outboundSchema: z.ZodType<
  ListSettlementRefundsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementRefundsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsBadRequestLinks$ {
  /** @deprecated use `ListSettlementRefundsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListSettlementRefundsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListSettlementRefundsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListSettlementRefundsBadRequestLinks$Outbound;
}

export function listSettlementRefundsBadRequestLinksToJSON(
  listSettlementRefundsBadRequestLinks: ListSettlementRefundsBadRequestLinks,
): string {
  return JSON.stringify(
    ListSettlementRefundsBadRequestLinks$outboundSchema.parse(
      listSettlementRefundsBadRequestLinks,
    ),
  );
}

export function listSettlementRefundsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsMode$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsMode
> = z.nativeEnum(ListSettlementRefundsMode);

/** @internal */
export const ListSettlementRefundsMode$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsMode
> = ListSettlementRefundsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsMode$ {
  /** @deprecated use `ListSettlementRefundsMode$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsMode$inboundSchema;
  /** @deprecated use `ListSettlementRefundsMode$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsMode$outboundSchema;
}

/** @internal */
export const ListSettlementRefundsAmount$inboundSchema: z.ZodType<
  ListSettlementRefundsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementRefundsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementRefundsAmount$outboundSchema: z.ZodType<
  ListSettlementRefundsAmount$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsAmount$ {
  /** @deprecated use `ListSettlementRefundsAmount$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsAmount$inboundSchema;
  /** @deprecated use `ListSettlementRefundsAmount$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsAmount$outboundSchema;
  /** @deprecated use `ListSettlementRefundsAmount$Outbound` instead. */
  export type Outbound = ListSettlementRefundsAmount$Outbound;
}

export function listSettlementRefundsAmountToJSON(
  listSettlementRefundsAmount: ListSettlementRefundsAmount,
): string {
  return JSON.stringify(
    ListSettlementRefundsAmount$outboundSchema.parse(
      listSettlementRefundsAmount,
    ),
  );
}

export function listSettlementRefundsAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsSettlementAmount$inboundSchema: z.ZodType<
  ListSettlementRefundsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementRefundsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementRefundsSettlementAmount$outboundSchema: z.ZodType<
  ListSettlementRefundsSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsSettlementAmount$ {
  /** @deprecated use `ListSettlementRefundsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsSettlementAmount$inboundSchema;
  /** @deprecated use `ListSettlementRefundsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsSettlementAmount$outboundSchema;
  /** @deprecated use `ListSettlementRefundsSettlementAmount$Outbound` instead. */
  export type Outbound = ListSettlementRefundsSettlementAmount$Outbound;
}

export function listSettlementRefundsSettlementAmountToJSON(
  listSettlementRefundsSettlementAmount: ListSettlementRefundsSettlementAmount,
): string {
  return JSON.stringify(
    ListSettlementRefundsSettlementAmount$outboundSchema.parse(
      listSettlementRefundsSettlementAmount,
    ),
  );
}

export function listSettlementRefundsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsMetadata$inboundSchema: z.ZodType<
  ListSettlementRefundsMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any()), z.array(z.string())]);

/** @internal */
export type ListSettlementRefundsMetadata$Outbound = string | {
  [k: string]: any;
} | Array<string>;

/** @internal */
export const ListSettlementRefundsMetadata$outboundSchema: z.ZodType<
  ListSettlementRefundsMetadata$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsMetadata
> = z.union([z.string(), z.record(z.any()), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsMetadata$ {
  /** @deprecated use `ListSettlementRefundsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsMetadata$inboundSchema;
  /** @deprecated use `ListSettlementRefundsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsMetadata$outboundSchema;
  /** @deprecated use `ListSettlementRefundsMetadata$Outbound` instead. */
  export type Outbound = ListSettlementRefundsMetadata$Outbound;
}

export function listSettlementRefundsMetadataToJSON(
  listSettlementRefundsMetadata: ListSettlementRefundsMetadata,
): string {
  return JSON.stringify(
    ListSettlementRefundsMetadata$outboundSchema.parse(
      listSettlementRefundsMetadata,
    ),
  );
}

export function listSettlementRefundsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsMetadata' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsStatus
> = z.nativeEnum(ListSettlementRefundsStatus);

/** @internal */
export const ListSettlementRefundsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsStatus
> = ListSettlementRefundsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsStatus$ {
  /** @deprecated use `ListSettlementRefundsStatus$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsStatus$inboundSchema;
  /** @deprecated use `ListSettlementRefundsStatus$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsStatus$outboundSchema;
}

/** @internal */
export const ListSettlementRefundsType$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsType
> = z.nativeEnum(ListSettlementRefundsType);

/** @internal */
export const ListSettlementRefundsType$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementRefundsType
> = ListSettlementRefundsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsType$ {
  /** @deprecated use `ListSettlementRefundsType$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsType$inboundSchema;
  /** @deprecated use `ListSettlementRefundsType$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsType$outboundSchema;
}

/** @internal */
export const ListSettlementRefundsExternalReference$inboundSchema: z.ZodType<
  ListSettlementRefundsExternalReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListSettlementRefundsType$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type ListSettlementRefundsExternalReference$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const ListSettlementRefundsExternalReference$outboundSchema: z.ZodType<
  ListSettlementRefundsExternalReference$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsExternalReference
> = z.object({
  type: ListSettlementRefundsType$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsExternalReference$ {
  /** @deprecated use `ListSettlementRefundsExternalReference$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsExternalReference$inboundSchema;
  /** @deprecated use `ListSettlementRefundsExternalReference$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsExternalReference$outboundSchema;
  /** @deprecated use `ListSettlementRefundsExternalReference$Outbound` instead. */
  export type Outbound = ListSettlementRefundsExternalReference$Outbound;
}

export function listSettlementRefundsExternalReferenceToJSON(
  listSettlementRefundsExternalReference:
    ListSettlementRefundsExternalReference,
): string {
  return JSON.stringify(
    ListSettlementRefundsExternalReference$outboundSchema.parse(
      listSettlementRefundsExternalReference,
    ),
  );
}

export function listSettlementRefundsExternalReferenceFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsExternalReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsExternalReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsExternalReference' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsRoutingReversalAmount$inboundSchema:
  z.ZodType<ListSettlementRefundsRoutingReversalAmount, z.ZodTypeDef, unknown> =
    z.object({
      currency: z.string(),
      value: z.string(),
    });

/** @internal */
export type ListSettlementRefundsRoutingReversalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementRefundsRoutingReversalAmount$outboundSchema:
  z.ZodType<
    ListSettlementRefundsRoutingReversalAmount$Outbound,
    z.ZodTypeDef,
    ListSettlementRefundsRoutingReversalAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRoutingReversalAmount$ {
  /** @deprecated use `ListSettlementRefundsRoutingReversalAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsRoutingReversalAmount$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRoutingReversalAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsRoutingReversalAmount$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRoutingReversalAmount$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRoutingReversalAmount$Outbound;
}

export function listSettlementRefundsRoutingReversalAmountToJSON(
  listSettlementRefundsRoutingReversalAmount:
    ListSettlementRefundsRoutingReversalAmount,
): string {
  return JSON.stringify(
    ListSettlementRefundsRoutingReversalAmount$outboundSchema.parse(
      listSettlementRefundsRoutingReversalAmount,
    ),
  );
}

export function listSettlementRefundsRoutingReversalAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementRefundsRoutingReversalAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsRoutingReversalAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementRefundsRoutingReversalAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsSource$inboundSchema: z.ZodType<
  ListSettlementRefundsSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string().optional(),
});

/** @internal */
export type ListSettlementRefundsSource$Outbound = {
  organizationId?: string | undefined;
};

/** @internal */
export const ListSettlementRefundsSource$outboundSchema: z.ZodType<
  ListSettlementRefundsSource$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsSource
> = z.object({
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsSource$ {
  /** @deprecated use `ListSettlementRefundsSource$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsSource$inboundSchema;
  /** @deprecated use `ListSettlementRefundsSource$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsSource$outboundSchema;
  /** @deprecated use `ListSettlementRefundsSource$Outbound` instead. */
  export type Outbound = ListSettlementRefundsSource$Outbound;
}

export function listSettlementRefundsSourceToJSON(
  listSettlementRefundsSource: ListSettlementRefundsSource,
): string {
  return JSON.stringify(
    ListSettlementRefundsSource$outboundSchema.parse(
      listSettlementRefundsSource,
    ),
  );
}

export function listSettlementRefundsSourceFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsSource' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsRoutingReversal$inboundSchema: z.ZodType<
  ListSettlementRefundsRoutingReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ListSettlementRefundsRoutingReversalAmount$inboundSchema)
    .optional(),
  source: z.lazy(() => ListSettlementRefundsSource$inboundSchema).optional(),
});

/** @internal */
export type ListSettlementRefundsRoutingReversal$Outbound = {
  amount?: ListSettlementRefundsRoutingReversalAmount$Outbound | undefined;
  source?: ListSettlementRefundsSource$Outbound | undefined;
};

/** @internal */
export const ListSettlementRefundsRoutingReversal$outboundSchema: z.ZodType<
  ListSettlementRefundsRoutingReversal$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsRoutingReversal
> = z.object({
  amount: z.lazy(() =>
    ListSettlementRefundsRoutingReversalAmount$outboundSchema
  ).optional(),
  source: z.lazy(() => ListSettlementRefundsSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRoutingReversal$ {
  /** @deprecated use `ListSettlementRefundsRoutingReversal$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsRoutingReversal$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRoutingReversal$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsRoutingReversal$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRoutingReversal$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRoutingReversal$Outbound;
}

export function listSettlementRefundsRoutingReversalToJSON(
  listSettlementRefundsRoutingReversal: ListSettlementRefundsRoutingReversal,
): string {
  return JSON.stringify(
    ListSettlementRefundsRoutingReversal$outboundSchema.parse(
      listSettlementRefundsRoutingReversal,
    ),
  );
}

export function listSettlementRefundsRoutingReversalFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsRoutingReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsRoutingReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsRoutingReversal' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsRefundSelf$inboundSchema: z.ZodType<
  ListSettlementRefundsRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementRefundsRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementRefundsRefundSelf$outboundSchema: z.ZodType<
  ListSettlementRefundsRefundSelf$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRefundSelf$ {
  /** @deprecated use `ListSettlementRefundsRefundSelf$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsRefundSelf$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRefundSelf$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsRefundSelf$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRefundSelf$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRefundSelf$Outbound;
}

export function listSettlementRefundsRefundSelfToJSON(
  listSettlementRefundsRefundSelf: ListSettlementRefundsRefundSelf,
): string {
  return JSON.stringify(
    ListSettlementRefundsRefundSelf$outboundSchema.parse(
      listSettlementRefundsRefundSelf,
    ),
  );
}

export function listSettlementRefundsRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsRefundSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsPayment$inboundSchema: z.ZodType<
  ListSettlementRefundsPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementRefundsPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementRefundsPayment$outboundSchema: z.ZodType<
  ListSettlementRefundsPayment$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsPayment$ {
  /** @deprecated use `ListSettlementRefundsPayment$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsPayment$inboundSchema;
  /** @deprecated use `ListSettlementRefundsPayment$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsPayment$outboundSchema;
  /** @deprecated use `ListSettlementRefundsPayment$Outbound` instead. */
  export type Outbound = ListSettlementRefundsPayment$Outbound;
}

export function listSettlementRefundsPaymentToJSON(
  listSettlementRefundsPayment: ListSettlementRefundsPayment,
): string {
  return JSON.stringify(
    ListSettlementRefundsPayment$outboundSchema.parse(
      listSettlementRefundsPayment,
    ),
  );
}

export function listSettlementRefundsPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsPayment' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsSettlement$inboundSchema: z.ZodType<
  ListSettlementRefundsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementRefundsSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementRefundsSettlement$outboundSchema: z.ZodType<
  ListSettlementRefundsSettlement$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsSettlement$ {
  /** @deprecated use `ListSettlementRefundsSettlement$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsSettlement$inboundSchema;
  /** @deprecated use `ListSettlementRefundsSettlement$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsSettlement$outboundSchema;
  /** @deprecated use `ListSettlementRefundsSettlement$Outbound` instead. */
  export type Outbound = ListSettlementRefundsSettlement$Outbound;
}

export function listSettlementRefundsSettlementToJSON(
  listSettlementRefundsSettlement: ListSettlementRefundsSettlement,
): string {
  return JSON.stringify(
    ListSettlementRefundsSettlement$outboundSchema.parse(
      listSettlementRefundsSettlement,
    ),
  );
}

export function listSettlementRefundsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsSettlement' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsRefundDocumentation$inboundSchema: z.ZodType<
  ListSettlementRefundsRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementRefundsRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementRefundsRefundDocumentation$outboundSchema: z.ZodType<
  ListSettlementRefundsRefundDocumentation$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRefundDocumentation$ {
  /** @deprecated use `ListSettlementRefundsRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementRefundsRefundDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsRefundDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRefundDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRefundDocumentation$Outbound;
}

export function listSettlementRefundsRefundDocumentationToJSON(
  listSettlementRefundsRefundDocumentation:
    ListSettlementRefundsRefundDocumentation,
): string {
  return JSON.stringify(
    ListSettlementRefundsRefundDocumentation$outboundSchema.parse(
      listSettlementRefundsRefundDocumentation,
    ),
  );
}

export function listSettlementRefundsRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementRefundsRefundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsRefundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementRefundsRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsRefundLinks$inboundSchema: z.ZodType<
  ListSettlementRefundsRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSettlementRefundsRefundSelf$inboundSchema),
  payment: z.lazy(() => ListSettlementRefundsPayment$inboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListSettlementRefundsSettlement$inboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListSettlementRefundsRefundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementRefundsRefundLinks$Outbound = {
  self: ListSettlementRefundsRefundSelf$Outbound;
  payment: ListSettlementRefundsPayment$Outbound;
  settlement?: ListSettlementRefundsSettlement$Outbound | null | undefined;
  documentation: ListSettlementRefundsRefundDocumentation$Outbound;
};

/** @internal */
export const ListSettlementRefundsRefundLinks$outboundSchema: z.ZodType<
  ListSettlementRefundsRefundLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsRefundLinks
> = z.object({
  self: z.lazy(() => ListSettlementRefundsRefundSelf$outboundSchema),
  payment: z.lazy(() => ListSettlementRefundsPayment$outboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListSettlementRefundsSettlement$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListSettlementRefundsRefundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRefundLinks$ {
  /** @deprecated use `ListSettlementRefundsRefundLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsRefundLinks$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRefundLinks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsRefundLinks$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRefundLinks$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRefundLinks$Outbound;
}

export function listSettlementRefundsRefundLinksToJSON(
  listSettlementRefundsRefundLinks: ListSettlementRefundsRefundLinks,
): string {
  return JSON.stringify(
    ListSettlementRefundsRefundLinks$outboundSchema.parse(
      listSettlementRefundsRefundLinks,
    ),
  );
}

export function listSettlementRefundsRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsRefundLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsRefund$inboundSchema: z.ZodType<
  ListSettlementRefundsRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: ListSettlementRefundsMode$inboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListSettlementRefundsAmount$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListSettlementRefundsSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([z.string(), z.record(z.any()), z.array(z.string())]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: ListSettlementRefundsStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    ListSettlementRefundsExternalReference$inboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => ListSettlementRefundsRoutingReversal$inboundSchema)),
  ).optional(),
  _links: z.lazy(() => ListSettlementRefundsRefundLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementRefundsRefund$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: ListSettlementRefundsAmount$Outbound | undefined;
  settlementAmount?:
    | ListSettlementRefundsSettlementAmount$Outbound
    | null
    | undefined;
  metadata?: string | { [k: string]: any } | Array<string> | null | undefined;
  paymentId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?:
    | ListSettlementRefundsExternalReference$Outbound
    | undefined;
  routingReversals?:
    | Array<ListSettlementRefundsRoutingReversal$Outbound>
    | null
    | undefined;
  _links?: ListSettlementRefundsRefundLinks$Outbound | undefined;
};

/** @internal */
export const ListSettlementRefundsRefund$outboundSchema: z.ZodType<
  ListSettlementRefundsRefund$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsRefund
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: ListSettlementRefundsMode$outboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListSettlementRefundsAmount$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListSettlementRefundsSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([z.string(), z.record(z.any()), z.array(z.string())]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: ListSettlementRefundsStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    ListSettlementRefundsExternalReference$outboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => ListSettlementRefundsRoutingReversal$outboundSchema)),
  ).optional(),
  links: z.lazy(() => ListSettlementRefundsRefundLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRefund$ {
  /** @deprecated use `ListSettlementRefundsRefund$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsRefund$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRefund$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsRefund$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRefund$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRefund$Outbound;
}

export function listSettlementRefundsRefundToJSON(
  listSettlementRefundsRefund: ListSettlementRefundsRefund,
): string {
  return JSON.stringify(
    ListSettlementRefundsRefund$outboundSchema.parse(
      listSettlementRefundsRefund,
    ),
  );
}

export function listSettlementRefundsRefundFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsRefund' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsEmbedded$inboundSchema: z.ZodType<
  ListSettlementRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(z.lazy(() => ListSettlementRefundsRefund$inboundSchema))
    .optional(),
});

/** @internal */
export type ListSettlementRefundsEmbedded$Outbound = {
  refunds?: Array<ListSettlementRefundsRefund$Outbound> | undefined;
};

/** @internal */
export const ListSettlementRefundsEmbedded$outboundSchema: z.ZodType<
  ListSettlementRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsEmbedded
> = z.object({
  refunds: z.array(z.lazy(() => ListSettlementRefundsRefund$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsEmbedded$ {
  /** @deprecated use `ListSettlementRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementRefundsEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementRefundsEmbedded$Outbound;
}

export function listSettlementRefundsEmbeddedToJSON(
  listSettlementRefundsEmbedded: ListSettlementRefundsEmbedded,
): string {
  return JSON.stringify(
    ListSettlementRefundsEmbedded$outboundSchema.parse(
      listSettlementRefundsEmbedded,
    ),
  );
}

export function listSettlementRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsSelf$inboundSchema: z.ZodType<
  ListSettlementRefundsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementRefundsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementRefundsSelf$outboundSchema: z.ZodType<
  ListSettlementRefundsSelf$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsSelf$ {
  /** @deprecated use `ListSettlementRefundsSelf$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsSelf$inboundSchema;
  /** @deprecated use `ListSettlementRefundsSelf$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsSelf$outboundSchema;
  /** @deprecated use `ListSettlementRefundsSelf$Outbound` instead. */
  export type Outbound = ListSettlementRefundsSelf$Outbound;
}

export function listSettlementRefundsSelfToJSON(
  listSettlementRefundsSelf: ListSettlementRefundsSelf,
): string {
  return JSON.stringify(
    ListSettlementRefundsSelf$outboundSchema.parse(listSettlementRefundsSelf),
  );
}

export function listSettlementRefundsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsPrevious$inboundSchema: z.ZodType<
  ListSettlementRefundsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementRefundsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementRefundsPrevious$outboundSchema: z.ZodType<
  ListSettlementRefundsPrevious$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsPrevious$ {
  /** @deprecated use `ListSettlementRefundsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsPrevious$inboundSchema;
  /** @deprecated use `ListSettlementRefundsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsPrevious$outboundSchema;
  /** @deprecated use `ListSettlementRefundsPrevious$Outbound` instead. */
  export type Outbound = ListSettlementRefundsPrevious$Outbound;
}

export function listSettlementRefundsPreviousToJSON(
  listSettlementRefundsPrevious: ListSettlementRefundsPrevious,
): string {
  return JSON.stringify(
    ListSettlementRefundsPrevious$outboundSchema.parse(
      listSettlementRefundsPrevious,
    ),
  );
}

export function listSettlementRefundsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsPrevious' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsNext$inboundSchema: z.ZodType<
  ListSettlementRefundsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementRefundsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementRefundsNext$outboundSchema: z.ZodType<
  ListSettlementRefundsNext$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsNext$ {
  /** @deprecated use `ListSettlementRefundsNext$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsNext$inboundSchema;
  /** @deprecated use `ListSettlementRefundsNext$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsNext$outboundSchema;
  /** @deprecated use `ListSettlementRefundsNext$Outbound` instead. */
  export type Outbound = ListSettlementRefundsNext$Outbound;
}

export function listSettlementRefundsNextToJSON(
  listSettlementRefundsNext: ListSettlementRefundsNext,
): string {
  return JSON.stringify(
    ListSettlementRefundsNext$outboundSchema.parse(listSettlementRefundsNext),
  );
}

export function listSettlementRefundsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsNext' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsDocumentation$inboundSchema: z.ZodType<
  ListSettlementRefundsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementRefundsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementRefundsDocumentation$outboundSchema: z.ZodType<
  ListSettlementRefundsDocumentation$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsDocumentation$ {
  /** @deprecated use `ListSettlementRefundsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementRefundsDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementRefundsDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementRefundsDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementRefundsDocumentation$Outbound;
}

export function listSettlementRefundsDocumentationToJSON(
  listSettlementRefundsDocumentation: ListSettlementRefundsDocumentation,
): string {
  return JSON.stringify(
    ListSettlementRefundsDocumentation$outboundSchema.parse(
      listSettlementRefundsDocumentation,
    ),
  );
}

export function listSettlementRefundsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementRefundsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsLinks$inboundSchema: z.ZodType<
  ListSettlementRefundsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSettlementRefundsSelf$inboundSchema),
  previous: z.nullable(
    z.lazy(() => ListSettlementRefundsPrevious$inboundSchema),
  ),
  next: z.nullable(z.lazy(() => ListSettlementRefundsNext$inboundSchema)),
  documentation: z.lazy(() => ListSettlementRefundsDocumentation$inboundSchema),
});

/** @internal */
export type ListSettlementRefundsLinks$Outbound = {
  self: ListSettlementRefundsSelf$Outbound;
  previous: ListSettlementRefundsPrevious$Outbound | null;
  next: ListSettlementRefundsNext$Outbound | null;
  documentation: ListSettlementRefundsDocumentation$Outbound;
};

/** @internal */
export const ListSettlementRefundsLinks$outboundSchema: z.ZodType<
  ListSettlementRefundsLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsLinks
> = z.object({
  self: z.lazy(() => ListSettlementRefundsSelf$outboundSchema),
  previous: z.nullable(
    z.lazy(() => ListSettlementRefundsPrevious$outboundSchema),
  ),
  next: z.nullable(z.lazy(() => ListSettlementRefundsNext$outboundSchema)),
  documentation: z.lazy(() =>
    ListSettlementRefundsDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsLinks$ {
  /** @deprecated use `ListSettlementRefundsLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsLinks$inboundSchema;
  /** @deprecated use `ListSettlementRefundsLinks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsLinks$outboundSchema;
  /** @deprecated use `ListSettlementRefundsLinks$Outbound` instead. */
  export type Outbound = ListSettlementRefundsLinks$Outbound;
}

export function listSettlementRefundsLinksToJSON(
  listSettlementRefundsLinks: ListSettlementRefundsLinks,
): string {
  return JSON.stringify(
    ListSettlementRefundsLinks$outboundSchema.parse(listSettlementRefundsLinks),
  );
}

export function listSettlementRefundsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsResponse$inboundSchema: z.ZodType<
  ListSettlementRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListSettlementRefundsEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => ListSettlementRefundsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementRefundsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListSettlementRefundsEmbedded$Outbound | undefined;
  _links?: ListSettlementRefundsLinks$Outbound | undefined;
};

/** @internal */
export const ListSettlementRefundsResponse$outboundSchema: z.ZodType<
  ListSettlementRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListSettlementRefundsEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => ListSettlementRefundsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsResponse$ {
  /** @deprecated use `ListSettlementRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsResponse$inboundSchema;
  /** @deprecated use `ListSettlementRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsResponse$outboundSchema;
  /** @deprecated use `ListSettlementRefundsResponse$Outbound` instead. */
  export type Outbound = ListSettlementRefundsResponse$Outbound;
}

export function listSettlementRefundsResponseToJSON(
  listSettlementRefundsResponse: ListSettlementRefundsResponse,
): string {
  return JSON.stringify(
    ListSettlementRefundsResponse$outboundSchema.parse(
      listSettlementRefundsResponse,
    ),
  );
}

export function listSettlementRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsResponse' from JSON`,
  );
}
