/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListSettlementRefundsRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListSettlementRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds: Array<models.EntityRefundResponse>;
};

/**
 * A list of refund objects. For a complete reference of the refund object, refer to the
 *
 * @remarks
 * [Get refund endpoint](get-refund) documentation.
 */
export type ListSettlementRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListSettlementRefundsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListSettlementRefundsRequest$inboundSchema: z.ZodType<
  ListSettlementRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListSettlementRefundsRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListSettlementRefundsRequest$outboundSchema: z.ZodType<
  ListSettlementRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsRequest$ {
  /** @deprecated use `ListSettlementRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsRequest$inboundSchema;
  /** @deprecated use `ListSettlementRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsRequest$outboundSchema;
  /** @deprecated use `ListSettlementRefundsRequest$Outbound` instead. */
  export type Outbound = ListSettlementRefundsRequest$Outbound;
}

export function listSettlementRefundsRequestToJSON(
  listSettlementRefundsRequest: ListSettlementRefundsRequest,
): string {
  return JSON.stringify(
    ListSettlementRefundsRequest$outboundSchema.parse(
      listSettlementRefundsRequest,
    ),
  );
}

export function listSettlementRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsEmbedded$inboundSchema: z.ZodType<
  ListSettlementRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(models.EntityRefundResponse$inboundSchema),
});

/** @internal */
export type ListSettlementRefundsEmbedded$Outbound = {
  refunds: Array<models.EntityRefundResponse$Outbound>;
};

/** @internal */
export const ListSettlementRefundsEmbedded$outboundSchema: z.ZodType<
  ListSettlementRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsEmbedded
> = z.object({
  refunds: z.array(models.EntityRefundResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsEmbedded$ {
  /** @deprecated use `ListSettlementRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementRefundsEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementRefundsEmbedded$Outbound;
}

export function listSettlementRefundsEmbeddedToJSON(
  listSettlementRefundsEmbedded: ListSettlementRefundsEmbedded,
): string {
  return JSON.stringify(
    ListSettlementRefundsEmbedded$outboundSchema.parse(
      listSettlementRefundsEmbedded,
    ),
  );
}

export function listSettlementRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementRefundsResponse$inboundSchema: z.ZodType<
  ListSettlementRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListSettlementRefundsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementRefundsResponse$Outbound = {
  count: number;
  _embedded: ListSettlementRefundsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListSettlementRefundsResponse$outboundSchema: z.ZodType<
  ListSettlementRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementRefundsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListSettlementRefundsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementRefundsResponse$ {
  /** @deprecated use `ListSettlementRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementRefundsResponse$inboundSchema;
  /** @deprecated use `ListSettlementRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSettlementRefundsResponse$outboundSchema;
  /** @deprecated use `ListSettlementRefundsResponse$Outbound` instead. */
  export type Outbound = ListSettlementRefundsResponse$Outbound;
}

export function listSettlementRefundsResponseToJSON(
  listSettlementRefundsResponse: ListSettlementRefundsResponse,
): string {
  return JSON.stringify(
    ListSettlementRefundsResponse$outboundSchema.parse(
      listSettlementRefundsResponse,
    ),
  );
}

export function listSettlementRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementRefundsResponse' from JSON`,
  );
}
