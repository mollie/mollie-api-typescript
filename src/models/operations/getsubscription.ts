/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSubscriptionRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * Provide the ID of the related subscription.
   */
  subscriptionId: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSubscriptionNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetSubscriptionNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSubscriptionNotFoundDocumentation;
};

/**
 * The amount for each individual payment that is charged with this subscription. For example, for a monthly subscription of €10, the subscription amount should be set to €10.
 */
export type GetSubscriptionAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type GetSubscriptionApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
 *
 * @remarks
 *
 * Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
 *
 * Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more information.
 */
export type GetSubscriptionApplicationFee = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: GetSubscriptionApplicationFeeAmount | undefined;
  description?: string | undefined;
};

export type GetSubscriptionMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 *
 * @remarks
 *
 * Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
 */
export type GetSubscriptionMetadataUnion =
  | GetSubscriptionMetadata
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSubscriptionSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer) this subscription was created for.
 */
export type GetSubscriptionCustomer = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [mandate](get-mandate) this subscription was created for.
 */
export type GetSubscriptionMandate = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [profile](get-profile) this subscription was created for.
 */
export type GetSubscriptionProfile = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such payments exist (yet).
 */
export type GetSubscriptionPayments = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSubscriptionDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSubscriptionLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetSubscriptionSelf | undefined;
  /**
   * The API resource URL of the [customer](get-customer) this subscription was created for.
   */
  customer?: GetSubscriptionCustomer | null | undefined;
  /**
   * The API resource URL of the [mandate](get-mandate) this subscription was created for.
   */
  mandate?: GetSubscriptionMandate | null | undefined;
  /**
   * The API resource URL of the [profile](get-profile) this subscription was created for.
   */
  profile?: GetSubscriptionProfile | null | undefined;
  /**
   * The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such payments exist (yet).
   */
  payments?: GetSubscriptionPayments | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSubscriptionDocumentation | undefined;
};

/**
 * The subscription object.
 */
export type GetSubscriptionResponse = {
  /**
   * Indicates the response contains a subscription object. Will always contain the string `subscription` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The subscription's current status is directly related to the status of the underlying customer or mandate that is enabling the subscription.
   *
   * @remarks
   *
   * Possible values: `pending` `active` `canceled` `suspended` `completed`
   */
  status?: string | undefined;
  /**
   * The amount for each individual payment that is charged with this subscription. For example, for a monthly subscription of €10, the subscription amount should be set to €10.
   */
  amount?: GetSubscriptionAmount | undefined;
  /**
   * Total number of payments for the subscription. Once this number of payments is reached, the subscription is considered completed.
   *
   * @remarks
   *
   * Test mode subscriptions will get canceled automatically after 10 payments.
   */
  times?: number | null | undefined;
  /**
   * Number of payments left for the subscription.
   */
  timesRemaining?: number | undefined;
  /**
   * Interval to wait between payments, for example `1 month` or `14 days`.
   *
   * @remarks
   *
   * The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
   *
   * Possible values: `... days` `... weeks` `... months`
   */
  interval?: string | undefined;
  /**
   * The start date of the subscription in `YYYY-MM-DD` format.
   */
  startDate?: string | undefined;
  /**
   * The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled, this parameter will not be returned.
   */
  nextPaymentDate?: string | null | undefined;
  /**
   * The subscription's description will be used as the description of the resulting individual payments and so showing up on the bank statement of the consumer.
   *
   * @remarks
   *
   * **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
   */
  description?: string | undefined;
  /**
   * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
   *
   * @remarks
   *
   * Possible values: `creditcard` `directdebit` `paypal`
   */
  method?: string | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * @remarks
   *
   * Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
   *
   * Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more information.
   */
  applicationFee?: GetSubscriptionApplicationFee | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   *
   * @remarks
   *
   * Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
   */
  metadata?:
    | GetSubscriptionMetadata
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * We will call this URL for any payment status changes of payments resulting from this subscription.
   *
   * @remarks
   *
   * This webhook will receive **all** events for the subscription's payments. This may include payment failures as well. Be sure to verify the payment's subscription ID and its status.
   */
  webhookUrl?: string | undefined;
  /**
   * The customer this subscription belongs to.
   */
  customerId?: string | undefined;
  /**
   * The mandate used for this subscription, if any.
   */
  mandateId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the subscription is not canceled (yet).
   */
  canceledAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSubscriptionLinks | undefined;
};

/** @internal */
export const GetSubscriptionRequest$inboundSchema: z.ZodType<
  GetSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  subscriptionId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetSubscriptionRequest$Outbound = {
  customerId: string;
  subscriptionId: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetSubscriptionRequest$outboundSchema: z.ZodType<
  GetSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  GetSubscriptionRequest
> = z.object({
  customerId: z.string(),
  subscriptionId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionRequest$ {
  /** @deprecated use `GetSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionRequest$inboundSchema;
  /** @deprecated use `GetSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionRequest$outboundSchema;
  /** @deprecated use `GetSubscriptionRequest$Outbound` instead. */
  export type Outbound = GetSubscriptionRequest$Outbound;
}

export function getSubscriptionRequestToJSON(
  getSubscriptionRequest: GetSubscriptionRequest,
): string {
  return JSON.stringify(
    GetSubscriptionRequest$outboundSchema.parse(getSubscriptionRequest),
  );
}

export function getSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionRequest' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionNotFoundDocumentation$inboundSchema: z.ZodType<
  GetSubscriptionNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSubscriptionNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSubscriptionNotFoundDocumentation$outboundSchema: z.ZodType<
  GetSubscriptionNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetSubscriptionNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionNotFoundDocumentation$ {
  /** @deprecated use `GetSubscriptionNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetSubscriptionNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetSubscriptionNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetSubscriptionNotFoundDocumentation$Outbound;
}

export function getSubscriptionNotFoundDocumentationToJSON(
  getSubscriptionNotFoundDocumentation: GetSubscriptionNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetSubscriptionNotFoundDocumentation$outboundSchema.parse(
      getSubscriptionNotFoundDocumentation,
    ),
  );
}

export function getSubscriptionNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSubscriptionNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionNotFoundLinks$inboundSchema: z.ZodType<
  GetSubscriptionNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSubscriptionNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSubscriptionNotFoundLinks$Outbound = {
  documentation: GetSubscriptionNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetSubscriptionNotFoundLinks$outboundSchema: z.ZodType<
  GetSubscriptionNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetSubscriptionNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSubscriptionNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionNotFoundLinks$ {
  /** @deprecated use `GetSubscriptionNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionNotFoundLinks$inboundSchema;
  /** @deprecated use `GetSubscriptionNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionNotFoundLinks$outboundSchema;
  /** @deprecated use `GetSubscriptionNotFoundLinks$Outbound` instead. */
  export type Outbound = GetSubscriptionNotFoundLinks$Outbound;
}

export function getSubscriptionNotFoundLinksToJSON(
  getSubscriptionNotFoundLinks: GetSubscriptionNotFoundLinks,
): string {
  return JSON.stringify(
    GetSubscriptionNotFoundLinks$outboundSchema.parse(
      getSubscriptionNotFoundLinks,
    ),
  );
}

export function getSubscriptionNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionAmount$inboundSchema: z.ZodType<
  GetSubscriptionAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSubscriptionAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSubscriptionAmount$outboundSchema: z.ZodType<
  GetSubscriptionAmount$Outbound,
  z.ZodTypeDef,
  GetSubscriptionAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionAmount$ {
  /** @deprecated use `GetSubscriptionAmount$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionAmount$inboundSchema;
  /** @deprecated use `GetSubscriptionAmount$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionAmount$outboundSchema;
  /** @deprecated use `GetSubscriptionAmount$Outbound` instead. */
  export type Outbound = GetSubscriptionAmount$Outbound;
}

export function getSubscriptionAmountToJSON(
  getSubscriptionAmount: GetSubscriptionAmount,
): string {
  return JSON.stringify(
    GetSubscriptionAmount$outboundSchema.parse(getSubscriptionAmount),
  );
}

export function getSubscriptionAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionAmount' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionApplicationFeeAmount$inboundSchema: z.ZodType<
  GetSubscriptionApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSubscriptionApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSubscriptionApplicationFeeAmount$outboundSchema: z.ZodType<
  GetSubscriptionApplicationFeeAmount$Outbound,
  z.ZodTypeDef,
  GetSubscriptionApplicationFeeAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionApplicationFeeAmount$ {
  /** @deprecated use `GetSubscriptionApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSubscriptionApplicationFeeAmount$inboundSchema;
  /** @deprecated use `GetSubscriptionApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSubscriptionApplicationFeeAmount$outboundSchema;
  /** @deprecated use `GetSubscriptionApplicationFeeAmount$Outbound` instead. */
  export type Outbound = GetSubscriptionApplicationFeeAmount$Outbound;
}

export function getSubscriptionApplicationFeeAmountToJSON(
  getSubscriptionApplicationFeeAmount: GetSubscriptionApplicationFeeAmount,
): string {
  return JSON.stringify(
    GetSubscriptionApplicationFeeAmount$outboundSchema.parse(
      getSubscriptionApplicationFeeAmount,
    ),
  );
}

export function getSubscriptionApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionApplicationFeeAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSubscriptionApplicationFeeAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionApplicationFee$inboundSchema: z.ZodType<
  GetSubscriptionApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetSubscriptionApplicationFeeAmount$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type GetSubscriptionApplicationFee$Outbound = {
  amount?: GetSubscriptionApplicationFeeAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const GetSubscriptionApplicationFee$outboundSchema: z.ZodType<
  GetSubscriptionApplicationFee$Outbound,
  z.ZodTypeDef,
  GetSubscriptionApplicationFee
> = z.object({
  amount: z.lazy(() => GetSubscriptionApplicationFeeAmount$outboundSchema)
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionApplicationFee$ {
  /** @deprecated use `GetSubscriptionApplicationFee$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionApplicationFee$inboundSchema;
  /** @deprecated use `GetSubscriptionApplicationFee$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionApplicationFee$outboundSchema;
  /** @deprecated use `GetSubscriptionApplicationFee$Outbound` instead. */
  export type Outbound = GetSubscriptionApplicationFee$Outbound;
}

export function getSubscriptionApplicationFeeToJSON(
  getSubscriptionApplicationFee: GetSubscriptionApplicationFee,
): string {
  return JSON.stringify(
    GetSubscriptionApplicationFee$outboundSchema.parse(
      getSubscriptionApplicationFee,
    ),
  );
}

export function getSubscriptionApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionApplicationFee' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionMetadata$inboundSchema: z.ZodType<
  GetSubscriptionMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetSubscriptionMetadata$Outbound = {};

/** @internal */
export const GetSubscriptionMetadata$outboundSchema: z.ZodType<
  GetSubscriptionMetadata$Outbound,
  z.ZodTypeDef,
  GetSubscriptionMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionMetadata$ {
  /** @deprecated use `GetSubscriptionMetadata$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionMetadata$inboundSchema;
  /** @deprecated use `GetSubscriptionMetadata$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionMetadata$outboundSchema;
  /** @deprecated use `GetSubscriptionMetadata$Outbound` instead. */
  export type Outbound = GetSubscriptionMetadata$Outbound;
}

export function getSubscriptionMetadataToJSON(
  getSubscriptionMetadata: GetSubscriptionMetadata,
): string {
  return JSON.stringify(
    GetSubscriptionMetadata$outboundSchema.parse(getSubscriptionMetadata),
  );
}

export function getSubscriptionMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionMetadata' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionMetadataUnion$inboundSchema: z.ZodType<
  GetSubscriptionMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetSubscriptionMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type GetSubscriptionMetadataUnion$Outbound =
  | GetSubscriptionMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const GetSubscriptionMetadataUnion$outboundSchema: z.ZodType<
  GetSubscriptionMetadataUnion$Outbound,
  z.ZodTypeDef,
  GetSubscriptionMetadataUnion
> = z.union([
  z.lazy(() => GetSubscriptionMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionMetadataUnion$ {
  /** @deprecated use `GetSubscriptionMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionMetadataUnion$inboundSchema;
  /** @deprecated use `GetSubscriptionMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionMetadataUnion$outboundSchema;
  /** @deprecated use `GetSubscriptionMetadataUnion$Outbound` instead. */
  export type Outbound = GetSubscriptionMetadataUnion$Outbound;
}

export function getSubscriptionMetadataUnionToJSON(
  getSubscriptionMetadataUnion: GetSubscriptionMetadataUnion,
): string {
  return JSON.stringify(
    GetSubscriptionMetadataUnion$outboundSchema.parse(
      getSubscriptionMetadataUnion,
    ),
  );
}

export function getSubscriptionMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionMetadataUnion' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionSelf$inboundSchema: z.ZodType<
  GetSubscriptionSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSubscriptionSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSubscriptionSelf$outboundSchema: z.ZodType<
  GetSubscriptionSelf$Outbound,
  z.ZodTypeDef,
  GetSubscriptionSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionSelf$ {
  /** @deprecated use `GetSubscriptionSelf$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionSelf$inboundSchema;
  /** @deprecated use `GetSubscriptionSelf$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionSelf$outboundSchema;
  /** @deprecated use `GetSubscriptionSelf$Outbound` instead. */
  export type Outbound = GetSubscriptionSelf$Outbound;
}

export function getSubscriptionSelfToJSON(
  getSubscriptionSelf: GetSubscriptionSelf,
): string {
  return JSON.stringify(
    GetSubscriptionSelf$outboundSchema.parse(getSubscriptionSelf),
  );
}

export function getSubscriptionSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionSelf' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionCustomer$inboundSchema: z.ZodType<
  GetSubscriptionCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSubscriptionCustomer$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSubscriptionCustomer$outboundSchema: z.ZodType<
  GetSubscriptionCustomer$Outbound,
  z.ZodTypeDef,
  GetSubscriptionCustomer
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionCustomer$ {
  /** @deprecated use `GetSubscriptionCustomer$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionCustomer$inboundSchema;
  /** @deprecated use `GetSubscriptionCustomer$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionCustomer$outboundSchema;
  /** @deprecated use `GetSubscriptionCustomer$Outbound` instead. */
  export type Outbound = GetSubscriptionCustomer$Outbound;
}

export function getSubscriptionCustomerToJSON(
  getSubscriptionCustomer: GetSubscriptionCustomer,
): string {
  return JSON.stringify(
    GetSubscriptionCustomer$outboundSchema.parse(getSubscriptionCustomer),
  );
}

export function getSubscriptionCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionCustomer' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionMandate$inboundSchema: z.ZodType<
  GetSubscriptionMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSubscriptionMandate$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSubscriptionMandate$outboundSchema: z.ZodType<
  GetSubscriptionMandate$Outbound,
  z.ZodTypeDef,
  GetSubscriptionMandate
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionMandate$ {
  /** @deprecated use `GetSubscriptionMandate$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionMandate$inboundSchema;
  /** @deprecated use `GetSubscriptionMandate$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionMandate$outboundSchema;
  /** @deprecated use `GetSubscriptionMandate$Outbound` instead. */
  export type Outbound = GetSubscriptionMandate$Outbound;
}

export function getSubscriptionMandateToJSON(
  getSubscriptionMandate: GetSubscriptionMandate,
): string {
  return JSON.stringify(
    GetSubscriptionMandate$outboundSchema.parse(getSubscriptionMandate),
  );
}

export function getSubscriptionMandateFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionMandate' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionProfile$inboundSchema: z.ZodType<
  GetSubscriptionProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSubscriptionProfile$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSubscriptionProfile$outboundSchema: z.ZodType<
  GetSubscriptionProfile$Outbound,
  z.ZodTypeDef,
  GetSubscriptionProfile
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionProfile$ {
  /** @deprecated use `GetSubscriptionProfile$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionProfile$inboundSchema;
  /** @deprecated use `GetSubscriptionProfile$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionProfile$outboundSchema;
  /** @deprecated use `GetSubscriptionProfile$Outbound` instead. */
  export type Outbound = GetSubscriptionProfile$Outbound;
}

export function getSubscriptionProfileToJSON(
  getSubscriptionProfile: GetSubscriptionProfile,
): string {
  return JSON.stringify(
    GetSubscriptionProfile$outboundSchema.parse(getSubscriptionProfile),
  );
}

export function getSubscriptionProfileFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionProfile' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionPayments$inboundSchema: z.ZodType<
  GetSubscriptionPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSubscriptionPayments$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSubscriptionPayments$outboundSchema: z.ZodType<
  GetSubscriptionPayments$Outbound,
  z.ZodTypeDef,
  GetSubscriptionPayments
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionPayments$ {
  /** @deprecated use `GetSubscriptionPayments$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionPayments$inboundSchema;
  /** @deprecated use `GetSubscriptionPayments$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionPayments$outboundSchema;
  /** @deprecated use `GetSubscriptionPayments$Outbound` instead. */
  export type Outbound = GetSubscriptionPayments$Outbound;
}

export function getSubscriptionPaymentsToJSON(
  getSubscriptionPayments: GetSubscriptionPayments,
): string {
  return JSON.stringify(
    GetSubscriptionPayments$outboundSchema.parse(getSubscriptionPayments),
  );
}

export function getSubscriptionPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionPayments' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionDocumentation$inboundSchema: z.ZodType<
  GetSubscriptionDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSubscriptionDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSubscriptionDocumentation$outboundSchema: z.ZodType<
  GetSubscriptionDocumentation$Outbound,
  z.ZodTypeDef,
  GetSubscriptionDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionDocumentation$ {
  /** @deprecated use `GetSubscriptionDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionDocumentation$inboundSchema;
  /** @deprecated use `GetSubscriptionDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionDocumentation$outboundSchema;
  /** @deprecated use `GetSubscriptionDocumentation$Outbound` instead. */
  export type Outbound = GetSubscriptionDocumentation$Outbound;
}

export function getSubscriptionDocumentationToJSON(
  getSubscriptionDocumentation: GetSubscriptionDocumentation,
): string {
  return JSON.stringify(
    GetSubscriptionDocumentation$outboundSchema.parse(
      getSubscriptionDocumentation,
    ),
  );
}

export function getSubscriptionDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionLinks$inboundSchema: z.ZodType<
  GetSubscriptionLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSubscriptionSelf$inboundSchema).optional(),
  customer: z.nullable(z.lazy(() => GetSubscriptionCustomer$inboundSchema))
    .optional(),
  mandate: z.nullable(z.lazy(() => GetSubscriptionMandate$inboundSchema))
    .optional(),
  profile: z.nullable(z.lazy(() => GetSubscriptionProfile$inboundSchema))
    .optional(),
  payments: z.nullable(z.lazy(() => GetSubscriptionPayments$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSubscriptionDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSubscriptionLinks$Outbound = {
  self?: GetSubscriptionSelf$Outbound | undefined;
  customer?: GetSubscriptionCustomer$Outbound | null | undefined;
  mandate?: GetSubscriptionMandate$Outbound | null | undefined;
  profile?: GetSubscriptionProfile$Outbound | null | undefined;
  payments?: GetSubscriptionPayments$Outbound | null | undefined;
  documentation?: GetSubscriptionDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSubscriptionLinks$outboundSchema: z.ZodType<
  GetSubscriptionLinks$Outbound,
  z.ZodTypeDef,
  GetSubscriptionLinks
> = z.object({
  self: z.lazy(() => GetSubscriptionSelf$outboundSchema).optional(),
  customer: z.nullable(z.lazy(() => GetSubscriptionCustomer$outboundSchema))
    .optional(),
  mandate: z.nullable(z.lazy(() => GetSubscriptionMandate$outboundSchema))
    .optional(),
  profile: z.nullable(z.lazy(() => GetSubscriptionProfile$outboundSchema))
    .optional(),
  payments: z.nullable(z.lazy(() => GetSubscriptionPayments$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSubscriptionDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionLinks$ {
  /** @deprecated use `GetSubscriptionLinks$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionLinks$inboundSchema;
  /** @deprecated use `GetSubscriptionLinks$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionLinks$outboundSchema;
  /** @deprecated use `GetSubscriptionLinks$Outbound` instead. */
  export type Outbound = GetSubscriptionLinks$Outbound;
}

export function getSubscriptionLinksToJSON(
  getSubscriptionLinks: GetSubscriptionLinks,
): string {
  return JSON.stringify(
    GetSubscriptionLinks$outboundSchema.parse(getSubscriptionLinks),
  );
}

export function getSubscriptionLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionLinks' from JSON`,
  );
}

/** @internal */
export const GetSubscriptionResponse$inboundSchema: z.ZodType<
  GetSubscriptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("subscription"),
  id: z.string().optional(),
  mode: z.string().optional(),
  status: z.string().optional(),
  amount: z.lazy(() => GetSubscriptionAmount$inboundSchema).optional(),
  times: z.nullable(z.number().int()).optional(),
  timesRemaining: z.number().int().optional(),
  interval: z.string().optional(),
  startDate: z.string().optional(),
  nextPaymentDate: z.nullable(z.string()).optional(),
  description: z.string().optional(),
  method: z.nullable(z.string()).optional(),
  applicationFee: z.lazy(() => GetSubscriptionApplicationFee$inboundSchema)
    .optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSubscriptionMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  webhookUrl: z.string().optional(),
  customerId: z.string().optional(),
  mandateId: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  canceledAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetSubscriptionLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSubscriptionResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  status?: string | undefined;
  amount?: GetSubscriptionAmount$Outbound | undefined;
  times?: number | null | undefined;
  timesRemaining?: number | undefined;
  interval?: string | undefined;
  startDate?: string | undefined;
  nextPaymentDate?: string | null | undefined;
  description?: string | undefined;
  method?: string | null | undefined;
  applicationFee?: GetSubscriptionApplicationFee$Outbound | undefined;
  metadata?:
    | GetSubscriptionMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  webhookUrl?: string | undefined;
  customerId?: string | undefined;
  mandateId?: string | null | undefined;
  createdAt?: string | undefined;
  canceledAt?: string | null | undefined;
  _links?: GetSubscriptionLinks$Outbound | undefined;
};

/** @internal */
export const GetSubscriptionResponse$outboundSchema: z.ZodType<
  GetSubscriptionResponse$Outbound,
  z.ZodTypeDef,
  GetSubscriptionResponse
> = z.object({
  resource: z.string().default("subscription"),
  id: z.string().optional(),
  mode: z.string().optional(),
  status: z.string().optional(),
  amount: z.lazy(() => GetSubscriptionAmount$outboundSchema).optional(),
  times: z.nullable(z.number().int()).optional(),
  timesRemaining: z.number().int().optional(),
  interval: z.string().optional(),
  startDate: z.string().optional(),
  nextPaymentDate: z.nullable(z.string()).optional(),
  description: z.string().optional(),
  method: z.nullable(z.string()).optional(),
  applicationFee: z.lazy(() => GetSubscriptionApplicationFee$outboundSchema)
    .optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => GetSubscriptionMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  webhookUrl: z.string().optional(),
  customerId: z.string().optional(),
  mandateId: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  canceledAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetSubscriptionLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionResponse$ {
  /** @deprecated use `GetSubscriptionResponse$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionResponse$inboundSchema;
  /** @deprecated use `GetSubscriptionResponse$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionResponse$outboundSchema;
  /** @deprecated use `GetSubscriptionResponse$Outbound` instead. */
  export type Outbound = GetSubscriptionResponse$Outbound;
}

export function getSubscriptionResponseToJSON(
  getSubscriptionResponse: GetSubscriptionResponse,
): string {
  return JSON.stringify(
    GetSubscriptionResponse$outboundSchema.parse(getSubscriptionResponse),
  );
}

export function getSubscriptionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionResponse' from JSON`,
  );
}
