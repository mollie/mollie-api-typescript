/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWebhookRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetWebhookUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type GetWebhookUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetWebhookUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetWebhookNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetWebhookNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetWebhookNotFoundDocumentation;
};

/**
 * The webhook object.
 */
export type GetWebhookResponse = {
  /**
   * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this subscription.
   */
  id?: string | undefined;
  /**
   * The subscription's events destination.
   */
  url?: string | undefined;
  /**
   * The identifier uniquely referring to the profile that created the subscription.
   */
  profileId?: string | undefined;
  /**
   * The subscription's date time of creation.
   */
  createdAt?: string | undefined;
  /**
   * The subscription's name.
   */
  name?: string | undefined;
  /**
   * The events types that are subscribed.
   */
  eventTypes?: Array<string> | undefined;
  /**
   * The subscription's current status.
   *
   * @remarks
   *
   * Possible values: `enabled` `blocked` `disabled`
   */
  status?: string | undefined;
  /**
   * The subscription's mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
};

/** @internal */
export const GetWebhookRequest$inboundSchema: z.ZodType<
  GetWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetWebhookRequest$Outbound = {
  id: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetWebhookRequest$outboundSchema: z.ZodType<
  GetWebhookRequest$Outbound,
  z.ZodTypeDef,
  GetWebhookRequest
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookRequest$ {
  /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = GetWebhookRequest$inboundSchema;
  /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = GetWebhookRequest$outboundSchema;
  /** @deprecated use `GetWebhookRequest$Outbound` instead. */
  export type Outbound = GetWebhookRequest$Outbound;
}

export function getWebhookRequestToJSON(
  getWebhookRequest: GetWebhookRequest,
): string {
  return JSON.stringify(
    GetWebhookRequest$outboundSchema.parse(getWebhookRequest),
  );
}

export function getWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookRequest' from JSON`,
  );
}

/** @internal */
export const GetWebhookUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<GetWebhookUnprocessableEntityDocumentation, z.ZodTypeDef, unknown> =
    z.object({
      href: z.string(),
      type: z.string(),
    });

/** @internal */
export type GetWebhookUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    GetWebhookUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    GetWebhookUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookUnprocessableEntityDocumentation$ {
  /** @deprecated use `GetWebhookUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetWebhookUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `GetWebhookUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetWebhookUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `GetWebhookUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = GetWebhookUnprocessableEntityDocumentation$Outbound;
}

export function getWebhookUnprocessableEntityDocumentationToJSON(
  getWebhookUnprocessableEntityDocumentation:
    GetWebhookUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    GetWebhookUnprocessableEntityDocumentation$outboundSchema.parse(
      getWebhookUnprocessableEntityDocumentation,
    ),
  );
}

export function getWebhookUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetWebhookUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetWebhookUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetWebhookUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const GetWebhookUnprocessableEntityLinks$inboundSchema: z.ZodType<
  GetWebhookUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetWebhookUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetWebhookUnprocessableEntityLinks$Outbound = {
  documentation: GetWebhookUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const GetWebhookUnprocessableEntityLinks$outboundSchema: z.ZodType<
  GetWebhookUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  GetWebhookUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    GetWebhookUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookUnprocessableEntityLinks$ {
  /** @deprecated use `GetWebhookUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema = GetWebhookUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `GetWebhookUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetWebhookUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `GetWebhookUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = GetWebhookUnprocessableEntityLinks$Outbound;
}

export function getWebhookUnprocessableEntityLinksToJSON(
  getWebhookUnprocessableEntityLinks: GetWebhookUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    GetWebhookUnprocessableEntityLinks$outboundSchema.parse(
      getWebhookUnprocessableEntityLinks,
    ),
  );
}

export function getWebhookUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetWebhookUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const GetWebhookNotFoundDocumentation$inboundSchema: z.ZodType<
  GetWebhookNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetWebhookNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetWebhookNotFoundDocumentation$outboundSchema: z.ZodType<
  GetWebhookNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetWebhookNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookNotFoundDocumentation$ {
  /** @deprecated use `GetWebhookNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetWebhookNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetWebhookNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetWebhookNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetWebhookNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetWebhookNotFoundDocumentation$Outbound;
}

export function getWebhookNotFoundDocumentationToJSON(
  getWebhookNotFoundDocumentation: GetWebhookNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetWebhookNotFoundDocumentation$outboundSchema.parse(
      getWebhookNotFoundDocumentation,
    ),
  );
}

export function getWebhookNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetWebhookNotFoundLinks$inboundSchema: z.ZodType<
  GetWebhookNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetWebhookNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetWebhookNotFoundLinks$Outbound = {
  documentation: GetWebhookNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetWebhookNotFoundLinks$outboundSchema: z.ZodType<
  GetWebhookNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetWebhookNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetWebhookNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookNotFoundLinks$ {
  /** @deprecated use `GetWebhookNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetWebhookNotFoundLinks$inboundSchema;
  /** @deprecated use `GetWebhookNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetWebhookNotFoundLinks$outboundSchema;
  /** @deprecated use `GetWebhookNotFoundLinks$Outbound` instead. */
  export type Outbound = GetWebhookNotFoundLinks$Outbound;
}

export function getWebhookNotFoundLinksToJSON(
  getWebhookNotFoundLinks: GetWebhookNotFoundLinks,
): string {
  return JSON.stringify(
    GetWebhookNotFoundLinks$outboundSchema.parse(getWebhookNotFoundLinks),
  );
}

export function getWebhookNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetWebhookResponse$inboundSchema: z.ZodType<
  GetWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("webhook"),
  id: z.string().optional(),
  url: z.string().optional(),
  profileId: z.string().optional(),
  createdAt: z.string().optional(),
  name: z.string().optional(),
  eventTypes: z.array(z.string()).optional(),
  status: z.string().optional(),
  mode: z.string().optional(),
});

/** @internal */
export type GetWebhookResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  url?: string | undefined;
  profileId?: string | undefined;
  createdAt?: string | undefined;
  name?: string | undefined;
  eventTypes?: Array<string> | undefined;
  status?: string | undefined;
  mode?: string | undefined;
};

/** @internal */
export const GetWebhookResponse$outboundSchema: z.ZodType<
  GetWebhookResponse$Outbound,
  z.ZodTypeDef,
  GetWebhookResponse
> = z.object({
  resource: z.string().default("webhook"),
  id: z.string().optional(),
  url: z.string().optional(),
  profileId: z.string().optional(),
  createdAt: z.string().optional(),
  name: z.string().optional(),
  eventTypes: z.array(z.string()).optional(),
  status: z.string().optional(),
  mode: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookResponse$ {
  /** @deprecated use `GetWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = GetWebhookResponse$inboundSchema;
  /** @deprecated use `GetWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = GetWebhookResponse$outboundSchema;
  /** @deprecated use `GetWebhookResponse$Outbound` instead. */
  export type Outbound = GetWebhookResponse$Outbound;
}

export function getWebhookResponseToJSON(
  getWebhookResponse: GetWebhookResponse,
): string {
  return JSON.stringify(
    GetWebhookResponse$outboundSchema.parse(getWebhookResponse),
  );
}

export function getWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookResponse' from JSON`,
  );
}
