/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
 */
export const CreateWebhookEventTypes = {
  PaymentLinkPaid: "payment-link.paid",
  BalanceTransactionCreated: "balance-transaction.created",
  SalesInvoiceCreated: "sales-invoice.created",
  SalesInvoiceIssued: "sales-invoice.issued",
  SalesInvoiceCanceled: "sales-invoice.canceled",
  SalesInvoicePaid: "sales-invoice.paid",
} as const;
/**
 * The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
 */
export type CreateWebhookEventTypes = ClosedEnum<
  typeof CreateWebhookEventTypes
>;

export type CreateWebhookRequest = {
  /**
   * A name that identifies the webhook.
   */
  name: string;
  /**
   * The URL Mollie will send the events to. This URL must be publicly accessible.
   */
  url: string;
  /**
   * The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
   */
  eventTypes: CreateWebhookEventTypes;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateWebhookUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type CreateWebhookUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateWebhookUnprocessableEntityDocumentation;
};

/**
 * The subscription's current status.
 */
export const CreateWebhookStatus = {
  Enabled: "enabled",
  Blocked: "blocked",
  Disabled: "disabled",
} as const;
/**
 * The subscription's current status.
 */
export type CreateWebhookStatus = ClosedEnum<typeof CreateWebhookStatus>;

/**
 * The subscription's mode.
 */
export const CreateWebhookMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * The subscription's mode.
 */
export type CreateWebhookMode = ClosedEnum<typeof CreateWebhookMode>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateWebhookDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateWebhookLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: CreateWebhookDocumentation | undefined;
};

/**
 * The webhook object.
 */
export type CreateWebhookResponse = {
  /**
   * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this subscription.
   */
  id?: string | undefined;
  /**
   * The subscription's events destination.
   */
  url?: string | undefined;
  /**
   * The identifier uniquely referring to the profile that created the subscription.
   */
  profileId?: string | undefined;
  /**
   * The subscription's date time of creation.
   */
  createdAt?: string | undefined;
  /**
   * The subscription's name.
   */
  name?: string | undefined;
  /**
   * The events types that are subscribed.
   */
  eventTypes?: Array<string> | undefined;
  /**
   * The subscription's current status.
   */
  status?: CreateWebhookStatus | undefined;
  /**
   * The subscription's mode.
   */
  mode?: CreateWebhookMode | undefined;
  /**
   * The subscription's secret.
   */
  webhookSecret?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CreateWebhookLinks | undefined;
};

/** @internal */
export const CreateWebhookEventTypes$inboundSchema: z.ZodNativeEnum<
  typeof CreateWebhookEventTypes
> = z.nativeEnum(CreateWebhookEventTypes);

/** @internal */
export const CreateWebhookEventTypes$outboundSchema: z.ZodNativeEnum<
  typeof CreateWebhookEventTypes
> = CreateWebhookEventTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookEventTypes$ {
  /** @deprecated use `CreateWebhookEventTypes$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookEventTypes$inboundSchema;
  /** @deprecated use `CreateWebhookEventTypes$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookEventTypes$outboundSchema;
}

/** @internal */
export const CreateWebhookRequest$inboundSchema: z.ZodType<
  CreateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  url: z.string(),
  eventTypes: CreateWebhookEventTypes$inboundSchema,
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CreateWebhookRequest$Outbound = {
  name: string;
  url: string;
  eventTypes: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CreateWebhookRequest$outboundSchema: z.ZodType<
  CreateWebhookRequest$Outbound,
  z.ZodTypeDef,
  CreateWebhookRequest
> = z.object({
  name: z.string(),
  url: z.string(),
  eventTypes: CreateWebhookEventTypes$outboundSchema,
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookRequest$ {
  /** @deprecated use `CreateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookRequest$inboundSchema;
  /** @deprecated use `CreateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookRequest$outboundSchema;
  /** @deprecated use `CreateWebhookRequest$Outbound` instead. */
  export type Outbound = CreateWebhookRequest$Outbound;
}

export function createWebhookRequestToJSON(
  createWebhookRequest: CreateWebhookRequest,
): string {
  return JSON.stringify(
    CreateWebhookRequest$outboundSchema.parse(createWebhookRequest),
  );
}

export function createWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookRequest' from JSON`,
  );
}

/** @internal */
export const CreateWebhookUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    CreateWebhookUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type CreateWebhookUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateWebhookUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    CreateWebhookUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    CreateWebhookUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookUnprocessableEntityDocumentation$ {
  /** @deprecated use `CreateWebhookUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateWebhookUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `CreateWebhookUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateWebhookUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `CreateWebhookUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = CreateWebhookUnprocessableEntityDocumentation$Outbound;
}

export function createWebhookUnprocessableEntityDocumentationToJSON(
  createWebhookUnprocessableEntityDocumentation:
    CreateWebhookUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    CreateWebhookUnprocessableEntityDocumentation$outboundSchema.parse(
      createWebhookUnprocessableEntityDocumentation,
    ),
  );
}

export function createWebhookUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateWebhookUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateWebhookUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateWebhookUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateWebhookUnprocessableEntityLinks$inboundSchema: z.ZodType<
  CreateWebhookUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateWebhookUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateWebhookUnprocessableEntityLinks$Outbound = {
  documentation: CreateWebhookUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const CreateWebhookUnprocessableEntityLinks$outboundSchema: z.ZodType<
  CreateWebhookUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  CreateWebhookUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateWebhookUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookUnprocessableEntityLinks$ {
  /** @deprecated use `CreateWebhookUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateWebhookUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `CreateWebhookUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateWebhookUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `CreateWebhookUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = CreateWebhookUnprocessableEntityLinks$Outbound;
}

export function createWebhookUnprocessableEntityLinksToJSON(
  createWebhookUnprocessableEntityLinks: CreateWebhookUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    CreateWebhookUnprocessableEntityLinks$outboundSchema.parse(
      createWebhookUnprocessableEntityLinks,
    ),
  );
}

export function createWebhookUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateWebhookUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const CreateWebhookStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateWebhookStatus
> = z.nativeEnum(CreateWebhookStatus);

/** @internal */
export const CreateWebhookStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateWebhookStatus
> = CreateWebhookStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookStatus$ {
  /** @deprecated use `CreateWebhookStatus$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookStatus$inboundSchema;
  /** @deprecated use `CreateWebhookStatus$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookStatus$outboundSchema;
}

/** @internal */
export const CreateWebhookMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateWebhookMode
> = z.nativeEnum(CreateWebhookMode);

/** @internal */
export const CreateWebhookMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateWebhookMode
> = CreateWebhookMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookMode$ {
  /** @deprecated use `CreateWebhookMode$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookMode$inboundSchema;
  /** @deprecated use `CreateWebhookMode$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookMode$outboundSchema;
}

/** @internal */
export const CreateWebhookDocumentation$inboundSchema: z.ZodType<
  CreateWebhookDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateWebhookDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateWebhookDocumentation$outboundSchema: z.ZodType<
  CreateWebhookDocumentation$Outbound,
  z.ZodTypeDef,
  CreateWebhookDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookDocumentation$ {
  /** @deprecated use `CreateWebhookDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookDocumentation$inboundSchema;
  /** @deprecated use `CreateWebhookDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookDocumentation$outboundSchema;
  /** @deprecated use `CreateWebhookDocumentation$Outbound` instead. */
  export type Outbound = CreateWebhookDocumentation$Outbound;
}

export function createWebhookDocumentationToJSON(
  createWebhookDocumentation: CreateWebhookDocumentation,
): string {
  return JSON.stringify(
    CreateWebhookDocumentation$outboundSchema.parse(createWebhookDocumentation),
  );
}

export function createWebhookDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateWebhookLinks$inboundSchema: z.ZodType<
  CreateWebhookLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => CreateWebhookDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateWebhookLinks$Outbound = {
  documentation?: CreateWebhookDocumentation$Outbound | undefined;
};

/** @internal */
export const CreateWebhookLinks$outboundSchema: z.ZodType<
  CreateWebhookLinks$Outbound,
  z.ZodTypeDef,
  CreateWebhookLinks
> = z.object({
  documentation: z.lazy(() => CreateWebhookDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookLinks$ {
  /** @deprecated use `CreateWebhookLinks$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookLinks$inboundSchema;
  /** @deprecated use `CreateWebhookLinks$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookLinks$outboundSchema;
  /** @deprecated use `CreateWebhookLinks$Outbound` instead. */
  export type Outbound = CreateWebhookLinks$Outbound;
}

export function createWebhookLinksToJSON(
  createWebhookLinks: CreateWebhookLinks,
): string {
  return JSON.stringify(
    CreateWebhookLinks$outboundSchema.parse(createWebhookLinks),
  );
}

export function createWebhookLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookLinks' from JSON`,
  );
}

/** @internal */
export const CreateWebhookResponse$inboundSchema: z.ZodType<
  CreateWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("webhook"),
  id: z.string().optional(),
  url: z.string().optional(),
  profileId: z.string().optional(),
  createdAt: z.string().optional(),
  name: z.string().optional(),
  eventTypes: z.array(z.string()).optional(),
  status: CreateWebhookStatus$inboundSchema.optional(),
  mode: CreateWebhookMode$inboundSchema.optional(),
  webhookSecret: z.string().optional(),
  _links: z.lazy(() => CreateWebhookLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateWebhookResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  url?: string | undefined;
  profileId?: string | undefined;
  createdAt?: string | undefined;
  name?: string | undefined;
  eventTypes?: Array<string> | undefined;
  status?: string | undefined;
  mode?: string | undefined;
  webhookSecret?: string | undefined;
  _links?: CreateWebhookLinks$Outbound | undefined;
};

/** @internal */
export const CreateWebhookResponse$outboundSchema: z.ZodType<
  CreateWebhookResponse$Outbound,
  z.ZodTypeDef,
  CreateWebhookResponse
> = z.object({
  resource: z.string().default("webhook"),
  id: z.string().optional(),
  url: z.string().optional(),
  profileId: z.string().optional(),
  createdAt: z.string().optional(),
  name: z.string().optional(),
  eventTypes: z.array(z.string()).optional(),
  status: CreateWebhookStatus$outboundSchema.optional(),
  mode: CreateWebhookMode$outboundSchema.optional(),
  webhookSecret: z.string().optional(),
  links: z.lazy(() => CreateWebhookLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookResponse$ {
  /** @deprecated use `CreateWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookResponse$inboundSchema;
  /** @deprecated use `CreateWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookResponse$outboundSchema;
  /** @deprecated use `CreateWebhookResponse$Outbound` instead. */
  export type Outbound = CreateWebhookResponse$Outbound;
}

export function createWebhookResponseToJSON(
  createWebhookResponse: CreateWebhookResponse,
): string {
  return JSON.stringify(
    CreateWebhookResponse$outboundSchema.parse(createWebhookResponse),
  );
}

export function createWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookResponse' from JSON`,
  );
}
