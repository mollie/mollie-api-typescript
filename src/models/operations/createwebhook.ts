/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateWebhookRequestBody = {
  /**
   * A name that identifies the webhook.
   */
  name: string;
  /**
   * The URL Mollie will send the events to. This URL must be publicly accessible.
   */
  url: string;
  /**
   * The event's type
   */
  webhookEventTypes: models.WebhookEventTypes;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type CreateWebhookRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: CreateWebhookRequestBody | undefined;
};

/** @internal */
export const CreateWebhookRequestBody$inboundSchema: z.ZodType<
  CreateWebhookRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  url: z.string(),
  eventTypes: models.WebhookEventTypes$inboundSchema,
  testmode: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "eventTypes": "webhookEventTypes",
  });
});

/** @internal */
export type CreateWebhookRequestBody$Outbound = {
  name: string;
  url: string;
  eventTypes: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CreateWebhookRequestBody$outboundSchema: z.ZodType<
  CreateWebhookRequestBody$Outbound,
  z.ZodTypeDef,
  CreateWebhookRequestBody
> = z.object({
  name: z.string(),
  url: z.string(),
  webhookEventTypes: models.WebhookEventTypes$outboundSchema,
  testmode: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    webhookEventTypes: "eventTypes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookRequestBody$ {
  /** @deprecated use `CreateWebhookRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookRequestBody$inboundSchema;
  /** @deprecated use `CreateWebhookRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookRequestBody$outboundSchema;
  /** @deprecated use `CreateWebhookRequestBody$Outbound` instead. */
  export type Outbound = CreateWebhookRequestBody$Outbound;
}

export function createWebhookRequestBodyToJSON(
  createWebhookRequestBody: CreateWebhookRequestBody,
): string {
  return JSON.stringify(
    CreateWebhookRequestBody$outboundSchema.parse(createWebhookRequestBody),
  );
}

export function createWebhookRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateWebhookRequest$inboundSchema: z.ZodType<
  CreateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => CreateWebhookRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateWebhookRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  RequestBody?: CreateWebhookRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateWebhookRequest$outboundSchema: z.ZodType<
  CreateWebhookRequest$Outbound,
  z.ZodTypeDef,
  CreateWebhookRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => CreateWebhookRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookRequest$ {
  /** @deprecated use `CreateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookRequest$inboundSchema;
  /** @deprecated use `CreateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookRequest$outboundSchema;
  /** @deprecated use `CreateWebhookRequest$Outbound` instead. */
  export type Outbound = CreateWebhookRequest$Outbound;
}

export function createWebhookRequestToJSON(
  createWebhookRequest: CreateWebhookRequest,
): string {
  return JSON.stringify(
    CreateWebhookRequest$outboundSchema.parse(createWebhookRequest),
  );
}

export function createWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookRequest' from JSON`,
  );
}
