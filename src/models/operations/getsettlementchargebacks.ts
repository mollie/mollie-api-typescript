/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export const GetSettlementChargebacksEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export type GetSettlementChargebacksEmbed = ClosedEnum<
  typeof GetSettlementChargebacksEmbed
>;

export type GetSettlementChargebacksRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to embed additional information via the `embed` query string parameter.
   */
  embed?: GetSettlementChargebacksEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementChargebacksNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementChargebacksNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementChargebacksNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementChargebacksBadRequestDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementChargebacksBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementChargebacksBadRequestDocumentation;
};

/**
 * The amount charged back by the customer.
 */
export type GetSettlementChargebacksAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * The amount is a **negative** amount.
 *
 * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type GetSettlementChargebacksSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
 */
export type GetSettlementChargebacksReason = {
  /**
   * Technical code provided by the bank.
   */
  code: string;
  /**
   * A more detailed human-friendly description.
   */
  description: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementChargebacksChargebackSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
 */
export type GetSettlementChargebacksPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if not yet settled.
 */
export type GetSettlementChargebacksSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementChargebacksChargebackDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementChargebacksChargebackLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetSettlementChargebacksChargebackSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
   */
  payment: GetSettlementChargebacksPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if not yet settled.
   */
  settlement?: GetSettlementChargebacksSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: GetSettlementChargebacksChargebackDocumentation;
};

export type GetSettlementChargebacksChargeback = {
  /**
   * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
   */
  id: string;
  /**
   * The amount charged back by the customer.
   */
  amount: GetSettlementChargebacksAmount;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * The amount is a **negative** amount.
   *
   * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?:
    | GetSettlementChargebacksSettlementAmount
    | null
    | undefined;
  /**
   * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
   */
  reason?: GetSettlementChargebacksReason | null | undefined;
  /**
   * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  reversedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetSettlementChargebacksChargebackLinks;
};

export type GetSettlementChargebacksEmbedded = {
  /**
   * A list of chargeback objects.
   */
  chargebacks?: Array<GetSettlementChargebacksChargeback> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type GetSettlementChargebacksSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type GetSettlementChargebacksPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type GetSettlementChargebacksNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementChargebacksDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementChargebacksLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: GetSettlementChargebacksSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: GetSettlementChargebacksPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: GetSettlementChargebacksNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSettlementChargebacksDocumentation | undefined;
};

/**
 * A list of chargeback objects.
 */
export type GetSettlementChargebacksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: GetSettlementChargebacksEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSettlementChargebacksLinks | undefined;
};

/** @internal */
export const GetSettlementChargebacksEmbed$inboundSchema: z.ZodNativeEnum<
  typeof GetSettlementChargebacksEmbed
> = z.nativeEnum(GetSettlementChargebacksEmbed);

/** @internal */
export const GetSettlementChargebacksEmbed$outboundSchema: z.ZodNativeEnum<
  typeof GetSettlementChargebacksEmbed
> = GetSettlementChargebacksEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksEmbed$ {
  /** @deprecated use `GetSettlementChargebacksEmbed$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksEmbed$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksEmbed$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksEmbed$outboundSchema;
}

/** @internal */
export const GetSettlementChargebacksRequest$inboundSchema: z.ZodType<
  GetSettlementChargebacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: GetSettlementChargebacksEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetSettlementChargebacksRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit: number | null;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetSettlementChargebacksRequest$outboundSchema: z.ZodType<
  GetSettlementChargebacksRequest$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: GetSettlementChargebacksEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksRequest$ {
  /** @deprecated use `GetSettlementChargebacksRequest$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksRequest$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksRequest$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksRequest$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksRequest$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksRequest$Outbound;
}

export function getSettlementChargebacksRequestToJSON(
  getSettlementChargebacksRequest: GetSettlementChargebacksRequest,
): string {
  return JSON.stringify(
    GetSettlementChargebacksRequest$outboundSchema.parse(
      getSettlementChargebacksRequest,
    ),
  );
}

export function getSettlementChargebacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksRequest' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksNotFoundDocumentation$inboundSchema:
  z.ZodType<
    GetSettlementChargebacksNotFoundDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetSettlementChargebacksNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacksNotFoundDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementChargebacksNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementChargebacksNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksNotFoundDocumentation$ {
  /** @deprecated use `GetSettlementChargebacksNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksNotFoundDocumentation$Outbound;
}

export function getSettlementChargebacksNotFoundDocumentationToJSON(
  getSettlementChargebacksNotFoundDocumentation:
    GetSettlementChargebacksNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetSettlementChargebacksNotFoundDocumentation$outboundSchema.parse(
      getSettlementChargebacksNotFoundDocumentation,
    ),
  );
}

export function getSettlementChargebacksNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementChargebacksNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementChargebacksNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksNotFoundLinks$inboundSchema: z.ZodType<
  GetSettlementChargebacksNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementChargebacksNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementChargebacksNotFoundLinks$Outbound = {
  documentation: GetSettlementChargebacksNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetSettlementChargebacksNotFoundLinks$outboundSchema: z.ZodType<
  GetSettlementChargebacksNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementChargebacksNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksNotFoundLinks$ {
  /** @deprecated use `GetSettlementChargebacksNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksNotFoundLinks$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksNotFoundLinks$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksNotFoundLinks$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksNotFoundLinks$Outbound;
}

export function getSettlementChargebacksNotFoundLinksToJSON(
  getSettlementChargebacksNotFoundLinks: GetSettlementChargebacksNotFoundLinks,
): string {
  return JSON.stringify(
    GetSettlementChargebacksNotFoundLinks$outboundSchema.parse(
      getSettlementChargebacksNotFoundLinks,
    ),
  );
}

export function getSettlementChargebacksNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksBadRequestDocumentation$inboundSchema:
  z.ZodType<
    GetSettlementChargebacksBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetSettlementChargebacksBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacksBadRequestDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementChargebacksBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementChargebacksBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksBadRequestDocumentation$ {
  /** @deprecated use `GetSettlementChargebacksBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksBadRequestDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksBadRequestDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksBadRequestDocumentation$Outbound` instead. */
  export type Outbound =
    GetSettlementChargebacksBadRequestDocumentation$Outbound;
}

export function getSettlementChargebacksBadRequestDocumentationToJSON(
  getSettlementChargebacksBadRequestDocumentation:
    GetSettlementChargebacksBadRequestDocumentation,
): string {
  return JSON.stringify(
    GetSettlementChargebacksBadRequestDocumentation$outboundSchema.parse(
      getSettlementChargebacksBadRequestDocumentation,
    ),
  );
}

export function getSettlementChargebacksBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementChargebacksBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementChargebacksBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksBadRequestLinks$inboundSchema: z.ZodType<
  GetSettlementChargebacksBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementChargebacksBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementChargebacksBadRequestLinks$Outbound = {
  documentation: GetSettlementChargebacksBadRequestDocumentation$Outbound;
};

/** @internal */
export const GetSettlementChargebacksBadRequestLinks$outboundSchema: z.ZodType<
  GetSettlementChargebacksBadRequestLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementChargebacksBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksBadRequestLinks$ {
  /** @deprecated use `GetSettlementChargebacksBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksBadRequestLinks$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksBadRequestLinks$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksBadRequestLinks$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksBadRequestLinks$Outbound;
}

export function getSettlementChargebacksBadRequestLinksToJSON(
  getSettlementChargebacksBadRequestLinks:
    GetSettlementChargebacksBadRequestLinks,
): string {
  return JSON.stringify(
    GetSettlementChargebacksBadRequestLinks$outboundSchema.parse(
      getSettlementChargebacksBadRequestLinks,
    ),
  );
}

export function getSettlementChargebacksBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementChargebacksBadRequestLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksBadRequestLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementChargebacksBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksAmount$inboundSchema: z.ZodType<
  GetSettlementChargebacksAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementChargebacksAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementChargebacksAmount$outboundSchema: z.ZodType<
  GetSettlementChargebacksAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksAmount$ {
  /** @deprecated use `GetSettlementChargebacksAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksAmount$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksAmount$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksAmount$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksAmount$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksAmount$Outbound;
}

export function getSettlementChargebacksAmountToJSON(
  getSettlementChargebacksAmount: GetSettlementChargebacksAmount,
): string {
  return JSON.stringify(
    GetSettlementChargebacksAmount$outboundSchema.parse(
      getSettlementChargebacksAmount,
    ),
  );
}

export function getSettlementChargebacksAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksSettlementAmount$inboundSchema: z.ZodType<
  GetSettlementChargebacksSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementChargebacksSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementChargebacksSettlementAmount$outboundSchema: z.ZodType<
  GetSettlementChargebacksSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksSettlementAmount$ {
  /** @deprecated use `GetSettlementChargebacksSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksSettlementAmount$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksSettlementAmount$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksSettlementAmount$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksSettlementAmount$Outbound;
}

export function getSettlementChargebacksSettlementAmountToJSON(
  getSettlementChargebacksSettlementAmount:
    GetSettlementChargebacksSettlementAmount,
): string {
  return JSON.stringify(
    GetSettlementChargebacksSettlementAmount$outboundSchema.parse(
      getSettlementChargebacksSettlementAmount,
    ),
  );
}

export function getSettlementChargebacksSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementChargebacksSettlementAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksSettlementAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementChargebacksSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksReason$inboundSchema: z.ZodType<
  GetSettlementChargebacksReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  description: z.string(),
});

/** @internal */
export type GetSettlementChargebacksReason$Outbound = {
  code: string;
  description: string;
};

/** @internal */
export const GetSettlementChargebacksReason$outboundSchema: z.ZodType<
  GetSettlementChargebacksReason$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksReason
> = z.object({
  code: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksReason$ {
  /** @deprecated use `GetSettlementChargebacksReason$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksReason$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksReason$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksReason$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksReason$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksReason$Outbound;
}

export function getSettlementChargebacksReasonToJSON(
  getSettlementChargebacksReason: GetSettlementChargebacksReason,
): string {
  return JSON.stringify(
    GetSettlementChargebacksReason$outboundSchema.parse(
      getSettlementChargebacksReason,
    ),
  );
}

export function getSettlementChargebacksReasonFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksReason' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksChargebackSelf$inboundSchema: z.ZodType<
  GetSettlementChargebacksChargebackSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementChargebacksChargebackSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacksChargebackSelf$outboundSchema: z.ZodType<
  GetSettlementChargebacksChargebackSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksChargebackSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksChargebackSelf$ {
  /** @deprecated use `GetSettlementChargebacksChargebackSelf$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksChargebackSelf$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargebackSelf$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksChargebackSelf$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargebackSelf$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksChargebackSelf$Outbound;
}

export function getSettlementChargebacksChargebackSelfToJSON(
  getSettlementChargebacksChargebackSelf:
    GetSettlementChargebacksChargebackSelf,
): string {
  return JSON.stringify(
    GetSettlementChargebacksChargebackSelf$outboundSchema.parse(
      getSettlementChargebacksChargebackSelf,
    ),
  );
}

export function getSettlementChargebacksChargebackSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksChargebackSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksChargebackSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksChargebackSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksPayment$inboundSchema: z.ZodType<
  GetSettlementChargebacksPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementChargebacksPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacksPayment$outboundSchema: z.ZodType<
  GetSettlementChargebacksPayment$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksPayment$ {
  /** @deprecated use `GetSettlementChargebacksPayment$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksPayment$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksPayment$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksPayment$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksPayment$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksPayment$Outbound;
}

export function getSettlementChargebacksPaymentToJSON(
  getSettlementChargebacksPayment: GetSettlementChargebacksPayment,
): string {
  return JSON.stringify(
    GetSettlementChargebacksPayment$outboundSchema.parse(
      getSettlementChargebacksPayment,
    ),
  );
}

export function getSettlementChargebacksPaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksPayment' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksSettlement$inboundSchema: z.ZodType<
  GetSettlementChargebacksSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementChargebacksSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementChargebacksSettlement$outboundSchema: z.ZodType<
  GetSettlementChargebacksSettlement$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksSettlement$ {
  /** @deprecated use `GetSettlementChargebacksSettlement$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksSettlement$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksSettlement$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksSettlement$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksSettlement$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksSettlement$Outbound;
}

export function getSettlementChargebacksSettlementToJSON(
  getSettlementChargebacksSettlement: GetSettlementChargebacksSettlement,
): string {
  return JSON.stringify(
    GetSettlementChargebacksSettlement$outboundSchema.parse(
      getSettlementChargebacksSettlement,
    ),
  );
}

export function getSettlementChargebacksSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksSettlement' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksChargebackDocumentation$inboundSchema:
  z.ZodType<
    GetSettlementChargebacksChargebackDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetSettlementChargebacksChargebackDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacksChargebackDocumentation$outboundSchema:
  z.ZodType<
    GetSettlementChargebacksChargebackDocumentation$Outbound,
    z.ZodTypeDef,
    GetSettlementChargebacksChargebackDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksChargebackDocumentation$ {
  /** @deprecated use `GetSettlementChargebacksChargebackDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksChargebackDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargebackDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksChargebackDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargebackDocumentation$Outbound` instead. */
  export type Outbound =
    GetSettlementChargebacksChargebackDocumentation$Outbound;
}

export function getSettlementChargebacksChargebackDocumentationToJSON(
  getSettlementChargebacksChargebackDocumentation:
    GetSettlementChargebacksChargebackDocumentation,
): string {
  return JSON.stringify(
    GetSettlementChargebacksChargebackDocumentation$outboundSchema.parse(
      getSettlementChargebacksChargebackDocumentation,
    ),
  );
}

export function getSettlementChargebacksChargebackDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementChargebacksChargebackDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksChargebackDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementChargebacksChargebackDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksChargebackLinks$inboundSchema: z.ZodType<
  GetSettlementChargebacksChargebackLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementChargebacksChargebackSelf$inboundSchema),
  payment: z.lazy(() => GetSettlementChargebacksPayment$inboundSchema),
  settlement: z.nullable(
    z.lazy(() => GetSettlementChargebacksSettlement$inboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    GetSettlementChargebacksChargebackDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetSettlementChargebacksChargebackLinks$Outbound = {
  self: GetSettlementChargebacksChargebackSelf$Outbound;
  payment: GetSettlementChargebacksPayment$Outbound;
  settlement?: GetSettlementChargebacksSettlement$Outbound | null | undefined;
  documentation: GetSettlementChargebacksChargebackDocumentation$Outbound;
};

/** @internal */
export const GetSettlementChargebacksChargebackLinks$outboundSchema: z.ZodType<
  GetSettlementChargebacksChargebackLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksChargebackLinks
> = z.object({
  self: z.lazy(() => GetSettlementChargebacksChargebackSelf$outboundSchema),
  payment: z.lazy(() => GetSettlementChargebacksPayment$outboundSchema),
  settlement: z.nullable(
    z.lazy(() => GetSettlementChargebacksSettlement$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    GetSettlementChargebacksChargebackDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksChargebackLinks$ {
  /** @deprecated use `GetSettlementChargebacksChargebackLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksChargebackLinks$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargebackLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksChargebackLinks$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargebackLinks$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksChargebackLinks$Outbound;
}

export function getSettlementChargebacksChargebackLinksToJSON(
  getSettlementChargebacksChargebackLinks:
    GetSettlementChargebacksChargebackLinks,
): string {
  return JSON.stringify(
    GetSettlementChargebacksChargebackLinks$outboundSchema.parse(
      getSettlementChargebacksChargebackLinks,
    ),
  );
}

export function getSettlementChargebacksChargebackLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetSettlementChargebacksChargebackLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksChargebackLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetSettlementChargebacksChargebackLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksChargeback$inboundSchema: z.ZodType<
  GetSettlementChargebacksChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => GetSettlementChargebacksAmount$inboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => GetSettlementChargebacksSettlementAmount$inboundSchema),
  ).optional(),
  reason: z.nullable(z.lazy(() => GetSettlementChargebacksReason$inboundSchema))
    .optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetSettlementChargebacksChargebackLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementChargebacksChargeback$Outbound = {
  resource: string;
  id: string;
  amount: GetSettlementChargebacksAmount$Outbound;
  settlementAmount?:
    | GetSettlementChargebacksSettlementAmount$Outbound
    | null
    | undefined;
  reason?: GetSettlementChargebacksReason$Outbound | null | undefined;
  paymentId: string;
  settlementId?: string | null | undefined;
  createdAt: string;
  reversedAt?: string | null | undefined;
  _links: GetSettlementChargebacksChargebackLinks$Outbound;
};

/** @internal */
export const GetSettlementChargebacksChargeback$outboundSchema: z.ZodType<
  GetSettlementChargebacksChargeback$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksChargeback
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => GetSettlementChargebacksAmount$outboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => GetSettlementChargebacksSettlementAmount$outboundSchema),
  ).optional(),
  reason: z.nullable(
    z.lazy(() => GetSettlementChargebacksReason$outboundSchema),
  ).optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetSettlementChargebacksChargebackLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksChargeback$ {
  /** @deprecated use `GetSettlementChargebacksChargeback$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksChargeback$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargeback$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksChargeback$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksChargeback$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksChargeback$Outbound;
}

export function getSettlementChargebacksChargebackToJSON(
  getSettlementChargebacksChargeback: GetSettlementChargebacksChargeback,
): string {
  return JSON.stringify(
    GetSettlementChargebacksChargeback$outboundSchema.parse(
      getSettlementChargebacksChargeback,
    ),
  );
}

export function getSettlementChargebacksChargebackFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksChargeback' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksEmbedded$inboundSchema: z.ZodType<
  GetSettlementChargebacksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  chargebacks: z.array(
    z.lazy(() => GetSettlementChargebacksChargeback$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetSettlementChargebacksEmbedded$Outbound = {
  chargebacks?: Array<GetSettlementChargebacksChargeback$Outbound> | undefined;
};

/** @internal */
export const GetSettlementChargebacksEmbedded$outboundSchema: z.ZodType<
  GetSettlementChargebacksEmbedded$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksEmbedded
> = z.object({
  chargebacks: z.array(
    z.lazy(() => GetSettlementChargebacksChargeback$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksEmbedded$ {
  /** @deprecated use `GetSettlementChargebacksEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksEmbedded$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksEmbedded$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksEmbedded$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksEmbedded$Outbound;
}

export function getSettlementChargebacksEmbeddedToJSON(
  getSettlementChargebacksEmbedded: GetSettlementChargebacksEmbedded,
): string {
  return JSON.stringify(
    GetSettlementChargebacksEmbedded$outboundSchema.parse(
      getSettlementChargebacksEmbedded,
    ),
  );
}

export function getSettlementChargebacksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksEmbedded' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksSelf$inboundSchema: z.ZodType<
  GetSettlementChargebacksSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementChargebacksSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacksSelf$outboundSchema: z.ZodType<
  GetSettlementChargebacksSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksSelf$ {
  /** @deprecated use `GetSettlementChargebacksSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksSelf$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksSelf$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksSelf$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksSelf$Outbound;
}

export function getSettlementChargebacksSelfToJSON(
  getSettlementChargebacksSelf: GetSettlementChargebacksSelf,
): string {
  return JSON.stringify(
    GetSettlementChargebacksSelf$outboundSchema.parse(
      getSettlementChargebacksSelf,
    ),
  );
}

export function getSettlementChargebacksSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksPrevious$inboundSchema: z.ZodType<
  GetSettlementChargebacksPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementChargebacksPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementChargebacksPrevious$outboundSchema: z.ZodType<
  GetSettlementChargebacksPrevious$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksPrevious$ {
  /** @deprecated use `GetSettlementChargebacksPrevious$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksPrevious$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksPrevious$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksPrevious$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksPrevious$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksPrevious$Outbound;
}

export function getSettlementChargebacksPreviousToJSON(
  getSettlementChargebacksPrevious: GetSettlementChargebacksPrevious,
): string {
  return JSON.stringify(
    GetSettlementChargebacksPrevious$outboundSchema.parse(
      getSettlementChargebacksPrevious,
    ),
  );
}

export function getSettlementChargebacksPreviousFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksPrevious' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksNext$inboundSchema: z.ZodType<
  GetSettlementChargebacksNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementChargebacksNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementChargebacksNext$outboundSchema: z.ZodType<
  GetSettlementChargebacksNext$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksNext$ {
  /** @deprecated use `GetSettlementChargebacksNext$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksNext$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksNext$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksNext$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksNext$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksNext$Outbound;
}

export function getSettlementChargebacksNextToJSON(
  getSettlementChargebacksNext: GetSettlementChargebacksNext,
): string {
  return JSON.stringify(
    GetSettlementChargebacksNext$outboundSchema.parse(
      getSettlementChargebacksNext,
    ),
  );
}

export function getSettlementChargebacksNextFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksNext' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksDocumentation$inboundSchema: z.ZodType<
  GetSettlementChargebacksDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementChargebacksDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacksDocumentation$outboundSchema: z.ZodType<
  GetSettlementChargebacksDocumentation$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksDocumentation$ {
  /** @deprecated use `GetSettlementChargebacksDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementChargebacksDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementChargebacksDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksDocumentation$Outbound;
}

export function getSettlementChargebacksDocumentationToJSON(
  getSettlementChargebacksDocumentation: GetSettlementChargebacksDocumentation,
): string {
  return JSON.stringify(
    GetSettlementChargebacksDocumentation$outboundSchema.parse(
      getSettlementChargebacksDocumentation,
    ),
  );
}

export function getSettlementChargebacksDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementChargebacksDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksLinks$inboundSchema: z.ZodType<
  GetSettlementChargebacksLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementChargebacksSelf$inboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => GetSettlementChargebacksPrevious$inboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => GetSettlementChargebacksNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    GetSettlementChargebacksDocumentation$inboundSchema
  ).optional(),
});

/** @internal */
export type GetSettlementChargebacksLinks$Outbound = {
  self?: GetSettlementChargebacksSelf$Outbound | undefined;
  previous?: GetSettlementChargebacksPrevious$Outbound | null | undefined;
  next?: GetSettlementChargebacksNext$Outbound | null | undefined;
  documentation?: GetSettlementChargebacksDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSettlementChargebacksLinks$outboundSchema: z.ZodType<
  GetSettlementChargebacksLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksLinks
> = z.object({
  self: z.lazy(() => GetSettlementChargebacksSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => GetSettlementChargebacksPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => GetSettlementChargebacksNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    GetSettlementChargebacksDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksLinks$ {
  /** @deprecated use `GetSettlementChargebacksLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksLinks$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksLinks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksLinks$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksLinks$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksLinks$Outbound;
}

export function getSettlementChargebacksLinksToJSON(
  getSettlementChargebacksLinks: GetSettlementChargebacksLinks,
): string {
  return JSON.stringify(
    GetSettlementChargebacksLinks$outboundSchema.parse(
      getSettlementChargebacksLinks,
    ),
  );
}

export function getSettlementChargebacksLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacksResponse$inboundSchema: z.ZodType<
  GetSettlementChargebacksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => GetSettlementChargebacksEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => GetSettlementChargebacksLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementChargebacksResponse$Outbound = {
  count?: number | undefined;
  _embedded?: GetSettlementChargebacksEmbedded$Outbound | undefined;
  _links?: GetSettlementChargebacksLinks$Outbound | undefined;
};

/** @internal */
export const GetSettlementChargebacksResponse$outboundSchema: z.ZodType<
  GetSettlementChargebacksResponse$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacksResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => GetSettlementChargebacksEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => GetSettlementChargebacksLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacksResponse$ {
  /** @deprecated use `GetSettlementChargebacksResponse$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacksResponse$inboundSchema;
  /** @deprecated use `GetSettlementChargebacksResponse$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacksResponse$outboundSchema;
  /** @deprecated use `GetSettlementChargebacksResponse$Outbound` instead. */
  export type Outbound = GetSettlementChargebacksResponse$Outbound;
}

export function getSettlementChargebacksResponseToJSON(
  getSettlementChargebacksResponse: GetSettlementChargebacksResponse,
): string {
  return JSON.stringify(
    GetSettlementChargebacksResponse$outboundSchema.parse(
      getSettlementChargebacksResponse,
    ),
  );
}

export function getSettlementChargebacksResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacksResponse' from JSON`,
  );
}
