/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListClientsRequest = {
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
};

/**
 * The commission object.
 */
export type ListClientsCommission = {
  /**
   * The commission count.
   */
  count?: number | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListClientsLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  organization?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  onboarding?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: models.Url | undefined;
};

export type ClientEmbedded = {
  organization?: models.EntityOrganization | undefined;
  onboarding?: models.EntityOnboardingStatus | undefined;
  capabilities?: models.EntityCapability | undefined;
};

export type Client = {
  /**
   * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this client. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The commission object.
   */
  commission?: ListClientsCommission | null | undefined;
  /**
   * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
   *
   * @remarks
   * format.
   */
  organizationCreatedAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListClientsLinks | undefined;
  embedded?: ClientEmbedded | undefined;
};

export type ListClientsEmbedded = {
  /**
   * An array of client objects. For a complete reference of the client object, refer to the
   *
   * @remarks
   * [Get client endpoint](get-client) documentation.
   */
  clients?: Array<Client> | undefined;
};

/**
 * A list of client objects. For a complete reference of the client object, refer to the
 *
 * @remarks
 * [Get client endpoint](get-client) documentation.
 */
export type ListClientsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListClientsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: models.ListLinks | undefined;
};

/** @internal */
export const ListClientsRequest$inboundSchema: z.ZodType<
  ListClientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  embed: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type ListClientsRequest$Outbound = {
  embed?: string | null | undefined;
  from?: string | null | undefined;
  limit?: number | null | undefined;
};

/** @internal */
export const ListClientsRequest$outboundSchema: z.ZodType<
  ListClientsRequest$Outbound,
  z.ZodTypeDef,
  ListClientsRequest
> = z.object({
  embed: z.nullable(z.string()).optional(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsRequest$ {
  /** @deprecated use `ListClientsRequest$inboundSchema` instead. */
  export const inboundSchema = ListClientsRequest$inboundSchema;
  /** @deprecated use `ListClientsRequest$outboundSchema` instead. */
  export const outboundSchema = ListClientsRequest$outboundSchema;
  /** @deprecated use `ListClientsRequest$Outbound` instead. */
  export type Outbound = ListClientsRequest$Outbound;
}

export function listClientsRequestToJSON(
  listClientsRequest: ListClientsRequest,
): string {
  return JSON.stringify(
    ListClientsRequest$outboundSchema.parse(listClientsRequest),
  );
}

export function listClientsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsRequest' from JSON`,
  );
}

/** @internal */
export const ListClientsCommission$inboundSchema: z.ZodType<
  ListClientsCommission,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
});

/** @internal */
export type ListClientsCommission$Outbound = {
  count?: number | undefined;
};

/** @internal */
export const ListClientsCommission$outboundSchema: z.ZodType<
  ListClientsCommission$Outbound,
  z.ZodTypeDef,
  ListClientsCommission
> = z.object({
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsCommission$ {
  /** @deprecated use `ListClientsCommission$inboundSchema` instead. */
  export const inboundSchema = ListClientsCommission$inboundSchema;
  /** @deprecated use `ListClientsCommission$outboundSchema` instead. */
  export const outboundSchema = ListClientsCommission$outboundSchema;
  /** @deprecated use `ListClientsCommission$Outbound` instead. */
  export type Outbound = ListClientsCommission$Outbound;
}

export function listClientsCommissionToJSON(
  listClientsCommission: ListClientsCommission,
): string {
  return JSON.stringify(
    ListClientsCommission$outboundSchema.parse(listClientsCommission),
  );
}

export function listClientsCommissionFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsCommission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsCommission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsCommission' from JSON`,
  );
}

/** @internal */
export const ListClientsLinks$inboundSchema: z.ZodType<
  ListClientsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema.optional(),
  organization: models.Url$inboundSchema.optional(),
  onboarding: models.Url$inboundSchema.optional(),
  documentation: models.Url$inboundSchema.optional(),
});

/** @internal */
export type ListClientsLinks$Outbound = {
  self?: models.Url$Outbound | undefined;
  organization?: models.Url$Outbound | undefined;
  onboarding?: models.Url$Outbound | undefined;
  documentation?: models.Url$Outbound | undefined;
};

/** @internal */
export const ListClientsLinks$outboundSchema: z.ZodType<
  ListClientsLinks$Outbound,
  z.ZodTypeDef,
  ListClientsLinks
> = z.object({
  self: models.Url$outboundSchema.optional(),
  organization: models.Url$outboundSchema.optional(),
  onboarding: models.Url$outboundSchema.optional(),
  documentation: models.Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsLinks$ {
  /** @deprecated use `ListClientsLinks$inboundSchema` instead. */
  export const inboundSchema = ListClientsLinks$inboundSchema;
  /** @deprecated use `ListClientsLinks$outboundSchema` instead. */
  export const outboundSchema = ListClientsLinks$outboundSchema;
  /** @deprecated use `ListClientsLinks$Outbound` instead. */
  export type Outbound = ListClientsLinks$Outbound;
}

export function listClientsLinksToJSON(
  listClientsLinks: ListClientsLinks,
): string {
  return JSON.stringify(
    ListClientsLinks$outboundSchema.parse(listClientsLinks),
  );
}

export function listClientsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsLinks' from JSON`,
  );
}

/** @internal */
export const ClientEmbedded$inboundSchema: z.ZodType<
  ClientEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: models.EntityOrganization$inboundSchema.optional(),
  onboarding: models.EntityOnboardingStatus$inboundSchema.optional(),
  capabilities: models.EntityCapability$inboundSchema.optional(),
});

/** @internal */
export type ClientEmbedded$Outbound = {
  organization?: models.EntityOrganization$Outbound | undefined;
  onboarding?: models.EntityOnboardingStatus$Outbound | undefined;
  capabilities?: models.EntityCapability$Outbound | undefined;
};

/** @internal */
export const ClientEmbedded$outboundSchema: z.ZodType<
  ClientEmbedded$Outbound,
  z.ZodTypeDef,
  ClientEmbedded
> = z.object({
  organization: models.EntityOrganization$outboundSchema.optional(),
  onboarding: models.EntityOnboardingStatus$outboundSchema.optional(),
  capabilities: models.EntityCapability$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientEmbedded$ {
  /** @deprecated use `ClientEmbedded$inboundSchema` instead. */
  export const inboundSchema = ClientEmbedded$inboundSchema;
  /** @deprecated use `ClientEmbedded$outboundSchema` instead. */
  export const outboundSchema = ClientEmbedded$outboundSchema;
  /** @deprecated use `ClientEmbedded$Outbound` instead. */
  export type Outbound = ClientEmbedded$Outbound;
}

export function clientEmbeddedToJSON(clientEmbedded: ClientEmbedded): string {
  return JSON.stringify(ClientEmbedded$outboundSchema.parse(clientEmbedded));
}

export function clientEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ClientEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientEmbedded' from JSON`,
  );
}

/** @internal */
export const Client$inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z
  .object({
    resource: z.string().optional(),
    id: z.string().optional(),
    commission: z.nullable(z.lazy(() => ListClientsCommission$inboundSchema))
      .optional(),
    organizationCreatedAt: z.string().optional(),
    _links: z.lazy(() => ListClientsLinks$inboundSchema).optional(),
    _embedded: z.lazy(() => ClientEmbedded$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
      "_embedded": "embedded",
    });
  });

/** @internal */
export type Client$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  commission?: ListClientsCommission$Outbound | null | undefined;
  organizationCreatedAt?: string | undefined;
  _links?: ListClientsLinks$Outbound | undefined;
  _embedded?: ClientEmbedded$Outbound | undefined;
};

/** @internal */
export const Client$outboundSchema: z.ZodType<
  Client$Outbound,
  z.ZodTypeDef,
  Client
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  commission: z.nullable(z.lazy(() => ListClientsCommission$outboundSchema))
    .optional(),
  organizationCreatedAt: z.string().optional(),
  links: z.lazy(() => ListClientsLinks$outboundSchema).optional(),
  embedded: z.lazy(() => ClientEmbedded$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Client$ {
  /** @deprecated use `Client$inboundSchema` instead. */
  export const inboundSchema = Client$inboundSchema;
  /** @deprecated use `Client$outboundSchema` instead. */
  export const outboundSchema = Client$outboundSchema;
  /** @deprecated use `Client$Outbound` instead. */
  export type Outbound = Client$Outbound;
}

export function clientToJSON(client: Client): string {
  return JSON.stringify(Client$outboundSchema.parse(client));
}

export function clientFromJSON(
  jsonString: string,
): SafeParseResult<Client, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Client$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Client' from JSON`,
  );
}

/** @internal */
export const ListClientsEmbedded$inboundSchema: z.ZodType<
  ListClientsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  clients: z.array(z.lazy(() => Client$inboundSchema)).optional(),
});

/** @internal */
export type ListClientsEmbedded$Outbound = {
  clients?: Array<Client$Outbound> | undefined;
};

/** @internal */
export const ListClientsEmbedded$outboundSchema: z.ZodType<
  ListClientsEmbedded$Outbound,
  z.ZodTypeDef,
  ListClientsEmbedded
> = z.object({
  clients: z.array(z.lazy(() => Client$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsEmbedded$ {
  /** @deprecated use `ListClientsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListClientsEmbedded$inboundSchema;
  /** @deprecated use `ListClientsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListClientsEmbedded$outboundSchema;
  /** @deprecated use `ListClientsEmbedded$Outbound` instead. */
  export type Outbound = ListClientsEmbedded$Outbound;
}

export function listClientsEmbeddedToJSON(
  listClientsEmbedded: ListClientsEmbedded,
): string {
  return JSON.stringify(
    ListClientsEmbedded$outboundSchema.parse(listClientsEmbedded),
  );
}

export function listClientsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListClientsResponse$inboundSchema: z.ZodType<
  ListClientsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListClientsEmbedded$inboundSchema).optional(),
  _links: models.ListLinks$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListClientsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListClientsEmbedded$Outbound | undefined;
  _links?: models.ListLinks$Outbound | undefined;
};

/** @internal */
export const ListClientsResponse$outboundSchema: z.ZodType<
  ListClientsResponse$Outbound,
  z.ZodTypeDef,
  ListClientsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListClientsEmbedded$outboundSchema).optional(),
  links: models.ListLinks$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsResponse$ {
  /** @deprecated use `ListClientsResponse$inboundSchema` instead. */
  export const inboundSchema = ListClientsResponse$inboundSchema;
  /** @deprecated use `ListClientsResponse$outboundSchema` instead. */
  export const outboundSchema = ListClientsResponse$outboundSchema;
  /** @deprecated use `ListClientsResponse$Outbound` instead. */
  export type Outbound = ListClientsResponse$Outbound;
}

export function listClientsResponseToJSON(
  listClientsResponse: ListClientsResponse,
): string {
  return JSON.stringify(
    ListClientsResponse$outboundSchema.parse(listClientsResponse),
  );
}

export function listClientsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsResponse' from JSON`,
  );
}
