/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListClientsRequest = {
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
   *
   * @remarks
   *
   * * `organization`: Include the organization of the client. Available for `signuplink` partners, or for `oauth` partners with the `organizations.read` scope.
   * * `onboarding`: Include the onboarding status of the client. Available for `signuplink` partners, or for `oauth` partners with the `onboarding.read` scope.
   * * `capabilities`: Include the [capabilities](list-capabilities) of the client organization. Available for *oauth* partners with the `onboarding.read` scope.
   */
  embed?: string | null | undefined;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListClientsNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListClientsNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListClientsNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListClientsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListClientsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListClientsBadRequestDocumentation;
};

/**
 * The commission object.
 */
export type ListClientsCommission = {
  /**
   * The commission count.
   */
  count?: number | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ClientSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the client's organization.
 */
export type ListClientsLinksOrganization = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the client's onboarding status.
 */
export type ListClientsLinksOnboarding = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ClientDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ClientLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: ClientSelf | undefined;
  /**
   * The API resource URL of the client's organization.
   */
  organization?: ListClientsLinksOrganization | undefined;
  /**
   * The API resource URL of the client's onboarding status.
   */
  onboarding?: ListClientsLinksOnboarding | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ClientDocumentation | undefined;
};

/**
 * The address of the organization.
 */
export type ListClientsAddress = {
  /**
   * A street and street number.
   */
  streetAndNumber?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   */
  postalCode?: string | undefined;
  city?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ClientOrganizationSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the organization's Mollie dashboard.
 */
export type ListClientsOrganizationDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ClientOrganizationDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ClientOrganizationLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: ClientOrganizationSelf | undefined;
  /**
   * Direct link to the organization's Mollie dashboard.
   */
  dashboard?: ListClientsOrganizationDashboard | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ClientOrganizationDocumentation | undefined;
};

export type ListClientsOrganization = {
  /**
   * Indicates the response contains an organization object. Will always contain the string `organization` for this resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this organization. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The email address associated with the organization.
   */
  email?: string | undefined;
  /**
   * The preferred locale of the merchant, as set in their Mollie dashboard.
   */
  locale?: string | undefined;
  /**
   * The address of the organization.
   */
  address?: ListClientsAddress | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | undefined;
  /**
   * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are verified against the international registry *VIES*.
   *
   * @remarks
   *
   * The field is not present for merchants residing in other countries.
   */
  vatNumber?: string | null | undefined;
  /**
   * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United Kingdom, and shifted VAT for merchants in the European Union.
   *
   * @remarks
   *
   * The field is not present for merchants residing in other countries.
   *
   * Possible values: `dutch` `british` `shifted`
   */
  vatRegulation?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ClientOrganizationLinks | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ClientOnboardingSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to complete their onboarding.
 */
export type ListClientsOnboardingDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the organization.
 */
export type ListClientsOnboardingOrganization = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ClientOnboardingDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ClientOnboardingLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: ClientOnboardingSelf | undefined;
  /**
   * Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to complete their onboarding.
   */
  dashboard?: ListClientsOnboardingDashboard | undefined;
  /**
   * The API resource URL of the organization.
   */
  organization?: ListClientsOnboardingOrganization | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ClientOnboardingDocumentation | undefined;
};

export type ListClientsOnboarding = {
  /**
   * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this resource type.
   */
  resource?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The current status of the organization's onboarding process.
   *
   * @remarks
   *
   * * `needs-data` — The merchant needs to provide additional information
   * * `in-review` — The merchant provided all information, awaiting review from Mollie
   * * `completed` — The onboarding is completed
   *
   * Possible values: `needs-data` `in-review` `completed`
   */
  status?: string | undefined;
  /**
   * Whether the organization can receive payments.
   */
  canReceivePayments?: boolean | undefined;
  /**
   * Whether the organization can receive settlements to their external bank account.
   */
  canReceiveSettlements?: boolean | undefined;
  /**
   * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  signedUpAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ClientOnboardingLinks | undefined;
};

export const ListClientsStatus = {
  Unrequested: "unrequested",
  Enabled: "enabled",
  Disabled: "disabled",
  Pending: "pending",
} as const;
export type ListClientsStatus = ClosedEnum<typeof ListClientsStatus>;

export const ListClientsStatusReason = {
  RequirementPastDue: "requirement-past-due",
  OnboardingInformationNeeded: "onboarding-information-needed",
} as const;
export type ListClientsStatusReason = ClosedEnum<
  typeof ListClientsStatusReason
>;

/**
 * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled. For example, where necessary documents are to be uploaded.
 */
export type ListClientsCapabilitiesDashboard = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

export type ClientRequirementLinks = {
  /**
   * If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled. For example, where necessary documents are to be uploaded.
   */
  dashboard?: ListClientsCapabilitiesDashboard | undefined;
};

export type ListClientsRequirement = {
  /**
   * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
   */
  id?: string | undefined;
  /**
   * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
   *
   * @remarks
   *
   * Possible values: `currently-due` `past-due` `requested`
   */
  status?: string | undefined;
  /**
   * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
   */
  dueDate?: string | null | undefined;
  links?: ClientRequirementLinks | undefined;
};

export type ListClientsCapabilities = {
  /**
   * Always the word `capability` for this resource type.
   */
  resource?: string | undefined;
  /**
   * A unique name for this capability like `payments` / `settlements`.
   */
  name?: string | undefined;
  status?: ListClientsStatus | undefined;
  statusReason?: ListClientsStatusReason | null | undefined;
  requirements?: Array<ListClientsRequirement> | undefined;
};

export type ClientEmbedded = {
  organization?: ListClientsOrganization | undefined;
  onboarding?: ListClientsOnboarding | undefined;
  capabilities?: ListClientsCapabilities | undefined;
};

export type Client = {
  /**
   * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this client. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The commission object.
   */
  commission?: ListClientsCommission | null | undefined;
  /**
   * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  organizationCreatedAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ClientLinks | undefined;
  embedded?: ClientEmbedded | undefined;
};

export type ListClientsEmbedded = {
  /**
   * An array of client objects. For a complete reference of the client object, refer to the [Get client endpoint](get-client) documentation.
   */
  clients?: Array<Client> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListClientsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListClientsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListClientsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListClientsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListClientsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListClientsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListClientsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListClientsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListClientsDocumentation | undefined;
};

/**
 * A list of client objects. For a complete reference of the client object, refer to the [Get client endpoint](get-client) documentation.
 */
export type ListClientsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListClientsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListClientsLinks | undefined;
};

/** @internal */
export const ListClientsRequest$inboundSchema: z.ZodType<
  ListClientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  embed: z.nullable(z.string()).optional(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
});

/** @internal */
export type ListClientsRequest$Outbound = {
  embed?: string | null | undefined;
  from?: string | undefined;
  limit: number | null;
};

/** @internal */
export const ListClientsRequest$outboundSchema: z.ZodType<
  ListClientsRequest$Outbound,
  z.ZodTypeDef,
  ListClientsRequest
> = z.object({
  embed: z.nullable(z.string()).optional(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsRequest$ {
  /** @deprecated use `ListClientsRequest$inboundSchema` instead. */
  export const inboundSchema = ListClientsRequest$inboundSchema;
  /** @deprecated use `ListClientsRequest$outboundSchema` instead. */
  export const outboundSchema = ListClientsRequest$outboundSchema;
  /** @deprecated use `ListClientsRequest$Outbound` instead. */
  export type Outbound = ListClientsRequest$Outbound;
}

export function listClientsRequestToJSON(
  listClientsRequest: ListClientsRequest,
): string {
  return JSON.stringify(
    ListClientsRequest$outboundSchema.parse(listClientsRequest),
  );
}

export function listClientsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsRequest' from JSON`,
  );
}

/** @internal */
export const ListClientsNotFoundDocumentation$inboundSchema: z.ZodType<
  ListClientsNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsNotFoundDocumentation$outboundSchema: z.ZodType<
  ListClientsNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListClientsNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsNotFoundDocumentation$ {
  /** @deprecated use `ListClientsNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListClientsNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListClientsNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListClientsNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListClientsNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListClientsNotFoundDocumentation$Outbound;
}

export function listClientsNotFoundDocumentationToJSON(
  listClientsNotFoundDocumentation: ListClientsNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListClientsNotFoundDocumentation$outboundSchema.parse(
      listClientsNotFoundDocumentation,
    ),
  );
}

export function listClientsNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListClientsNotFoundLinks$inboundSchema: z.ZodType<
  ListClientsNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListClientsNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type ListClientsNotFoundLinks$Outbound = {
  documentation: ListClientsNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListClientsNotFoundLinks$outboundSchema: z.ZodType<
  ListClientsNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListClientsNotFoundLinks
> = z.object({
  documentation: z.lazy(() => ListClientsNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsNotFoundLinks$ {
  /** @deprecated use `ListClientsNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListClientsNotFoundLinks$inboundSchema;
  /** @deprecated use `ListClientsNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListClientsNotFoundLinks$outboundSchema;
  /** @deprecated use `ListClientsNotFoundLinks$Outbound` instead. */
  export type Outbound = ListClientsNotFoundLinks$Outbound;
}

export function listClientsNotFoundLinksToJSON(
  listClientsNotFoundLinks: ListClientsNotFoundLinks,
): string {
  return JSON.stringify(
    ListClientsNotFoundLinks$outboundSchema.parse(listClientsNotFoundLinks),
  );
}

export function listClientsNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListClientsBadRequestDocumentation$inboundSchema: z.ZodType<
  ListClientsBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsBadRequestDocumentation$outboundSchema: z.ZodType<
  ListClientsBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListClientsBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsBadRequestDocumentation$ {
  /** @deprecated use `ListClientsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListClientsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListClientsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListClientsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListClientsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListClientsBadRequestDocumentation$Outbound;
}

export function listClientsBadRequestDocumentationToJSON(
  listClientsBadRequestDocumentation: ListClientsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListClientsBadRequestDocumentation$outboundSchema.parse(
      listClientsBadRequestDocumentation,
    ),
  );
}

export function listClientsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListClientsBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListClientsBadRequestLinks$inboundSchema: z.ZodType<
  ListClientsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListClientsBadRequestDocumentation$inboundSchema),
});

/** @internal */
export type ListClientsBadRequestLinks$Outbound = {
  documentation: ListClientsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListClientsBadRequestLinks$outboundSchema: z.ZodType<
  ListClientsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListClientsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListClientsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsBadRequestLinks$ {
  /** @deprecated use `ListClientsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListClientsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListClientsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListClientsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListClientsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListClientsBadRequestLinks$Outbound;
}

export function listClientsBadRequestLinksToJSON(
  listClientsBadRequestLinks: ListClientsBadRequestLinks,
): string {
  return JSON.stringify(
    ListClientsBadRequestLinks$outboundSchema.parse(listClientsBadRequestLinks),
  );
}

export function listClientsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListClientsCommission$inboundSchema: z.ZodType<
  ListClientsCommission,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
});

/** @internal */
export type ListClientsCommission$Outbound = {
  count?: number | undefined;
};

/** @internal */
export const ListClientsCommission$outboundSchema: z.ZodType<
  ListClientsCommission$Outbound,
  z.ZodTypeDef,
  ListClientsCommission
> = z.object({
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsCommission$ {
  /** @deprecated use `ListClientsCommission$inboundSchema` instead. */
  export const inboundSchema = ListClientsCommission$inboundSchema;
  /** @deprecated use `ListClientsCommission$outboundSchema` instead. */
  export const outboundSchema = ListClientsCommission$outboundSchema;
  /** @deprecated use `ListClientsCommission$Outbound` instead. */
  export type Outbound = ListClientsCommission$Outbound;
}

export function listClientsCommissionToJSON(
  listClientsCommission: ListClientsCommission,
): string {
  return JSON.stringify(
    ListClientsCommission$outboundSchema.parse(listClientsCommission),
  );
}

export function listClientsCommissionFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsCommission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsCommission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsCommission' from JSON`,
  );
}

/** @internal */
export const ClientSelf$inboundSchema: z.ZodType<
  ClientSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ClientSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ClientSelf$outboundSchema: z.ZodType<
  ClientSelf$Outbound,
  z.ZodTypeDef,
  ClientSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSelf$ {
  /** @deprecated use `ClientSelf$inboundSchema` instead. */
  export const inboundSchema = ClientSelf$inboundSchema;
  /** @deprecated use `ClientSelf$outboundSchema` instead. */
  export const outboundSchema = ClientSelf$outboundSchema;
  /** @deprecated use `ClientSelf$Outbound` instead. */
  export type Outbound = ClientSelf$Outbound;
}

export function clientSelfToJSON(clientSelf: ClientSelf): string {
  return JSON.stringify(ClientSelf$outboundSchema.parse(clientSelf));
}

export function clientSelfFromJSON(
  jsonString: string,
): SafeParseResult<ClientSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSelf' from JSON`,
  );
}

/** @internal */
export const ListClientsLinksOrganization$inboundSchema: z.ZodType<
  ListClientsLinksOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsLinksOrganization$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsLinksOrganization$outboundSchema: z.ZodType<
  ListClientsLinksOrganization$Outbound,
  z.ZodTypeDef,
  ListClientsLinksOrganization
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsLinksOrganization$ {
  /** @deprecated use `ListClientsLinksOrganization$inboundSchema` instead. */
  export const inboundSchema = ListClientsLinksOrganization$inboundSchema;
  /** @deprecated use `ListClientsLinksOrganization$outboundSchema` instead. */
  export const outboundSchema = ListClientsLinksOrganization$outboundSchema;
  /** @deprecated use `ListClientsLinksOrganization$Outbound` instead. */
  export type Outbound = ListClientsLinksOrganization$Outbound;
}

export function listClientsLinksOrganizationToJSON(
  listClientsLinksOrganization: ListClientsLinksOrganization,
): string {
  return JSON.stringify(
    ListClientsLinksOrganization$outboundSchema.parse(
      listClientsLinksOrganization,
    ),
  );
}

export function listClientsLinksOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsLinksOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsLinksOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsLinksOrganization' from JSON`,
  );
}

/** @internal */
export const ListClientsLinksOnboarding$inboundSchema: z.ZodType<
  ListClientsLinksOnboarding,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsLinksOnboarding$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsLinksOnboarding$outboundSchema: z.ZodType<
  ListClientsLinksOnboarding$Outbound,
  z.ZodTypeDef,
  ListClientsLinksOnboarding
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsLinksOnboarding$ {
  /** @deprecated use `ListClientsLinksOnboarding$inboundSchema` instead. */
  export const inboundSchema = ListClientsLinksOnboarding$inboundSchema;
  /** @deprecated use `ListClientsLinksOnboarding$outboundSchema` instead. */
  export const outboundSchema = ListClientsLinksOnboarding$outboundSchema;
  /** @deprecated use `ListClientsLinksOnboarding$Outbound` instead. */
  export type Outbound = ListClientsLinksOnboarding$Outbound;
}

export function listClientsLinksOnboardingToJSON(
  listClientsLinksOnboarding: ListClientsLinksOnboarding,
): string {
  return JSON.stringify(
    ListClientsLinksOnboarding$outboundSchema.parse(listClientsLinksOnboarding),
  );
}

export function listClientsLinksOnboardingFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsLinksOnboarding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsLinksOnboarding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsLinksOnboarding' from JSON`,
  );
}

/** @internal */
export const ClientDocumentation$inboundSchema: z.ZodType<
  ClientDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ClientDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ClientDocumentation$outboundSchema: z.ZodType<
  ClientDocumentation$Outbound,
  z.ZodTypeDef,
  ClientDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientDocumentation$ {
  /** @deprecated use `ClientDocumentation$inboundSchema` instead. */
  export const inboundSchema = ClientDocumentation$inboundSchema;
  /** @deprecated use `ClientDocumentation$outboundSchema` instead. */
  export const outboundSchema = ClientDocumentation$outboundSchema;
  /** @deprecated use `ClientDocumentation$Outbound` instead. */
  export type Outbound = ClientDocumentation$Outbound;
}

export function clientDocumentationToJSON(
  clientDocumentation: ClientDocumentation,
): string {
  return JSON.stringify(
    ClientDocumentation$outboundSchema.parse(clientDocumentation),
  );
}

export function clientDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ClientDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientDocumentation' from JSON`,
  );
}

/** @internal */
export const ClientLinks$inboundSchema: z.ZodType<
  ClientLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ClientSelf$inboundSchema).optional(),
  organization: z.lazy(() => ListClientsLinksOrganization$inboundSchema)
    .optional(),
  onboarding: z.lazy(() => ListClientsLinksOnboarding$inboundSchema).optional(),
  documentation: z.lazy(() => ClientDocumentation$inboundSchema).optional(),
});

/** @internal */
export type ClientLinks$Outbound = {
  self?: ClientSelf$Outbound | undefined;
  organization?: ListClientsLinksOrganization$Outbound | undefined;
  onboarding?: ListClientsLinksOnboarding$Outbound | undefined;
  documentation?: ClientDocumentation$Outbound | undefined;
};

/** @internal */
export const ClientLinks$outboundSchema: z.ZodType<
  ClientLinks$Outbound,
  z.ZodTypeDef,
  ClientLinks
> = z.object({
  self: z.lazy(() => ClientSelf$outboundSchema).optional(),
  organization: z.lazy(() => ListClientsLinksOrganization$outboundSchema)
    .optional(),
  onboarding: z.lazy(() => ListClientsLinksOnboarding$outboundSchema)
    .optional(),
  documentation: z.lazy(() => ClientDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientLinks$ {
  /** @deprecated use `ClientLinks$inboundSchema` instead. */
  export const inboundSchema = ClientLinks$inboundSchema;
  /** @deprecated use `ClientLinks$outboundSchema` instead. */
  export const outboundSchema = ClientLinks$outboundSchema;
  /** @deprecated use `ClientLinks$Outbound` instead. */
  export type Outbound = ClientLinks$Outbound;
}

export function clientLinksToJSON(clientLinks: ClientLinks): string {
  return JSON.stringify(ClientLinks$outboundSchema.parse(clientLinks));
}

export function clientLinksFromJSON(
  jsonString: string,
): SafeParseResult<ClientLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientLinks' from JSON`,
  );
}

/** @internal */
export const ListClientsAddress$inboundSchema: z.ZodType<
  ListClientsAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type ListClientsAddress$Outbound = {
  streetAndNumber?: string | undefined;
  postalCode?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const ListClientsAddress$outboundSchema: z.ZodType<
  ListClientsAddress$Outbound,
  z.ZodTypeDef,
  ListClientsAddress
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsAddress$ {
  /** @deprecated use `ListClientsAddress$inboundSchema` instead. */
  export const inboundSchema = ListClientsAddress$inboundSchema;
  /** @deprecated use `ListClientsAddress$outboundSchema` instead. */
  export const outboundSchema = ListClientsAddress$outboundSchema;
  /** @deprecated use `ListClientsAddress$Outbound` instead. */
  export type Outbound = ListClientsAddress$Outbound;
}

export function listClientsAddressToJSON(
  listClientsAddress: ListClientsAddress,
): string {
  return JSON.stringify(
    ListClientsAddress$outboundSchema.parse(listClientsAddress),
  );
}

export function listClientsAddressFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsAddress' from JSON`,
  );
}

/** @internal */
export const ClientOrganizationSelf$inboundSchema: z.ZodType<
  ClientOrganizationSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ClientOrganizationSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ClientOrganizationSelf$outboundSchema: z.ZodType<
  ClientOrganizationSelf$Outbound,
  z.ZodTypeDef,
  ClientOrganizationSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientOrganizationSelf$ {
  /** @deprecated use `ClientOrganizationSelf$inboundSchema` instead. */
  export const inboundSchema = ClientOrganizationSelf$inboundSchema;
  /** @deprecated use `ClientOrganizationSelf$outboundSchema` instead. */
  export const outboundSchema = ClientOrganizationSelf$outboundSchema;
  /** @deprecated use `ClientOrganizationSelf$Outbound` instead. */
  export type Outbound = ClientOrganizationSelf$Outbound;
}

export function clientOrganizationSelfToJSON(
  clientOrganizationSelf: ClientOrganizationSelf,
): string {
  return JSON.stringify(
    ClientOrganizationSelf$outboundSchema.parse(clientOrganizationSelf),
  );
}

export function clientOrganizationSelfFromJSON(
  jsonString: string,
): SafeParseResult<ClientOrganizationSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientOrganizationSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientOrganizationSelf' from JSON`,
  );
}

/** @internal */
export const ListClientsOrganizationDashboard$inboundSchema: z.ZodType<
  ListClientsOrganizationDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsOrganizationDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsOrganizationDashboard$outboundSchema: z.ZodType<
  ListClientsOrganizationDashboard$Outbound,
  z.ZodTypeDef,
  ListClientsOrganizationDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsOrganizationDashboard$ {
  /** @deprecated use `ListClientsOrganizationDashboard$inboundSchema` instead. */
  export const inboundSchema = ListClientsOrganizationDashboard$inboundSchema;
  /** @deprecated use `ListClientsOrganizationDashboard$outboundSchema` instead. */
  export const outboundSchema = ListClientsOrganizationDashboard$outboundSchema;
  /** @deprecated use `ListClientsOrganizationDashboard$Outbound` instead. */
  export type Outbound = ListClientsOrganizationDashboard$Outbound;
}

export function listClientsOrganizationDashboardToJSON(
  listClientsOrganizationDashboard: ListClientsOrganizationDashboard,
): string {
  return JSON.stringify(
    ListClientsOrganizationDashboard$outboundSchema.parse(
      listClientsOrganizationDashboard,
    ),
  );
}

export function listClientsOrganizationDashboardFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsOrganizationDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsOrganizationDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsOrganizationDashboard' from JSON`,
  );
}

/** @internal */
export const ClientOrganizationDocumentation$inboundSchema: z.ZodType<
  ClientOrganizationDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ClientOrganizationDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ClientOrganizationDocumentation$outboundSchema: z.ZodType<
  ClientOrganizationDocumentation$Outbound,
  z.ZodTypeDef,
  ClientOrganizationDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientOrganizationDocumentation$ {
  /** @deprecated use `ClientOrganizationDocumentation$inboundSchema` instead. */
  export const inboundSchema = ClientOrganizationDocumentation$inboundSchema;
  /** @deprecated use `ClientOrganizationDocumentation$outboundSchema` instead. */
  export const outboundSchema = ClientOrganizationDocumentation$outboundSchema;
  /** @deprecated use `ClientOrganizationDocumentation$Outbound` instead. */
  export type Outbound = ClientOrganizationDocumentation$Outbound;
}

export function clientOrganizationDocumentationToJSON(
  clientOrganizationDocumentation: ClientOrganizationDocumentation,
): string {
  return JSON.stringify(
    ClientOrganizationDocumentation$outboundSchema.parse(
      clientOrganizationDocumentation,
    ),
  );
}

export function clientOrganizationDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ClientOrganizationDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientOrganizationDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientOrganizationDocumentation' from JSON`,
  );
}

/** @internal */
export const ClientOrganizationLinks$inboundSchema: z.ZodType<
  ClientOrganizationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ClientOrganizationSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => ListClientsOrganizationDashboard$inboundSchema)
    .optional(),
  documentation: z.lazy(() => ClientOrganizationDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ClientOrganizationLinks$Outbound = {
  self?: ClientOrganizationSelf$Outbound | undefined;
  dashboard?: ListClientsOrganizationDashboard$Outbound | undefined;
  documentation?: ClientOrganizationDocumentation$Outbound | undefined;
};

/** @internal */
export const ClientOrganizationLinks$outboundSchema: z.ZodType<
  ClientOrganizationLinks$Outbound,
  z.ZodTypeDef,
  ClientOrganizationLinks
> = z.object({
  self: z.lazy(() => ClientOrganizationSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => ListClientsOrganizationDashboard$outboundSchema)
    .optional(),
  documentation: z.lazy(() => ClientOrganizationDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientOrganizationLinks$ {
  /** @deprecated use `ClientOrganizationLinks$inboundSchema` instead. */
  export const inboundSchema = ClientOrganizationLinks$inboundSchema;
  /** @deprecated use `ClientOrganizationLinks$outboundSchema` instead. */
  export const outboundSchema = ClientOrganizationLinks$outboundSchema;
  /** @deprecated use `ClientOrganizationLinks$Outbound` instead. */
  export type Outbound = ClientOrganizationLinks$Outbound;
}

export function clientOrganizationLinksToJSON(
  clientOrganizationLinks: ClientOrganizationLinks,
): string {
  return JSON.stringify(
    ClientOrganizationLinks$outboundSchema.parse(clientOrganizationLinks),
  );
}

export function clientOrganizationLinksFromJSON(
  jsonString: string,
): SafeParseResult<ClientOrganizationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientOrganizationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientOrganizationLinks' from JSON`,
  );
}

/** @internal */
export const ListClientsOrganization$inboundSchema: z.ZodType<
  ListClientsOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("organization"),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: z.string().optional(),
  address: z.lazy(() => ListClientsAddress$inboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ClientOrganizationLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListClientsOrganization$Outbound = {
  resource: string;
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  locale?: string | undefined;
  address?: ListClientsAddress$Outbound | undefined;
  registrationNumber?: string | undefined;
  vatNumber?: string | null | undefined;
  vatRegulation?: string | null | undefined;
  _links?: ClientOrganizationLinks$Outbound | undefined;
};

/** @internal */
export const ListClientsOrganization$outboundSchema: z.ZodType<
  ListClientsOrganization$Outbound,
  z.ZodTypeDef,
  ListClientsOrganization
> = z.object({
  resource: z.string().default("organization"),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: z.string().optional(),
  address: z.lazy(() => ListClientsAddress$outboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(z.string()).optional(),
  links: z.lazy(() => ClientOrganizationLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsOrganization$ {
  /** @deprecated use `ListClientsOrganization$inboundSchema` instead. */
  export const inboundSchema = ListClientsOrganization$inboundSchema;
  /** @deprecated use `ListClientsOrganization$outboundSchema` instead. */
  export const outboundSchema = ListClientsOrganization$outboundSchema;
  /** @deprecated use `ListClientsOrganization$Outbound` instead. */
  export type Outbound = ListClientsOrganization$Outbound;
}

export function listClientsOrganizationToJSON(
  listClientsOrganization: ListClientsOrganization,
): string {
  return JSON.stringify(
    ListClientsOrganization$outboundSchema.parse(listClientsOrganization),
  );
}

export function listClientsOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsOrganization' from JSON`,
  );
}

/** @internal */
export const ClientOnboardingSelf$inboundSchema: z.ZodType<
  ClientOnboardingSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ClientOnboardingSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ClientOnboardingSelf$outboundSchema: z.ZodType<
  ClientOnboardingSelf$Outbound,
  z.ZodTypeDef,
  ClientOnboardingSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientOnboardingSelf$ {
  /** @deprecated use `ClientOnboardingSelf$inboundSchema` instead. */
  export const inboundSchema = ClientOnboardingSelf$inboundSchema;
  /** @deprecated use `ClientOnboardingSelf$outboundSchema` instead. */
  export const outboundSchema = ClientOnboardingSelf$outboundSchema;
  /** @deprecated use `ClientOnboardingSelf$Outbound` instead. */
  export type Outbound = ClientOnboardingSelf$Outbound;
}

export function clientOnboardingSelfToJSON(
  clientOnboardingSelf: ClientOnboardingSelf,
): string {
  return JSON.stringify(
    ClientOnboardingSelf$outboundSchema.parse(clientOnboardingSelf),
  );
}

export function clientOnboardingSelfFromJSON(
  jsonString: string,
): SafeParseResult<ClientOnboardingSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientOnboardingSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientOnboardingSelf' from JSON`,
  );
}

/** @internal */
export const ListClientsOnboardingDashboard$inboundSchema: z.ZodType<
  ListClientsOnboardingDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsOnboardingDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsOnboardingDashboard$outboundSchema: z.ZodType<
  ListClientsOnboardingDashboard$Outbound,
  z.ZodTypeDef,
  ListClientsOnboardingDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsOnboardingDashboard$ {
  /** @deprecated use `ListClientsOnboardingDashboard$inboundSchema` instead. */
  export const inboundSchema = ListClientsOnboardingDashboard$inboundSchema;
  /** @deprecated use `ListClientsOnboardingDashboard$outboundSchema` instead. */
  export const outboundSchema = ListClientsOnboardingDashboard$outboundSchema;
  /** @deprecated use `ListClientsOnboardingDashboard$Outbound` instead. */
  export type Outbound = ListClientsOnboardingDashboard$Outbound;
}

export function listClientsOnboardingDashboardToJSON(
  listClientsOnboardingDashboard: ListClientsOnboardingDashboard,
): string {
  return JSON.stringify(
    ListClientsOnboardingDashboard$outboundSchema.parse(
      listClientsOnboardingDashboard,
    ),
  );
}

export function listClientsOnboardingDashboardFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsOnboardingDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsOnboardingDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsOnboardingDashboard' from JSON`,
  );
}

/** @internal */
export const ListClientsOnboardingOrganization$inboundSchema: z.ZodType<
  ListClientsOnboardingOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsOnboardingOrganization$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsOnboardingOrganization$outboundSchema: z.ZodType<
  ListClientsOnboardingOrganization$Outbound,
  z.ZodTypeDef,
  ListClientsOnboardingOrganization
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsOnboardingOrganization$ {
  /** @deprecated use `ListClientsOnboardingOrganization$inboundSchema` instead. */
  export const inboundSchema = ListClientsOnboardingOrganization$inboundSchema;
  /** @deprecated use `ListClientsOnboardingOrganization$outboundSchema` instead. */
  export const outboundSchema =
    ListClientsOnboardingOrganization$outboundSchema;
  /** @deprecated use `ListClientsOnboardingOrganization$Outbound` instead. */
  export type Outbound = ListClientsOnboardingOrganization$Outbound;
}

export function listClientsOnboardingOrganizationToJSON(
  listClientsOnboardingOrganization: ListClientsOnboardingOrganization,
): string {
  return JSON.stringify(
    ListClientsOnboardingOrganization$outboundSchema.parse(
      listClientsOnboardingOrganization,
    ),
  );
}

export function listClientsOnboardingOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsOnboardingOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsOnboardingOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsOnboardingOrganization' from JSON`,
  );
}

/** @internal */
export const ClientOnboardingDocumentation$inboundSchema: z.ZodType<
  ClientOnboardingDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ClientOnboardingDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ClientOnboardingDocumentation$outboundSchema: z.ZodType<
  ClientOnboardingDocumentation$Outbound,
  z.ZodTypeDef,
  ClientOnboardingDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientOnboardingDocumentation$ {
  /** @deprecated use `ClientOnboardingDocumentation$inboundSchema` instead. */
  export const inboundSchema = ClientOnboardingDocumentation$inboundSchema;
  /** @deprecated use `ClientOnboardingDocumentation$outboundSchema` instead. */
  export const outboundSchema = ClientOnboardingDocumentation$outboundSchema;
  /** @deprecated use `ClientOnboardingDocumentation$Outbound` instead. */
  export type Outbound = ClientOnboardingDocumentation$Outbound;
}

export function clientOnboardingDocumentationToJSON(
  clientOnboardingDocumentation: ClientOnboardingDocumentation,
): string {
  return JSON.stringify(
    ClientOnboardingDocumentation$outboundSchema.parse(
      clientOnboardingDocumentation,
    ),
  );
}

export function clientOnboardingDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ClientOnboardingDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientOnboardingDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientOnboardingDocumentation' from JSON`,
  );
}

/** @internal */
export const ClientOnboardingLinks$inboundSchema: z.ZodType<
  ClientOnboardingLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ClientOnboardingSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => ListClientsOnboardingDashboard$inboundSchema)
    .optional(),
  organization: z.lazy(() => ListClientsOnboardingOrganization$inboundSchema)
    .optional(),
  documentation: z.lazy(() => ClientOnboardingDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ClientOnboardingLinks$Outbound = {
  self?: ClientOnboardingSelf$Outbound | undefined;
  dashboard?: ListClientsOnboardingDashboard$Outbound | undefined;
  organization?: ListClientsOnboardingOrganization$Outbound | undefined;
  documentation?: ClientOnboardingDocumentation$Outbound | undefined;
};

/** @internal */
export const ClientOnboardingLinks$outboundSchema: z.ZodType<
  ClientOnboardingLinks$Outbound,
  z.ZodTypeDef,
  ClientOnboardingLinks
> = z.object({
  self: z.lazy(() => ClientOnboardingSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => ListClientsOnboardingDashboard$outboundSchema)
    .optional(),
  organization: z.lazy(() => ListClientsOnboardingOrganization$outboundSchema)
    .optional(),
  documentation: z.lazy(() => ClientOnboardingDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientOnboardingLinks$ {
  /** @deprecated use `ClientOnboardingLinks$inboundSchema` instead. */
  export const inboundSchema = ClientOnboardingLinks$inboundSchema;
  /** @deprecated use `ClientOnboardingLinks$outboundSchema` instead. */
  export const outboundSchema = ClientOnboardingLinks$outboundSchema;
  /** @deprecated use `ClientOnboardingLinks$Outbound` instead. */
  export type Outbound = ClientOnboardingLinks$Outbound;
}

export function clientOnboardingLinksToJSON(
  clientOnboardingLinks: ClientOnboardingLinks,
): string {
  return JSON.stringify(
    ClientOnboardingLinks$outboundSchema.parse(clientOnboardingLinks),
  );
}

export function clientOnboardingLinksFromJSON(
  jsonString: string,
): SafeParseResult<ClientOnboardingLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientOnboardingLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientOnboardingLinks' from JSON`,
  );
}

/** @internal */
export const ListClientsOnboarding$inboundSchema: z.ZodType<
  ListClientsOnboarding,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("onboarding"),
  name: z.string().optional(),
  status: z.string().optional(),
  canReceivePayments: z.boolean().optional(),
  canReceiveSettlements: z.boolean().optional(),
  signedUpAt: z.string().optional(),
  _links: z.lazy(() => ClientOnboardingLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListClientsOnboarding$Outbound = {
  resource: string;
  name?: string | undefined;
  status?: string | undefined;
  canReceivePayments?: boolean | undefined;
  canReceiveSettlements?: boolean | undefined;
  signedUpAt?: string | undefined;
  _links?: ClientOnboardingLinks$Outbound | undefined;
};

/** @internal */
export const ListClientsOnboarding$outboundSchema: z.ZodType<
  ListClientsOnboarding$Outbound,
  z.ZodTypeDef,
  ListClientsOnboarding
> = z.object({
  resource: z.string().default("onboarding"),
  name: z.string().optional(),
  status: z.string().optional(),
  canReceivePayments: z.boolean().optional(),
  canReceiveSettlements: z.boolean().optional(),
  signedUpAt: z.string().optional(),
  links: z.lazy(() => ClientOnboardingLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsOnboarding$ {
  /** @deprecated use `ListClientsOnboarding$inboundSchema` instead. */
  export const inboundSchema = ListClientsOnboarding$inboundSchema;
  /** @deprecated use `ListClientsOnboarding$outboundSchema` instead. */
  export const outboundSchema = ListClientsOnboarding$outboundSchema;
  /** @deprecated use `ListClientsOnboarding$Outbound` instead. */
  export type Outbound = ListClientsOnboarding$Outbound;
}

export function listClientsOnboardingToJSON(
  listClientsOnboarding: ListClientsOnboarding,
): string {
  return JSON.stringify(
    ListClientsOnboarding$outboundSchema.parse(listClientsOnboarding),
  );
}

export function listClientsOnboardingFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsOnboarding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsOnboarding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsOnboarding' from JSON`,
  );
}

/** @internal */
export const ListClientsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListClientsStatus
> = z.nativeEnum(ListClientsStatus);

/** @internal */
export const ListClientsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListClientsStatus
> = ListClientsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsStatus$ {
  /** @deprecated use `ListClientsStatus$inboundSchema` instead. */
  export const inboundSchema = ListClientsStatus$inboundSchema;
  /** @deprecated use `ListClientsStatus$outboundSchema` instead. */
  export const outboundSchema = ListClientsStatus$outboundSchema;
}

/** @internal */
export const ListClientsStatusReason$inboundSchema: z.ZodNativeEnum<
  typeof ListClientsStatusReason
> = z.nativeEnum(ListClientsStatusReason);

/** @internal */
export const ListClientsStatusReason$outboundSchema: z.ZodNativeEnum<
  typeof ListClientsStatusReason
> = ListClientsStatusReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsStatusReason$ {
  /** @deprecated use `ListClientsStatusReason$inboundSchema` instead. */
  export const inboundSchema = ListClientsStatusReason$inboundSchema;
  /** @deprecated use `ListClientsStatusReason$outboundSchema` instead. */
  export const outboundSchema = ListClientsStatusReason$outboundSchema;
}

/** @internal */
export const ListClientsCapabilitiesDashboard$inboundSchema: z.ZodType<
  ListClientsCapabilitiesDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListClientsCapabilitiesDashboard$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListClientsCapabilitiesDashboard$outboundSchema: z.ZodType<
  ListClientsCapabilitiesDashboard$Outbound,
  z.ZodTypeDef,
  ListClientsCapabilitiesDashboard
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsCapabilitiesDashboard$ {
  /** @deprecated use `ListClientsCapabilitiesDashboard$inboundSchema` instead. */
  export const inboundSchema = ListClientsCapabilitiesDashboard$inboundSchema;
  /** @deprecated use `ListClientsCapabilitiesDashboard$outboundSchema` instead. */
  export const outboundSchema = ListClientsCapabilitiesDashboard$outboundSchema;
  /** @deprecated use `ListClientsCapabilitiesDashboard$Outbound` instead. */
  export type Outbound = ListClientsCapabilitiesDashboard$Outbound;
}

export function listClientsCapabilitiesDashboardToJSON(
  listClientsCapabilitiesDashboard: ListClientsCapabilitiesDashboard,
): string {
  return JSON.stringify(
    ListClientsCapabilitiesDashboard$outboundSchema.parse(
      listClientsCapabilitiesDashboard,
    ),
  );
}

export function listClientsCapabilitiesDashboardFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsCapabilitiesDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsCapabilitiesDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsCapabilitiesDashboard' from JSON`,
  );
}

/** @internal */
export const ClientRequirementLinks$inboundSchema: z.ZodType<
  ClientRequirementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  dashboard: z.lazy(() => ListClientsCapabilitiesDashboard$inboundSchema)
    .optional(),
});

/** @internal */
export type ClientRequirementLinks$Outbound = {
  dashboard?: ListClientsCapabilitiesDashboard$Outbound | undefined;
};

/** @internal */
export const ClientRequirementLinks$outboundSchema: z.ZodType<
  ClientRequirementLinks$Outbound,
  z.ZodTypeDef,
  ClientRequirementLinks
> = z.object({
  dashboard: z.lazy(() => ListClientsCapabilitiesDashboard$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRequirementLinks$ {
  /** @deprecated use `ClientRequirementLinks$inboundSchema` instead. */
  export const inboundSchema = ClientRequirementLinks$inboundSchema;
  /** @deprecated use `ClientRequirementLinks$outboundSchema` instead. */
  export const outboundSchema = ClientRequirementLinks$outboundSchema;
  /** @deprecated use `ClientRequirementLinks$Outbound` instead. */
  export type Outbound = ClientRequirementLinks$Outbound;
}

export function clientRequirementLinksToJSON(
  clientRequirementLinks: ClientRequirementLinks,
): string {
  return JSON.stringify(
    ClientRequirementLinks$outboundSchema.parse(clientRequirementLinks),
  );
}

export function clientRequirementLinksFromJSON(
  jsonString: string,
): SafeParseResult<ClientRequirementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRequirementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRequirementLinks' from JSON`,
  );
}

/** @internal */
export const ListClientsRequirement$inboundSchema: z.ZodType<
  ListClientsRequirement,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: z.string().optional(),
  dueDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ClientRequirementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListClientsRequirement$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  dueDate?: string | null | undefined;
  _links?: ClientRequirementLinks$Outbound | undefined;
};

/** @internal */
export const ListClientsRequirement$outboundSchema: z.ZodType<
  ListClientsRequirement$Outbound,
  z.ZodTypeDef,
  ListClientsRequirement
> = z.object({
  id: z.string().optional(),
  status: z.string().optional(),
  dueDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => ClientRequirementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsRequirement$ {
  /** @deprecated use `ListClientsRequirement$inboundSchema` instead. */
  export const inboundSchema = ListClientsRequirement$inboundSchema;
  /** @deprecated use `ListClientsRequirement$outboundSchema` instead. */
  export const outboundSchema = ListClientsRequirement$outboundSchema;
  /** @deprecated use `ListClientsRequirement$Outbound` instead. */
  export type Outbound = ListClientsRequirement$Outbound;
}

export function listClientsRequirementToJSON(
  listClientsRequirement: ListClientsRequirement,
): string {
  return JSON.stringify(
    ListClientsRequirement$outboundSchema.parse(listClientsRequirement),
  );
}

export function listClientsRequirementFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsRequirement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsRequirement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsRequirement' from JSON`,
  );
}

/** @internal */
export const ListClientsCapabilities$inboundSchema: z.ZodType<
  ListClientsCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: ListClientsStatus$inboundSchema.optional(),
  statusReason: z.nullable(ListClientsStatusReason$inboundSchema).optional(),
  requirements: z.array(z.lazy(() => ListClientsRequirement$inboundSchema))
    .optional(),
});

/** @internal */
export type ListClientsCapabilities$Outbound = {
  resource?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  statusReason?: string | null | undefined;
  requirements?: Array<ListClientsRequirement$Outbound> | undefined;
};

/** @internal */
export const ListClientsCapabilities$outboundSchema: z.ZodType<
  ListClientsCapabilities$Outbound,
  z.ZodTypeDef,
  ListClientsCapabilities
> = z.object({
  resource: z.string().optional(),
  name: z.string().optional(),
  status: ListClientsStatus$outboundSchema.optional(),
  statusReason: z.nullable(ListClientsStatusReason$outboundSchema).optional(),
  requirements: z.array(z.lazy(() => ListClientsRequirement$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsCapabilities$ {
  /** @deprecated use `ListClientsCapabilities$inboundSchema` instead. */
  export const inboundSchema = ListClientsCapabilities$inboundSchema;
  /** @deprecated use `ListClientsCapabilities$outboundSchema` instead. */
  export const outboundSchema = ListClientsCapabilities$outboundSchema;
  /** @deprecated use `ListClientsCapabilities$Outbound` instead. */
  export type Outbound = ListClientsCapabilities$Outbound;
}

export function listClientsCapabilitiesToJSON(
  listClientsCapabilities: ListClientsCapabilities,
): string {
  return JSON.stringify(
    ListClientsCapabilities$outboundSchema.parse(listClientsCapabilities),
  );
}

export function listClientsCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsCapabilities' from JSON`,
  );
}

/** @internal */
export const ClientEmbedded$inboundSchema: z.ZodType<
  ClientEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization: z.lazy(() => ListClientsOrganization$inboundSchema).optional(),
  onboarding: z.lazy(() => ListClientsOnboarding$inboundSchema).optional(),
  capabilities: z.lazy(() => ListClientsCapabilities$inboundSchema).optional(),
});

/** @internal */
export type ClientEmbedded$Outbound = {
  organization?: ListClientsOrganization$Outbound | undefined;
  onboarding?: ListClientsOnboarding$Outbound | undefined;
  capabilities?: ListClientsCapabilities$Outbound | undefined;
};

/** @internal */
export const ClientEmbedded$outboundSchema: z.ZodType<
  ClientEmbedded$Outbound,
  z.ZodTypeDef,
  ClientEmbedded
> = z.object({
  organization: z.lazy(() => ListClientsOrganization$outboundSchema).optional(),
  onboarding: z.lazy(() => ListClientsOnboarding$outboundSchema).optional(),
  capabilities: z.lazy(() => ListClientsCapabilities$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientEmbedded$ {
  /** @deprecated use `ClientEmbedded$inboundSchema` instead. */
  export const inboundSchema = ClientEmbedded$inboundSchema;
  /** @deprecated use `ClientEmbedded$outboundSchema` instead. */
  export const outboundSchema = ClientEmbedded$outboundSchema;
  /** @deprecated use `ClientEmbedded$Outbound` instead. */
  export type Outbound = ClientEmbedded$Outbound;
}

export function clientEmbeddedToJSON(clientEmbedded: ClientEmbedded): string {
  return JSON.stringify(ClientEmbedded$outboundSchema.parse(clientEmbedded));
}

export function clientEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ClientEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientEmbedded' from JSON`,
  );
}

/** @internal */
export const Client$inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z
  .object({
    resource: z.string().default("client"),
    id: z.string().optional(),
    commission: z.nullable(z.lazy(() => ListClientsCommission$inboundSchema))
      .optional(),
    organizationCreatedAt: z.string().optional(),
    _links: z.lazy(() => ClientLinks$inboundSchema).optional(),
    _embedded: z.lazy(() => ClientEmbedded$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
      "_embedded": "embedded",
    });
  });

/** @internal */
export type Client$Outbound = {
  resource: string;
  id?: string | undefined;
  commission?: ListClientsCommission$Outbound | null | undefined;
  organizationCreatedAt?: string | undefined;
  _links?: ClientLinks$Outbound | undefined;
  _embedded?: ClientEmbedded$Outbound | undefined;
};

/** @internal */
export const Client$outboundSchema: z.ZodType<
  Client$Outbound,
  z.ZodTypeDef,
  Client
> = z.object({
  resource: z.string().default("client"),
  id: z.string().optional(),
  commission: z.nullable(z.lazy(() => ListClientsCommission$outboundSchema))
    .optional(),
  organizationCreatedAt: z.string().optional(),
  links: z.lazy(() => ClientLinks$outboundSchema).optional(),
  embedded: z.lazy(() => ClientEmbedded$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Client$ {
  /** @deprecated use `Client$inboundSchema` instead. */
  export const inboundSchema = Client$inboundSchema;
  /** @deprecated use `Client$outboundSchema` instead. */
  export const outboundSchema = Client$outboundSchema;
  /** @deprecated use `Client$Outbound` instead. */
  export type Outbound = Client$Outbound;
}

export function clientToJSON(client: Client): string {
  return JSON.stringify(Client$outboundSchema.parse(client));
}

export function clientFromJSON(
  jsonString: string,
): SafeParseResult<Client, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Client$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Client' from JSON`,
  );
}

/** @internal */
export const ListClientsEmbedded$inboundSchema: z.ZodType<
  ListClientsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  clients: z.array(z.lazy(() => Client$inboundSchema)).optional(),
});

/** @internal */
export type ListClientsEmbedded$Outbound = {
  clients?: Array<Client$Outbound> | undefined;
};

/** @internal */
export const ListClientsEmbedded$outboundSchema: z.ZodType<
  ListClientsEmbedded$Outbound,
  z.ZodTypeDef,
  ListClientsEmbedded
> = z.object({
  clients: z.array(z.lazy(() => Client$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsEmbedded$ {
  /** @deprecated use `ListClientsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListClientsEmbedded$inboundSchema;
  /** @deprecated use `ListClientsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListClientsEmbedded$outboundSchema;
  /** @deprecated use `ListClientsEmbedded$Outbound` instead. */
  export type Outbound = ListClientsEmbedded$Outbound;
}

export function listClientsEmbeddedToJSON(
  listClientsEmbedded: ListClientsEmbedded,
): string {
  return JSON.stringify(
    ListClientsEmbedded$outboundSchema.parse(listClientsEmbedded),
  );
}

export function listClientsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListClientsSelf$inboundSchema: z.ZodType<
  ListClientsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsSelf$outboundSchema: z.ZodType<
  ListClientsSelf$Outbound,
  z.ZodTypeDef,
  ListClientsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsSelf$ {
  /** @deprecated use `ListClientsSelf$inboundSchema` instead. */
  export const inboundSchema = ListClientsSelf$inboundSchema;
  /** @deprecated use `ListClientsSelf$outboundSchema` instead. */
  export const outboundSchema = ListClientsSelf$outboundSchema;
  /** @deprecated use `ListClientsSelf$Outbound` instead. */
  export type Outbound = ListClientsSelf$Outbound;
}

export function listClientsSelfToJSON(
  listClientsSelf: ListClientsSelf,
): string {
  return JSON.stringify(ListClientsSelf$outboundSchema.parse(listClientsSelf));
}

export function listClientsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsSelf' from JSON`,
  );
}

/** @internal */
export const ListClientsPrevious$inboundSchema: z.ZodType<
  ListClientsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListClientsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListClientsPrevious$outboundSchema: z.ZodType<
  ListClientsPrevious$Outbound,
  z.ZodTypeDef,
  ListClientsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsPrevious$ {
  /** @deprecated use `ListClientsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListClientsPrevious$inboundSchema;
  /** @deprecated use `ListClientsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListClientsPrevious$outboundSchema;
  /** @deprecated use `ListClientsPrevious$Outbound` instead. */
  export type Outbound = ListClientsPrevious$Outbound;
}

export function listClientsPreviousToJSON(
  listClientsPrevious: ListClientsPrevious,
): string {
  return JSON.stringify(
    ListClientsPrevious$outboundSchema.parse(listClientsPrevious),
  );
}

export function listClientsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsPrevious' from JSON`,
  );
}

/** @internal */
export const ListClientsNext$inboundSchema: z.ZodType<
  ListClientsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListClientsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListClientsNext$outboundSchema: z.ZodType<
  ListClientsNext$Outbound,
  z.ZodTypeDef,
  ListClientsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsNext$ {
  /** @deprecated use `ListClientsNext$inboundSchema` instead. */
  export const inboundSchema = ListClientsNext$inboundSchema;
  /** @deprecated use `ListClientsNext$outboundSchema` instead. */
  export const outboundSchema = ListClientsNext$outboundSchema;
  /** @deprecated use `ListClientsNext$Outbound` instead. */
  export type Outbound = ListClientsNext$Outbound;
}

export function listClientsNextToJSON(
  listClientsNext: ListClientsNext,
): string {
  return JSON.stringify(ListClientsNext$outboundSchema.parse(listClientsNext));
}

export function listClientsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsNext' from JSON`,
  );
}

/** @internal */
export const ListClientsDocumentation$inboundSchema: z.ZodType<
  ListClientsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListClientsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListClientsDocumentation$outboundSchema: z.ZodType<
  ListClientsDocumentation$Outbound,
  z.ZodTypeDef,
  ListClientsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsDocumentation$ {
  /** @deprecated use `ListClientsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListClientsDocumentation$inboundSchema;
  /** @deprecated use `ListClientsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListClientsDocumentation$outboundSchema;
  /** @deprecated use `ListClientsDocumentation$Outbound` instead. */
  export type Outbound = ListClientsDocumentation$Outbound;
}

export function listClientsDocumentationToJSON(
  listClientsDocumentation: ListClientsDocumentation,
): string {
  return JSON.stringify(
    ListClientsDocumentation$outboundSchema.parse(listClientsDocumentation),
  );
}

export function listClientsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListClientsLinks$inboundSchema: z.ZodType<
  ListClientsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListClientsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListClientsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListClientsNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListClientsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListClientsLinks$Outbound = {
  self?: ListClientsSelf$Outbound | undefined;
  previous?: ListClientsPrevious$Outbound | null | undefined;
  next?: ListClientsNext$Outbound | null | undefined;
  documentation?: ListClientsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListClientsLinks$outboundSchema: z.ZodType<
  ListClientsLinks$Outbound,
  z.ZodTypeDef,
  ListClientsLinks
> = z.object({
  self: z.lazy(() => ListClientsSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListClientsPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListClientsNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListClientsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsLinks$ {
  /** @deprecated use `ListClientsLinks$inboundSchema` instead. */
  export const inboundSchema = ListClientsLinks$inboundSchema;
  /** @deprecated use `ListClientsLinks$outboundSchema` instead. */
  export const outboundSchema = ListClientsLinks$outboundSchema;
  /** @deprecated use `ListClientsLinks$Outbound` instead. */
  export type Outbound = ListClientsLinks$Outbound;
}

export function listClientsLinksToJSON(
  listClientsLinks: ListClientsLinks,
): string {
  return JSON.stringify(
    ListClientsLinks$outboundSchema.parse(listClientsLinks),
  );
}

export function listClientsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsLinks' from JSON`,
  );
}

/** @internal */
export const ListClientsResponse$inboundSchema: z.ZodType<
  ListClientsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListClientsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListClientsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListClientsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListClientsEmbedded$Outbound | undefined;
  _links?: ListClientsLinks$Outbound | undefined;
};

/** @internal */
export const ListClientsResponse$outboundSchema: z.ZodType<
  ListClientsResponse$Outbound,
  z.ZodTypeDef,
  ListClientsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListClientsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListClientsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClientsResponse$ {
  /** @deprecated use `ListClientsResponse$inboundSchema` instead. */
  export const inboundSchema = ListClientsResponse$inboundSchema;
  /** @deprecated use `ListClientsResponse$outboundSchema` instead. */
  export const outboundSchema = ListClientsResponse$outboundSchema;
  /** @deprecated use `ListClientsResponse$Outbound` instead. */
  export type Outbound = ListClientsResponse$Outbound;
}

export function listClientsResponseToJSON(
  listClientsResponse: ListClientsResponse,
): string {
  return JSON.stringify(
    ListClientsResponse$outboundSchema.parse(listClientsResponse),
  );
}

export function listClientsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListClientsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClientsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClientsResponse' from JSON`,
  );
}
