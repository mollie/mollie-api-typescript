/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export const GetPaymentLinkPaymentsSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export type GetPaymentLinkPaymentsSort = ClosedEnum<
  typeof GetPaymentLinkPaymentsSort
>;

export type GetPaymentLinkPaymentsRequest = {
  /**
   * Provide the ID of the related payment link.
   */
  paymentLinkId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: GetPaymentLinkPaymentsSort | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetPaymentLinkPaymentsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type GetPaymentLinkPaymentsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetPaymentLinkPaymentsBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetPaymentLinkPaymentsMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetPaymentLinkPaymentsMode = ClosedEnum<
  typeof GetPaymentLinkPaymentsMode
>;

/**
 * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
 *
 * @remarks
 *
 * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
 * retrieved using the Get method endpoint.
 *
 * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
 * tip amount.
 */
export type GetPaymentLinkPaymentsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already refunded. Only available when refunds are available for this payment. For some
 *
 * @remarks
 * payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
 * costs for a return shipment to the customer.
 */
export type GetPaymentLinkPaymentsAmountRefunded = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The remaining amount that can be refunded. Only available when refunds are available for this payment.
 */
export type GetPaymentLinkPaymentsAmountRemaining = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already captured for this payment. Only available when this payment supports captures.
 */
export type GetPaymentLinkPaymentsAmountCaptured = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that was charged back for this payment. Only available when the total charged back amount is not
 *
 * @remarks
 * zero.
 */
export type GetPaymentLinkPaymentsAmountChargedBack = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the
 *
 * @remarks
 * currency your account is settled in.
 *
 * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
 * settled by Mollie the `settlementAmount` is omitted from the response.
 *
 * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
 * using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
 */
export type GetPaymentLinkPaymentsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export const GetPaymentLinkPaymentsLineType = {
  Physical: "physical",
  Digital: "digital",
  ShippingFee: "shipping_fee",
  Discount: "discount",
  StoreCredit: "store_credit",
  GiftCard: "gift_card",
  Surcharge: "surcharge",
  Tip: "tip",
} as const;
/**
 * The type of product purchased. For example, a physical or a digital product.
 *
 * @remarks
 *
 * The `tip` payment line type is not available when creating a payment.
 */
export type GetPaymentLinkPaymentsLineType = ClosedEnum<
  typeof GetPaymentLinkPaymentsLineType
>;

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type GetPaymentLinkPaymentsUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
 *
 * @remarks
 * type.
 */
export type GetPaymentLinkPaymentsDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type GetPaymentLinkPaymentsTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
 *
 * @remarks
 * calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
 * `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type GetPaymentLinkPaymentsVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const GetPaymentLinkPaymentsCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type GetPaymentLinkPaymentsCategory = ClosedEnum<
  typeof GetPaymentLinkPaymentsCategory
>;

/**
 * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
 */
export const GetPaymentLinkPaymentsInterval = {
  DotDotDotMonths: "... months",
  DotDotDotWeeks: "... weeks",
  DotDotDotDays: "... days",
} as const;
/**
 * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
 */
export type GetPaymentLinkPaymentsInterval = ClosedEnum<
  typeof GetPaymentLinkPaymentsInterval
>;

/**
 * Total amount and currency of the recurring item.
 */
export type GetPaymentLinkPaymentsRecurringAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
 *
 * @remarks
 * to inform the shopper of the details for recurring products in the payments.
 */
export type GetPaymentLinkPaymentsRecurring = {
  /**
   * A description of the recurring item. If not present, the main description of the item will be used.
   */
  description?: string | undefined;
  /**
   * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
   */
  interval: GetPaymentLinkPaymentsInterval;
  /**
   * Total amount and currency of the recurring item.
   */
  amount?: GetPaymentLinkPaymentsRecurringAmount | undefined;
  /**
   * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
   */
  times?: number | undefined;
  /**
   * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
   */
  startDate?: string | null | undefined;
};

export type GetPaymentLinkPaymentsLine = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   */
  type?: GetPaymentLinkPaymentsLineType | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: GetPaymentLinkPaymentsUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
   *
   * @remarks
   * type.
   */
  discountAmount?: GetPaymentLinkPaymentsDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: GetPaymentLinkPaymentsTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
   *
   * @remarks
   * not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
   *
   * @remarks
   * calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
   * `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: GetPaymentLinkPaymentsVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the
   *
   * @remarks
   * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
   */
  categories?: Array<GetPaymentLinkPaymentsCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
  /**
   * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
   *
   * @remarks
   * to inform the shopper of the details for recurring products in the payments.
   */
  recurring?: GetPaymentLinkPaymentsRecurring | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and
 *
 * @remarks
 * conversion.
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
 * `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type GetPaymentLinkPaymentsBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
   * email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and
 *
 * @remarks
 * conversion.
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
 * `country`.
 */
export type GetPaymentLinkPaymentsShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only
   *
   * @remarks
   * numbers.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
   * email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
 *
 * @remarks
 * is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
 * language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
 * locale, but our hosted payment pages currently only support the specified languages.
 *
 * For bank transfer payments specifically, the locale will determine the target bank account the customer has to
 * transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
 * customer use a local bank account greatly increases the conversion and speed of payment.
 */
export const GetPaymentLinkPaymentsLocale = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
 *
 * @remarks
 * is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
 * language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
 * locale, but our hosted payment pages currently only support the specified languages.
 *
 * For bank transfer payments specifically, the locale will determine the target bank account the customer has to
 * transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
 * customer use a local bank account greatly increases the conversion and speed of payment.
 */
export type GetPaymentLinkPaymentsLocale = ClosedEnum<
  typeof GetPaymentLinkPaymentsLocale
>;

/**
 * The payment method used for this transaction. If a specific method was selected during payment initialization,
 *
 * @remarks
 * this field reflects that choice.
 */
export const GetPaymentLinkPaymentsMethod = {
  Alma: "alma",
  Applepay: "applepay",
  Bacs: "bacs",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Ideal: "ideal",
  In3: "in3",
  Kbc: "kbc",
  Klarna: "klarna",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Pointofsale: "pointofsale",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method used for this transaction. If a specific method was selected during payment initialization,
 *
 * @remarks
 * this field reflects that choice.
 */
export type GetPaymentLinkPaymentsMethod = ClosedEnum<
  typeof GetPaymentLinkPaymentsMethod
>;

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type GetPaymentLinkPaymentsMetadata =
  | string
  | { [k: string]: any }
  | Array<string>;

/**
 * Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
 *
 * @remarks
 * and capture at a later time.
 *
 * This field needs to be set to `manual` for method `riverty`.
 */
export const GetPaymentLinkPaymentsCaptureMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
/**
 * Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
 *
 * @remarks
 * and capture at a later time.
 *
 * This field needs to be set to `manual` for method `riverty`.
 */
export type GetPaymentLinkPaymentsCaptureMode = ClosedEnum<
  typeof GetPaymentLinkPaymentsCaptureMode
>;

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
 * a €0.99 fee on a €1.00 payment.
 */
export type GetPaymentLinkPaymentsApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
 *
 * @remarks
 * merchants.
 *
 * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
 * `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
 * to your own account balance.
 *
 * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
 * `routing` parameter.
 */
export type GetPaymentLinkPaymentsApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
   * a €0.99 fee on a €1.00 payment.
   */
  amount?: GetPaymentLinkPaymentsApplicationFeeAmount | undefined;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the
   *
   * @remarks
   * connected merchant.
   */
  description?: string | undefined;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const GetPaymentLinkPaymentsRoutingMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type GetPaymentLinkPaymentsRoutingMode = ClosedEnum<
  typeof GetPaymentLinkPaymentsRoutingMode
>;

/**
 * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
 */
export type GetPaymentLinkPaymentsRoutingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of destination. Currently only the destination type `organization` is supported.
 */
export const GetPaymentLinkPaymentsRoutingType = {
  Organization: "organization",
} as const;
/**
 * The type of destination. Currently only the destination type `organization` is supported.
 */
export type GetPaymentLinkPaymentsRoutingType = ClosedEnum<
  typeof GetPaymentLinkPaymentsRoutingType
>;

/**
 * The destination of this portion of the payment.
 */
export type GetPaymentLinkPaymentsDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   */
  type: GetPaymentLinkPaymentsRoutingType;
  /**
   * Required for destination type `organization`. The ID of the connected organization the funds should be
   *
   * @remarks
   * routed to.
   */
  organizationId: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPaymentLinkPaymentsRoutingSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that belong to this route.
 */
export type GetPaymentLinkPaymentsRoutingPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetPaymentLinkPaymentsRoutingLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetPaymentLinkPaymentsRoutingSelf;
  /**
   * The API resource URL of the [payment](get-payment) that belong to this route.
   */
  payment: GetPaymentLinkPaymentsRoutingPayment;
};

export type GetPaymentLinkPaymentsRouting = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
   *
   * @remarks
   * Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: GetPaymentLinkPaymentsRoutingMode;
  /**
   * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
   */
  amount: GetPaymentLinkPaymentsRoutingAmount;
  /**
   * The destination of this portion of the payment.
   */
  destination: GetPaymentLinkPaymentsDestination;
  /**
   * The date and time when the route was created. The date is given in ISO 8601 format.
   */
  createdAt: string;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
   *
   * @remarks
   * date must be given in `YYYY-MM-DD` format.
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetPaymentLinkPaymentsRoutingLinks;
};

/**
 * **Only relevant for recurring payments.**
 *
 * @remarks
 *
 * Indicate which part of a recurring sequence this payment is for.
 *
 * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
 * through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
 * on their account in the future.
 *
 * If set to `recurring`, the customer's card is charged automatically.
 *
 * Defaults to `oneoff`, which is a regular non-recurring payment.
 *
 * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
 * [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
 * are set up correctly for recurring payments.
 */
export const GetPaymentLinkPaymentsSequenceType = {
  Oneoff: "oneoff",
  First: "first",
  Recurring: "recurring",
} as const;
/**
 * **Only relevant for recurring payments.**
 *
 * @remarks
 *
 * Indicate which part of a recurring sequence this payment is for.
 *
 * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
 * through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
 * on their account in the future.
 *
 * If set to `recurring`, the customer's card is charged automatically.
 *
 * Defaults to `oneoff`, which is a regular non-recurring payment.
 *
 * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
 * [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
 * are set up correctly for recurring payments.
 */
export type GetPaymentLinkPaymentsSequenceType = ClosedEnum<
  typeof GetPaymentLinkPaymentsSequenceType
>;

/**
 * The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
 *
 * @remarks
 * statuses occur at what point.
 */
export const GetPaymentLinkPaymentsStatusEnum = {
  Open: "open",
  Pending: "pending",
  Authorized: "authorized",
  Paid: "paid",
  Canceled: "canceled",
  Expired: "expired",
  Failed: "failed",
} as const;
/**
 * The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
 *
 * @remarks
 * statuses occur at what point.
 */
export type GetPaymentLinkPaymentsStatusEnum = ClosedEnum<
  typeof GetPaymentLinkPaymentsStatusEnum
>;

/**
 * A machine-readable code that indicates the reason for the payment's status.
 */
export const GetPaymentLinkPaymentsCode = {
  ApprovedOrCompletedSuccessfully: "approved_or_completed_successfully",
  ReferToCardIssuer: "refer_to_card_issuer",
  InvalidMerchant: "invalid_merchant",
  CaptureCard: "capture_card",
  DoNotHonor: "do_not_honor",
  Error: "error",
  PartialApproval: "partial_approval",
  InvalidTransaction: "invalid_transaction",
  InvalidAmount: "invalid_amount",
  InvalidIssuer: "invalid_issuer",
  LostCard: "lost_card",
  StolenCard: "stolen_card",
  InsufficientFunds: "insufficient_funds",
  ExpiredCard: "expired_card",
  InvalidPin: "invalid_pin",
  TransactionNotPermittedToCardholder:
    "transaction_not_permitted_to_cardholder",
  TransactionNotAllowedAtTerminal: "transaction_not_allowed_at_terminal",
  ExceedsWithdrawalAmountLimit: "exceeds_withdrawal_amount_limit",
  RestrictedCard: "restricted_card",
  SecurityViolation: "security_violation",
  ExceedsWithdrawalCountLimit: "exceeds_withdrawal_count_limit",
  AllowableNumberOfPinTriesExceeded: "allowable_number_of_pin_tries_exceeded",
  NoReasonToDecline: "no_reason_to_decline",
  CannotVerifyPin: "cannot_verify_pin",
  IssuerUnavailable: "issuer_unavailable",
  UnableToRouteTransaction: "unable_to_route_transaction",
  DuplicateTransaction: "duplicate_transaction",
  SystemMalfunction: "system_malfunction",
  HonorWithId: "honor_with_id",
  InvalidCardNumber: "invalid_card_number",
  FormatError: "format_error",
  ContactCardIssuer: "contact_card_issuer",
  PinNotChanged: "pin_not_changed",
  InvalidNonexistentToAccountSpecified:
    "invalid_nonexistent_to_account_specified",
  InvalidNonexistentFromAccountSpecified:
    "invalid_nonexistent_from_account_specified",
  InvalidNonexistentAccountSpecified: "invalid_nonexistent_account_specified",
  LifecycleRelated: "lifecycle_related",
  DomesticDebitTransactionNotAllowed: "domestic_debit_transaction_not_allowed",
  PolicyRelated: "policy_related",
  FraudSecurityRelated: "fraud_security_related",
  InvalidAuthorizationLifeCycle: "invalid_authorization_life_cycle",
  PurchaseAmountOnlyNoCashBackAllowed:
    "purchase_amount_only_no_cash_back_allowed",
  CryptographicFailure: "cryptographic_failure",
  UnacceptablePin: "unacceptable_pin",
  ReferToCardIssuerSpecialCondition: "refer_to_card_issuer_special_condition",
  PickUpCardSpecialCondition: "pick_up_card_special_condition",
  VipApproval: "vip_approval",
  InvalidAccountNumber: "invalid_account_number",
  ReEnterTransaction: "re_enter_transaction",
  NoActionTaken: "no_action_taken",
  UnableToLocateRecord: "unable_to_locate_record",
  FileTemporarilyUnavailable: "file_temporarily_unavailable",
  NoCreditAccount: "no_credit_account",
  ClosedAccount: "closed_account",
  NoCheckingAccount: "no_checking_account",
  NoSavingsAccount: "no_savings_account",
  SuspectedFraud: "suspected_fraud",
  TransactionDoesNotFulfillAmlRequirement:
    "transaction_does_not_fulfill_aml_requirement",
  PinDataRequired: "pin_data_required",
  UnableToLocatePreviousMessage: "unable_to_locate_previous_message",
  PreviousMessageLocatedInconsistentData:
    "previous_message_located_inconsistent_data",
  BlockedFirstUsed: "blocked_first_used",
  TransactionReversed: "transaction_reversed",
  CreditIssuerUnavailable: "credit_issuer_unavailable",
  PinCryptographicErrorFound: "pin_cryptographic_error_found",
  NegativeOnlineCamResult: "negative_online_cam_result",
  ViolationOfLaw: "violation_of_law",
  ForceStip: "force_stip",
  CashServiceNotAvailable: "cash_service_not_available",
  CashbackRequestExceedsIssuerLimit: "cashback_request_exceeds_issuer_limit",
  DeclineForCvv2Failure: "decline_for_cvv2_failure",
  TransactionAmountExceedsPreAuthorizedAmount:
    "transaction_amount_exceeds_pre_authorized_amount",
  InvalidBillerInformation: "invalid_biller_information",
  PinChangeUnblockRequestDeclined: "pin_change_unblock_request_declined",
  UnsafePin: "unsafe_pin",
  CardAuthenticationFailed: "card_authentication_failed",
  StopPaymentOrder: "stop_payment_order",
  RevocationOfAuthorization: "revocation_of_authorization",
  RevocationOfAllAuthorizations: "revocation_of_all_authorizations",
  ForwardToIssuerXa: "forward_to_issuer_xa",
  ForwardToIssuerXd: "forward_to_issuer_xd",
  UnableToGoOnline: "unable_to_go_online",
  AdditionalCustomerAuthenticationRequired:
    "additional_customer_authentication_required",
  MerchantIdNotFound: "merchant_id_not_found",
  MerchantAccountClosed: "merchant_account_closed",
  TerminalIdNotFound: "terminal_id_not_found",
  TerminalClosed: "terminal_closed",
  InvalidCategoryCode: "invalid_category_code",
  InvalidCurrency: "invalid_currency",
  MissingCvv2Cvc2: "missing_cvv2_cvc2",
  Cvv2NotAllowed: "cvv2_not_allowed",
  MerchantNotRegisteredVbv: "merchant_not_registered_vbv",
  MerchantNotRegisteredForAmex: "merchant_not_registered_for_amex",
  TransactionNotPermittedAtTerminal: "transaction_not_permitted_at_terminal",
  AgreementTerminalNotRelated: "agreement_terminal_not_related",
  InvalidProcessorId: "invalid_processor_id",
  InvalidMerchantData: "invalid_merchant_data",
  SubMerchantAccountClosed: "sub_merchant_account_closed",
  TerminalBusy: "terminal_busy",
  TerminalUnreachable: "terminal_unreachable",
  ServiceFailed: "service_failed",
  InvalidOperation: "invalid_operation",
  AuthorizationError: "authorization_error",
  LoginFailedWithoutReason: "login_failed_without_reason",
  InvalidRetailer: "invalid_retailer",
  CardDoesNotExist: "card_does_not_exist",
  CardIsBlocked: "card_is_blocked",
  InvalidCardId: "invalid_card_id",
  CardIsTransferred: "card_is_transferred",
  CardIsNotActive: "card_is_not_active",
  IncorrectPurchaseValue: "incorrect_purchase_value",
  CardNotAvailable: "card_not_available",
  WrongCurrency: "wrong_currency",
  LoginFailedUnknownUser: "login_failed_unknown_user",
  LoginFailedInvalidPassword: "login_failed_invalid_password",
  InvalidEanCode: "invalid_ean_code",
} as const;
/**
 * A machine-readable code that indicates the reason for the payment's status.
 */
export type GetPaymentLinkPaymentsCode = ClosedEnum<
  typeof GetPaymentLinkPaymentsCode
>;

/**
 * This object offers details about the status of a payment. Currently it is only available for point-of-sale
 *
 * @remarks
 * payments.
 *
 * You can find more information about the possible values of this object on
 * [this page](status-reasons).**
 */
export type GetPaymentLinkPaymentsStatusReason = {
  code: GetPaymentLinkPaymentsCode;
  /**
   * A description of the status reason, localized according to the payment `locale`.
   */
  message: string;
};

/**
 * The card's target audience, if known.
 */
export const GetPaymentLinkPaymentsCardAudition = {
  Consumer: "consumer",
  Business: "business",
} as const;
/**
 * The card's target audience, if known.
 */
export type GetPaymentLinkPaymentsCardAudition = ClosedEnum<
  typeof GetPaymentLinkPaymentsCardAudition
>;

/**
 * The card's label, if known.
 */
export const GetPaymentLinkPaymentsCardLabel = {
  AmericanExpress: "American Express",
  CartaSi: "Carta Si",
  CarteBleue: "Carte Bleue",
  Dankort: "Dankort",
  DinersClub: "Diners Club",
  Discover: "Discover",
  Jcb: "JCB",
  Laser: "Laser",
  Maestro: "Maestro",
  Mastercard: "Mastercard",
  Unionpay: "Unionpay",
  Visa: "Visa",
  Vpay: "Vpay",
} as const;
/**
 * The card's label, if known.
 */
export type GetPaymentLinkPaymentsCardLabel = ClosedEnum<
  typeof GetPaymentLinkPaymentsCardLabel
>;

/**
 * The card type.
 */
export const GetPaymentLinkPaymentsCardFunding = {
  Debit: "debit",
  Credit: "credit",
  Prepaid: "prepaid",
  DeferredDebit: "deferred-debit",
} as const;
/**
 * The card type.
 */
export type GetPaymentLinkPaymentsCardFunding = ClosedEnum<
  typeof GetPaymentLinkPaymentsCardFunding
>;

/**
 * The level of security applied during card processing.
 */
export const GetPaymentLinkPaymentsCardSecurity = {
  Normal: "normal",
  Threedsecure: "3dsecure",
} as const;
/**
 * The level of security applied during card processing.
 */
export type GetPaymentLinkPaymentsCardSecurity = ClosedEnum<
  typeof GetPaymentLinkPaymentsCardSecurity
>;

/**
 * The applicable card fee region.
 */
export const GetPaymentLinkPaymentsFeeRegion = {
  AmericanExpress: "american-express",
  AmexIntraEea: "amex-intra-eea",
  CarteBancaire: "carte-bancaire",
  IntraEu: "intra-eu",
  IntraEuCorporate: "intra-eu-corporate",
  Domestic: "domestic",
  Maestro: "maestro",
  Other: "other",
  Inter: "inter",
  IntraEea: "intra-eea",
} as const;
/**
 * The applicable card fee region.
 */
export type GetPaymentLinkPaymentsFeeRegion = ClosedEnum<
  typeof GetPaymentLinkPaymentsFeeRegion
>;

/**
 * A failure code to help understand why the payment failed.
 */
export const GetPaymentLinkPaymentsFailureReason = {
  AuthenticationAbandoned: "authentication_abandoned",
  AuthenticationFailed: "authentication_failed",
  AuthenticationRequired: "authentication_required",
  AuthenticationUnavailableAcs: "authentication_unavailable_acs",
  CardDeclined: "card_declined",
  CardExpired: "card_expired",
  InactiveCard: "inactive_card",
  InsufficientFunds: "insufficient_funds",
  InvalidCvv: "invalid_cvv",
  InvalidCardHolderName: "invalid_card_holder_name",
  InvalidCardNumber: "invalid_card_number",
  InvalidCardType: "invalid_card_type",
  PossibleFraud: "possible_fraud",
  RefusedByIssuer: "refused_by_issuer",
  UnknownReason: "unknown_reason",
} as const;
/**
 * A failure code to help understand why the payment failed.
 */
export type GetPaymentLinkPaymentsFailureReason = ClosedEnum<
  typeof GetPaymentLinkPaymentsFailureReason
>;

/**
 * The wallet used when creating the payment.
 */
export const GetPaymentLinkPaymentsWallet = {
  Applepay: "applepay",
} as const;
/**
 * The wallet used when creating the payment.
 */
export type GetPaymentLinkPaymentsWallet = ClosedEnum<
  typeof GetPaymentLinkPaymentsWallet
>;

/**
 * Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
 *
 * @remarks
 * payments, and if the information is made available by PayPal.
 */
export const GetPaymentLinkPaymentsSellerProtection = {
  Eligible: "Eligible",
  Ineligible: "Ineligible",
  PartiallyEligibleINROnly: "Partially Eligible - INR Only",
  PartiallyEligibleUnauthOnly: "Partially Eligible - Unauth Only",
  PartiallyEligible: "Partially Eligible",
  None: "None",
  Active: "Active",
  FraudControlUnauthPremiumEligible: "Fraud Control - Unauth Premium Eligible",
} as const;
/**
 * Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
 *
 * @remarks
 * payments, and if the information is made available by PayPal.
 */
export type GetPaymentLinkPaymentsSellerProtection = ClosedEnum<
  typeof GetPaymentLinkPaymentsSellerProtection
>;

/**
 * An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
 *
 * @remarks
 * PayPal will not charge a fee for this transaction.
 */
export type GetPaymentLinkPaymentsPaypalFee = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The method by which the card was read by the terminal.
 */
export const GetPaymentLinkPaymentsCardReadMethod = {
  Chip: "chip",
  MagneticStripe: "magnetic-stripe",
  NearFieldCommunication: "near-field-communication",
  Contactless: "contactless",
  Moto: "moto",
} as const;
/**
 * The method by which the card was read by the terminal.
 */
export type GetPaymentLinkPaymentsCardReadMethod = ClosedEnum<
  typeof GetPaymentLinkPaymentsCardReadMethod
>;

/**
 * The method used to verify the cardholder's identity.
 */
export const GetPaymentLinkPaymentsCardVerificationMethod = {
  NoCvmRequired: "no-cvm-required",
  OnlinePin: "online-pin",
  OfflinePin: "offline-pin",
  ConsumerDevice: "consumer-device",
  Signature: "signature",
  SignatureAndOnlinePin: "signature-and-online-pin",
  OnlinePinAndSignature: "online-pin-and-signature",
  None: "none",
  Failed: "failed",
} as const;
/**
 * The method used to verify the cardholder's identity.
 */
export type GetPaymentLinkPaymentsCardVerificationMethod = ClosedEnum<
  typeof GetPaymentLinkPaymentsCardVerificationMethod
>;

/**
 * The Point of sale receipt object.
 */
export type GetPaymentLinkPaymentsReceipt = {
  /**
   * A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
   */
  authorizationCode?: string | null | undefined;
  /**
   * The unique number that identifies a specific payment application on a chip card.
   */
  applicationIdentifier?: string | null | undefined;
  /**
   * The method by which the card was read by the terminal.
   */
  cardReadMethod?: GetPaymentLinkPaymentsCardReadMethod | null | undefined;
  /**
   * The method used to verify the cardholder's identity.
   */
  cardVerificationMethod?:
    | GetPaymentLinkPaymentsCardVerificationMethod
    | null
    | undefined;
};

/**
 * Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
 *
 * @remarks
 * the QR code details will be available in this object.
 *
 * The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
 * Bancontact QR payments can be completed by the customer using the Bancontact app.
 */
export type GetPaymentLinkPaymentsQrCode = {
  /**
   * The height of the QR code image in pixels.
   */
  height?: number | undefined;
  /**
   * The width of the QR code image in pixels.
   */
  width?: number | undefined;
  /**
   * The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
   *
   * @remarks
   * downloaded.
   */
  src?: string | undefined;
};

/**
 * An amount object for the amount that remained after all gift cards or vouchers were applied.
 */
export type GetPaymentLinkPaymentsRemainderAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * An object containing payment details collected during the payment process. For example, details may include the
 *
 * @remarks
 * customer's card or bank details and a payment reference. For the full list of details, please refer to the
 * [method-specific parameters](extra-payment-parameters) guide.
 */
export type GetPaymentLinkPaymentsDetails = {
  /**
   * The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
   */
  consumerName?: string | null | undefined;
  /**
   * The customer's account reference.
   *
   * @remarks
   *
   * For banking-based payment methods — such as iDEAL — this is normally either an IBAN or a domestic bank account
   * number.
   *
   * For PayPal, the account reference is an email address.
   *
   * For card and Bancontact payments, refer to details.cardNumber.
   */
  consumerAccount?: string | null | undefined;
  /**
   * The BIC of the customer's bank account, if applicable.
   */
  consumerBic?: string | null | undefined;
  /**
   * For wallet payment methods — such as Apple Pay and PayPal — the shipping address is often already known by the
   *
   * @remarks
   * wallet provider. In these cases the shipping address may be available as a payment detail.
   */
  shippingAddress?: { [k: string]: any } | null | undefined;
  /**
   * For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
   *
   * @remarks
   * PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
   */
  cardNumber?: string | null | undefined;
  /**
   * The name of the bank that the customer will need to make the bank transfer payment towards.
   */
  bankName?: string | undefined;
  /**
   * The bank account number the customer will need to make the bank transfer payment towards.
   */
  bankAccount?: string | undefined;
  /**
   * The BIC of the bank the customer will need to make the bank transfer payment towards.
   */
  bankBic?: string | undefined;
  /**
   * The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
   *
   * @remarks
   * formatting here; show it to the customer as-is.
   */
  transferReference?: string | null | undefined;
  /**
   * A unique fingerprint for a specific card. Can be used to identify returning customers.
   *
   * @remarks
   *
   * In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
   * linking multiple transactions from wallets and physical card to a single account, also across payment methods
   * or when the card is reissued.
   */
  cardFingerprint?: string | null | undefined;
  /**
   * The customer's name as shown on their card.
   */
  cardHolder?: string | null | undefined;
  /**
   * The card's target audience, if known.
   */
  cardAudition?: GetPaymentLinkPaymentsCardAudition | null | undefined;
  /**
   * The card's label, if known.
   */
  cardLabel?: GetPaymentLinkPaymentsCardLabel | null | undefined;
  /**
   * The ISO 3166-1 alpha-2 country code of the country the card was issued in.
   */
  cardCountryCode?: string | null | undefined;
  /**
   * The expiry date (MM/YY) of the card as displayed on the card.
   */
  cardExpiryDate?: string | null | undefined;
  /**
   * The card type.
   */
  cardFunding?: GetPaymentLinkPaymentsCardFunding | null | undefined;
  /**
   * The level of security applied during card processing.
   */
  cardSecurity?: GetPaymentLinkPaymentsCardSecurity | null | undefined;
  /**
   * The applicable card fee region.
   */
  feeRegion?: GetPaymentLinkPaymentsFeeRegion | null | undefined;
  /**
   * The first 6 and last 4 digits of the card number.
   */
  cardMaskedNumber?: string | null | undefined;
  /**
   * The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
   */
  card3dsEci?: string | null | undefined;
  /**
   * The first 6 digit of the card bank identification number.
   */
  cardBin?: string | null | undefined;
  /**
   * The issuer of the Card.
   */
  cardIssuer?: string | null | undefined;
  /**
   * A failure code to help understand why the payment failed.
   */
  failureReason?: GetPaymentLinkPaymentsFailureReason | null | undefined;
  /**
   * A human-friendly failure message that can be shown to the customer. The message is translated in accordance
   *
   * @remarks
   * with the payment's locale setting.
   */
  failureMessage?: string | null | undefined;
  /**
   * The wallet used when creating the payment.
   */
  wallet?: GetPaymentLinkPaymentsWallet | null | undefined;
  /**
   * PayPal's reference for the payment.
   */
  paypalReference?: string | null | undefined;
  /**
   * ID of the customer's PayPal account.
   */
  paypalPayerId?: string | null | undefined;
  /**
   * Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
   *
   * @remarks
   * payments, and if the information is made available by PayPal.
   */
  sellerProtection?: GetPaymentLinkPaymentsSellerProtection | null | undefined;
  /**
   * An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
   *
   * @remarks
   * PayPal will not charge a fee for this transaction.
   */
  paypalFee?: GetPaymentLinkPaymentsPaypalFee | null | undefined;
  /**
   * The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
   */
  customerReference?: string | undefined;
  /**
   * The ID of the terminal device where the payment took place on.
   */
  terminalId?: string | undefined;
  /**
   * The first 6 digits & last 4 digits of the customer's masked card number.
   */
  maskedNumber?: string | null | undefined;
  /**
   * The Point of sale receipt object.
   */
  receipt?: GetPaymentLinkPaymentsReceipt | undefined;
  /**
   * The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
   *
   * @remarks
   * reference to Mollie.
   */
  creditorIdentifier?: string | null | undefined;
  /**
   * Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
   */
  dueDate?: RFCDate | null | undefined;
  /**
   * Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
   *
   * @remarks
   * has been signed.
   */
  signatureDate?: RFCDate | null | undefined;
  /**
   * The official reason why this payment has failed. A detailed description of each reason is available on the
   *
   * @remarks
   * website of the European Payments Council.
   */
  bankReasonCode?: string | null | undefined;
  /**
   * A human-friendly description of the failure reason.
   */
  bankReason?: string | null | undefined;
  /**
   * The end-to-end identifier you provided in the batch file.
   */
  endToEndIdentifier?: string | null | undefined;
  /**
   * The mandate reference you provided in the batch file.
   */
  mandateReference?: string | null | undefined;
  /**
   * The batch reference you provided in the batch file.
   */
  batchReference?: string | null | undefined;
  /**
   * The file reference you provided in the batch file.
   */
  fileReference?: string | null | undefined;
  /**
   * Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
   *
   * @remarks
   * the QR code details will be available in this object.
   *
   * The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
   * Bancontact QR payments can be completed by the customer using the Bancontact app.
   */
  qrCode?: GetPaymentLinkPaymentsQrCode | undefined;
  /**
   * For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
   */
  voucherNumber?: string | undefined;
  /**
   * An array of detail objects for each gift card that was used on this payment, if any.
   */
  giftcards?: Array<{ [k: string]: any }> | undefined;
  /**
   * For payments with vouchers: the brand name of the first voucher applied.
   */
  issuer?: string | undefined;
  /**
   * An array of detail objects for each voucher that was used on this payment, if any.
   */
  vouchers?: Array<{ [k: string]: any }> | undefined;
  /**
   * An amount object for the amount that remained after all gift cards or vouchers were applied.
   */
  remainderAmount?: GetPaymentLinkPaymentsRemainderAmount | undefined;
  /**
   * The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
   */
  remainderMethod?: string | undefined;
  /**
   * Optional include. The full payment method details of the remainder payment.
   */
  remainderDetails?: { [k: string]: any } | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPaymentLinkPaymentsPaymentSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type GetPaymentLinkPaymentsCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
 */
export type GetPaymentLinkPaymentsMobileAppCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * For test mode payments in certain scenarios, a hosted interface is available to help you test different
 *
 * @remarks
 * payment states.
 *
 * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
 * payments are executed without any user interaction.
 *
 * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
 * chargeback for the test payment.
 */
export type GetPaymentLinkPaymentsChangePaymentState = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the payment in the Mollie Dashboard.
 */
export type GetPaymentLinkPaymentsDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
 */
export type GetPaymentLinkPaymentsRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
 *
 * @remarks
 * payment.
 */
export type GetPaymentLinkPaymentsChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
 */
export type GetPaymentLinkPaymentsCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
 *
 * @remarks
 * Not present if not yet settled.
 */
export type GetPaymentLinkPaymentsSettlement = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer).
 */
export type GetPaymentLinkPaymentsCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [mandate](get-mandate).
 */
export type GetPaymentLinkPaymentsMandate = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [subscription](get-subscription).
 */
export type GetPaymentLinkPaymentsSubscription = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
 *
 * @remarks
 * order.
 */
export type GetPaymentLinkPaymentsOrder = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
 *
 * @remarks
 * point-of-sale payments.
 */
export type GetPaymentLinkPaymentsTerminal = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPaymentLinkPaymentsPaymentDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
 *
 * @remarks
 * successful).
 */
export type GetPaymentLinkPaymentsLinksStatus = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
 *
 * @remarks
 * bank transfer.
 */
export type GetPaymentLinkPaymentsPayOnline = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetPaymentLinkPaymentsPaymentLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: GetPaymentLinkPaymentsPaymentSelf;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  checkout?: GetPaymentLinkPaymentsCheckout | undefined;
  /**
   * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
   */
  mobileAppCheckout?: GetPaymentLinkPaymentsMobileAppCheckout | undefined;
  /**
   * For test mode payments in certain scenarios, a hosted interface is available to help you test different
   *
   * @remarks
   * payment states.
   *
   * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
   * payments are executed without any user interaction.
   *
   * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
   * chargeback for the test payment.
   */
  changePaymentState?: GetPaymentLinkPaymentsChangePaymentState | undefined;
  /**
   * Direct link to the payment in the Mollie Dashboard.
   */
  dashboard: GetPaymentLinkPaymentsDashboard;
  /**
   * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
   */
  refunds?: GetPaymentLinkPaymentsRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
   *
   * @remarks
   * payment.
   */
  chargebacks?: GetPaymentLinkPaymentsChargebacks | undefined;
  /**
   * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
   */
  captures?: GetPaymentLinkPaymentsCaptures | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
   *
   * @remarks
   * Not present if not yet settled.
   */
  settlement?: GetPaymentLinkPaymentsSettlement | undefined;
  /**
   * The API resource URL of the [customer](get-customer).
   */
  customer?: GetPaymentLinkPaymentsCustomer | undefined;
  /**
   * The API resource URL of the [mandate](get-mandate).
   */
  mandate?: GetPaymentLinkPaymentsMandate | undefined;
  /**
   * The API resource URL of the [subscription](get-subscription).
   */
  subscription?: GetPaymentLinkPaymentsSubscription | undefined;
  /**
   * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
   *
   * @remarks
   * order.
   */
  order?: GetPaymentLinkPaymentsOrder | undefined;
  /**
   * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
   *
   * @remarks
   * point-of-sale payments.
   */
  terminal?: GetPaymentLinkPaymentsTerminal | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetPaymentLinkPaymentsPaymentDocumentation | undefined;
  /**
   * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
   *
   * @remarks
   * successful).
   */
  status?: GetPaymentLinkPaymentsLinksStatus | undefined;
  /**
   * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
   *
   * @remarks
   * bank transfer.
   */
  payOnline?: GetPaymentLinkPaymentsPayOnline | undefined;
};

export type GetPaymentLinkPaymentsPaymentOutput = {
  /**
   * Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
   *
   * @remarks
   * will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: GetPaymentLinkPaymentsMode;
  /**
   * The description of the payment. This will be shown to your customer on their card or bank statement when possible.
   *
   * @remarks
   * We truncate the description automatically according to the limits of the used payment method. The description is
   * also visible in any exports you generate.
   *
   * We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
   * This is particularly useful for bookkeeping.
   *
   * The maximum length of the description field differs per payment method, with the absolute maximum being 255
   * characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
   */
  description: string;
  /**
   * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
   *
   * @remarks
   *
   * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
   * retrieved using the Get method endpoint.
   *
   * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
   * tip amount.
   */
  amount: GetPaymentLinkPaymentsAmount;
  /**
   * The total amount that is already refunded. Only available when refunds are available for this payment. For some
   *
   * @remarks
   * payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
   * costs for a return shipment to the customer.
   */
  amountRefunded?: GetPaymentLinkPaymentsAmountRefunded | undefined;
  /**
   * The remaining amount that can be refunded. Only available when refunds are available for this payment.
   */
  amountRemaining?: GetPaymentLinkPaymentsAmountRemaining | undefined;
  /**
   * The total amount that is already captured for this payment. Only available when this payment supports captures.
   */
  amountCaptured?: GetPaymentLinkPaymentsAmountCaptured | undefined;
  /**
   * The total amount that was charged back for this payment. Only available when the total charged back amount is not
   *
   * @remarks
   * zero.
   */
  amountChargedBack?: GetPaymentLinkPaymentsAmountChargedBack | undefined;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the
   *
   * @remarks
   * currency your account is settled in.
   *
   * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
   * settled by Mollie the `settlementAmount` is omitted from the response.
   *
   * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
   * using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
   */
  settlementAmount?: GetPaymentLinkPaymentsSettlementAmount | undefined;
  /**
   * The URL your customer will be redirected to after the payment process.
   *
   * @remarks
   *
   * It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
   * right page referencing the order when your customer returns.
   *
   * The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
   * Apple Pay payments with an `applePayPaymentToken`.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
   *
   * @remarks
   * provided, the customer will be redirected to the `redirectUrl` instead — see above.
   *
   * Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
   * therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
   * payment cancellations.
   */
  cancelUrl?: string | null | undefined;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
   * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
   * local machine.
   */
  webhookUrl?: string | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
   *
   * @remarks
   * ordered and its price.
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<GetPaymentLinkPaymentsLine> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and
   *
   * @remarks
   * conversion.
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
   * `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: GetPaymentLinkPaymentsBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and
   *
   * @remarks
   * conversion.
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
   * `country`.
   */
  shippingAddress?: GetPaymentLinkPaymentsShippingAddress | undefined;
  /**
   * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
   *
   * @remarks
   * is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
   * language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
   * locale, but our hosted payment pages currently only support the specified languages.
   *
   * For bank transfer payments specifically, the locale will determine the target bank account the customer has to
   * transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
   * customer use a local bank account greatly increases the conversion and speed of payment.
   */
  locale?: GetPaymentLinkPaymentsLocale | null | undefined;
  /**
   * This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
   *
   * @remarks
   * field is omitted if the country code was not detected.
   */
  countryCode?: string | null | undefined;
  /**
   * The payment method used for this transaction. If a specific method was selected during payment initialization,
   *
   * @remarks
   * this field reflects that choice.
   */
  method?: GetPaymentLinkPaymentsMethod | null | undefined;
  /**
   * For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
   *
   * @remarks
   * rates you have used for the order to ensure your customer's country matches the VAT country.
   *
   * Use this parameter to restrict the payment methods available to your customer to those from a single country.
   *
   * If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
   *
   * The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
   */
  restrictPaymentMethodsToCountry?: string | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: string | { [k: string]: any } | Array<string> | null | undefined;
  /**
   * Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
   *
   * @remarks
   * and capture at a later time.
   *
   * This field needs to be set to `manual` for method `riverty`.
   */
  captureMode?: GetPaymentLinkPaymentsCaptureMode | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
   * later point either be 'captured' or canceled.
   *
   * By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
   * capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
   * example `8 hours` or `2 days`.
   *
   * To schedule an automatic capture, the `captureMode` must be set to `automatic`.
   *
   * The maximum delay is 7 days (168 hours).
   *
   * Possible values: `... hours` `... days`
   */
  captureDelay?: string | null | undefined;
  /**
   * Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
   *
   * @remarks
   * can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
   */
  captureBefore?: string | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
   *
   * @remarks
   * merchants.
   *
   * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
   * `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
   * to your own account balance.
   *
   * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
   * `routing` parameter.
   */
  applicationFee?: GetPaymentLinkPaymentsApplicationFee | null | undefined;
  /**
   * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
   *
   * @remarks
   *
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
   * merchants.
   *
   * If you create payments on your own account that you want to split between yourself and one or more connected
   * merchants, you can use this `routing` parameter to route the payment accordingly.
   *
   * The `routing` parameter should contain an array of objects, with each object describing the destination for a
   * specific portion of the payment.
   *
   * It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
   * payment amount have been routed, the amount left will be routed to the current organization automatically.
   *
   * If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
   * parameter.
   */
  routing?: Array<GetPaymentLinkPaymentsRouting> | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * Indicate which part of a recurring sequence this payment is for.
   *
   * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
   * through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
   * on their account in the future.
   *
   * If set to `recurring`, the customer's card is charged automatically.
   *
   * Defaults to `oneoff`, which is a regular non-recurring payment.
   *
   * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
   * [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
   * are set up correctly for recurring payments.
   */
  sequenceType: GetPaymentLinkPaymentsSequenceType | null;
  /**
   * If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
   *
   * @remarks
   * be added to the response.
   */
  subscriptionId?: string | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
   * the customer's accounts should be credited.
   */
  mandateId?: string | null | undefined;
  /**
   * The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
   *
   * @remarks
   * payments, but can also be used on regular payments to enable single-click payments.
   *
   * If `sequenceType` is set to `recurring`, this field is required.
   */
  customerId?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
   * Organization tokens, the `profileId` is required.
   *
   * For more information, see [Authentication](authentication).
   */
  profileId: string;
  /**
   * The identifier referring to the [settlement](get-settlement) this payment was settled with.
   */
  settlementId?: string | null | undefined;
  /**
   * If the payment was created for an [order](get-order), the ID of that order will be part of the response.
   */
  orderId?: string | null | undefined;
  /**
   * The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
   *
   * @remarks
   * statuses occur at what point.
   */
  status: GetPaymentLinkPaymentsStatusEnum;
  /**
   * This object offers details about the status of a payment. Currently it is only available for point-of-sale
   *
   * @remarks
   * payments.
   *
   * You can find more information about the possible values of this object on
   * [this page](status-reasons).**
   */
  statusReason?: GetPaymentLinkPaymentsStatusReason | null | undefined;
  /**
   * Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
   */
  isCancelable?: boolean | null | undefined;
  /**
   * An object containing payment details collected during the payment process. For example, details may include the
   *
   * @remarks
   * customer's card or bank details and a payment reference. For the full list of details, please refer to the
   * [method-specific parameters](extra-payment-parameters) guide.
   */
  details?: GetPaymentLinkPaymentsDetails | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
   *
   * @remarks
   * not authorized (yet).
   */
  authorizedAt?: string | null | undefined;
  /**
   * The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
   *
   * @remarks
   * completed (yet).
   */
  paidAt?: string | null | undefined;
  /**
   * The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
   *
   * @remarks
   * canceled (yet).
   */
  canceledAt?: string | null | undefined;
  /**
   * The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
   *
   * @remarks
   * longer expire.
   */
  expiresAt?: string | null | undefined;
  /**
   * The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
   *
   * @remarks
   * expire (yet).
   */
  expiredAt?: string | null | undefined;
  /**
   * The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
   *
   * @remarks
   * (yet).
   */
  failedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: GetPaymentLinkPaymentsPaymentLinks;
};

export type GetPaymentLinkPaymentsEmbedded = {
  /**
   * An array of payment objects.
   */
  payments?: Array<GetPaymentLinkPaymentsPaymentOutput> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type GetPaymentLinkPaymentsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type GetPaymentLinkPaymentsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type GetPaymentLinkPaymentsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPaymentLinkPaymentsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type GetPaymentLinkPaymentsLinks = {
  /**
   * The URL to the current set of items.
   */
  self: GetPaymentLinkPaymentsSelf;
  /**
   * The previous set of items, if available.
   */
  previous: GetPaymentLinkPaymentsPrevious | null;
  /**
   * The next set of items, if available.
   */
  next: GetPaymentLinkPaymentsNext | null;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: GetPaymentLinkPaymentsDocumentation;
};

/**
 * A list of payment objects.
 */
export type GetPaymentLinkPaymentsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: GetPaymentLinkPaymentsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: GetPaymentLinkPaymentsLinks;
};

/** @internal */
export const GetPaymentLinkPaymentsSort$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsSort
> = z.nativeEnum(GetPaymentLinkPaymentsSort);

/** @internal */
export const GetPaymentLinkPaymentsSort$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsSort
> = GetPaymentLinkPaymentsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsSort$ {
  /** @deprecated use `GetPaymentLinkPaymentsSort$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsSort$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSort$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsSort$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsRequest$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentLinkId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(GetPaymentLinkPaymentsSort$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsRequest$Outbound = {
  paymentLinkId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsRequest$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRequest
> = z.object({
  paymentLinkId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(GetPaymentLinkPaymentsSort$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRequest$ {
  /** @deprecated use `GetPaymentLinkPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRequest$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsRequest$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRequest$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRequest$Outbound;
}

export function getPaymentLinkPaymentsRequestToJSON(
  getPaymentLinkPaymentsRequest: GetPaymentLinkPaymentsRequest,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRequest$outboundSchema.parse(
      getPaymentLinkPaymentsRequest,
    ),
  );
}

export function getPaymentLinkPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsBadRequestDocumentation$inboundSchema:
  z.ZodType<
    GetPaymentLinkPaymentsBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type GetPaymentLinkPaymentsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsBadRequestDocumentation$outboundSchema:
  z.ZodType<
    GetPaymentLinkPaymentsBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    GetPaymentLinkPaymentsBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsBadRequestDocumentation$ {
  /** @deprecated use `GetPaymentLinkPaymentsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsBadRequestDocumentation$Outbound;
}

export function getPaymentLinkPaymentsBadRequestDocumentationToJSON(
  getPaymentLinkPaymentsBadRequestDocumentation:
    GetPaymentLinkPaymentsBadRequestDocumentation,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsBadRequestDocumentation$outboundSchema.parse(
      getPaymentLinkPaymentsBadRequestDocumentation,
    ),
  );
}

export function getPaymentLinkPaymentsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentLinkPaymentsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentLinkPaymentsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsBadRequestLinks$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetPaymentLinkPaymentsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetPaymentLinkPaymentsBadRequestLinks$Outbound = {
  documentation: GetPaymentLinkPaymentsBadRequestDocumentation$Outbound;
};

/** @internal */
export const GetPaymentLinkPaymentsBadRequestLinks$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    GetPaymentLinkPaymentsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsBadRequestLinks$ {
  /** @deprecated use `GetPaymentLinkPaymentsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsBadRequestLinks$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsBadRequestLinks$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsBadRequestLinks$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsBadRequestLinks$Outbound;
}

export function getPaymentLinkPaymentsBadRequestLinksToJSON(
  getPaymentLinkPaymentsBadRequestLinks: GetPaymentLinkPaymentsBadRequestLinks,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsBadRequestLinks$outboundSchema.parse(
      getPaymentLinkPaymentsBadRequestLinks,
    ),
  );
}

export function getPaymentLinkPaymentsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsMode$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsMode
> = z.nativeEnum(GetPaymentLinkPaymentsMode);

/** @internal */
export const GetPaymentLinkPaymentsMode$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsMode
> = GetPaymentLinkPaymentsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsMode$ {
  /** @deprecated use `GetPaymentLinkPaymentsMode$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsMode$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMode$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsMode$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsAmount$Outbound;
}

export function getPaymentLinkPaymentsAmountToJSON(
  getPaymentLinkPaymentsAmount: GetPaymentLinkPaymentsAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsAmount$outboundSchema.parse(
      getPaymentLinkPaymentsAmount,
    ),
  );
}

export function getPaymentLinkPaymentsAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsAmountRefunded$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountRefunded,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsAmountRefunded$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsAmountRefunded$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountRefunded$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsAmountRefunded
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsAmountRefunded$ {
  /** @deprecated use `GetPaymentLinkPaymentsAmountRefunded$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsAmountRefunded$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountRefunded$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsAmountRefunded$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountRefunded$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsAmountRefunded$Outbound;
}

export function getPaymentLinkPaymentsAmountRefundedToJSON(
  getPaymentLinkPaymentsAmountRefunded: GetPaymentLinkPaymentsAmountRefunded,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsAmountRefunded$outboundSchema.parse(
      getPaymentLinkPaymentsAmountRefunded,
    ),
  );
}

export function getPaymentLinkPaymentsAmountRefundedFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsAmountRefunded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsAmountRefunded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsAmountRefunded' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsAmountRemaining$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountRemaining,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsAmountRemaining$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsAmountRemaining$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountRemaining$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsAmountRemaining
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsAmountRemaining$ {
  /** @deprecated use `GetPaymentLinkPaymentsAmountRemaining$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsAmountRemaining$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountRemaining$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsAmountRemaining$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountRemaining$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsAmountRemaining$Outbound;
}

export function getPaymentLinkPaymentsAmountRemainingToJSON(
  getPaymentLinkPaymentsAmountRemaining: GetPaymentLinkPaymentsAmountRemaining,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsAmountRemaining$outboundSchema.parse(
      getPaymentLinkPaymentsAmountRemaining,
    ),
  );
}

export function getPaymentLinkPaymentsAmountRemainingFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsAmountRemaining, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsAmountRemaining$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsAmountRemaining' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsAmountCaptured$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountCaptured,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsAmountCaptured$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsAmountCaptured$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountCaptured$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsAmountCaptured
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsAmountCaptured$ {
  /** @deprecated use `GetPaymentLinkPaymentsAmountCaptured$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsAmountCaptured$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountCaptured$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsAmountCaptured$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountCaptured$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsAmountCaptured$Outbound;
}

export function getPaymentLinkPaymentsAmountCapturedToJSON(
  getPaymentLinkPaymentsAmountCaptured: GetPaymentLinkPaymentsAmountCaptured,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsAmountCaptured$outboundSchema.parse(
      getPaymentLinkPaymentsAmountCaptured,
    ),
  );
}

export function getPaymentLinkPaymentsAmountCapturedFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsAmountCaptured, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsAmountCaptured$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsAmountCaptured' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsAmountChargedBack$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountChargedBack,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsAmountChargedBack$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsAmountChargedBack$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsAmountChargedBack$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsAmountChargedBack
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsAmountChargedBack$ {
  /** @deprecated use `GetPaymentLinkPaymentsAmountChargedBack$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsAmountChargedBack$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountChargedBack$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsAmountChargedBack$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsAmountChargedBack$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsAmountChargedBack$Outbound;
}

export function getPaymentLinkPaymentsAmountChargedBackToJSON(
  getPaymentLinkPaymentsAmountChargedBack:
    GetPaymentLinkPaymentsAmountChargedBack,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsAmountChargedBack$outboundSchema.parse(
      getPaymentLinkPaymentsAmountChargedBack,
    ),
  );
}

export function getPaymentLinkPaymentsAmountChargedBackFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentLinkPaymentsAmountChargedBack,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsAmountChargedBack$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentLinkPaymentsAmountChargedBack' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsSettlementAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsSettlementAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsSettlementAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsSettlementAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsSettlementAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSettlementAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsSettlementAmount$Outbound;
}

export function getPaymentLinkPaymentsSettlementAmountToJSON(
  getPaymentLinkPaymentsSettlementAmount:
    GetPaymentLinkPaymentsSettlementAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsSettlementAmount$outboundSchema.parse(
      getPaymentLinkPaymentsSettlementAmount,
    ),
  );
}

export function getPaymentLinkPaymentsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsLineType$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsLineType
> = z.nativeEnum(GetPaymentLinkPaymentsLineType);

/** @internal */
export const GetPaymentLinkPaymentsLineType$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsLineType
> = GetPaymentLinkPaymentsLineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsLineType$ {
  /** @deprecated use `GetPaymentLinkPaymentsLineType$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsLineType$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLineType$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsLineType$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsUnitPrice$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsUnitPrice$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsUnitPrice$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsUnitPrice$ {
  /** @deprecated use `GetPaymentLinkPaymentsUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsUnitPrice$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsUnitPrice$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsUnitPrice$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsUnitPrice$Outbound;
}

export function getPaymentLinkPaymentsUnitPriceToJSON(
  getPaymentLinkPaymentsUnitPrice: GetPaymentLinkPaymentsUnitPrice,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsUnitPrice$outboundSchema.parse(
      getPaymentLinkPaymentsUnitPrice,
    ),
  );
}

export function getPaymentLinkPaymentsUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsUnitPrice' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsDiscountAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsDiscountAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDiscountAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsDiscountAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsDiscountAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsDiscountAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDiscountAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsDiscountAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDiscountAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsDiscountAmount$Outbound;
}

export function getPaymentLinkPaymentsDiscountAmountToJSON(
  getPaymentLinkPaymentsDiscountAmount: GetPaymentLinkPaymentsDiscountAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsDiscountAmount$outboundSchema.parse(
      getPaymentLinkPaymentsDiscountAmount,
    ),
  );
}

export function getPaymentLinkPaymentsDiscountAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsDiscountAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsDiscountAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsDiscountAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsTotalAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsTotalAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsTotalAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsTotalAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsTotalAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsTotalAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsTotalAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsTotalAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsTotalAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsTotalAmount$Outbound;
}

export function getPaymentLinkPaymentsTotalAmountToJSON(
  getPaymentLinkPaymentsTotalAmount: GetPaymentLinkPaymentsTotalAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsTotalAmount$outboundSchema.parse(
      getPaymentLinkPaymentsTotalAmount,
    ),
  );
}

export function getPaymentLinkPaymentsTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsTotalAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsVatAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsVatAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsVatAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsVatAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsVatAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsVatAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsVatAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsVatAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsVatAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsVatAmount$Outbound;
}

export function getPaymentLinkPaymentsVatAmountToJSON(
  getPaymentLinkPaymentsVatAmount: GetPaymentLinkPaymentsVatAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsVatAmount$outboundSchema.parse(
      getPaymentLinkPaymentsVatAmount,
    ),
  );
}

export function getPaymentLinkPaymentsVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsVatAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsCategory$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCategory
> = z.nativeEnum(GetPaymentLinkPaymentsCategory);

/** @internal */
export const GetPaymentLinkPaymentsCategory$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCategory
> = GetPaymentLinkPaymentsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCategory$ {
  /** @deprecated use `GetPaymentLinkPaymentsCategory$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCategory$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCategory$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsCategory$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsInterval$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsInterval
> = z.nativeEnum(GetPaymentLinkPaymentsInterval);

/** @internal */
export const GetPaymentLinkPaymentsInterval$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsInterval
> = GetPaymentLinkPaymentsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsInterval$ {
  /** @deprecated use `GetPaymentLinkPaymentsInterval$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsInterval$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsInterval$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsInterval$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsRecurringAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRecurringAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsRecurringAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsRecurringAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRecurringAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRecurringAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRecurringAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsRecurringAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsRecurringAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRecurringAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRecurringAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRecurringAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRecurringAmount$Outbound;
}

export function getPaymentLinkPaymentsRecurringAmountToJSON(
  getPaymentLinkPaymentsRecurringAmount: GetPaymentLinkPaymentsRecurringAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRecurringAmount$outboundSchema.parse(
      getPaymentLinkPaymentsRecurringAmount,
    ),
  );
}

export function getPaymentLinkPaymentsRecurringAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRecurringAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsRecurringAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRecurringAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRecurring$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRecurring,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  interval: GetPaymentLinkPaymentsInterval$inboundSchema,
  amount: z.lazy(() => GetPaymentLinkPaymentsRecurringAmount$inboundSchema)
    .optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsRecurring$Outbound = {
  description?: string | undefined;
  interval: string;
  amount?: GetPaymentLinkPaymentsRecurringAmount$Outbound | undefined;
  times?: number | undefined;
  startDate?: string | null | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsRecurring$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRecurring$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRecurring
> = z.object({
  description: z.string().optional(),
  interval: GetPaymentLinkPaymentsInterval$outboundSchema,
  amount: z.lazy(() => GetPaymentLinkPaymentsRecurringAmount$outboundSchema)
    .optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRecurring$ {
  /** @deprecated use `GetPaymentLinkPaymentsRecurring$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRecurring$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRecurring$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsRecurring$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRecurring$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRecurring$Outbound;
}

export function getPaymentLinkPaymentsRecurringToJSON(
  getPaymentLinkPaymentsRecurring: GetPaymentLinkPaymentsRecurring,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRecurring$outboundSchema.parse(
      getPaymentLinkPaymentsRecurring,
    ),
  );
}

export function getPaymentLinkPaymentsRecurringFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRecurring, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsRecurring$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRecurring' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsLine$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetPaymentLinkPaymentsLineType$inboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetPaymentLinkPaymentsUnitPrice$inboundSchema),
  discountAmount: z.lazy(() =>
    GetPaymentLinkPaymentsDiscountAmount$inboundSchema
  ).optional(),
  totalAmount: z.lazy(() => GetPaymentLinkPaymentsTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetPaymentLinkPaymentsVatAmount$inboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(GetPaymentLinkPaymentsCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => GetPaymentLinkPaymentsRecurring$inboundSchema)
    .optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsLine$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: GetPaymentLinkPaymentsUnitPrice$Outbound;
  discountAmount?: GetPaymentLinkPaymentsDiscountAmount$Outbound | undefined;
  totalAmount: GetPaymentLinkPaymentsTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: GetPaymentLinkPaymentsVatAmount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
  recurring?: GetPaymentLinkPaymentsRecurring$Outbound | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsLine$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsLine$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsLine
> = z.object({
  type: GetPaymentLinkPaymentsLineType$outboundSchema.optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetPaymentLinkPaymentsUnitPrice$outboundSchema),
  discountAmount: z.lazy(() =>
    GetPaymentLinkPaymentsDiscountAmount$outboundSchema
  ).optional(),
  totalAmount: z.lazy(() => GetPaymentLinkPaymentsTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetPaymentLinkPaymentsVatAmount$outboundSchema)
    .optional(),
  sku: z.string().optional(),
  categories: z.array(GetPaymentLinkPaymentsCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => GetPaymentLinkPaymentsRecurring$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsLine$ {
  /** @deprecated use `GetPaymentLinkPaymentsLine$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsLine$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLine$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsLine$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLine$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsLine$Outbound;
}

export function getPaymentLinkPaymentsLineToJSON(
  getPaymentLinkPaymentsLine: GetPaymentLinkPaymentsLine,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsLine$outboundSchema.parse(getPaymentLinkPaymentsLine),
  );
}

export function getPaymentLinkPaymentsLineFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsLine' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsBillingAddress$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsBillingAddress$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsBillingAddress$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsBillingAddress$ {
  /** @deprecated use `GetPaymentLinkPaymentsBillingAddress$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsBillingAddress$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsBillingAddress$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsBillingAddress$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsBillingAddress$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsBillingAddress$Outbound;
}

export function getPaymentLinkPaymentsBillingAddressToJSON(
  getPaymentLinkPaymentsBillingAddress: GetPaymentLinkPaymentsBillingAddress,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsBillingAddress$outboundSchema.parse(
      getPaymentLinkPaymentsBillingAddress,
    ),
  );
}

export function getPaymentLinkPaymentsBillingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsBillingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsBillingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsBillingAddress' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsShippingAddress$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsShippingAddress$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsShippingAddress$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsShippingAddress$ {
  /** @deprecated use `GetPaymentLinkPaymentsShippingAddress$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsShippingAddress$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsShippingAddress$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsShippingAddress$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsShippingAddress$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsShippingAddress$Outbound;
}

export function getPaymentLinkPaymentsShippingAddressToJSON(
  getPaymentLinkPaymentsShippingAddress: GetPaymentLinkPaymentsShippingAddress,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsShippingAddress$outboundSchema.parse(
      getPaymentLinkPaymentsShippingAddress,
    ),
  );
}

export function getPaymentLinkPaymentsShippingAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsShippingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsShippingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsShippingAddress' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsLocale$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsLocale
> = z.nativeEnum(GetPaymentLinkPaymentsLocale);

/** @internal */
export const GetPaymentLinkPaymentsLocale$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsLocale
> = GetPaymentLinkPaymentsLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsLocale$ {
  /** @deprecated use `GetPaymentLinkPaymentsLocale$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsLocale$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLocale$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsLocale$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsMethod
> = z.nativeEnum(GetPaymentLinkPaymentsMethod);

/** @internal */
export const GetPaymentLinkPaymentsMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsMethod
> = GetPaymentLinkPaymentsMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsMethod$ {
  /** @deprecated use `GetPaymentLinkPaymentsMethod$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsMethod$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMethod$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsMethod$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsMetadata$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any()), z.array(z.string())]);

/** @internal */
export type GetPaymentLinkPaymentsMetadata$Outbound = string | {
  [k: string]: any;
} | Array<string>;

/** @internal */
export const GetPaymentLinkPaymentsMetadata$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsMetadata$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsMetadata
> = z.union([z.string(), z.record(z.any()), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsMetadata$ {
  /** @deprecated use `GetPaymentLinkPaymentsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsMetadata$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsMetadata$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMetadata$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsMetadata$Outbound;
}

export function getPaymentLinkPaymentsMetadataToJSON(
  getPaymentLinkPaymentsMetadata: GetPaymentLinkPaymentsMetadata,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsMetadata$outboundSchema.parse(
      getPaymentLinkPaymentsMetadata,
    ),
  );
}

export function getPaymentLinkPaymentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsMetadata' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsCaptureMode$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCaptureMode
> = z.nativeEnum(GetPaymentLinkPaymentsCaptureMode);

/** @internal */
export const GetPaymentLinkPaymentsCaptureMode$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCaptureMode
> = GetPaymentLinkPaymentsCaptureMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCaptureMode$ {
  /** @deprecated use `GetPaymentLinkPaymentsCaptureMode$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCaptureMode$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCaptureMode$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsCaptureMode$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsApplicationFeeAmount$inboundSchema:
  z.ZodType<GetPaymentLinkPaymentsApplicationFeeAmount, z.ZodTypeDef, unknown> =
    z.object({
      currency: z.string(),
      value: z.string(),
    });

/** @internal */
export type GetPaymentLinkPaymentsApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsApplicationFeeAmount$outboundSchema:
  z.ZodType<
    GetPaymentLinkPaymentsApplicationFeeAmount$Outbound,
    z.ZodTypeDef,
    GetPaymentLinkPaymentsApplicationFeeAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsApplicationFeeAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsApplicationFeeAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsApplicationFeeAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsApplicationFeeAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsApplicationFeeAmount$Outbound;
}

export function getPaymentLinkPaymentsApplicationFeeAmountToJSON(
  getPaymentLinkPaymentsApplicationFeeAmount:
    GetPaymentLinkPaymentsApplicationFeeAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsApplicationFeeAmount$outboundSchema.parse(
      getPaymentLinkPaymentsApplicationFeeAmount,
    ),
  );
}

export function getPaymentLinkPaymentsApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentLinkPaymentsApplicationFeeAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsApplicationFeeAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentLinkPaymentsApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsApplicationFee$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetPaymentLinkPaymentsApplicationFeeAmount$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsApplicationFee$Outbound = {
  amount?: GetPaymentLinkPaymentsApplicationFeeAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsApplicationFee$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsApplicationFee$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsApplicationFee
> = z.object({
  amount: z.lazy(() =>
    GetPaymentLinkPaymentsApplicationFeeAmount$outboundSchema
  ).optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsApplicationFee$ {
  /** @deprecated use `GetPaymentLinkPaymentsApplicationFee$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsApplicationFee$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsApplicationFee$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsApplicationFee$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsApplicationFee$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsApplicationFee$Outbound;
}

export function getPaymentLinkPaymentsApplicationFeeToJSON(
  getPaymentLinkPaymentsApplicationFee: GetPaymentLinkPaymentsApplicationFee,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsApplicationFee$outboundSchema.parse(
      getPaymentLinkPaymentsApplicationFee,
    ),
  );
}

export function getPaymentLinkPaymentsApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsApplicationFee' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRoutingMode$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsRoutingMode
> = z.nativeEnum(GetPaymentLinkPaymentsRoutingMode);

/** @internal */
export const GetPaymentLinkPaymentsRoutingMode$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsRoutingMode
> = GetPaymentLinkPaymentsRoutingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRoutingMode$ {
  /** @deprecated use `GetPaymentLinkPaymentsRoutingMode$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRoutingMode$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingMode$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRoutingMode$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsRoutingAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsRoutingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsRoutingAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRoutingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRoutingAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsRoutingAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsRoutingAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRoutingAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRoutingAmount$Outbound;
}

export function getPaymentLinkPaymentsRoutingAmountToJSON(
  getPaymentLinkPaymentsRoutingAmount: GetPaymentLinkPaymentsRoutingAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRoutingAmount$outboundSchema.parse(
      getPaymentLinkPaymentsRoutingAmount,
    ),
  );
}

export function getPaymentLinkPaymentsRoutingAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRoutingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsRoutingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRoutingAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRoutingType$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsRoutingType
> = z.nativeEnum(GetPaymentLinkPaymentsRoutingType);

/** @internal */
export const GetPaymentLinkPaymentsRoutingType$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsRoutingType
> = GetPaymentLinkPaymentsRoutingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRoutingType$ {
  /** @deprecated use `GetPaymentLinkPaymentsRoutingType$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRoutingType$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingType$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRoutingType$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsDestination$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetPaymentLinkPaymentsRoutingType$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const GetPaymentLinkPaymentsDestination$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDestination$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsDestination
> = z.object({
  type: GetPaymentLinkPaymentsRoutingType$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsDestination$ {
  /** @deprecated use `GetPaymentLinkPaymentsDestination$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsDestination$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDestination$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsDestination$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDestination$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsDestination$Outbound;
}

export function getPaymentLinkPaymentsDestinationToJSON(
  getPaymentLinkPaymentsDestination: GetPaymentLinkPaymentsDestination,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsDestination$outboundSchema.parse(
      getPaymentLinkPaymentsDestination,
    ),
  );
}

export function getPaymentLinkPaymentsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsDestination' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRoutingSelf$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsRoutingSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsRoutingSelf$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingSelf$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRoutingSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRoutingSelf$ {
  /** @deprecated use `GetPaymentLinkPaymentsRoutingSelf$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRoutingSelf$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingSelf$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRoutingSelf$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingSelf$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRoutingSelf$Outbound;
}

export function getPaymentLinkPaymentsRoutingSelfToJSON(
  getPaymentLinkPaymentsRoutingSelf: GetPaymentLinkPaymentsRoutingSelf,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRoutingSelf$outboundSchema.parse(
      getPaymentLinkPaymentsRoutingSelf,
    ),
  );
}

export function getPaymentLinkPaymentsRoutingSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRoutingSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsRoutingSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRoutingSelf' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRoutingPayment$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsRoutingPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsRoutingPayment$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingPayment$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRoutingPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRoutingPayment$ {
  /** @deprecated use `GetPaymentLinkPaymentsRoutingPayment$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsRoutingPayment$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingPayment$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRoutingPayment$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingPayment$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRoutingPayment$Outbound;
}

export function getPaymentLinkPaymentsRoutingPaymentToJSON(
  getPaymentLinkPaymentsRoutingPayment: GetPaymentLinkPaymentsRoutingPayment,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRoutingPayment$outboundSchema.parse(
      getPaymentLinkPaymentsRoutingPayment,
    ),
  );
}

export function getPaymentLinkPaymentsRoutingPaymentFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRoutingPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsRoutingPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRoutingPayment' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRoutingLinks$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetPaymentLinkPaymentsRoutingSelf$inboundSchema),
  payment: z.lazy(() => GetPaymentLinkPaymentsRoutingPayment$inboundSchema),
});

/** @internal */
export type GetPaymentLinkPaymentsRoutingLinks$Outbound = {
  self: GetPaymentLinkPaymentsRoutingSelf$Outbound;
  payment: GetPaymentLinkPaymentsRoutingPayment$Outbound;
};

/** @internal */
export const GetPaymentLinkPaymentsRoutingLinks$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRoutingLinks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRoutingLinks
> = z.object({
  self: z.lazy(() => GetPaymentLinkPaymentsRoutingSelf$outboundSchema),
  payment: z.lazy(() => GetPaymentLinkPaymentsRoutingPayment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRoutingLinks$ {
  /** @deprecated use `GetPaymentLinkPaymentsRoutingLinks$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRoutingLinks$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRoutingLinks$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRoutingLinks$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRoutingLinks$Outbound;
}

export function getPaymentLinkPaymentsRoutingLinksToJSON(
  getPaymentLinkPaymentsRoutingLinks: GetPaymentLinkPaymentsRoutingLinks,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRoutingLinks$outboundSchema.parse(
      getPaymentLinkPaymentsRoutingLinks,
    ),
  );
}

export function getPaymentLinkPaymentsRoutingLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRoutingLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsRoutingLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRoutingLinks' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRouting$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRouting,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetPaymentLinkPaymentsRoutingMode$inboundSchema,
  amount: z.lazy(() => GetPaymentLinkPaymentsRoutingAmount$inboundSchema),
  destination: z.lazy(() => GetPaymentLinkPaymentsDestination$inboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetPaymentLinkPaymentsRoutingLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetPaymentLinkPaymentsRouting$Outbound = {
  resource: string;
  id: string;
  mode: string;
  amount: GetPaymentLinkPaymentsRoutingAmount$Outbound;
  destination: GetPaymentLinkPaymentsDestination$Outbound;
  createdAt: string;
  releaseDate?: string | null | undefined;
  _links: GetPaymentLinkPaymentsRoutingLinks$Outbound;
};

/** @internal */
export const GetPaymentLinkPaymentsRouting$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRouting$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRouting
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetPaymentLinkPaymentsRoutingMode$outboundSchema,
  amount: z.lazy(() => GetPaymentLinkPaymentsRoutingAmount$outboundSchema),
  destination: z.lazy(() => GetPaymentLinkPaymentsDestination$outboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetPaymentLinkPaymentsRoutingLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRouting$ {
  /** @deprecated use `GetPaymentLinkPaymentsRouting$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRouting$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRouting$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsRouting$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRouting$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRouting$Outbound;
}

export function getPaymentLinkPaymentsRoutingToJSON(
  getPaymentLinkPaymentsRouting: GetPaymentLinkPaymentsRouting,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRouting$outboundSchema.parse(
      getPaymentLinkPaymentsRouting,
    ),
  );
}

export function getPaymentLinkPaymentsRoutingFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRouting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsRouting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRouting' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsSequenceType$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsSequenceType
> = z.nativeEnum(GetPaymentLinkPaymentsSequenceType);

/** @internal */
export const GetPaymentLinkPaymentsSequenceType$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsSequenceType
> = GetPaymentLinkPaymentsSequenceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsSequenceType$ {
  /** @deprecated use `GetPaymentLinkPaymentsSequenceType$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsSequenceType$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSequenceType$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsSequenceType$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsStatusEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsStatusEnum
> = z.nativeEnum(GetPaymentLinkPaymentsStatusEnum);

/** @internal */
export const GetPaymentLinkPaymentsStatusEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsStatusEnum
> = GetPaymentLinkPaymentsStatusEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsStatusEnum$ {
  /** @deprecated use `GetPaymentLinkPaymentsStatusEnum$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsStatusEnum$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsStatusEnum$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsStatusEnum$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsCode$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCode
> = z.nativeEnum(GetPaymentLinkPaymentsCode);

/** @internal */
export const GetPaymentLinkPaymentsCode$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCode
> = GetPaymentLinkPaymentsCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCode$ {
  /** @deprecated use `GetPaymentLinkPaymentsCode$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCode$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCode$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsCode$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsStatusReason$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsStatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: GetPaymentLinkPaymentsCode$inboundSchema,
  message: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsStatusReason$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const GetPaymentLinkPaymentsStatusReason$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsStatusReason$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsStatusReason
> = z.object({
  code: GetPaymentLinkPaymentsCode$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsStatusReason$ {
  /** @deprecated use `GetPaymentLinkPaymentsStatusReason$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsStatusReason$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsStatusReason$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsStatusReason$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsStatusReason$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsStatusReason$Outbound;
}

export function getPaymentLinkPaymentsStatusReasonToJSON(
  getPaymentLinkPaymentsStatusReason: GetPaymentLinkPaymentsStatusReason,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsStatusReason$outboundSchema.parse(
      getPaymentLinkPaymentsStatusReason,
    ),
  );
}

export function getPaymentLinkPaymentsStatusReasonFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsStatusReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsStatusReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsStatusReason' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsCardAudition$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardAudition
> = z.nativeEnum(GetPaymentLinkPaymentsCardAudition);

/** @internal */
export const GetPaymentLinkPaymentsCardAudition$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardAudition
> = GetPaymentLinkPaymentsCardAudition$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCardAudition$ {
  /** @deprecated use `GetPaymentLinkPaymentsCardAudition$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCardAudition$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCardAudition$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsCardAudition$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsCardLabel$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardLabel
> = z.nativeEnum(GetPaymentLinkPaymentsCardLabel);

/** @internal */
export const GetPaymentLinkPaymentsCardLabel$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardLabel
> = GetPaymentLinkPaymentsCardLabel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCardLabel$ {
  /** @deprecated use `GetPaymentLinkPaymentsCardLabel$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCardLabel$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCardLabel$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsCardLabel$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsCardFunding$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardFunding
> = z.nativeEnum(GetPaymentLinkPaymentsCardFunding);

/** @internal */
export const GetPaymentLinkPaymentsCardFunding$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardFunding
> = GetPaymentLinkPaymentsCardFunding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCardFunding$ {
  /** @deprecated use `GetPaymentLinkPaymentsCardFunding$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCardFunding$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCardFunding$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsCardFunding$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsCardSecurity$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardSecurity
> = z.nativeEnum(GetPaymentLinkPaymentsCardSecurity);

/** @internal */
export const GetPaymentLinkPaymentsCardSecurity$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsCardSecurity
> = GetPaymentLinkPaymentsCardSecurity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCardSecurity$ {
  /** @deprecated use `GetPaymentLinkPaymentsCardSecurity$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCardSecurity$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCardSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsCardSecurity$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsFeeRegion$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsFeeRegion
> = z.nativeEnum(GetPaymentLinkPaymentsFeeRegion);

/** @internal */
export const GetPaymentLinkPaymentsFeeRegion$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsFeeRegion
> = GetPaymentLinkPaymentsFeeRegion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsFeeRegion$ {
  /** @deprecated use `GetPaymentLinkPaymentsFeeRegion$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsFeeRegion$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsFeeRegion$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsFeeRegion$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsFailureReason$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsFailureReason
> = z.nativeEnum(GetPaymentLinkPaymentsFailureReason);

/** @internal */
export const GetPaymentLinkPaymentsFailureReason$outboundSchema:
  z.ZodNativeEnum<typeof GetPaymentLinkPaymentsFailureReason> =
    GetPaymentLinkPaymentsFailureReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsFailureReason$ {
  /** @deprecated use `GetPaymentLinkPaymentsFailureReason$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsFailureReason$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsFailureReason$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsFailureReason$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsWallet$inboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsWallet
> = z.nativeEnum(GetPaymentLinkPaymentsWallet);

/** @internal */
export const GetPaymentLinkPaymentsWallet$outboundSchema: z.ZodNativeEnum<
  typeof GetPaymentLinkPaymentsWallet
> = GetPaymentLinkPaymentsWallet$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsWallet$ {
  /** @deprecated use `GetPaymentLinkPaymentsWallet$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsWallet$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsWallet$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsWallet$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsSellerProtection$inboundSchema:
  z.ZodNativeEnum<typeof GetPaymentLinkPaymentsSellerProtection> = z.nativeEnum(
    GetPaymentLinkPaymentsSellerProtection,
  );

/** @internal */
export const GetPaymentLinkPaymentsSellerProtection$outboundSchema:
  z.ZodNativeEnum<typeof GetPaymentLinkPaymentsSellerProtection> =
    GetPaymentLinkPaymentsSellerProtection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsSellerProtection$ {
  /** @deprecated use `GetPaymentLinkPaymentsSellerProtection$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsSellerProtection$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSellerProtection$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsSellerProtection$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsPaypalFee$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaypalFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsPaypalFee$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsPaypalFee$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaypalFee$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsPaypalFee
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsPaypalFee$ {
  /** @deprecated use `GetPaymentLinkPaymentsPaypalFee$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsPaypalFee$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaypalFee$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsPaypalFee$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaypalFee$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsPaypalFee$Outbound;
}

export function getPaymentLinkPaymentsPaypalFeeToJSON(
  getPaymentLinkPaymentsPaypalFee: GetPaymentLinkPaymentsPaypalFee,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsPaypalFee$outboundSchema.parse(
      getPaymentLinkPaymentsPaypalFee,
    ),
  );
}

export function getPaymentLinkPaymentsPaypalFeeFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsPaypalFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsPaypalFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsPaypalFee' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsCardReadMethod$inboundSchema:
  z.ZodNativeEnum<typeof GetPaymentLinkPaymentsCardReadMethod> = z.nativeEnum(
    GetPaymentLinkPaymentsCardReadMethod,
  );

/** @internal */
export const GetPaymentLinkPaymentsCardReadMethod$outboundSchema:
  z.ZodNativeEnum<typeof GetPaymentLinkPaymentsCardReadMethod> =
    GetPaymentLinkPaymentsCardReadMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCardReadMethod$ {
  /** @deprecated use `GetPaymentLinkPaymentsCardReadMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsCardReadMethod$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCardReadMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsCardReadMethod$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsCardVerificationMethod$inboundSchema:
  z.ZodNativeEnum<typeof GetPaymentLinkPaymentsCardVerificationMethod> = z
    .nativeEnum(GetPaymentLinkPaymentsCardVerificationMethod);

/** @internal */
export const GetPaymentLinkPaymentsCardVerificationMethod$outboundSchema:
  z.ZodNativeEnum<typeof GetPaymentLinkPaymentsCardVerificationMethod> =
    GetPaymentLinkPaymentsCardVerificationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCardVerificationMethod$ {
  /** @deprecated use `GetPaymentLinkPaymentsCardVerificationMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsCardVerificationMethod$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCardVerificationMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsCardVerificationMethod$outboundSchema;
}

/** @internal */
export const GetPaymentLinkPaymentsReceipt$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsReceipt,
  z.ZodTypeDef,
  unknown
> = z.object({
  authorizationCode: z.nullable(z.string()).optional(),
  applicationIdentifier: z.nullable(z.string()).optional(),
  cardReadMethod: z.nullable(GetPaymentLinkPaymentsCardReadMethod$inboundSchema)
    .optional(),
  cardVerificationMethod: z.nullable(
    GetPaymentLinkPaymentsCardVerificationMethod$inboundSchema,
  ).optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsReceipt$Outbound = {
  authorizationCode?: string | null | undefined;
  applicationIdentifier?: string | null | undefined;
  cardReadMethod?: string | null | undefined;
  cardVerificationMethod?: string | null | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsReceipt$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsReceipt$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsReceipt
> = z.object({
  authorizationCode: z.nullable(z.string()).optional(),
  applicationIdentifier: z.nullable(z.string()).optional(),
  cardReadMethod: z.nullable(
    GetPaymentLinkPaymentsCardReadMethod$outboundSchema,
  ).optional(),
  cardVerificationMethod: z.nullable(
    GetPaymentLinkPaymentsCardVerificationMethod$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsReceipt$ {
  /** @deprecated use `GetPaymentLinkPaymentsReceipt$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsReceipt$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsReceipt$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsReceipt$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsReceipt$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsReceipt$Outbound;
}

export function getPaymentLinkPaymentsReceiptToJSON(
  getPaymentLinkPaymentsReceipt: GetPaymentLinkPaymentsReceipt,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsReceipt$outboundSchema.parse(
      getPaymentLinkPaymentsReceipt,
    ),
  );
}

export function getPaymentLinkPaymentsReceiptFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsReceipt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsReceipt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsReceipt' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsQrCode$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsQrCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  height: z.number().int().optional(),
  width: z.number().int().optional(),
  src: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsQrCode$Outbound = {
  height?: number | undefined;
  width?: number | undefined;
  src?: string | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsQrCode$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsQrCode$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsQrCode
> = z.object({
  height: z.number().int().optional(),
  width: z.number().int().optional(),
  src: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsQrCode$ {
  /** @deprecated use `GetPaymentLinkPaymentsQrCode$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsQrCode$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsQrCode$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsQrCode$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsQrCode$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsQrCode$Outbound;
}

export function getPaymentLinkPaymentsQrCodeToJSON(
  getPaymentLinkPaymentsQrCode: GetPaymentLinkPaymentsQrCode,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsQrCode$outboundSchema.parse(
      getPaymentLinkPaymentsQrCode,
    ),
  );
}

export function getPaymentLinkPaymentsQrCodeFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsQrCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsQrCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsQrCode' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRemainderAmount$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRemainderAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsRemainderAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentLinkPaymentsRemainderAmount$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRemainderAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRemainderAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRemainderAmount$ {
  /** @deprecated use `GetPaymentLinkPaymentsRemainderAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsRemainderAmount$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRemainderAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsRemainderAmount$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRemainderAmount$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRemainderAmount$Outbound;
}

export function getPaymentLinkPaymentsRemainderAmountToJSON(
  getPaymentLinkPaymentsRemainderAmount: GetPaymentLinkPaymentsRemainderAmount,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRemainderAmount$outboundSchema.parse(
      getPaymentLinkPaymentsRemainderAmount,
    ),
  );
}

export function getPaymentLinkPaymentsRemainderAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRemainderAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsRemainderAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRemainderAmount' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsDetails$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  shippingAddress: z.nullable(z.record(z.any())).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  bankName: z.string().optional(),
  bankAccount: z.string().optional(),
  bankBic: z.string().optional(),
  transferReference: z.nullable(z.string()).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardAudition: z.nullable(GetPaymentLinkPaymentsCardAudition$inboundSchema)
    .optional(),
  cardLabel: z.nullable(GetPaymentLinkPaymentsCardLabel$inboundSchema)
    .optional(),
  cardCountryCode: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardFunding: z.nullable(GetPaymentLinkPaymentsCardFunding$inboundSchema)
    .optional(),
  cardSecurity: z.nullable(GetPaymentLinkPaymentsCardSecurity$inboundSchema)
    .optional(),
  feeRegion: z.nullable(GetPaymentLinkPaymentsFeeRegion$inboundSchema)
    .optional(),
  cardMaskedNumber: z.nullable(z.string()).optional(),
  card3dsEci: z.nullable(z.string()).optional(),
  cardBin: z.nullable(z.string()).optional(),
  cardIssuer: z.nullable(z.string()).optional(),
  failureReason: z.nullable(GetPaymentLinkPaymentsFailureReason$inboundSchema)
    .optional(),
  failureMessage: z.nullable(z.string()).optional(),
  wallet: z.nullable(GetPaymentLinkPaymentsWallet$inboundSchema).optional(),
  paypalReference: z.nullable(z.string()).optional(),
  paypalPayerId: z.nullable(z.string()).optional(),
  sellerProtection: z.nullable(
    GetPaymentLinkPaymentsSellerProtection$inboundSchema,
  ).optional(),
  paypalFee: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsPaypalFee$inboundSchema),
  ).optional(),
  customerReference: z.string().optional(),
  terminalId: z.string().optional(),
  maskedNumber: z.nullable(z.string()).optional(),
  receipt: z.lazy(() => GetPaymentLinkPaymentsReceipt$inboundSchema).optional(),
  creditorIdentifier: z.nullable(z.string()).optional(),
  dueDate: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  signatureDate: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  bankReasonCode: z.nullable(z.string()).optional(),
  bankReason: z.nullable(z.string()).optional(),
  endToEndIdentifier: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  batchReference: z.nullable(z.string()).optional(),
  fileReference: z.nullable(z.string()).optional(),
  qrCode: z.lazy(() => GetPaymentLinkPaymentsQrCode$inboundSchema).optional(),
  voucherNumber: z.string().optional(),
  giftcards: z.array(z.record(z.any())).optional(),
  issuer: z.string().optional(),
  vouchers: z.array(z.record(z.any())).optional(),
  remainderAmount: z.lazy(() =>
    GetPaymentLinkPaymentsRemainderAmount$inboundSchema
  ).optional(),
  remainderMethod: z.string().optional(),
  remainderDetails: z.record(z.any()).optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsDetails$Outbound = {
  consumerName?: string | null | undefined;
  consumerAccount?: string | null | undefined;
  consumerBic?: string | null | undefined;
  shippingAddress?: { [k: string]: any } | null | undefined;
  cardNumber?: string | null | undefined;
  bankName?: string | undefined;
  bankAccount?: string | undefined;
  bankBic?: string | undefined;
  transferReference?: string | null | undefined;
  cardFingerprint?: string | null | undefined;
  cardHolder?: string | null | undefined;
  cardAudition?: string | null | undefined;
  cardLabel?: string | null | undefined;
  cardCountryCode?: string | null | undefined;
  cardExpiryDate?: string | null | undefined;
  cardFunding?: string | null | undefined;
  cardSecurity?: string | null | undefined;
  feeRegion?: string | null | undefined;
  cardMaskedNumber?: string | null | undefined;
  card3dsEci?: string | null | undefined;
  cardBin?: string | null | undefined;
  cardIssuer?: string | null | undefined;
  failureReason?: string | null | undefined;
  failureMessage?: string | null | undefined;
  wallet?: string | null | undefined;
  paypalReference?: string | null | undefined;
  paypalPayerId?: string | null | undefined;
  sellerProtection?: string | null | undefined;
  paypalFee?: GetPaymentLinkPaymentsPaypalFee$Outbound | null | undefined;
  customerReference?: string | undefined;
  terminalId?: string | undefined;
  maskedNumber?: string | null | undefined;
  receipt?: GetPaymentLinkPaymentsReceipt$Outbound | undefined;
  creditorIdentifier?: string | null | undefined;
  dueDate?: string | null | undefined;
  signatureDate?: string | null | undefined;
  bankReasonCode?: string | null | undefined;
  bankReason?: string | null | undefined;
  endToEndIdentifier?: string | null | undefined;
  mandateReference?: string | null | undefined;
  batchReference?: string | null | undefined;
  fileReference?: string | null | undefined;
  qrCode?: GetPaymentLinkPaymentsQrCode$Outbound | undefined;
  voucherNumber?: string | undefined;
  giftcards?: Array<{ [k: string]: any }> | undefined;
  issuer?: string | undefined;
  vouchers?: Array<{ [k: string]: any }> | undefined;
  remainderAmount?: GetPaymentLinkPaymentsRemainderAmount$Outbound | undefined;
  remainderMethod?: string | undefined;
  remainderDetails?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsDetails$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDetails$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsDetails
> = z.object({
  consumerName: z.nullable(z.string()).optional(),
  consumerAccount: z.nullable(z.string()).optional(),
  consumerBic: z.nullable(z.string()).optional(),
  shippingAddress: z.nullable(z.record(z.any())).optional(),
  cardNumber: z.nullable(z.string()).optional(),
  bankName: z.string().optional(),
  bankAccount: z.string().optional(),
  bankBic: z.string().optional(),
  transferReference: z.nullable(z.string()).optional(),
  cardFingerprint: z.nullable(z.string()).optional(),
  cardHolder: z.nullable(z.string()).optional(),
  cardAudition: z.nullable(GetPaymentLinkPaymentsCardAudition$outboundSchema)
    .optional(),
  cardLabel: z.nullable(GetPaymentLinkPaymentsCardLabel$outboundSchema)
    .optional(),
  cardCountryCode: z.nullable(z.string()).optional(),
  cardExpiryDate: z.nullable(z.string()).optional(),
  cardFunding: z.nullable(GetPaymentLinkPaymentsCardFunding$outboundSchema)
    .optional(),
  cardSecurity: z.nullable(GetPaymentLinkPaymentsCardSecurity$outboundSchema)
    .optional(),
  feeRegion: z.nullable(GetPaymentLinkPaymentsFeeRegion$outboundSchema)
    .optional(),
  cardMaskedNumber: z.nullable(z.string()).optional(),
  card3dsEci: z.nullable(z.string()).optional(),
  cardBin: z.nullable(z.string()).optional(),
  cardIssuer: z.nullable(z.string()).optional(),
  failureReason: z.nullable(GetPaymentLinkPaymentsFailureReason$outboundSchema)
    .optional(),
  failureMessage: z.nullable(z.string()).optional(),
  wallet: z.nullable(GetPaymentLinkPaymentsWallet$outboundSchema).optional(),
  paypalReference: z.nullable(z.string()).optional(),
  paypalPayerId: z.nullable(z.string()).optional(),
  sellerProtection: z.nullable(
    GetPaymentLinkPaymentsSellerProtection$outboundSchema,
  ).optional(),
  paypalFee: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsPaypalFee$outboundSchema),
  ).optional(),
  customerReference: z.string().optional(),
  terminalId: z.string().optional(),
  maskedNumber: z.nullable(z.string()).optional(),
  receipt: z.lazy(() => GetPaymentLinkPaymentsReceipt$outboundSchema)
    .optional(),
  creditorIdentifier: z.nullable(z.string()).optional(),
  dueDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  signatureDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  bankReasonCode: z.nullable(z.string()).optional(),
  bankReason: z.nullable(z.string()).optional(),
  endToEndIdentifier: z.nullable(z.string()).optional(),
  mandateReference: z.nullable(z.string()).optional(),
  batchReference: z.nullable(z.string()).optional(),
  fileReference: z.nullable(z.string()).optional(),
  qrCode: z.lazy(() => GetPaymentLinkPaymentsQrCode$outboundSchema).optional(),
  voucherNumber: z.string().optional(),
  giftcards: z.array(z.record(z.any())).optional(),
  issuer: z.string().optional(),
  vouchers: z.array(z.record(z.any())).optional(),
  remainderAmount: z.lazy(() =>
    GetPaymentLinkPaymentsRemainderAmount$outboundSchema
  ).optional(),
  remainderMethod: z.string().optional(),
  remainderDetails: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsDetails$ {
  /** @deprecated use `GetPaymentLinkPaymentsDetails$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsDetails$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDetails$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsDetails$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDetails$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsDetails$Outbound;
}

export function getPaymentLinkPaymentsDetailsToJSON(
  getPaymentLinkPaymentsDetails: GetPaymentLinkPaymentsDetails,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsDetails$outboundSchema.parse(
      getPaymentLinkPaymentsDetails,
    ),
  );
}

export function getPaymentLinkPaymentsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsDetails' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsPaymentSelf$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaymentSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsPaymentSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsPaymentSelf$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaymentSelf$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsPaymentSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsPaymentSelf$ {
  /** @deprecated use `GetPaymentLinkPaymentsPaymentSelf$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsPaymentSelf$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentSelf$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsPaymentSelf$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentSelf$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsPaymentSelf$Outbound;
}

export function getPaymentLinkPaymentsPaymentSelfToJSON(
  getPaymentLinkPaymentsPaymentSelf: GetPaymentLinkPaymentsPaymentSelf,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsPaymentSelf$outboundSchema.parse(
      getPaymentLinkPaymentsPaymentSelf,
    ),
  );
}

export function getPaymentLinkPaymentsPaymentSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsPaymentSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsPaymentSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsPaymentSelf' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsCheckout$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsCheckout$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsCheckout$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCheckout$ {
  /** @deprecated use `GetPaymentLinkPaymentsCheckout$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCheckout$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCheckout$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsCheckout$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCheckout$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsCheckout$Outbound;
}

export function getPaymentLinkPaymentsCheckoutToJSON(
  getPaymentLinkPaymentsCheckout: GetPaymentLinkPaymentsCheckout,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsCheckout$outboundSchema.parse(
      getPaymentLinkPaymentsCheckout,
    ),
  );
}

export function getPaymentLinkPaymentsCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsCheckout' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsMobileAppCheckout$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsMobileAppCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsMobileAppCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsMobileAppCheckout$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsMobileAppCheckout$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsMobileAppCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsMobileAppCheckout$ {
  /** @deprecated use `GetPaymentLinkPaymentsMobileAppCheckout$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsMobileAppCheckout$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMobileAppCheckout$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsMobileAppCheckout$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMobileAppCheckout$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsMobileAppCheckout$Outbound;
}

export function getPaymentLinkPaymentsMobileAppCheckoutToJSON(
  getPaymentLinkPaymentsMobileAppCheckout:
    GetPaymentLinkPaymentsMobileAppCheckout,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsMobileAppCheckout$outboundSchema.parse(
      getPaymentLinkPaymentsMobileAppCheckout,
    ),
  );
}

export function getPaymentLinkPaymentsMobileAppCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentLinkPaymentsMobileAppCheckout,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsMobileAppCheckout$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentLinkPaymentsMobileAppCheckout' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsChangePaymentState$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsChangePaymentState,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsChangePaymentState$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsChangePaymentState$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsChangePaymentState$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsChangePaymentState
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsChangePaymentState$ {
  /** @deprecated use `GetPaymentLinkPaymentsChangePaymentState$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsChangePaymentState$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsChangePaymentState$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsChangePaymentState$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsChangePaymentState$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsChangePaymentState$Outbound;
}

export function getPaymentLinkPaymentsChangePaymentStateToJSON(
  getPaymentLinkPaymentsChangePaymentState:
    GetPaymentLinkPaymentsChangePaymentState,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsChangePaymentState$outboundSchema.parse(
      getPaymentLinkPaymentsChangePaymentState,
    ),
  );
}

export function getPaymentLinkPaymentsChangePaymentStateFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentLinkPaymentsChangePaymentState,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsChangePaymentState$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentLinkPaymentsChangePaymentState' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsDashboard$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsDashboard$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDashboard$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsDashboard$ {
  /** @deprecated use `GetPaymentLinkPaymentsDashboard$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsDashboard$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDashboard$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsDashboard$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDashboard$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsDashboard$Outbound;
}

export function getPaymentLinkPaymentsDashboardToJSON(
  getPaymentLinkPaymentsDashboard: GetPaymentLinkPaymentsDashboard,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsDashboard$outboundSchema.parse(
      getPaymentLinkPaymentsDashboard,
    ),
  );
}

export function getPaymentLinkPaymentsDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsDashboard' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsRefunds$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsRefunds$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsRefunds$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsRefunds$ {
  /** @deprecated use `GetPaymentLinkPaymentsRefunds$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsRefunds$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRefunds$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsRefunds$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsRefunds$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsRefunds$Outbound;
}

export function getPaymentLinkPaymentsRefundsToJSON(
  getPaymentLinkPaymentsRefunds: GetPaymentLinkPaymentsRefunds,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsRefunds$outboundSchema.parse(
      getPaymentLinkPaymentsRefunds,
    ),
  );
}

export function getPaymentLinkPaymentsRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsRefunds' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsChargebacks$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsChargebacks$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsChargebacks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsChargebacks$ {
  /** @deprecated use `GetPaymentLinkPaymentsChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsChargebacks$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsChargebacks$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsChargebacks$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsChargebacks$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsChargebacks$Outbound;
}

export function getPaymentLinkPaymentsChargebacksToJSON(
  getPaymentLinkPaymentsChargebacks: GetPaymentLinkPaymentsChargebacks,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsChargebacks$outboundSchema.parse(
      getPaymentLinkPaymentsChargebacks,
    ),
  );
}

export function getPaymentLinkPaymentsChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsChargebacks' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsCaptures$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsCaptures$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsCaptures$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCaptures$ {
  /** @deprecated use `GetPaymentLinkPaymentsCaptures$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCaptures$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCaptures$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsCaptures$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCaptures$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsCaptures$Outbound;
}

export function getPaymentLinkPaymentsCapturesToJSON(
  getPaymentLinkPaymentsCaptures: GetPaymentLinkPaymentsCaptures,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsCaptures$outboundSchema.parse(
      getPaymentLinkPaymentsCaptures,
    ),
  );
}

export function getPaymentLinkPaymentsCapturesFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsCaptures' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsSettlement$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsSettlement$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsSettlement$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSettlement$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsSettlement
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsSettlement$ {
  /** @deprecated use `GetPaymentLinkPaymentsSettlement$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsSettlement$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSettlement$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsSettlement$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSettlement$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsSettlement$Outbound;
}

export function getPaymentLinkPaymentsSettlementToJSON(
  getPaymentLinkPaymentsSettlement: GetPaymentLinkPaymentsSettlement,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsSettlement$outboundSchema.parse(
      getPaymentLinkPaymentsSettlement,
    ),
  );
}

export function getPaymentLinkPaymentsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsSettlement' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsCustomer$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsCustomer$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsCustomer$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsCustomer$ {
  /** @deprecated use `GetPaymentLinkPaymentsCustomer$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsCustomer$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCustomer$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsCustomer$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsCustomer$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsCustomer$Outbound;
}

export function getPaymentLinkPaymentsCustomerToJSON(
  getPaymentLinkPaymentsCustomer: GetPaymentLinkPaymentsCustomer,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsCustomer$outboundSchema.parse(
      getPaymentLinkPaymentsCustomer,
    ),
  );
}

export function getPaymentLinkPaymentsCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsCustomer' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsMandate$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsMandate$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsMandate$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsMandate$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsMandate
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsMandate$ {
  /** @deprecated use `GetPaymentLinkPaymentsMandate$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsMandate$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMandate$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsMandate$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsMandate$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsMandate$Outbound;
}

export function getPaymentLinkPaymentsMandateToJSON(
  getPaymentLinkPaymentsMandate: GetPaymentLinkPaymentsMandate,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsMandate$outboundSchema.parse(
      getPaymentLinkPaymentsMandate,
    ),
  );
}

export function getPaymentLinkPaymentsMandateFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsMandate' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsSubscription$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsSubscription$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsSubscription$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSubscription$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsSubscription
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsSubscription$ {
  /** @deprecated use `GetPaymentLinkPaymentsSubscription$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsSubscription$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSubscription$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsSubscription$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSubscription$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsSubscription$Outbound;
}

export function getPaymentLinkPaymentsSubscriptionToJSON(
  getPaymentLinkPaymentsSubscription: GetPaymentLinkPaymentsSubscription,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsSubscription$outboundSchema.parse(
      getPaymentLinkPaymentsSubscription,
    ),
  );
}

export function getPaymentLinkPaymentsSubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsSubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsSubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsSubscription' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsOrder$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsOrder$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsOrder$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsOrder$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsOrder
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsOrder$ {
  /** @deprecated use `GetPaymentLinkPaymentsOrder$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsOrder$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsOrder$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsOrder$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsOrder$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsOrder$Outbound;
}

export function getPaymentLinkPaymentsOrderToJSON(
  getPaymentLinkPaymentsOrder: GetPaymentLinkPaymentsOrder,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsOrder$outboundSchema.parse(
      getPaymentLinkPaymentsOrder,
    ),
  );
}

export function getPaymentLinkPaymentsOrderFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsOrder' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsTerminal$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsTerminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsTerminal$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsTerminal$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsTerminal$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsTerminal
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsTerminal$ {
  /** @deprecated use `GetPaymentLinkPaymentsTerminal$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsTerminal$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsTerminal$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsTerminal$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsTerminal$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsTerminal$Outbound;
}

export function getPaymentLinkPaymentsTerminalToJSON(
  getPaymentLinkPaymentsTerminal: GetPaymentLinkPaymentsTerminal,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsTerminal$outboundSchema.parse(
      getPaymentLinkPaymentsTerminal,
    ),
  );
}

export function getPaymentLinkPaymentsTerminalFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsTerminal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsTerminal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsTerminal' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsPaymentDocumentation$inboundSchema:
  z.ZodType<GetPaymentLinkPaymentsPaymentDocumentation, z.ZodTypeDef, unknown> =
    z.object({
      href: z.string(),
      type: z.string(),
    });

/** @internal */
export type GetPaymentLinkPaymentsPaymentDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsPaymentDocumentation$outboundSchema:
  z.ZodType<
    GetPaymentLinkPaymentsPaymentDocumentation$Outbound,
    z.ZodTypeDef,
    GetPaymentLinkPaymentsPaymentDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsPaymentDocumentation$ {
  /** @deprecated use `GetPaymentLinkPaymentsPaymentDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsPaymentDocumentation$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsPaymentDocumentation$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentDocumentation$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsPaymentDocumentation$Outbound;
}

export function getPaymentLinkPaymentsPaymentDocumentationToJSON(
  getPaymentLinkPaymentsPaymentDocumentation:
    GetPaymentLinkPaymentsPaymentDocumentation,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsPaymentDocumentation$outboundSchema.parse(
      getPaymentLinkPaymentsPaymentDocumentation,
    ),
  );
}

export function getPaymentLinkPaymentsPaymentDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPaymentLinkPaymentsPaymentDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsPaymentDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPaymentLinkPaymentsPaymentDocumentation' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsLinksStatus$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsLinksStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsLinksStatus$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsLinksStatus$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsLinksStatus$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsLinksStatus
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsLinksStatus$ {
  /** @deprecated use `GetPaymentLinkPaymentsLinksStatus$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsLinksStatus$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLinksStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsLinksStatus$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLinksStatus$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsLinksStatus$Outbound;
}

export function getPaymentLinkPaymentsLinksStatusToJSON(
  getPaymentLinkPaymentsLinksStatus: GetPaymentLinkPaymentsLinksStatus,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsLinksStatus$outboundSchema.parse(
      getPaymentLinkPaymentsLinksStatus,
    ),
  );
}

export function getPaymentLinkPaymentsLinksStatusFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsLinksStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsLinksStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsLinksStatus' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsPayOnline$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPayOnline,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsPayOnline$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsPayOnline$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPayOnline$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsPayOnline
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsPayOnline$ {
  /** @deprecated use `GetPaymentLinkPaymentsPayOnline$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsPayOnline$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPayOnline$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsPayOnline$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPayOnline$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsPayOnline$Outbound;
}

export function getPaymentLinkPaymentsPayOnlineToJSON(
  getPaymentLinkPaymentsPayOnline: GetPaymentLinkPaymentsPayOnline,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsPayOnline$outboundSchema.parse(
      getPaymentLinkPaymentsPayOnline,
    ),
  );
}

export function getPaymentLinkPaymentsPayOnlineFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsPayOnline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsPayOnline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsPayOnline' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsPaymentLinks$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaymentLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetPaymentLinkPaymentsPaymentSelf$inboundSchema),
  checkout: z.lazy(() => GetPaymentLinkPaymentsCheckout$inboundSchema)
    .optional(),
  mobileAppCheckout: z.lazy(() =>
    GetPaymentLinkPaymentsMobileAppCheckout$inboundSchema
  ).optional(),
  changePaymentState: z.lazy(() =>
    GetPaymentLinkPaymentsChangePaymentState$inboundSchema
  ).optional(),
  dashboard: z.lazy(() => GetPaymentLinkPaymentsDashboard$inboundSchema),
  refunds: z.lazy(() => GetPaymentLinkPaymentsRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetPaymentLinkPaymentsChargebacks$inboundSchema)
    .optional(),
  captures: z.lazy(() => GetPaymentLinkPaymentsCaptures$inboundSchema)
    .optional(),
  settlement: z.lazy(() => GetPaymentLinkPaymentsSettlement$inboundSchema)
    .optional(),
  customer: z.lazy(() => GetPaymentLinkPaymentsCustomer$inboundSchema)
    .optional(),
  mandate: z.lazy(() => GetPaymentLinkPaymentsMandate$inboundSchema).optional(),
  subscription: z.lazy(() => GetPaymentLinkPaymentsSubscription$inboundSchema)
    .optional(),
  order: z.lazy(() => GetPaymentLinkPaymentsOrder$inboundSchema).optional(),
  terminal: z.lazy(() => GetPaymentLinkPaymentsTerminal$inboundSchema)
    .optional(),
  documentation: z.lazy(() =>
    GetPaymentLinkPaymentsPaymentDocumentation$inboundSchema
  ).optional(),
  status: z.lazy(() => GetPaymentLinkPaymentsLinksStatus$inboundSchema)
    .optional(),
  payOnline: z.lazy(() => GetPaymentLinkPaymentsPayOnline$inboundSchema)
    .optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsPaymentLinks$Outbound = {
  self: GetPaymentLinkPaymentsPaymentSelf$Outbound;
  checkout?: GetPaymentLinkPaymentsCheckout$Outbound | undefined;
  mobileAppCheckout?:
    | GetPaymentLinkPaymentsMobileAppCheckout$Outbound
    | undefined;
  changePaymentState?:
    | GetPaymentLinkPaymentsChangePaymentState$Outbound
    | undefined;
  dashboard: GetPaymentLinkPaymentsDashboard$Outbound;
  refunds?: GetPaymentLinkPaymentsRefunds$Outbound | undefined;
  chargebacks?: GetPaymentLinkPaymentsChargebacks$Outbound | undefined;
  captures?: GetPaymentLinkPaymentsCaptures$Outbound | undefined;
  settlement?: GetPaymentLinkPaymentsSettlement$Outbound | undefined;
  customer?: GetPaymentLinkPaymentsCustomer$Outbound | undefined;
  mandate?: GetPaymentLinkPaymentsMandate$Outbound | undefined;
  subscription?: GetPaymentLinkPaymentsSubscription$Outbound | undefined;
  order?: GetPaymentLinkPaymentsOrder$Outbound | undefined;
  terminal?: GetPaymentLinkPaymentsTerminal$Outbound | undefined;
  documentation?:
    | GetPaymentLinkPaymentsPaymentDocumentation$Outbound
    | undefined;
  status?: GetPaymentLinkPaymentsLinksStatus$Outbound | undefined;
  payOnline?: GetPaymentLinkPaymentsPayOnline$Outbound | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsPaymentLinks$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaymentLinks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsPaymentLinks
> = z.object({
  self: z.lazy(() => GetPaymentLinkPaymentsPaymentSelf$outboundSchema),
  checkout: z.lazy(() => GetPaymentLinkPaymentsCheckout$outboundSchema)
    .optional(),
  mobileAppCheckout: z.lazy(() =>
    GetPaymentLinkPaymentsMobileAppCheckout$outboundSchema
  ).optional(),
  changePaymentState: z.lazy(() =>
    GetPaymentLinkPaymentsChangePaymentState$outboundSchema
  ).optional(),
  dashboard: z.lazy(() => GetPaymentLinkPaymentsDashboard$outboundSchema),
  refunds: z.lazy(() => GetPaymentLinkPaymentsRefunds$outboundSchema)
    .optional(),
  chargebacks: z.lazy(() => GetPaymentLinkPaymentsChargebacks$outboundSchema)
    .optional(),
  captures: z.lazy(() => GetPaymentLinkPaymentsCaptures$outboundSchema)
    .optional(),
  settlement: z.lazy(() => GetPaymentLinkPaymentsSettlement$outboundSchema)
    .optional(),
  customer: z.lazy(() => GetPaymentLinkPaymentsCustomer$outboundSchema)
    .optional(),
  mandate: z.lazy(() => GetPaymentLinkPaymentsMandate$outboundSchema)
    .optional(),
  subscription: z.lazy(() => GetPaymentLinkPaymentsSubscription$outboundSchema)
    .optional(),
  order: z.lazy(() => GetPaymentLinkPaymentsOrder$outboundSchema).optional(),
  terminal: z.lazy(() => GetPaymentLinkPaymentsTerminal$outboundSchema)
    .optional(),
  documentation: z.lazy(() =>
    GetPaymentLinkPaymentsPaymentDocumentation$outboundSchema
  ).optional(),
  status: z.lazy(() => GetPaymentLinkPaymentsLinksStatus$outboundSchema)
    .optional(),
  payOnline: z.lazy(() => GetPaymentLinkPaymentsPayOnline$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsPaymentLinks$ {
  /** @deprecated use `GetPaymentLinkPaymentsPaymentLinks$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsPaymentLinks$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentLinks$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsPaymentLinks$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentLinks$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsPaymentLinks$Outbound;
}

export function getPaymentLinkPaymentsPaymentLinksToJSON(
  getPaymentLinkPaymentsPaymentLinks: GetPaymentLinkPaymentsPaymentLinks,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsPaymentLinks$outboundSchema.parse(
      getPaymentLinkPaymentsPaymentLinks,
    ),
  );
}

export function getPaymentLinkPaymentsPaymentLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsPaymentLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsPaymentLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsPaymentLinks' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsPaymentOutput$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaymentOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetPaymentLinkPaymentsMode$inboundSchema,
  description: z.string(),
  amount: z.lazy(() => GetPaymentLinkPaymentsAmount$inboundSchema),
  amountRefunded: z.lazy(() =>
    GetPaymentLinkPaymentsAmountRefunded$inboundSchema
  ).optional(),
  amountRemaining: z.lazy(() =>
    GetPaymentLinkPaymentsAmountRemaining$inboundSchema
  ).optional(),
  amountCaptured: z.lazy(() =>
    GetPaymentLinkPaymentsAmountCaptured$inboundSchema
  ).optional(),
  amountChargedBack: z.lazy(() =>
    GetPaymentLinkPaymentsAmountChargedBack$inboundSchema
  ).optional(),
  settlementAmount: z.lazy(() =>
    GetPaymentLinkPaymentsSettlementAmount$inboundSchema
  ).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => GetPaymentLinkPaymentsLine$inboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    GetPaymentLinkPaymentsBillingAddress$inboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    GetPaymentLinkPaymentsShippingAddress$inboundSchema
  ).optional(),
  locale: z.nullable(GetPaymentLinkPaymentsLocale$inboundSchema).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(GetPaymentLinkPaymentsMethod$inboundSchema).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([z.string(), z.record(z.any()), z.array(z.string())]),
  ).optional(),
  captureMode: z.nullable(GetPaymentLinkPaymentsCaptureMode$inboundSchema)
    .optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsApplicationFee$inboundSchema),
  ).optional(),
  routing: z.nullable(
    z.array(z.lazy(() => GetPaymentLinkPaymentsRouting$inboundSchema)),
  ).optional(),
  sequenceType: z.nullable(GetPaymentLinkPaymentsSequenceType$inboundSchema),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: GetPaymentLinkPaymentsStatusEnum$inboundSchema,
  statusReason: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsStatusReason$inboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.lazy(() => GetPaymentLinkPaymentsDetails$inboundSchema))
    .optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetPaymentLinkPaymentsPaymentLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetPaymentLinkPaymentsPaymentOutput$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: GetPaymentLinkPaymentsAmount$Outbound;
  amountRefunded?: GetPaymentLinkPaymentsAmountRefunded$Outbound | undefined;
  amountRemaining?: GetPaymentLinkPaymentsAmountRemaining$Outbound | undefined;
  amountCaptured?: GetPaymentLinkPaymentsAmountCaptured$Outbound | undefined;
  amountChargedBack?:
    | GetPaymentLinkPaymentsAmountChargedBack$Outbound
    | undefined;
  settlementAmount?:
    | GetPaymentLinkPaymentsSettlementAmount$Outbound
    | undefined;
  redirectUrl?: string | null | undefined;
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  lines?: Array<GetPaymentLinkPaymentsLine$Outbound> | null | undefined;
  billingAddress?: GetPaymentLinkPaymentsBillingAddress$Outbound | undefined;
  shippingAddress?: GetPaymentLinkPaymentsShippingAddress$Outbound | undefined;
  locale?: string | null | undefined;
  countryCode?: string | null | undefined;
  method?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  metadata?: string | { [k: string]: any } | Array<string> | null | undefined;
  captureMode?: string | null | undefined;
  captureDelay?: string | null | undefined;
  captureBefore?: string | null | undefined;
  applicationFee?:
    | GetPaymentLinkPaymentsApplicationFee$Outbound
    | null
    | undefined;
  routing?: Array<GetPaymentLinkPaymentsRouting$Outbound> | null | undefined;
  sequenceType: string | null;
  subscriptionId?: string | null | undefined;
  mandateId?: string | null | undefined;
  customerId?: string | null | undefined;
  profileId: string;
  settlementId?: string | null | undefined;
  orderId?: string | null | undefined;
  status: string;
  statusReason?: GetPaymentLinkPaymentsStatusReason$Outbound | null | undefined;
  isCancelable?: boolean | null | undefined;
  details?: GetPaymentLinkPaymentsDetails$Outbound | null | undefined;
  createdAt: string;
  authorizedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  canceledAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredAt?: string | null | undefined;
  failedAt?: string | null | undefined;
  _links: GetPaymentLinkPaymentsPaymentLinks$Outbound;
};

/** @internal */
export const GetPaymentLinkPaymentsPaymentOutput$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPaymentOutput$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsPaymentOutput
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: GetPaymentLinkPaymentsMode$outboundSchema,
  description: z.string(),
  amount: z.lazy(() => GetPaymentLinkPaymentsAmount$outboundSchema),
  amountRefunded: z.lazy(() =>
    GetPaymentLinkPaymentsAmountRefunded$outboundSchema
  ).optional(),
  amountRemaining: z.lazy(() =>
    GetPaymentLinkPaymentsAmountRemaining$outboundSchema
  ).optional(),
  amountCaptured: z.lazy(() =>
    GetPaymentLinkPaymentsAmountCaptured$outboundSchema
  ).optional(),
  amountChargedBack: z.lazy(() =>
    GetPaymentLinkPaymentsAmountChargedBack$outboundSchema
  ).optional(),
  settlementAmount: z.lazy(() =>
    GetPaymentLinkPaymentsSettlementAmount$outboundSchema
  ).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(
    z.array(z.lazy(() => GetPaymentLinkPaymentsLine$outboundSchema)),
  ).optional(),
  billingAddress: z.lazy(() =>
    GetPaymentLinkPaymentsBillingAddress$outboundSchema
  ).optional(),
  shippingAddress: z.lazy(() =>
    GetPaymentLinkPaymentsShippingAddress$outboundSchema
  ).optional(),
  locale: z.nullable(GetPaymentLinkPaymentsLocale$outboundSchema).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(GetPaymentLinkPaymentsMethod$outboundSchema).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([z.string(), z.record(z.any()), z.array(z.string())]),
  ).optional(),
  captureMode: z.nullable(GetPaymentLinkPaymentsCaptureMode$outboundSchema)
    .optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsApplicationFee$outboundSchema),
  ).optional(),
  routing: z.nullable(
    z.array(z.lazy(() => GetPaymentLinkPaymentsRouting$outboundSchema)),
  ).optional(),
  sequenceType: z.nullable(GetPaymentLinkPaymentsSequenceType$outboundSchema),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: GetPaymentLinkPaymentsStatusEnum$outboundSchema,
  statusReason: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsStatusReason$outboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsDetails$outboundSchema),
  ).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetPaymentLinkPaymentsPaymentLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsPaymentOutput$ {
  /** @deprecated use `GetPaymentLinkPaymentsPaymentOutput$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsPaymentOutput$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentOutput$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsPaymentOutput$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPaymentOutput$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsPaymentOutput$Outbound;
}

export function getPaymentLinkPaymentsPaymentOutputToJSON(
  getPaymentLinkPaymentsPaymentOutput: GetPaymentLinkPaymentsPaymentOutput,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsPaymentOutput$outboundSchema.parse(
      getPaymentLinkPaymentsPaymentOutput,
    ),
  );
}

export function getPaymentLinkPaymentsPaymentOutputFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsPaymentOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsPaymentOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsPaymentOutput' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsEmbedded$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  payments: z.array(
    z.lazy(() => GetPaymentLinkPaymentsPaymentOutput$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsEmbedded$Outbound = {
  payments?: Array<GetPaymentLinkPaymentsPaymentOutput$Outbound> | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsEmbedded$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsEmbedded$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsEmbedded
> = z.object({
  payments: z.array(
    z.lazy(() => GetPaymentLinkPaymentsPaymentOutput$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsEmbedded$ {
  /** @deprecated use `GetPaymentLinkPaymentsEmbedded$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsEmbedded$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsEmbedded$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsEmbedded$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsEmbedded$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsEmbedded$Outbound;
}

export function getPaymentLinkPaymentsEmbeddedToJSON(
  getPaymentLinkPaymentsEmbedded: GetPaymentLinkPaymentsEmbedded,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsEmbedded$outboundSchema.parse(
      getPaymentLinkPaymentsEmbedded,
    ),
  );
}

export function getPaymentLinkPaymentsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsEmbedded' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsSelf$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsSelf$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsSelf$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsSelf$ {
  /** @deprecated use `GetPaymentLinkPaymentsSelf$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsSelf$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSelf$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsSelf$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsSelf$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsSelf$Outbound;
}

export function getPaymentLinkPaymentsSelfToJSON(
  getPaymentLinkPaymentsSelf: GetPaymentLinkPaymentsSelf,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsSelf$outboundSchema.parse(getPaymentLinkPaymentsSelf),
  );
}

export function getPaymentLinkPaymentsSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsSelf' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsPrevious$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsPrevious$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsPrevious$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsPrevious$ {
  /** @deprecated use `GetPaymentLinkPaymentsPrevious$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsPrevious$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPrevious$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsPrevious$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsPrevious$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsPrevious$Outbound;
}

export function getPaymentLinkPaymentsPreviousToJSON(
  getPaymentLinkPaymentsPrevious: GetPaymentLinkPaymentsPrevious,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsPrevious$outboundSchema.parse(
      getPaymentLinkPaymentsPrevious,
    ),
  );
}

export function getPaymentLinkPaymentsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsPrevious' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsNext$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetPaymentLinkPaymentsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetPaymentLinkPaymentsNext$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsNext$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsNext$ {
  /** @deprecated use `GetPaymentLinkPaymentsNext$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsNext$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsNext$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsNext$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsNext$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsNext$Outbound;
}

export function getPaymentLinkPaymentsNextToJSON(
  getPaymentLinkPaymentsNext: GetPaymentLinkPaymentsNext,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsNext$outboundSchema.parse(getPaymentLinkPaymentsNext),
  );
}

export function getPaymentLinkPaymentsNextFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsNext' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsDocumentation$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPaymentLinkPaymentsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPaymentLinkPaymentsDocumentation$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsDocumentation$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsDocumentation$ {
  /** @deprecated use `GetPaymentLinkPaymentsDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentLinkPaymentsDocumentation$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentLinkPaymentsDocumentation$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsDocumentation$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsDocumentation$Outbound;
}

export function getPaymentLinkPaymentsDocumentationToJSON(
  getPaymentLinkPaymentsDocumentation: GetPaymentLinkPaymentsDocumentation,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsDocumentation$outboundSchema.parse(
      getPaymentLinkPaymentsDocumentation,
    ),
  );
}

export function getPaymentLinkPaymentsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPaymentLinkPaymentsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsDocumentation' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsLinks$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetPaymentLinkPaymentsSelf$inboundSchema),
  previous: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsPrevious$inboundSchema),
  ),
  next: z.nullable(z.lazy(() => GetPaymentLinkPaymentsNext$inboundSchema)),
  documentation: z.lazy(() =>
    GetPaymentLinkPaymentsDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetPaymentLinkPaymentsLinks$Outbound = {
  self: GetPaymentLinkPaymentsSelf$Outbound;
  previous: GetPaymentLinkPaymentsPrevious$Outbound | null;
  next: GetPaymentLinkPaymentsNext$Outbound | null;
  documentation: GetPaymentLinkPaymentsDocumentation$Outbound;
};

/** @internal */
export const GetPaymentLinkPaymentsLinks$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsLinks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsLinks
> = z.object({
  self: z.lazy(() => GetPaymentLinkPaymentsSelf$outboundSchema),
  previous: z.nullable(
    z.lazy(() => GetPaymentLinkPaymentsPrevious$outboundSchema),
  ),
  next: z.nullable(z.lazy(() => GetPaymentLinkPaymentsNext$outboundSchema)),
  documentation: z.lazy(() =>
    GetPaymentLinkPaymentsDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsLinks$ {
  /** @deprecated use `GetPaymentLinkPaymentsLinks$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsLinks$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLinks$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsLinks$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsLinks$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsLinks$Outbound;
}

export function getPaymentLinkPaymentsLinksToJSON(
  getPaymentLinkPaymentsLinks: GetPaymentLinkPaymentsLinks,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsLinks$outboundSchema.parse(
      getPaymentLinkPaymentsLinks,
    ),
  );
}

export function getPaymentLinkPaymentsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsLinks' from JSON`,
  );
}

/** @internal */
export const GetPaymentLinkPaymentsResponse$inboundSchema: z.ZodType<
  GetPaymentLinkPaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => GetPaymentLinkPaymentsEmbedded$inboundSchema),
  _links: z.lazy(() => GetPaymentLinkPaymentsLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type GetPaymentLinkPaymentsResponse$Outbound = {
  count: number;
  _embedded: GetPaymentLinkPaymentsEmbedded$Outbound;
  _links: GetPaymentLinkPaymentsLinks$Outbound;
};

/** @internal */
export const GetPaymentLinkPaymentsResponse$outboundSchema: z.ZodType<
  GetPaymentLinkPaymentsResponse$Outbound,
  z.ZodTypeDef,
  GetPaymentLinkPaymentsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => GetPaymentLinkPaymentsEmbedded$outboundSchema),
  links: z.lazy(() => GetPaymentLinkPaymentsLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinkPaymentsResponse$ {
  /** @deprecated use `GetPaymentLinkPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinkPaymentsResponse$inboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinkPaymentsResponse$outboundSchema;
  /** @deprecated use `GetPaymentLinkPaymentsResponse$Outbound` instead. */
  export type Outbound = GetPaymentLinkPaymentsResponse$Outbound;
}

export function getPaymentLinkPaymentsResponseToJSON(
  getPaymentLinkPaymentsResponse: GetPaymentLinkPaymentsResponse,
): string {
  return JSON.stringify(
    GetPaymentLinkPaymentsResponse$outboundSchema.parse(
      getPaymentLinkPaymentsResponse,
    ),
  );
}

export function getPaymentLinkPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPaymentLinkPaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPaymentLinkPaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPaymentLinkPaymentsResponse' from JSON`,
  );
}
