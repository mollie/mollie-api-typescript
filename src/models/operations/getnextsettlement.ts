/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the settlement.
 */
export const GetNextSettlementStatus = {
  Open: "open",
  Pending: "pending",
  Paidout: "paidout",
  Failed: "failed",
} as const;
/**
 * The status of the settlement.
 */
export type GetNextSettlementStatus = ClosedEnum<
  typeof GetNextSettlementStatus
>;

/**
 * The total amount of the settlement.
 */
export type GetNextSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The payment method, if applicable
 */
export const GetNextSettlementCostMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type GetNextSettlementCostMethod = ClosedEnum<
  typeof GetNextSettlementCostMethod
>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type GetNextSettlementFixed = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type GetNextSettlementPercentage = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The service rates, further divided into `fixed` and `percentage` costs.
 */
export type GetNextSettlementRate = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  fixed?: GetNextSettlementFixed | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  percentage?: GetNextSettlementPercentage | undefined;
};

/**
 * The net total cost, i.e. excluding VAT
 */
export type GetNextSettlementCostAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type GetNextSettlementCostAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total cost, i.e. including VAT
 */
export type GetNextSettlementCostAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetNextSettlementCost = {
  /**
   * A description of the cost subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: GetNextSettlementCostMethod | null | undefined;
  /**
   * The number of fees
   */
  count?: number | undefined;
  /**
   * The service rates, further divided into `fixed` and `percentage` costs.
   */
  rate?: GetNextSettlementRate | undefined;
  /**
   * The net total cost, i.e. excluding VAT
   */
  amountNet?: GetNextSettlementCostAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: GetNextSettlementCostAmountVat | undefined;
  /**
   * The gross total cost, i.e. including VAT
   */
  amountGross?: GetNextSettlementCostAmountGross | undefined;
};

/**
 * The payment method, if applicable
 */
export const GetNextSettlementRevenueMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type GetNextSettlementRevenueMethod = ClosedEnum<
  typeof GetNextSettlementRevenueMethod
>;

/**
 * The net total of received funds, i.e. excluding VAT
 */
export type GetNextSettlementRevenueAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type GetNextSettlementRevenueAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total of received funds, i.e. including VAT
 */
export type GetNextSettlementRevenueAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetNextSettlementRevenue = {
  /**
   * A description of the revenue subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: GetNextSettlementRevenueMethod | null | undefined;
  /**
   * The number of payments
   */
  count?: number | undefined;
  /**
   * The net total of received funds, i.e. excluding VAT
   */
  amountNet?: GetNextSettlementRevenueAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: GetNextSettlementRevenueAmountVat | undefined;
  /**
   * The gross total of received funds, i.e. including VAT
   */
  amountGross?: GetNextSettlementRevenueAmountGross | undefined;
};

export type GetNextSettlementLessThanMonthGreaterThan = {
  /**
   * An array of cost objects, describing the fees withheld for each payment method during this period.
   */
  costs?: Array<GetNextSettlementCost> | undefined;
  /**
   * An array of revenue objects containing the total revenue for each payment method during this period.
   */
  revenue?: Array<GetNextSettlementRevenue> | undefined;
  /**
   * The ID of the invoice created for this period, if the invoice has been created already.
   */
  invoiceId?: string | null | undefined;
  /**
   * The invoice reference, if the invoice has been created already.
   */
  invoiceReference?: string | null | undefined;
};

export type GetNextSettlementLessThanYearGreaterThan = {
  lessThanMonthGreaterThan?:
    | GetNextSettlementLessThanMonthGreaterThan
    | undefined;
};

/**
 * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
 *
 * @remarks
 * transactions are grouped into 'period' objects â€” one for each calendar month.
 *
 * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
 * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
 *
 * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
 * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
 *
 * The example response should give a good idea of what this looks like in practise.
 */
export type GetNextSettlementPeriods = {
  lessThanYearGreaterThan?:
    | GetNextSettlementLessThanYearGreaterThan
    | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetNextSettlementSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) included in this settlement.
 */
export type GetNextSettlementPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-captures) included in this settlement.
 */
export type GetNextSettlementCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
 */
export type GetNextSettlementRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
 */
export type GetNextSettlementChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [invoice](list-invoices).
 */
export type GetNextSettlementInvoice = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetNextSettlementDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetNextSettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetNextSettlementSelf | undefined;
  /**
   * The API resource URL of the [payments](list-payments) included in this settlement.
   */
  payments?: GetNextSettlementPayments | undefined;
  /**
   * The API resource URL of the [captures](list-captures) included in this settlement.
   */
  captures?: GetNextSettlementCaptures | undefined;
  /**
   * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
   */
  refunds?: GetNextSettlementRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
   */
  chargebacks?: GetNextSettlementChargebacks | undefined;
  /**
   * The API resource URL of the [invoice](list-invoices).
   */
  invoice?: GetNextSettlementInvoice | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetNextSettlementDocumentation | undefined;
};

/**
 * The next settlement object. For a complete reference of the settlement object, refer to the
 *
 * @remarks
 * [Get settlement](get-settlement) endpoint documentation.
 */
export type GetNextSettlementResponse = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this settlement.
   */
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: GetNextSettlementStatus | undefined;
  /**
   * The total amount of the settlement.
   */
  amount?: GetNextSettlementAmount | undefined;
  /**
   * The balance token that the settlement was settled to.
   */
  balanceId?: string | undefined;
  /**
   * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
   */
  invoiceId?: string | null | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects â€” one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: GetNextSettlementPeriods | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetNextSettlementLinks | undefined;
};

/** @internal */
export const GetNextSettlementStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementStatus
> = z.nativeEnum(GetNextSettlementStatus);

/** @internal */
export const GetNextSettlementStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementStatus
> = GetNextSettlementStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementStatus$ {
  /** @deprecated use `GetNextSettlementStatus$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementStatus$inboundSchema;
  /** @deprecated use `GetNextSettlementStatus$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementStatus$outboundSchema;
}

/** @internal */
export const GetNextSettlementAmount$inboundSchema: z.ZodType<
  GetNextSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementAmount$outboundSchema: z.ZodType<
  GetNextSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetNextSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementAmount$ {
  /** @deprecated use `GetNextSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementAmount$inboundSchema;
  /** @deprecated use `GetNextSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementAmount$outboundSchema;
  /** @deprecated use `GetNextSettlementAmount$Outbound` instead. */
  export type Outbound = GetNextSettlementAmount$Outbound;
}

export function getNextSettlementAmountToJSON(
  getNextSettlementAmount: GetNextSettlementAmount,
): string {
  return JSON.stringify(
    GetNextSettlementAmount$outboundSchema.parse(getNextSettlementAmount),
  );
}

export function getNextSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementCostMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementCostMethod
> = z.nativeEnum(GetNextSettlementCostMethod);

/** @internal */
export const GetNextSettlementCostMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementCostMethod
> = GetNextSettlementCostMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementCostMethod$ {
  /** @deprecated use `GetNextSettlementCostMethod$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementCostMethod$inboundSchema;
  /** @deprecated use `GetNextSettlementCostMethod$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementCostMethod$outboundSchema;
}

/** @internal */
export const GetNextSettlementFixed$inboundSchema: z.ZodType<
  GetNextSettlementFixed,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementFixed$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementFixed$outboundSchema: z.ZodType<
  GetNextSettlementFixed$Outbound,
  z.ZodTypeDef,
  GetNextSettlementFixed
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementFixed$ {
  /** @deprecated use `GetNextSettlementFixed$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementFixed$inboundSchema;
  /** @deprecated use `GetNextSettlementFixed$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementFixed$outboundSchema;
  /** @deprecated use `GetNextSettlementFixed$Outbound` instead. */
  export type Outbound = GetNextSettlementFixed$Outbound;
}

export function getNextSettlementFixedToJSON(
  getNextSettlementFixed: GetNextSettlementFixed,
): string {
  return JSON.stringify(
    GetNextSettlementFixed$outboundSchema.parse(getNextSettlementFixed),
  );
}

export function getNextSettlementFixedFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementFixed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementFixed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementFixed' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementPercentage$inboundSchema: z.ZodType<
  GetNextSettlementPercentage,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementPercentage$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementPercentage$outboundSchema: z.ZodType<
  GetNextSettlementPercentage$Outbound,
  z.ZodTypeDef,
  GetNextSettlementPercentage
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementPercentage$ {
  /** @deprecated use `GetNextSettlementPercentage$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementPercentage$inboundSchema;
  /** @deprecated use `GetNextSettlementPercentage$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementPercentage$outboundSchema;
  /** @deprecated use `GetNextSettlementPercentage$Outbound` instead. */
  export type Outbound = GetNextSettlementPercentage$Outbound;
}

export function getNextSettlementPercentageToJSON(
  getNextSettlementPercentage: GetNextSettlementPercentage,
): string {
  return JSON.stringify(
    GetNextSettlementPercentage$outboundSchema.parse(
      getNextSettlementPercentage,
    ),
  );
}

export function getNextSettlementPercentageFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementPercentage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementPercentage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementPercentage' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementRate$inboundSchema: z.ZodType<
  GetNextSettlementRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  fixed: z.lazy(() => GetNextSettlementFixed$inboundSchema).optional(),
  percentage: z.lazy(() => GetNextSettlementPercentage$inboundSchema)
    .optional(),
});

/** @internal */
export type GetNextSettlementRate$Outbound = {
  fixed?: GetNextSettlementFixed$Outbound | undefined;
  percentage?: GetNextSettlementPercentage$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementRate$outboundSchema: z.ZodType<
  GetNextSettlementRate$Outbound,
  z.ZodTypeDef,
  GetNextSettlementRate
> = z.object({
  fixed: z.lazy(() => GetNextSettlementFixed$outboundSchema).optional(),
  percentage: z.lazy(() => GetNextSettlementPercentage$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRate$ {
  /** @deprecated use `GetNextSettlementRate$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementRate$inboundSchema;
  /** @deprecated use `GetNextSettlementRate$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementRate$outboundSchema;
  /** @deprecated use `GetNextSettlementRate$Outbound` instead. */
  export type Outbound = GetNextSettlementRate$Outbound;
}

export function getNextSettlementRateToJSON(
  getNextSettlementRate: GetNextSettlementRate,
): string {
  return JSON.stringify(
    GetNextSettlementRate$outboundSchema.parse(getNextSettlementRate),
  );
}

export function getNextSettlementRateFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementRate' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementCostAmountNet$inboundSchema: z.ZodType<
  GetNextSettlementCostAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementCostAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementCostAmountNet$outboundSchema: z.ZodType<
  GetNextSettlementCostAmountNet$Outbound,
  z.ZodTypeDef,
  GetNextSettlementCostAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementCostAmountNet$ {
  /** @deprecated use `GetNextSettlementCostAmountNet$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementCostAmountNet$inboundSchema;
  /** @deprecated use `GetNextSettlementCostAmountNet$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementCostAmountNet$outboundSchema;
  /** @deprecated use `GetNextSettlementCostAmountNet$Outbound` instead. */
  export type Outbound = GetNextSettlementCostAmountNet$Outbound;
}

export function getNextSettlementCostAmountNetToJSON(
  getNextSettlementCostAmountNet: GetNextSettlementCostAmountNet,
): string {
  return JSON.stringify(
    GetNextSettlementCostAmountNet$outboundSchema.parse(
      getNextSettlementCostAmountNet,
    ),
  );
}

export function getNextSettlementCostAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementCostAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementCostAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementCostAmountNet' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementCostAmountVat$inboundSchema: z.ZodType<
  GetNextSettlementCostAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementCostAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementCostAmountVat$outboundSchema: z.ZodType<
  GetNextSettlementCostAmountVat$Outbound,
  z.ZodTypeDef,
  GetNextSettlementCostAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementCostAmountVat$ {
  /** @deprecated use `GetNextSettlementCostAmountVat$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementCostAmountVat$inboundSchema;
  /** @deprecated use `GetNextSettlementCostAmountVat$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementCostAmountVat$outboundSchema;
  /** @deprecated use `GetNextSettlementCostAmountVat$Outbound` instead. */
  export type Outbound = GetNextSettlementCostAmountVat$Outbound;
}

export function getNextSettlementCostAmountVatToJSON(
  getNextSettlementCostAmountVat: GetNextSettlementCostAmountVat,
): string {
  return JSON.stringify(
    GetNextSettlementCostAmountVat$outboundSchema.parse(
      getNextSettlementCostAmountVat,
    ),
  );
}

export function getNextSettlementCostAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementCostAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementCostAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementCostAmountVat' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementCostAmountGross$inboundSchema: z.ZodType<
  GetNextSettlementCostAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementCostAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementCostAmountGross$outboundSchema: z.ZodType<
  GetNextSettlementCostAmountGross$Outbound,
  z.ZodTypeDef,
  GetNextSettlementCostAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementCostAmountGross$ {
  /** @deprecated use `GetNextSettlementCostAmountGross$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementCostAmountGross$inboundSchema;
  /** @deprecated use `GetNextSettlementCostAmountGross$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementCostAmountGross$outboundSchema;
  /** @deprecated use `GetNextSettlementCostAmountGross$Outbound` instead. */
  export type Outbound = GetNextSettlementCostAmountGross$Outbound;
}

export function getNextSettlementCostAmountGrossToJSON(
  getNextSettlementCostAmountGross: GetNextSettlementCostAmountGross,
): string {
  return JSON.stringify(
    GetNextSettlementCostAmountGross$outboundSchema.parse(
      getNextSettlementCostAmountGross,
    ),
  );
}

export function getNextSettlementCostAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementCostAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementCostAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementCostAmountGross' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementCost$inboundSchema: z.ZodType<
  GetNextSettlementCost,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetNextSettlementCostMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => GetNextSettlementRate$inboundSchema).optional(),
  amountNet: z.lazy(() => GetNextSettlementCostAmountNet$inboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetNextSettlementCostAmountVat$inboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetNextSettlementCostAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type GetNextSettlementCost$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  rate?: GetNextSettlementRate$Outbound | undefined;
  amountNet?: GetNextSettlementCostAmountNet$Outbound | undefined;
  amountVat?: GetNextSettlementCostAmountVat$Outbound | undefined;
  amountGross?: GetNextSettlementCostAmountGross$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementCost$outboundSchema: z.ZodType<
  GetNextSettlementCost$Outbound,
  z.ZodTypeDef,
  GetNextSettlementCost
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetNextSettlementCostMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => GetNextSettlementRate$outboundSchema).optional(),
  amountNet: z.lazy(() => GetNextSettlementCostAmountNet$outboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetNextSettlementCostAmountVat$outboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetNextSettlementCostAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementCost$ {
  /** @deprecated use `GetNextSettlementCost$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementCost$inboundSchema;
  /** @deprecated use `GetNextSettlementCost$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementCost$outboundSchema;
  /** @deprecated use `GetNextSettlementCost$Outbound` instead. */
  export type Outbound = GetNextSettlementCost$Outbound;
}

export function getNextSettlementCostToJSON(
  getNextSettlementCost: GetNextSettlementCost,
): string {
  return JSON.stringify(
    GetNextSettlementCost$outboundSchema.parse(getNextSettlementCost),
  );
}

export function getNextSettlementCostFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementCost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementCost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementCost' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementRevenueMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementRevenueMethod
> = z.nativeEnum(GetNextSettlementRevenueMethod);

/** @internal */
export const GetNextSettlementRevenueMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementRevenueMethod
> = GetNextSettlementRevenueMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRevenueMethod$ {
  /** @deprecated use `GetNextSettlementRevenueMethod$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementRevenueMethod$inboundSchema;
  /** @deprecated use `GetNextSettlementRevenueMethod$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementRevenueMethod$outboundSchema;
}

/** @internal */
export const GetNextSettlementRevenueAmountNet$inboundSchema: z.ZodType<
  GetNextSettlementRevenueAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementRevenueAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementRevenueAmountNet$outboundSchema: z.ZodType<
  GetNextSettlementRevenueAmountNet$Outbound,
  z.ZodTypeDef,
  GetNextSettlementRevenueAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRevenueAmountNet$ {
  /** @deprecated use `GetNextSettlementRevenueAmountNet$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementRevenueAmountNet$inboundSchema;
  /** @deprecated use `GetNextSettlementRevenueAmountNet$outboundSchema` instead. */
  export const outboundSchema =
    GetNextSettlementRevenueAmountNet$outboundSchema;
  /** @deprecated use `GetNextSettlementRevenueAmountNet$Outbound` instead. */
  export type Outbound = GetNextSettlementRevenueAmountNet$Outbound;
}

export function getNextSettlementRevenueAmountNetToJSON(
  getNextSettlementRevenueAmountNet: GetNextSettlementRevenueAmountNet,
): string {
  return JSON.stringify(
    GetNextSettlementRevenueAmountNet$outboundSchema.parse(
      getNextSettlementRevenueAmountNet,
    ),
  );
}

export function getNextSettlementRevenueAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementRevenueAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementRevenueAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementRevenueAmountNet' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementRevenueAmountVat$inboundSchema: z.ZodType<
  GetNextSettlementRevenueAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementRevenueAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementRevenueAmountVat$outboundSchema: z.ZodType<
  GetNextSettlementRevenueAmountVat$Outbound,
  z.ZodTypeDef,
  GetNextSettlementRevenueAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRevenueAmountVat$ {
  /** @deprecated use `GetNextSettlementRevenueAmountVat$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementRevenueAmountVat$inboundSchema;
  /** @deprecated use `GetNextSettlementRevenueAmountVat$outboundSchema` instead. */
  export const outboundSchema =
    GetNextSettlementRevenueAmountVat$outboundSchema;
  /** @deprecated use `GetNextSettlementRevenueAmountVat$Outbound` instead. */
  export type Outbound = GetNextSettlementRevenueAmountVat$Outbound;
}

export function getNextSettlementRevenueAmountVatToJSON(
  getNextSettlementRevenueAmountVat: GetNextSettlementRevenueAmountVat,
): string {
  return JSON.stringify(
    GetNextSettlementRevenueAmountVat$outboundSchema.parse(
      getNextSettlementRevenueAmountVat,
    ),
  );
}

export function getNextSettlementRevenueAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementRevenueAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementRevenueAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementRevenueAmountVat' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementRevenueAmountGross$inboundSchema: z.ZodType<
  GetNextSettlementRevenueAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementRevenueAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementRevenueAmountGross$outboundSchema: z.ZodType<
  GetNextSettlementRevenueAmountGross$Outbound,
  z.ZodTypeDef,
  GetNextSettlementRevenueAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRevenueAmountGross$ {
  /** @deprecated use `GetNextSettlementRevenueAmountGross$inboundSchema` instead. */
  export const inboundSchema =
    GetNextSettlementRevenueAmountGross$inboundSchema;
  /** @deprecated use `GetNextSettlementRevenueAmountGross$outboundSchema` instead. */
  export const outboundSchema =
    GetNextSettlementRevenueAmountGross$outboundSchema;
  /** @deprecated use `GetNextSettlementRevenueAmountGross$Outbound` instead. */
  export type Outbound = GetNextSettlementRevenueAmountGross$Outbound;
}

export function getNextSettlementRevenueAmountGrossToJSON(
  getNextSettlementRevenueAmountGross: GetNextSettlementRevenueAmountGross,
): string {
  return JSON.stringify(
    GetNextSettlementRevenueAmountGross$outboundSchema.parse(
      getNextSettlementRevenueAmountGross,
    ),
  );
}

export function getNextSettlementRevenueAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementRevenueAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetNextSettlementRevenueAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementRevenueAmountGross' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementRevenue$inboundSchema: z.ZodType<
  GetNextSettlementRevenue,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetNextSettlementRevenueMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => GetNextSettlementRevenueAmountNet$inboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetNextSettlementRevenueAmountVat$inboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetNextSettlementRevenueAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type GetNextSettlementRevenue$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  amountNet?: GetNextSettlementRevenueAmountNet$Outbound | undefined;
  amountVat?: GetNextSettlementRevenueAmountVat$Outbound | undefined;
  amountGross?: GetNextSettlementRevenueAmountGross$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementRevenue$outboundSchema: z.ZodType<
  GetNextSettlementRevenue$Outbound,
  z.ZodTypeDef,
  GetNextSettlementRevenue
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetNextSettlementRevenueMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => GetNextSettlementRevenueAmountNet$outboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetNextSettlementRevenueAmountVat$outboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetNextSettlementRevenueAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRevenue$ {
  /** @deprecated use `GetNextSettlementRevenue$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementRevenue$inboundSchema;
  /** @deprecated use `GetNextSettlementRevenue$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementRevenue$outboundSchema;
  /** @deprecated use `GetNextSettlementRevenue$Outbound` instead. */
  export type Outbound = GetNextSettlementRevenue$Outbound;
}

export function getNextSettlementRevenueToJSON(
  getNextSettlementRevenue: GetNextSettlementRevenue,
): string {
  return JSON.stringify(
    GetNextSettlementRevenue$outboundSchema.parse(getNextSettlementRevenue),
  );
}

export function getNextSettlementRevenueFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementRevenue' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementLessThanMonthGreaterThan$inboundSchema: z.ZodType<
  GetNextSettlementLessThanMonthGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  costs: z.array(z.lazy(() => GetNextSettlementCost$inboundSchema)).optional(),
  revenue: z.array(z.lazy(() => GetNextSettlementRevenue$inboundSchema))
    .optional(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetNextSettlementLessThanMonthGreaterThan$Outbound = {
  costs?: Array<GetNextSettlementCost$Outbound> | undefined;
  revenue?: Array<GetNextSettlementRevenue$Outbound> | undefined;
  invoiceId?: string | null | undefined;
  invoiceReference?: string | null | undefined;
};

/** @internal */
export const GetNextSettlementLessThanMonthGreaterThan$outboundSchema:
  z.ZodType<
    GetNextSettlementLessThanMonthGreaterThan$Outbound,
    z.ZodTypeDef,
    GetNextSettlementLessThanMonthGreaterThan
  > = z.object({
    costs: z.array(z.lazy(() => GetNextSettlementCost$outboundSchema))
      .optional(),
    revenue: z.array(z.lazy(() => GetNextSettlementRevenue$outboundSchema))
      .optional(),
    invoiceId: z.nullable(z.string()).optional(),
    invoiceReference: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementLessThanMonthGreaterThan$ {
  /** @deprecated use `GetNextSettlementLessThanMonthGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    GetNextSettlementLessThanMonthGreaterThan$inboundSchema;
  /** @deprecated use `GetNextSettlementLessThanMonthGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    GetNextSettlementLessThanMonthGreaterThan$outboundSchema;
  /** @deprecated use `GetNextSettlementLessThanMonthGreaterThan$Outbound` instead. */
  export type Outbound = GetNextSettlementLessThanMonthGreaterThan$Outbound;
}

export function getNextSettlementLessThanMonthGreaterThanToJSON(
  getNextSettlementLessThanMonthGreaterThan:
    GetNextSettlementLessThanMonthGreaterThan,
): string {
  return JSON.stringify(
    GetNextSettlementLessThanMonthGreaterThan$outboundSchema.parse(
      getNextSettlementLessThanMonthGreaterThan,
    ),
  );
}

export function getNextSettlementLessThanMonthGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<
  GetNextSettlementLessThanMonthGreaterThan,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetNextSettlementLessThanMonthGreaterThan$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetNextSettlementLessThanMonthGreaterThan' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementLessThanYearGreaterThan$inboundSchema: z.ZodType<
  GetNextSettlementLessThanYearGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<month>": z.lazy(() =>
    GetNextSettlementLessThanMonthGreaterThan$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "<month>": "lessThanMonthGreaterThan",
  });
});

/** @internal */
export type GetNextSettlementLessThanYearGreaterThan$Outbound = {
  "<month>"?: GetNextSettlementLessThanMonthGreaterThan$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementLessThanYearGreaterThan$outboundSchema: z.ZodType<
  GetNextSettlementLessThanYearGreaterThan$Outbound,
  z.ZodTypeDef,
  GetNextSettlementLessThanYearGreaterThan
> = z.object({
  lessThanMonthGreaterThan: z.lazy(() =>
    GetNextSettlementLessThanMonthGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanMonthGreaterThan: "<month>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementLessThanYearGreaterThan$ {
  /** @deprecated use `GetNextSettlementLessThanYearGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    GetNextSettlementLessThanYearGreaterThan$inboundSchema;
  /** @deprecated use `GetNextSettlementLessThanYearGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    GetNextSettlementLessThanYearGreaterThan$outboundSchema;
  /** @deprecated use `GetNextSettlementLessThanYearGreaterThan$Outbound` instead. */
  export type Outbound = GetNextSettlementLessThanYearGreaterThan$Outbound;
}

export function getNextSettlementLessThanYearGreaterThanToJSON(
  getNextSettlementLessThanYearGreaterThan:
    GetNextSettlementLessThanYearGreaterThan,
): string {
  return JSON.stringify(
    GetNextSettlementLessThanYearGreaterThan$outboundSchema.parse(
      getNextSettlementLessThanYearGreaterThan,
    ),
  );
}

export function getNextSettlementLessThanYearGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<
  GetNextSettlementLessThanYearGreaterThan,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetNextSettlementLessThanYearGreaterThan$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetNextSettlementLessThanYearGreaterThan' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementPeriods$inboundSchema: z.ZodType<
  GetNextSettlementPeriods,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<year>": z.lazy(() => GetNextSettlementLessThanYearGreaterThan$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "<year>": "lessThanYearGreaterThan",
  });
});

/** @internal */
export type GetNextSettlementPeriods$Outbound = {
  "<year>"?: GetNextSettlementLessThanYearGreaterThan$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementPeriods$outboundSchema: z.ZodType<
  GetNextSettlementPeriods$Outbound,
  z.ZodTypeDef,
  GetNextSettlementPeriods
> = z.object({
  lessThanYearGreaterThan: z.lazy(() =>
    GetNextSettlementLessThanYearGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanYearGreaterThan: "<year>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementPeriods$ {
  /** @deprecated use `GetNextSettlementPeriods$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementPeriods$inboundSchema;
  /** @deprecated use `GetNextSettlementPeriods$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementPeriods$outboundSchema;
  /** @deprecated use `GetNextSettlementPeriods$Outbound` instead. */
  export type Outbound = GetNextSettlementPeriods$Outbound;
}

export function getNextSettlementPeriodsToJSON(
  getNextSettlementPeriods: GetNextSettlementPeriods,
): string {
  return JSON.stringify(
    GetNextSettlementPeriods$outboundSchema.parse(getNextSettlementPeriods),
  );
}

export function getNextSettlementPeriodsFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementPeriods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementPeriods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementPeriods' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementSelf$inboundSchema: z.ZodType<
  GetNextSettlementSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementSelf$outboundSchema: z.ZodType<
  GetNextSettlementSelf$Outbound,
  z.ZodTypeDef,
  GetNextSettlementSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementSelf$ {
  /** @deprecated use `GetNextSettlementSelf$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementSelf$inboundSchema;
  /** @deprecated use `GetNextSettlementSelf$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementSelf$outboundSchema;
  /** @deprecated use `GetNextSettlementSelf$Outbound` instead. */
  export type Outbound = GetNextSettlementSelf$Outbound;
}

export function getNextSettlementSelfToJSON(
  getNextSettlementSelf: GetNextSettlementSelf,
): string {
  return JSON.stringify(
    GetNextSettlementSelf$outboundSchema.parse(getNextSettlementSelf),
  );
}

export function getNextSettlementSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementSelf' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementPayments$inboundSchema: z.ZodType<
  GetNextSettlementPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementPayments$outboundSchema: z.ZodType<
  GetNextSettlementPayments$Outbound,
  z.ZodTypeDef,
  GetNextSettlementPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementPayments$ {
  /** @deprecated use `GetNextSettlementPayments$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementPayments$inboundSchema;
  /** @deprecated use `GetNextSettlementPayments$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementPayments$outboundSchema;
  /** @deprecated use `GetNextSettlementPayments$Outbound` instead. */
  export type Outbound = GetNextSettlementPayments$Outbound;
}

export function getNextSettlementPaymentsToJSON(
  getNextSettlementPayments: GetNextSettlementPayments,
): string {
  return JSON.stringify(
    GetNextSettlementPayments$outboundSchema.parse(getNextSettlementPayments),
  );
}

export function getNextSettlementPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementPayments' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementCaptures$inboundSchema: z.ZodType<
  GetNextSettlementCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementCaptures$outboundSchema: z.ZodType<
  GetNextSettlementCaptures$Outbound,
  z.ZodTypeDef,
  GetNextSettlementCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementCaptures$ {
  /** @deprecated use `GetNextSettlementCaptures$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementCaptures$inboundSchema;
  /** @deprecated use `GetNextSettlementCaptures$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementCaptures$outboundSchema;
  /** @deprecated use `GetNextSettlementCaptures$Outbound` instead. */
  export type Outbound = GetNextSettlementCaptures$Outbound;
}

export function getNextSettlementCapturesToJSON(
  getNextSettlementCaptures: GetNextSettlementCaptures,
): string {
  return JSON.stringify(
    GetNextSettlementCaptures$outboundSchema.parse(getNextSettlementCaptures),
  );
}

export function getNextSettlementCapturesFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementCaptures' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementRefunds$inboundSchema: z.ZodType<
  GetNextSettlementRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementRefunds$outboundSchema: z.ZodType<
  GetNextSettlementRefunds$Outbound,
  z.ZodTypeDef,
  GetNextSettlementRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRefunds$ {
  /** @deprecated use `GetNextSettlementRefunds$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementRefunds$inboundSchema;
  /** @deprecated use `GetNextSettlementRefunds$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementRefunds$outboundSchema;
  /** @deprecated use `GetNextSettlementRefunds$Outbound` instead. */
  export type Outbound = GetNextSettlementRefunds$Outbound;
}

export function getNextSettlementRefundsToJSON(
  getNextSettlementRefunds: GetNextSettlementRefunds,
): string {
  return JSON.stringify(
    GetNextSettlementRefunds$outboundSchema.parse(getNextSettlementRefunds),
  );
}

export function getNextSettlementRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementRefunds' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementChargebacks$inboundSchema: z.ZodType<
  GetNextSettlementChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementChargebacks$outboundSchema: z.ZodType<
  GetNextSettlementChargebacks$Outbound,
  z.ZodTypeDef,
  GetNextSettlementChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementChargebacks$ {
  /** @deprecated use `GetNextSettlementChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementChargebacks$inboundSchema;
  /** @deprecated use `GetNextSettlementChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementChargebacks$outboundSchema;
  /** @deprecated use `GetNextSettlementChargebacks$Outbound` instead. */
  export type Outbound = GetNextSettlementChargebacks$Outbound;
}

export function getNextSettlementChargebacksToJSON(
  getNextSettlementChargebacks: GetNextSettlementChargebacks,
): string {
  return JSON.stringify(
    GetNextSettlementChargebacks$outboundSchema.parse(
      getNextSettlementChargebacks,
    ),
  );
}

export function getNextSettlementChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementChargebacks' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementInvoice$inboundSchema: z.ZodType<
  GetNextSettlementInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetNextSettlementInvoice$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetNextSettlementInvoice$outboundSchema: z.ZodType<
  GetNextSettlementInvoice$Outbound,
  z.ZodTypeDef,
  GetNextSettlementInvoice
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementInvoice$ {
  /** @deprecated use `GetNextSettlementInvoice$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementInvoice$inboundSchema;
  /** @deprecated use `GetNextSettlementInvoice$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementInvoice$outboundSchema;
  /** @deprecated use `GetNextSettlementInvoice$Outbound` instead. */
  export type Outbound = GetNextSettlementInvoice$Outbound;
}

export function getNextSettlementInvoiceToJSON(
  getNextSettlementInvoice: GetNextSettlementInvoice,
): string {
  return JSON.stringify(
    GetNextSettlementInvoice$outboundSchema.parse(getNextSettlementInvoice),
  );
}

export function getNextSettlementInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementInvoice' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementDocumentation$inboundSchema: z.ZodType<
  GetNextSettlementDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementDocumentation$outboundSchema: z.ZodType<
  GetNextSettlementDocumentation$Outbound,
  z.ZodTypeDef,
  GetNextSettlementDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementDocumentation$ {
  /** @deprecated use `GetNextSettlementDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementDocumentation$inboundSchema;
  /** @deprecated use `GetNextSettlementDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementDocumentation$outboundSchema;
  /** @deprecated use `GetNextSettlementDocumentation$Outbound` instead. */
  export type Outbound = GetNextSettlementDocumentation$Outbound;
}

export function getNextSettlementDocumentationToJSON(
  getNextSettlementDocumentation: GetNextSettlementDocumentation,
): string {
  return JSON.stringify(
    GetNextSettlementDocumentation$outboundSchema.parse(
      getNextSettlementDocumentation,
    ),
  );
}

export function getNextSettlementDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementDocumentation' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementLinks$inboundSchema: z.ZodType<
  GetNextSettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetNextSettlementSelf$inboundSchema).optional(),
  payments: z.lazy(() => GetNextSettlementPayments$inboundSchema).optional(),
  captures: z.lazy(() => GetNextSettlementCaptures$inboundSchema).optional(),
  refunds: z.lazy(() => GetNextSettlementRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetNextSettlementChargebacks$inboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetNextSettlementInvoice$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetNextSettlementDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetNextSettlementLinks$Outbound = {
  self?: GetNextSettlementSelf$Outbound | undefined;
  payments?: GetNextSettlementPayments$Outbound | undefined;
  captures?: GetNextSettlementCaptures$Outbound | undefined;
  refunds?: GetNextSettlementRefunds$Outbound | undefined;
  chargebacks?: GetNextSettlementChargebacks$Outbound | undefined;
  invoice?: GetNextSettlementInvoice$Outbound | null | undefined;
  documentation?: GetNextSettlementDocumentation$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementLinks$outboundSchema: z.ZodType<
  GetNextSettlementLinks$Outbound,
  z.ZodTypeDef,
  GetNextSettlementLinks
> = z.object({
  self: z.lazy(() => GetNextSettlementSelf$outboundSchema).optional(),
  payments: z.lazy(() => GetNextSettlementPayments$outboundSchema).optional(),
  captures: z.lazy(() => GetNextSettlementCaptures$outboundSchema).optional(),
  refunds: z.lazy(() => GetNextSettlementRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetNextSettlementChargebacks$outboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetNextSettlementInvoice$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetNextSettlementDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementLinks$ {
  /** @deprecated use `GetNextSettlementLinks$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementLinks$inboundSchema;
  /** @deprecated use `GetNextSettlementLinks$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementLinks$outboundSchema;
  /** @deprecated use `GetNextSettlementLinks$Outbound` instead. */
  export type Outbound = GetNextSettlementLinks$Outbound;
}

export function getNextSettlementLinksToJSON(
  getNextSettlementLinks: GetNextSettlementLinks,
): string {
  return JSON.stringify(
    GetNextSettlementLinks$outboundSchema.parse(getNextSettlementLinks),
  );
}

export function getNextSettlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementLinks' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementResponse$inboundSchema: z.ZodType<
  GetNextSettlementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetNextSettlementStatus$inboundSchema.optional(),
  amount: z.lazy(() => GetNextSettlementAmount$inboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => GetNextSettlementPeriods$inboundSchema).optional(),
  _links: z.lazy(() => GetNextSettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetNextSettlementResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: GetNextSettlementAmount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | null | undefined;
  periods?: GetNextSettlementPeriods$Outbound | undefined;
  _links?: GetNextSettlementLinks$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementResponse$outboundSchema: z.ZodType<
  GetNextSettlementResponse$Outbound,
  z.ZodTypeDef,
  GetNextSettlementResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetNextSettlementStatus$outboundSchema.optional(),
  amount: z.lazy(() => GetNextSettlementAmount$outboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => GetNextSettlementPeriods$outboundSchema).optional(),
  links: z.lazy(() => GetNextSettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementResponse$ {
  /** @deprecated use `GetNextSettlementResponse$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementResponse$inboundSchema;
  /** @deprecated use `GetNextSettlementResponse$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementResponse$outboundSchema;
  /** @deprecated use `GetNextSettlementResponse$Outbound` instead. */
  export type Outbound = GetNextSettlementResponse$Outbound;
}

export function getNextSettlementResponseToJSON(
  getNextSettlementResponse: GetNextSettlementResponse,
): string {
  return JSON.stringify(
    GetNextSettlementResponse$outboundSchema.parse(getNextSettlementResponse),
  );
}

export function getNextSettlementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementResponse' from JSON`,
  );
}
