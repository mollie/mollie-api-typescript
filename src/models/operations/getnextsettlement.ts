/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the settlement.
 */
export const GetNextSettlementStatus = {
  Open: "open",
  Pending: "pending",
  Paidout: "paidout",
  Failed: "failed",
} as const;
/**
 * The status of the settlement.
 */
export type GetNextSettlementStatus = ClosedEnum<
  typeof GetNextSettlementStatus
>;

/**
 * The total amount of the settlement.
 */
export type GetNextSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetNextSettlementSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) included in this settlement.
 */
export type GetNextSettlementPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-captures) included in this settlement.
 */
export type GetNextSettlementCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
 */
export type GetNextSettlementRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
 */
export type GetNextSettlementChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [invoice](list-invoices).
 */
export type GetNextSettlementInvoice = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetNextSettlementDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetNextSettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetNextSettlementSelf | undefined;
  /**
   * The API resource URL of the [payments](list-payments) included in this settlement.
   */
  payments?: GetNextSettlementPayments | undefined;
  /**
   * The API resource URL of the [captures](list-captures) included in this settlement.
   */
  captures?: GetNextSettlementCaptures | undefined;
  /**
   * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
   */
  refunds?: GetNextSettlementRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
   */
  chargebacks?: GetNextSettlementChargebacks | undefined;
  /**
   * The API resource URL of the [invoice](list-invoices).
   */
  invoice?: GetNextSettlementInvoice | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetNextSettlementDocumentation | undefined;
};

/**
 * The next settlement object. For a complete reference of the settlement object, refer to the
 *
 * @remarks
 * [Get settlement](get-settlement) endpoint documentation.
 */
export type GetNextSettlementResponse = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this settlement.
   */
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: GetNextSettlementStatus | undefined;
  /**
   * The total amount of the settlement.
   */
  amount?: GetNextSettlementAmount | undefined;
  /**
   * The balance token that the settlement was settled to.
   */
  balanceId?: string | undefined;
  /**
   * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
   */
  invoiceId?: string | null | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects â€” one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: { [k: string]: any } | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetNextSettlementLinks | undefined;
};

/** @internal */
export const GetNextSettlementStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementStatus
> = z.nativeEnum(GetNextSettlementStatus);

/** @internal */
export const GetNextSettlementStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetNextSettlementStatus
> = GetNextSettlementStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementStatus$ {
  /** @deprecated use `GetNextSettlementStatus$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementStatus$inboundSchema;
  /** @deprecated use `GetNextSettlementStatus$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementStatus$outboundSchema;
}

/** @internal */
export const GetNextSettlementAmount$inboundSchema: z.ZodType<
  GetNextSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetNextSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetNextSettlementAmount$outboundSchema: z.ZodType<
  GetNextSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetNextSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementAmount$ {
  /** @deprecated use `GetNextSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementAmount$inboundSchema;
  /** @deprecated use `GetNextSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementAmount$outboundSchema;
  /** @deprecated use `GetNextSettlementAmount$Outbound` instead. */
  export type Outbound = GetNextSettlementAmount$Outbound;
}

export function getNextSettlementAmountToJSON(
  getNextSettlementAmount: GetNextSettlementAmount,
): string {
  return JSON.stringify(
    GetNextSettlementAmount$outboundSchema.parse(getNextSettlementAmount),
  );
}

export function getNextSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementSelf$inboundSchema: z.ZodType<
  GetNextSettlementSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementSelf$outboundSchema: z.ZodType<
  GetNextSettlementSelf$Outbound,
  z.ZodTypeDef,
  GetNextSettlementSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementSelf$ {
  /** @deprecated use `GetNextSettlementSelf$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementSelf$inboundSchema;
  /** @deprecated use `GetNextSettlementSelf$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementSelf$outboundSchema;
  /** @deprecated use `GetNextSettlementSelf$Outbound` instead. */
  export type Outbound = GetNextSettlementSelf$Outbound;
}

export function getNextSettlementSelfToJSON(
  getNextSettlementSelf: GetNextSettlementSelf,
): string {
  return JSON.stringify(
    GetNextSettlementSelf$outboundSchema.parse(getNextSettlementSelf),
  );
}

export function getNextSettlementSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementSelf' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementPayments$inboundSchema: z.ZodType<
  GetNextSettlementPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementPayments$outboundSchema: z.ZodType<
  GetNextSettlementPayments$Outbound,
  z.ZodTypeDef,
  GetNextSettlementPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementPayments$ {
  /** @deprecated use `GetNextSettlementPayments$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementPayments$inboundSchema;
  /** @deprecated use `GetNextSettlementPayments$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementPayments$outboundSchema;
  /** @deprecated use `GetNextSettlementPayments$Outbound` instead. */
  export type Outbound = GetNextSettlementPayments$Outbound;
}

export function getNextSettlementPaymentsToJSON(
  getNextSettlementPayments: GetNextSettlementPayments,
): string {
  return JSON.stringify(
    GetNextSettlementPayments$outboundSchema.parse(getNextSettlementPayments),
  );
}

export function getNextSettlementPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementPayments' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementCaptures$inboundSchema: z.ZodType<
  GetNextSettlementCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementCaptures$outboundSchema: z.ZodType<
  GetNextSettlementCaptures$Outbound,
  z.ZodTypeDef,
  GetNextSettlementCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementCaptures$ {
  /** @deprecated use `GetNextSettlementCaptures$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementCaptures$inboundSchema;
  /** @deprecated use `GetNextSettlementCaptures$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementCaptures$outboundSchema;
  /** @deprecated use `GetNextSettlementCaptures$Outbound` instead. */
  export type Outbound = GetNextSettlementCaptures$Outbound;
}

export function getNextSettlementCapturesToJSON(
  getNextSettlementCaptures: GetNextSettlementCaptures,
): string {
  return JSON.stringify(
    GetNextSettlementCaptures$outboundSchema.parse(getNextSettlementCaptures),
  );
}

export function getNextSettlementCapturesFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementCaptures' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementRefunds$inboundSchema: z.ZodType<
  GetNextSettlementRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementRefunds$outboundSchema: z.ZodType<
  GetNextSettlementRefunds$Outbound,
  z.ZodTypeDef,
  GetNextSettlementRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementRefunds$ {
  /** @deprecated use `GetNextSettlementRefunds$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementRefunds$inboundSchema;
  /** @deprecated use `GetNextSettlementRefunds$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementRefunds$outboundSchema;
  /** @deprecated use `GetNextSettlementRefunds$Outbound` instead. */
  export type Outbound = GetNextSettlementRefunds$Outbound;
}

export function getNextSettlementRefundsToJSON(
  getNextSettlementRefunds: GetNextSettlementRefunds,
): string {
  return JSON.stringify(
    GetNextSettlementRefunds$outboundSchema.parse(getNextSettlementRefunds),
  );
}

export function getNextSettlementRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementRefunds' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementChargebacks$inboundSchema: z.ZodType<
  GetNextSettlementChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementChargebacks$outboundSchema: z.ZodType<
  GetNextSettlementChargebacks$Outbound,
  z.ZodTypeDef,
  GetNextSettlementChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementChargebacks$ {
  /** @deprecated use `GetNextSettlementChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementChargebacks$inboundSchema;
  /** @deprecated use `GetNextSettlementChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementChargebacks$outboundSchema;
  /** @deprecated use `GetNextSettlementChargebacks$Outbound` instead. */
  export type Outbound = GetNextSettlementChargebacks$Outbound;
}

export function getNextSettlementChargebacksToJSON(
  getNextSettlementChargebacks: GetNextSettlementChargebacks,
): string {
  return JSON.stringify(
    GetNextSettlementChargebacks$outboundSchema.parse(
      getNextSettlementChargebacks,
    ),
  );
}

export function getNextSettlementChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementChargebacks' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementInvoice$inboundSchema: z.ZodType<
  GetNextSettlementInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetNextSettlementInvoice$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetNextSettlementInvoice$outboundSchema: z.ZodType<
  GetNextSettlementInvoice$Outbound,
  z.ZodTypeDef,
  GetNextSettlementInvoice
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementInvoice$ {
  /** @deprecated use `GetNextSettlementInvoice$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementInvoice$inboundSchema;
  /** @deprecated use `GetNextSettlementInvoice$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementInvoice$outboundSchema;
  /** @deprecated use `GetNextSettlementInvoice$Outbound` instead. */
  export type Outbound = GetNextSettlementInvoice$Outbound;
}

export function getNextSettlementInvoiceToJSON(
  getNextSettlementInvoice: GetNextSettlementInvoice,
): string {
  return JSON.stringify(
    GetNextSettlementInvoice$outboundSchema.parse(getNextSettlementInvoice),
  );
}

export function getNextSettlementInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementInvoice' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementDocumentation$inboundSchema: z.ZodType<
  GetNextSettlementDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetNextSettlementDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetNextSettlementDocumentation$outboundSchema: z.ZodType<
  GetNextSettlementDocumentation$Outbound,
  z.ZodTypeDef,
  GetNextSettlementDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementDocumentation$ {
  /** @deprecated use `GetNextSettlementDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementDocumentation$inboundSchema;
  /** @deprecated use `GetNextSettlementDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementDocumentation$outboundSchema;
  /** @deprecated use `GetNextSettlementDocumentation$Outbound` instead. */
  export type Outbound = GetNextSettlementDocumentation$Outbound;
}

export function getNextSettlementDocumentationToJSON(
  getNextSettlementDocumentation: GetNextSettlementDocumentation,
): string {
  return JSON.stringify(
    GetNextSettlementDocumentation$outboundSchema.parse(
      getNextSettlementDocumentation,
    ),
  );
}

export function getNextSettlementDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementDocumentation' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementLinks$inboundSchema: z.ZodType<
  GetNextSettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetNextSettlementSelf$inboundSchema).optional(),
  payments: z.lazy(() => GetNextSettlementPayments$inboundSchema).optional(),
  captures: z.lazy(() => GetNextSettlementCaptures$inboundSchema).optional(),
  refunds: z.lazy(() => GetNextSettlementRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetNextSettlementChargebacks$inboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetNextSettlementInvoice$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetNextSettlementDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetNextSettlementLinks$Outbound = {
  self?: GetNextSettlementSelf$Outbound | undefined;
  payments?: GetNextSettlementPayments$Outbound | undefined;
  captures?: GetNextSettlementCaptures$Outbound | undefined;
  refunds?: GetNextSettlementRefunds$Outbound | undefined;
  chargebacks?: GetNextSettlementChargebacks$Outbound | undefined;
  invoice?: GetNextSettlementInvoice$Outbound | null | undefined;
  documentation?: GetNextSettlementDocumentation$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementLinks$outboundSchema: z.ZodType<
  GetNextSettlementLinks$Outbound,
  z.ZodTypeDef,
  GetNextSettlementLinks
> = z.object({
  self: z.lazy(() => GetNextSettlementSelf$outboundSchema).optional(),
  payments: z.lazy(() => GetNextSettlementPayments$outboundSchema).optional(),
  captures: z.lazy(() => GetNextSettlementCaptures$outboundSchema).optional(),
  refunds: z.lazy(() => GetNextSettlementRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetNextSettlementChargebacks$outboundSchema)
    .optional(),
  invoice: z.nullable(z.lazy(() => GetNextSettlementInvoice$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetNextSettlementDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementLinks$ {
  /** @deprecated use `GetNextSettlementLinks$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementLinks$inboundSchema;
  /** @deprecated use `GetNextSettlementLinks$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementLinks$outboundSchema;
  /** @deprecated use `GetNextSettlementLinks$Outbound` instead. */
  export type Outbound = GetNextSettlementLinks$Outbound;
}

export function getNextSettlementLinksToJSON(
  getNextSettlementLinks: GetNextSettlementLinks,
): string {
  return JSON.stringify(
    GetNextSettlementLinks$outboundSchema.parse(getNextSettlementLinks),
  );
}

export function getNextSettlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementLinks' from JSON`,
  );
}

/** @internal */
export const GetNextSettlementResponse$inboundSchema: z.ZodType<
  GetNextSettlementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetNextSettlementStatus$inboundSchema.optional(),
  amount: z.lazy(() => GetNextSettlementAmount$inboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.record(z.any()).optional(),
  _links: z.lazy(() => GetNextSettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetNextSettlementResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: GetNextSettlementAmount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | null | undefined;
  periods?: { [k: string]: any } | undefined;
  _links?: GetNextSettlementLinks$Outbound | undefined;
};

/** @internal */
export const GetNextSettlementResponse$outboundSchema: z.ZodType<
  GetNextSettlementResponse$Outbound,
  z.ZodTypeDef,
  GetNextSettlementResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetNextSettlementStatus$outboundSchema.optional(),
  amount: z.lazy(() => GetNextSettlementAmount$outboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.record(z.any()).optional(),
  links: z.lazy(() => GetNextSettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextSettlementResponse$ {
  /** @deprecated use `GetNextSettlementResponse$inboundSchema` instead. */
  export const inboundSchema = GetNextSettlementResponse$inboundSchema;
  /** @deprecated use `GetNextSettlementResponse$outboundSchema` instead. */
  export const outboundSchema = GetNextSettlementResponse$outboundSchema;
  /** @deprecated use `GetNextSettlementResponse$Outbound` instead. */
  export type Outbound = GetNextSettlementResponse$Outbound;
}

export function getNextSettlementResponseToJSON(
  getNextSettlementResponse: GetNextSettlementResponse,
): string {
  return JSON.stringify(
    GetNextSettlementResponse$outboundSchema.parse(getNextSettlementResponse),
  );
}

export function getNextSettlementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetNextSettlementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextSettlementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextSettlementResponse' from JSON`,
  );
}
