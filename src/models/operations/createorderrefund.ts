/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
 */
export type CreateOrderRefundAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type CreateOrderRefundMetadataRequest = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateOrderRefundMetadataRequestUnion =
  | CreateOrderRefundMetadataRequest
  | string
  | Array<string>;

export type CreateOrderRefundExternalReferenceRequest = {
  /**
   * Specifies the reference type
   *
   * @remarks
   *
   * Possible values: `acquirer-reference`
   */
  type?: string | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

export const TypeRequest = {
  Physical: "physical",
  Digital: "digital",
  Discount: "discount",
  ShippingFee: "shipping_fee",
  StoreCredit: "store_credit",
  GiftCard: "gift_card",
  Surcharge: "surcharge",
} as const;
export type TypeRequest = ClosedEnum<typeof TypeRequest>;

export const StatusRequest = {
  Created: "created",
  Authorized: "authorized",
  Paid: "paid",
  Canceled: "canceled",
  Shipping: "shipping",
  Completed: "completed",
} as const;
export type StatusRequest = ClosedEnum<typeof StatusRequest>;

export type MetadataLineRequest = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type LineMetadataRequestUnion =
  | MetadataLineRequest
  | string
  | Array<string>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type AmountShippedRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type AmountRefundedRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type AmountCanceledRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
 *
 * @remarks
 *
 * The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
 *
 * The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
 *
 * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
 *
 * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
 */
export type CreateOrderRefundLineAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type LineInput = {
  /**
   * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
   */
  id?: string | undefined;
  name?: string | undefined;
  sku?: string | null | undefined;
  type?: TypeRequest | undefined;
  status?: StatusRequest | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: MetadataLineRequest | string | Array<string> | null | undefined;
  isCancelable?: boolean | undefined;
  /**
   * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
   *
   * @remarks
   *
   * Must be less than the number of items already refunded for this order line.
   */
  quantity?: number | undefined;
  quantityShipped?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountShipped?: AmountShippedRequest | undefined;
  quantityRefunded?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountRefunded?: AmountRefundedRequest | undefined;
  quantityCanceled?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountCanceled?: AmountCanceledRequest | undefined;
  /**
   * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
   *
   * @remarks
   *
   * The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
   *
   * The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
   *
   * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
   *
   * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
   */
  amount?: CreateOrderRefundLineAmount | undefined;
  shippableQuantity?: number | undefined;
  refundableQuantity?: number | undefined;
  cancelableQuantity?: number | undefined;
  vatRate?: string | undefined;
  createdAt?: string | undefined;
};

export type CreateOrderRefundRequestBody = {
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
   */
  amount?: CreateOrderRefundAmountRequest | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateOrderRefundMetadataRequest
    | string
    | Array<string>
    | null
    | undefined;
  externalReference?: CreateOrderRefundExternalReferenceRequest | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
  /**
   * A refund can optionally be linked to specific order lines.
   *
   * @remarks
   *
   * The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
   */
  lines: Array<LineInput>;
};

export type CreateOrderRefundRequest = {
  /**
   * Provide the ID of the related order.
   */
  orderId: string;
  requestBody?: CreateOrderRefundRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateOrderRefundUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type CreateOrderRefundUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateOrderRefundUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateOrderRefundNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CreateOrderRefundNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateOrderRefundNotFoundDocumentation;
};

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
 */
export type CreateOrderRefundAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type CreateOrderRefundSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type CreateOrderRefundMetadataResponse = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateOrderRefundMetadataResponseUnion =
  | CreateOrderRefundMetadataResponse
  | string
  | Array<string>;

export type CreateOrderRefundExternalReferenceResponse = {
  /**
   * Specifies the reference type
   *
   * @remarks
   *
   * Possible values: `acquirer-reference`
   */
  type?: string | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

export const CreateOrderRefundTypeResponse = {
  Physical: "physical",
  Digital: "digital",
  Discount: "discount",
  ShippingFee: "shipping_fee",
  StoreCredit: "store_credit",
  GiftCard: "gift_card",
  Surcharge: "surcharge",
} as const;
export type CreateOrderRefundTypeResponse = ClosedEnum<
  typeof CreateOrderRefundTypeResponse
>;

export const CreateOrderRefundStatusResponse = {
  Created: "created",
  Authorized: "authorized",
  Paid: "paid",
  Canceled: "canceled",
  Shipping: "shipping",
  Completed: "completed",
} as const;
export type CreateOrderRefundStatusResponse = ClosedEnum<
  typeof CreateOrderRefundStatusResponse
>;

export type CreateOrderRefundMetadataLineResponse = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateOrderRefundLineMetadataResponseUnion =
  | CreateOrderRefundMetadataLineResponse
  | string
  | Array<string>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CreateOrderRefundAmountShippedResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CreateOrderRefundAmountRefundedResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CreateOrderRefundAmountCanceledResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CreateOrderRefundUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CreateOrderRefundTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CreateOrderRefundVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type CreateOrderRefundDiscountedAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type CreateOrderRefundLineOutput = {
  resource?: string | undefined;
  /**
   * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
   */
  id?: string | undefined;
  orderId?: string | undefined;
  name?: string | undefined;
  sku?: string | null | undefined;
  type?: CreateOrderRefundTypeResponse | undefined;
  status?: CreateOrderRefundStatusResponse | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateOrderRefundMetadataLineResponse
    | string
    | Array<string>
    | null
    | undefined;
  isCancelable?: boolean | undefined;
  /**
   * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
   *
   * @remarks
   *
   * Must be less than the number of items already refunded for this order line.
   */
  quantity?: number | undefined;
  quantityShipped?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountShipped?: CreateOrderRefundAmountShippedResponse | undefined;
  quantityRefunded?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountRefunded?: CreateOrderRefundAmountRefundedResponse | undefined;
  quantityCanceled?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amountCanceled?: CreateOrderRefundAmountCanceledResponse | undefined;
  shippableQuantity?: number | undefined;
  refundableQuantity?: number | undefined;
  cancelableQuantity?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  unitPrice?: CreateOrderRefundUnitPrice | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  totalAmount?: CreateOrderRefundTotalAmount | undefined;
  vatRate?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  vatAmount?: CreateOrderRefundVatAmount | undefined;
  createdAt?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  discountedAmount?: CreateOrderRefundDiscountedAmount | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateOrderRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [order](get-order) that this refund belongs to, if applicable.
 */
export type CreateOrderRefundOrder = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
 */
export type CreateOrderRefundSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateOrderRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateOrderRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: CreateOrderRefundSelf | undefined;
  /**
   * The API resource URL of the [order](get-order) that this refund belongs to, if applicable.
   */
  order?: CreateOrderRefundOrder | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
   */
  settlement?: CreateOrderRefundSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: CreateOrderRefundDocumentation | undefined;
};

/**
 * The newly created refund object.
 */
export type CreateOrderRefundResponse = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
   */
  amount?: CreateOrderRefundAmountResponse | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: CreateOrderRefundSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateOrderRefundMetadataResponse
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
   */
  orderId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   *
   * @remarks
   *
   * Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
   */
  status?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: CreateOrderRefundExternalReferenceResponse | undefined;
  /**
   * A refund can optionally be linked to specific order lines.
   *
   * @remarks
   *
   * The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
   */
  lines?: Array<CreateOrderRefundLineOutput> | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CreateOrderRefundLinks | undefined;
};

/** @internal */
export const CreateOrderRefundAmountRequest$inboundSchema: z.ZodType<
  CreateOrderRefundAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundAmountRequest$outboundSchema: z.ZodType<
  CreateOrderRefundAmountRequest$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundAmountRequest$ {
  /** @deprecated use `CreateOrderRefundAmountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundAmountRequest$inboundSchema;
  /** @deprecated use `CreateOrderRefundAmountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundAmountRequest$outboundSchema;
  /** @deprecated use `CreateOrderRefundAmountRequest$Outbound` instead. */
  export type Outbound = CreateOrderRefundAmountRequest$Outbound;
}

export function createOrderRefundAmountRequestToJSON(
  createOrderRefundAmountRequest: CreateOrderRefundAmountRequest,
): string {
  return JSON.stringify(
    CreateOrderRefundAmountRequest$outboundSchema.parse(
      createOrderRefundAmountRequest,
    ),
  );
}

export function createOrderRefundAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundAmountRequest' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundMetadataRequest$inboundSchema: z.ZodType<
  CreateOrderRefundMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateOrderRefundMetadataRequest$Outbound = {};

/** @internal */
export const CreateOrderRefundMetadataRequest$outboundSchema: z.ZodType<
  CreateOrderRefundMetadataRequest$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundMetadataRequest$ {
  /** @deprecated use `CreateOrderRefundMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundMetadataRequest$inboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundMetadataRequest$outboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataRequest$Outbound` instead. */
  export type Outbound = CreateOrderRefundMetadataRequest$Outbound;
}

export function createOrderRefundMetadataRequestToJSON(
  createOrderRefundMetadataRequest: CreateOrderRefundMetadataRequest,
): string {
  return JSON.stringify(
    CreateOrderRefundMetadataRequest$outboundSchema.parse(
      createOrderRefundMetadataRequest,
    ),
  );
}

export function createOrderRefundMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundMetadataRequest' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundMetadataRequestUnion$inboundSchema: z.ZodType<
  CreateOrderRefundMetadataRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateOrderRefundMetadataRequest$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateOrderRefundMetadataRequestUnion$Outbound =
  | CreateOrderRefundMetadataRequest$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateOrderRefundMetadataRequestUnion$outboundSchema: z.ZodType<
  CreateOrderRefundMetadataRequestUnion$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundMetadataRequestUnion
> = z.union([
  z.lazy(() => CreateOrderRefundMetadataRequest$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundMetadataRequestUnion$ {
  /** @deprecated use `CreateOrderRefundMetadataRequestUnion$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundMetadataRequestUnion$inboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataRequestUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundMetadataRequestUnion$outboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataRequestUnion$Outbound` instead. */
  export type Outbound = CreateOrderRefundMetadataRequestUnion$Outbound;
}

export function createOrderRefundMetadataRequestUnionToJSON(
  createOrderRefundMetadataRequestUnion: CreateOrderRefundMetadataRequestUnion,
): string {
  return JSON.stringify(
    CreateOrderRefundMetadataRequestUnion$outboundSchema.parse(
      createOrderRefundMetadataRequestUnion,
    ),
  );
}

export function createOrderRefundMetadataRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundMetadataRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundMetadataRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundMetadataRequestUnion' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundExternalReferenceRequest$inboundSchema: z.ZodType<
  CreateOrderRefundExternalReferenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type CreateOrderRefundExternalReferenceRequest$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const CreateOrderRefundExternalReferenceRequest$outboundSchema:
  z.ZodType<
    CreateOrderRefundExternalReferenceRequest$Outbound,
    z.ZodTypeDef,
    CreateOrderRefundExternalReferenceRequest
  > = z.object({
    type: z.string().optional(),
    id: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundExternalReferenceRequest$ {
  /** @deprecated use `CreateOrderRefundExternalReferenceRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundExternalReferenceRequest$inboundSchema;
  /** @deprecated use `CreateOrderRefundExternalReferenceRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundExternalReferenceRequest$outboundSchema;
  /** @deprecated use `CreateOrderRefundExternalReferenceRequest$Outbound` instead. */
  export type Outbound = CreateOrderRefundExternalReferenceRequest$Outbound;
}

export function createOrderRefundExternalReferenceRequestToJSON(
  createOrderRefundExternalReferenceRequest:
    CreateOrderRefundExternalReferenceRequest,
): string {
  return JSON.stringify(
    CreateOrderRefundExternalReferenceRequest$outboundSchema.parse(
      createOrderRefundExternalReferenceRequest,
    ),
  );
}

export function createOrderRefundExternalReferenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrderRefundExternalReferenceRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundExternalReferenceRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrderRefundExternalReferenceRequest' from JSON`,
  );
}

/** @internal */
export const TypeRequest$inboundSchema: z.ZodNativeEnum<typeof TypeRequest> = z
  .nativeEnum(TypeRequest);

/** @internal */
export const TypeRequest$outboundSchema: z.ZodNativeEnum<typeof TypeRequest> =
  TypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeRequest$ {
  /** @deprecated use `TypeRequest$inboundSchema` instead. */
  export const inboundSchema = TypeRequest$inboundSchema;
  /** @deprecated use `TypeRequest$outboundSchema` instead. */
  export const outboundSchema = TypeRequest$outboundSchema;
}

/** @internal */
export const StatusRequest$inboundSchema: z.ZodNativeEnum<
  typeof StatusRequest
> = z.nativeEnum(StatusRequest);

/** @internal */
export const StatusRequest$outboundSchema: z.ZodNativeEnum<
  typeof StatusRequest
> = StatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequest$ {
  /** @deprecated use `StatusRequest$inboundSchema` instead. */
  export const inboundSchema = StatusRequest$inboundSchema;
  /** @deprecated use `StatusRequest$outboundSchema` instead. */
  export const outboundSchema = StatusRequest$outboundSchema;
}

/** @internal */
export const MetadataLineRequest$inboundSchema: z.ZodType<
  MetadataLineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataLineRequest$Outbound = {};

/** @internal */
export const MetadataLineRequest$outboundSchema: z.ZodType<
  MetadataLineRequest$Outbound,
  z.ZodTypeDef,
  MetadataLineRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataLineRequest$ {
  /** @deprecated use `MetadataLineRequest$inboundSchema` instead. */
  export const inboundSchema = MetadataLineRequest$inboundSchema;
  /** @deprecated use `MetadataLineRequest$outboundSchema` instead. */
  export const outboundSchema = MetadataLineRequest$outboundSchema;
  /** @deprecated use `MetadataLineRequest$Outbound` instead. */
  export type Outbound = MetadataLineRequest$Outbound;
}

export function metadataLineRequestToJSON(
  metadataLineRequest: MetadataLineRequest,
): string {
  return JSON.stringify(
    MetadataLineRequest$outboundSchema.parse(metadataLineRequest),
  );
}

export function metadataLineRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetadataLineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataLineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataLineRequest' from JSON`,
  );
}

/** @internal */
export const LineMetadataRequestUnion$inboundSchema: z.ZodType<
  LineMetadataRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MetadataLineRequest$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type LineMetadataRequestUnion$Outbound =
  | MetadataLineRequest$Outbound
  | string
  | Array<string>;

/** @internal */
export const LineMetadataRequestUnion$outboundSchema: z.ZodType<
  LineMetadataRequestUnion$Outbound,
  z.ZodTypeDef,
  LineMetadataRequestUnion
> = z.union([
  z.lazy(() => MetadataLineRequest$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineMetadataRequestUnion$ {
  /** @deprecated use `LineMetadataRequestUnion$inboundSchema` instead. */
  export const inboundSchema = LineMetadataRequestUnion$inboundSchema;
  /** @deprecated use `LineMetadataRequestUnion$outboundSchema` instead. */
  export const outboundSchema = LineMetadataRequestUnion$outboundSchema;
  /** @deprecated use `LineMetadataRequestUnion$Outbound` instead. */
  export type Outbound = LineMetadataRequestUnion$Outbound;
}

export function lineMetadataRequestUnionToJSON(
  lineMetadataRequestUnion: LineMetadataRequestUnion,
): string {
  return JSON.stringify(
    LineMetadataRequestUnion$outboundSchema.parse(lineMetadataRequestUnion),
  );
}

export function lineMetadataRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<LineMetadataRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineMetadataRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineMetadataRequestUnion' from JSON`,
  );
}

/** @internal */
export const AmountShippedRequest$inboundSchema: z.ZodType<
  AmountShippedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AmountShippedRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AmountShippedRequest$outboundSchema: z.ZodType<
  AmountShippedRequest$Outbound,
  z.ZodTypeDef,
  AmountShippedRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountShippedRequest$ {
  /** @deprecated use `AmountShippedRequest$inboundSchema` instead. */
  export const inboundSchema = AmountShippedRequest$inboundSchema;
  /** @deprecated use `AmountShippedRequest$outboundSchema` instead. */
  export const outboundSchema = AmountShippedRequest$outboundSchema;
  /** @deprecated use `AmountShippedRequest$Outbound` instead. */
  export type Outbound = AmountShippedRequest$Outbound;
}

export function amountShippedRequestToJSON(
  amountShippedRequest: AmountShippedRequest,
): string {
  return JSON.stringify(
    AmountShippedRequest$outboundSchema.parse(amountShippedRequest),
  );
}

export function amountShippedRequestFromJSON(
  jsonString: string,
): SafeParseResult<AmountShippedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AmountShippedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AmountShippedRequest' from JSON`,
  );
}

/** @internal */
export const AmountRefundedRequest$inboundSchema: z.ZodType<
  AmountRefundedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AmountRefundedRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AmountRefundedRequest$outboundSchema: z.ZodType<
  AmountRefundedRequest$Outbound,
  z.ZodTypeDef,
  AmountRefundedRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountRefundedRequest$ {
  /** @deprecated use `AmountRefundedRequest$inboundSchema` instead. */
  export const inboundSchema = AmountRefundedRequest$inboundSchema;
  /** @deprecated use `AmountRefundedRequest$outboundSchema` instead. */
  export const outboundSchema = AmountRefundedRequest$outboundSchema;
  /** @deprecated use `AmountRefundedRequest$Outbound` instead. */
  export type Outbound = AmountRefundedRequest$Outbound;
}

export function amountRefundedRequestToJSON(
  amountRefundedRequest: AmountRefundedRequest,
): string {
  return JSON.stringify(
    AmountRefundedRequest$outboundSchema.parse(amountRefundedRequest),
  );
}

export function amountRefundedRequestFromJSON(
  jsonString: string,
): SafeParseResult<AmountRefundedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AmountRefundedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AmountRefundedRequest' from JSON`,
  );
}

/** @internal */
export const AmountCanceledRequest$inboundSchema: z.ZodType<
  AmountCanceledRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AmountCanceledRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AmountCanceledRequest$outboundSchema: z.ZodType<
  AmountCanceledRequest$Outbound,
  z.ZodTypeDef,
  AmountCanceledRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountCanceledRequest$ {
  /** @deprecated use `AmountCanceledRequest$inboundSchema` instead. */
  export const inboundSchema = AmountCanceledRequest$inboundSchema;
  /** @deprecated use `AmountCanceledRequest$outboundSchema` instead. */
  export const outboundSchema = AmountCanceledRequest$outboundSchema;
  /** @deprecated use `AmountCanceledRequest$Outbound` instead. */
  export type Outbound = AmountCanceledRequest$Outbound;
}

export function amountCanceledRequestToJSON(
  amountCanceledRequest: AmountCanceledRequest,
): string {
  return JSON.stringify(
    AmountCanceledRequest$outboundSchema.parse(amountCanceledRequest),
  );
}

export function amountCanceledRequestFromJSON(
  jsonString: string,
): SafeParseResult<AmountCanceledRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AmountCanceledRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AmountCanceledRequest' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundLineAmount$inboundSchema: z.ZodType<
  CreateOrderRefundLineAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundLineAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundLineAmount$outboundSchema: z.ZodType<
  CreateOrderRefundLineAmount$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundLineAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundLineAmount$ {
  /** @deprecated use `CreateOrderRefundLineAmount$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundLineAmount$inboundSchema;
  /** @deprecated use `CreateOrderRefundLineAmount$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundLineAmount$outboundSchema;
  /** @deprecated use `CreateOrderRefundLineAmount$Outbound` instead. */
  export type Outbound = CreateOrderRefundLineAmount$Outbound;
}

export function createOrderRefundLineAmountToJSON(
  createOrderRefundLineAmount: CreateOrderRefundLineAmount,
): string {
  return JSON.stringify(
    CreateOrderRefundLineAmount$outboundSchema.parse(
      createOrderRefundLineAmount,
    ),
  );
}

export function createOrderRefundLineAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundLineAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundLineAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundLineAmount' from JSON`,
  );
}

/** @internal */
export const LineInput$inboundSchema: z.ZodType<
  LineInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  sku: z.nullable(z.string()).optional(),
  type: TypeRequest$inboundSchema.optional(),
  status: StatusRequest$inboundSchema.optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MetadataLineRequest$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  isCancelable: z.boolean().optional(),
  quantity: z.number().int().optional(),
  quantityShipped: z.number().int().optional(),
  amountShipped: z.lazy(() => AmountShippedRequest$inboundSchema).optional(),
  quantityRefunded: z.number().int().optional(),
  amountRefunded: z.lazy(() => AmountRefundedRequest$inboundSchema).optional(),
  quantityCanceled: z.number().int().optional(),
  amountCanceled: z.lazy(() => AmountCanceledRequest$inboundSchema).optional(),
  amount: z.lazy(() => CreateOrderRefundLineAmount$inboundSchema).optional(),
  shippableQuantity: z.number().int().optional(),
  refundableQuantity: z.number().int().optional(),
  cancelableQuantity: z.number().int().optional(),
  vatRate: z.string().optional(),
  createdAt: z.string().optional(),
});

/** @internal */
export type LineInput$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  sku?: string | null | undefined;
  type?: string | undefined;
  status?: string | undefined;
  metadata?:
    | MetadataLineRequest$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  isCancelable?: boolean | undefined;
  quantity?: number | undefined;
  quantityShipped?: number | undefined;
  amountShipped?: AmountShippedRequest$Outbound | undefined;
  quantityRefunded?: number | undefined;
  amountRefunded?: AmountRefundedRequest$Outbound | undefined;
  quantityCanceled?: number | undefined;
  amountCanceled?: AmountCanceledRequest$Outbound | undefined;
  amount?: CreateOrderRefundLineAmount$Outbound | undefined;
  shippableQuantity?: number | undefined;
  refundableQuantity?: number | undefined;
  cancelableQuantity?: number | undefined;
  vatRate?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const LineInput$outboundSchema: z.ZodType<
  LineInput$Outbound,
  z.ZodTypeDef,
  LineInput
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  sku: z.nullable(z.string()).optional(),
  type: TypeRequest$outboundSchema.optional(),
  status: StatusRequest$outboundSchema.optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MetadataLineRequest$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  isCancelable: z.boolean().optional(),
  quantity: z.number().int().optional(),
  quantityShipped: z.number().int().optional(),
  amountShipped: z.lazy(() => AmountShippedRequest$outboundSchema).optional(),
  quantityRefunded: z.number().int().optional(),
  amountRefunded: z.lazy(() => AmountRefundedRequest$outboundSchema).optional(),
  quantityCanceled: z.number().int().optional(),
  amountCanceled: z.lazy(() => AmountCanceledRequest$outboundSchema).optional(),
  amount: z.lazy(() => CreateOrderRefundLineAmount$outboundSchema).optional(),
  shippableQuantity: z.number().int().optional(),
  refundableQuantity: z.number().int().optional(),
  cancelableQuantity: z.number().int().optional(),
  vatRate: z.string().optional(),
  createdAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineInput$ {
  /** @deprecated use `LineInput$inboundSchema` instead. */
  export const inboundSchema = LineInput$inboundSchema;
  /** @deprecated use `LineInput$outboundSchema` instead. */
  export const outboundSchema = LineInput$outboundSchema;
  /** @deprecated use `LineInput$Outbound` instead. */
  export type Outbound = LineInput$Outbound;
}

export function lineInputToJSON(lineInput: LineInput): string {
  return JSON.stringify(LineInput$outboundSchema.parse(lineInput));
}

export function lineInputFromJSON(
  jsonString: string,
): SafeParseResult<LineInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineInput' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundRequestBody$inboundSchema: z.ZodType<
  CreateOrderRefundRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  amount: z.lazy(() => CreateOrderRefundAmountRequest$inboundSchema).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateOrderRefundMetadataRequest$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  externalReference: z.lazy(() =>
    CreateOrderRefundExternalReferenceRequest$inboundSchema
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  lines: z.array(z.lazy(() => LineInput$inboundSchema)),
});

/** @internal */
export type CreateOrderRefundRequestBody$Outbound = {
  description?: string | undefined;
  amount?: CreateOrderRefundAmountRequest$Outbound | undefined;
  metadata?:
    | CreateOrderRefundMetadataRequest$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  externalReference?:
    | CreateOrderRefundExternalReferenceRequest$Outbound
    | undefined;
  testmode?: boolean | null | undefined;
  lines: Array<LineInput$Outbound>;
};

/** @internal */
export const CreateOrderRefundRequestBody$outboundSchema: z.ZodType<
  CreateOrderRefundRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundRequestBody
> = z.object({
  description: z.string().optional(),
  amount: z.lazy(() => CreateOrderRefundAmountRequest$outboundSchema)
    .optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateOrderRefundMetadataRequest$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  externalReference: z.lazy(() =>
    CreateOrderRefundExternalReferenceRequest$outboundSchema
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  lines: z.array(z.lazy(() => LineInput$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundRequestBody$ {
  /** @deprecated use `CreateOrderRefundRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundRequestBody$inboundSchema;
  /** @deprecated use `CreateOrderRefundRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundRequestBody$outboundSchema;
  /** @deprecated use `CreateOrderRefundRequestBody$Outbound` instead. */
  export type Outbound = CreateOrderRefundRequestBody$Outbound;
}

export function createOrderRefundRequestBodyToJSON(
  createOrderRefundRequestBody: CreateOrderRefundRequestBody,
): string {
  return JSON.stringify(
    CreateOrderRefundRequestBody$outboundSchema.parse(
      createOrderRefundRequestBody,
    ),
  );
}

export function createOrderRefundRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundRequest$inboundSchema: z.ZodType<
  CreateOrderRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  RequestBody: z.lazy(() => CreateOrderRefundRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateOrderRefundRequest$Outbound = {
  orderId: string;
  RequestBody?: CreateOrderRefundRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateOrderRefundRequest$outboundSchema: z.ZodType<
  CreateOrderRefundRequest$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundRequest
> = z.object({
  orderId: z.string(),
  requestBody: z.lazy(() => CreateOrderRefundRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundRequest$ {
  /** @deprecated use `CreateOrderRefundRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundRequest$inboundSchema;
  /** @deprecated use `CreateOrderRefundRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundRequest$outboundSchema;
  /** @deprecated use `CreateOrderRefundRequest$Outbound` instead. */
  export type Outbound = CreateOrderRefundRequest$Outbound;
}

export function createOrderRefundRequestToJSON(
  createOrderRefundRequest: CreateOrderRefundRequest,
): string {
  return JSON.stringify(
    CreateOrderRefundRequest$outboundSchema.parse(createOrderRefundRequest),
  );
}

export function createOrderRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundRequest' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    CreateOrderRefundUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type CreateOrderRefundUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateOrderRefundUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    CreateOrderRefundUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    CreateOrderRefundUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundUnprocessableEntityDocumentation$ {
  /** @deprecated use `CreateOrderRefundUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `CreateOrderRefundUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `CreateOrderRefundUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    CreateOrderRefundUnprocessableEntityDocumentation$Outbound;
}

export function createOrderRefundUnprocessableEntityDocumentationToJSON(
  createOrderRefundUnprocessableEntityDocumentation:
    CreateOrderRefundUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    CreateOrderRefundUnprocessableEntityDocumentation$outboundSchema.parse(
      createOrderRefundUnprocessableEntityDocumentation,
    ),
  );
}

export function createOrderRefundUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrderRefundUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrderRefundUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundUnprocessableEntityLinks$inboundSchema: z.ZodType<
  CreateOrderRefundUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateOrderRefundUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateOrderRefundUnprocessableEntityLinks$Outbound = {
  documentation: CreateOrderRefundUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const CreateOrderRefundUnprocessableEntityLinks$outboundSchema:
  z.ZodType<
    CreateOrderRefundUnprocessableEntityLinks$Outbound,
    z.ZodTypeDef,
    CreateOrderRefundUnprocessableEntityLinks
  > = z.object({
    documentation: z.lazy(() =>
      CreateOrderRefundUnprocessableEntityDocumentation$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundUnprocessableEntityLinks$ {
  /** @deprecated use `CreateOrderRefundUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `CreateOrderRefundUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `CreateOrderRefundUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = CreateOrderRefundUnprocessableEntityLinks$Outbound;
}

export function createOrderRefundUnprocessableEntityLinksToJSON(
  createOrderRefundUnprocessableEntityLinks:
    CreateOrderRefundUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    CreateOrderRefundUnprocessableEntityLinks$outboundSchema.parse(
      createOrderRefundUnprocessableEntityLinks,
    ),
  );
}

export function createOrderRefundUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrderRefundUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrderRefundUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundNotFoundDocumentation$inboundSchema: z.ZodType<
  CreateOrderRefundNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateOrderRefundNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateOrderRefundNotFoundDocumentation$outboundSchema: z.ZodType<
  CreateOrderRefundNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundNotFoundDocumentation$ {
  /** @deprecated use `CreateOrderRefundNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CreateOrderRefundNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CreateOrderRefundNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CreateOrderRefundNotFoundDocumentation$Outbound;
}

export function createOrderRefundNotFoundDocumentationToJSON(
  createOrderRefundNotFoundDocumentation:
    CreateOrderRefundNotFoundDocumentation,
): string {
  return JSON.stringify(
    CreateOrderRefundNotFoundDocumentation$outboundSchema.parse(
      createOrderRefundNotFoundDocumentation,
    ),
  );
}

export function createOrderRefundNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundNotFoundLinks$inboundSchema: z.ZodType<
  CreateOrderRefundNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateOrderRefundNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateOrderRefundNotFoundLinks$Outbound = {
  documentation: CreateOrderRefundNotFoundDocumentation$Outbound;
};

/** @internal */
export const CreateOrderRefundNotFoundLinks$outboundSchema: z.ZodType<
  CreateOrderRefundNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateOrderRefundNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundNotFoundLinks$ {
  /** @deprecated use `CreateOrderRefundNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundNotFoundLinks$inboundSchema;
  /** @deprecated use `CreateOrderRefundNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundNotFoundLinks$outboundSchema;
  /** @deprecated use `CreateOrderRefundNotFoundLinks$Outbound` instead. */
  export type Outbound = CreateOrderRefundNotFoundLinks$Outbound;
}

export function createOrderRefundNotFoundLinksToJSON(
  createOrderRefundNotFoundLinks: CreateOrderRefundNotFoundLinks,
): string {
  return JSON.stringify(
    CreateOrderRefundNotFoundLinks$outboundSchema.parse(
      createOrderRefundNotFoundLinks,
    ),
  );
}

export function createOrderRefundNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundAmountResponse$inboundSchema: z.ZodType<
  CreateOrderRefundAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundAmountResponse$outboundSchema: z.ZodType<
  CreateOrderRefundAmountResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundAmountResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundAmountResponse$ {
  /** @deprecated use `CreateOrderRefundAmountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundAmountResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundAmountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundAmountResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundAmountResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundAmountResponse$Outbound;
}

export function createOrderRefundAmountResponseToJSON(
  createOrderRefundAmountResponse: CreateOrderRefundAmountResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundAmountResponse$outboundSchema.parse(
      createOrderRefundAmountResponse,
    ),
  );
}

export function createOrderRefundAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundAmountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundAmountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundAmountResponse' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundSettlementAmount$inboundSchema: z.ZodType<
  CreateOrderRefundSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundSettlementAmount$outboundSchema: z.ZodType<
  CreateOrderRefundSettlementAmount$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundSettlementAmount$ {
  /** @deprecated use `CreateOrderRefundSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundSettlementAmount$inboundSchema;
  /** @deprecated use `CreateOrderRefundSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundSettlementAmount$outboundSchema;
  /** @deprecated use `CreateOrderRefundSettlementAmount$Outbound` instead. */
  export type Outbound = CreateOrderRefundSettlementAmount$Outbound;
}

export function createOrderRefundSettlementAmountToJSON(
  createOrderRefundSettlementAmount: CreateOrderRefundSettlementAmount,
): string {
  return JSON.stringify(
    CreateOrderRefundSettlementAmount$outboundSchema.parse(
      createOrderRefundSettlementAmount,
    ),
  );
}

export function createOrderRefundSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundSettlementAmount' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundMetadataResponse$inboundSchema: z.ZodType<
  CreateOrderRefundMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateOrderRefundMetadataResponse$Outbound = {};

/** @internal */
export const CreateOrderRefundMetadataResponse$outboundSchema: z.ZodType<
  CreateOrderRefundMetadataResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundMetadataResponse$ {
  /** @deprecated use `CreateOrderRefundMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundMetadataResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundMetadataResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundMetadataResponse$Outbound;
}

export function createOrderRefundMetadataResponseToJSON(
  createOrderRefundMetadataResponse: CreateOrderRefundMetadataResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundMetadataResponse$outboundSchema.parse(
      createOrderRefundMetadataResponse,
    ),
  );
}

export function createOrderRefundMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundMetadataResponse' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundMetadataResponseUnion$inboundSchema: z.ZodType<
  CreateOrderRefundMetadataResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateOrderRefundMetadataResponse$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateOrderRefundMetadataResponseUnion$Outbound =
  | CreateOrderRefundMetadataResponse$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateOrderRefundMetadataResponseUnion$outboundSchema: z.ZodType<
  CreateOrderRefundMetadataResponseUnion$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundMetadataResponseUnion
> = z.union([
  z.lazy(() => CreateOrderRefundMetadataResponse$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundMetadataResponseUnion$ {
  /** @deprecated use `CreateOrderRefundMetadataResponseUnion$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundMetadataResponseUnion$inboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundMetadataResponseUnion$outboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataResponseUnion$Outbound` instead. */
  export type Outbound = CreateOrderRefundMetadataResponseUnion$Outbound;
}

export function createOrderRefundMetadataResponseUnionToJSON(
  createOrderRefundMetadataResponseUnion:
    CreateOrderRefundMetadataResponseUnion,
): string {
  return JSON.stringify(
    CreateOrderRefundMetadataResponseUnion$outboundSchema.parse(
      createOrderRefundMetadataResponseUnion,
    ),
  );
}

export function createOrderRefundMetadataResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundMetadataResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundMetadataResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundMetadataResponseUnion' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundExternalReferenceResponse$inboundSchema:
  z.ZodType<CreateOrderRefundExternalReferenceResponse, z.ZodTypeDef, unknown> =
    z.object({
      type: z.string().optional(),
      id: z.string().optional(),
    });

/** @internal */
export type CreateOrderRefundExternalReferenceResponse$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const CreateOrderRefundExternalReferenceResponse$outboundSchema:
  z.ZodType<
    CreateOrderRefundExternalReferenceResponse$Outbound,
    z.ZodTypeDef,
    CreateOrderRefundExternalReferenceResponse
  > = z.object({
    type: z.string().optional(),
    id: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundExternalReferenceResponse$ {
  /** @deprecated use `CreateOrderRefundExternalReferenceResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundExternalReferenceResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundExternalReferenceResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundExternalReferenceResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundExternalReferenceResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundExternalReferenceResponse$Outbound;
}

export function createOrderRefundExternalReferenceResponseToJSON(
  createOrderRefundExternalReferenceResponse:
    CreateOrderRefundExternalReferenceResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundExternalReferenceResponse$outboundSchema.parse(
      createOrderRefundExternalReferenceResponse,
    ),
  );
}

export function createOrderRefundExternalReferenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrderRefundExternalReferenceResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundExternalReferenceResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrderRefundExternalReferenceResponse' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateOrderRefundTypeResponse
> = z.nativeEnum(CreateOrderRefundTypeResponse);

/** @internal */
export const CreateOrderRefundTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateOrderRefundTypeResponse
> = CreateOrderRefundTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundTypeResponse$ {
  /** @deprecated use `CreateOrderRefundTypeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundTypeResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundTypeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundTypeResponse$outboundSchema;
}

/** @internal */
export const CreateOrderRefundStatusResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateOrderRefundStatusResponse
> = z.nativeEnum(CreateOrderRefundStatusResponse);

/** @internal */
export const CreateOrderRefundStatusResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateOrderRefundStatusResponse
> = CreateOrderRefundStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundStatusResponse$ {
  /** @deprecated use `CreateOrderRefundStatusResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundStatusResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundStatusResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundStatusResponse$outboundSchema;
}

/** @internal */
export const CreateOrderRefundMetadataLineResponse$inboundSchema: z.ZodType<
  CreateOrderRefundMetadataLineResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateOrderRefundMetadataLineResponse$Outbound = {};

/** @internal */
export const CreateOrderRefundMetadataLineResponse$outboundSchema: z.ZodType<
  CreateOrderRefundMetadataLineResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundMetadataLineResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundMetadataLineResponse$ {
  /** @deprecated use `CreateOrderRefundMetadataLineResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundMetadataLineResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataLineResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundMetadataLineResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundMetadataLineResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundMetadataLineResponse$Outbound;
}

export function createOrderRefundMetadataLineResponseToJSON(
  createOrderRefundMetadataLineResponse: CreateOrderRefundMetadataLineResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundMetadataLineResponse$outboundSchema.parse(
      createOrderRefundMetadataLineResponse,
    ),
  );
}

export function createOrderRefundMetadataLineResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundMetadataLineResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundMetadataLineResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundMetadataLineResponse' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundLineMetadataResponseUnion$inboundSchema:
  z.ZodType<CreateOrderRefundLineMetadataResponseUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => CreateOrderRefundMetadataLineResponse$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]);

/** @internal */
export type CreateOrderRefundLineMetadataResponseUnion$Outbound =
  | CreateOrderRefundMetadataLineResponse$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateOrderRefundLineMetadataResponseUnion$outboundSchema:
  z.ZodType<
    CreateOrderRefundLineMetadataResponseUnion$Outbound,
    z.ZodTypeDef,
    CreateOrderRefundLineMetadataResponseUnion
  > = z.union([
    z.lazy(() => CreateOrderRefundMetadataLineResponse$outboundSchema),
    z.string(),
    z.array(z.string()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundLineMetadataResponseUnion$ {
  /** @deprecated use `CreateOrderRefundLineMetadataResponseUnion$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundLineMetadataResponseUnion$inboundSchema;
  /** @deprecated use `CreateOrderRefundLineMetadataResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundLineMetadataResponseUnion$outboundSchema;
  /** @deprecated use `CreateOrderRefundLineMetadataResponseUnion$Outbound` instead. */
  export type Outbound = CreateOrderRefundLineMetadataResponseUnion$Outbound;
}

export function createOrderRefundLineMetadataResponseUnionToJSON(
  createOrderRefundLineMetadataResponseUnion:
    CreateOrderRefundLineMetadataResponseUnion,
): string {
  return JSON.stringify(
    CreateOrderRefundLineMetadataResponseUnion$outboundSchema.parse(
      createOrderRefundLineMetadataResponseUnion,
    ),
  );
}

export function createOrderRefundLineMetadataResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrderRefundLineMetadataResponseUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundLineMetadataResponseUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrderRefundLineMetadataResponseUnion' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundAmountShippedResponse$inboundSchema: z.ZodType<
  CreateOrderRefundAmountShippedResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundAmountShippedResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundAmountShippedResponse$outboundSchema: z.ZodType<
  CreateOrderRefundAmountShippedResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundAmountShippedResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundAmountShippedResponse$ {
  /** @deprecated use `CreateOrderRefundAmountShippedResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundAmountShippedResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundAmountShippedResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundAmountShippedResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundAmountShippedResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundAmountShippedResponse$Outbound;
}

export function createOrderRefundAmountShippedResponseToJSON(
  createOrderRefundAmountShippedResponse:
    CreateOrderRefundAmountShippedResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundAmountShippedResponse$outboundSchema.parse(
      createOrderRefundAmountShippedResponse,
    ),
  );
}

export function createOrderRefundAmountShippedResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundAmountShippedResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundAmountShippedResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundAmountShippedResponse' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundAmountRefundedResponse$inboundSchema: z.ZodType<
  CreateOrderRefundAmountRefundedResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundAmountRefundedResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundAmountRefundedResponse$outboundSchema: z.ZodType<
  CreateOrderRefundAmountRefundedResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundAmountRefundedResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundAmountRefundedResponse$ {
  /** @deprecated use `CreateOrderRefundAmountRefundedResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundAmountRefundedResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundAmountRefundedResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundAmountRefundedResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundAmountRefundedResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundAmountRefundedResponse$Outbound;
}

export function createOrderRefundAmountRefundedResponseToJSON(
  createOrderRefundAmountRefundedResponse:
    CreateOrderRefundAmountRefundedResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundAmountRefundedResponse$outboundSchema.parse(
      createOrderRefundAmountRefundedResponse,
    ),
  );
}

export function createOrderRefundAmountRefundedResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrderRefundAmountRefundedResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundAmountRefundedResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrderRefundAmountRefundedResponse' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundAmountCanceledResponse$inboundSchema: z.ZodType<
  CreateOrderRefundAmountCanceledResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundAmountCanceledResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundAmountCanceledResponse$outboundSchema: z.ZodType<
  CreateOrderRefundAmountCanceledResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundAmountCanceledResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundAmountCanceledResponse$ {
  /** @deprecated use `CreateOrderRefundAmountCanceledResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrderRefundAmountCanceledResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundAmountCanceledResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundAmountCanceledResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundAmountCanceledResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundAmountCanceledResponse$Outbound;
}

export function createOrderRefundAmountCanceledResponseToJSON(
  createOrderRefundAmountCanceledResponse:
    CreateOrderRefundAmountCanceledResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundAmountCanceledResponse$outboundSchema.parse(
      createOrderRefundAmountCanceledResponse,
    ),
  );
}

export function createOrderRefundAmountCanceledResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateOrderRefundAmountCanceledResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrderRefundAmountCanceledResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateOrderRefundAmountCanceledResponse' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundUnitPrice$inboundSchema: z.ZodType<
  CreateOrderRefundUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundUnitPrice$outboundSchema: z.ZodType<
  CreateOrderRefundUnitPrice$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundUnitPrice$ {
  /** @deprecated use `CreateOrderRefundUnitPrice$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundUnitPrice$inboundSchema;
  /** @deprecated use `CreateOrderRefundUnitPrice$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundUnitPrice$outboundSchema;
  /** @deprecated use `CreateOrderRefundUnitPrice$Outbound` instead. */
  export type Outbound = CreateOrderRefundUnitPrice$Outbound;
}

export function createOrderRefundUnitPriceToJSON(
  createOrderRefundUnitPrice: CreateOrderRefundUnitPrice,
): string {
  return JSON.stringify(
    CreateOrderRefundUnitPrice$outboundSchema.parse(createOrderRefundUnitPrice),
  );
}

export function createOrderRefundUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundUnitPrice' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundTotalAmount$inboundSchema: z.ZodType<
  CreateOrderRefundTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundTotalAmount$outboundSchema: z.ZodType<
  CreateOrderRefundTotalAmount$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundTotalAmount$ {
  /** @deprecated use `CreateOrderRefundTotalAmount$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundTotalAmount$inboundSchema;
  /** @deprecated use `CreateOrderRefundTotalAmount$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundTotalAmount$outboundSchema;
  /** @deprecated use `CreateOrderRefundTotalAmount$Outbound` instead. */
  export type Outbound = CreateOrderRefundTotalAmount$Outbound;
}

export function createOrderRefundTotalAmountToJSON(
  createOrderRefundTotalAmount: CreateOrderRefundTotalAmount,
): string {
  return JSON.stringify(
    CreateOrderRefundTotalAmount$outboundSchema.parse(
      createOrderRefundTotalAmount,
    ),
  );
}

export function createOrderRefundTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundTotalAmount' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundVatAmount$inboundSchema: z.ZodType<
  CreateOrderRefundVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundVatAmount$outboundSchema: z.ZodType<
  CreateOrderRefundVatAmount$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundVatAmount$ {
  /** @deprecated use `CreateOrderRefundVatAmount$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundVatAmount$inboundSchema;
  /** @deprecated use `CreateOrderRefundVatAmount$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundVatAmount$outboundSchema;
  /** @deprecated use `CreateOrderRefundVatAmount$Outbound` instead. */
  export type Outbound = CreateOrderRefundVatAmount$Outbound;
}

export function createOrderRefundVatAmountToJSON(
  createOrderRefundVatAmount: CreateOrderRefundVatAmount,
): string {
  return JSON.stringify(
    CreateOrderRefundVatAmount$outboundSchema.parse(createOrderRefundVatAmount),
  );
}

export function createOrderRefundVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundVatAmount' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundDiscountedAmount$inboundSchema: z.ZodType<
  CreateOrderRefundDiscountedAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateOrderRefundDiscountedAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateOrderRefundDiscountedAmount$outboundSchema: z.ZodType<
  CreateOrderRefundDiscountedAmount$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundDiscountedAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundDiscountedAmount$ {
  /** @deprecated use `CreateOrderRefundDiscountedAmount$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundDiscountedAmount$inboundSchema;
  /** @deprecated use `CreateOrderRefundDiscountedAmount$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrderRefundDiscountedAmount$outboundSchema;
  /** @deprecated use `CreateOrderRefundDiscountedAmount$Outbound` instead. */
  export type Outbound = CreateOrderRefundDiscountedAmount$Outbound;
}

export function createOrderRefundDiscountedAmountToJSON(
  createOrderRefundDiscountedAmount: CreateOrderRefundDiscountedAmount,
): string {
  return JSON.stringify(
    CreateOrderRefundDiscountedAmount$outboundSchema.parse(
      createOrderRefundDiscountedAmount,
    ),
  );
}

export function createOrderRefundDiscountedAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundDiscountedAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundDiscountedAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundDiscountedAmount' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundLineOutput$inboundSchema: z.ZodType<
  CreateOrderRefundLineOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("orderline"),
  id: z.string().optional(),
  orderId: z.string().optional(),
  name: z.string().optional(),
  sku: z.nullable(z.string()).optional(),
  type: CreateOrderRefundTypeResponse$inboundSchema.optional(),
  status: CreateOrderRefundStatusResponse$inboundSchema.optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateOrderRefundMetadataLineResponse$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  isCancelable: z.boolean().optional(),
  quantity: z.number().int().optional(),
  quantityShipped: z.number().int().optional(),
  amountShipped: z.lazy(() =>
    CreateOrderRefundAmountShippedResponse$inboundSchema
  ).optional(),
  quantityRefunded: z.number().int().optional(),
  amountRefunded: z.lazy(() =>
    CreateOrderRefundAmountRefundedResponse$inboundSchema
  ).optional(),
  quantityCanceled: z.number().int().optional(),
  amountCanceled: z.lazy(() =>
    CreateOrderRefundAmountCanceledResponse$inboundSchema
  ).optional(),
  shippableQuantity: z.number().int().optional(),
  refundableQuantity: z.number().int().optional(),
  cancelableQuantity: z.number().int().optional(),
  unitPrice: z.lazy(() => CreateOrderRefundUnitPrice$inboundSchema).optional(),
  totalAmount: z.lazy(() => CreateOrderRefundTotalAmount$inboundSchema)
    .optional(),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => CreateOrderRefundVatAmount$inboundSchema).optional(),
  createdAt: z.string().optional(),
  discountedAmount: z.lazy(() =>
    CreateOrderRefundDiscountedAmount$inboundSchema
  ).optional(),
});

/** @internal */
export type CreateOrderRefundLineOutput$Outbound = {
  resource: string;
  id?: string | undefined;
  orderId?: string | undefined;
  name?: string | undefined;
  sku?: string | null | undefined;
  type?: string | undefined;
  status?: string | undefined;
  metadata?:
    | CreateOrderRefundMetadataLineResponse$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  isCancelable?: boolean | undefined;
  quantity?: number | undefined;
  quantityShipped?: number | undefined;
  amountShipped?: CreateOrderRefundAmountShippedResponse$Outbound | undefined;
  quantityRefunded?: number | undefined;
  amountRefunded?: CreateOrderRefundAmountRefundedResponse$Outbound | undefined;
  quantityCanceled?: number | undefined;
  amountCanceled?: CreateOrderRefundAmountCanceledResponse$Outbound | undefined;
  shippableQuantity?: number | undefined;
  refundableQuantity?: number | undefined;
  cancelableQuantity?: number | undefined;
  unitPrice?: CreateOrderRefundUnitPrice$Outbound | undefined;
  totalAmount?: CreateOrderRefundTotalAmount$Outbound | undefined;
  vatRate?: string | undefined;
  vatAmount?: CreateOrderRefundVatAmount$Outbound | undefined;
  createdAt?: string | undefined;
  discountedAmount?: CreateOrderRefundDiscountedAmount$Outbound | undefined;
};

/** @internal */
export const CreateOrderRefundLineOutput$outboundSchema: z.ZodType<
  CreateOrderRefundLineOutput$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundLineOutput
> = z.object({
  resource: z.string().default("orderline"),
  id: z.string().optional(),
  orderId: z.string().optional(),
  name: z.string().optional(),
  sku: z.nullable(z.string()).optional(),
  type: CreateOrderRefundTypeResponse$outboundSchema.optional(),
  status: CreateOrderRefundStatusResponse$outboundSchema.optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateOrderRefundMetadataLineResponse$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  isCancelable: z.boolean().optional(),
  quantity: z.number().int().optional(),
  quantityShipped: z.number().int().optional(),
  amountShipped: z.lazy(() =>
    CreateOrderRefundAmountShippedResponse$outboundSchema
  ).optional(),
  quantityRefunded: z.number().int().optional(),
  amountRefunded: z.lazy(() =>
    CreateOrderRefundAmountRefundedResponse$outboundSchema
  ).optional(),
  quantityCanceled: z.number().int().optional(),
  amountCanceled: z.lazy(() =>
    CreateOrderRefundAmountCanceledResponse$outboundSchema
  ).optional(),
  shippableQuantity: z.number().int().optional(),
  refundableQuantity: z.number().int().optional(),
  cancelableQuantity: z.number().int().optional(),
  unitPrice: z.lazy(() => CreateOrderRefundUnitPrice$outboundSchema).optional(),
  totalAmount: z.lazy(() => CreateOrderRefundTotalAmount$outboundSchema)
    .optional(),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => CreateOrderRefundVatAmount$outboundSchema).optional(),
  createdAt: z.string().optional(),
  discountedAmount: z.lazy(() =>
    CreateOrderRefundDiscountedAmount$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundLineOutput$ {
  /** @deprecated use `CreateOrderRefundLineOutput$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundLineOutput$inboundSchema;
  /** @deprecated use `CreateOrderRefundLineOutput$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundLineOutput$outboundSchema;
  /** @deprecated use `CreateOrderRefundLineOutput$Outbound` instead. */
  export type Outbound = CreateOrderRefundLineOutput$Outbound;
}

export function createOrderRefundLineOutputToJSON(
  createOrderRefundLineOutput: CreateOrderRefundLineOutput,
): string {
  return JSON.stringify(
    CreateOrderRefundLineOutput$outboundSchema.parse(
      createOrderRefundLineOutput,
    ),
  );
}

export function createOrderRefundLineOutputFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundLineOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundLineOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundLineOutput' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundSelf$inboundSchema: z.ZodType<
  CreateOrderRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateOrderRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateOrderRefundSelf$outboundSchema: z.ZodType<
  CreateOrderRefundSelf$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundSelf$ {
  /** @deprecated use `CreateOrderRefundSelf$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundSelf$inboundSchema;
  /** @deprecated use `CreateOrderRefundSelf$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundSelf$outboundSchema;
  /** @deprecated use `CreateOrderRefundSelf$Outbound` instead. */
  export type Outbound = CreateOrderRefundSelf$Outbound;
}

export function createOrderRefundSelfToJSON(
  createOrderRefundSelf: CreateOrderRefundSelf,
): string {
  return JSON.stringify(
    CreateOrderRefundSelf$outboundSchema.parse(createOrderRefundSelf),
  );
}

export function createOrderRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundSelf' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundOrder$inboundSchema: z.ZodType<
  CreateOrderRefundOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateOrderRefundOrder$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateOrderRefundOrder$outboundSchema: z.ZodType<
  CreateOrderRefundOrder$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundOrder
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundOrder$ {
  /** @deprecated use `CreateOrderRefundOrder$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundOrder$inboundSchema;
  /** @deprecated use `CreateOrderRefundOrder$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundOrder$outboundSchema;
  /** @deprecated use `CreateOrderRefundOrder$Outbound` instead. */
  export type Outbound = CreateOrderRefundOrder$Outbound;
}

export function createOrderRefundOrderToJSON(
  createOrderRefundOrder: CreateOrderRefundOrder,
): string {
  return JSON.stringify(
    CreateOrderRefundOrder$outboundSchema.parse(createOrderRefundOrder),
  );
}

export function createOrderRefundOrderFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundOrder' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundSettlement$inboundSchema: z.ZodType<
  CreateOrderRefundSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type CreateOrderRefundSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CreateOrderRefundSettlement$outboundSchema: z.ZodType<
  CreateOrderRefundSettlement$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundSettlement$ {
  /** @deprecated use `CreateOrderRefundSettlement$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundSettlement$inboundSchema;
  /** @deprecated use `CreateOrderRefundSettlement$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundSettlement$outboundSchema;
  /** @deprecated use `CreateOrderRefundSettlement$Outbound` instead. */
  export type Outbound = CreateOrderRefundSettlement$Outbound;
}

export function createOrderRefundSettlementToJSON(
  createOrderRefundSettlement: CreateOrderRefundSettlement,
): string {
  return JSON.stringify(
    CreateOrderRefundSettlement$outboundSchema.parse(
      createOrderRefundSettlement,
    ),
  );
}

export function createOrderRefundSettlementFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundSettlement' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundDocumentation$inboundSchema: z.ZodType<
  CreateOrderRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateOrderRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateOrderRefundDocumentation$outboundSchema: z.ZodType<
  CreateOrderRefundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundDocumentation$ {
  /** @deprecated use `CreateOrderRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundDocumentation$inboundSchema;
  /** @deprecated use `CreateOrderRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundDocumentation$outboundSchema;
  /** @deprecated use `CreateOrderRefundDocumentation$Outbound` instead. */
  export type Outbound = CreateOrderRefundDocumentation$Outbound;
}

export function createOrderRefundDocumentationToJSON(
  createOrderRefundDocumentation: CreateOrderRefundDocumentation,
): string {
  return JSON.stringify(
    CreateOrderRefundDocumentation$outboundSchema.parse(
      createOrderRefundDocumentation,
    ),
  );
}

export function createOrderRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundLinks$inboundSchema: z.ZodType<
  CreateOrderRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CreateOrderRefundSelf$inboundSchema).optional(),
  order: z.lazy(() => CreateOrderRefundOrder$inboundSchema).optional(),
  settlement: z.nullable(
    z.lazy(() => CreateOrderRefundSettlement$inboundSchema),
  ).optional(),
  documentation: z.lazy(() => CreateOrderRefundDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateOrderRefundLinks$Outbound = {
  self?: CreateOrderRefundSelf$Outbound | undefined;
  order?: CreateOrderRefundOrder$Outbound | undefined;
  settlement?: CreateOrderRefundSettlement$Outbound | null | undefined;
  documentation?: CreateOrderRefundDocumentation$Outbound | undefined;
};

/** @internal */
export const CreateOrderRefundLinks$outboundSchema: z.ZodType<
  CreateOrderRefundLinks$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundLinks
> = z.object({
  self: z.lazy(() => CreateOrderRefundSelf$outboundSchema).optional(),
  order: z.lazy(() => CreateOrderRefundOrder$outboundSchema).optional(),
  settlement: z.nullable(
    z.lazy(() => CreateOrderRefundSettlement$outboundSchema),
  ).optional(),
  documentation: z.lazy(() => CreateOrderRefundDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundLinks$ {
  /** @deprecated use `CreateOrderRefundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundLinks$inboundSchema;
  /** @deprecated use `CreateOrderRefundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundLinks$outboundSchema;
  /** @deprecated use `CreateOrderRefundLinks$Outbound` instead. */
  export type Outbound = CreateOrderRefundLinks$Outbound;
}

export function createOrderRefundLinksToJSON(
  createOrderRefundLinks: CreateOrderRefundLinks,
): string {
  return JSON.stringify(
    CreateOrderRefundLinks$outboundSchema.parse(createOrderRefundLinks),
  );
}

export function createOrderRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundLinks' from JSON`,
  );
}

/** @internal */
export const CreateOrderRefundResponse$inboundSchema: z.ZodType<
  CreateOrderRefundResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => CreateOrderRefundAmountResponse$inboundSchema)
    .optional(),
  settlementAmount: z.nullable(
    z.lazy(() => CreateOrderRefundSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateOrderRefundMetadataResponse$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  orderId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    CreateOrderRefundExternalReferenceResponse$inboundSchema
  ).optional(),
  lines: z.array(z.lazy(() => CreateOrderRefundLineOutput$inboundSchema))
    .optional(),
  _links: z.lazy(() => CreateOrderRefundLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateOrderRefundResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: CreateOrderRefundAmountResponse$Outbound | undefined;
  settlementAmount?:
    | CreateOrderRefundSettlementAmount$Outbound
    | null
    | undefined;
  metadata?:
    | CreateOrderRefundMetadataResponse$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  orderId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?:
    | CreateOrderRefundExternalReferenceResponse$Outbound
    | undefined;
  lines?: Array<CreateOrderRefundLineOutput$Outbound> | undefined;
  _links?: CreateOrderRefundLinks$Outbound | undefined;
};

/** @internal */
export const CreateOrderRefundResponse$outboundSchema: z.ZodType<
  CreateOrderRefundResponse$Outbound,
  z.ZodTypeDef,
  CreateOrderRefundResponse
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => CreateOrderRefundAmountResponse$outboundSchema)
    .optional(),
  settlementAmount: z.nullable(
    z.lazy(() => CreateOrderRefundSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateOrderRefundMetadataResponse$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  orderId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    CreateOrderRefundExternalReferenceResponse$outboundSchema
  ).optional(),
  lines: z.array(z.lazy(() => CreateOrderRefundLineOutput$outboundSchema))
    .optional(),
  links: z.lazy(() => CreateOrderRefundLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrderRefundResponse$ {
  /** @deprecated use `CreateOrderRefundResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrderRefundResponse$inboundSchema;
  /** @deprecated use `CreateOrderRefundResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrderRefundResponse$outboundSchema;
  /** @deprecated use `CreateOrderRefundResponse$Outbound` instead. */
  export type Outbound = CreateOrderRefundResponse$Outbound;
}

export function createOrderRefundResponseToJSON(
  createOrderRefundResponse: CreateOrderRefundResponse,
): string {
  return JSON.stringify(
    CreateOrderRefundResponse$outboundSchema.parse(createOrderRefundResponse),
  );
}

export function createOrderRefundResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrderRefundResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrderRefundResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrderRefundResponse' from JSON`,
  );
}
