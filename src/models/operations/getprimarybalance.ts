/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPrimaryBalanceRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const GetPrimaryBalanceRequest$inboundSchema: z.ZodType<
  GetPrimaryBalanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetPrimaryBalanceRequest$Outbound = {
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetPrimaryBalanceRequest$outboundSchema: z.ZodType<
  GetPrimaryBalanceRequest$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceRequest
> = z.object({
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceRequest$ {
  /** @deprecated use `GetPrimaryBalanceRequest$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceRequest$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceRequest$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalanceRequest$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceRequest$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceRequest$Outbound;
}

export function getPrimaryBalanceRequestToJSON(
  getPrimaryBalanceRequest: GetPrimaryBalanceRequest,
): string {
  return JSON.stringify(
    GetPrimaryBalanceRequest$outboundSchema.parse(getPrimaryBalanceRequest),
  );
}

export function getPrimaryBalanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPrimaryBalanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceRequest' from JSON`,
  );
}
