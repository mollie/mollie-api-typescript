/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The balance's ISO 4217 currency code.
 */
export const GetPrimaryBalanceCurrency = {
  Eur: "EUR",
  Gbp: "GBP",
  Chf: "CHF",
  Dkk: "DKK",
  Nok: "NOK",
  Pln: "PLN",
  Sek: "SEK",
  Usd: "USD",
  Czk: "CZK",
  Huf: "HUF",
  Aud: "AUD",
  Cad: "CAD",
} as const;
/**
 * The balance's ISO 4217 currency code.
 */
export type GetPrimaryBalanceCurrency = ClosedEnum<
  typeof GetPrimaryBalanceCurrency
>;

/**
 * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
 */
export type GetPrimaryBalanceTransferThreshold = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
 */
export type GetPrimaryBalanceTransferDestination = {
  /**
   * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
   *
   * @remarks
   *
   * * `bank-account` â€” Transfer the balance amount to an external bank account
   *
   * Possible values: `bank-account`
   */
  type?: string | undefined;
  /**
   * The configured bank account number of the beneficiary the balance amount is to be transferred to.
   */
  bankAccount?: string | undefined;
  /**
   * The full name of the beneficiary the balance amount is to be transferred to.
   */
  beneficiaryName?: string | undefined;
};

/**
 * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
 */
export type GetPrimaryBalanceAvailableAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
 */
export type GetPrimaryBalancePendingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPrimaryBalanceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPrimaryBalanceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetPrimaryBalanceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetPrimaryBalanceSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetPrimaryBalanceDocumentation | undefined;
};

/**
 * The primary balance object.
 */
export type GetPrimaryBalanceResponse = {
  /**
   * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this balance.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The balance's ISO 4217 currency code.
   */
  currency?: GetPrimaryBalanceCurrency | undefined;
  /**
   * The description or name of the balance. Can be used to denote the purpose of the balance.
   */
  description?: string | undefined;
  /**
   * The status of the balance.
   *
   * @remarks
   *
   * Possible values: `active` `inactive`
   */
  status?: string | undefined;
  /**
   * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
   *
   * @remarks
   *
   * Settlements created during weekends or on bank holidays will take place on the next business day.
   *
   * Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
   */
  transferFrequency?: string | undefined;
  /**
   * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
   */
  transferThreshold?: GetPrimaryBalanceTransferThreshold | undefined;
  /**
   * The transfer reference set to be included in all the transfers for this balance.
   */
  transferReference?: string | null | undefined;
  /**
   * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
   */
  transferDestination?: GetPrimaryBalanceTransferDestination | null | undefined;
  /**
   * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
   */
  availableAmount?: GetPrimaryBalanceAvailableAmount | undefined;
  /**
   * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
   */
  pendingAmount?: GetPrimaryBalancePendingAmount | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetPrimaryBalanceLinks | undefined;
};

/** @internal */
export const GetPrimaryBalanceCurrency$inboundSchema: z.ZodNativeEnum<
  typeof GetPrimaryBalanceCurrency
> = z.nativeEnum(GetPrimaryBalanceCurrency);

/** @internal */
export const GetPrimaryBalanceCurrency$outboundSchema: z.ZodNativeEnum<
  typeof GetPrimaryBalanceCurrency
> = GetPrimaryBalanceCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceCurrency$ {
  /** @deprecated use `GetPrimaryBalanceCurrency$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceCurrency$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceCurrency$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalanceCurrency$outboundSchema;
}

/** @internal */
export const GetPrimaryBalanceTransferThreshold$inboundSchema: z.ZodType<
  GetPrimaryBalanceTransferThreshold,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPrimaryBalanceTransferThreshold$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPrimaryBalanceTransferThreshold$outboundSchema: z.ZodType<
  GetPrimaryBalanceTransferThreshold$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceTransferThreshold
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceTransferThreshold$ {
  /** @deprecated use `GetPrimaryBalanceTransferThreshold$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceTransferThreshold$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceTransferThreshold$outboundSchema` instead. */
  export const outboundSchema =
    GetPrimaryBalanceTransferThreshold$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceTransferThreshold$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceTransferThreshold$Outbound;
}

export function getPrimaryBalanceTransferThresholdToJSON(
  getPrimaryBalanceTransferThreshold: GetPrimaryBalanceTransferThreshold,
): string {
  return JSON.stringify(
    GetPrimaryBalanceTransferThreshold$outboundSchema.parse(
      getPrimaryBalanceTransferThreshold,
    ),
  );
}

export function getPrimaryBalanceTransferThresholdFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceTransferThreshold, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPrimaryBalanceTransferThreshold$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceTransferThreshold' from JSON`,
  );
}

/** @internal */
export const GetPrimaryBalanceTransferDestination$inboundSchema: z.ZodType<
  GetPrimaryBalanceTransferDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/** @internal */
export type GetPrimaryBalanceTransferDestination$Outbound = {
  type?: string | undefined;
  bankAccount?: string | undefined;
  beneficiaryName?: string | undefined;
};

/** @internal */
export const GetPrimaryBalanceTransferDestination$outboundSchema: z.ZodType<
  GetPrimaryBalanceTransferDestination$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceTransferDestination
> = z.object({
  type: z.string().optional(),
  bankAccount: z.string().optional(),
  beneficiaryName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceTransferDestination$ {
  /** @deprecated use `GetPrimaryBalanceTransferDestination$inboundSchema` instead. */
  export const inboundSchema =
    GetPrimaryBalanceTransferDestination$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceTransferDestination$outboundSchema` instead. */
  export const outboundSchema =
    GetPrimaryBalanceTransferDestination$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceTransferDestination$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceTransferDestination$Outbound;
}

export function getPrimaryBalanceTransferDestinationToJSON(
  getPrimaryBalanceTransferDestination: GetPrimaryBalanceTransferDestination,
): string {
  return JSON.stringify(
    GetPrimaryBalanceTransferDestination$outboundSchema.parse(
      getPrimaryBalanceTransferDestination,
    ),
  );
}

export function getPrimaryBalanceTransferDestinationFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceTransferDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPrimaryBalanceTransferDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceTransferDestination' from JSON`,
  );
}

/** @internal */
export const GetPrimaryBalanceAvailableAmount$inboundSchema: z.ZodType<
  GetPrimaryBalanceAvailableAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPrimaryBalanceAvailableAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPrimaryBalanceAvailableAmount$outboundSchema: z.ZodType<
  GetPrimaryBalanceAvailableAmount$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceAvailableAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceAvailableAmount$ {
  /** @deprecated use `GetPrimaryBalanceAvailableAmount$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceAvailableAmount$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceAvailableAmount$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalanceAvailableAmount$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceAvailableAmount$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceAvailableAmount$Outbound;
}

export function getPrimaryBalanceAvailableAmountToJSON(
  getPrimaryBalanceAvailableAmount: GetPrimaryBalanceAvailableAmount,
): string {
  return JSON.stringify(
    GetPrimaryBalanceAvailableAmount$outboundSchema.parse(
      getPrimaryBalanceAvailableAmount,
    ),
  );
}

export function getPrimaryBalanceAvailableAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceAvailableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPrimaryBalanceAvailableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceAvailableAmount' from JSON`,
  );
}

/** @internal */
export const GetPrimaryBalancePendingAmount$inboundSchema: z.ZodType<
  GetPrimaryBalancePendingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPrimaryBalancePendingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPrimaryBalancePendingAmount$outboundSchema: z.ZodType<
  GetPrimaryBalancePendingAmount$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalancePendingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalancePendingAmount$ {
  /** @deprecated use `GetPrimaryBalancePendingAmount$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalancePendingAmount$inboundSchema;
  /** @deprecated use `GetPrimaryBalancePendingAmount$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalancePendingAmount$outboundSchema;
  /** @deprecated use `GetPrimaryBalancePendingAmount$Outbound` instead. */
  export type Outbound = GetPrimaryBalancePendingAmount$Outbound;
}

export function getPrimaryBalancePendingAmountToJSON(
  getPrimaryBalancePendingAmount: GetPrimaryBalancePendingAmount,
): string {
  return JSON.stringify(
    GetPrimaryBalancePendingAmount$outboundSchema.parse(
      getPrimaryBalancePendingAmount,
    ),
  );
}

export function getPrimaryBalancePendingAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalancePendingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPrimaryBalancePendingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalancePendingAmount' from JSON`,
  );
}

/** @internal */
export const GetPrimaryBalanceSelf$inboundSchema: z.ZodType<
  GetPrimaryBalanceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPrimaryBalanceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPrimaryBalanceSelf$outboundSchema: z.ZodType<
  GetPrimaryBalanceSelf$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceSelf$ {
  /** @deprecated use `GetPrimaryBalanceSelf$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceSelf$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceSelf$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalanceSelf$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceSelf$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceSelf$Outbound;
}

export function getPrimaryBalanceSelfToJSON(
  getPrimaryBalanceSelf: GetPrimaryBalanceSelf,
): string {
  return JSON.stringify(
    GetPrimaryBalanceSelf$outboundSchema.parse(getPrimaryBalanceSelf),
  );
}

export function getPrimaryBalanceSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPrimaryBalanceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceSelf' from JSON`,
  );
}

/** @internal */
export const GetPrimaryBalanceDocumentation$inboundSchema: z.ZodType<
  GetPrimaryBalanceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetPrimaryBalanceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetPrimaryBalanceDocumentation$outboundSchema: z.ZodType<
  GetPrimaryBalanceDocumentation$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceDocumentation$ {
  /** @deprecated use `GetPrimaryBalanceDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceDocumentation$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalanceDocumentation$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceDocumentation$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceDocumentation$Outbound;
}

export function getPrimaryBalanceDocumentationToJSON(
  getPrimaryBalanceDocumentation: GetPrimaryBalanceDocumentation,
): string {
  return JSON.stringify(
    GetPrimaryBalanceDocumentation$outboundSchema.parse(
      getPrimaryBalanceDocumentation,
    ),
  );
}

export function getPrimaryBalanceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPrimaryBalanceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceDocumentation' from JSON`,
  );
}

/** @internal */
export const GetPrimaryBalanceLinks$inboundSchema: z.ZodType<
  GetPrimaryBalanceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetPrimaryBalanceSelf$inboundSchema).optional(),
  documentation: z.lazy(() => GetPrimaryBalanceDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetPrimaryBalanceLinks$Outbound = {
  self?: GetPrimaryBalanceSelf$Outbound | undefined;
  documentation?: GetPrimaryBalanceDocumentation$Outbound | undefined;
};

/** @internal */
export const GetPrimaryBalanceLinks$outboundSchema: z.ZodType<
  GetPrimaryBalanceLinks$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceLinks
> = z.object({
  self: z.lazy(() => GetPrimaryBalanceSelf$outboundSchema).optional(),
  documentation: z.lazy(() => GetPrimaryBalanceDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceLinks$ {
  /** @deprecated use `GetPrimaryBalanceLinks$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceLinks$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceLinks$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalanceLinks$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceLinks$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceLinks$Outbound;
}

export function getPrimaryBalanceLinksToJSON(
  getPrimaryBalanceLinks: GetPrimaryBalanceLinks,
): string {
  return JSON.stringify(
    GetPrimaryBalanceLinks$outboundSchema.parse(getPrimaryBalanceLinks),
  );
}

export function getPrimaryBalanceLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPrimaryBalanceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceLinks' from JSON`,
  );
}

/** @internal */
export const GetPrimaryBalanceResponse$inboundSchema: z.ZodType<
  GetPrimaryBalanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("balance"),
  id: z.string().optional(),
  mode: z.string().optional(),
  createdAt: z.string().optional(),
  currency: GetPrimaryBalanceCurrency$inboundSchema.optional(),
  description: z.string().optional(),
  status: z.string().optional(),
  transferFrequency: z.string().optional(),
  transferThreshold: z.lazy(() =>
    GetPrimaryBalanceTransferThreshold$inboundSchema
  ).optional(),
  transferReference: z.nullable(z.string()).optional(),
  transferDestination: z.nullable(
    z.lazy(() => GetPrimaryBalanceTransferDestination$inboundSchema),
  ).optional(),
  availableAmount: z.lazy(() => GetPrimaryBalanceAvailableAmount$inboundSchema)
    .optional(),
  pendingAmount: z.lazy(() => GetPrimaryBalancePendingAmount$inboundSchema)
    .optional(),
  _links: z.lazy(() => GetPrimaryBalanceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetPrimaryBalanceResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  createdAt?: string | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  status?: string | undefined;
  transferFrequency?: string | undefined;
  transferThreshold?: GetPrimaryBalanceTransferThreshold$Outbound | undefined;
  transferReference?: string | null | undefined;
  transferDestination?:
    | GetPrimaryBalanceTransferDestination$Outbound
    | null
    | undefined;
  availableAmount?: GetPrimaryBalanceAvailableAmount$Outbound | undefined;
  pendingAmount?: GetPrimaryBalancePendingAmount$Outbound | undefined;
  _links?: GetPrimaryBalanceLinks$Outbound | undefined;
};

/** @internal */
export const GetPrimaryBalanceResponse$outboundSchema: z.ZodType<
  GetPrimaryBalanceResponse$Outbound,
  z.ZodTypeDef,
  GetPrimaryBalanceResponse
> = z.object({
  resource: z.string().default("balance"),
  id: z.string().optional(),
  mode: z.string().optional(),
  createdAt: z.string().optional(),
  currency: GetPrimaryBalanceCurrency$outboundSchema.optional(),
  description: z.string().optional(),
  status: z.string().optional(),
  transferFrequency: z.string().optional(),
  transferThreshold: z.lazy(() =>
    GetPrimaryBalanceTransferThreshold$outboundSchema
  ).optional(),
  transferReference: z.nullable(z.string()).optional(),
  transferDestination: z.nullable(
    z.lazy(() => GetPrimaryBalanceTransferDestination$outboundSchema),
  ).optional(),
  availableAmount: z.lazy(() => GetPrimaryBalanceAvailableAmount$outboundSchema)
    .optional(),
  pendingAmount: z.lazy(() => GetPrimaryBalancePendingAmount$outboundSchema)
    .optional(),
  links: z.lazy(() => GetPrimaryBalanceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPrimaryBalanceResponse$ {
  /** @deprecated use `GetPrimaryBalanceResponse$inboundSchema` instead. */
  export const inboundSchema = GetPrimaryBalanceResponse$inboundSchema;
  /** @deprecated use `GetPrimaryBalanceResponse$outboundSchema` instead. */
  export const outboundSchema = GetPrimaryBalanceResponse$outboundSchema;
  /** @deprecated use `GetPrimaryBalanceResponse$Outbound` instead. */
  export type Outbound = GetPrimaryBalanceResponse$Outbound;
}

export function getPrimaryBalanceResponseToJSON(
  getPrimaryBalanceResponse: GetPrimaryBalanceResponse,
): string {
  return JSON.stringify(
    GetPrimaryBalanceResponse$outboundSchema.parse(getPrimaryBalanceResponse),
  );
}

export function getPrimaryBalanceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPrimaryBalanceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPrimaryBalanceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPrimaryBalanceResponse' from JSON`,
  );
}
