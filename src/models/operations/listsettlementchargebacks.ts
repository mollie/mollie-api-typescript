/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListSettlementChargebacksRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type ListSettlementChargebacksEmbedded = {
  /**
   * A list of chargeback objects.
   */
  chargebacks?: Array<models.EntityChargeback> | undefined;
};

/**
 * A list of chargeback objects.
 */
export type ListSettlementChargebacksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListSettlementChargebacksEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: models.ListLinks | undefined;
};

/** @internal */
export const ListSettlementChargebacksRequest$inboundSchema: z.ZodType<
  ListSettlementChargebacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListSettlementChargebacksRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListSettlementChargebacksRequest$outboundSchema: z.ZodType<
  ListSettlementChargebacksRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksRequest$ {
  /** @deprecated use `ListSettlementChargebacksRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksRequest$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksRequest$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksRequest$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksRequest$Outbound;
}

export function listSettlementChargebacksRequestToJSON(
  listSettlementChargebacksRequest: ListSettlementChargebacksRequest,
): string {
  return JSON.stringify(
    ListSettlementChargebacksRequest$outboundSchema.parse(
      listSettlementChargebacksRequest,
    ),
  );
}

export function listSettlementChargebacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksEmbedded$inboundSchema: z.ZodType<
  ListSettlementChargebacksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  chargebacks: z.array(models.EntityChargeback$inboundSchema).optional(),
});

/** @internal */
export type ListSettlementChargebacksEmbedded$Outbound = {
  chargebacks?: Array<models.EntityChargeback$Outbound> | undefined;
};

/** @internal */
export const ListSettlementChargebacksEmbedded$outboundSchema: z.ZodType<
  ListSettlementChargebacksEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksEmbedded
> = z.object({
  chargebacks: z.array(models.EntityChargeback$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksEmbedded$ {
  /** @deprecated use `ListSettlementChargebacksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksEmbedded$Outbound;
}

export function listSettlementChargebacksEmbeddedToJSON(
  listSettlementChargebacksEmbedded: ListSettlementChargebacksEmbedded,
): string {
  return JSON.stringify(
    ListSettlementChargebacksEmbedded$outboundSchema.parse(
      listSettlementChargebacksEmbedded,
    ),
  );
}

export function listSettlementChargebacksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksResponse$inboundSchema: z.ZodType<
  ListSettlementChargebacksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListSettlementChargebacksEmbedded$inboundSchema)
    .optional(),
  _links: models.ListLinks$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementChargebacksResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListSettlementChargebacksEmbedded$Outbound | undefined;
  _links?: models.ListLinks$Outbound | undefined;
};

/** @internal */
export const ListSettlementChargebacksResponse$outboundSchema: z.ZodType<
  ListSettlementChargebacksResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListSettlementChargebacksEmbedded$outboundSchema)
    .optional(),
  links: models.ListLinks$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksResponse$ {
  /** @deprecated use `ListSettlementChargebacksResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksResponse$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksResponse$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksResponse$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksResponse$Outbound;
}

export function listSettlementChargebacksResponseToJSON(
  listSettlementChargebacksResponse: ListSettlementChargebacksResponse,
): string {
  return JSON.stringify(
    ListSettlementChargebacksResponse$outboundSchema.parse(
      listSettlementChargebacksResponse,
    ),
  );
}

export function listSettlementChargebacksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksResponse' from JSON`,
  );
}
