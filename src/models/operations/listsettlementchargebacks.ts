/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export const ListSettlementChargebacksEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional information via the `embed` query string parameter.
 */
export type ListSettlementChargebacksEmbed = ClosedEnum<
  typeof ListSettlementChargebacksEmbed
>;

export type ListSettlementChargebacksRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to embed additional information via the `embed` query string parameter.
   */
  embed?: ListSettlementChargebacksEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementChargebacksNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementChargebacksNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementChargebacksNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementChargebacksBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementChargebacksBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementChargebacksBadRequestDocumentation;
};

/**
 * The amount charged back by the customer.
 */
export type ListSettlementChargebacksAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve
 * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
 * instead.
 */
export type ListSettlementChargebacksSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
 */
export type ListSettlementChargebacksReason = {
  /**
   * Technical code provided by the bank.
   */
  code: string;
  /**
   * A more detailed human-friendly description.
   */
  description: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementChargebacksChargebackSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
 */
export type ListSettlementChargebacksPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if
 *
 * @remarks
 * not yet settled.
 */
export type ListSettlementChargebacksSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementChargebacksChargebackDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListSettlementChargebacksChargebackLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListSettlementChargebacksChargebackSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this chargeback belongs to.
   */
  payment: ListSettlementChargebacksPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this chargeback has been settled with. Not present if
   *
   * @remarks
   * not yet settled.
   */
  settlement?: ListSettlementChargebacksSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListSettlementChargebacksChargebackDocumentation;
};

export type ListSettlementChargebacksChargeback = {
  /**
   * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
   *
   * @remarks
   * endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
   */
  id: string;
  /**
   * The amount charged back by the customer.
   */
  amount: ListSettlementChargebacksAmount;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve
   * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
   * instead.
   */
  settlementAmount?:
    | ListSettlementChargebacksSettlementAmount
    | null
    | undefined;
  /**
   * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
   */
  reason?: ListSettlementChargebacksReason | null | undefined;
  /**
   * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field
   *
   * @remarks
   * is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the chargeback was reversed if applicable, in
   *
   * @remarks
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  reversedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListSettlementChargebacksChargebackLinks;
};

export type ListSettlementChargebacksEmbedded = {
  /**
   * A list of chargeback objects.
   */
  chargebacks?: Array<ListSettlementChargebacksChargeback> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListSettlementChargebacksSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListSettlementChargebacksPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListSettlementChargebacksNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementChargebacksDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListSettlementChargebacksLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListSettlementChargebacksSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListSettlementChargebacksPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListSettlementChargebacksNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListSettlementChargebacksDocumentation | undefined;
};

/**
 * A list of chargeback objects.
 */
export type ListSettlementChargebacksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListSettlementChargebacksEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListSettlementChargebacksLinks | undefined;
};

/** @internal */
export const ListSettlementChargebacksEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementChargebacksEmbed
> = z.nativeEnum(ListSettlementChargebacksEmbed);

/** @internal */
export const ListSettlementChargebacksEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementChargebacksEmbed
> = ListSettlementChargebacksEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksEmbed$ {
  /** @deprecated use `ListSettlementChargebacksEmbed$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksEmbed$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksEmbed$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksEmbed$outboundSchema;
}

/** @internal */
export const ListSettlementChargebacksRequest$inboundSchema: z.ZodType<
  ListSettlementChargebacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: ListSettlementChargebacksEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListSettlementChargebacksRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListSettlementChargebacksRequest$outboundSchema: z.ZodType<
  ListSettlementChargebacksRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: ListSettlementChargebacksEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksRequest$ {
  /** @deprecated use `ListSettlementChargebacksRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksRequest$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksRequest$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksRequest$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksRequest$Outbound;
}

export function listSettlementChargebacksRequestToJSON(
  listSettlementChargebacksRequest: ListSettlementChargebacksRequest,
): string {
  return JSON.stringify(
    ListSettlementChargebacksRequest$outboundSchema.parse(
      listSettlementChargebacksRequest,
    ),
  );
}

export function listSettlementChargebacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksNotFoundDocumentation$inboundSchema:
  z.ZodType<
    ListSettlementChargebacksNotFoundDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListSettlementChargebacksNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementChargebacksNotFoundDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementChargebacksNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementChargebacksNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksNotFoundDocumentation$ {
  /** @deprecated use `ListSettlementChargebacksNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksNotFoundDocumentation$Outbound` instead. */
  export type Outbound =
    ListSettlementChargebacksNotFoundDocumentation$Outbound;
}

export function listSettlementChargebacksNotFoundDocumentationToJSON(
  listSettlementChargebacksNotFoundDocumentation:
    ListSettlementChargebacksNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListSettlementChargebacksNotFoundDocumentation$outboundSchema.parse(
      listSettlementChargebacksNotFoundDocumentation,
    ),
  );
}

export function listSettlementChargebacksNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementChargebacksNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementChargebacksNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksNotFoundLinks$inboundSchema: z.ZodType<
  ListSettlementChargebacksNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementChargebacksNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementChargebacksNotFoundLinks$Outbound = {
  documentation: ListSettlementChargebacksNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListSettlementChargebacksNotFoundLinks$outboundSchema: z.ZodType<
  ListSettlementChargebacksNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementChargebacksNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksNotFoundLinks$ {
  /** @deprecated use `ListSettlementChargebacksNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksNotFoundLinks$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksNotFoundLinks$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksNotFoundLinks$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksNotFoundLinks$Outbound;
}

export function listSettlementChargebacksNotFoundLinksToJSON(
  listSettlementChargebacksNotFoundLinks:
    ListSettlementChargebacksNotFoundLinks,
): string {
  return JSON.stringify(
    ListSettlementChargebacksNotFoundLinks$outboundSchema.parse(
      listSettlementChargebacksNotFoundLinks,
    ),
  );
}

export function listSettlementChargebacksNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksBadRequestDocumentation$inboundSchema:
  z.ZodType<
    ListSettlementChargebacksBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListSettlementChargebacksBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementChargebacksBadRequestDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementChargebacksBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementChargebacksBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksBadRequestDocumentation$ {
  /** @deprecated use `ListSettlementChargebacksBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksBadRequestDocumentation$Outbound` instead. */
  export type Outbound =
    ListSettlementChargebacksBadRequestDocumentation$Outbound;
}

export function listSettlementChargebacksBadRequestDocumentationToJSON(
  listSettlementChargebacksBadRequestDocumentation:
    ListSettlementChargebacksBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListSettlementChargebacksBadRequestDocumentation$outboundSchema.parse(
      listSettlementChargebacksBadRequestDocumentation,
    ),
  );
}

export function listSettlementChargebacksBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementChargebacksBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementChargebacksBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksBadRequestLinks$inboundSchema: z.ZodType<
  ListSettlementChargebacksBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementChargebacksBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementChargebacksBadRequestLinks$Outbound = {
  documentation: ListSettlementChargebacksBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListSettlementChargebacksBadRequestLinks$outboundSchema: z.ZodType<
  ListSettlementChargebacksBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementChargebacksBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksBadRequestLinks$ {
  /** @deprecated use `ListSettlementChargebacksBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksBadRequestLinks$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksBadRequestLinks$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksBadRequestLinks$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksBadRequestLinks$Outbound;
}

export function listSettlementChargebacksBadRequestLinksToJSON(
  listSettlementChargebacksBadRequestLinks:
    ListSettlementChargebacksBadRequestLinks,
): string {
  return JSON.stringify(
    ListSettlementChargebacksBadRequestLinks$outboundSchema.parse(
      listSettlementChargebacksBadRequestLinks,
    ),
  );
}

export function listSettlementChargebacksBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementChargebacksBadRequestLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksBadRequestLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementChargebacksBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksAmount$inboundSchema: z.ZodType<
  ListSettlementChargebacksAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementChargebacksAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementChargebacksAmount$outboundSchema: z.ZodType<
  ListSettlementChargebacksAmount$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksAmount$ {
  /** @deprecated use `ListSettlementChargebacksAmount$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksAmount$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksAmount$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksAmount$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksAmount$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksAmount$Outbound;
}

export function listSettlementChargebacksAmountToJSON(
  listSettlementChargebacksAmount: ListSettlementChargebacksAmount,
): string {
  return JSON.stringify(
    ListSettlementChargebacksAmount$outboundSchema.parse(
      listSettlementChargebacksAmount,
    ),
  );
}

export function listSettlementChargebacksAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksSettlementAmount$inboundSchema: z.ZodType<
  ListSettlementChargebacksSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementChargebacksSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementChargebacksSettlementAmount$outboundSchema:
  z.ZodType<
    ListSettlementChargebacksSettlementAmount$Outbound,
    z.ZodTypeDef,
    ListSettlementChargebacksSettlementAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksSettlementAmount$ {
  /** @deprecated use `ListSettlementChargebacksSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksSettlementAmount$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksSettlementAmount$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksSettlementAmount$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksSettlementAmount$Outbound;
}

export function listSettlementChargebacksSettlementAmountToJSON(
  listSettlementChargebacksSettlementAmount:
    ListSettlementChargebacksSettlementAmount,
): string {
  return JSON.stringify(
    ListSettlementChargebacksSettlementAmount$outboundSchema.parse(
      listSettlementChargebacksSettlementAmount,
    ),
  );
}

export function listSettlementChargebacksSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementChargebacksSettlementAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksSettlementAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementChargebacksSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksReason$inboundSchema: z.ZodType<
  ListSettlementChargebacksReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  description: z.string(),
});

/** @internal */
export type ListSettlementChargebacksReason$Outbound = {
  code: string;
  description: string;
};

/** @internal */
export const ListSettlementChargebacksReason$outboundSchema: z.ZodType<
  ListSettlementChargebacksReason$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksReason
> = z.object({
  code: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksReason$ {
  /** @deprecated use `ListSettlementChargebacksReason$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksReason$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksReason$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksReason$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksReason$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksReason$Outbound;
}

export function listSettlementChargebacksReasonToJSON(
  listSettlementChargebacksReason: ListSettlementChargebacksReason,
): string {
  return JSON.stringify(
    ListSettlementChargebacksReason$outboundSchema.parse(
      listSettlementChargebacksReason,
    ),
  );
}

export function listSettlementChargebacksReasonFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksReason' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksChargebackSelf$inboundSchema: z.ZodType<
  ListSettlementChargebacksChargebackSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementChargebacksChargebackSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementChargebacksChargebackSelf$outboundSchema: z.ZodType<
  ListSettlementChargebacksChargebackSelf$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksChargebackSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksChargebackSelf$ {
  /** @deprecated use `ListSettlementChargebacksChargebackSelf$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksChargebackSelf$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargebackSelf$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksChargebackSelf$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargebackSelf$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksChargebackSelf$Outbound;
}

export function listSettlementChargebacksChargebackSelfToJSON(
  listSettlementChargebacksChargebackSelf:
    ListSettlementChargebacksChargebackSelf,
): string {
  return JSON.stringify(
    ListSettlementChargebacksChargebackSelf$outboundSchema.parse(
      listSettlementChargebacksChargebackSelf,
    ),
  );
}

export function listSettlementChargebacksChargebackSelfFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementChargebacksChargebackSelf,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksChargebackSelf$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementChargebacksChargebackSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksPayment$inboundSchema: z.ZodType<
  ListSettlementChargebacksPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementChargebacksPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementChargebacksPayment$outboundSchema: z.ZodType<
  ListSettlementChargebacksPayment$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksPayment$ {
  /** @deprecated use `ListSettlementChargebacksPayment$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksPayment$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksPayment$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksPayment$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksPayment$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksPayment$Outbound;
}

export function listSettlementChargebacksPaymentToJSON(
  listSettlementChargebacksPayment: ListSettlementChargebacksPayment,
): string {
  return JSON.stringify(
    ListSettlementChargebacksPayment$outboundSchema.parse(
      listSettlementChargebacksPayment,
    ),
  );
}

export function listSettlementChargebacksPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksPayment' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksSettlement$inboundSchema: z.ZodType<
  ListSettlementChargebacksSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementChargebacksSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementChargebacksSettlement$outboundSchema: z.ZodType<
  ListSettlementChargebacksSettlement$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksSettlement$ {
  /** @deprecated use `ListSettlementChargebacksSettlement$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksSettlement$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksSettlement$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksSettlement$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksSettlement$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksSettlement$Outbound;
}

export function listSettlementChargebacksSettlementToJSON(
  listSettlementChargebacksSettlement: ListSettlementChargebacksSettlement,
): string {
  return JSON.stringify(
    ListSettlementChargebacksSettlement$outboundSchema.parse(
      listSettlementChargebacksSettlement,
    ),
  );
}

export function listSettlementChargebacksSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksSettlement' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksChargebackDocumentation$inboundSchema:
  z.ZodType<
    ListSettlementChargebacksChargebackDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListSettlementChargebacksChargebackDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementChargebacksChargebackDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementChargebacksChargebackDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementChargebacksChargebackDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksChargebackDocumentation$ {
  /** @deprecated use `ListSettlementChargebacksChargebackDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksChargebackDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargebackDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksChargebackDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargebackDocumentation$Outbound` instead. */
  export type Outbound =
    ListSettlementChargebacksChargebackDocumentation$Outbound;
}

export function listSettlementChargebacksChargebackDocumentationToJSON(
  listSettlementChargebacksChargebackDocumentation:
    ListSettlementChargebacksChargebackDocumentation,
): string {
  return JSON.stringify(
    ListSettlementChargebacksChargebackDocumentation$outboundSchema.parse(
      listSettlementChargebacksChargebackDocumentation,
    ),
  );
}

export function listSettlementChargebacksChargebackDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementChargebacksChargebackDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksChargebackDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementChargebacksChargebackDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksChargebackLinks$inboundSchema: z.ZodType<
  ListSettlementChargebacksChargebackLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSettlementChargebacksChargebackSelf$inboundSchema),
  payment: z.lazy(() => ListSettlementChargebacksPayment$inboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListSettlementChargebacksSettlement$inboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListSettlementChargebacksChargebackDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementChargebacksChargebackLinks$Outbound = {
  self: ListSettlementChargebacksChargebackSelf$Outbound;
  payment: ListSettlementChargebacksPayment$Outbound;
  settlement?: ListSettlementChargebacksSettlement$Outbound | null | undefined;
  documentation: ListSettlementChargebacksChargebackDocumentation$Outbound;
};

/** @internal */
export const ListSettlementChargebacksChargebackLinks$outboundSchema: z.ZodType<
  ListSettlementChargebacksChargebackLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksChargebackLinks
> = z.object({
  self: z.lazy(() => ListSettlementChargebacksChargebackSelf$outboundSchema),
  payment: z.lazy(() => ListSettlementChargebacksPayment$outboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListSettlementChargebacksSettlement$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListSettlementChargebacksChargebackDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksChargebackLinks$ {
  /** @deprecated use `ListSettlementChargebacksChargebackLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksChargebackLinks$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargebackLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksChargebackLinks$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargebackLinks$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksChargebackLinks$Outbound;
}

export function listSettlementChargebacksChargebackLinksToJSON(
  listSettlementChargebacksChargebackLinks:
    ListSettlementChargebacksChargebackLinks,
): string {
  return JSON.stringify(
    ListSettlementChargebacksChargebackLinks$outboundSchema.parse(
      listSettlementChargebacksChargebackLinks,
    ),
  );
}

export function listSettlementChargebacksChargebackLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementChargebacksChargebackLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksChargebackLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementChargebacksChargebackLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksChargeback$inboundSchema: z.ZodType<
  ListSettlementChargebacksChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => ListSettlementChargebacksAmount$inboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => ListSettlementChargebacksSettlementAmount$inboundSchema),
  ).optional(),
  reason: z.nullable(
    z.lazy(() => ListSettlementChargebacksReason$inboundSchema),
  ).optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ListSettlementChargebacksChargebackLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementChargebacksChargeback$Outbound = {
  resource: string;
  id: string;
  amount: ListSettlementChargebacksAmount$Outbound;
  settlementAmount?:
    | ListSettlementChargebacksSettlementAmount$Outbound
    | null
    | undefined;
  reason?: ListSettlementChargebacksReason$Outbound | null | undefined;
  paymentId: string;
  settlementId?: string | null | undefined;
  createdAt: string;
  reversedAt?: string | null | undefined;
  _links: ListSettlementChargebacksChargebackLinks$Outbound;
};

/** @internal */
export const ListSettlementChargebacksChargeback$outboundSchema: z.ZodType<
  ListSettlementChargebacksChargeback$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksChargeback
> = z.object({
  resource: z.string(),
  id: z.string(),
  amount: z.lazy(() => ListSettlementChargebacksAmount$outboundSchema),
  settlementAmount: z.nullable(
    z.lazy(() => ListSettlementChargebacksSettlementAmount$outboundSchema),
  ).optional(),
  reason: z.nullable(
    z.lazy(() => ListSettlementChargebacksReason$outboundSchema),
  ).optional(),
  paymentId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  reversedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => ListSettlementChargebacksChargebackLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksChargeback$ {
  /** @deprecated use `ListSettlementChargebacksChargeback$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksChargeback$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargeback$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksChargeback$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksChargeback$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksChargeback$Outbound;
}

export function listSettlementChargebacksChargebackToJSON(
  listSettlementChargebacksChargeback: ListSettlementChargebacksChargeback,
): string {
  return JSON.stringify(
    ListSettlementChargebacksChargeback$outboundSchema.parse(
      listSettlementChargebacksChargeback,
    ),
  );
}

export function listSettlementChargebacksChargebackFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksChargeback' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksEmbedded$inboundSchema: z.ZodType<
  ListSettlementChargebacksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  chargebacks: z.array(
    z.lazy(() => ListSettlementChargebacksChargeback$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListSettlementChargebacksEmbedded$Outbound = {
  chargebacks?: Array<ListSettlementChargebacksChargeback$Outbound> | undefined;
};

/** @internal */
export const ListSettlementChargebacksEmbedded$outboundSchema: z.ZodType<
  ListSettlementChargebacksEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksEmbedded
> = z.object({
  chargebacks: z.array(
    z.lazy(() => ListSettlementChargebacksChargeback$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksEmbedded$ {
  /** @deprecated use `ListSettlementChargebacksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksEmbedded$Outbound;
}

export function listSettlementChargebacksEmbeddedToJSON(
  listSettlementChargebacksEmbedded: ListSettlementChargebacksEmbedded,
): string {
  return JSON.stringify(
    ListSettlementChargebacksEmbedded$outboundSchema.parse(
      listSettlementChargebacksEmbedded,
    ),
  );
}

export function listSettlementChargebacksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksSelf$inboundSchema: z.ZodType<
  ListSettlementChargebacksSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementChargebacksSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementChargebacksSelf$outboundSchema: z.ZodType<
  ListSettlementChargebacksSelf$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksSelf$ {
  /** @deprecated use `ListSettlementChargebacksSelf$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksSelf$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksSelf$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksSelf$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksSelf$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksSelf$Outbound;
}

export function listSettlementChargebacksSelfToJSON(
  listSettlementChargebacksSelf: ListSettlementChargebacksSelf,
): string {
  return JSON.stringify(
    ListSettlementChargebacksSelf$outboundSchema.parse(
      listSettlementChargebacksSelf,
    ),
  );
}

export function listSettlementChargebacksSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksPrevious$inboundSchema: z.ZodType<
  ListSettlementChargebacksPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementChargebacksPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementChargebacksPrevious$outboundSchema: z.ZodType<
  ListSettlementChargebacksPrevious$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksPrevious$ {
  /** @deprecated use `ListSettlementChargebacksPrevious$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksPrevious$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksPrevious$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksPrevious$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksPrevious$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksPrevious$Outbound;
}

export function listSettlementChargebacksPreviousToJSON(
  listSettlementChargebacksPrevious: ListSettlementChargebacksPrevious,
): string {
  return JSON.stringify(
    ListSettlementChargebacksPrevious$outboundSchema.parse(
      listSettlementChargebacksPrevious,
    ),
  );
}

export function listSettlementChargebacksPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksPrevious' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksNext$inboundSchema: z.ZodType<
  ListSettlementChargebacksNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementChargebacksNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementChargebacksNext$outboundSchema: z.ZodType<
  ListSettlementChargebacksNext$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksNext$ {
  /** @deprecated use `ListSettlementChargebacksNext$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksNext$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksNext$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksNext$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksNext$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksNext$Outbound;
}

export function listSettlementChargebacksNextToJSON(
  listSettlementChargebacksNext: ListSettlementChargebacksNext,
): string {
  return JSON.stringify(
    ListSettlementChargebacksNext$outboundSchema.parse(
      listSettlementChargebacksNext,
    ),
  );
}

export function listSettlementChargebacksNextFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksNext' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksDocumentation$inboundSchema: z.ZodType<
  ListSettlementChargebacksDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementChargebacksDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementChargebacksDocumentation$outboundSchema: z.ZodType<
  ListSettlementChargebacksDocumentation$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksDocumentation$ {
  /** @deprecated use `ListSettlementChargebacksDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementChargebacksDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksDocumentation$Outbound;
}

export function listSettlementChargebacksDocumentationToJSON(
  listSettlementChargebacksDocumentation:
    ListSettlementChargebacksDocumentation,
): string {
  return JSON.stringify(
    ListSettlementChargebacksDocumentation$outboundSchema.parse(
      listSettlementChargebacksDocumentation,
    ),
  );
}

export function listSettlementChargebacksDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementChargebacksDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksLinks$inboundSchema: z.ZodType<
  ListSettlementChargebacksLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSettlementChargebacksSelf$inboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListSettlementChargebacksPrevious$inboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListSettlementChargebacksNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListSettlementChargebacksDocumentation$inboundSchema
  ).optional(),
});

/** @internal */
export type ListSettlementChargebacksLinks$Outbound = {
  self?: ListSettlementChargebacksSelf$Outbound | undefined;
  previous?: ListSettlementChargebacksPrevious$Outbound | null | undefined;
  next?: ListSettlementChargebacksNext$Outbound | null | undefined;
  documentation?: ListSettlementChargebacksDocumentation$Outbound | undefined;
};

/** @internal */
export const ListSettlementChargebacksLinks$outboundSchema: z.ZodType<
  ListSettlementChargebacksLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksLinks
> = z.object({
  self: z.lazy(() => ListSettlementChargebacksSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListSettlementChargebacksPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListSettlementChargebacksNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListSettlementChargebacksDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksLinks$ {
  /** @deprecated use `ListSettlementChargebacksLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksLinks$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksLinks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementChargebacksLinks$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksLinks$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksLinks$Outbound;
}

export function listSettlementChargebacksLinksToJSON(
  listSettlementChargebacksLinks: ListSettlementChargebacksLinks,
): string {
  return JSON.stringify(
    ListSettlementChargebacksLinks$outboundSchema.parse(
      listSettlementChargebacksLinks,
    ),
  );
}

export function listSettlementChargebacksLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementChargebacksResponse$inboundSchema: z.ZodType<
  ListSettlementChargebacksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListSettlementChargebacksEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => ListSettlementChargebacksLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementChargebacksResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListSettlementChargebacksEmbedded$Outbound | undefined;
  _links?: ListSettlementChargebacksLinks$Outbound | undefined;
};

/** @internal */
export const ListSettlementChargebacksResponse$outboundSchema: z.ZodType<
  ListSettlementChargebacksResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementChargebacksResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListSettlementChargebacksEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => ListSettlementChargebacksLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementChargebacksResponse$ {
  /** @deprecated use `ListSettlementChargebacksResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementChargebacksResponse$inboundSchema;
  /** @deprecated use `ListSettlementChargebacksResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementChargebacksResponse$outboundSchema;
  /** @deprecated use `ListSettlementChargebacksResponse$Outbound` instead. */
  export type Outbound = ListSettlementChargebacksResponse$Outbound;
}

export function listSettlementChargebacksResponseToJSON(
  listSettlementChargebacksResponse: ListSettlementChargebacksResponse,
): string {
  return JSON.stringify(
    ListSettlementChargebacksResponse$outboundSchema.parse(
      listSettlementChargebacksResponse,
    ),
  );
}

export function listSettlementChargebacksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementChargebacksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementChargebacksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementChargebacksResponse' from JSON`,
  );
}
