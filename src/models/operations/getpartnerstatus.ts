/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetPartnerStatusRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/**
 * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
 *
 * @remarks
 * enrolled as a partner.
 */
export const PartnerType = {
  Oauth: "oauth",
  Signuplink: "signuplink",
  Useragent: "useragent",
} as const;
/**
 * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
 *
 * @remarks
 * enrolled as a partner.
 */
export type PartnerType = ClosedEnum<typeof PartnerType>;

export type UserAgentToken = {
  /**
   * The unique User-Agent token.
   */
  token?: string | undefined;
  /**
   * The date from which the token is active, in ISO 8601 format.
   */
  startsAt?: string | undefined;
  /**
   * The date until when the token will be active, in ISO 8601 format. Will be `null` if the token
   *
   * @remarks
   * does not have an end date (yet).
   */
  endsAt?: string | null | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetPartnerStatusLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  signuplink?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: models.Url | undefined;
};

/**
 * The partner status object.
 */
export type GetPartnerStatusResponse = {
  /**
   * Indicates the response contains a partner status object. Will always contain the string `partner` for
   *
   * @remarks
   * this endpoint.
   */
  resource: string;
  /**
   * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
   *
   * @remarks
   * enrolled as a partner.
   */
  partnerType: PartnerType | null;
  /**
   * Whether the current organization is receiving commissions.
   */
  isCommissionPartner?: boolean | undefined;
  /**
   * Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
   *
   * @remarks
   * they were in the past.
   */
  userAgentTokens?: Array<UserAgentToken> | undefined;
  /**
   * The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
   *
   * @remarks
   * (yet).
   */
  partnerContractSignedAt?: string | null | undefined;
  /**
   * Whether an update to the partner contract is available and requiring the organization's agreement.
   */
  partnerContractUpdateAvailable?: boolean | undefined;
  /**
   * The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
   *
   * @remarks
   * expiration date (yet).
   */
  partnerContractExpiresAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetPartnerStatusLinks | undefined;
};

/** @internal */
export const GetPartnerStatusRequest$inboundSchema: z.ZodType<
  GetPartnerStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetPartnerStatusRequest$Outbound = {
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetPartnerStatusRequest$outboundSchema: z.ZodType<
  GetPartnerStatusRequest$Outbound,
  z.ZodTypeDef,
  GetPartnerStatusRequest
> = z.object({
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPartnerStatusRequest$ {
  /** @deprecated use `GetPartnerStatusRequest$inboundSchema` instead. */
  export const inboundSchema = GetPartnerStatusRequest$inboundSchema;
  /** @deprecated use `GetPartnerStatusRequest$outboundSchema` instead. */
  export const outboundSchema = GetPartnerStatusRequest$outboundSchema;
  /** @deprecated use `GetPartnerStatusRequest$Outbound` instead. */
  export type Outbound = GetPartnerStatusRequest$Outbound;
}

export function getPartnerStatusRequestToJSON(
  getPartnerStatusRequest: GetPartnerStatusRequest,
): string {
  return JSON.stringify(
    GetPartnerStatusRequest$outboundSchema.parse(getPartnerStatusRequest),
  );
}

export function getPartnerStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPartnerStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPartnerStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPartnerStatusRequest' from JSON`,
  );
}

/** @internal */
export const PartnerType$inboundSchema: z.ZodNativeEnum<typeof PartnerType> = z
  .nativeEnum(PartnerType);

/** @internal */
export const PartnerType$outboundSchema: z.ZodNativeEnum<typeof PartnerType> =
  PartnerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerType$ {
  /** @deprecated use `PartnerType$inboundSchema` instead. */
  export const inboundSchema = PartnerType$inboundSchema;
  /** @deprecated use `PartnerType$outboundSchema` instead. */
  export const outboundSchema = PartnerType$outboundSchema;
}

/** @internal */
export const UserAgentToken$inboundSchema: z.ZodType<
  UserAgentToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  startsAt: z.string().optional(),
  endsAt: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserAgentToken$Outbound = {
  token?: string | undefined;
  startsAt?: string | undefined;
  endsAt?: string | null | undefined;
};

/** @internal */
export const UserAgentToken$outboundSchema: z.ZodType<
  UserAgentToken$Outbound,
  z.ZodTypeDef,
  UserAgentToken
> = z.object({
  token: z.string().optional(),
  startsAt: z.string().optional(),
  endsAt: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAgentToken$ {
  /** @deprecated use `UserAgentToken$inboundSchema` instead. */
  export const inboundSchema = UserAgentToken$inboundSchema;
  /** @deprecated use `UserAgentToken$outboundSchema` instead. */
  export const outboundSchema = UserAgentToken$outboundSchema;
  /** @deprecated use `UserAgentToken$Outbound` instead. */
  export type Outbound = UserAgentToken$Outbound;
}

export function userAgentTokenToJSON(userAgentToken: UserAgentToken): string {
  return JSON.stringify(UserAgentToken$outboundSchema.parse(userAgentToken));
}

export function userAgentTokenFromJSON(
  jsonString: string,
): SafeParseResult<UserAgentToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserAgentToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserAgentToken' from JSON`,
  );
}

/** @internal */
export const GetPartnerStatusLinks$inboundSchema: z.ZodType<
  GetPartnerStatusLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema.optional(),
  signuplink: models.Url$inboundSchema.optional(),
  documentation: models.Url$inboundSchema.optional(),
});

/** @internal */
export type GetPartnerStatusLinks$Outbound = {
  self?: models.Url$Outbound | undefined;
  signuplink?: models.Url$Outbound | undefined;
  documentation?: models.Url$Outbound | undefined;
};

/** @internal */
export const GetPartnerStatusLinks$outboundSchema: z.ZodType<
  GetPartnerStatusLinks$Outbound,
  z.ZodTypeDef,
  GetPartnerStatusLinks
> = z.object({
  self: models.Url$outboundSchema.optional(),
  signuplink: models.Url$outboundSchema.optional(),
  documentation: models.Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPartnerStatusLinks$ {
  /** @deprecated use `GetPartnerStatusLinks$inboundSchema` instead. */
  export const inboundSchema = GetPartnerStatusLinks$inboundSchema;
  /** @deprecated use `GetPartnerStatusLinks$outboundSchema` instead. */
  export const outboundSchema = GetPartnerStatusLinks$outboundSchema;
  /** @deprecated use `GetPartnerStatusLinks$Outbound` instead. */
  export type Outbound = GetPartnerStatusLinks$Outbound;
}

export function getPartnerStatusLinksToJSON(
  getPartnerStatusLinks: GetPartnerStatusLinks,
): string {
  return JSON.stringify(
    GetPartnerStatusLinks$outboundSchema.parse(getPartnerStatusLinks),
  );
}

export function getPartnerStatusLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetPartnerStatusLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPartnerStatusLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPartnerStatusLinks' from JSON`,
  );
}

/** @internal */
export const GetPartnerStatusResponse$inboundSchema: z.ZodType<
  GetPartnerStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  partnerType: z.nullable(PartnerType$inboundSchema),
  isCommissionPartner: z.boolean().optional(),
  userAgentTokens: z.array(z.lazy(() => UserAgentToken$inboundSchema))
    .optional(),
  partnerContractSignedAt: z.nullable(z.string()).optional(),
  partnerContractUpdateAvailable: z.boolean().optional(),
  partnerContractExpiresAt: z.string().optional(),
  _links: z.lazy(() => GetPartnerStatusLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetPartnerStatusResponse$Outbound = {
  resource: string;
  partnerType: string | null;
  isCommissionPartner?: boolean | undefined;
  userAgentTokens?: Array<UserAgentToken$Outbound> | undefined;
  partnerContractSignedAt?: string | null | undefined;
  partnerContractUpdateAvailable?: boolean | undefined;
  partnerContractExpiresAt?: string | undefined;
  _links?: GetPartnerStatusLinks$Outbound | undefined;
};

/** @internal */
export const GetPartnerStatusResponse$outboundSchema: z.ZodType<
  GetPartnerStatusResponse$Outbound,
  z.ZodTypeDef,
  GetPartnerStatusResponse
> = z.object({
  resource: z.string(),
  partnerType: z.nullable(PartnerType$outboundSchema),
  isCommissionPartner: z.boolean().optional(),
  userAgentTokens: z.array(z.lazy(() => UserAgentToken$outboundSchema))
    .optional(),
  partnerContractSignedAt: z.nullable(z.string()).optional(),
  partnerContractUpdateAvailable: z.boolean().optional(),
  partnerContractExpiresAt: z.string().optional(),
  links: z.lazy(() => GetPartnerStatusLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPartnerStatusResponse$ {
  /** @deprecated use `GetPartnerStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetPartnerStatusResponse$inboundSchema;
  /** @deprecated use `GetPartnerStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetPartnerStatusResponse$outboundSchema;
  /** @deprecated use `GetPartnerStatusResponse$Outbound` instead. */
  export type Outbound = GetPartnerStatusResponse$Outbound;
}

export function getPartnerStatusResponseToJSON(
  getPartnerStatusResponse: GetPartnerStatusResponse,
): string {
  return JSON.stringify(
    GetPartnerStatusResponse$outboundSchema.parse(getPartnerStatusResponse),
  );
}

export function getPartnerStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPartnerStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPartnerStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPartnerStatusResponse' from JSON`,
  );
}
