/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCurrentProfileRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const GetCurrentProfileRequest$inboundSchema: z.ZodType<
  GetCurrentProfileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetCurrentProfileRequest$Outbound = {
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetCurrentProfileRequest$outboundSchema: z.ZodType<
  GetCurrentProfileRequest$Outbound,
  z.ZodTypeDef,
  GetCurrentProfileRequest
> = z.object({
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentProfileRequest$ {
  /** @deprecated use `GetCurrentProfileRequest$inboundSchema` instead. */
  export const inboundSchema = GetCurrentProfileRequest$inboundSchema;
  /** @deprecated use `GetCurrentProfileRequest$outboundSchema` instead. */
  export const outboundSchema = GetCurrentProfileRequest$outboundSchema;
  /** @deprecated use `GetCurrentProfileRequest$Outbound` instead. */
  export type Outbound = GetCurrentProfileRequest$Outbound;
}

export function getCurrentProfileRequestToJSON(
  getCurrentProfileRequest: GetCurrentProfileRequest,
): string {
  return JSON.stringify(
    GetCurrentProfileRequest$outboundSchema.parse(getCurrentProfileRequest),
  );
}

export function getCurrentProfileRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentProfileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentProfileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentProfileRequest' from JSON`,
  );
}
