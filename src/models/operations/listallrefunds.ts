/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export const ListAllRefundsSort = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
 *
 * @remarks
 * newest to oldest.
 */
export type ListAllRefundsSort = ClosedEnum<typeof ListAllRefundsSort>;

/**
 * This endpoint allows embedding related API items by appending the following values via the `embed` query string
 *
 * @remarks
 * parameter.
 */
export const ListAllRefundsEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows embedding related API items by appending the following values via the `embed` query string
 *
 * @remarks
 * parameter.
 */
export type ListAllRefundsEmbed = ClosedEnum<typeof ListAllRefundsEmbed>;

export type ListAllRefundsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: ListAllRefundsSort | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: ListAllRefundsEmbed | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve the resources for.
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
   * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListAllRefundsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListAllRefundsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListAllRefundsBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const ListAllRefundsMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type ListAllRefundsMode = ClosedEnum<typeof ListAllRefundsMode>;

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
 *
 * @remarks
 * amount.
 */
export type ListAllRefundsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
 * zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
 * the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the
 * [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type ListAllRefundsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListAllRefundsMetadata =
  | string
  | { [k: string]: any }
  | Array<string>;

/**
 * Refunds may take some time to get confirmed.
 */
export const ListAllRefundsStatus = {
  Queued: "queued",
  Pending: "pending",
  Processing: "processing",
  Refunded: "refunded",
  Failed: "failed",
  Canceled: "canceled",
} as const;
/**
 * Refunds may take some time to get confirmed.
 */
export type ListAllRefundsStatus = ClosedEnum<typeof ListAllRefundsStatus>;

/**
 * Specifies the reference type
 */
export const ListAllRefundsType = {
  AcquirerReference: "acquirer-reference",
} as const;
/**
 * Specifies the reference type
 */
export type ListAllRefundsType = ClosedEnum<typeof ListAllRefundsType>;

export type ListAllRefundsExternalReference = {
  /**
   * Specifies the reference type
   */
  type?: ListAllRefundsType | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * The amount that will be pulled back.
 */
export type ListAllRefundsRoutingReversalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Where the funds will be pulled back from.
 */
export type ListAllRefundsSource = {
  /**
   * Required for source type `organization`. The ID of the connected organization the funds should be pulled
   *
   * @remarks
   * back from.
   */
  organizationId?: string | undefined;
};

export type ListAllRefundsRoutingReversal = {
  /**
   * The amount that will be pulled back.
   */
  amount?: ListAllRefundsRoutingReversalAmount | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: ListAllRefundsSource | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllRefundsRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this refund belongs to.
 */
export type ListAllRefundsPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
 *
 * @remarks
 * yet settled.
 */
export type ListAllRefundsSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllRefundsRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListAllRefundsRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListAllRefundsRefundSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this refund belongs to.
   */
  payment: ListAllRefundsPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
   *
   * @remarks
   * yet settled.
   */
  settlement?: ListAllRefundsSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListAllRefundsRefundDocumentation;
};

export type ListAllRefundsRefund = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
   *
   * @remarks
   * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: ListAllRefundsMode | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
   *
   * @remarks
   * amount.
   */
  amount?: ListAllRefundsAmount | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
   * zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
   * the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the
   * [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: ListAllRefundsSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: string | { [k: string]: any } | Array<string> | null | undefined;
  /**
   * The unique identifier of the payment this refund was created for.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   */
  status?: ListAllRefundsStatus | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: ListAllRefundsExternalReference | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
   * needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?: Array<ListAllRefundsRoutingReversal> | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListAllRefundsRefundLinks | undefined;
};

export type ListAllRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds?: Array<ListAllRefundsRefund> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListAllRefundsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListAllRefundsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListAllRefundsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllRefundsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListAllRefundsLinks = {
  /**
   * The URL to the current set of items.
   */
  self: ListAllRefundsSelf;
  /**
   * The previous set of items, if available.
   */
  previous: ListAllRefundsPrevious | null;
  /**
   * The next set of items, if available.
   */
  next: ListAllRefundsNext | null;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListAllRefundsDocumentation;
};

/**
 * A list of refund objects
 */
export type ListAllRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListAllRefundsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListAllRefundsLinks | undefined;
};

/** @internal */
export const ListAllRefundsSort$inboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsSort
> = z.nativeEnum(ListAllRefundsSort);

/** @internal */
export const ListAllRefundsSort$outboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsSort
> = ListAllRefundsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsSort$ {
  /** @deprecated use `ListAllRefundsSort$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsSort$inboundSchema;
  /** @deprecated use `ListAllRefundsSort$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsSort$outboundSchema;
}

/** @internal */
export const ListAllRefundsEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsEmbed
> = z.nativeEnum(ListAllRefundsEmbed);

/** @internal */
export const ListAllRefundsEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsEmbed
> = ListAllRefundsEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsEmbed$ {
  /** @deprecated use `ListAllRefundsEmbed$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsEmbed$inboundSchema;
  /** @deprecated use `ListAllRefundsEmbed$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsEmbed$outboundSchema;
}

/** @internal */
export const ListAllRefundsRequest$inboundSchema: z.ZodType<
  ListAllRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(ListAllRefundsSort$inboundSchema).optional(),
  embed: ListAllRefundsEmbed$inboundSchema.optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListAllRefundsRequest$Outbound = {
  from?: string | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
  embed?: string | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListAllRefundsRequest$outboundSchema: z.ZodType<
  ListAllRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(ListAllRefundsSort$outboundSchema).optional(),
  embed: ListAllRefundsEmbed$outboundSchema.optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRequest$ {
  /** @deprecated use `ListAllRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsRequest$inboundSchema;
  /** @deprecated use `ListAllRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsRequest$outboundSchema;
  /** @deprecated use `ListAllRefundsRequest$Outbound` instead. */
  export type Outbound = ListAllRefundsRequest$Outbound;
}

export function listAllRefundsRequestToJSON(
  listAllRefundsRequest: ListAllRefundsRequest,
): string {
  return JSON.stringify(
    ListAllRefundsRequest$outboundSchema.parse(listAllRefundsRequest),
  );
}

export function listAllRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsBadRequestDocumentation$inboundSchema: z.ZodType<
  ListAllRefundsBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllRefundsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllRefundsBadRequestDocumentation$outboundSchema: z.ZodType<
  ListAllRefundsBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllRefundsBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsBadRequestDocumentation$ {
  /** @deprecated use `ListAllRefundsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListAllRefundsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListAllRefundsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllRefundsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListAllRefundsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListAllRefundsBadRequestDocumentation$Outbound;
}

export function listAllRefundsBadRequestDocumentationToJSON(
  listAllRefundsBadRequestDocumentation: ListAllRefundsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListAllRefundsBadRequestDocumentation$outboundSchema.parse(
      listAllRefundsBadRequestDocumentation,
    ),
  );
}

export function listAllRefundsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllRefundsBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsBadRequestLinks$inboundSchema: z.ZodType<
  ListAllRefundsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListAllRefundsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListAllRefundsBadRequestLinks$Outbound = {
  documentation: ListAllRefundsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListAllRefundsBadRequestLinks$outboundSchema: z.ZodType<
  ListAllRefundsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListAllRefundsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListAllRefundsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsBadRequestLinks$ {
  /** @deprecated use `ListAllRefundsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListAllRefundsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListAllRefundsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListAllRefundsBadRequestLinks$Outbound;
}

export function listAllRefundsBadRequestLinksToJSON(
  listAllRefundsBadRequestLinks: ListAllRefundsBadRequestLinks,
): string {
  return JSON.stringify(
    ListAllRefundsBadRequestLinks$outboundSchema.parse(
      listAllRefundsBadRequestLinks,
    ),
  );
}

export function listAllRefundsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsMode$inboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsMode
> = z.nativeEnum(ListAllRefundsMode);

/** @internal */
export const ListAllRefundsMode$outboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsMode
> = ListAllRefundsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsMode$ {
  /** @deprecated use `ListAllRefundsMode$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsMode$inboundSchema;
  /** @deprecated use `ListAllRefundsMode$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsMode$outboundSchema;
}

/** @internal */
export const ListAllRefundsAmount$inboundSchema: z.ZodType<
  ListAllRefundsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllRefundsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllRefundsAmount$outboundSchema: z.ZodType<
  ListAllRefundsAmount$Outbound,
  z.ZodTypeDef,
  ListAllRefundsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsAmount$ {
  /** @deprecated use `ListAllRefundsAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsAmount$inboundSchema;
  /** @deprecated use `ListAllRefundsAmount$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsAmount$outboundSchema;
  /** @deprecated use `ListAllRefundsAmount$Outbound` instead. */
  export type Outbound = ListAllRefundsAmount$Outbound;
}

export function listAllRefundsAmountToJSON(
  listAllRefundsAmount: ListAllRefundsAmount,
): string {
  return JSON.stringify(
    ListAllRefundsAmount$outboundSchema.parse(listAllRefundsAmount),
  );
}

export function listAllRefundsAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsAmount' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsSettlementAmount$inboundSchema: z.ZodType<
  ListAllRefundsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllRefundsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllRefundsSettlementAmount$outboundSchema: z.ZodType<
  ListAllRefundsSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListAllRefundsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsSettlementAmount$ {
  /** @deprecated use `ListAllRefundsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsSettlementAmount$inboundSchema;
  /** @deprecated use `ListAllRefundsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsSettlementAmount$outboundSchema;
  /** @deprecated use `ListAllRefundsSettlementAmount$Outbound` instead. */
  export type Outbound = ListAllRefundsSettlementAmount$Outbound;
}

export function listAllRefundsSettlementAmountToJSON(
  listAllRefundsSettlementAmount: ListAllRefundsSettlementAmount,
): string {
  return JSON.stringify(
    ListAllRefundsSettlementAmount$outboundSchema.parse(
      listAllRefundsSettlementAmount,
    ),
  );
}

export function listAllRefundsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsMetadata$inboundSchema: z.ZodType<
  ListAllRefundsMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any()), z.array(z.string())]);

/** @internal */
export type ListAllRefundsMetadata$Outbound =
  | string
  | { [k: string]: any }
  | Array<string>;

/** @internal */
export const ListAllRefundsMetadata$outboundSchema: z.ZodType<
  ListAllRefundsMetadata$Outbound,
  z.ZodTypeDef,
  ListAllRefundsMetadata
> = z.union([z.string(), z.record(z.any()), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsMetadata$ {
  /** @deprecated use `ListAllRefundsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsMetadata$inboundSchema;
  /** @deprecated use `ListAllRefundsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsMetadata$outboundSchema;
  /** @deprecated use `ListAllRefundsMetadata$Outbound` instead. */
  export type Outbound = ListAllRefundsMetadata$Outbound;
}

export function listAllRefundsMetadataToJSON(
  listAllRefundsMetadata: ListAllRefundsMetadata,
): string {
  return JSON.stringify(
    ListAllRefundsMetadata$outboundSchema.parse(listAllRefundsMetadata),
  );
}

export function listAllRefundsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsMetadata' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsStatus
> = z.nativeEnum(ListAllRefundsStatus);

/** @internal */
export const ListAllRefundsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsStatus
> = ListAllRefundsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsStatus$ {
  /** @deprecated use `ListAllRefundsStatus$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsStatus$inboundSchema;
  /** @deprecated use `ListAllRefundsStatus$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsStatus$outboundSchema;
}

/** @internal */
export const ListAllRefundsType$inboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsType
> = z.nativeEnum(ListAllRefundsType);

/** @internal */
export const ListAllRefundsType$outboundSchema: z.ZodNativeEnum<
  typeof ListAllRefundsType
> = ListAllRefundsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsType$ {
  /** @deprecated use `ListAllRefundsType$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsType$inboundSchema;
  /** @deprecated use `ListAllRefundsType$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsType$outboundSchema;
}

/** @internal */
export const ListAllRefundsExternalReference$inboundSchema: z.ZodType<
  ListAllRefundsExternalReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListAllRefundsType$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type ListAllRefundsExternalReference$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const ListAllRefundsExternalReference$outboundSchema: z.ZodType<
  ListAllRefundsExternalReference$Outbound,
  z.ZodTypeDef,
  ListAllRefundsExternalReference
> = z.object({
  type: ListAllRefundsType$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsExternalReference$ {
  /** @deprecated use `ListAllRefundsExternalReference$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsExternalReference$inboundSchema;
  /** @deprecated use `ListAllRefundsExternalReference$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsExternalReference$outboundSchema;
  /** @deprecated use `ListAllRefundsExternalReference$Outbound` instead. */
  export type Outbound = ListAllRefundsExternalReference$Outbound;
}

export function listAllRefundsExternalReferenceToJSON(
  listAllRefundsExternalReference: ListAllRefundsExternalReference,
): string {
  return JSON.stringify(
    ListAllRefundsExternalReference$outboundSchema.parse(
      listAllRefundsExternalReference,
    ),
  );
}

export function listAllRefundsExternalReferenceFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsExternalReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsExternalReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsExternalReference' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsRoutingReversalAmount$inboundSchema: z.ZodType<
  ListAllRefundsRoutingReversalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllRefundsRoutingReversalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllRefundsRoutingReversalAmount$outboundSchema: z.ZodType<
  ListAllRefundsRoutingReversalAmount$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRoutingReversalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRoutingReversalAmount$ {
  /** @deprecated use `ListAllRefundsRoutingReversalAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListAllRefundsRoutingReversalAmount$inboundSchema;
  /** @deprecated use `ListAllRefundsRoutingReversalAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListAllRefundsRoutingReversalAmount$outboundSchema;
  /** @deprecated use `ListAllRefundsRoutingReversalAmount$Outbound` instead. */
  export type Outbound = ListAllRefundsRoutingReversalAmount$Outbound;
}

export function listAllRefundsRoutingReversalAmountToJSON(
  listAllRefundsRoutingReversalAmount: ListAllRefundsRoutingReversalAmount,
): string {
  return JSON.stringify(
    ListAllRefundsRoutingReversalAmount$outboundSchema.parse(
      listAllRefundsRoutingReversalAmount,
    ),
  );
}

export function listAllRefundsRoutingReversalAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRoutingReversalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAllRefundsRoutingReversalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRoutingReversalAmount' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsSource$inboundSchema: z.ZodType<
  ListAllRefundsSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string().optional(),
});

/** @internal */
export type ListAllRefundsSource$Outbound = {
  organizationId?: string | undefined;
};

/** @internal */
export const ListAllRefundsSource$outboundSchema: z.ZodType<
  ListAllRefundsSource$Outbound,
  z.ZodTypeDef,
  ListAllRefundsSource
> = z.object({
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsSource$ {
  /** @deprecated use `ListAllRefundsSource$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsSource$inboundSchema;
  /** @deprecated use `ListAllRefundsSource$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsSource$outboundSchema;
  /** @deprecated use `ListAllRefundsSource$Outbound` instead. */
  export type Outbound = ListAllRefundsSource$Outbound;
}

export function listAllRefundsSourceToJSON(
  listAllRefundsSource: ListAllRefundsSource,
): string {
  return JSON.stringify(
    ListAllRefundsSource$outboundSchema.parse(listAllRefundsSource),
  );
}

export function listAllRefundsSourceFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsSource' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsRoutingReversal$inboundSchema: z.ZodType<
  ListAllRefundsRoutingReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ListAllRefundsRoutingReversalAmount$inboundSchema)
    .optional(),
  source: z.lazy(() => ListAllRefundsSource$inboundSchema).optional(),
});

/** @internal */
export type ListAllRefundsRoutingReversal$Outbound = {
  amount?: ListAllRefundsRoutingReversalAmount$Outbound | undefined;
  source?: ListAllRefundsSource$Outbound | undefined;
};

/** @internal */
export const ListAllRefundsRoutingReversal$outboundSchema: z.ZodType<
  ListAllRefundsRoutingReversal$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRoutingReversal
> = z.object({
  amount: z.lazy(() => ListAllRefundsRoutingReversalAmount$outboundSchema)
    .optional(),
  source: z.lazy(() => ListAllRefundsSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRoutingReversal$ {
  /** @deprecated use `ListAllRefundsRoutingReversal$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsRoutingReversal$inboundSchema;
  /** @deprecated use `ListAllRefundsRoutingReversal$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsRoutingReversal$outboundSchema;
  /** @deprecated use `ListAllRefundsRoutingReversal$Outbound` instead. */
  export type Outbound = ListAllRefundsRoutingReversal$Outbound;
}

export function listAllRefundsRoutingReversalToJSON(
  listAllRefundsRoutingReversal: ListAllRefundsRoutingReversal,
): string {
  return JSON.stringify(
    ListAllRefundsRoutingReversal$outboundSchema.parse(
      listAllRefundsRoutingReversal,
    ),
  );
}

export function listAllRefundsRoutingReversalFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRoutingReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsRoutingReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRoutingReversal' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsRefundSelf$inboundSchema: z.ZodType<
  ListAllRefundsRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllRefundsRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllRefundsRefundSelf$outboundSchema: z.ZodType<
  ListAllRefundsRefundSelf$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRefundSelf$ {
  /** @deprecated use `ListAllRefundsRefundSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsRefundSelf$inboundSchema;
  /** @deprecated use `ListAllRefundsRefundSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsRefundSelf$outboundSchema;
  /** @deprecated use `ListAllRefundsRefundSelf$Outbound` instead. */
  export type Outbound = ListAllRefundsRefundSelf$Outbound;
}

export function listAllRefundsRefundSelfToJSON(
  listAllRefundsRefundSelf: ListAllRefundsRefundSelf,
): string {
  return JSON.stringify(
    ListAllRefundsRefundSelf$outboundSchema.parse(listAllRefundsRefundSelf),
  );
}

export function listAllRefundsRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRefundSelf' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsPayment$inboundSchema: z.ZodType<
  ListAllRefundsPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllRefundsPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllRefundsPayment$outboundSchema: z.ZodType<
  ListAllRefundsPayment$Outbound,
  z.ZodTypeDef,
  ListAllRefundsPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsPayment$ {
  /** @deprecated use `ListAllRefundsPayment$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsPayment$inboundSchema;
  /** @deprecated use `ListAllRefundsPayment$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsPayment$outboundSchema;
  /** @deprecated use `ListAllRefundsPayment$Outbound` instead. */
  export type Outbound = ListAllRefundsPayment$Outbound;
}

export function listAllRefundsPaymentToJSON(
  listAllRefundsPayment: ListAllRefundsPayment,
): string {
  return JSON.stringify(
    ListAllRefundsPayment$outboundSchema.parse(listAllRefundsPayment),
  );
}

export function listAllRefundsPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsPayment' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsSettlement$inboundSchema: z.ZodType<
  ListAllRefundsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllRefundsSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllRefundsSettlement$outboundSchema: z.ZodType<
  ListAllRefundsSettlement$Outbound,
  z.ZodTypeDef,
  ListAllRefundsSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsSettlement$ {
  /** @deprecated use `ListAllRefundsSettlement$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsSettlement$inboundSchema;
  /** @deprecated use `ListAllRefundsSettlement$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsSettlement$outboundSchema;
  /** @deprecated use `ListAllRefundsSettlement$Outbound` instead. */
  export type Outbound = ListAllRefundsSettlement$Outbound;
}

export function listAllRefundsSettlementToJSON(
  listAllRefundsSettlement: ListAllRefundsSettlement,
): string {
  return JSON.stringify(
    ListAllRefundsSettlement$outboundSchema.parse(listAllRefundsSettlement),
  );
}

export function listAllRefundsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsSettlement' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsRefundDocumentation$inboundSchema: z.ZodType<
  ListAllRefundsRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllRefundsRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllRefundsRefundDocumentation$outboundSchema: z.ZodType<
  ListAllRefundsRefundDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRefundDocumentation$ {
  /** @deprecated use `ListAllRefundsRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsRefundDocumentation$inboundSchema;
  /** @deprecated use `ListAllRefundsRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListAllRefundsRefundDocumentation$outboundSchema;
  /** @deprecated use `ListAllRefundsRefundDocumentation$Outbound` instead. */
  export type Outbound = ListAllRefundsRefundDocumentation$Outbound;
}

export function listAllRefundsRefundDocumentationToJSON(
  listAllRefundsRefundDocumentation: ListAllRefundsRefundDocumentation,
): string {
  return JSON.stringify(
    ListAllRefundsRefundDocumentation$outboundSchema.parse(
      listAllRefundsRefundDocumentation,
    ),
  );
}

export function listAllRefundsRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRefundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsRefundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsRefundLinks$inboundSchema: z.ZodType<
  ListAllRefundsRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllRefundsRefundSelf$inboundSchema),
  payment: z.lazy(() => ListAllRefundsPayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => ListAllRefundsSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() => ListAllRefundsRefundDocumentation$inboundSchema),
});

/** @internal */
export type ListAllRefundsRefundLinks$Outbound = {
  self: ListAllRefundsRefundSelf$Outbound;
  payment: ListAllRefundsPayment$Outbound;
  settlement?: ListAllRefundsSettlement$Outbound | null | undefined;
  documentation: ListAllRefundsRefundDocumentation$Outbound;
};

/** @internal */
export const ListAllRefundsRefundLinks$outboundSchema: z.ZodType<
  ListAllRefundsRefundLinks$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRefundLinks
> = z.object({
  self: z.lazy(() => ListAllRefundsRefundSelf$outboundSchema),
  payment: z.lazy(() => ListAllRefundsPayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => ListAllRefundsSettlement$outboundSchema))
    .optional(),
  documentation: z.lazy(() => ListAllRefundsRefundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRefundLinks$ {
  /** @deprecated use `ListAllRefundsRefundLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsRefundLinks$inboundSchema;
  /** @deprecated use `ListAllRefundsRefundLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsRefundLinks$outboundSchema;
  /** @deprecated use `ListAllRefundsRefundLinks$Outbound` instead. */
  export type Outbound = ListAllRefundsRefundLinks$Outbound;
}

export function listAllRefundsRefundLinksToJSON(
  listAllRefundsRefundLinks: ListAllRefundsRefundLinks,
): string {
  return JSON.stringify(
    ListAllRefundsRefundLinks$outboundSchema.parse(listAllRefundsRefundLinks),
  );
}

export function listAllRefundsRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRefundLinks' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsRefund$inboundSchema: z.ZodType<
  ListAllRefundsRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: ListAllRefundsMode$inboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListAllRefundsAmount$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListAllRefundsSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([z.string(), z.record(z.any()), z.array(z.string())]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: ListAllRefundsStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() => ListAllRefundsExternalReference$inboundSchema)
    .optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => ListAllRefundsRoutingReversal$inboundSchema)),
  ).optional(),
  _links: z.lazy(() => ListAllRefundsRefundLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListAllRefundsRefund$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: ListAllRefundsAmount$Outbound | undefined;
  settlementAmount?: ListAllRefundsSettlementAmount$Outbound | null | undefined;
  metadata?: string | { [k: string]: any } | Array<string> | null | undefined;
  paymentId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?: ListAllRefundsExternalReference$Outbound | undefined;
  routingReversals?:
    | Array<ListAllRefundsRoutingReversal$Outbound>
    | null
    | undefined;
  _links?: ListAllRefundsRefundLinks$Outbound | undefined;
};

/** @internal */
export const ListAllRefundsRefund$outboundSchema: z.ZodType<
  ListAllRefundsRefund$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRefund
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: ListAllRefundsMode$outboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListAllRefundsAmount$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListAllRefundsSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([z.string(), z.record(z.any()), z.array(z.string())]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: ListAllRefundsStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    ListAllRefundsExternalReference$outboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => ListAllRefundsRoutingReversal$outboundSchema)),
  ).optional(),
  links: z.lazy(() => ListAllRefundsRefundLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRefund$ {
  /** @deprecated use `ListAllRefundsRefund$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsRefund$inboundSchema;
  /** @deprecated use `ListAllRefundsRefund$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsRefund$outboundSchema;
  /** @deprecated use `ListAllRefundsRefund$Outbound` instead. */
  export type Outbound = ListAllRefundsRefund$Outbound;
}

export function listAllRefundsRefundToJSON(
  listAllRefundsRefund: ListAllRefundsRefund,
): string {
  return JSON.stringify(
    ListAllRefundsRefund$outboundSchema.parse(listAllRefundsRefund),
  );
}

export function listAllRefundsRefundFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRefund' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsEmbedded$inboundSchema: z.ZodType<
  ListAllRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(z.lazy(() => ListAllRefundsRefund$inboundSchema)).optional(),
});

/** @internal */
export type ListAllRefundsEmbedded$Outbound = {
  refunds?: Array<ListAllRefundsRefund$Outbound> | undefined;
};

/** @internal */
export const ListAllRefundsEmbedded$outboundSchema: z.ZodType<
  ListAllRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllRefundsEmbedded
> = z.object({
  refunds: z.array(z.lazy(() => ListAllRefundsRefund$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsEmbedded$ {
  /** @deprecated use `ListAllRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsEmbedded$inboundSchema;
  /** @deprecated use `ListAllRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsEmbedded$outboundSchema;
  /** @deprecated use `ListAllRefundsEmbedded$Outbound` instead. */
  export type Outbound = ListAllRefundsEmbedded$Outbound;
}

export function listAllRefundsEmbeddedToJSON(
  listAllRefundsEmbedded: ListAllRefundsEmbedded,
): string {
  return JSON.stringify(
    ListAllRefundsEmbedded$outboundSchema.parse(listAllRefundsEmbedded),
  );
}

export function listAllRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsSelf$inboundSchema: z.ZodType<
  ListAllRefundsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllRefundsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllRefundsSelf$outboundSchema: z.ZodType<
  ListAllRefundsSelf$Outbound,
  z.ZodTypeDef,
  ListAllRefundsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsSelf$ {
  /** @deprecated use `ListAllRefundsSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsSelf$inboundSchema;
  /** @deprecated use `ListAllRefundsSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsSelf$outboundSchema;
  /** @deprecated use `ListAllRefundsSelf$Outbound` instead. */
  export type Outbound = ListAllRefundsSelf$Outbound;
}

export function listAllRefundsSelfToJSON(
  listAllRefundsSelf: ListAllRefundsSelf,
): string {
  return JSON.stringify(
    ListAllRefundsSelf$outboundSchema.parse(listAllRefundsSelf),
  );
}

export function listAllRefundsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsSelf' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsPrevious$inboundSchema: z.ZodType<
  ListAllRefundsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllRefundsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllRefundsPrevious$outboundSchema: z.ZodType<
  ListAllRefundsPrevious$Outbound,
  z.ZodTypeDef,
  ListAllRefundsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsPrevious$ {
  /** @deprecated use `ListAllRefundsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsPrevious$inboundSchema;
  /** @deprecated use `ListAllRefundsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsPrevious$outboundSchema;
  /** @deprecated use `ListAllRefundsPrevious$Outbound` instead. */
  export type Outbound = ListAllRefundsPrevious$Outbound;
}

export function listAllRefundsPreviousToJSON(
  listAllRefundsPrevious: ListAllRefundsPrevious,
): string {
  return JSON.stringify(
    ListAllRefundsPrevious$outboundSchema.parse(listAllRefundsPrevious),
  );
}

export function listAllRefundsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsPrevious' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsNext$inboundSchema: z.ZodType<
  ListAllRefundsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllRefundsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllRefundsNext$outboundSchema: z.ZodType<
  ListAllRefundsNext$Outbound,
  z.ZodTypeDef,
  ListAllRefundsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsNext$ {
  /** @deprecated use `ListAllRefundsNext$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsNext$inboundSchema;
  /** @deprecated use `ListAllRefundsNext$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsNext$outboundSchema;
  /** @deprecated use `ListAllRefundsNext$Outbound` instead. */
  export type Outbound = ListAllRefundsNext$Outbound;
}

export function listAllRefundsNextToJSON(
  listAllRefundsNext: ListAllRefundsNext,
): string {
  return JSON.stringify(
    ListAllRefundsNext$outboundSchema.parse(listAllRefundsNext),
  );
}

export function listAllRefundsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsNext' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsDocumentation$inboundSchema: z.ZodType<
  ListAllRefundsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListAllRefundsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListAllRefundsDocumentation$outboundSchema: z.ZodType<
  ListAllRefundsDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllRefundsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsDocumentation$ {
  /** @deprecated use `ListAllRefundsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsDocumentation$inboundSchema;
  /** @deprecated use `ListAllRefundsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsDocumentation$outboundSchema;
  /** @deprecated use `ListAllRefundsDocumentation$Outbound` instead. */
  export type Outbound = ListAllRefundsDocumentation$Outbound;
}

export function listAllRefundsDocumentationToJSON(
  listAllRefundsDocumentation: ListAllRefundsDocumentation,
): string {
  return JSON.stringify(
    ListAllRefundsDocumentation$outboundSchema.parse(
      listAllRefundsDocumentation,
    ),
  );
}

export function listAllRefundsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsLinks$inboundSchema: z.ZodType<
  ListAllRefundsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllRefundsSelf$inboundSchema),
  previous: z.nullable(z.lazy(() => ListAllRefundsPrevious$inboundSchema)),
  next: z.nullable(z.lazy(() => ListAllRefundsNext$inboundSchema)),
  documentation: z.lazy(() => ListAllRefundsDocumentation$inboundSchema),
});

/** @internal */
export type ListAllRefundsLinks$Outbound = {
  self: ListAllRefundsSelf$Outbound;
  previous: ListAllRefundsPrevious$Outbound | null;
  next: ListAllRefundsNext$Outbound | null;
  documentation: ListAllRefundsDocumentation$Outbound;
};

/** @internal */
export const ListAllRefundsLinks$outboundSchema: z.ZodType<
  ListAllRefundsLinks$Outbound,
  z.ZodTypeDef,
  ListAllRefundsLinks
> = z.object({
  self: z.lazy(() => ListAllRefundsSelf$outboundSchema),
  previous: z.nullable(z.lazy(() => ListAllRefundsPrevious$outboundSchema)),
  next: z.nullable(z.lazy(() => ListAllRefundsNext$outboundSchema)),
  documentation: z.lazy(() => ListAllRefundsDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsLinks$ {
  /** @deprecated use `ListAllRefundsLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsLinks$inboundSchema;
  /** @deprecated use `ListAllRefundsLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsLinks$outboundSchema;
  /** @deprecated use `ListAllRefundsLinks$Outbound` instead. */
  export type Outbound = ListAllRefundsLinks$Outbound;
}

export function listAllRefundsLinksToJSON(
  listAllRefundsLinks: ListAllRefundsLinks,
): string {
  return JSON.stringify(
    ListAllRefundsLinks$outboundSchema.parse(listAllRefundsLinks),
  );
}

export function listAllRefundsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsLinks' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsResponse$inboundSchema: z.ZodType<
  ListAllRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListAllRefundsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListAllRefundsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllRefundsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListAllRefundsEmbedded$Outbound | undefined;
  _links?: ListAllRefundsLinks$Outbound | undefined;
};

/** @internal */
export const ListAllRefundsResponse$outboundSchema: z.ZodType<
  ListAllRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListAllRefundsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListAllRefundsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListAllRefundsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsResponse$ {
  /** @deprecated use `ListAllRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsResponse$inboundSchema;
  /** @deprecated use `ListAllRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsResponse$outboundSchema;
  /** @deprecated use `ListAllRefundsResponse$Outbound` instead. */
  export type Outbound = ListAllRefundsResponse$Outbound;
}

export function listAllRefundsResponseToJSON(
  listAllRefundsResponse: ListAllRefundsResponse,
): string {
  return JSON.stringify(
    ListAllRefundsResponse$outboundSchema.parse(listAllRefundsResponse),
  );
}

export function listAllRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsResponse' from JSON`,
  );
}
