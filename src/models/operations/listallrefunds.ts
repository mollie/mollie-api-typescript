/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListAllRefundsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.Sorting | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve the resources for.
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
   * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListAllRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds: Array<models.EntityRefundResponse>;
};

/**
 * A list of refund objects
 */
export type ListAllRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListAllRefundsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListAllRefundsRequest$inboundSchema: z.ZodType<
  ListAllRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: models.Sorting$inboundSchema.optional(),
  embed: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListAllRefundsRequest$Outbound = {
  from?: string | undefined;
  limit?: number | null | undefined;
  sort?: string | undefined;
  embed?: string | null | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListAllRefundsRequest$outboundSchema: z.ZodType<
  ListAllRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListAllRefundsRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: models.Sorting$outboundSchema.optional(),
  embed: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsRequest$ {
  /** @deprecated use `ListAllRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsRequest$inboundSchema;
  /** @deprecated use `ListAllRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsRequest$outboundSchema;
  /** @deprecated use `ListAllRefundsRequest$Outbound` instead. */
  export type Outbound = ListAllRefundsRequest$Outbound;
}

export function listAllRefundsRequestToJSON(
  listAllRefundsRequest: ListAllRefundsRequest,
): string {
  return JSON.stringify(
    ListAllRefundsRequest$outboundSchema.parse(listAllRefundsRequest),
  );
}

export function listAllRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsEmbedded$inboundSchema: z.ZodType<
  ListAllRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(models.EntityRefundResponse$inboundSchema),
});

/** @internal */
export type ListAllRefundsEmbedded$Outbound = {
  refunds: Array<models.EntityRefundResponse$Outbound>;
};

/** @internal */
export const ListAllRefundsEmbedded$outboundSchema: z.ZodType<
  ListAllRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllRefundsEmbedded
> = z.object({
  refunds: z.array(models.EntityRefundResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsEmbedded$ {
  /** @deprecated use `ListAllRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsEmbedded$inboundSchema;
  /** @deprecated use `ListAllRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsEmbedded$outboundSchema;
  /** @deprecated use `ListAllRefundsEmbedded$Outbound` instead. */
  export type Outbound = ListAllRefundsEmbedded$Outbound;
}

export function listAllRefundsEmbeddedToJSON(
  listAllRefundsEmbedded: ListAllRefundsEmbedded,
): string {
  return JSON.stringify(
    ListAllRefundsEmbedded$outboundSchema.parse(listAllRefundsEmbedded),
  );
}

export function listAllRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListAllRefundsResponse$inboundSchema: z.ZodType<
  ListAllRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListAllRefundsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllRefundsResponse$Outbound = {
  count: number;
  _embedded: ListAllRefundsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListAllRefundsResponse$outboundSchema: z.ZodType<
  ListAllRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListAllRefundsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListAllRefundsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllRefundsResponse$ {
  /** @deprecated use `ListAllRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllRefundsResponse$inboundSchema;
  /** @deprecated use `ListAllRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllRefundsResponse$outboundSchema;
  /** @deprecated use `ListAllRefundsResponse$Outbound` instead. */
  export type Outbound = ListAllRefundsResponse$Outbound;
}

export function listAllRefundsResponseToJSON(
  listAllRefundsResponse: ListAllRefundsResponse,
): string {
  return JSON.stringify(
    ListAllRefundsResponse$outboundSchema.parse(listAllRefundsResponse),
  );
}

export function listAllRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllRefundsResponse' from JSON`,
  );
}
