/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelPaymentRequestBody = {
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type CancelPaymentRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  requestBody?: CancelPaymentRequestBody | undefined;
};

/** @internal */
export const CancelPaymentRequestBody$inboundSchema: z.ZodType<
  CancelPaymentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CancelPaymentRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CancelPaymentRequestBody$outboundSchema: z.ZodType<
  CancelPaymentRequestBody$Outbound,
  z.ZodTypeDef,
  CancelPaymentRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRequestBody$ {
  /** @deprecated use `CancelPaymentRequestBody$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRequestBody$inboundSchema;
  /** @deprecated use `CancelPaymentRequestBody$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRequestBody$outboundSchema;
  /** @deprecated use `CancelPaymentRequestBody$Outbound` instead. */
  export type Outbound = CancelPaymentRequestBody$Outbound;
}

export function cancelPaymentRequestBodyToJSON(
  cancelPaymentRequestBody: CancelPaymentRequestBody,
): string {
  return JSON.stringify(
    CancelPaymentRequestBody$outboundSchema.parse(cancelPaymentRequestBody),
  );
}

export function cancelPaymentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRequestBody' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRequest$inboundSchema: z.ZodType<
  CancelPaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  RequestBody: z.lazy(() => CancelPaymentRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CancelPaymentRequest$Outbound = {
  paymentId: string;
  RequestBody?: CancelPaymentRequestBody$Outbound | undefined;
};

/** @internal */
export const CancelPaymentRequest$outboundSchema: z.ZodType<
  CancelPaymentRequest$Outbound,
  z.ZodTypeDef,
  CancelPaymentRequest
> = z.object({
  paymentId: z.string(),
  requestBody: z.lazy(() => CancelPaymentRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRequest$ {
  /** @deprecated use `CancelPaymentRequest$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRequest$inboundSchema;
  /** @deprecated use `CancelPaymentRequest$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRequest$outboundSchema;
  /** @deprecated use `CancelPaymentRequest$Outbound` instead. */
  export type Outbound = CancelPaymentRequest$Outbound;
}

export function cancelPaymentRequestToJSON(
  cancelPaymentRequest: CancelPaymentRequest,
): string {
  return JSON.stringify(
    CancelPaymentRequest$outboundSchema.parse(cancelPaymentRequest),
  );
}

export function cancelPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRequest' from JSON`,
  );
}
