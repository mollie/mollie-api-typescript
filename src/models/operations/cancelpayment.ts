/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelPaymentRequestBody = {
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type CancelPaymentRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  requestBody?: CancelPaymentRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CancelPaymentUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type CancelPaymentUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CancelPaymentUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CancelPaymentNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CancelPaymentNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CancelPaymentNotFoundDocumentation;
};

/**
 * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
 *
 * @remarks
 *
 * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
 *
 * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
 */
export type CancelPaymentAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
 */
export type CancelPaymentAmountRefunded = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The remaining amount that can be refunded. Only available when refunds are available for this payment.
 */
export type CancelPaymentAmountRemaining = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already captured for this payment. Only available when this payment supports captures.
 */
export type CancelPaymentAmountCaptured = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
 */
export type CancelPaymentAmountChargedBack = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
 *
 * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
 */
export type CancelPaymentSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type CancelPaymentUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
 */
export type CancelPaymentDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type CancelPaymentTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * @remarks
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type CancelPaymentVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const CancelPaymentCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type CancelPaymentCategory = ClosedEnum<typeof CancelPaymentCategory>;

/**
 * Total amount and currency of the recurring item.
 */
export type CancelPaymentRecurringAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
 */
export type CancelPaymentRecurring = {
  /**
   * A description of the recurring item. If not present, the main description of the item will be used.
   */
  description?: string | undefined;
  /**
   * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
   *
   * @remarks
   *
   * Possible values: `... months` `... weeks` `... days`
   */
  interval: string;
  /**
   * Total amount and currency of the recurring item.
   */
  amount?: CancelPaymentRecurringAmount | undefined;
  /**
   * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
   */
  times?: number | undefined;
  /**
   * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
   */
  startDate?: string | null | undefined;
};

export type CancelPaymentLine = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   *
   * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
   */
  type?: string | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: CancelPaymentUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
   */
  discountAmount?: CancelPaymentDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: CancelPaymentTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * @remarks
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: CancelPaymentVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
   */
  categories?: Array<CancelPaymentCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
  /**
   * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
   */
  recurring?: CancelPaymentRecurring | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type CancelPaymentBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 */
export type CancelPaymentShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

export type CancelPaymentMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CancelPaymentMetadataUnion =
  | CancelPaymentMetadata
  | string
  | Array<string>;

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
 */
export type CancelPaymentApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
 *
 * @remarks
 *
 * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
 *
 * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
 */
export type CancelPaymentApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
   */
  amount?: CancelPaymentApplicationFeeAmount | undefined;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
   */
  description?: string | undefined;
};

/**
 * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
 */
export type CancelPaymentRoutingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination of this portion of the payment.
 */
export type CancelPaymentDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   *
   * @remarks
   *
   * Possible values: `organization`
   */
  type: string;
  /**
   * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
   */
  organizationId: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CancelPaymentRoutingSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that belong to this route.
 */
export type CancelPaymentPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CancelPaymentRoutingLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: CancelPaymentRoutingSelf;
  /**
   * The API resource URL of the [payment](get-payment) that belong to this route.
   */
  payment: CancelPaymentPayment;
};

export type CancelPaymentRouting = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
   */
  amount: CancelPaymentRoutingAmount;
  /**
   * The destination of this portion of the payment.
   */
  destination: CancelPaymentDestination;
  /**
   * The date and time when the route was created. The date is given in ISO 8601 format.
   */
  createdAt: string;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
   *
   * @remarks
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: CancelPaymentRoutingLinks;
};

/**
 * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
 *
 * @remarks
 *
 * You can find more information about the possible values of this object on [this page](status-reasons).**
 */
export type CancelPaymentStatusReason = {
  /**
   * A machine-readable code that indicates the reason for the payment's status.
   */
  code: string;
  /**
   * A description of the status reason, localized according to the payment `locale`.
   */
  message: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CancelPaymentSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type CancelPaymentCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
 */
export type CancelPaymentMobileAppCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
 *
 * @remarks
 *
 * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
 *
 * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
 */
export type CancelPaymentChangePaymentState = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the payment in the Mollie Dashboard.
 */
export type CancelPaymentDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
 */
export type CancelPaymentRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
 */
export type CancelPaymentChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
 */
export type CancelPaymentCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
 */
export type CancelPaymentSettlement = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer).
 */
export type CancelPaymentCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [mandate](get-mandate).
 */
export type CancelPaymentMandate = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [subscription](get-subscription).
 */
export type CancelPaymentSubscription = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
 */
export type CancelPaymentOrder = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
 */
export type CancelPaymentTerminal = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CancelPaymentDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CancelPaymentLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: CancelPaymentSelf;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  checkout?: CancelPaymentCheckout | undefined;
  /**
   * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
   */
  mobileAppCheckout?: CancelPaymentMobileAppCheckout | undefined;
  /**
   * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
   *
   * @remarks
   *
   * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
   *
   * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
   */
  changePaymentState?: CancelPaymentChangePaymentState | undefined;
  /**
   * Direct link to the payment in the Mollie Dashboard.
   */
  dashboard: CancelPaymentDashboard;
  /**
   * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
   */
  refunds?: CancelPaymentRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
   */
  chargebacks?: CancelPaymentChargebacks | undefined;
  /**
   * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
   */
  captures?: CancelPaymentCaptures | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
   */
  settlement?: CancelPaymentSettlement | undefined;
  /**
   * The API resource URL of the [customer](get-customer).
   */
  customer?: CancelPaymentCustomer | undefined;
  /**
   * The API resource URL of the [mandate](get-mandate).
   */
  mandate?: CancelPaymentMandate | undefined;
  /**
   * The API resource URL of the [subscription](get-subscription).
   */
  subscription?: CancelPaymentSubscription | undefined;
  /**
   * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
   */
  order?: CancelPaymentOrder | undefined;
  /**
   * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
   */
  terminal?: CancelPaymentTerminal | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: CancelPaymentDocumentation | undefined;
};

/**
 * The canceled payment object.
 */
export type CancelPaymentResponse = {
  /**
   * Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The description of the payment. This will be shown to your customer on their card or bank statement when possible. We truncate the description automatically according to the limits of the used payment method. The description is also visible in any exports you generate.
   *
   * @remarks
   *
   * We recommend you use a unique identifier so that you can always link the payment to the order in your back office. This is particularly useful for bookkeeping.
   *
   * The maximum length of the description field differs per payment method, with the absolute maximum being 255 characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
   */
  description: string;
  /**
   * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
   *
   * @remarks
   *
   * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
   *
   * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
   */
  amount: CancelPaymentAmount;
  /**
   * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
   */
  amountRefunded?: CancelPaymentAmountRefunded | undefined;
  /**
   * The remaining amount that can be refunded. Only available when refunds are available for this payment.
   */
  amountRemaining?: CancelPaymentAmountRemaining | undefined;
  /**
   * The total amount that is already captured for this payment. Only available when this payment supports captures.
   */
  amountCaptured?: CancelPaymentAmountCaptured | undefined;
  /**
   * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
   */
  amountChargedBack?: CancelPaymentAmountChargedBack | undefined;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
   *
   * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
   */
  settlementAmount?: CancelPaymentSettlementAmount | undefined;
  /**
   * The URL your customer will be redirected to after the payment process.
   *
   * @remarks
   *
   * It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the right page referencing the order when your customer returns.
   *
   * The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for Apple Pay payments with an `applePayPaymentToken`.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not provided, the customer will be redirected to the `redirectUrl` instead — see above.
   *
   * @remarks
   *
   * Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle payment cancellations.
   */
  cancelUrl?: string | null | undefined;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
   */
  webhookUrl?: string | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<CancelPaymentLine> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: CancelPaymentBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   */
  shippingAddress?: CancelPaymentShippingAddress | undefined;
  /**
   * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897 locale, but our hosted payment pages currently only support the specified languages.
   *
   * @remarks
   *
   * For bank transfer payments specifically, the locale will determine the target bank account the customer has to transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the customer use a local bank account greatly increases the conversion and speed of payment.
   */
  locale?: string | null | undefined;
  /**
   * This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This field is omitted if the country code was not detected.
   */
  countryCode?: string | null | undefined;
  /**
   * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment method and your customer will skip the selection screen and is sent directly to the chosen payment method. The parameter enables you to fully integrate the payment method selection into your website.
   *
   * @remarks
   *
   * You can also specify the methods in an array. By doing so we will still show the payment method selection screen but will only show the methods specified in the array. For example, you can use this functionality to only show payment methods from a specific country to your customer `['bancontact', 'belfius']`.
   *
   * Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `mbway` `multibanco` `mybank` `payconiq` `paypal` `paysafecard` `pointofsale` `przelewy24` `riverty` `satispay` `swish` `trustly` `twint` `voucher`
   */
  method?: string | null | undefined;
  /**
   * For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT rates you have used for the order to ensure your customer's country matches the VAT country.
   *
   * @remarks
   *
   * Use this parameter to restrict the payment methods available to your customer to those from a single country.
   *
   * If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
   *
   * The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
   */
  restrictPaymentMethodsToCountry?: string | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: CancelPaymentMetadata | string | Array<string> | null | undefined;
  /**
   * Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/) and capture at a later time.
   *
   * @remarks
   *
   * This field needs to be set to `manual` for method `riverty`.
   *
   * Possible values: `automatic` `manual` (default: `automatic`)
   */
  captureMode?: string | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a later point either be 'captured' or canceled.
   *
   * By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For example `8 hours` or `2 days`.
   *
   * To schedule an automatic capture, the `captureMode` must be set to `automatic`.
   *
   * The maximum delay is 7 days (168 hours).
   *
   * Possible values: `... hours` `... days`
   */
  captureDelay?: string | null | undefined;
  /**
   * Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
   */
  captureBefore?: string | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * @remarks
   *
   * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
   *
   * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
   */
  applicationFee?: CancelPaymentApplicationFee | null | undefined;
  /**
   * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
   *
   * @remarks
   *
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * If you create payments on your own account that you want to split between yourself and one or more connected merchants, you can use this `routing` parameter to route the payment accordingly.
   *
   * The `routing` parameter should contain an array of objects, with each object describing the destination for a specific portion of the payment.
   *
   * It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total payment amount have been routed, the amount left will be routed to the current organization automatically.
   *
   * If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee` parameter.
   */
  routing?: Array<CancelPaymentRouting> | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * Indicate which part of a recurring sequence this payment is for.
   *
   * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place on their account in the future.
   *
   * If set to `recurring`, the customer's card is charged automatically.
   *
   * Defaults to `oneoff`, which is a regular non-recurring payment.
   *
   * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account are set up correctly for recurring payments.
   *
   * Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
   */
  sequenceType: string | null;
  /**
   * If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will be added to the response.
   */
  subscriptionId?: string | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of the customer's accounts should be credited.
   */
  mandateId?: string | null | undefined;
  /**
   * The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring payments, but can also be used on regular payments to enable single-click payments.
   *
   * @remarks
   *
   * If `sequenceType` is set to `recurring`, this field is required.
   */
  customerId?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and Organization tokens, the `profileId` is required.
   *
   * For more information, see [Authentication](authentication).
   */
  profileId: string;
  /**
   * The identifier referring to the [settlement](get-settlement) this payment was settled with.
   */
  settlementId?: string | null | undefined;
  /**
   * If the payment was created for an [order](get-order), the ID of that order will be part of the response.
   */
  orderId?: string | null | undefined;
  /**
   * The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which statuses occur at what point.
   *
   * @remarks
   *
   * Possible values: `open` `pending` `authorized` `paid` `canceled` `expired` `failed`
   */
  status: string;
  /**
   * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
   *
   * @remarks
   *
   * You can find more information about the possible values of this object on [this page](status-reasons).**
   */
  statusReason?: CancelPaymentStatusReason | null | undefined;
  /**
   * Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
   */
  isCancelable?: boolean | null | undefined;
  /**
   * An object containing payment details collected during the payment process. For example, details may include the customer's card or bank details and a payment reference. For the full list of details, please refer to the [method-specific parameters](extra-payment-parameters) guide.
   */
  details?: { [k: string]: any } | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is not authorized (yet).
   */
  authorizedAt?: string | null | undefined;
  /**
   * The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not completed (yet).
   */
  paidAt?: string | null | undefined;
  /**
   * The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not canceled (yet).
   */
  canceledAt?: string | null | undefined;
  /**
   * The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no longer expire.
   */
  expiresAt?: string | null | undefined;
  /**
   * The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not expire (yet).
   */
  expiredAt?: string | null | undefined;
  /**
   * The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail (yet).
   */
  failedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: CancelPaymentLinks;
};

/** @internal */
export const CancelPaymentRequestBody$inboundSchema: z.ZodType<
  CancelPaymentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CancelPaymentRequestBody$Outbound = {
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CancelPaymentRequestBody$outboundSchema: z.ZodType<
  CancelPaymentRequestBody$Outbound,
  z.ZodTypeDef,
  CancelPaymentRequestBody
> = z.object({
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRequestBody$ {
  /** @deprecated use `CancelPaymentRequestBody$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRequestBody$inboundSchema;
  /** @deprecated use `CancelPaymentRequestBody$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRequestBody$outboundSchema;
  /** @deprecated use `CancelPaymentRequestBody$Outbound` instead. */
  export type Outbound = CancelPaymentRequestBody$Outbound;
}

export function cancelPaymentRequestBodyToJSON(
  cancelPaymentRequestBody: CancelPaymentRequestBody,
): string {
  return JSON.stringify(
    CancelPaymentRequestBody$outboundSchema.parse(cancelPaymentRequestBody),
  );
}

export function cancelPaymentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRequestBody' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRequest$inboundSchema: z.ZodType<
  CancelPaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  RequestBody: z.lazy(() => CancelPaymentRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CancelPaymentRequest$Outbound = {
  paymentId: string;
  RequestBody?: CancelPaymentRequestBody$Outbound | undefined;
};

/** @internal */
export const CancelPaymentRequest$outboundSchema: z.ZodType<
  CancelPaymentRequest$Outbound,
  z.ZodTypeDef,
  CancelPaymentRequest
> = z.object({
  paymentId: z.string(),
  requestBody: z.lazy(() => CancelPaymentRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRequest$ {
  /** @deprecated use `CancelPaymentRequest$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRequest$inboundSchema;
  /** @deprecated use `CancelPaymentRequest$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRequest$outboundSchema;
  /** @deprecated use `CancelPaymentRequest$Outbound` instead. */
  export type Outbound = CancelPaymentRequest$Outbound;
}

export function cancelPaymentRequestToJSON(
  cancelPaymentRequest: CancelPaymentRequest,
): string {
  return JSON.stringify(
    CancelPaymentRequest$outboundSchema.parse(cancelPaymentRequest),
  );
}

export function cancelPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRequest' from JSON`,
  );
}

/** @internal */
export const CancelPaymentUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    CancelPaymentUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type CancelPaymentUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    CancelPaymentUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    CancelPaymentUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentUnprocessableEntityDocumentation$ {
  /** @deprecated use `CancelPaymentUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CancelPaymentUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `CancelPaymentUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CancelPaymentUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `CancelPaymentUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = CancelPaymentUnprocessableEntityDocumentation$Outbound;
}

export function cancelPaymentUnprocessableEntityDocumentationToJSON(
  cancelPaymentUnprocessableEntityDocumentation:
    CancelPaymentUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    CancelPaymentUnprocessableEntityDocumentation$outboundSchema.parse(
      cancelPaymentUnprocessableEntityDocumentation,
    ),
  );
}

export function cancelPaymentUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CancelPaymentUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CancelPaymentUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CancelPaymentUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const CancelPaymentUnprocessableEntityLinks$inboundSchema: z.ZodType<
  CancelPaymentUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CancelPaymentUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type CancelPaymentUnprocessableEntityLinks$Outbound = {
  documentation: CancelPaymentUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const CancelPaymentUnprocessableEntityLinks$outboundSchema: z.ZodType<
  CancelPaymentUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  CancelPaymentUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    CancelPaymentUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentUnprocessableEntityLinks$ {
  /** @deprecated use `CancelPaymentUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    CancelPaymentUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `CancelPaymentUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    CancelPaymentUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `CancelPaymentUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = CancelPaymentUnprocessableEntityLinks$Outbound;
}

export function cancelPaymentUnprocessableEntityLinksToJSON(
  cancelPaymentUnprocessableEntityLinks: CancelPaymentUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    CancelPaymentUnprocessableEntityLinks$outboundSchema.parse(
      cancelPaymentUnprocessableEntityLinks,
    ),
  );
}

export function cancelPaymentUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CancelPaymentUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const CancelPaymentNotFoundDocumentation$inboundSchema: z.ZodType<
  CancelPaymentNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentNotFoundDocumentation$outboundSchema: z.ZodType<
  CancelPaymentNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CancelPaymentNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentNotFoundDocumentation$ {
  /** @deprecated use `CancelPaymentNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CancelPaymentNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CancelPaymentNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CancelPaymentNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CancelPaymentNotFoundDocumentation$Outbound;
}

export function cancelPaymentNotFoundDocumentationToJSON(
  cancelPaymentNotFoundDocumentation: CancelPaymentNotFoundDocumentation,
): string {
  return JSON.stringify(
    CancelPaymentNotFoundDocumentation$outboundSchema.parse(
      cancelPaymentNotFoundDocumentation,
    ),
  );
}

export function cancelPaymentNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CancelPaymentNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CancelPaymentNotFoundLinks$inboundSchema: z.ZodType<
  CancelPaymentNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => CancelPaymentNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type CancelPaymentNotFoundLinks$Outbound = {
  documentation: CancelPaymentNotFoundDocumentation$Outbound;
};

/** @internal */
export const CancelPaymentNotFoundLinks$outboundSchema: z.ZodType<
  CancelPaymentNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CancelPaymentNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    CancelPaymentNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentNotFoundLinks$ {
  /** @deprecated use `CancelPaymentNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentNotFoundLinks$inboundSchema;
  /** @deprecated use `CancelPaymentNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentNotFoundLinks$outboundSchema;
  /** @deprecated use `CancelPaymentNotFoundLinks$Outbound` instead. */
  export type Outbound = CancelPaymentNotFoundLinks$Outbound;
}

export function cancelPaymentNotFoundLinksToJSON(
  cancelPaymentNotFoundLinks: CancelPaymentNotFoundLinks,
): string {
  return JSON.stringify(
    CancelPaymentNotFoundLinks$outboundSchema.parse(cancelPaymentNotFoundLinks),
  );
}

export function cancelPaymentNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CancelPaymentAmount$inboundSchema: z.ZodType<
  CancelPaymentAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentAmount$outboundSchema: z.ZodType<
  CancelPaymentAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentAmount$ {
  /** @deprecated use `CancelPaymentAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentAmount$inboundSchema;
  /** @deprecated use `CancelPaymentAmount$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentAmount$outboundSchema;
  /** @deprecated use `CancelPaymentAmount$Outbound` instead. */
  export type Outbound = CancelPaymentAmount$Outbound;
}

export function cancelPaymentAmountToJSON(
  cancelPaymentAmount: CancelPaymentAmount,
): string {
  return JSON.stringify(
    CancelPaymentAmount$outboundSchema.parse(cancelPaymentAmount),
  );
}

export function cancelPaymentAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentAmountRefunded$inboundSchema: z.ZodType<
  CancelPaymentAmountRefunded,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentAmountRefunded$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentAmountRefunded$outboundSchema: z.ZodType<
  CancelPaymentAmountRefunded$Outbound,
  z.ZodTypeDef,
  CancelPaymentAmountRefunded
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentAmountRefunded$ {
  /** @deprecated use `CancelPaymentAmountRefunded$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentAmountRefunded$inboundSchema;
  /** @deprecated use `CancelPaymentAmountRefunded$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentAmountRefunded$outboundSchema;
  /** @deprecated use `CancelPaymentAmountRefunded$Outbound` instead. */
  export type Outbound = CancelPaymentAmountRefunded$Outbound;
}

export function cancelPaymentAmountRefundedToJSON(
  cancelPaymentAmountRefunded: CancelPaymentAmountRefunded,
): string {
  return JSON.stringify(
    CancelPaymentAmountRefunded$outboundSchema.parse(
      cancelPaymentAmountRefunded,
    ),
  );
}

export function cancelPaymentAmountRefundedFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentAmountRefunded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentAmountRefunded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentAmountRefunded' from JSON`,
  );
}

/** @internal */
export const CancelPaymentAmountRemaining$inboundSchema: z.ZodType<
  CancelPaymentAmountRemaining,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentAmountRemaining$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentAmountRemaining$outboundSchema: z.ZodType<
  CancelPaymentAmountRemaining$Outbound,
  z.ZodTypeDef,
  CancelPaymentAmountRemaining
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentAmountRemaining$ {
  /** @deprecated use `CancelPaymentAmountRemaining$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentAmountRemaining$inboundSchema;
  /** @deprecated use `CancelPaymentAmountRemaining$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentAmountRemaining$outboundSchema;
  /** @deprecated use `CancelPaymentAmountRemaining$Outbound` instead. */
  export type Outbound = CancelPaymentAmountRemaining$Outbound;
}

export function cancelPaymentAmountRemainingToJSON(
  cancelPaymentAmountRemaining: CancelPaymentAmountRemaining,
): string {
  return JSON.stringify(
    CancelPaymentAmountRemaining$outboundSchema.parse(
      cancelPaymentAmountRemaining,
    ),
  );
}

export function cancelPaymentAmountRemainingFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentAmountRemaining, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentAmountRemaining$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentAmountRemaining' from JSON`,
  );
}

/** @internal */
export const CancelPaymentAmountCaptured$inboundSchema: z.ZodType<
  CancelPaymentAmountCaptured,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentAmountCaptured$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentAmountCaptured$outboundSchema: z.ZodType<
  CancelPaymentAmountCaptured$Outbound,
  z.ZodTypeDef,
  CancelPaymentAmountCaptured
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentAmountCaptured$ {
  /** @deprecated use `CancelPaymentAmountCaptured$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentAmountCaptured$inboundSchema;
  /** @deprecated use `CancelPaymentAmountCaptured$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentAmountCaptured$outboundSchema;
  /** @deprecated use `CancelPaymentAmountCaptured$Outbound` instead. */
  export type Outbound = CancelPaymentAmountCaptured$Outbound;
}

export function cancelPaymentAmountCapturedToJSON(
  cancelPaymentAmountCaptured: CancelPaymentAmountCaptured,
): string {
  return JSON.stringify(
    CancelPaymentAmountCaptured$outboundSchema.parse(
      cancelPaymentAmountCaptured,
    ),
  );
}

export function cancelPaymentAmountCapturedFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentAmountCaptured, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentAmountCaptured$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentAmountCaptured' from JSON`,
  );
}

/** @internal */
export const CancelPaymentAmountChargedBack$inboundSchema: z.ZodType<
  CancelPaymentAmountChargedBack,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentAmountChargedBack$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentAmountChargedBack$outboundSchema: z.ZodType<
  CancelPaymentAmountChargedBack$Outbound,
  z.ZodTypeDef,
  CancelPaymentAmountChargedBack
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentAmountChargedBack$ {
  /** @deprecated use `CancelPaymentAmountChargedBack$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentAmountChargedBack$inboundSchema;
  /** @deprecated use `CancelPaymentAmountChargedBack$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentAmountChargedBack$outboundSchema;
  /** @deprecated use `CancelPaymentAmountChargedBack$Outbound` instead. */
  export type Outbound = CancelPaymentAmountChargedBack$Outbound;
}

export function cancelPaymentAmountChargedBackToJSON(
  cancelPaymentAmountChargedBack: CancelPaymentAmountChargedBack,
): string {
  return JSON.stringify(
    CancelPaymentAmountChargedBack$outboundSchema.parse(
      cancelPaymentAmountChargedBack,
    ),
  );
}

export function cancelPaymentAmountChargedBackFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentAmountChargedBack, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentAmountChargedBack$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentAmountChargedBack' from JSON`,
  );
}

/** @internal */
export const CancelPaymentSettlementAmount$inboundSchema: z.ZodType<
  CancelPaymentSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentSettlementAmount$outboundSchema: z.ZodType<
  CancelPaymentSettlementAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentSettlementAmount$ {
  /** @deprecated use `CancelPaymentSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentSettlementAmount$inboundSchema;
  /** @deprecated use `CancelPaymentSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentSettlementAmount$outboundSchema;
  /** @deprecated use `CancelPaymentSettlementAmount$Outbound` instead. */
  export type Outbound = CancelPaymentSettlementAmount$Outbound;
}

export function cancelPaymentSettlementAmountToJSON(
  cancelPaymentSettlementAmount: CancelPaymentSettlementAmount,
): string {
  return JSON.stringify(
    CancelPaymentSettlementAmount$outboundSchema.parse(
      cancelPaymentSettlementAmount,
    ),
  );
}

export function cancelPaymentSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentSettlementAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentUnitPrice$inboundSchema: z.ZodType<
  CancelPaymentUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentUnitPrice$outboundSchema: z.ZodType<
  CancelPaymentUnitPrice$Outbound,
  z.ZodTypeDef,
  CancelPaymentUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentUnitPrice$ {
  /** @deprecated use `CancelPaymentUnitPrice$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentUnitPrice$inboundSchema;
  /** @deprecated use `CancelPaymentUnitPrice$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentUnitPrice$outboundSchema;
  /** @deprecated use `CancelPaymentUnitPrice$Outbound` instead. */
  export type Outbound = CancelPaymentUnitPrice$Outbound;
}

export function cancelPaymentUnitPriceToJSON(
  cancelPaymentUnitPrice: CancelPaymentUnitPrice,
): string {
  return JSON.stringify(
    CancelPaymentUnitPrice$outboundSchema.parse(cancelPaymentUnitPrice),
  );
}

export function cancelPaymentUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentUnitPrice' from JSON`,
  );
}

/** @internal */
export const CancelPaymentDiscountAmount$inboundSchema: z.ZodType<
  CancelPaymentDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentDiscountAmount$outboundSchema: z.ZodType<
  CancelPaymentDiscountAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentDiscountAmount$ {
  /** @deprecated use `CancelPaymentDiscountAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentDiscountAmount$inboundSchema;
  /** @deprecated use `CancelPaymentDiscountAmount$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentDiscountAmount$outboundSchema;
  /** @deprecated use `CancelPaymentDiscountAmount$Outbound` instead. */
  export type Outbound = CancelPaymentDiscountAmount$Outbound;
}

export function cancelPaymentDiscountAmountToJSON(
  cancelPaymentDiscountAmount: CancelPaymentDiscountAmount,
): string {
  return JSON.stringify(
    CancelPaymentDiscountAmount$outboundSchema.parse(
      cancelPaymentDiscountAmount,
    ),
  );
}

export function cancelPaymentDiscountAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentDiscountAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentDiscountAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentDiscountAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentTotalAmount$inboundSchema: z.ZodType<
  CancelPaymentTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentTotalAmount$outboundSchema: z.ZodType<
  CancelPaymentTotalAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentTotalAmount$ {
  /** @deprecated use `CancelPaymentTotalAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentTotalAmount$inboundSchema;
  /** @deprecated use `CancelPaymentTotalAmount$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentTotalAmount$outboundSchema;
  /** @deprecated use `CancelPaymentTotalAmount$Outbound` instead. */
  export type Outbound = CancelPaymentTotalAmount$Outbound;
}

export function cancelPaymentTotalAmountToJSON(
  cancelPaymentTotalAmount: CancelPaymentTotalAmount,
): string {
  return JSON.stringify(
    CancelPaymentTotalAmount$outboundSchema.parse(cancelPaymentTotalAmount),
  );
}

export function cancelPaymentTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentTotalAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentVatAmount$inboundSchema: z.ZodType<
  CancelPaymentVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentVatAmount$outboundSchema: z.ZodType<
  CancelPaymentVatAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentVatAmount$ {
  /** @deprecated use `CancelPaymentVatAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentVatAmount$inboundSchema;
  /** @deprecated use `CancelPaymentVatAmount$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentVatAmount$outboundSchema;
  /** @deprecated use `CancelPaymentVatAmount$Outbound` instead. */
  export type Outbound = CancelPaymentVatAmount$Outbound;
}

export function cancelPaymentVatAmountToJSON(
  cancelPaymentVatAmount: CancelPaymentVatAmount,
): string {
  return JSON.stringify(
    CancelPaymentVatAmount$outboundSchema.parse(cancelPaymentVatAmount),
  );
}

export function cancelPaymentVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentVatAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentCategory$inboundSchema: z.ZodNativeEnum<
  typeof CancelPaymentCategory
> = z.nativeEnum(CancelPaymentCategory);

/** @internal */
export const CancelPaymentCategory$outboundSchema: z.ZodNativeEnum<
  typeof CancelPaymentCategory
> = CancelPaymentCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentCategory$ {
  /** @deprecated use `CancelPaymentCategory$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentCategory$inboundSchema;
  /** @deprecated use `CancelPaymentCategory$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentCategory$outboundSchema;
}

/** @internal */
export const CancelPaymentRecurringAmount$inboundSchema: z.ZodType<
  CancelPaymentRecurringAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentRecurringAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentRecurringAmount$outboundSchema: z.ZodType<
  CancelPaymentRecurringAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentRecurringAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRecurringAmount$ {
  /** @deprecated use `CancelPaymentRecurringAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRecurringAmount$inboundSchema;
  /** @deprecated use `CancelPaymentRecurringAmount$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRecurringAmount$outboundSchema;
  /** @deprecated use `CancelPaymentRecurringAmount$Outbound` instead. */
  export type Outbound = CancelPaymentRecurringAmount$Outbound;
}

export function cancelPaymentRecurringAmountToJSON(
  cancelPaymentRecurringAmount: CancelPaymentRecurringAmount,
): string {
  return JSON.stringify(
    CancelPaymentRecurringAmount$outboundSchema.parse(
      cancelPaymentRecurringAmount,
    ),
  );
}

export function cancelPaymentRecurringAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRecurringAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRecurringAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRecurringAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRecurring$inboundSchema: z.ZodType<
  CancelPaymentRecurring,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => CancelPaymentRecurringAmount$inboundSchema).optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type CancelPaymentRecurring$Outbound = {
  description?: string | undefined;
  interval: string;
  amount?: CancelPaymentRecurringAmount$Outbound | undefined;
  times?: number | undefined;
  startDate?: string | null | undefined;
};

/** @internal */
export const CancelPaymentRecurring$outboundSchema: z.ZodType<
  CancelPaymentRecurring$Outbound,
  z.ZodTypeDef,
  CancelPaymentRecurring
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => CancelPaymentRecurringAmount$outboundSchema).optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRecurring$ {
  /** @deprecated use `CancelPaymentRecurring$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRecurring$inboundSchema;
  /** @deprecated use `CancelPaymentRecurring$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRecurring$outboundSchema;
  /** @deprecated use `CancelPaymentRecurring$Outbound` instead. */
  export type Outbound = CancelPaymentRecurring$Outbound;
}

export function cancelPaymentRecurringToJSON(
  cancelPaymentRecurring: CancelPaymentRecurring,
): string {
  return JSON.stringify(
    CancelPaymentRecurring$outboundSchema.parse(cancelPaymentRecurring),
  );
}

export function cancelPaymentRecurringFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRecurring, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRecurring$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRecurring' from JSON`,
  );
}

/** @internal */
export const CancelPaymentLine$inboundSchema: z.ZodType<
  CancelPaymentLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => CancelPaymentUnitPrice$inboundSchema),
  discountAmount: z.lazy(() => CancelPaymentDiscountAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => CancelPaymentTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => CancelPaymentVatAmount$inboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(CancelPaymentCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => CancelPaymentRecurring$inboundSchema).optional(),
});

/** @internal */
export type CancelPaymentLine$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: CancelPaymentUnitPrice$Outbound;
  discountAmount?: CancelPaymentDiscountAmount$Outbound | undefined;
  totalAmount: CancelPaymentTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: CancelPaymentVatAmount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
  recurring?: CancelPaymentRecurring$Outbound | undefined;
};

/** @internal */
export const CancelPaymentLine$outboundSchema: z.ZodType<
  CancelPaymentLine$Outbound,
  z.ZodTypeDef,
  CancelPaymentLine
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => CancelPaymentUnitPrice$outboundSchema),
  discountAmount: z.lazy(() => CancelPaymentDiscountAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => CancelPaymentTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => CancelPaymentVatAmount$outboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(CancelPaymentCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => CancelPaymentRecurring$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentLine$ {
  /** @deprecated use `CancelPaymentLine$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentLine$inboundSchema;
  /** @deprecated use `CancelPaymentLine$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentLine$outboundSchema;
  /** @deprecated use `CancelPaymentLine$Outbound` instead. */
  export type Outbound = CancelPaymentLine$Outbound;
}

export function cancelPaymentLineToJSON(
  cancelPaymentLine: CancelPaymentLine,
): string {
  return JSON.stringify(
    CancelPaymentLine$outboundSchema.parse(cancelPaymentLine),
  );
}

export function cancelPaymentLineFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentLine' from JSON`,
  );
}

/** @internal */
export const CancelPaymentBillingAddress$inboundSchema: z.ZodType<
  CancelPaymentBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type CancelPaymentBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const CancelPaymentBillingAddress$outboundSchema: z.ZodType<
  CancelPaymentBillingAddress$Outbound,
  z.ZodTypeDef,
  CancelPaymentBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentBillingAddress$ {
  /** @deprecated use `CancelPaymentBillingAddress$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentBillingAddress$inboundSchema;
  /** @deprecated use `CancelPaymentBillingAddress$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentBillingAddress$outboundSchema;
  /** @deprecated use `CancelPaymentBillingAddress$Outbound` instead. */
  export type Outbound = CancelPaymentBillingAddress$Outbound;
}

export function cancelPaymentBillingAddressToJSON(
  cancelPaymentBillingAddress: CancelPaymentBillingAddress,
): string {
  return JSON.stringify(
    CancelPaymentBillingAddress$outboundSchema.parse(
      cancelPaymentBillingAddress,
    ),
  );
}

export function cancelPaymentBillingAddressFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentBillingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentBillingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentBillingAddress' from JSON`,
  );
}

/** @internal */
export const CancelPaymentShippingAddress$inboundSchema: z.ZodType<
  CancelPaymentShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type CancelPaymentShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const CancelPaymentShippingAddress$outboundSchema: z.ZodType<
  CancelPaymentShippingAddress$Outbound,
  z.ZodTypeDef,
  CancelPaymentShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentShippingAddress$ {
  /** @deprecated use `CancelPaymentShippingAddress$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentShippingAddress$inboundSchema;
  /** @deprecated use `CancelPaymentShippingAddress$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentShippingAddress$outboundSchema;
  /** @deprecated use `CancelPaymentShippingAddress$Outbound` instead. */
  export type Outbound = CancelPaymentShippingAddress$Outbound;
}

export function cancelPaymentShippingAddressToJSON(
  cancelPaymentShippingAddress: CancelPaymentShippingAddress,
): string {
  return JSON.stringify(
    CancelPaymentShippingAddress$outboundSchema.parse(
      cancelPaymentShippingAddress,
    ),
  );
}

export function cancelPaymentShippingAddressFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentShippingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentShippingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentShippingAddress' from JSON`,
  );
}

/** @internal */
export const CancelPaymentMetadata$inboundSchema: z.ZodType<
  CancelPaymentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CancelPaymentMetadata$Outbound = {};

/** @internal */
export const CancelPaymentMetadata$outboundSchema: z.ZodType<
  CancelPaymentMetadata$Outbound,
  z.ZodTypeDef,
  CancelPaymentMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentMetadata$ {
  /** @deprecated use `CancelPaymentMetadata$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentMetadata$inboundSchema;
  /** @deprecated use `CancelPaymentMetadata$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentMetadata$outboundSchema;
  /** @deprecated use `CancelPaymentMetadata$Outbound` instead. */
  export type Outbound = CancelPaymentMetadata$Outbound;
}

export function cancelPaymentMetadataToJSON(
  cancelPaymentMetadata: CancelPaymentMetadata,
): string {
  return JSON.stringify(
    CancelPaymentMetadata$outboundSchema.parse(cancelPaymentMetadata),
  );
}

export function cancelPaymentMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentMetadata' from JSON`,
  );
}

/** @internal */
export const CancelPaymentMetadataUnion$inboundSchema: z.ZodType<
  CancelPaymentMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CancelPaymentMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CancelPaymentMetadataUnion$Outbound =
  | CancelPaymentMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const CancelPaymentMetadataUnion$outboundSchema: z.ZodType<
  CancelPaymentMetadataUnion$Outbound,
  z.ZodTypeDef,
  CancelPaymentMetadataUnion
> = z.union([
  z.lazy(() => CancelPaymentMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentMetadataUnion$ {
  /** @deprecated use `CancelPaymentMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentMetadataUnion$inboundSchema;
  /** @deprecated use `CancelPaymentMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentMetadataUnion$outboundSchema;
  /** @deprecated use `CancelPaymentMetadataUnion$Outbound` instead. */
  export type Outbound = CancelPaymentMetadataUnion$Outbound;
}

export function cancelPaymentMetadataUnionToJSON(
  cancelPaymentMetadataUnion: CancelPaymentMetadataUnion,
): string {
  return JSON.stringify(
    CancelPaymentMetadataUnion$outboundSchema.parse(cancelPaymentMetadataUnion),
  );
}

export function cancelPaymentMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentMetadataUnion' from JSON`,
  );
}

/** @internal */
export const CancelPaymentApplicationFeeAmount$inboundSchema: z.ZodType<
  CancelPaymentApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentApplicationFeeAmount$outboundSchema: z.ZodType<
  CancelPaymentApplicationFeeAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentApplicationFeeAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentApplicationFeeAmount$ {
  /** @deprecated use `CancelPaymentApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentApplicationFeeAmount$inboundSchema;
  /** @deprecated use `CancelPaymentApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema =
    CancelPaymentApplicationFeeAmount$outboundSchema;
  /** @deprecated use `CancelPaymentApplicationFeeAmount$Outbound` instead. */
  export type Outbound = CancelPaymentApplicationFeeAmount$Outbound;
}

export function cancelPaymentApplicationFeeAmountToJSON(
  cancelPaymentApplicationFeeAmount: CancelPaymentApplicationFeeAmount,
): string {
  return JSON.stringify(
    CancelPaymentApplicationFeeAmount$outboundSchema.parse(
      cancelPaymentApplicationFeeAmount,
    ),
  );
}

export function cancelPaymentApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentApplicationFeeAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentApplicationFeeAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentApplicationFee$inboundSchema: z.ZodType<
  CancelPaymentApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CancelPaymentApplicationFeeAmount$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type CancelPaymentApplicationFee$Outbound = {
  amount?: CancelPaymentApplicationFeeAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const CancelPaymentApplicationFee$outboundSchema: z.ZodType<
  CancelPaymentApplicationFee$Outbound,
  z.ZodTypeDef,
  CancelPaymentApplicationFee
> = z.object({
  amount: z.lazy(() => CancelPaymentApplicationFeeAmount$outboundSchema)
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentApplicationFee$ {
  /** @deprecated use `CancelPaymentApplicationFee$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentApplicationFee$inboundSchema;
  /** @deprecated use `CancelPaymentApplicationFee$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentApplicationFee$outboundSchema;
  /** @deprecated use `CancelPaymentApplicationFee$Outbound` instead. */
  export type Outbound = CancelPaymentApplicationFee$Outbound;
}

export function cancelPaymentApplicationFeeToJSON(
  cancelPaymentApplicationFee: CancelPaymentApplicationFee,
): string {
  return JSON.stringify(
    CancelPaymentApplicationFee$outboundSchema.parse(
      cancelPaymentApplicationFee,
    ),
  );
}

export function cancelPaymentApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentApplicationFee' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRoutingAmount$inboundSchema: z.ZodType<
  CancelPaymentRoutingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CancelPaymentRoutingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CancelPaymentRoutingAmount$outboundSchema: z.ZodType<
  CancelPaymentRoutingAmount$Outbound,
  z.ZodTypeDef,
  CancelPaymentRoutingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRoutingAmount$ {
  /** @deprecated use `CancelPaymentRoutingAmount$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRoutingAmount$inboundSchema;
  /** @deprecated use `CancelPaymentRoutingAmount$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRoutingAmount$outboundSchema;
  /** @deprecated use `CancelPaymentRoutingAmount$Outbound` instead. */
  export type Outbound = CancelPaymentRoutingAmount$Outbound;
}

export function cancelPaymentRoutingAmountToJSON(
  cancelPaymentRoutingAmount: CancelPaymentRoutingAmount,
): string {
  return JSON.stringify(
    CancelPaymentRoutingAmount$outboundSchema.parse(cancelPaymentRoutingAmount),
  );
}

export function cancelPaymentRoutingAmountFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRoutingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRoutingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRoutingAmount' from JSON`,
  );
}

/** @internal */
export const CancelPaymentDestination$inboundSchema: z.ZodType<
  CancelPaymentDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/** @internal */
export type CancelPaymentDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const CancelPaymentDestination$outboundSchema: z.ZodType<
  CancelPaymentDestination$Outbound,
  z.ZodTypeDef,
  CancelPaymentDestination
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentDestination$ {
  /** @deprecated use `CancelPaymentDestination$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentDestination$inboundSchema;
  /** @deprecated use `CancelPaymentDestination$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentDestination$outboundSchema;
  /** @deprecated use `CancelPaymentDestination$Outbound` instead. */
  export type Outbound = CancelPaymentDestination$Outbound;
}

export function cancelPaymentDestinationToJSON(
  cancelPaymentDestination: CancelPaymentDestination,
): string {
  return JSON.stringify(
    CancelPaymentDestination$outboundSchema.parse(cancelPaymentDestination),
  );
}

export function cancelPaymentDestinationFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentDestination' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRoutingSelf$inboundSchema: z.ZodType<
  CancelPaymentRoutingSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentRoutingSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentRoutingSelf$outboundSchema: z.ZodType<
  CancelPaymentRoutingSelf$Outbound,
  z.ZodTypeDef,
  CancelPaymentRoutingSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRoutingSelf$ {
  /** @deprecated use `CancelPaymentRoutingSelf$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRoutingSelf$inboundSchema;
  /** @deprecated use `CancelPaymentRoutingSelf$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRoutingSelf$outboundSchema;
  /** @deprecated use `CancelPaymentRoutingSelf$Outbound` instead. */
  export type Outbound = CancelPaymentRoutingSelf$Outbound;
}

export function cancelPaymentRoutingSelfToJSON(
  cancelPaymentRoutingSelf: CancelPaymentRoutingSelf,
): string {
  return JSON.stringify(
    CancelPaymentRoutingSelf$outboundSchema.parse(cancelPaymentRoutingSelf),
  );
}

export function cancelPaymentRoutingSelfFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRoutingSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRoutingSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRoutingSelf' from JSON`,
  );
}

/** @internal */
export const CancelPaymentPayment$inboundSchema: z.ZodType<
  CancelPaymentPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentPayment$outboundSchema: z.ZodType<
  CancelPaymentPayment$Outbound,
  z.ZodTypeDef,
  CancelPaymentPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentPayment$ {
  /** @deprecated use `CancelPaymentPayment$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentPayment$inboundSchema;
  /** @deprecated use `CancelPaymentPayment$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentPayment$outboundSchema;
  /** @deprecated use `CancelPaymentPayment$Outbound` instead. */
  export type Outbound = CancelPaymentPayment$Outbound;
}

export function cancelPaymentPaymentToJSON(
  cancelPaymentPayment: CancelPaymentPayment,
): string {
  return JSON.stringify(
    CancelPaymentPayment$outboundSchema.parse(cancelPaymentPayment),
  );
}

export function cancelPaymentPaymentFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentPayment' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRoutingLinks$inboundSchema: z.ZodType<
  CancelPaymentRoutingLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CancelPaymentRoutingSelf$inboundSchema),
  payment: z.lazy(() => CancelPaymentPayment$inboundSchema),
});

/** @internal */
export type CancelPaymentRoutingLinks$Outbound = {
  self: CancelPaymentRoutingSelf$Outbound;
  payment: CancelPaymentPayment$Outbound;
};

/** @internal */
export const CancelPaymentRoutingLinks$outboundSchema: z.ZodType<
  CancelPaymentRoutingLinks$Outbound,
  z.ZodTypeDef,
  CancelPaymentRoutingLinks
> = z.object({
  self: z.lazy(() => CancelPaymentRoutingSelf$outboundSchema),
  payment: z.lazy(() => CancelPaymentPayment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRoutingLinks$ {
  /** @deprecated use `CancelPaymentRoutingLinks$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRoutingLinks$inboundSchema;
  /** @deprecated use `CancelPaymentRoutingLinks$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRoutingLinks$outboundSchema;
  /** @deprecated use `CancelPaymentRoutingLinks$Outbound` instead. */
  export type Outbound = CancelPaymentRoutingLinks$Outbound;
}

export function cancelPaymentRoutingLinksToJSON(
  cancelPaymentRoutingLinks: CancelPaymentRoutingLinks,
): string {
  return JSON.stringify(
    CancelPaymentRoutingLinks$outboundSchema.parse(cancelPaymentRoutingLinks),
  );
}

export function cancelPaymentRoutingLinksFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRoutingLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRoutingLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRoutingLinks' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRouting$inboundSchema: z.ZodType<
  CancelPaymentRouting,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => CancelPaymentRoutingAmount$inboundSchema),
  destination: z.lazy(() => CancelPaymentDestination$inboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => CancelPaymentRoutingLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CancelPaymentRouting$Outbound = {
  resource: string;
  id: string;
  mode: string;
  amount: CancelPaymentRoutingAmount$Outbound;
  destination: CancelPaymentDestination$Outbound;
  createdAt: string;
  releaseDate?: string | null | undefined;
  _links: CancelPaymentRoutingLinks$Outbound;
};

/** @internal */
export const CancelPaymentRouting$outboundSchema: z.ZodType<
  CancelPaymentRouting$Outbound,
  z.ZodTypeDef,
  CancelPaymentRouting
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => CancelPaymentRoutingAmount$outboundSchema),
  destination: z.lazy(() => CancelPaymentDestination$outboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => CancelPaymentRoutingLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRouting$ {
  /** @deprecated use `CancelPaymentRouting$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRouting$inboundSchema;
  /** @deprecated use `CancelPaymentRouting$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRouting$outboundSchema;
  /** @deprecated use `CancelPaymentRouting$Outbound` instead. */
  export type Outbound = CancelPaymentRouting$Outbound;
}

export function cancelPaymentRoutingToJSON(
  cancelPaymentRouting: CancelPaymentRouting,
): string {
  return JSON.stringify(
    CancelPaymentRouting$outboundSchema.parse(cancelPaymentRouting),
  );
}

export function cancelPaymentRoutingFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRouting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRouting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRouting' from JSON`,
  );
}

/** @internal */
export const CancelPaymentStatusReason$inboundSchema: z.ZodType<
  CancelPaymentStatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type CancelPaymentStatusReason$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CancelPaymentStatusReason$outboundSchema: z.ZodType<
  CancelPaymentStatusReason$Outbound,
  z.ZodTypeDef,
  CancelPaymentStatusReason
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentStatusReason$ {
  /** @deprecated use `CancelPaymentStatusReason$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentStatusReason$inboundSchema;
  /** @deprecated use `CancelPaymentStatusReason$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentStatusReason$outboundSchema;
  /** @deprecated use `CancelPaymentStatusReason$Outbound` instead. */
  export type Outbound = CancelPaymentStatusReason$Outbound;
}

export function cancelPaymentStatusReasonToJSON(
  cancelPaymentStatusReason: CancelPaymentStatusReason,
): string {
  return JSON.stringify(
    CancelPaymentStatusReason$outboundSchema.parse(cancelPaymentStatusReason),
  );
}

export function cancelPaymentStatusReasonFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentStatusReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentStatusReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentStatusReason' from JSON`,
  );
}

/** @internal */
export const CancelPaymentSelf$inboundSchema: z.ZodType<
  CancelPaymentSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentSelf$outboundSchema: z.ZodType<
  CancelPaymentSelf$Outbound,
  z.ZodTypeDef,
  CancelPaymentSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentSelf$ {
  /** @deprecated use `CancelPaymentSelf$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentSelf$inboundSchema;
  /** @deprecated use `CancelPaymentSelf$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentSelf$outboundSchema;
  /** @deprecated use `CancelPaymentSelf$Outbound` instead. */
  export type Outbound = CancelPaymentSelf$Outbound;
}

export function cancelPaymentSelfToJSON(
  cancelPaymentSelf: CancelPaymentSelf,
): string {
  return JSON.stringify(
    CancelPaymentSelf$outboundSchema.parse(cancelPaymentSelf),
  );
}

export function cancelPaymentSelfFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentSelf' from JSON`,
  );
}

/** @internal */
export const CancelPaymentCheckout$inboundSchema: z.ZodType<
  CancelPaymentCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentCheckout$outboundSchema: z.ZodType<
  CancelPaymentCheckout$Outbound,
  z.ZodTypeDef,
  CancelPaymentCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentCheckout$ {
  /** @deprecated use `CancelPaymentCheckout$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentCheckout$inboundSchema;
  /** @deprecated use `CancelPaymentCheckout$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentCheckout$outboundSchema;
  /** @deprecated use `CancelPaymentCheckout$Outbound` instead. */
  export type Outbound = CancelPaymentCheckout$Outbound;
}

export function cancelPaymentCheckoutToJSON(
  cancelPaymentCheckout: CancelPaymentCheckout,
): string {
  return JSON.stringify(
    CancelPaymentCheckout$outboundSchema.parse(cancelPaymentCheckout),
  );
}

export function cancelPaymentCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentCheckout' from JSON`,
  );
}

/** @internal */
export const CancelPaymentMobileAppCheckout$inboundSchema: z.ZodType<
  CancelPaymentMobileAppCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentMobileAppCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentMobileAppCheckout$outboundSchema: z.ZodType<
  CancelPaymentMobileAppCheckout$Outbound,
  z.ZodTypeDef,
  CancelPaymentMobileAppCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentMobileAppCheckout$ {
  /** @deprecated use `CancelPaymentMobileAppCheckout$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentMobileAppCheckout$inboundSchema;
  /** @deprecated use `CancelPaymentMobileAppCheckout$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentMobileAppCheckout$outboundSchema;
  /** @deprecated use `CancelPaymentMobileAppCheckout$Outbound` instead. */
  export type Outbound = CancelPaymentMobileAppCheckout$Outbound;
}

export function cancelPaymentMobileAppCheckoutToJSON(
  cancelPaymentMobileAppCheckout: CancelPaymentMobileAppCheckout,
): string {
  return JSON.stringify(
    CancelPaymentMobileAppCheckout$outboundSchema.parse(
      cancelPaymentMobileAppCheckout,
    ),
  );
}

export function cancelPaymentMobileAppCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentMobileAppCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentMobileAppCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentMobileAppCheckout' from JSON`,
  );
}

/** @internal */
export const CancelPaymentChangePaymentState$inboundSchema: z.ZodType<
  CancelPaymentChangePaymentState,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentChangePaymentState$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentChangePaymentState$outboundSchema: z.ZodType<
  CancelPaymentChangePaymentState$Outbound,
  z.ZodTypeDef,
  CancelPaymentChangePaymentState
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentChangePaymentState$ {
  /** @deprecated use `CancelPaymentChangePaymentState$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentChangePaymentState$inboundSchema;
  /** @deprecated use `CancelPaymentChangePaymentState$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentChangePaymentState$outboundSchema;
  /** @deprecated use `CancelPaymentChangePaymentState$Outbound` instead. */
  export type Outbound = CancelPaymentChangePaymentState$Outbound;
}

export function cancelPaymentChangePaymentStateToJSON(
  cancelPaymentChangePaymentState: CancelPaymentChangePaymentState,
): string {
  return JSON.stringify(
    CancelPaymentChangePaymentState$outboundSchema.parse(
      cancelPaymentChangePaymentState,
    ),
  );
}

export function cancelPaymentChangePaymentStateFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentChangePaymentState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentChangePaymentState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentChangePaymentState' from JSON`,
  );
}

/** @internal */
export const CancelPaymentDashboard$inboundSchema: z.ZodType<
  CancelPaymentDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentDashboard$outboundSchema: z.ZodType<
  CancelPaymentDashboard$Outbound,
  z.ZodTypeDef,
  CancelPaymentDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentDashboard$ {
  /** @deprecated use `CancelPaymentDashboard$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentDashboard$inboundSchema;
  /** @deprecated use `CancelPaymentDashboard$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentDashboard$outboundSchema;
  /** @deprecated use `CancelPaymentDashboard$Outbound` instead. */
  export type Outbound = CancelPaymentDashboard$Outbound;
}

export function cancelPaymentDashboardToJSON(
  cancelPaymentDashboard: CancelPaymentDashboard,
): string {
  return JSON.stringify(
    CancelPaymentDashboard$outboundSchema.parse(cancelPaymentDashboard),
  );
}

export function cancelPaymentDashboardFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentDashboard' from JSON`,
  );
}

/** @internal */
export const CancelPaymentRefunds$inboundSchema: z.ZodType<
  CancelPaymentRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentRefunds$outboundSchema: z.ZodType<
  CancelPaymentRefunds$Outbound,
  z.ZodTypeDef,
  CancelPaymentRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentRefunds$ {
  /** @deprecated use `CancelPaymentRefunds$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentRefunds$inboundSchema;
  /** @deprecated use `CancelPaymentRefunds$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentRefunds$outboundSchema;
  /** @deprecated use `CancelPaymentRefunds$Outbound` instead. */
  export type Outbound = CancelPaymentRefunds$Outbound;
}

export function cancelPaymentRefundsToJSON(
  cancelPaymentRefunds: CancelPaymentRefunds,
): string {
  return JSON.stringify(
    CancelPaymentRefunds$outboundSchema.parse(cancelPaymentRefunds),
  );
}

export function cancelPaymentRefundsFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentRefunds' from JSON`,
  );
}

/** @internal */
export const CancelPaymentChargebacks$inboundSchema: z.ZodType<
  CancelPaymentChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentChargebacks$outboundSchema: z.ZodType<
  CancelPaymentChargebacks$Outbound,
  z.ZodTypeDef,
  CancelPaymentChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentChargebacks$ {
  /** @deprecated use `CancelPaymentChargebacks$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentChargebacks$inboundSchema;
  /** @deprecated use `CancelPaymentChargebacks$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentChargebacks$outboundSchema;
  /** @deprecated use `CancelPaymentChargebacks$Outbound` instead. */
  export type Outbound = CancelPaymentChargebacks$Outbound;
}

export function cancelPaymentChargebacksToJSON(
  cancelPaymentChargebacks: CancelPaymentChargebacks,
): string {
  return JSON.stringify(
    CancelPaymentChargebacks$outboundSchema.parse(cancelPaymentChargebacks),
  );
}

export function cancelPaymentChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentChargebacks' from JSON`,
  );
}

/** @internal */
export const CancelPaymentCaptures$inboundSchema: z.ZodType<
  CancelPaymentCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentCaptures$outboundSchema: z.ZodType<
  CancelPaymentCaptures$Outbound,
  z.ZodTypeDef,
  CancelPaymentCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentCaptures$ {
  /** @deprecated use `CancelPaymentCaptures$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentCaptures$inboundSchema;
  /** @deprecated use `CancelPaymentCaptures$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentCaptures$outboundSchema;
  /** @deprecated use `CancelPaymentCaptures$Outbound` instead. */
  export type Outbound = CancelPaymentCaptures$Outbound;
}

export function cancelPaymentCapturesToJSON(
  cancelPaymentCaptures: CancelPaymentCaptures,
): string {
  return JSON.stringify(
    CancelPaymentCaptures$outboundSchema.parse(cancelPaymentCaptures),
  );
}

export function cancelPaymentCapturesFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentCaptures' from JSON`,
  );
}

/** @internal */
export const CancelPaymentSettlement$inboundSchema: z.ZodType<
  CancelPaymentSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentSettlement$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentSettlement$outboundSchema: z.ZodType<
  CancelPaymentSettlement$Outbound,
  z.ZodTypeDef,
  CancelPaymentSettlement
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentSettlement$ {
  /** @deprecated use `CancelPaymentSettlement$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentSettlement$inboundSchema;
  /** @deprecated use `CancelPaymentSettlement$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentSettlement$outboundSchema;
  /** @deprecated use `CancelPaymentSettlement$Outbound` instead. */
  export type Outbound = CancelPaymentSettlement$Outbound;
}

export function cancelPaymentSettlementToJSON(
  cancelPaymentSettlement: CancelPaymentSettlement,
): string {
  return JSON.stringify(
    CancelPaymentSettlement$outboundSchema.parse(cancelPaymentSettlement),
  );
}

export function cancelPaymentSettlementFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentSettlement' from JSON`,
  );
}

/** @internal */
export const CancelPaymentCustomer$inboundSchema: z.ZodType<
  CancelPaymentCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentCustomer$outboundSchema: z.ZodType<
  CancelPaymentCustomer$Outbound,
  z.ZodTypeDef,
  CancelPaymentCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentCustomer$ {
  /** @deprecated use `CancelPaymentCustomer$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentCustomer$inboundSchema;
  /** @deprecated use `CancelPaymentCustomer$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentCustomer$outboundSchema;
  /** @deprecated use `CancelPaymentCustomer$Outbound` instead. */
  export type Outbound = CancelPaymentCustomer$Outbound;
}

export function cancelPaymentCustomerToJSON(
  cancelPaymentCustomer: CancelPaymentCustomer,
): string {
  return JSON.stringify(
    CancelPaymentCustomer$outboundSchema.parse(cancelPaymentCustomer),
  );
}

export function cancelPaymentCustomerFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentCustomer' from JSON`,
  );
}

/** @internal */
export const CancelPaymentMandate$inboundSchema: z.ZodType<
  CancelPaymentMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentMandate$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentMandate$outboundSchema: z.ZodType<
  CancelPaymentMandate$Outbound,
  z.ZodTypeDef,
  CancelPaymentMandate
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentMandate$ {
  /** @deprecated use `CancelPaymentMandate$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentMandate$inboundSchema;
  /** @deprecated use `CancelPaymentMandate$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentMandate$outboundSchema;
  /** @deprecated use `CancelPaymentMandate$Outbound` instead. */
  export type Outbound = CancelPaymentMandate$Outbound;
}

export function cancelPaymentMandateToJSON(
  cancelPaymentMandate: CancelPaymentMandate,
): string {
  return JSON.stringify(
    CancelPaymentMandate$outboundSchema.parse(cancelPaymentMandate),
  );
}

export function cancelPaymentMandateFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentMandate' from JSON`,
  );
}

/** @internal */
export const CancelPaymentSubscription$inboundSchema: z.ZodType<
  CancelPaymentSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentSubscription$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentSubscription$outboundSchema: z.ZodType<
  CancelPaymentSubscription$Outbound,
  z.ZodTypeDef,
  CancelPaymentSubscription
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentSubscription$ {
  /** @deprecated use `CancelPaymentSubscription$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentSubscription$inboundSchema;
  /** @deprecated use `CancelPaymentSubscription$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentSubscription$outboundSchema;
  /** @deprecated use `CancelPaymentSubscription$Outbound` instead. */
  export type Outbound = CancelPaymentSubscription$Outbound;
}

export function cancelPaymentSubscriptionToJSON(
  cancelPaymentSubscription: CancelPaymentSubscription,
): string {
  return JSON.stringify(
    CancelPaymentSubscription$outboundSchema.parse(cancelPaymentSubscription),
  );
}

export function cancelPaymentSubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentSubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentSubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentSubscription' from JSON`,
  );
}

/** @internal */
export const CancelPaymentOrder$inboundSchema: z.ZodType<
  CancelPaymentOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentOrder$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentOrder$outboundSchema: z.ZodType<
  CancelPaymentOrder$Outbound,
  z.ZodTypeDef,
  CancelPaymentOrder
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentOrder$ {
  /** @deprecated use `CancelPaymentOrder$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentOrder$inboundSchema;
  /** @deprecated use `CancelPaymentOrder$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentOrder$outboundSchema;
  /** @deprecated use `CancelPaymentOrder$Outbound` instead. */
  export type Outbound = CancelPaymentOrder$Outbound;
}

export function cancelPaymentOrderToJSON(
  cancelPaymentOrder: CancelPaymentOrder,
): string {
  return JSON.stringify(
    CancelPaymentOrder$outboundSchema.parse(cancelPaymentOrder),
  );
}

export function cancelPaymentOrderFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentOrder' from JSON`,
  );
}

/** @internal */
export const CancelPaymentTerminal$inboundSchema: z.ZodType<
  CancelPaymentTerminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentTerminal$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentTerminal$outboundSchema: z.ZodType<
  CancelPaymentTerminal$Outbound,
  z.ZodTypeDef,
  CancelPaymentTerminal
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentTerminal$ {
  /** @deprecated use `CancelPaymentTerminal$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentTerminal$inboundSchema;
  /** @deprecated use `CancelPaymentTerminal$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentTerminal$outboundSchema;
  /** @deprecated use `CancelPaymentTerminal$Outbound` instead. */
  export type Outbound = CancelPaymentTerminal$Outbound;
}

export function cancelPaymentTerminalToJSON(
  cancelPaymentTerminal: CancelPaymentTerminal,
): string {
  return JSON.stringify(
    CancelPaymentTerminal$outboundSchema.parse(cancelPaymentTerminal),
  );
}

export function cancelPaymentTerminalFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentTerminal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentTerminal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentTerminal' from JSON`,
  );
}

/** @internal */
export const CancelPaymentDocumentation$inboundSchema: z.ZodType<
  CancelPaymentDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelPaymentDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelPaymentDocumentation$outboundSchema: z.ZodType<
  CancelPaymentDocumentation$Outbound,
  z.ZodTypeDef,
  CancelPaymentDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentDocumentation$ {
  /** @deprecated use `CancelPaymentDocumentation$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentDocumentation$inboundSchema;
  /** @deprecated use `CancelPaymentDocumentation$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentDocumentation$outboundSchema;
  /** @deprecated use `CancelPaymentDocumentation$Outbound` instead. */
  export type Outbound = CancelPaymentDocumentation$Outbound;
}

export function cancelPaymentDocumentationToJSON(
  cancelPaymentDocumentation: CancelPaymentDocumentation,
): string {
  return JSON.stringify(
    CancelPaymentDocumentation$outboundSchema.parse(cancelPaymentDocumentation),
  );
}

export function cancelPaymentDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentDocumentation' from JSON`,
  );
}

/** @internal */
export const CancelPaymentLinks$inboundSchema: z.ZodType<
  CancelPaymentLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CancelPaymentSelf$inboundSchema),
  checkout: z.lazy(() => CancelPaymentCheckout$inboundSchema).optional(),
  mobileAppCheckout: z.lazy(() => CancelPaymentMobileAppCheckout$inboundSchema)
    .optional(),
  changePaymentState: z.lazy(() =>
    CancelPaymentChangePaymentState$inboundSchema
  ).optional(),
  dashboard: z.lazy(() => CancelPaymentDashboard$inboundSchema),
  refunds: z.lazy(() => CancelPaymentRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => CancelPaymentChargebacks$inboundSchema).optional(),
  captures: z.lazy(() => CancelPaymentCaptures$inboundSchema).optional(),
  settlement: z.lazy(() => CancelPaymentSettlement$inboundSchema).optional(),
  customer: z.lazy(() => CancelPaymentCustomer$inboundSchema).optional(),
  mandate: z.lazy(() => CancelPaymentMandate$inboundSchema).optional(),
  subscription: z.lazy(() => CancelPaymentSubscription$inboundSchema)
    .optional(),
  order: z.lazy(() => CancelPaymentOrder$inboundSchema).optional(),
  terminal: z.lazy(() => CancelPaymentTerminal$inboundSchema).optional(),
  documentation: z.lazy(() => CancelPaymentDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type CancelPaymentLinks$Outbound = {
  self: CancelPaymentSelf$Outbound;
  checkout?: CancelPaymentCheckout$Outbound | undefined;
  mobileAppCheckout?: CancelPaymentMobileAppCheckout$Outbound | undefined;
  changePaymentState?: CancelPaymentChangePaymentState$Outbound | undefined;
  dashboard: CancelPaymentDashboard$Outbound;
  refunds?: CancelPaymentRefunds$Outbound | undefined;
  chargebacks?: CancelPaymentChargebacks$Outbound | undefined;
  captures?: CancelPaymentCaptures$Outbound | undefined;
  settlement?: CancelPaymentSettlement$Outbound | undefined;
  customer?: CancelPaymentCustomer$Outbound | undefined;
  mandate?: CancelPaymentMandate$Outbound | undefined;
  subscription?: CancelPaymentSubscription$Outbound | undefined;
  order?: CancelPaymentOrder$Outbound | undefined;
  terminal?: CancelPaymentTerminal$Outbound | undefined;
  documentation?: CancelPaymentDocumentation$Outbound | undefined;
};

/** @internal */
export const CancelPaymentLinks$outboundSchema: z.ZodType<
  CancelPaymentLinks$Outbound,
  z.ZodTypeDef,
  CancelPaymentLinks
> = z.object({
  self: z.lazy(() => CancelPaymentSelf$outboundSchema),
  checkout: z.lazy(() => CancelPaymentCheckout$outboundSchema).optional(),
  mobileAppCheckout: z.lazy(() => CancelPaymentMobileAppCheckout$outboundSchema)
    .optional(),
  changePaymentState: z.lazy(() =>
    CancelPaymentChangePaymentState$outboundSchema
  ).optional(),
  dashboard: z.lazy(() => CancelPaymentDashboard$outboundSchema),
  refunds: z.lazy(() => CancelPaymentRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => CancelPaymentChargebacks$outboundSchema).optional(),
  captures: z.lazy(() => CancelPaymentCaptures$outboundSchema).optional(),
  settlement: z.lazy(() => CancelPaymentSettlement$outboundSchema).optional(),
  customer: z.lazy(() => CancelPaymentCustomer$outboundSchema).optional(),
  mandate: z.lazy(() => CancelPaymentMandate$outboundSchema).optional(),
  subscription: z.lazy(() => CancelPaymentSubscription$outboundSchema)
    .optional(),
  order: z.lazy(() => CancelPaymentOrder$outboundSchema).optional(),
  terminal: z.lazy(() => CancelPaymentTerminal$outboundSchema).optional(),
  documentation: z.lazy(() => CancelPaymentDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentLinks$ {
  /** @deprecated use `CancelPaymentLinks$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentLinks$inboundSchema;
  /** @deprecated use `CancelPaymentLinks$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentLinks$outboundSchema;
  /** @deprecated use `CancelPaymentLinks$Outbound` instead. */
  export type Outbound = CancelPaymentLinks$Outbound;
}

export function cancelPaymentLinksToJSON(
  cancelPaymentLinks: CancelPaymentLinks,
): string {
  return JSON.stringify(
    CancelPaymentLinks$outboundSchema.parse(cancelPaymentLinks),
  );
}

export function cancelPaymentLinksFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentLinks' from JSON`,
  );
}

/** @internal */
export const CancelPaymentResponse$inboundSchema: z.ZodType<
  CancelPaymentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => CancelPaymentAmount$inboundSchema),
  amountRefunded: z.lazy(() => CancelPaymentAmountRefunded$inboundSchema)
    .optional(),
  amountRemaining: z.lazy(() => CancelPaymentAmountRemaining$inboundSchema)
    .optional(),
  amountCaptured: z.lazy(() => CancelPaymentAmountCaptured$inboundSchema)
    .optional(),
  amountChargedBack: z.lazy(() => CancelPaymentAmountChargedBack$inboundSchema)
    .optional(),
  settlementAmount: z.lazy(() => CancelPaymentSettlementAmount$inboundSchema)
    .optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(z.lazy(() => CancelPaymentLine$inboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => CancelPaymentBillingAddress$inboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => CancelPaymentShippingAddress$inboundSchema)
    .optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CancelPaymentMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => CancelPaymentApplicationFee$inboundSchema),
  ).optional(),
  routing: z.nullable(z.array(z.lazy(() => CancelPaymentRouting$inboundSchema)))
    .optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(
    z.lazy(() => CancelPaymentStatusReason$inboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => CancelPaymentLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CancelPaymentResponse$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: CancelPaymentAmount$Outbound;
  amountRefunded?: CancelPaymentAmountRefunded$Outbound | undefined;
  amountRemaining?: CancelPaymentAmountRemaining$Outbound | undefined;
  amountCaptured?: CancelPaymentAmountCaptured$Outbound | undefined;
  amountChargedBack?: CancelPaymentAmountChargedBack$Outbound | undefined;
  settlementAmount?: CancelPaymentSettlementAmount$Outbound | undefined;
  redirectUrl?: string | null | undefined;
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  lines?: Array<CancelPaymentLine$Outbound> | null | undefined;
  billingAddress?: CancelPaymentBillingAddress$Outbound | undefined;
  shippingAddress?: CancelPaymentShippingAddress$Outbound | undefined;
  locale?: string | null | undefined;
  countryCode?: string | null | undefined;
  method?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  metadata?:
    | CancelPaymentMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  captureMode?: string | null | undefined;
  captureDelay?: string | null | undefined;
  captureBefore?: string | null | undefined;
  applicationFee?: CancelPaymentApplicationFee$Outbound | null | undefined;
  routing?: Array<CancelPaymentRouting$Outbound> | null | undefined;
  sequenceType: string | null;
  subscriptionId?: string | null | undefined;
  mandateId?: string | null | undefined;
  customerId?: string | null | undefined;
  profileId: string;
  settlementId?: string | null | undefined;
  orderId?: string | null | undefined;
  status: string;
  statusReason?: CancelPaymentStatusReason$Outbound | null | undefined;
  isCancelable?: boolean | null | undefined;
  details?: { [k: string]: any } | null | undefined;
  createdAt: string;
  authorizedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  canceledAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredAt?: string | null | undefined;
  failedAt?: string | null | undefined;
  _links: CancelPaymentLinks$Outbound;
};

/** @internal */
export const CancelPaymentResponse$outboundSchema: z.ZodType<
  CancelPaymentResponse$Outbound,
  z.ZodTypeDef,
  CancelPaymentResponse
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => CancelPaymentAmount$outboundSchema),
  amountRefunded: z.lazy(() => CancelPaymentAmountRefunded$outboundSchema)
    .optional(),
  amountRemaining: z.lazy(() => CancelPaymentAmountRemaining$outboundSchema)
    .optional(),
  amountCaptured: z.lazy(() => CancelPaymentAmountCaptured$outboundSchema)
    .optional(),
  amountChargedBack: z.lazy(() => CancelPaymentAmountChargedBack$outboundSchema)
    .optional(),
  settlementAmount: z.lazy(() => CancelPaymentSettlementAmount$outboundSchema)
    .optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(z.lazy(() => CancelPaymentLine$outboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => CancelPaymentBillingAddress$outboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => CancelPaymentShippingAddress$outboundSchema)
    .optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CancelPaymentMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => CancelPaymentApplicationFee$outboundSchema),
  ).optional(),
  routing: z.nullable(
    z.array(z.lazy(() => CancelPaymentRouting$outboundSchema)),
  ).optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(
    z.lazy(() => CancelPaymentStatusReason$outboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => CancelPaymentLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelPaymentResponse$ {
  /** @deprecated use `CancelPaymentResponse$inboundSchema` instead. */
  export const inboundSchema = CancelPaymentResponse$inboundSchema;
  /** @deprecated use `CancelPaymentResponse$outboundSchema` instead. */
  export const outboundSchema = CancelPaymentResponse$outboundSchema;
  /** @deprecated use `CancelPaymentResponse$Outbound` instead. */
  export type Outbound = CancelPaymentResponse$Outbound;
}

export function cancelPaymentResponseToJSON(
  cancelPaymentResponse: CancelPaymentResponse,
): string {
  return JSON.stringify(
    CancelPaymentResponse$outboundSchema.parse(cancelPaymentResponse),
  );
}

export function cancelPaymentResponseFromJSON(
  jsonString: string,
): SafeParseResult<CancelPaymentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelPaymentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelPaymentResponse' from JSON`,
  );
}
