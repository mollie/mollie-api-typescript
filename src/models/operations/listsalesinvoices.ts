/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListSalesInvoicesRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListSalesInvoicesEmbedded = {
  /**
   * An array of sales invoice objects. For a complete reference of the sales invoice object, refer to
   *
   * @remarks
   * the [Get sales invoice endpoint](get-sales-invoice) documentation.
   */
  salesInvoices?: Array<models.EntitySalesInvoiceResponse> | undefined;
};

/**
 * A list of sales invoice objects. For a complete reference of the sales invoice object, refer to the
 *
 * @remarks
 * [Get sales invoice endpoint](get-sales-invoice) documentation.
 */
export type ListSalesInvoicesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListSalesInvoicesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: models.ListLinks | undefined;
};

/** @internal */
export const ListSalesInvoicesRequest$inboundSchema: z.ZodType<
  ListSalesInvoicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListSalesInvoicesRequest$Outbound = {
  from?: string | null | undefined;
  limit?: number | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListSalesInvoicesRequest$outboundSchema: z.ZodType<
  ListSalesInvoicesRequest$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesRequest$ {
  /** @deprecated use `ListSalesInvoicesRequest$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesRequest$inboundSchema;
  /** @deprecated use `ListSalesInvoicesRequest$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesRequest$outboundSchema;
  /** @deprecated use `ListSalesInvoicesRequest$Outbound` instead. */
  export type Outbound = ListSalesInvoicesRequest$Outbound;
}

export function listSalesInvoicesRequestToJSON(
  listSalesInvoicesRequest: ListSalesInvoicesRequest,
): string {
  return JSON.stringify(
    ListSalesInvoicesRequest$outboundSchema.parse(listSalesInvoicesRequest),
  );
}

export function listSalesInvoicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesRequest' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesEmbedded$inboundSchema: z.ZodType<
  ListSalesInvoicesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  sales_invoices: z.array(models.EntitySalesInvoiceResponse$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "sales_invoices": "salesInvoices",
  });
});

/** @internal */
export type ListSalesInvoicesEmbedded$Outbound = {
  sales_invoices?:
    | Array<models.EntitySalesInvoiceResponse$Outbound>
    | undefined;
};

/** @internal */
export const ListSalesInvoicesEmbedded$outboundSchema: z.ZodType<
  ListSalesInvoicesEmbedded$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesEmbedded
> = z.object({
  salesInvoices: z.array(models.EntitySalesInvoiceResponse$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    salesInvoices: "sales_invoices",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesEmbedded$ {
  /** @deprecated use `ListSalesInvoicesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesEmbedded$inboundSchema;
  /** @deprecated use `ListSalesInvoicesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesEmbedded$outboundSchema;
  /** @deprecated use `ListSalesInvoicesEmbedded$Outbound` instead. */
  export type Outbound = ListSalesInvoicesEmbedded$Outbound;
}

export function listSalesInvoicesEmbeddedToJSON(
  listSalesInvoicesEmbedded: ListSalesInvoicesEmbedded,
): string {
  return JSON.stringify(
    ListSalesInvoicesEmbedded$outboundSchema.parse(listSalesInvoicesEmbedded),
  );
}

export function listSalesInvoicesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesResponse$inboundSchema: z.ZodType<
  ListSalesInvoicesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListSalesInvoicesEmbedded$inboundSchema).optional(),
  _links: models.ListLinks$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSalesInvoicesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListSalesInvoicesEmbedded$Outbound | undefined;
  _links?: models.ListLinks$Outbound | undefined;
};

/** @internal */
export const ListSalesInvoicesResponse$outboundSchema: z.ZodType<
  ListSalesInvoicesResponse$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListSalesInvoicesEmbedded$outboundSchema).optional(),
  links: models.ListLinks$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesResponse$ {
  /** @deprecated use `ListSalesInvoicesResponse$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesResponse$inboundSchema;
  /** @deprecated use `ListSalesInvoicesResponse$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesResponse$outboundSchema;
  /** @deprecated use `ListSalesInvoicesResponse$Outbound` instead. */
  export type Outbound = ListSalesInvoicesResponse$Outbound;
}

export function listSalesInvoicesResponseToJSON(
  listSalesInvoicesResponse: ListSalesInvoicesResponse,
): string {
  return JSON.stringify(
    ListSalesInvoicesResponse$outboundSchema.parse(listSalesInvoicesResponse),
  );
}

export function listSalesInvoicesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesResponse' from JSON`,
  );
}
