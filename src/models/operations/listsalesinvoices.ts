/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSalesInvoicesRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSalesInvoicesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListSalesInvoicesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSalesInvoicesBadRequestDocumentation;
};

/**
 * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListSalesInvoicesMetadata = {};

/**
 * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the provided details. Required for `paid` status.
 */
export type ListSalesInvoicesPaymentDetails = {
  /**
   * The way through which the invoice is to be set to paid.
   *
   * @remarks
   *
   * Possible values: `manual` `payment-link` `payment`
   */
  source: string;
  /**
   * A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and `payment`.
   */
  sourceReference?: string | null | undefined;
};

/**
 * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the recipient with the provided `subject` and `body`. Required for `issued` status.
 */
export type ListSalesInvoicesEmailDetails = {
  /**
   * The subject of the email to be sent.
   */
  subject: string;
  /**
   * The body of the email to be sent. To add newline characters, you can use `\n`.
   */
  body: string;
};

export type ListSalesInvoicesRecipient = {
  /**
   * The type of recipient, either `consumer` or `business`. This will determine what further fields are required on the `recipient` object.
   *
   * @remarks
   *
   * Possible values: `consumer` `business`
   */
  type: string;
  /**
   * The title of the `consumer` type recipient, for example Mr. or Mrs..
   */
  title?: string | null | undefined;
  /**
   * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
   */
  givenName?: string | null | undefined;
  /**
   * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
   */
  familyName?: string | null | undefined;
  /**
   * The trading name of the `business` type recipient.
   */
  organizationName?: string | null | undefined;
  /**
   * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
   */
  organizationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
   */
  vatNumber?: string | null | undefined;
  /**
   * The email address of the recipient.
   */
  email: string;
  /**
   * The phone number of the recipient.
   */
  phone?: string | null | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | null | undefined;
  /**
   * A postal code.
   */
  postalCode: string;
  /**
   * The recipient's city.
   */
  city: string;
  /**
   * The recipient's region.
   */
  region?: string | null | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
  /**
   * The locale for the recipient, to be used for translations in PDF generation and payment pages.
   *
   * @remarks
   *
   * Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE`
   */
  locale: string;
};

/**
 * The price of a single item excluding VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * The unit price can be zero in case of free items.
 */
export type ListSalesInvoicesUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The discount to be applied to the line item.
 */
export type ListSalesInvoicesLineDiscount = {
  /**
   * The type of discount.
   *
   * @remarks
   *
   * Possible values: `amount` `percentage`
   */
  type: string;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

export type ListSalesInvoicesLine = {
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The vat rate to be applied to this line item.
   */
  vatRate: string;
  /**
   * The price of a single item excluding VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: ListSalesInvoicesUnitPrice;
  /**
   * The discount to be applied to the line item.
   */
  discount?: ListSalesInvoicesLineDiscount | null | undefined;
};

/**
 * The discount to be applied to the entire invoice, applied on top of any line item discounts.
 */
export type ListSalesInvoicesDiscount = {
  /**
   * The type of discount.
   *
   * @remarks
   *
   * Possible values: `amount` `percentage`
   */
  type: string;
  /**
   * A string containing an exact monetary amount in the given currency, or the percentage.
   */
  value: string;
};

/**
 * The amount that is left to be paid.
 */
export type ListSalesInvoicesAmountDue = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT before discounts.
 */
export type ListSalesInvoicesSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount with VAT.
 */
export type ListSalesInvoicesTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total VAT amount.
 */
export type ListSalesInvoicesTotalVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount without VAT after discounts.
 */
export type ListSalesInvoicesDiscountedSubtotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type SalesInvoiceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make payment for the invoice. This is where you should redirect the customer to unless the `status` is set to `paid`.
 */
export type ListSalesInvoicesInvoicePayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL the invoice is available at, if generated.
 */
export type ListSalesInvoicesPdfLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type SalesInvoiceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type SalesInvoiceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: SalesInvoiceSelf | undefined;
  /**
   * The URL your customer should visit to make payment for the invoice. This is where you should redirect the customer to unless the `status` is set to `paid`.
   */
  invoicePayment?: ListSalesInvoicesInvoicePayment | undefined;
  /**
   * The URL the invoice is available at, if generated.
   */
  pdfLink?: ListSalesInvoicesPdfLink | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: SalesInvoiceDocumentation | undefined;
};

export type SalesInvoice = {
  /**
   * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
   */
  id?: string | undefined;
  /**
   * When issued, an invoice number will be set for the sales invoice.
   */
  invoiceNumber?: string | null | undefined;
  /**
   * The status for the invoice to end up in.
   *
   * @remarks
   *
   * A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to mark it as paid. It can then subsequently be sent as well, same as with `issued`.
   *
   * A status value that cannot be set but can be returned is `canceled`, for invoices which were issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
   *
   * Dependent parameters: - `paymentDetails` is required if invoice should be set directly to `paid` - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid` - `emailDetails` optional for `issued` and `paid` to send the invoice by email
   *
   * Possible values: `draft` `issued` `paid`
   */
  status?: string | undefined;
  /**
   * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
   *
   * @remarks
   *
   * Possible values: `standard` `one-stop-shop` (default: `standard`)
   */
  vatScheme?: string | undefined;
  /**
   * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
   *
   * @remarks
   *
   * Possible values: `exclusive` `inclusive` (default: `exclusive`)
   */
  vatMode?: string | undefined;
  /**
   * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
   */
  memo?: string | null | undefined;
  /**
   * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: ListSalesInvoicesMetadata | null | undefined;
  /**
   * The payment term to be set on the invoice.
   *
   * @remarks
   *
   * Possible values: `7 days` `14 days` `30 days` `45 days` `60 days` `90 days` `120 days` (default: `30 days`)
   */
  paymentTerm?: string | null | undefined;
  /**
   * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the provided details. Required for `paid` status.
   */
  paymentDetails?: ListSalesInvoicesPaymentDetails | null | undefined;
  /**
   * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the recipient with the provided `subject` and `body`. Required for `issued` status.
   */
  emailDetails?: ListSalesInvoicesEmailDetails | null | undefined;
  /**
   * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  customerId?: string | undefined;
  /**
   * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided, `customerId` becomes required as well. Only allowed for invoices with status `paid`.
   */
  mandateId?: string | undefined;
  /**
   * An identifier tied to the recipient data. This should be a unique value based on data your system contains, so that both you and us know who we're referring to. It is a value you provide to us so that recipient management is not required to send a first invoice to a recipient.
   */
  recipientIdentifier?: string | undefined;
  recipient?: ListSalesInvoicesRecipient | null | undefined;
  /**
   * Provide the line items for the invoice. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the invoice.
   */
  lines?: Array<ListSalesInvoicesLine> | null | undefined;
  /**
   * The discount to be applied to the entire invoice, applied on top of any line item discounts.
   */
  discount?: ListSalesInvoicesDiscount | null | undefined;
  /**
   * The amount that is left to be paid.
   */
  amountDue?: ListSalesInvoicesAmountDue | undefined;
  /**
   * The total amount without VAT before discounts.
   */
  subtotalAmount?: ListSalesInvoicesSubtotalAmount | undefined;
  /**
   * The total amount with VAT.
   */
  totalAmount?: ListSalesInvoicesTotalAmount | undefined;
  /**
   * The total VAT amount.
   */
  totalVatAmount?: ListSalesInvoicesTotalVatAmount | undefined;
  /**
   * The total amount without VAT after discounts.
   */
  discountedSubtotalAmount?:
    | ListSalesInvoicesDiscountedSubtotalAmount
    | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  issuedAt?: string | null | undefined;
  /**
   * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  dueAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: SalesInvoiceLinks | undefined;
};

export type ListSalesInvoicesEmbedded = {
  /**
   * An array of sales invoice objects. For a complete reference of the sales invoice object, refer to the [Get sales invoice endpoint](get-sales-invoice) documentation.
   */
  salesInvoices?: Array<SalesInvoice> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListSalesInvoicesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListSalesInvoicesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListSalesInvoicesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSalesInvoicesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListSalesInvoicesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListSalesInvoicesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListSalesInvoicesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListSalesInvoicesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListSalesInvoicesDocumentation | undefined;
};

/**
 * A list of sales invoice objects. For a complete reference of the sales invoice object, refer to the [Get sales invoice endpoint](get-sales-invoice) documentation.
 */
export type ListSalesInvoicesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListSalesInvoicesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListSalesInvoicesLinks | undefined;
};

/** @internal */
export const ListSalesInvoicesRequest$inboundSchema: z.ZodType<
  ListSalesInvoicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListSalesInvoicesRequest$Outbound = {
  from?: string | undefined;
  limit: number | null;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListSalesInvoicesRequest$outboundSchema: z.ZodType<
  ListSalesInvoicesRequest$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesRequest$ {
  /** @deprecated use `ListSalesInvoicesRequest$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesRequest$inboundSchema;
  /** @deprecated use `ListSalesInvoicesRequest$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesRequest$outboundSchema;
  /** @deprecated use `ListSalesInvoicesRequest$Outbound` instead. */
  export type Outbound = ListSalesInvoicesRequest$Outbound;
}

export function listSalesInvoicesRequestToJSON(
  listSalesInvoicesRequest: ListSalesInvoicesRequest,
): string {
  return JSON.stringify(
    ListSalesInvoicesRequest$outboundSchema.parse(listSalesInvoicesRequest),
  );
}

export function listSalesInvoicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesRequest' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesBadRequestDocumentation$inboundSchema: z.ZodType<
  ListSalesInvoicesBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSalesInvoicesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSalesInvoicesBadRequestDocumentation$outboundSchema: z.ZodType<
  ListSalesInvoicesBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesBadRequestDocumentation$ {
  /** @deprecated use `ListSalesInvoicesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSalesInvoicesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListSalesInvoicesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSalesInvoicesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListSalesInvoicesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListSalesInvoicesBadRequestDocumentation$Outbound;
}

export function listSalesInvoicesBadRequestDocumentationToJSON(
  listSalesInvoicesBadRequestDocumentation:
    ListSalesInvoicesBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListSalesInvoicesBadRequestDocumentation$outboundSchema.parse(
      listSalesInvoicesBadRequestDocumentation,
    ),
  );
}

export function listSalesInvoicesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSalesInvoicesBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSalesInvoicesBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSalesInvoicesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesBadRequestLinks$inboundSchema: z.ZodType<
  ListSalesInvoicesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSalesInvoicesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSalesInvoicesBadRequestLinks$Outbound = {
  documentation: ListSalesInvoicesBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListSalesInvoicesBadRequestLinks$outboundSchema: z.ZodType<
  ListSalesInvoicesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSalesInvoicesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesBadRequestLinks$ {
  /** @deprecated use `ListSalesInvoicesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesBadRequestLinks$inboundSchema;
  /** @deprecated use `ListSalesInvoicesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesBadRequestLinks$outboundSchema;
  /** @deprecated use `ListSalesInvoicesBadRequestLinks$Outbound` instead. */
  export type Outbound = ListSalesInvoicesBadRequestLinks$Outbound;
}

export function listSalesInvoicesBadRequestLinksToJSON(
  listSalesInvoicesBadRequestLinks: ListSalesInvoicesBadRequestLinks,
): string {
  return JSON.stringify(
    ListSalesInvoicesBadRequestLinks$outboundSchema.parse(
      listSalesInvoicesBadRequestLinks,
    ),
  );
}

export function listSalesInvoicesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesMetadata$inboundSchema: z.ZodType<
  ListSalesInvoicesMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListSalesInvoicesMetadata$Outbound = {};

/** @internal */
export const ListSalesInvoicesMetadata$outboundSchema: z.ZodType<
  ListSalesInvoicesMetadata$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesMetadata$ {
  /** @deprecated use `ListSalesInvoicesMetadata$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesMetadata$inboundSchema;
  /** @deprecated use `ListSalesInvoicesMetadata$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesMetadata$outboundSchema;
  /** @deprecated use `ListSalesInvoicesMetadata$Outbound` instead. */
  export type Outbound = ListSalesInvoicesMetadata$Outbound;
}

export function listSalesInvoicesMetadataToJSON(
  listSalesInvoicesMetadata: ListSalesInvoicesMetadata,
): string {
  return JSON.stringify(
    ListSalesInvoicesMetadata$outboundSchema.parse(listSalesInvoicesMetadata),
  );
}

export function listSalesInvoicesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesMetadata' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesPaymentDetails$inboundSchema: z.ZodType<
  ListSalesInvoicesPaymentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  sourceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListSalesInvoicesPaymentDetails$Outbound = {
  source: string;
  sourceReference?: string | null | undefined;
};

/** @internal */
export const ListSalesInvoicesPaymentDetails$outboundSchema: z.ZodType<
  ListSalesInvoicesPaymentDetails$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesPaymentDetails
> = z.object({
  source: z.string(),
  sourceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesPaymentDetails$ {
  /** @deprecated use `ListSalesInvoicesPaymentDetails$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesPaymentDetails$inboundSchema;
  /** @deprecated use `ListSalesInvoicesPaymentDetails$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesPaymentDetails$outboundSchema;
  /** @deprecated use `ListSalesInvoicesPaymentDetails$Outbound` instead. */
  export type Outbound = ListSalesInvoicesPaymentDetails$Outbound;
}

export function listSalesInvoicesPaymentDetailsToJSON(
  listSalesInvoicesPaymentDetails: ListSalesInvoicesPaymentDetails,
): string {
  return JSON.stringify(
    ListSalesInvoicesPaymentDetails$outboundSchema.parse(
      listSalesInvoicesPaymentDetails,
    ),
  );
}

export function listSalesInvoicesPaymentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesPaymentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesPaymentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesPaymentDetails' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesEmailDetails$inboundSchema: z.ZodType<
  ListSalesInvoicesEmailDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/** @internal */
export type ListSalesInvoicesEmailDetails$Outbound = {
  subject: string;
  body: string;
};

/** @internal */
export const ListSalesInvoicesEmailDetails$outboundSchema: z.ZodType<
  ListSalesInvoicesEmailDetails$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesEmailDetails
> = z.object({
  subject: z.string(),
  body: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesEmailDetails$ {
  /** @deprecated use `ListSalesInvoicesEmailDetails$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesEmailDetails$inboundSchema;
  /** @deprecated use `ListSalesInvoicesEmailDetails$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesEmailDetails$outboundSchema;
  /** @deprecated use `ListSalesInvoicesEmailDetails$Outbound` instead. */
  export type Outbound = ListSalesInvoicesEmailDetails$Outbound;
}

export function listSalesInvoicesEmailDetailsToJSON(
  listSalesInvoicesEmailDetails: ListSalesInvoicesEmailDetails,
): string {
  return JSON.stringify(
    ListSalesInvoicesEmailDetails$outboundSchema.parse(
      listSalesInvoicesEmailDetails,
    ),
  );
}

export function listSalesInvoicesEmailDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesEmailDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesEmailDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesEmailDetails' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesRecipient$inboundSchema: z.ZodType<
  ListSalesInvoicesRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: z.string(),
});

/** @internal */
export type ListSalesInvoicesRecipient$Outbound = {
  type: string;
  title?: string | null | undefined;
  givenName?: string | null | undefined;
  familyName?: string | null | undefined;
  organizationName?: string | null | undefined;
  organizationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
  email: string;
  phone?: string | null | undefined;
  streetAndNumber: string;
  streetAdditional?: string | null | undefined;
  postalCode: string;
  city: string;
  region?: string | null | undefined;
  country: string;
  locale: string;
};

/** @internal */
export const ListSalesInvoicesRecipient$outboundSchema: z.ZodType<
  ListSalesInvoicesRecipient$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesRecipient
> = z.object({
  type: z.string(),
  title: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  organizationName: z.nullable(z.string()).optional(),
  organizationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  email: z.string(),
  phone: z.nullable(z.string()).optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.nullable(z.string()).optional(),
  postalCode: z.string(),
  city: z.string(),
  region: z.nullable(z.string()).optional(),
  country: z.string(),
  locale: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesRecipient$ {
  /** @deprecated use `ListSalesInvoicesRecipient$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesRecipient$inboundSchema;
  /** @deprecated use `ListSalesInvoicesRecipient$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesRecipient$outboundSchema;
  /** @deprecated use `ListSalesInvoicesRecipient$Outbound` instead. */
  export type Outbound = ListSalesInvoicesRecipient$Outbound;
}

export function listSalesInvoicesRecipientToJSON(
  listSalesInvoicesRecipient: ListSalesInvoicesRecipient,
): string {
  return JSON.stringify(
    ListSalesInvoicesRecipient$outboundSchema.parse(listSalesInvoicesRecipient),
  );
}

export function listSalesInvoicesRecipientFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesRecipient' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesUnitPrice$inboundSchema: z.ZodType<
  ListSalesInvoicesUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesUnitPrice$outboundSchema: z.ZodType<
  ListSalesInvoicesUnitPrice$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesUnitPrice$ {
  /** @deprecated use `ListSalesInvoicesUnitPrice$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesUnitPrice$inboundSchema;
  /** @deprecated use `ListSalesInvoicesUnitPrice$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesUnitPrice$outboundSchema;
  /** @deprecated use `ListSalesInvoicesUnitPrice$Outbound` instead. */
  export type Outbound = ListSalesInvoicesUnitPrice$Outbound;
}

export function listSalesInvoicesUnitPriceToJSON(
  listSalesInvoicesUnitPrice: ListSalesInvoicesUnitPrice,
): string {
  return JSON.stringify(
    ListSalesInvoicesUnitPrice$outboundSchema.parse(listSalesInvoicesUnitPrice),
  );
}

export function listSalesInvoicesUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesUnitPrice' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesLineDiscount$inboundSchema: z.ZodType<
  ListSalesInvoicesLineDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesLineDiscount$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesLineDiscount$outboundSchema: z.ZodType<
  ListSalesInvoicesLineDiscount$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesLineDiscount
> = z.object({
  type: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesLineDiscount$ {
  /** @deprecated use `ListSalesInvoicesLineDiscount$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesLineDiscount$inboundSchema;
  /** @deprecated use `ListSalesInvoicesLineDiscount$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesLineDiscount$outboundSchema;
  /** @deprecated use `ListSalesInvoicesLineDiscount$Outbound` instead. */
  export type Outbound = ListSalesInvoicesLineDiscount$Outbound;
}

export function listSalesInvoicesLineDiscountToJSON(
  listSalesInvoicesLineDiscount: ListSalesInvoicesLineDiscount,
): string {
  return JSON.stringify(
    ListSalesInvoicesLineDiscount$outboundSchema.parse(
      listSalesInvoicesLineDiscount,
    ),
  );
}

export function listSalesInvoicesLineDiscountFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesLineDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesLineDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesLineDiscount' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesLine$inboundSchema: z.ZodType<
  ListSalesInvoicesLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => ListSalesInvoicesUnitPrice$inboundSchema),
  discount: z.nullable(
    z.lazy(() => ListSalesInvoicesLineDiscount$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListSalesInvoicesLine$Outbound = {
  description: string;
  quantity: number;
  vatRate: string;
  unitPrice: ListSalesInvoicesUnitPrice$Outbound;
  discount?: ListSalesInvoicesLineDiscount$Outbound | null | undefined;
};

/** @internal */
export const ListSalesInvoicesLine$outboundSchema: z.ZodType<
  ListSalesInvoicesLine$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesLine
> = z.object({
  description: z.string(),
  quantity: z.number().int(),
  vatRate: z.string(),
  unitPrice: z.lazy(() => ListSalesInvoicesUnitPrice$outboundSchema),
  discount: z.nullable(
    z.lazy(() => ListSalesInvoicesLineDiscount$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesLine$ {
  /** @deprecated use `ListSalesInvoicesLine$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesLine$inboundSchema;
  /** @deprecated use `ListSalesInvoicesLine$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesLine$outboundSchema;
  /** @deprecated use `ListSalesInvoicesLine$Outbound` instead. */
  export type Outbound = ListSalesInvoicesLine$Outbound;
}

export function listSalesInvoicesLineToJSON(
  listSalesInvoicesLine: ListSalesInvoicesLine,
): string {
  return JSON.stringify(
    ListSalesInvoicesLine$outboundSchema.parse(listSalesInvoicesLine),
  );
}

export function listSalesInvoicesLineFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesLine' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesDiscount$inboundSchema: z.ZodType<
  ListSalesInvoicesDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesDiscount$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesDiscount$outboundSchema: z.ZodType<
  ListSalesInvoicesDiscount$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesDiscount
> = z.object({
  type: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesDiscount$ {
  /** @deprecated use `ListSalesInvoicesDiscount$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesDiscount$inboundSchema;
  /** @deprecated use `ListSalesInvoicesDiscount$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesDiscount$outboundSchema;
  /** @deprecated use `ListSalesInvoicesDiscount$Outbound` instead. */
  export type Outbound = ListSalesInvoicesDiscount$Outbound;
}

export function listSalesInvoicesDiscountToJSON(
  listSalesInvoicesDiscount: ListSalesInvoicesDiscount,
): string {
  return JSON.stringify(
    ListSalesInvoicesDiscount$outboundSchema.parse(listSalesInvoicesDiscount),
  );
}

export function listSalesInvoicesDiscountFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesDiscount' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesAmountDue$inboundSchema: z.ZodType<
  ListSalesInvoicesAmountDue,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesAmountDue$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesAmountDue$outboundSchema: z.ZodType<
  ListSalesInvoicesAmountDue$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesAmountDue
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesAmountDue$ {
  /** @deprecated use `ListSalesInvoicesAmountDue$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesAmountDue$inboundSchema;
  /** @deprecated use `ListSalesInvoicesAmountDue$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesAmountDue$outboundSchema;
  /** @deprecated use `ListSalesInvoicesAmountDue$Outbound` instead. */
  export type Outbound = ListSalesInvoicesAmountDue$Outbound;
}

export function listSalesInvoicesAmountDueToJSON(
  listSalesInvoicesAmountDue: ListSalesInvoicesAmountDue,
): string {
  return JSON.stringify(
    ListSalesInvoicesAmountDue$outboundSchema.parse(listSalesInvoicesAmountDue),
  );
}

export function listSalesInvoicesAmountDueFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesAmountDue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesAmountDue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesAmountDue' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesSubtotalAmount$inboundSchema: z.ZodType<
  ListSalesInvoicesSubtotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesSubtotalAmount$outboundSchema: z.ZodType<
  ListSalesInvoicesSubtotalAmount$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesSubtotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesSubtotalAmount$ {
  /** @deprecated use `ListSalesInvoicesSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesSubtotalAmount$inboundSchema;
  /** @deprecated use `ListSalesInvoicesSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesSubtotalAmount$outboundSchema;
  /** @deprecated use `ListSalesInvoicesSubtotalAmount$Outbound` instead. */
  export type Outbound = ListSalesInvoicesSubtotalAmount$Outbound;
}

export function listSalesInvoicesSubtotalAmountToJSON(
  listSalesInvoicesSubtotalAmount: ListSalesInvoicesSubtotalAmount,
): string {
  return JSON.stringify(
    ListSalesInvoicesSubtotalAmount$outboundSchema.parse(
      listSalesInvoicesSubtotalAmount,
    ),
  );
}

export function listSalesInvoicesSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesSubtotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesSubtotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesTotalAmount$inboundSchema: z.ZodType<
  ListSalesInvoicesTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesTotalAmount$outboundSchema: z.ZodType<
  ListSalesInvoicesTotalAmount$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesTotalAmount$ {
  /** @deprecated use `ListSalesInvoicesTotalAmount$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesTotalAmount$inboundSchema;
  /** @deprecated use `ListSalesInvoicesTotalAmount$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesTotalAmount$outboundSchema;
  /** @deprecated use `ListSalesInvoicesTotalAmount$Outbound` instead. */
  export type Outbound = ListSalesInvoicesTotalAmount$Outbound;
}

export function listSalesInvoicesTotalAmountToJSON(
  listSalesInvoicesTotalAmount: ListSalesInvoicesTotalAmount,
): string {
  return JSON.stringify(
    ListSalesInvoicesTotalAmount$outboundSchema.parse(
      listSalesInvoicesTotalAmount,
    ),
  );
}

export function listSalesInvoicesTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesTotalAmount' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesTotalVatAmount$inboundSchema: z.ZodType<
  ListSalesInvoicesTotalVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesTotalVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesTotalVatAmount$outboundSchema: z.ZodType<
  ListSalesInvoicesTotalVatAmount$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesTotalVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesTotalVatAmount$ {
  /** @deprecated use `ListSalesInvoicesTotalVatAmount$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesTotalVatAmount$inboundSchema;
  /** @deprecated use `ListSalesInvoicesTotalVatAmount$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesTotalVatAmount$outboundSchema;
  /** @deprecated use `ListSalesInvoicesTotalVatAmount$Outbound` instead. */
  export type Outbound = ListSalesInvoicesTotalVatAmount$Outbound;
}

export function listSalesInvoicesTotalVatAmountToJSON(
  listSalesInvoicesTotalVatAmount: ListSalesInvoicesTotalVatAmount,
): string {
  return JSON.stringify(
    ListSalesInvoicesTotalVatAmount$outboundSchema.parse(
      listSalesInvoicesTotalVatAmount,
    ),
  );
}

export function listSalesInvoicesTotalVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesTotalVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesTotalVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesTotalVatAmount' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesDiscountedSubtotalAmount$inboundSchema: z.ZodType<
  ListSalesInvoicesDiscountedSubtotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSalesInvoicesDiscountedSubtotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSalesInvoicesDiscountedSubtotalAmount$outboundSchema:
  z.ZodType<
    ListSalesInvoicesDiscountedSubtotalAmount$Outbound,
    z.ZodTypeDef,
    ListSalesInvoicesDiscountedSubtotalAmount
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesDiscountedSubtotalAmount$ {
  /** @deprecated use `ListSalesInvoicesDiscountedSubtotalAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListSalesInvoicesDiscountedSubtotalAmount$inboundSchema;
  /** @deprecated use `ListSalesInvoicesDiscountedSubtotalAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListSalesInvoicesDiscountedSubtotalAmount$outboundSchema;
  /** @deprecated use `ListSalesInvoicesDiscountedSubtotalAmount$Outbound` instead. */
  export type Outbound = ListSalesInvoicesDiscountedSubtotalAmount$Outbound;
}

export function listSalesInvoicesDiscountedSubtotalAmountToJSON(
  listSalesInvoicesDiscountedSubtotalAmount:
    ListSalesInvoicesDiscountedSubtotalAmount,
): string {
  return JSON.stringify(
    ListSalesInvoicesDiscountedSubtotalAmount$outboundSchema.parse(
      listSalesInvoicesDiscountedSubtotalAmount,
    ),
  );
}

export function listSalesInvoicesDiscountedSubtotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSalesInvoicesDiscountedSubtotalAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSalesInvoicesDiscountedSubtotalAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSalesInvoicesDiscountedSubtotalAmount' from JSON`,
  );
}

/** @internal */
export const SalesInvoiceSelf$inboundSchema: z.ZodType<
  SalesInvoiceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type SalesInvoiceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const SalesInvoiceSelf$outboundSchema: z.ZodType<
  SalesInvoiceSelf$Outbound,
  z.ZodTypeDef,
  SalesInvoiceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceSelf$ {
  /** @deprecated use `SalesInvoiceSelf$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceSelf$inboundSchema;
  /** @deprecated use `SalesInvoiceSelf$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceSelf$outboundSchema;
  /** @deprecated use `SalesInvoiceSelf$Outbound` instead. */
  export type Outbound = SalesInvoiceSelf$Outbound;
}

export function salesInvoiceSelfToJSON(
  salesInvoiceSelf: SalesInvoiceSelf,
): string {
  return JSON.stringify(
    SalesInvoiceSelf$outboundSchema.parse(salesInvoiceSelf),
  );
}

export function salesInvoiceSelfFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoiceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoiceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoiceSelf' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesInvoicePayment$inboundSchema: z.ZodType<
  ListSalesInvoicesInvoicePayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSalesInvoicesInvoicePayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSalesInvoicesInvoicePayment$outboundSchema: z.ZodType<
  ListSalesInvoicesInvoicePayment$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesInvoicePayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesInvoicePayment$ {
  /** @deprecated use `ListSalesInvoicesInvoicePayment$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesInvoicePayment$inboundSchema;
  /** @deprecated use `ListSalesInvoicesInvoicePayment$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesInvoicePayment$outboundSchema;
  /** @deprecated use `ListSalesInvoicesInvoicePayment$Outbound` instead. */
  export type Outbound = ListSalesInvoicesInvoicePayment$Outbound;
}

export function listSalesInvoicesInvoicePaymentToJSON(
  listSalesInvoicesInvoicePayment: ListSalesInvoicesInvoicePayment,
): string {
  return JSON.stringify(
    ListSalesInvoicesInvoicePayment$outboundSchema.parse(
      listSalesInvoicesInvoicePayment,
    ),
  );
}

export function listSalesInvoicesInvoicePaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesInvoicePayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesInvoicePayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesInvoicePayment' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesPdfLink$inboundSchema: z.ZodType<
  ListSalesInvoicesPdfLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSalesInvoicesPdfLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSalesInvoicesPdfLink$outboundSchema: z.ZodType<
  ListSalesInvoicesPdfLink$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesPdfLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesPdfLink$ {
  /** @deprecated use `ListSalesInvoicesPdfLink$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesPdfLink$inboundSchema;
  /** @deprecated use `ListSalesInvoicesPdfLink$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesPdfLink$outboundSchema;
  /** @deprecated use `ListSalesInvoicesPdfLink$Outbound` instead. */
  export type Outbound = ListSalesInvoicesPdfLink$Outbound;
}

export function listSalesInvoicesPdfLinkToJSON(
  listSalesInvoicesPdfLink: ListSalesInvoicesPdfLink,
): string {
  return JSON.stringify(
    ListSalesInvoicesPdfLink$outboundSchema.parse(listSalesInvoicesPdfLink),
  );
}

export function listSalesInvoicesPdfLinkFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesPdfLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesPdfLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesPdfLink' from JSON`,
  );
}

/** @internal */
export const SalesInvoiceDocumentation$inboundSchema: z.ZodType<
  SalesInvoiceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type SalesInvoiceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const SalesInvoiceDocumentation$outboundSchema: z.ZodType<
  SalesInvoiceDocumentation$Outbound,
  z.ZodTypeDef,
  SalesInvoiceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceDocumentation$ {
  /** @deprecated use `SalesInvoiceDocumentation$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceDocumentation$inboundSchema;
  /** @deprecated use `SalesInvoiceDocumentation$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceDocumentation$outboundSchema;
  /** @deprecated use `SalesInvoiceDocumentation$Outbound` instead. */
  export type Outbound = SalesInvoiceDocumentation$Outbound;
}

export function salesInvoiceDocumentationToJSON(
  salesInvoiceDocumentation: SalesInvoiceDocumentation,
): string {
  return JSON.stringify(
    SalesInvoiceDocumentation$outboundSchema.parse(salesInvoiceDocumentation),
  );
}

export function salesInvoiceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoiceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoiceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoiceDocumentation' from JSON`,
  );
}

/** @internal */
export const SalesInvoiceLinks$inboundSchema: z.ZodType<
  SalesInvoiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => SalesInvoiceSelf$inboundSchema).optional(),
  invoicePayment: z.lazy(() => ListSalesInvoicesInvoicePayment$inboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => ListSalesInvoicesPdfLink$inboundSchema))
    .optional(),
  documentation: z.lazy(() => SalesInvoiceDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type SalesInvoiceLinks$Outbound = {
  self?: SalesInvoiceSelf$Outbound | undefined;
  invoicePayment?: ListSalesInvoicesInvoicePayment$Outbound | undefined;
  pdfLink?: ListSalesInvoicesPdfLink$Outbound | null | undefined;
  documentation?: SalesInvoiceDocumentation$Outbound | undefined;
};

/** @internal */
export const SalesInvoiceLinks$outboundSchema: z.ZodType<
  SalesInvoiceLinks$Outbound,
  z.ZodTypeDef,
  SalesInvoiceLinks
> = z.object({
  self: z.lazy(() => SalesInvoiceSelf$outboundSchema).optional(),
  invoicePayment: z.lazy(() => ListSalesInvoicesInvoicePayment$outboundSchema)
    .optional(),
  pdfLink: z.nullable(z.lazy(() => ListSalesInvoicesPdfLink$outboundSchema))
    .optional(),
  documentation: z.lazy(() => SalesInvoiceDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoiceLinks$ {
  /** @deprecated use `SalesInvoiceLinks$inboundSchema` instead. */
  export const inboundSchema = SalesInvoiceLinks$inboundSchema;
  /** @deprecated use `SalesInvoiceLinks$outboundSchema` instead. */
  export const outboundSchema = SalesInvoiceLinks$outboundSchema;
  /** @deprecated use `SalesInvoiceLinks$Outbound` instead. */
  export type Outbound = SalesInvoiceLinks$Outbound;
}

export function salesInvoiceLinksToJSON(
  salesInvoiceLinks: SalesInvoiceLinks,
): string {
  return JSON.stringify(
    SalesInvoiceLinks$outboundSchema.parse(salesInvoiceLinks),
  );
}

export function salesInvoiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoiceLinks' from JSON`,
  );
}

/** @internal */
export const SalesInvoice$inboundSchema: z.ZodType<
  SalesInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("sales-invoice"),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  vatScheme: z.string().optional(),
  vatMode: z.string().optional(),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => ListSalesInvoicesMetadata$inboundSchema))
    .optional(),
  paymentTerm: z.nullable(z.string()).optional(),
  paymentDetails: z.nullable(
    z.lazy(() => ListSalesInvoicesPaymentDetails$inboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => ListSalesInvoicesEmailDetails$inboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(z.lazy(() => ListSalesInvoicesRecipient$inboundSchema))
    .optional(),
  lines: z.nullable(z.array(z.lazy(() => ListSalesInvoicesLine$inboundSchema)))
    .optional(),
  discount: z.nullable(z.lazy(() => ListSalesInvoicesDiscount$inboundSchema))
    .optional(),
  amountDue: z.lazy(() => ListSalesInvoicesAmountDue$inboundSchema).optional(),
  subtotalAmount: z.lazy(() => ListSalesInvoicesSubtotalAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => ListSalesInvoicesTotalAmount$inboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => ListSalesInvoicesTotalVatAmount$inboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    ListSalesInvoicesDiscountedSubtotalAmount$inboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => SalesInvoiceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type SalesInvoice$Outbound = {
  resource: string;
  id?: string | undefined;
  invoiceNumber?: string | null | undefined;
  status?: string | undefined;
  vatScheme?: string | undefined;
  vatMode?: string | undefined;
  memo?: string | null | undefined;
  metadata?: ListSalesInvoicesMetadata$Outbound | null | undefined;
  paymentTerm?: string | null | undefined;
  paymentDetails?: ListSalesInvoicesPaymentDetails$Outbound | null | undefined;
  emailDetails?: ListSalesInvoicesEmailDetails$Outbound | null | undefined;
  customerId?: string | undefined;
  mandateId?: string | undefined;
  recipientIdentifier?: string | undefined;
  recipient?: ListSalesInvoicesRecipient$Outbound | null | undefined;
  lines?: Array<ListSalesInvoicesLine$Outbound> | null | undefined;
  discount?: ListSalesInvoicesDiscount$Outbound | null | undefined;
  amountDue?: ListSalesInvoicesAmountDue$Outbound | undefined;
  subtotalAmount?: ListSalesInvoicesSubtotalAmount$Outbound | undefined;
  totalAmount?: ListSalesInvoicesTotalAmount$Outbound | undefined;
  totalVatAmount?: ListSalesInvoicesTotalVatAmount$Outbound | undefined;
  discountedSubtotalAmount?:
    | ListSalesInvoicesDiscountedSubtotalAmount$Outbound
    | undefined;
  createdAt?: string | undefined;
  issuedAt?: string | null | undefined;
  dueAt?: string | null | undefined;
  _links?: SalesInvoiceLinks$Outbound | undefined;
};

/** @internal */
export const SalesInvoice$outboundSchema: z.ZodType<
  SalesInvoice$Outbound,
  z.ZodTypeDef,
  SalesInvoice
> = z.object({
  resource: z.string().default("sales-invoice"),
  id: z.string().optional(),
  invoiceNumber: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  vatScheme: z.string().optional(),
  vatMode: z.string().optional(),
  memo: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.lazy(() => ListSalesInvoicesMetadata$outboundSchema))
    .optional(),
  paymentTerm: z.nullable(z.string()).optional(),
  paymentDetails: z.nullable(
    z.lazy(() => ListSalesInvoicesPaymentDetails$outboundSchema),
  ).optional(),
  emailDetails: z.nullable(
    z.lazy(() => ListSalesInvoicesEmailDetails$outboundSchema),
  ).optional(),
  customerId: z.string().optional(),
  mandateId: z.string().optional(),
  recipientIdentifier: z.string().optional(),
  recipient: z.nullable(z.lazy(() => ListSalesInvoicesRecipient$outboundSchema))
    .optional(),
  lines: z.nullable(z.array(z.lazy(() => ListSalesInvoicesLine$outboundSchema)))
    .optional(),
  discount: z.nullable(z.lazy(() => ListSalesInvoicesDiscount$outboundSchema))
    .optional(),
  amountDue: z.lazy(() => ListSalesInvoicesAmountDue$outboundSchema).optional(),
  subtotalAmount: z.lazy(() => ListSalesInvoicesSubtotalAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => ListSalesInvoicesTotalAmount$outboundSchema)
    .optional(),
  totalVatAmount: z.lazy(() => ListSalesInvoicesTotalVatAmount$outboundSchema)
    .optional(),
  discountedSubtotalAmount: z.lazy(() =>
    ListSalesInvoicesDiscountedSubtotalAmount$outboundSchema
  ).optional(),
  createdAt: z.string().optional(),
  issuedAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => SalesInvoiceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesInvoice$ {
  /** @deprecated use `SalesInvoice$inboundSchema` instead. */
  export const inboundSchema = SalesInvoice$inboundSchema;
  /** @deprecated use `SalesInvoice$outboundSchema` instead. */
  export const outboundSchema = SalesInvoice$outboundSchema;
  /** @deprecated use `SalesInvoice$Outbound` instead. */
  export type Outbound = SalesInvoice$Outbound;
}

export function salesInvoiceToJSON(salesInvoice: SalesInvoice): string {
  return JSON.stringify(SalesInvoice$outboundSchema.parse(salesInvoice));
}

export function salesInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<SalesInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalesInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalesInvoice' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesEmbedded$inboundSchema: z.ZodType<
  ListSalesInvoicesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  sales_invoices: z.array(z.lazy(() => SalesInvoice$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "sales_invoices": "salesInvoices",
  });
});

/** @internal */
export type ListSalesInvoicesEmbedded$Outbound = {
  sales_invoices?: Array<SalesInvoice$Outbound> | undefined;
};

/** @internal */
export const ListSalesInvoicesEmbedded$outboundSchema: z.ZodType<
  ListSalesInvoicesEmbedded$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesEmbedded
> = z.object({
  salesInvoices: z.array(z.lazy(() => SalesInvoice$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    salesInvoices: "sales_invoices",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesEmbedded$ {
  /** @deprecated use `ListSalesInvoicesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesEmbedded$inboundSchema;
  /** @deprecated use `ListSalesInvoicesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesEmbedded$outboundSchema;
  /** @deprecated use `ListSalesInvoicesEmbedded$Outbound` instead. */
  export type Outbound = ListSalesInvoicesEmbedded$Outbound;
}

export function listSalesInvoicesEmbeddedToJSON(
  listSalesInvoicesEmbedded: ListSalesInvoicesEmbedded,
): string {
  return JSON.stringify(
    ListSalesInvoicesEmbedded$outboundSchema.parse(listSalesInvoicesEmbedded),
  );
}

export function listSalesInvoicesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesSelf$inboundSchema: z.ZodType<
  ListSalesInvoicesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSalesInvoicesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSalesInvoicesSelf$outboundSchema: z.ZodType<
  ListSalesInvoicesSelf$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesSelf$ {
  /** @deprecated use `ListSalesInvoicesSelf$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesSelf$inboundSchema;
  /** @deprecated use `ListSalesInvoicesSelf$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesSelf$outboundSchema;
  /** @deprecated use `ListSalesInvoicesSelf$Outbound` instead. */
  export type Outbound = ListSalesInvoicesSelf$Outbound;
}

export function listSalesInvoicesSelfToJSON(
  listSalesInvoicesSelf: ListSalesInvoicesSelf,
): string {
  return JSON.stringify(
    ListSalesInvoicesSelf$outboundSchema.parse(listSalesInvoicesSelf),
  );
}

export function listSalesInvoicesSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesSelf' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesPrevious$inboundSchema: z.ZodType<
  ListSalesInvoicesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSalesInvoicesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSalesInvoicesPrevious$outboundSchema: z.ZodType<
  ListSalesInvoicesPrevious$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesPrevious$ {
  /** @deprecated use `ListSalesInvoicesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesPrevious$inboundSchema;
  /** @deprecated use `ListSalesInvoicesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesPrevious$outboundSchema;
  /** @deprecated use `ListSalesInvoicesPrevious$Outbound` instead. */
  export type Outbound = ListSalesInvoicesPrevious$Outbound;
}

export function listSalesInvoicesPreviousToJSON(
  listSalesInvoicesPrevious: ListSalesInvoicesPrevious,
): string {
  return JSON.stringify(
    ListSalesInvoicesPrevious$outboundSchema.parse(listSalesInvoicesPrevious),
  );
}

export function listSalesInvoicesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesPrevious' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesNext$inboundSchema: z.ZodType<
  ListSalesInvoicesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSalesInvoicesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSalesInvoicesNext$outboundSchema: z.ZodType<
  ListSalesInvoicesNext$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesNext$ {
  /** @deprecated use `ListSalesInvoicesNext$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesNext$inboundSchema;
  /** @deprecated use `ListSalesInvoicesNext$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesNext$outboundSchema;
  /** @deprecated use `ListSalesInvoicesNext$Outbound` instead. */
  export type Outbound = ListSalesInvoicesNext$Outbound;
}

export function listSalesInvoicesNextToJSON(
  listSalesInvoicesNext: ListSalesInvoicesNext,
): string {
  return JSON.stringify(
    ListSalesInvoicesNext$outboundSchema.parse(listSalesInvoicesNext),
  );
}

export function listSalesInvoicesNextFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesNext' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesDocumentation$inboundSchema: z.ZodType<
  ListSalesInvoicesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSalesInvoicesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSalesInvoicesDocumentation$outboundSchema: z.ZodType<
  ListSalesInvoicesDocumentation$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesDocumentation$ {
  /** @deprecated use `ListSalesInvoicesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesDocumentation$inboundSchema;
  /** @deprecated use `ListSalesInvoicesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesDocumentation$outboundSchema;
  /** @deprecated use `ListSalesInvoicesDocumentation$Outbound` instead. */
  export type Outbound = ListSalesInvoicesDocumentation$Outbound;
}

export function listSalesInvoicesDocumentationToJSON(
  listSalesInvoicesDocumentation: ListSalesInvoicesDocumentation,
): string {
  return JSON.stringify(
    ListSalesInvoicesDocumentation$outboundSchema.parse(
      listSalesInvoicesDocumentation,
    ),
  );
}

export function listSalesInvoicesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesLinks$inboundSchema: z.ZodType<
  ListSalesInvoicesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSalesInvoicesSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListSalesInvoicesPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListSalesInvoicesNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() => ListSalesInvoicesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListSalesInvoicesLinks$Outbound = {
  self?: ListSalesInvoicesSelf$Outbound | undefined;
  previous?: ListSalesInvoicesPrevious$Outbound | null | undefined;
  next?: ListSalesInvoicesNext$Outbound | null | undefined;
  documentation?: ListSalesInvoicesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListSalesInvoicesLinks$outboundSchema: z.ZodType<
  ListSalesInvoicesLinks$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesLinks
> = z.object({
  self: z.lazy(() => ListSalesInvoicesSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListSalesInvoicesPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListSalesInvoicesNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() => ListSalesInvoicesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesLinks$ {
  /** @deprecated use `ListSalesInvoicesLinks$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesLinks$inboundSchema;
  /** @deprecated use `ListSalesInvoicesLinks$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesLinks$outboundSchema;
  /** @deprecated use `ListSalesInvoicesLinks$Outbound` instead. */
  export type Outbound = ListSalesInvoicesLinks$Outbound;
}

export function listSalesInvoicesLinksToJSON(
  listSalesInvoicesLinks: ListSalesInvoicesLinks,
): string {
  return JSON.stringify(
    ListSalesInvoicesLinks$outboundSchema.parse(listSalesInvoicesLinks),
  );
}

export function listSalesInvoicesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesLinks' from JSON`,
  );
}

/** @internal */
export const ListSalesInvoicesResponse$inboundSchema: z.ZodType<
  ListSalesInvoicesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListSalesInvoicesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListSalesInvoicesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSalesInvoicesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListSalesInvoicesEmbedded$Outbound | undefined;
  _links?: ListSalesInvoicesLinks$Outbound | undefined;
};

/** @internal */
export const ListSalesInvoicesResponse$outboundSchema: z.ZodType<
  ListSalesInvoicesResponse$Outbound,
  z.ZodTypeDef,
  ListSalesInvoicesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListSalesInvoicesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListSalesInvoicesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSalesInvoicesResponse$ {
  /** @deprecated use `ListSalesInvoicesResponse$inboundSchema` instead. */
  export const inboundSchema = ListSalesInvoicesResponse$inboundSchema;
  /** @deprecated use `ListSalesInvoicesResponse$outboundSchema` instead. */
  export const outboundSchema = ListSalesInvoicesResponse$outboundSchema;
  /** @deprecated use `ListSalesInvoicesResponse$Outbound` instead. */
  export type Outbound = ListSalesInvoicesResponse$Outbound;
}

export function listSalesInvoicesResponseToJSON(
  listSalesInvoicesResponse: ListSalesInvoicesResponse,
): string {
  return JSON.stringify(
    ListSalesInvoicesResponse$outboundSchema.parse(listSalesInvoicesResponse),
  );
}

export function listSalesInvoicesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSalesInvoicesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSalesInvoicesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSalesInvoicesResponse' from JSON`,
  );
}
