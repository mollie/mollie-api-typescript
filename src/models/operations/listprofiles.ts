/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListProfilesRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListProfilesEmbedded = {
  /**
   * An array of profile objects.
   */
  profiles?: Array<models.EntityProfileResponse> | undefined;
};

/**
 * A list of profile objects.
 */
export type ListProfilesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListProfilesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: models.ListLinks | undefined;
};

/** @internal */
export const ListProfilesRequest$inboundSchema: z.ZodType<
  ListProfilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListProfilesRequest$Outbound = {
  from?: string | null | undefined;
  limit?: number | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListProfilesRequest$outboundSchema: z.ZodType<
  ListProfilesRequest$Outbound,
  z.ZodTypeDef,
  ListProfilesRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesRequest$ {
  /** @deprecated use `ListProfilesRequest$inboundSchema` instead. */
  export const inboundSchema = ListProfilesRequest$inboundSchema;
  /** @deprecated use `ListProfilesRequest$outboundSchema` instead. */
  export const outboundSchema = ListProfilesRequest$outboundSchema;
  /** @deprecated use `ListProfilesRequest$Outbound` instead. */
  export type Outbound = ListProfilesRequest$Outbound;
}

export function listProfilesRequestToJSON(
  listProfilesRequest: ListProfilesRequest,
): string {
  return JSON.stringify(
    ListProfilesRequest$outboundSchema.parse(listProfilesRequest),
  );
}

export function listProfilesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesRequest' from JSON`,
  );
}

/** @internal */
export const ListProfilesEmbedded$inboundSchema: z.ZodType<
  ListProfilesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  profiles: z.array(models.EntityProfileResponse$inboundSchema).optional(),
});

/** @internal */
export type ListProfilesEmbedded$Outbound = {
  profiles?: Array<models.EntityProfileResponse$Outbound> | undefined;
};

/** @internal */
export const ListProfilesEmbedded$outboundSchema: z.ZodType<
  ListProfilesEmbedded$Outbound,
  z.ZodTypeDef,
  ListProfilesEmbedded
> = z.object({
  profiles: z.array(models.EntityProfileResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesEmbedded$ {
  /** @deprecated use `ListProfilesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListProfilesEmbedded$inboundSchema;
  /** @deprecated use `ListProfilesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListProfilesEmbedded$outboundSchema;
  /** @deprecated use `ListProfilesEmbedded$Outbound` instead. */
  export type Outbound = ListProfilesEmbedded$Outbound;
}

export function listProfilesEmbeddedToJSON(
  listProfilesEmbedded: ListProfilesEmbedded,
): string {
  return JSON.stringify(
    ListProfilesEmbedded$outboundSchema.parse(listProfilesEmbedded),
  );
}

export function listProfilesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListProfilesResponse$inboundSchema: z.ZodType<
  ListProfilesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListProfilesEmbedded$inboundSchema).optional(),
  _links: models.ListLinks$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListProfilesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListProfilesEmbedded$Outbound | undefined;
  _links?: models.ListLinks$Outbound | undefined;
};

/** @internal */
export const ListProfilesResponse$outboundSchema: z.ZodType<
  ListProfilesResponse$Outbound,
  z.ZodTypeDef,
  ListProfilesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListProfilesEmbedded$outboundSchema).optional(),
  links: models.ListLinks$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesResponse$ {
  /** @deprecated use `ListProfilesResponse$inboundSchema` instead. */
  export const inboundSchema = ListProfilesResponse$inboundSchema;
  /** @deprecated use `ListProfilesResponse$outboundSchema` instead. */
  export const outboundSchema = ListProfilesResponse$outboundSchema;
  /** @deprecated use `ListProfilesResponse$Outbound` instead. */
  export type Outbound = ListProfilesResponse$Outbound;
}

export function listProfilesResponseToJSON(
  listProfilesResponse: ListProfilesResponse,
): string {
  return JSON.stringify(
    ListProfilesResponse$outboundSchema.parse(listProfilesResponse),
  );
}

export function listProfilesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesResponse' from JSON`,
  );
}
