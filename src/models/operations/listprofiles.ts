/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListProfilesRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListProfilesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListProfilesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListProfilesBadRequestDocumentation;
};

/**
 * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
 */
export type ListProfilesReview = {
  /**
   * The status of the requested changes.
   *
   * @remarks
   *
   * Possible values: `pending` `rejected`
   */
  status?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ProfileSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Link to the profile in the Mollie dashboard.
 */
export type ListProfilesDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the chargebacks that belong to this profile.
 */
export type ListProfilesChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the methods that are enabled for this profile.
 */
export type ListProfilesMethods = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the payments that belong to this profile.
 */
export type ListProfilesPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the refunds that belong to this profile.
 */
export type ListProfilesRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The hosted checkout preview URL. You need to be logged in to access this page.
 */
export type ListProfilesCheckoutPreviewUrl = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ProfileDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ProfileLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: ProfileSelf | undefined;
  /**
   * Link to the profile in the Mollie dashboard.
   */
  dashboard?: ListProfilesDashboard | undefined;
  /**
   * The API resource URL of the chargebacks that belong to this profile.
   */
  chargebacks?: ListProfilesChargebacks | undefined;
  /**
   * The API resource URL of the methods that are enabled for this profile.
   */
  methods?: ListProfilesMethods | undefined;
  /**
   * The API resource URL of the payments that belong to this profile.
   */
  payments?: ListProfilesPayments | undefined;
  /**
   * The API resource URL of the refunds that belong to this profile.
   */
  refunds?: ListProfilesRefunds | undefined;
  /**
   * The hosted checkout preview URL. You need to be logged in to access this page.
   */
  checkoutPreviewUrl?: ListProfilesCheckoutPreviewUrl | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ProfileDocumentation | undefined;
};

export type ListProfilesProfile = {
  /**
   * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
   */
  name?: string | undefined;
  /**
   * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
   */
  website?: string | undefined;
  /**
   * The email address associated with the profile's trade name or brand.
   */
  email?: string | undefined;
  /**
   * The phone number associated with the profile's trade name or brand.
   */
  phone?: string | undefined;
  /**
   * The products or services offered by the profile's website or application.
   */
  description?: string | undefined;
  /**
   * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  countriesOfActivity?: Array<string> | undefined;
  /**
   * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
   */
  businessCategory?: string | undefined;
  /**
   * The profile status determines whether the profile is able to receive live payments.
   *
   * @remarks
   *
   * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
   * * `verified`: The profile has been verified and can be used to create live payments and test payments.
   * * `blocked`: The profile is blocked and can no longer be used or changed.
   *
   * Possible values: `unverified` `verified` `blocked`
   */
  status?: string | undefined;
  /**
   * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
   */
  review?: ListProfilesReview | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ProfileLinks | undefined;
};

export type ListProfilesEmbedded = {
  /**
   * An array of profile objects.
   */
  profiles?: Array<ListProfilesProfile> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListProfilesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListProfilesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListProfilesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListProfilesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListProfilesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListProfilesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListProfilesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListProfilesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListProfilesDocumentation | undefined;
};

/**
 * A list of profile objects.
 */
export type ListProfilesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListProfilesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListProfilesLinks | undefined;
};

/** @internal */
export const ListProfilesRequest$inboundSchema: z.ZodType<
  ListProfilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
});

/** @internal */
export type ListProfilesRequest$Outbound = {
  from?: string | undefined;
  limit: number | null;
};

/** @internal */
export const ListProfilesRequest$outboundSchema: z.ZodType<
  ListProfilesRequest$Outbound,
  z.ZodTypeDef,
  ListProfilesRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesRequest$ {
  /** @deprecated use `ListProfilesRequest$inboundSchema` instead. */
  export const inboundSchema = ListProfilesRequest$inboundSchema;
  /** @deprecated use `ListProfilesRequest$outboundSchema` instead. */
  export const outboundSchema = ListProfilesRequest$outboundSchema;
  /** @deprecated use `ListProfilesRequest$Outbound` instead. */
  export type Outbound = ListProfilesRequest$Outbound;
}

export function listProfilesRequestToJSON(
  listProfilesRequest: ListProfilesRequest,
): string {
  return JSON.stringify(
    ListProfilesRequest$outboundSchema.parse(listProfilesRequest),
  );
}

export function listProfilesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesRequest' from JSON`,
  );
}

/** @internal */
export const ListProfilesBadRequestDocumentation$inboundSchema: z.ZodType<
  ListProfilesBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesBadRequestDocumentation$outboundSchema: z.ZodType<
  ListProfilesBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListProfilesBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesBadRequestDocumentation$ {
  /** @deprecated use `ListProfilesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListProfilesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListProfilesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListProfilesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListProfilesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListProfilesBadRequestDocumentation$Outbound;
}

export function listProfilesBadRequestDocumentationToJSON(
  listProfilesBadRequestDocumentation: ListProfilesBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListProfilesBadRequestDocumentation$outboundSchema.parse(
      listProfilesBadRequestDocumentation,
    ),
  );
}

export function listProfilesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListProfilesBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListProfilesBadRequestLinks$inboundSchema: z.ZodType<
  ListProfilesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListProfilesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListProfilesBadRequestLinks$Outbound = {
  documentation: ListProfilesBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListProfilesBadRequestLinks$outboundSchema: z.ZodType<
  ListProfilesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListProfilesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListProfilesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesBadRequestLinks$ {
  /** @deprecated use `ListProfilesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListProfilesBadRequestLinks$inboundSchema;
  /** @deprecated use `ListProfilesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListProfilesBadRequestLinks$outboundSchema;
  /** @deprecated use `ListProfilesBadRequestLinks$Outbound` instead. */
  export type Outbound = ListProfilesBadRequestLinks$Outbound;
}

export function listProfilesBadRequestLinksToJSON(
  listProfilesBadRequestLinks: ListProfilesBadRequestLinks,
): string {
  return JSON.stringify(
    ListProfilesBadRequestLinks$outboundSchema.parse(
      listProfilesBadRequestLinks,
    ),
  );
}

export function listProfilesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListProfilesReview$inboundSchema: z.ZodType<
  ListProfilesReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
});

/** @internal */
export type ListProfilesReview$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const ListProfilesReview$outboundSchema: z.ZodType<
  ListProfilesReview$Outbound,
  z.ZodTypeDef,
  ListProfilesReview
> = z.object({
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesReview$ {
  /** @deprecated use `ListProfilesReview$inboundSchema` instead. */
  export const inboundSchema = ListProfilesReview$inboundSchema;
  /** @deprecated use `ListProfilesReview$outboundSchema` instead. */
  export const outboundSchema = ListProfilesReview$outboundSchema;
  /** @deprecated use `ListProfilesReview$Outbound` instead. */
  export type Outbound = ListProfilesReview$Outbound;
}

export function listProfilesReviewToJSON(
  listProfilesReview: ListProfilesReview,
): string {
  return JSON.stringify(
    ListProfilesReview$outboundSchema.parse(listProfilesReview),
  );
}

export function listProfilesReviewFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesReview' from JSON`,
  );
}

/** @internal */
export const ProfileSelf$inboundSchema: z.ZodType<
  ProfileSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ProfileSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ProfileSelf$outboundSchema: z.ZodType<
  ProfileSelf$Outbound,
  z.ZodTypeDef,
  ProfileSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfileSelf$ {
  /** @deprecated use `ProfileSelf$inboundSchema` instead. */
  export const inboundSchema = ProfileSelf$inboundSchema;
  /** @deprecated use `ProfileSelf$outboundSchema` instead. */
  export const outboundSchema = ProfileSelf$outboundSchema;
  /** @deprecated use `ProfileSelf$Outbound` instead. */
  export type Outbound = ProfileSelf$Outbound;
}

export function profileSelfToJSON(profileSelf: ProfileSelf): string {
  return JSON.stringify(ProfileSelf$outboundSchema.parse(profileSelf));
}

export function profileSelfFromJSON(
  jsonString: string,
): SafeParseResult<ProfileSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProfileSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProfileSelf' from JSON`,
  );
}

/** @internal */
export const ListProfilesDashboard$inboundSchema: z.ZodType<
  ListProfilesDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesDashboard$outboundSchema: z.ZodType<
  ListProfilesDashboard$Outbound,
  z.ZodTypeDef,
  ListProfilesDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesDashboard$ {
  /** @deprecated use `ListProfilesDashboard$inboundSchema` instead. */
  export const inboundSchema = ListProfilesDashboard$inboundSchema;
  /** @deprecated use `ListProfilesDashboard$outboundSchema` instead. */
  export const outboundSchema = ListProfilesDashboard$outboundSchema;
  /** @deprecated use `ListProfilesDashboard$Outbound` instead. */
  export type Outbound = ListProfilesDashboard$Outbound;
}

export function listProfilesDashboardToJSON(
  listProfilesDashboard: ListProfilesDashboard,
): string {
  return JSON.stringify(
    ListProfilesDashboard$outboundSchema.parse(listProfilesDashboard),
  );
}

export function listProfilesDashboardFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesDashboard' from JSON`,
  );
}

/** @internal */
export const ListProfilesChargebacks$inboundSchema: z.ZodType<
  ListProfilesChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesChargebacks$outboundSchema: z.ZodType<
  ListProfilesChargebacks$Outbound,
  z.ZodTypeDef,
  ListProfilesChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesChargebacks$ {
  /** @deprecated use `ListProfilesChargebacks$inboundSchema` instead. */
  export const inboundSchema = ListProfilesChargebacks$inboundSchema;
  /** @deprecated use `ListProfilesChargebacks$outboundSchema` instead. */
  export const outboundSchema = ListProfilesChargebacks$outboundSchema;
  /** @deprecated use `ListProfilesChargebacks$Outbound` instead. */
  export type Outbound = ListProfilesChargebacks$Outbound;
}

export function listProfilesChargebacksToJSON(
  listProfilesChargebacks: ListProfilesChargebacks,
): string {
  return JSON.stringify(
    ListProfilesChargebacks$outboundSchema.parse(listProfilesChargebacks),
  );
}

export function listProfilesChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesChargebacks' from JSON`,
  );
}

/** @internal */
export const ListProfilesMethods$inboundSchema: z.ZodType<
  ListProfilesMethods,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesMethods$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesMethods$outboundSchema: z.ZodType<
  ListProfilesMethods$Outbound,
  z.ZodTypeDef,
  ListProfilesMethods
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesMethods$ {
  /** @deprecated use `ListProfilesMethods$inboundSchema` instead. */
  export const inboundSchema = ListProfilesMethods$inboundSchema;
  /** @deprecated use `ListProfilesMethods$outboundSchema` instead. */
  export const outboundSchema = ListProfilesMethods$outboundSchema;
  /** @deprecated use `ListProfilesMethods$Outbound` instead. */
  export type Outbound = ListProfilesMethods$Outbound;
}

export function listProfilesMethodsToJSON(
  listProfilesMethods: ListProfilesMethods,
): string {
  return JSON.stringify(
    ListProfilesMethods$outboundSchema.parse(listProfilesMethods),
  );
}

export function listProfilesMethodsFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesMethods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesMethods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesMethods' from JSON`,
  );
}

/** @internal */
export const ListProfilesPayments$inboundSchema: z.ZodType<
  ListProfilesPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesPayments$outboundSchema: z.ZodType<
  ListProfilesPayments$Outbound,
  z.ZodTypeDef,
  ListProfilesPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesPayments$ {
  /** @deprecated use `ListProfilesPayments$inboundSchema` instead. */
  export const inboundSchema = ListProfilesPayments$inboundSchema;
  /** @deprecated use `ListProfilesPayments$outboundSchema` instead. */
  export const outboundSchema = ListProfilesPayments$outboundSchema;
  /** @deprecated use `ListProfilesPayments$Outbound` instead. */
  export type Outbound = ListProfilesPayments$Outbound;
}

export function listProfilesPaymentsToJSON(
  listProfilesPayments: ListProfilesPayments,
): string {
  return JSON.stringify(
    ListProfilesPayments$outboundSchema.parse(listProfilesPayments),
  );
}

export function listProfilesPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesPayments' from JSON`,
  );
}

/** @internal */
export const ListProfilesRefunds$inboundSchema: z.ZodType<
  ListProfilesRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesRefunds$outboundSchema: z.ZodType<
  ListProfilesRefunds$Outbound,
  z.ZodTypeDef,
  ListProfilesRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesRefunds$ {
  /** @deprecated use `ListProfilesRefunds$inboundSchema` instead. */
  export const inboundSchema = ListProfilesRefunds$inboundSchema;
  /** @deprecated use `ListProfilesRefunds$outboundSchema` instead. */
  export const outboundSchema = ListProfilesRefunds$outboundSchema;
  /** @deprecated use `ListProfilesRefunds$Outbound` instead. */
  export type Outbound = ListProfilesRefunds$Outbound;
}

export function listProfilesRefundsToJSON(
  listProfilesRefunds: ListProfilesRefunds,
): string {
  return JSON.stringify(
    ListProfilesRefunds$outboundSchema.parse(listProfilesRefunds),
  );
}

export function listProfilesRefundsFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesRefunds' from JSON`,
  );
}

/** @internal */
export const ListProfilesCheckoutPreviewUrl$inboundSchema: z.ZodType<
  ListProfilesCheckoutPreviewUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesCheckoutPreviewUrl$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesCheckoutPreviewUrl$outboundSchema: z.ZodType<
  ListProfilesCheckoutPreviewUrl$Outbound,
  z.ZodTypeDef,
  ListProfilesCheckoutPreviewUrl
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesCheckoutPreviewUrl$ {
  /** @deprecated use `ListProfilesCheckoutPreviewUrl$inboundSchema` instead. */
  export const inboundSchema = ListProfilesCheckoutPreviewUrl$inboundSchema;
  /** @deprecated use `ListProfilesCheckoutPreviewUrl$outboundSchema` instead. */
  export const outboundSchema = ListProfilesCheckoutPreviewUrl$outboundSchema;
  /** @deprecated use `ListProfilesCheckoutPreviewUrl$Outbound` instead. */
  export type Outbound = ListProfilesCheckoutPreviewUrl$Outbound;
}

export function listProfilesCheckoutPreviewUrlToJSON(
  listProfilesCheckoutPreviewUrl: ListProfilesCheckoutPreviewUrl,
): string {
  return JSON.stringify(
    ListProfilesCheckoutPreviewUrl$outboundSchema.parse(
      listProfilesCheckoutPreviewUrl,
    ),
  );
}

export function listProfilesCheckoutPreviewUrlFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesCheckoutPreviewUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesCheckoutPreviewUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesCheckoutPreviewUrl' from JSON`,
  );
}

/** @internal */
export const ProfileDocumentation$inboundSchema: z.ZodType<
  ProfileDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ProfileDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ProfileDocumentation$outboundSchema: z.ZodType<
  ProfileDocumentation$Outbound,
  z.ZodTypeDef,
  ProfileDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfileDocumentation$ {
  /** @deprecated use `ProfileDocumentation$inboundSchema` instead. */
  export const inboundSchema = ProfileDocumentation$inboundSchema;
  /** @deprecated use `ProfileDocumentation$outboundSchema` instead. */
  export const outboundSchema = ProfileDocumentation$outboundSchema;
  /** @deprecated use `ProfileDocumentation$Outbound` instead. */
  export type Outbound = ProfileDocumentation$Outbound;
}

export function profileDocumentationToJSON(
  profileDocumentation: ProfileDocumentation,
): string {
  return JSON.stringify(
    ProfileDocumentation$outboundSchema.parse(profileDocumentation),
  );
}

export function profileDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ProfileDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProfileDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProfileDocumentation' from JSON`,
  );
}

/** @internal */
export const ProfileLinks$inboundSchema: z.ZodType<
  ProfileLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ProfileSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => ListProfilesDashboard$inboundSchema).optional(),
  chargebacks: z.lazy(() => ListProfilesChargebacks$inboundSchema).optional(),
  methods: z.lazy(() => ListProfilesMethods$inboundSchema).optional(),
  payments: z.lazy(() => ListProfilesPayments$inboundSchema).optional(),
  refunds: z.lazy(() => ListProfilesRefunds$inboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() => ListProfilesCheckoutPreviewUrl$inboundSchema)
    .optional(),
  documentation: z.lazy(() => ProfileDocumentation$inboundSchema).optional(),
});

/** @internal */
export type ProfileLinks$Outbound = {
  self?: ProfileSelf$Outbound | undefined;
  dashboard?: ListProfilesDashboard$Outbound | undefined;
  chargebacks?: ListProfilesChargebacks$Outbound | undefined;
  methods?: ListProfilesMethods$Outbound | undefined;
  payments?: ListProfilesPayments$Outbound | undefined;
  refunds?: ListProfilesRefunds$Outbound | undefined;
  checkoutPreviewUrl?: ListProfilesCheckoutPreviewUrl$Outbound | undefined;
  documentation?: ProfileDocumentation$Outbound | undefined;
};

/** @internal */
export const ProfileLinks$outboundSchema: z.ZodType<
  ProfileLinks$Outbound,
  z.ZodTypeDef,
  ProfileLinks
> = z.object({
  self: z.lazy(() => ProfileSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => ListProfilesDashboard$outboundSchema).optional(),
  chargebacks: z.lazy(() => ListProfilesChargebacks$outboundSchema).optional(),
  methods: z.lazy(() => ListProfilesMethods$outboundSchema).optional(),
  payments: z.lazy(() => ListProfilesPayments$outboundSchema).optional(),
  refunds: z.lazy(() => ListProfilesRefunds$outboundSchema).optional(),
  checkoutPreviewUrl: z.lazy(() =>
    ListProfilesCheckoutPreviewUrl$outboundSchema
  ).optional(),
  documentation: z.lazy(() => ProfileDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfileLinks$ {
  /** @deprecated use `ProfileLinks$inboundSchema` instead. */
  export const inboundSchema = ProfileLinks$inboundSchema;
  /** @deprecated use `ProfileLinks$outboundSchema` instead. */
  export const outboundSchema = ProfileLinks$outboundSchema;
  /** @deprecated use `ProfileLinks$Outbound` instead. */
  export type Outbound = ProfileLinks$Outbound;
}

export function profileLinksToJSON(profileLinks: ProfileLinks): string {
  return JSON.stringify(ProfileLinks$outboundSchema.parse(profileLinks));
}

export function profileLinksFromJSON(
  jsonString: string,
): SafeParseResult<ProfileLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProfileLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProfileLinks' from JSON`,
  );
}

/** @internal */
export const ListProfilesProfile$inboundSchema: z.ZodType<
  ListProfilesProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("profile"),
  id: z.string().optional(),
  mode: z.string().optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: z.string().optional(),
  review: z.lazy(() => ListProfilesReview$inboundSchema).optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => ProfileLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListProfilesProfile$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  description?: string | undefined;
  countriesOfActivity?: Array<string> | undefined;
  businessCategory?: string | undefined;
  status?: string | undefined;
  review?: ListProfilesReview$Outbound | undefined;
  createdAt?: string | undefined;
  _links?: ProfileLinks$Outbound | undefined;
};

/** @internal */
export const ListProfilesProfile$outboundSchema: z.ZodType<
  ListProfilesProfile$Outbound,
  z.ZodTypeDef,
  ListProfilesProfile
> = z.object({
  resource: z.string().default("profile"),
  id: z.string().optional(),
  mode: z.string().optional(),
  name: z.string().optional(),
  website: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  description: z.string().optional(),
  countriesOfActivity: z.array(z.string()).optional(),
  businessCategory: z.string().optional(),
  status: z.string().optional(),
  review: z.lazy(() => ListProfilesReview$outboundSchema).optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => ProfileLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesProfile$ {
  /** @deprecated use `ListProfilesProfile$inboundSchema` instead. */
  export const inboundSchema = ListProfilesProfile$inboundSchema;
  /** @deprecated use `ListProfilesProfile$outboundSchema` instead. */
  export const outboundSchema = ListProfilesProfile$outboundSchema;
  /** @deprecated use `ListProfilesProfile$Outbound` instead. */
  export type Outbound = ListProfilesProfile$Outbound;
}

export function listProfilesProfileToJSON(
  listProfilesProfile: ListProfilesProfile,
): string {
  return JSON.stringify(
    ListProfilesProfile$outboundSchema.parse(listProfilesProfile),
  );
}

export function listProfilesProfileFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesProfile' from JSON`,
  );
}

/** @internal */
export const ListProfilesEmbedded$inboundSchema: z.ZodType<
  ListProfilesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  profiles: z.array(z.lazy(() => ListProfilesProfile$inboundSchema)).optional(),
});

/** @internal */
export type ListProfilesEmbedded$Outbound = {
  profiles?: Array<ListProfilesProfile$Outbound> | undefined;
};

/** @internal */
export const ListProfilesEmbedded$outboundSchema: z.ZodType<
  ListProfilesEmbedded$Outbound,
  z.ZodTypeDef,
  ListProfilesEmbedded
> = z.object({
  profiles: z.array(z.lazy(() => ListProfilesProfile$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesEmbedded$ {
  /** @deprecated use `ListProfilesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListProfilesEmbedded$inboundSchema;
  /** @deprecated use `ListProfilesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListProfilesEmbedded$outboundSchema;
  /** @deprecated use `ListProfilesEmbedded$Outbound` instead. */
  export type Outbound = ListProfilesEmbedded$Outbound;
}

export function listProfilesEmbeddedToJSON(
  listProfilesEmbedded: ListProfilesEmbedded,
): string {
  return JSON.stringify(
    ListProfilesEmbedded$outboundSchema.parse(listProfilesEmbedded),
  );
}

export function listProfilesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListProfilesSelf$inboundSchema: z.ZodType<
  ListProfilesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesSelf$outboundSchema: z.ZodType<
  ListProfilesSelf$Outbound,
  z.ZodTypeDef,
  ListProfilesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesSelf$ {
  /** @deprecated use `ListProfilesSelf$inboundSchema` instead. */
  export const inboundSchema = ListProfilesSelf$inboundSchema;
  /** @deprecated use `ListProfilesSelf$outboundSchema` instead. */
  export const outboundSchema = ListProfilesSelf$outboundSchema;
  /** @deprecated use `ListProfilesSelf$Outbound` instead. */
  export type Outbound = ListProfilesSelf$Outbound;
}

export function listProfilesSelfToJSON(
  listProfilesSelf: ListProfilesSelf,
): string {
  return JSON.stringify(
    ListProfilesSelf$outboundSchema.parse(listProfilesSelf),
  );
}

export function listProfilesSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesSelf' from JSON`,
  );
}

/** @internal */
export const ListProfilesPrevious$inboundSchema: z.ZodType<
  ListProfilesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListProfilesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListProfilesPrevious$outboundSchema: z.ZodType<
  ListProfilesPrevious$Outbound,
  z.ZodTypeDef,
  ListProfilesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesPrevious$ {
  /** @deprecated use `ListProfilesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListProfilesPrevious$inboundSchema;
  /** @deprecated use `ListProfilesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListProfilesPrevious$outboundSchema;
  /** @deprecated use `ListProfilesPrevious$Outbound` instead. */
  export type Outbound = ListProfilesPrevious$Outbound;
}

export function listProfilesPreviousToJSON(
  listProfilesPrevious: ListProfilesPrevious,
): string {
  return JSON.stringify(
    ListProfilesPrevious$outboundSchema.parse(listProfilesPrevious),
  );
}

export function listProfilesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesPrevious' from JSON`,
  );
}

/** @internal */
export const ListProfilesNext$inboundSchema: z.ZodType<
  ListProfilesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListProfilesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListProfilesNext$outboundSchema: z.ZodType<
  ListProfilesNext$Outbound,
  z.ZodTypeDef,
  ListProfilesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesNext$ {
  /** @deprecated use `ListProfilesNext$inboundSchema` instead. */
  export const inboundSchema = ListProfilesNext$inboundSchema;
  /** @deprecated use `ListProfilesNext$outboundSchema` instead. */
  export const outboundSchema = ListProfilesNext$outboundSchema;
  /** @deprecated use `ListProfilesNext$Outbound` instead. */
  export type Outbound = ListProfilesNext$Outbound;
}

export function listProfilesNextToJSON(
  listProfilesNext: ListProfilesNext,
): string {
  return JSON.stringify(
    ListProfilesNext$outboundSchema.parse(listProfilesNext),
  );
}

export function listProfilesNextFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesNext' from JSON`,
  );
}

/** @internal */
export const ListProfilesDocumentation$inboundSchema: z.ZodType<
  ListProfilesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListProfilesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListProfilesDocumentation$outboundSchema: z.ZodType<
  ListProfilesDocumentation$Outbound,
  z.ZodTypeDef,
  ListProfilesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesDocumentation$ {
  /** @deprecated use `ListProfilesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListProfilesDocumentation$inboundSchema;
  /** @deprecated use `ListProfilesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListProfilesDocumentation$outboundSchema;
  /** @deprecated use `ListProfilesDocumentation$Outbound` instead. */
  export type Outbound = ListProfilesDocumentation$Outbound;
}

export function listProfilesDocumentationToJSON(
  listProfilesDocumentation: ListProfilesDocumentation,
): string {
  return JSON.stringify(
    ListProfilesDocumentation$outboundSchema.parse(listProfilesDocumentation),
  );
}

export function listProfilesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListProfilesLinks$inboundSchema: z.ZodType<
  ListProfilesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListProfilesSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListProfilesPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListProfilesNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListProfilesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListProfilesLinks$Outbound = {
  self?: ListProfilesSelf$Outbound | undefined;
  previous?: ListProfilesPrevious$Outbound | null | undefined;
  next?: ListProfilesNext$Outbound | null | undefined;
  documentation?: ListProfilesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListProfilesLinks$outboundSchema: z.ZodType<
  ListProfilesLinks$Outbound,
  z.ZodTypeDef,
  ListProfilesLinks
> = z.object({
  self: z.lazy(() => ListProfilesSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListProfilesPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListProfilesNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListProfilesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesLinks$ {
  /** @deprecated use `ListProfilesLinks$inboundSchema` instead. */
  export const inboundSchema = ListProfilesLinks$inboundSchema;
  /** @deprecated use `ListProfilesLinks$outboundSchema` instead. */
  export const outboundSchema = ListProfilesLinks$outboundSchema;
  /** @deprecated use `ListProfilesLinks$Outbound` instead. */
  export type Outbound = ListProfilesLinks$Outbound;
}

export function listProfilesLinksToJSON(
  listProfilesLinks: ListProfilesLinks,
): string {
  return JSON.stringify(
    ListProfilesLinks$outboundSchema.parse(listProfilesLinks),
  );
}

export function listProfilesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesLinks' from JSON`,
  );
}

/** @internal */
export const ListProfilesResponse$inboundSchema: z.ZodType<
  ListProfilesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListProfilesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListProfilesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListProfilesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListProfilesEmbedded$Outbound | undefined;
  _links?: ListProfilesLinks$Outbound | undefined;
};

/** @internal */
export const ListProfilesResponse$outboundSchema: z.ZodType<
  ListProfilesResponse$Outbound,
  z.ZodTypeDef,
  ListProfilesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListProfilesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListProfilesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProfilesResponse$ {
  /** @deprecated use `ListProfilesResponse$inboundSchema` instead. */
  export const inboundSchema = ListProfilesResponse$inboundSchema;
  /** @deprecated use `ListProfilesResponse$outboundSchema` instead. */
  export const outboundSchema = ListProfilesResponse$outboundSchema;
  /** @deprecated use `ListProfilesResponse$Outbound` instead. */
  export type Outbound = ListProfilesResponse$Outbound;
}

export function listProfilesResponseToJSON(
  listProfilesResponse: ListProfilesResponse,
): string {
  return JSON.stringify(
    ListProfilesResponse$outboundSchema.parse(listProfilesResponse),
  );
}

export function listProfilesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListProfilesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProfilesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProfilesResponse' from JSON`,
  );
}
