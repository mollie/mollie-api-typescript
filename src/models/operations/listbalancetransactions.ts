/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListBalanceTransactionsRequest = {
  /**
   * Provide the ID of the related balance.
   */
  balanceId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type ListBalanceTransactionsEmbedded = {
  /**
   * An array of balance transaction objects.
   */
  balanceTransactions?: Array<models.EntityBalanceTransaction> | undefined;
};

/**
 * A list of balance transaction objects.
 */
export type ListBalanceTransactionsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListBalanceTransactionsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: models.ListLinks | undefined;
};

/** @internal */
export const ListBalanceTransactionsRequest$inboundSchema: z.ZodType<
  ListBalanceTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  balanceId: z.string(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListBalanceTransactionsRequest$Outbound = {
  balanceId: string;
  from?: string | null | undefined;
  limit?: number | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListBalanceTransactionsRequest$outboundSchema: z.ZodType<
  ListBalanceTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsRequest
> = z.object({
  balanceId: z.string(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsRequest$ {
  /** @deprecated use `ListBalanceTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsRequest$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsRequest$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsRequest$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsRequest$Outbound;
}

export function listBalanceTransactionsRequestToJSON(
  listBalanceTransactionsRequest: ListBalanceTransactionsRequest,
): string {
  return JSON.stringify(
    ListBalanceTransactionsRequest$outboundSchema.parse(
      listBalanceTransactionsRequest,
    ),
  );
}

export function listBalanceTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsEmbedded$inboundSchema: z.ZodType<
  ListBalanceTransactionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  balance_transactions: z.array(models.EntityBalanceTransaction$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "balance_transactions": "balanceTransactions",
  });
});

/** @internal */
export type ListBalanceTransactionsEmbedded$Outbound = {
  balance_transactions?:
    | Array<models.EntityBalanceTransaction$Outbound>
    | undefined;
};

/** @internal */
export const ListBalanceTransactionsEmbedded$outboundSchema: z.ZodType<
  ListBalanceTransactionsEmbedded$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsEmbedded
> = z.object({
  balanceTransactions: z.array(models.EntityBalanceTransaction$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    balanceTransactions: "balance_transactions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsEmbedded$ {
  /** @deprecated use `ListBalanceTransactionsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsEmbedded$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsEmbedded$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsEmbedded$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsEmbedded$Outbound;
}

export function listBalanceTransactionsEmbeddedToJSON(
  listBalanceTransactionsEmbedded: ListBalanceTransactionsEmbedded,
): string {
  return JSON.stringify(
    ListBalanceTransactionsEmbedded$outboundSchema.parse(
      listBalanceTransactionsEmbedded,
    ),
  );
}

export function listBalanceTransactionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsResponse$inboundSchema: z.ZodType<
  ListBalanceTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListBalanceTransactionsEmbedded$inboundSchema)
    .optional(),
  _links: models.ListLinks$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListBalanceTransactionsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListBalanceTransactionsEmbedded$Outbound | undefined;
  _links?: models.ListLinks$Outbound | undefined;
};

/** @internal */
export const ListBalanceTransactionsResponse$outboundSchema: z.ZodType<
  ListBalanceTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListBalanceTransactionsEmbedded$outboundSchema)
    .optional(),
  links: models.ListLinks$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsResponse$ {
  /** @deprecated use `ListBalanceTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsResponse$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsResponse$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsResponse$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsResponse$Outbound;
}

export function listBalanceTransactionsResponseToJSON(
  listBalanceTransactionsResponse: ListBalanceTransactionsResponse,
): string {
  return JSON.stringify(
    ListBalanceTransactionsResponse$outboundSchema.parse(
      listBalanceTransactionsResponse,
    ),
  );
}

export function listBalanceTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsResponse' from JSON`,
  );
}
