/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBalanceTransactionsRequest = {
  /**
   * Provide the ID of the related balance.
   */
  balanceId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type TooManyRequestsDocumentation = {
  href: string;
  type: string;
};

export type TooManyRequestsLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: TooManyRequestsDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListBalanceTransactionsNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListBalanceTransactionsNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListBalanceTransactionsNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListBalanceTransactionsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListBalanceTransactionsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListBalanceTransactionsBadRequestDocumentation;
};

/**
 * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list
 *
 * @remarks
 * is not definitive.
 *
 * * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
 * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
 * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
 * * Invoicing: `invoice-compensation` `balance-correction`
 * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
 */
export const ListBalanceTransactionsType = {
  ApplicationFee: "application-fee",
  Capture: "capture",
  Chargeback: "chargeback",
  ChargebackReversal: "chargeback-reversal",
  FailedPaymentFee: "failed-payment-fee",
  FailedPayment: "failed-payment",
  InvoiceCompensation: "invoice-compensation",
  Payment: "payment",
  PaymentFee: "payment-fee",
  PaymentCommission: "payment-commission",
  Refund: "refund",
  ReturnedRefund: "returned-refund",
  ReturnedTransfer: "returned-transfer",
  SplitPayment: "split-payment",
  OutgoingTransfer: "outgoing-transfer",
  CaptureCommission: "capture-commission",
  CanceledOutgoingTransfer: "canceled-outgoing-transfer",
  IncomingTransfer: "incoming-transfer",
  ApiPaymentRollingReserveRelease: "api-payment-rolling-reserve-release",
  CaptureRollingReserveRelease: "capture-rolling-reserve-release",
  ReimbursementFee: "reimbursement-fee",
  BalanceCorrection: "balance-correction",
  UnauthorizedDirectDebit: "unauthorized-direct-debit",
  BankChargedFailureFee: "bank-charged-failure-fee",
  PlatformPaymentRefund: "platform-payment-refund",
  RefundCompensation: "refund-compensation",
  ReturnedRefundCompensation: "returned-refund-compensation",
  ReturnedPlatformPaymentRefund: "returned-platform-payment-refund",
  PlatformPaymentChargeback: "platform-payment-chargeback",
  ChargebackCompensation: "chargeback-compensation",
  ReversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
  ReversedChargebackCompensation: "reversed-chargeback-compensation",
  FailedSplitPaymentPlatform: "failed-split-payment-platform",
  FailedSplitPaymentCompensation: "failed-split-payment-compensation",
  CashAdvanceLoan: "cash-advance-loan",
  PlatformConnectedOrganizationsFee: "platform-connected-organizations-fee",
  SplitTransaction: "split-transaction",
  ManagedFee: "managed-fee",
  ReturnedManagedFee: "returned-managed-fee",
  Topup: "topup",
  BalanceReserve: "balance-reserve",
  BalanceReserveReturn: "balance-reserve-return",
  Movement: "movement",
  PostPaymentSplitPayment: "post-payment-split-payment",
  CashCollateralIssuance: "cash-collateral-issuance",
  CashCollateralRelease: "cash-collateral-release",
} as const;
/**
 * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list
 *
 * @remarks
 * is not definitive.
 *
 * * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
 * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
 * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
 * * Invoicing: `invoice-compensation` `balance-correction`
 * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
 */
export type ListBalanceTransactionsType = ClosedEnum<
  typeof ListBalanceTransactionsType
>;

/**
 * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for
 *
 * @remarks
 * example when it concerns a refund, the amount will be negative.
 */
export type ResultAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away
 *
 * @remarks
 * from the balance, for example when it concerns a refund, the amount will be negative.
 */
export type InitialAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment,
 *
 * @remarks
 * the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
 *
 * When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these
 * real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
 */
export type Deductions = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListBalanceTransactionsPayment = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

export type ListBalanceTransactionsCapture = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  captureId?: string | undefined;
  captureDescription?: string | undefined;
};

export type CaptureCommision = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  captureId?: string | undefined;
  captureDescription?: string | undefined;
};

export type CaptureRollingReserveRelease = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  captureId?: string | undefined;
  captureDescription?: string | undefined;
};

export type UnauthorizedDirectDebit = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

export type FailedPayment = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

export type ListBalanceTransactionsRefund = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

export type RefundCompensation = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

export type ReturnedRefund = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

export type ReturnedRefundCompensation = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

export type ListBalanceTransactionsChargeback = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

export type ChargebackReversal = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

export type ChargebackCompensation = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

export type ReversedChargebackCompensation = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

export type OutgoingTransfer = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

export type CanceledOutgoingTransfer = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

export type ReturnedTransfer = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

export type InvoiceCompensation = {
  invoiceId?: string | undefined;
};

export type ListBalanceTransactionsApplicationFee = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  payingOwner?: string | undefined;
};

export type SplitPayment = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  paymentOnwer?: string | undefined;
};

export type PlatformPaymentRefund = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

export type ReturnedPlatformPaymentRefund = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

export type PlatformPaymentChargeback = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

export type ReversedPlatformPaymentChargeback = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

export type PaymentCommission = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  organizationId?: string | undefined;
};

export type ReimbursementFee = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

export type FailedPaymentFee = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

export type PaymentFee = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

export type ManagedFee = {
  feeType?: string | undefined;
  feeId?: string | undefined;
};

export type ReturnedManagedFee = {
  feeType?: string | undefined;
  feeId?: string | undefined;
};

export type PostPaymentSplitPayment = {
  paymentId?: string | undefined;
};

/**
 * Depending on the type of the balance transaction, we will try to give more context about the specific event that
 *
 * @remarks
 * triggered it. For example, the context object for a payment transaction will look like
 * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
 *
 * Below is a complete list of the context values that each type of transaction will have.
 *
 * * Type `payment`: `paymentId`, `paymentDescription`
 * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
 * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
 * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
 * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
 * * Type `failed-payment`: `paymentId`, `paymentDescription`
 * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
 * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
 * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
 * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
 * * Type `outgoing-transfer`: `settlementId` `transferId`
 * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
 * * Type `returned-transfer`: `settlementId` `transferId`
 * * Type `invoice-compensation`: `invoiceId`
 * * Type `balance-correction`: none
 * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
 * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
 * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
 * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
 * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
 * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
 * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
 * * Type `payment-fee`: `paymentId`, `paymentDescription`
 * * Type `cash-advance-loan`: none
 * * Type `platform-connected-organizations-fee`: none
 * * Type `managed-fee`: `feeType`, `<name of the fee>Id`
 * * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
 * * Type `topup`: none
 * * Type `balance-reserve`: none
 * * Type `balance-reserve-return`: none
 * * Type `movement`: none
 * * Type `post-payment-split-payment`: `paymentId`
 * * Type `cash-collateral-issuance`: none
 * * Type `cash-collateral-release`: none
 */
export type Context = {
  payment?: ListBalanceTransactionsPayment | null | undefined;
  capture?: ListBalanceTransactionsCapture | null | undefined;
  captureCommision?: CaptureCommision | null | undefined;
  captureRollingReserveRelease?:
    | CaptureRollingReserveRelease
    | null
    | undefined;
  unauthorizedDirectDebit?: UnauthorizedDirectDebit | null | undefined;
  failedPayment?: FailedPayment | null | undefined;
  refund?: ListBalanceTransactionsRefund | null | undefined;
  refundCompensation?: RefundCompensation | null | undefined;
  returnedRefund?: ReturnedRefund | null | undefined;
  returnedRefundCompensation?: ReturnedRefundCompensation | null | undefined;
  chargeback?: ListBalanceTransactionsChargeback | null | undefined;
  chargebackReversal?: ChargebackReversal | null | undefined;
  chargebackCompensation?: ChargebackCompensation | null | undefined;
  reversedChargebackCompensation?:
    | ReversedChargebackCompensation
    | null
    | undefined;
  outgoingTransfer?: OutgoingTransfer | null | undefined;
  canceledOutgoingTransfer?: CanceledOutgoingTransfer | null | undefined;
  returnedTransfer?: ReturnedTransfer | null | undefined;
  invoiceCompensation?: InvoiceCompensation | null | undefined;
  applicationFee?: ListBalanceTransactionsApplicationFee | null | undefined;
  splitPayment?: SplitPayment | null | undefined;
  platformPaymentRefund?: PlatformPaymentRefund | null | undefined;
  returnedPlatformPaymentRefund?:
    | ReturnedPlatformPaymentRefund
    | null
    | undefined;
  platformPaymentChargeback?: PlatformPaymentChargeback | null | undefined;
  reversedPlatformPaymentChargeback?:
    | ReversedPlatformPaymentChargeback
    | null
    | undefined;
  paymentCommission?: PaymentCommission | null | undefined;
  reimbursementFee?: ReimbursementFee | null | undefined;
  failedPaymentFee?: FailedPaymentFee | null | undefined;
  paymentFee?: PaymentFee | null | undefined;
  managedFee?: ManagedFee | null | undefined;
  returnedManagedFee?: ReturnedManagedFee | null | undefined;
  postPaymentSplitPayment?: PostPaymentSplitPayment | null | undefined;
};

export type BalanceTransaction = {
  /**
   * Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
   *
   * @remarks
   * for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this balance transaction.
   */
  id?: string | undefined;
  /**
   * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list
   *
   * @remarks
   * is not definitive.
   *
   * * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
   * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
   * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
   * * Invoicing: `invoice-compensation` `balance-correction`
   * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
   */
  type?: ListBalanceTransactionsType | undefined;
  /**
   * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for
   *
   * @remarks
   * example when it concerns a refund, the amount will be negative.
   */
  resultAmount?: ResultAmount | undefined;
  /**
   * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away
   *
   * @remarks
   * from the balance, for example when it concerns a refund, the amount will be negative.
   */
  initialAmount?: InitialAmount | undefined;
  /**
   * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment,
   *
   * @remarks
   * the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
   *
   * When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these
   * real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
   */
  deductions?: Deductions | null | undefined;
  /**
   * Depending on the type of the balance transaction, we will try to give more context about the specific event that
   *
   * @remarks
   * triggered it. For example, the context object for a payment transaction will look like
   * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
   *
   * Below is a complete list of the context values that each type of transaction will have.
   *
   * * Type `payment`: `paymentId`, `paymentDescription`
   * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
   * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
   * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
   * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
   * * Type `failed-payment`: `paymentId`, `paymentDescription`
   * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
   * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
   * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
   * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
   * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
   * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
   * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
   * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
   * * Type `outgoing-transfer`: `settlementId` `transferId`
   * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
   * * Type `returned-transfer`: `settlementId` `transferId`
   * * Type `invoice-compensation`: `invoiceId`
   * * Type `balance-correction`: none
   * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
   * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
   * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
   * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
   * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
   * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
   * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
   * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
   * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
   * * Type `payment-fee`: `paymentId`, `paymentDescription`
   * * Type `cash-advance-loan`: none
   * * Type `platform-connected-organizations-fee`: none
   * * Type `managed-fee`: `feeType`, `<name of the fee>Id`
   * * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
   * * Type `topup`: none
   * * Type `balance-reserve`: none
   * * Type `balance-reserve-return`: none
   * * Type `movement`: none
   * * Type `post-payment-split-payment`: `paymentId`
   * * Type `cash-collateral-issuance`: none
   * * Type `cash-collateral-release`: none
   */
  context?: Context | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
};

export type ListBalanceTransactionsEmbedded = {
  /**
   * An array of balance transaction objects.
   */
  balanceTransactions?: Array<BalanceTransaction> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListBalanceTransactionsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListBalanceTransactionsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListBalanceTransactionsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListBalanceTransactionsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListBalanceTransactionsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListBalanceTransactionsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListBalanceTransactionsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListBalanceTransactionsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListBalanceTransactionsDocumentation | undefined;
};

/**
 * A list of balance transaction objects.
 */
export type ListBalanceTransactionsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListBalanceTransactionsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListBalanceTransactionsLinks | undefined;
};

/** @internal */
export const ListBalanceTransactionsRequest$inboundSchema: z.ZodType<
  ListBalanceTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  balanceId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListBalanceTransactionsRequest$Outbound = {
  balanceId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListBalanceTransactionsRequest$outboundSchema: z.ZodType<
  ListBalanceTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsRequest
> = z.object({
  balanceId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsRequest$ {
  /** @deprecated use `ListBalanceTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsRequest$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsRequest$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsRequest$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsRequest$Outbound;
}

export function listBalanceTransactionsRequestToJSON(
  listBalanceTransactionsRequest: ListBalanceTransactionsRequest,
): string {
  return JSON.stringify(
    ListBalanceTransactionsRequest$outboundSchema.parse(
      listBalanceTransactionsRequest,
    ),
  );
}

export function listBalanceTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const TooManyRequestsDocumentation$inboundSchema: z.ZodType<
  TooManyRequestsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type TooManyRequestsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const TooManyRequestsDocumentation$outboundSchema: z.ZodType<
  TooManyRequestsDocumentation$Outbound,
  z.ZodTypeDef,
  TooManyRequestsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyRequestsDocumentation$ {
  /** @deprecated use `TooManyRequestsDocumentation$inboundSchema` instead. */
  export const inboundSchema = TooManyRequestsDocumentation$inboundSchema;
  /** @deprecated use `TooManyRequestsDocumentation$outboundSchema` instead. */
  export const outboundSchema = TooManyRequestsDocumentation$outboundSchema;
  /** @deprecated use `TooManyRequestsDocumentation$Outbound` instead. */
  export type Outbound = TooManyRequestsDocumentation$Outbound;
}

export function tooManyRequestsDocumentationToJSON(
  tooManyRequestsDocumentation: TooManyRequestsDocumentation,
): string {
  return JSON.stringify(
    TooManyRequestsDocumentation$outboundSchema.parse(
      tooManyRequestsDocumentation,
    ),
  );
}

export function tooManyRequestsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<TooManyRequestsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TooManyRequestsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TooManyRequestsDocumentation' from JSON`,
  );
}

/** @internal */
export const TooManyRequestsLinks$inboundSchema: z.ZodType<
  TooManyRequestsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => TooManyRequestsDocumentation$inboundSchema),
});

/** @internal */
export type TooManyRequestsLinks$Outbound = {
  documentation: TooManyRequestsDocumentation$Outbound;
};

/** @internal */
export const TooManyRequestsLinks$outboundSchema: z.ZodType<
  TooManyRequestsLinks$Outbound,
  z.ZodTypeDef,
  TooManyRequestsLinks
> = z.object({
  documentation: z.lazy(() => TooManyRequestsDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyRequestsLinks$ {
  /** @deprecated use `TooManyRequestsLinks$inboundSchema` instead. */
  export const inboundSchema = TooManyRequestsLinks$inboundSchema;
  /** @deprecated use `TooManyRequestsLinks$outboundSchema` instead. */
  export const outboundSchema = TooManyRequestsLinks$outboundSchema;
  /** @deprecated use `TooManyRequestsLinks$Outbound` instead. */
  export type Outbound = TooManyRequestsLinks$Outbound;
}

export function tooManyRequestsLinksToJSON(
  tooManyRequestsLinks: TooManyRequestsLinks,
): string {
  return JSON.stringify(
    TooManyRequestsLinks$outboundSchema.parse(tooManyRequestsLinks),
  );
}

export function tooManyRequestsLinksFromJSON(
  jsonString: string,
): SafeParseResult<TooManyRequestsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TooManyRequestsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TooManyRequestsLinks' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsNotFoundDocumentation$inboundSchema:
  z.ZodType<
    ListBalanceTransactionsNotFoundDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListBalanceTransactionsNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsNotFoundDocumentation$outboundSchema:
  z.ZodType<
    ListBalanceTransactionsNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    ListBalanceTransactionsNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsNotFoundDocumentation$ {
  /** @deprecated use `ListBalanceTransactionsNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsNotFoundDocumentation$Outbound;
}

export function listBalanceTransactionsNotFoundDocumentationToJSON(
  listBalanceTransactionsNotFoundDocumentation:
    ListBalanceTransactionsNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListBalanceTransactionsNotFoundDocumentation$outboundSchema.parse(
      listBalanceTransactionsNotFoundDocumentation,
    ),
  );
}

export function listBalanceTransactionsNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListBalanceTransactionsNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListBalanceTransactionsNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsNotFoundLinks$inboundSchema: z.ZodType<
  ListBalanceTransactionsNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListBalanceTransactionsNotFoundLinks$Outbound = {
  documentation: ListBalanceTransactionsNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListBalanceTransactionsNotFoundLinks$outboundSchema: z.ZodType<
  ListBalanceTransactionsNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsNotFoundLinks$ {
  /** @deprecated use `ListBalanceTransactionsNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsNotFoundLinks$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsNotFoundLinks$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundLinks$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsNotFoundLinks$Outbound;
}

export function listBalanceTransactionsNotFoundLinksToJSON(
  listBalanceTransactionsNotFoundLinks: ListBalanceTransactionsNotFoundLinks,
): string {
  return JSON.stringify(
    ListBalanceTransactionsNotFoundLinks$outboundSchema.parse(
      listBalanceTransactionsNotFoundLinks,
    ),
  );
}

export function listBalanceTransactionsNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsBadRequestDocumentation$inboundSchema:
  z.ZodType<
    ListBalanceTransactionsBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListBalanceTransactionsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsBadRequestDocumentation$outboundSchema:
  z.ZodType<
    ListBalanceTransactionsBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    ListBalanceTransactionsBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsBadRequestDocumentation$ {
  /** @deprecated use `ListBalanceTransactionsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestDocumentation$Outbound` instead. */
  export type Outbound =
    ListBalanceTransactionsBadRequestDocumentation$Outbound;
}

export function listBalanceTransactionsBadRequestDocumentationToJSON(
  listBalanceTransactionsBadRequestDocumentation:
    ListBalanceTransactionsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListBalanceTransactionsBadRequestDocumentation$outboundSchema.parse(
      listBalanceTransactionsBadRequestDocumentation,
    ),
  );
}

export function listBalanceTransactionsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListBalanceTransactionsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListBalanceTransactionsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsBadRequestLinks$inboundSchema: z.ZodType<
  ListBalanceTransactionsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListBalanceTransactionsBadRequestLinks$Outbound = {
  documentation: ListBalanceTransactionsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListBalanceTransactionsBadRequestLinks$outboundSchema: z.ZodType<
  ListBalanceTransactionsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsBadRequestLinks$ {
  /** @deprecated use `ListBalanceTransactionsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsBadRequestLinks$Outbound;
}

export function listBalanceTransactionsBadRequestLinksToJSON(
  listBalanceTransactionsBadRequestLinks:
    ListBalanceTransactionsBadRequestLinks,
): string {
  return JSON.stringify(
    ListBalanceTransactionsBadRequestLinks$outboundSchema.parse(
      listBalanceTransactionsBadRequestLinks,
    ),
  );
}

export function listBalanceTransactionsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof ListBalanceTransactionsType
> = z.nativeEnum(ListBalanceTransactionsType);

/** @internal */
export const ListBalanceTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof ListBalanceTransactionsType
> = ListBalanceTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsType$ {
  /** @deprecated use `ListBalanceTransactionsType$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsType$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsType$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsType$outboundSchema;
}

/** @internal */
export const ResultAmount$inboundSchema: z.ZodType<
  ResultAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ResultAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ResultAmount$outboundSchema: z.ZodType<
  ResultAmount$Outbound,
  z.ZodTypeDef,
  ResultAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultAmount$ {
  /** @deprecated use `ResultAmount$inboundSchema` instead. */
  export const inboundSchema = ResultAmount$inboundSchema;
  /** @deprecated use `ResultAmount$outboundSchema` instead. */
  export const outboundSchema = ResultAmount$outboundSchema;
  /** @deprecated use `ResultAmount$Outbound` instead. */
  export type Outbound = ResultAmount$Outbound;
}

export function resultAmountToJSON(resultAmount: ResultAmount): string {
  return JSON.stringify(ResultAmount$outboundSchema.parse(resultAmount));
}

export function resultAmountFromJSON(
  jsonString: string,
): SafeParseResult<ResultAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultAmount' from JSON`,
  );
}

/** @internal */
export const InitialAmount$inboundSchema: z.ZodType<
  InitialAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type InitialAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const InitialAmount$outboundSchema: z.ZodType<
  InitialAmount$Outbound,
  z.ZodTypeDef,
  InitialAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitialAmount$ {
  /** @deprecated use `InitialAmount$inboundSchema` instead. */
  export const inboundSchema = InitialAmount$inboundSchema;
  /** @deprecated use `InitialAmount$outboundSchema` instead. */
  export const outboundSchema = InitialAmount$outboundSchema;
  /** @deprecated use `InitialAmount$Outbound` instead. */
  export type Outbound = InitialAmount$Outbound;
}

export function initialAmountToJSON(initialAmount: InitialAmount): string {
  return JSON.stringify(InitialAmount$outboundSchema.parse(initialAmount));
}

export function initialAmountFromJSON(
  jsonString: string,
): SafeParseResult<InitialAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitialAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitialAmount' from JSON`,
  );
}

/** @internal */
export const Deductions$inboundSchema: z.ZodType<
  Deductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type Deductions$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const Deductions$outboundSchema: z.ZodType<
  Deductions$Outbound,
  z.ZodTypeDef,
  Deductions
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deductions$ {
  /** @deprecated use `Deductions$inboundSchema` instead. */
  export const inboundSchema = Deductions$inboundSchema;
  /** @deprecated use `Deductions$outboundSchema` instead. */
  export const outboundSchema = Deductions$outboundSchema;
  /** @deprecated use `Deductions$Outbound` instead. */
  export type Outbound = Deductions$Outbound;
}

export function deductionsToJSON(deductions: Deductions): string {
  return JSON.stringify(Deductions$outboundSchema.parse(deductions));
}

export function deductionsFromJSON(
  jsonString: string,
): SafeParseResult<Deductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deductions' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsPayment$inboundSchema: z.ZodType<
  ListBalanceTransactionsPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsPayment$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsPayment$outboundSchema: z.ZodType<
  ListBalanceTransactionsPayment$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsPayment
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsPayment$ {
  /** @deprecated use `ListBalanceTransactionsPayment$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsPayment$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsPayment$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsPayment$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsPayment$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsPayment$Outbound;
}

export function listBalanceTransactionsPaymentToJSON(
  listBalanceTransactionsPayment: ListBalanceTransactionsPayment,
): string {
  return JSON.stringify(
    ListBalanceTransactionsPayment$outboundSchema.parse(
      listBalanceTransactionsPayment,
    ),
  );
}

export function listBalanceTransactionsPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsPayment' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsCapture$inboundSchema: z.ZodType<
  ListBalanceTransactionsCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  captureId: z.string().optional(),
  captureDescription: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsCapture$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  captureId?: string | undefined;
  captureDescription?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsCapture$outboundSchema: z.ZodType<
  ListBalanceTransactionsCapture$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsCapture
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  captureId: z.string().optional(),
  captureDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsCapture$ {
  /** @deprecated use `ListBalanceTransactionsCapture$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsCapture$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsCapture$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsCapture$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsCapture$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsCapture$Outbound;
}

export function listBalanceTransactionsCaptureToJSON(
  listBalanceTransactionsCapture: ListBalanceTransactionsCapture,
): string {
  return JSON.stringify(
    ListBalanceTransactionsCapture$outboundSchema.parse(
      listBalanceTransactionsCapture,
    ),
  );
}

export function listBalanceTransactionsCaptureFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsCapture' from JSON`,
  );
}

/** @internal */
export const CaptureCommision$inboundSchema: z.ZodType<
  CaptureCommision,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  captureId: z.string().optional(),
  captureDescription: z.string().optional(),
});

/** @internal */
export type CaptureCommision$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  captureId?: string | undefined;
  captureDescription?: string | undefined;
};

/** @internal */
export const CaptureCommision$outboundSchema: z.ZodType<
  CaptureCommision$Outbound,
  z.ZodTypeDef,
  CaptureCommision
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  captureId: z.string().optional(),
  captureDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaptureCommision$ {
  /** @deprecated use `CaptureCommision$inboundSchema` instead. */
  export const inboundSchema = CaptureCommision$inboundSchema;
  /** @deprecated use `CaptureCommision$outboundSchema` instead. */
  export const outboundSchema = CaptureCommision$outboundSchema;
  /** @deprecated use `CaptureCommision$Outbound` instead. */
  export type Outbound = CaptureCommision$Outbound;
}

export function captureCommisionToJSON(
  captureCommision: CaptureCommision,
): string {
  return JSON.stringify(
    CaptureCommision$outboundSchema.parse(captureCommision),
  );
}

export function captureCommisionFromJSON(
  jsonString: string,
): SafeParseResult<CaptureCommision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaptureCommision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaptureCommision' from JSON`,
  );
}

/** @internal */
export const CaptureRollingReserveRelease$inboundSchema: z.ZodType<
  CaptureRollingReserveRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  captureId: z.string().optional(),
  captureDescription: z.string().optional(),
});

/** @internal */
export type CaptureRollingReserveRelease$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  captureId?: string | undefined;
  captureDescription?: string | undefined;
};

/** @internal */
export const CaptureRollingReserveRelease$outboundSchema: z.ZodType<
  CaptureRollingReserveRelease$Outbound,
  z.ZodTypeDef,
  CaptureRollingReserveRelease
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  captureId: z.string().optional(),
  captureDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaptureRollingReserveRelease$ {
  /** @deprecated use `CaptureRollingReserveRelease$inboundSchema` instead. */
  export const inboundSchema = CaptureRollingReserveRelease$inboundSchema;
  /** @deprecated use `CaptureRollingReserveRelease$outboundSchema` instead. */
  export const outboundSchema = CaptureRollingReserveRelease$outboundSchema;
  /** @deprecated use `CaptureRollingReserveRelease$Outbound` instead. */
  export type Outbound = CaptureRollingReserveRelease$Outbound;
}

export function captureRollingReserveReleaseToJSON(
  captureRollingReserveRelease: CaptureRollingReserveRelease,
): string {
  return JSON.stringify(
    CaptureRollingReserveRelease$outboundSchema.parse(
      captureRollingReserveRelease,
    ),
  );
}

export function captureRollingReserveReleaseFromJSON(
  jsonString: string,
): SafeParseResult<CaptureRollingReserveRelease, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaptureRollingReserveRelease$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaptureRollingReserveRelease' from JSON`,
  );
}

/** @internal */
export const UnauthorizedDirectDebit$inboundSchema: z.ZodType<
  UnauthorizedDirectDebit,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/** @internal */
export type UnauthorizedDirectDebit$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

/** @internal */
export const UnauthorizedDirectDebit$outboundSchema: z.ZodType<
  UnauthorizedDirectDebit$Outbound,
  z.ZodTypeDef,
  UnauthorizedDirectDebit
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedDirectDebit$ {
  /** @deprecated use `UnauthorizedDirectDebit$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedDirectDebit$inboundSchema;
  /** @deprecated use `UnauthorizedDirectDebit$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedDirectDebit$outboundSchema;
  /** @deprecated use `UnauthorizedDirectDebit$Outbound` instead. */
  export type Outbound = UnauthorizedDirectDebit$Outbound;
}

export function unauthorizedDirectDebitToJSON(
  unauthorizedDirectDebit: UnauthorizedDirectDebit,
): string {
  return JSON.stringify(
    UnauthorizedDirectDebit$outboundSchema.parse(unauthorizedDirectDebit),
  );
}

export function unauthorizedDirectDebitFromJSON(
  jsonString: string,
): SafeParseResult<UnauthorizedDirectDebit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnauthorizedDirectDebit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnauthorizedDirectDebit' from JSON`,
  );
}

/** @internal */
export const FailedPayment$inboundSchema: z.ZodType<
  FailedPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/** @internal */
export type FailedPayment$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

/** @internal */
export const FailedPayment$outboundSchema: z.ZodType<
  FailedPayment$Outbound,
  z.ZodTypeDef,
  FailedPayment
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FailedPayment$ {
  /** @deprecated use `FailedPayment$inboundSchema` instead. */
  export const inboundSchema = FailedPayment$inboundSchema;
  /** @deprecated use `FailedPayment$outboundSchema` instead. */
  export const outboundSchema = FailedPayment$outboundSchema;
  /** @deprecated use `FailedPayment$Outbound` instead. */
  export type Outbound = FailedPayment$Outbound;
}

export function failedPaymentToJSON(failedPayment: FailedPayment): string {
  return JSON.stringify(FailedPayment$outboundSchema.parse(failedPayment));
}

export function failedPaymentFromJSON(
  jsonString: string,
): SafeParseResult<FailedPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FailedPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FailedPayment' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsRefund$inboundSchema: z.ZodType<
  ListBalanceTransactionsRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsRefund$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsRefund$outboundSchema: z.ZodType<
  ListBalanceTransactionsRefund$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsRefund
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsRefund$ {
  /** @deprecated use `ListBalanceTransactionsRefund$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsRefund$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsRefund$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsRefund$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsRefund$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsRefund$Outbound;
}

export function listBalanceTransactionsRefundToJSON(
  listBalanceTransactionsRefund: ListBalanceTransactionsRefund,
): string {
  return JSON.stringify(
    ListBalanceTransactionsRefund$outboundSchema.parse(
      listBalanceTransactionsRefund,
    ),
  );
}

export function listBalanceTransactionsRefundFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsRefund' from JSON`,
  );
}

/** @internal */
export const RefundCompensation$inboundSchema: z.ZodType<
  RefundCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/** @internal */
export type RefundCompensation$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

/** @internal */
export const RefundCompensation$outboundSchema: z.ZodType<
  RefundCompensation$Outbound,
  z.ZodTypeDef,
  RefundCompensation
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundCompensation$ {
  /** @deprecated use `RefundCompensation$inboundSchema` instead. */
  export const inboundSchema = RefundCompensation$inboundSchema;
  /** @deprecated use `RefundCompensation$outboundSchema` instead. */
  export const outboundSchema = RefundCompensation$outboundSchema;
  /** @deprecated use `RefundCompensation$Outbound` instead. */
  export type Outbound = RefundCompensation$Outbound;
}

export function refundCompensationToJSON(
  refundCompensation: RefundCompensation,
): string {
  return JSON.stringify(
    RefundCompensation$outboundSchema.parse(refundCompensation),
  );
}

export function refundCompensationFromJSON(
  jsonString: string,
): SafeParseResult<RefundCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundCompensation' from JSON`,
  );
}

/** @internal */
export const ReturnedRefund$inboundSchema: z.ZodType<
  ReturnedRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/** @internal */
export type ReturnedRefund$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

/** @internal */
export const ReturnedRefund$outboundSchema: z.ZodType<
  ReturnedRefund$Outbound,
  z.ZodTypeDef,
  ReturnedRefund
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnedRefund$ {
  /** @deprecated use `ReturnedRefund$inboundSchema` instead. */
  export const inboundSchema = ReturnedRefund$inboundSchema;
  /** @deprecated use `ReturnedRefund$outboundSchema` instead. */
  export const outboundSchema = ReturnedRefund$outboundSchema;
  /** @deprecated use `ReturnedRefund$Outbound` instead. */
  export type Outbound = ReturnedRefund$Outbound;
}

export function returnedRefundToJSON(returnedRefund: ReturnedRefund): string {
  return JSON.stringify(ReturnedRefund$outboundSchema.parse(returnedRefund));
}

export function returnedRefundFromJSON(
  jsonString: string,
): SafeParseResult<ReturnedRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReturnedRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReturnedRefund' from JSON`,
  );
}

/** @internal */
export const ReturnedRefundCompensation$inboundSchema: z.ZodType<
  ReturnedRefundCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/** @internal */
export type ReturnedRefundCompensation$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

/** @internal */
export const ReturnedRefundCompensation$outboundSchema: z.ZodType<
  ReturnedRefundCompensation$Outbound,
  z.ZodTypeDef,
  ReturnedRefundCompensation
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnedRefundCompensation$ {
  /** @deprecated use `ReturnedRefundCompensation$inboundSchema` instead. */
  export const inboundSchema = ReturnedRefundCompensation$inboundSchema;
  /** @deprecated use `ReturnedRefundCompensation$outboundSchema` instead. */
  export const outboundSchema = ReturnedRefundCompensation$outboundSchema;
  /** @deprecated use `ReturnedRefundCompensation$Outbound` instead. */
  export type Outbound = ReturnedRefundCompensation$Outbound;
}

export function returnedRefundCompensationToJSON(
  returnedRefundCompensation: ReturnedRefundCompensation,
): string {
  return JSON.stringify(
    ReturnedRefundCompensation$outboundSchema.parse(returnedRefundCompensation),
  );
}

export function returnedRefundCompensationFromJSON(
  jsonString: string,
): SafeParseResult<ReturnedRefundCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReturnedRefundCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReturnedRefundCompensation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsChargeback$inboundSchema: z.ZodType<
  ListBalanceTransactionsChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsChargeback$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsChargeback$outboundSchema: z.ZodType<
  ListBalanceTransactionsChargeback$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsChargeback
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsChargeback$ {
  /** @deprecated use `ListBalanceTransactionsChargeback$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsChargeback$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsChargeback$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsChargeback$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsChargeback$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsChargeback$Outbound;
}

export function listBalanceTransactionsChargebackToJSON(
  listBalanceTransactionsChargeback: ListBalanceTransactionsChargeback,
): string {
  return JSON.stringify(
    ListBalanceTransactionsChargeback$outboundSchema.parse(
      listBalanceTransactionsChargeback,
    ),
  );
}

export function listBalanceTransactionsChargebackFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsChargeback' from JSON`,
  );
}

/** @internal */
export const ChargebackReversal$inboundSchema: z.ZodType<
  ChargebackReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/** @internal */
export type ChargebackReversal$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

/** @internal */
export const ChargebackReversal$outboundSchema: z.ZodType<
  ChargebackReversal$Outbound,
  z.ZodTypeDef,
  ChargebackReversal
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebackReversal$ {
  /** @deprecated use `ChargebackReversal$inboundSchema` instead. */
  export const inboundSchema = ChargebackReversal$inboundSchema;
  /** @deprecated use `ChargebackReversal$outboundSchema` instead. */
  export const outboundSchema = ChargebackReversal$outboundSchema;
  /** @deprecated use `ChargebackReversal$Outbound` instead. */
  export type Outbound = ChargebackReversal$Outbound;
}

export function chargebackReversalToJSON(
  chargebackReversal: ChargebackReversal,
): string {
  return JSON.stringify(
    ChargebackReversal$outboundSchema.parse(chargebackReversal),
  );
}

export function chargebackReversalFromJSON(
  jsonString: string,
): SafeParseResult<ChargebackReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebackReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebackReversal' from JSON`,
  );
}

/** @internal */
export const ChargebackCompensation$inboundSchema: z.ZodType<
  ChargebackCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/** @internal */
export type ChargebackCompensation$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

/** @internal */
export const ChargebackCompensation$outboundSchema: z.ZodType<
  ChargebackCompensation$Outbound,
  z.ZodTypeDef,
  ChargebackCompensation
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargebackCompensation$ {
  /** @deprecated use `ChargebackCompensation$inboundSchema` instead. */
  export const inboundSchema = ChargebackCompensation$inboundSchema;
  /** @deprecated use `ChargebackCompensation$outboundSchema` instead. */
  export const outboundSchema = ChargebackCompensation$outboundSchema;
  /** @deprecated use `ChargebackCompensation$Outbound` instead. */
  export type Outbound = ChargebackCompensation$Outbound;
}

export function chargebackCompensationToJSON(
  chargebackCompensation: ChargebackCompensation,
): string {
  return JSON.stringify(
    ChargebackCompensation$outboundSchema.parse(chargebackCompensation),
  );
}

export function chargebackCompensationFromJSON(
  jsonString: string,
): SafeParseResult<ChargebackCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargebackCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargebackCompensation' from JSON`,
  );
}

/** @internal */
export const ReversedChargebackCompensation$inboundSchema: z.ZodType<
  ReversedChargebackCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/** @internal */
export type ReversedChargebackCompensation$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

/** @internal */
export const ReversedChargebackCompensation$outboundSchema: z.ZodType<
  ReversedChargebackCompensation$Outbound,
  z.ZodTypeDef,
  ReversedChargebackCompensation
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReversedChargebackCompensation$ {
  /** @deprecated use `ReversedChargebackCompensation$inboundSchema` instead. */
  export const inboundSchema = ReversedChargebackCompensation$inboundSchema;
  /** @deprecated use `ReversedChargebackCompensation$outboundSchema` instead. */
  export const outboundSchema = ReversedChargebackCompensation$outboundSchema;
  /** @deprecated use `ReversedChargebackCompensation$Outbound` instead. */
  export type Outbound = ReversedChargebackCompensation$Outbound;
}

export function reversedChargebackCompensationToJSON(
  reversedChargebackCompensation: ReversedChargebackCompensation,
): string {
  return JSON.stringify(
    ReversedChargebackCompensation$outboundSchema.parse(
      reversedChargebackCompensation,
    ),
  );
}

export function reversedChargebackCompensationFromJSON(
  jsonString: string,
): SafeParseResult<ReversedChargebackCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReversedChargebackCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReversedChargebackCompensation' from JSON`,
  );
}

/** @internal */
export const OutgoingTransfer$inboundSchema: z.ZodType<
  OutgoingTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/** @internal */
export type OutgoingTransfer$Outbound = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const OutgoingTransfer$outboundSchema: z.ZodType<
  OutgoingTransfer$Outbound,
  z.ZodTypeDef,
  OutgoingTransfer
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutgoingTransfer$ {
  /** @deprecated use `OutgoingTransfer$inboundSchema` instead. */
  export const inboundSchema = OutgoingTransfer$inboundSchema;
  /** @deprecated use `OutgoingTransfer$outboundSchema` instead. */
  export const outboundSchema = OutgoingTransfer$outboundSchema;
  /** @deprecated use `OutgoingTransfer$Outbound` instead. */
  export type Outbound = OutgoingTransfer$Outbound;
}

export function outgoingTransferToJSON(
  outgoingTransfer: OutgoingTransfer,
): string {
  return JSON.stringify(
    OutgoingTransfer$outboundSchema.parse(outgoingTransfer),
  );
}

export function outgoingTransferFromJSON(
  jsonString: string,
): SafeParseResult<OutgoingTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutgoingTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutgoingTransfer' from JSON`,
  );
}

/** @internal */
export const CanceledOutgoingTransfer$inboundSchema: z.ZodType<
  CanceledOutgoingTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/** @internal */
export type CanceledOutgoingTransfer$Outbound = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const CanceledOutgoingTransfer$outboundSchema: z.ZodType<
  CanceledOutgoingTransfer$Outbound,
  z.ZodTypeDef,
  CanceledOutgoingTransfer
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanceledOutgoingTransfer$ {
  /** @deprecated use `CanceledOutgoingTransfer$inboundSchema` instead. */
  export const inboundSchema = CanceledOutgoingTransfer$inboundSchema;
  /** @deprecated use `CanceledOutgoingTransfer$outboundSchema` instead. */
  export const outboundSchema = CanceledOutgoingTransfer$outboundSchema;
  /** @deprecated use `CanceledOutgoingTransfer$Outbound` instead. */
  export type Outbound = CanceledOutgoingTransfer$Outbound;
}

export function canceledOutgoingTransferToJSON(
  canceledOutgoingTransfer: CanceledOutgoingTransfer,
): string {
  return JSON.stringify(
    CanceledOutgoingTransfer$outboundSchema.parse(canceledOutgoingTransfer),
  );
}

export function canceledOutgoingTransferFromJSON(
  jsonString: string,
): SafeParseResult<CanceledOutgoingTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanceledOutgoingTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanceledOutgoingTransfer' from JSON`,
  );
}

/** @internal */
export const ReturnedTransfer$inboundSchema: z.ZodType<
  ReturnedTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/** @internal */
export type ReturnedTransfer$Outbound = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const ReturnedTransfer$outboundSchema: z.ZodType<
  ReturnedTransfer$Outbound,
  z.ZodTypeDef,
  ReturnedTransfer
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnedTransfer$ {
  /** @deprecated use `ReturnedTransfer$inboundSchema` instead. */
  export const inboundSchema = ReturnedTransfer$inboundSchema;
  /** @deprecated use `ReturnedTransfer$outboundSchema` instead. */
  export const outboundSchema = ReturnedTransfer$outboundSchema;
  /** @deprecated use `ReturnedTransfer$Outbound` instead. */
  export type Outbound = ReturnedTransfer$Outbound;
}

export function returnedTransferToJSON(
  returnedTransfer: ReturnedTransfer,
): string {
  return JSON.stringify(
    ReturnedTransfer$outboundSchema.parse(returnedTransfer),
  );
}

export function returnedTransferFromJSON(
  jsonString: string,
): SafeParseResult<ReturnedTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReturnedTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReturnedTransfer' from JSON`,
  );
}

/** @internal */
export const InvoiceCompensation$inboundSchema: z.ZodType<
  InvoiceCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  invoiceId: z.string().optional(),
});

/** @internal */
export type InvoiceCompensation$Outbound = {
  invoiceId?: string | undefined;
};

/** @internal */
export const InvoiceCompensation$outboundSchema: z.ZodType<
  InvoiceCompensation$Outbound,
  z.ZodTypeDef,
  InvoiceCompensation
> = z.object({
  invoiceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceCompensation$ {
  /** @deprecated use `InvoiceCompensation$inboundSchema` instead. */
  export const inboundSchema = InvoiceCompensation$inboundSchema;
  /** @deprecated use `InvoiceCompensation$outboundSchema` instead. */
  export const outboundSchema = InvoiceCompensation$outboundSchema;
  /** @deprecated use `InvoiceCompensation$Outbound` instead. */
  export type Outbound = InvoiceCompensation$Outbound;
}

export function invoiceCompensationToJSON(
  invoiceCompensation: InvoiceCompensation,
): string {
  return JSON.stringify(
    InvoiceCompensation$outboundSchema.parse(invoiceCompensation),
  );
}

export function invoiceCompensationFromJSON(
  jsonString: string,
): SafeParseResult<InvoiceCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvoiceCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvoiceCompensation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsApplicationFee$inboundSchema: z.ZodType<
  ListBalanceTransactionsApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  payingOwner: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsApplicationFee$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  payingOwner?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsApplicationFee$outboundSchema: z.ZodType<
  ListBalanceTransactionsApplicationFee$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsApplicationFee
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  payingOwner: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsApplicationFee$ {
  /** @deprecated use `ListBalanceTransactionsApplicationFee$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsApplicationFee$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsApplicationFee$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsApplicationFee$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsApplicationFee$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsApplicationFee$Outbound;
}

export function listBalanceTransactionsApplicationFeeToJSON(
  listBalanceTransactionsApplicationFee: ListBalanceTransactionsApplicationFee,
): string {
  return JSON.stringify(
    ListBalanceTransactionsApplicationFee$outboundSchema.parse(
      listBalanceTransactionsApplicationFee,
    ),
  );
}

export function listBalanceTransactionsApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsApplicationFee' from JSON`,
  );
}

/** @internal */
export const SplitPayment$inboundSchema: z.ZodType<
  SplitPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  paymentOnwer: z.string().optional(),
});

/** @internal */
export type SplitPayment$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  paymentOnwer?: string | undefined;
};

/** @internal */
export const SplitPayment$outboundSchema: z.ZodType<
  SplitPayment$Outbound,
  z.ZodTypeDef,
  SplitPayment
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  paymentOnwer: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SplitPayment$ {
  /** @deprecated use `SplitPayment$inboundSchema` instead. */
  export const inboundSchema = SplitPayment$inboundSchema;
  /** @deprecated use `SplitPayment$outboundSchema` instead. */
  export const outboundSchema = SplitPayment$outboundSchema;
  /** @deprecated use `SplitPayment$Outbound` instead. */
  export type Outbound = SplitPayment$Outbound;
}

export function splitPaymentToJSON(splitPayment: SplitPayment): string {
  return JSON.stringify(SplitPayment$outboundSchema.parse(splitPayment));
}

export function splitPaymentFromJSON(
  jsonString: string,
): SafeParseResult<SplitPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SplitPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SplitPayment' from JSON`,
  );
}

/** @internal */
export const PlatformPaymentRefund$inboundSchema: z.ZodType<
  PlatformPaymentRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/** @internal */
export type PlatformPaymentRefund$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

/** @internal */
export const PlatformPaymentRefund$outboundSchema: z.ZodType<
  PlatformPaymentRefund$Outbound,
  z.ZodTypeDef,
  PlatformPaymentRefund
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformPaymentRefund$ {
  /** @deprecated use `PlatformPaymentRefund$inboundSchema` instead. */
  export const inboundSchema = PlatformPaymentRefund$inboundSchema;
  /** @deprecated use `PlatformPaymentRefund$outboundSchema` instead. */
  export const outboundSchema = PlatformPaymentRefund$outboundSchema;
  /** @deprecated use `PlatformPaymentRefund$Outbound` instead. */
  export type Outbound = PlatformPaymentRefund$Outbound;
}

export function platformPaymentRefundToJSON(
  platformPaymentRefund: PlatformPaymentRefund,
): string {
  return JSON.stringify(
    PlatformPaymentRefund$outboundSchema.parse(platformPaymentRefund),
  );
}

export function platformPaymentRefundFromJSON(
  jsonString: string,
): SafeParseResult<PlatformPaymentRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformPaymentRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformPaymentRefund' from JSON`,
  );
}

/** @internal */
export const ReturnedPlatformPaymentRefund$inboundSchema: z.ZodType<
  ReturnedPlatformPaymentRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/** @internal */
export type ReturnedPlatformPaymentRefund$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  refundId?: string | undefined;
  refundDescription?: string | undefined;
};

/** @internal */
export const ReturnedPlatformPaymentRefund$outboundSchema: z.ZodType<
  ReturnedPlatformPaymentRefund$Outbound,
  z.ZodTypeDef,
  ReturnedPlatformPaymentRefund
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  refundId: z.string().optional(),
  refundDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnedPlatformPaymentRefund$ {
  /** @deprecated use `ReturnedPlatformPaymentRefund$inboundSchema` instead. */
  export const inboundSchema = ReturnedPlatformPaymentRefund$inboundSchema;
  /** @deprecated use `ReturnedPlatformPaymentRefund$outboundSchema` instead. */
  export const outboundSchema = ReturnedPlatformPaymentRefund$outboundSchema;
  /** @deprecated use `ReturnedPlatformPaymentRefund$Outbound` instead. */
  export type Outbound = ReturnedPlatformPaymentRefund$Outbound;
}

export function returnedPlatformPaymentRefundToJSON(
  returnedPlatformPaymentRefund: ReturnedPlatformPaymentRefund,
): string {
  return JSON.stringify(
    ReturnedPlatformPaymentRefund$outboundSchema.parse(
      returnedPlatformPaymentRefund,
    ),
  );
}

export function returnedPlatformPaymentRefundFromJSON(
  jsonString: string,
): SafeParseResult<ReturnedPlatformPaymentRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReturnedPlatformPaymentRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReturnedPlatformPaymentRefund' from JSON`,
  );
}

/** @internal */
export const PlatformPaymentChargeback$inboundSchema: z.ZodType<
  PlatformPaymentChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/** @internal */
export type PlatformPaymentChargeback$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

/** @internal */
export const PlatformPaymentChargeback$outboundSchema: z.ZodType<
  PlatformPaymentChargeback$Outbound,
  z.ZodTypeDef,
  PlatformPaymentChargeback
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformPaymentChargeback$ {
  /** @deprecated use `PlatformPaymentChargeback$inboundSchema` instead. */
  export const inboundSchema = PlatformPaymentChargeback$inboundSchema;
  /** @deprecated use `PlatformPaymentChargeback$outboundSchema` instead. */
  export const outboundSchema = PlatformPaymentChargeback$outboundSchema;
  /** @deprecated use `PlatformPaymentChargeback$Outbound` instead. */
  export type Outbound = PlatformPaymentChargeback$Outbound;
}

export function platformPaymentChargebackToJSON(
  platformPaymentChargeback: PlatformPaymentChargeback,
): string {
  return JSON.stringify(
    PlatformPaymentChargeback$outboundSchema.parse(platformPaymentChargeback),
  );
}

export function platformPaymentChargebackFromJSON(
  jsonString: string,
): SafeParseResult<PlatformPaymentChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformPaymentChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformPaymentChargeback' from JSON`,
  );
}

/** @internal */
export const ReversedPlatformPaymentChargeback$inboundSchema: z.ZodType<
  ReversedPlatformPaymentChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/** @internal */
export type ReversedPlatformPaymentChargeback$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  chargebackId?: string | undefined;
  chargebackDescription?: string | undefined;
};

/** @internal */
export const ReversedPlatformPaymentChargeback$outboundSchema: z.ZodType<
  ReversedPlatformPaymentChargeback$Outbound,
  z.ZodTypeDef,
  ReversedPlatformPaymentChargeback
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  chargebackId: z.string().optional(),
  chargebackDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReversedPlatformPaymentChargeback$ {
  /** @deprecated use `ReversedPlatformPaymentChargeback$inboundSchema` instead. */
  export const inboundSchema = ReversedPlatformPaymentChargeback$inboundSchema;
  /** @deprecated use `ReversedPlatformPaymentChargeback$outboundSchema` instead. */
  export const outboundSchema =
    ReversedPlatformPaymentChargeback$outboundSchema;
  /** @deprecated use `ReversedPlatformPaymentChargeback$Outbound` instead. */
  export type Outbound = ReversedPlatformPaymentChargeback$Outbound;
}

export function reversedPlatformPaymentChargebackToJSON(
  reversedPlatformPaymentChargeback: ReversedPlatformPaymentChargeback,
): string {
  return JSON.stringify(
    ReversedPlatformPaymentChargeback$outboundSchema.parse(
      reversedPlatformPaymentChargeback,
    ),
  );
}

export function reversedPlatformPaymentChargebackFromJSON(
  jsonString: string,
): SafeParseResult<ReversedPlatformPaymentChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReversedPlatformPaymentChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReversedPlatformPaymentChargeback' from JSON`,
  );
}

/** @internal */
export const PaymentCommission$inboundSchema: z.ZodType<
  PaymentCommission,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  organizationId: z.string().optional(),
});

/** @internal */
export type PaymentCommission$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
  organizationId?: string | undefined;
};

/** @internal */
export const PaymentCommission$outboundSchema: z.ZodType<
  PaymentCommission$Outbound,
  z.ZodTypeDef,
  PaymentCommission
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentCommission$ {
  /** @deprecated use `PaymentCommission$inboundSchema` instead. */
  export const inboundSchema = PaymentCommission$inboundSchema;
  /** @deprecated use `PaymentCommission$outboundSchema` instead. */
  export const outboundSchema = PaymentCommission$outboundSchema;
  /** @deprecated use `PaymentCommission$Outbound` instead. */
  export type Outbound = PaymentCommission$Outbound;
}

export function paymentCommissionToJSON(
  paymentCommission: PaymentCommission,
): string {
  return JSON.stringify(
    PaymentCommission$outboundSchema.parse(paymentCommission),
  );
}

export function paymentCommissionFromJSON(
  jsonString: string,
): SafeParseResult<PaymentCommission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentCommission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentCommission' from JSON`,
  );
}

/** @internal */
export const ReimbursementFee$inboundSchema: z.ZodType<
  ReimbursementFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/** @internal */
export type ReimbursementFee$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

/** @internal */
export const ReimbursementFee$outboundSchema: z.ZodType<
  ReimbursementFee$Outbound,
  z.ZodTypeDef,
  ReimbursementFee
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReimbursementFee$ {
  /** @deprecated use `ReimbursementFee$inboundSchema` instead. */
  export const inboundSchema = ReimbursementFee$inboundSchema;
  /** @deprecated use `ReimbursementFee$outboundSchema` instead. */
  export const outboundSchema = ReimbursementFee$outboundSchema;
  /** @deprecated use `ReimbursementFee$Outbound` instead. */
  export type Outbound = ReimbursementFee$Outbound;
}

export function reimbursementFeeToJSON(
  reimbursementFee: ReimbursementFee,
): string {
  return JSON.stringify(
    ReimbursementFee$outboundSchema.parse(reimbursementFee),
  );
}

export function reimbursementFeeFromJSON(
  jsonString: string,
): SafeParseResult<ReimbursementFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReimbursementFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReimbursementFee' from JSON`,
  );
}

/** @internal */
export const FailedPaymentFee$inboundSchema: z.ZodType<
  FailedPaymentFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/** @internal */
export type FailedPaymentFee$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

/** @internal */
export const FailedPaymentFee$outboundSchema: z.ZodType<
  FailedPaymentFee$Outbound,
  z.ZodTypeDef,
  FailedPaymentFee
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FailedPaymentFee$ {
  /** @deprecated use `FailedPaymentFee$inboundSchema` instead. */
  export const inboundSchema = FailedPaymentFee$inboundSchema;
  /** @deprecated use `FailedPaymentFee$outboundSchema` instead. */
  export const outboundSchema = FailedPaymentFee$outboundSchema;
  /** @deprecated use `FailedPaymentFee$Outbound` instead. */
  export type Outbound = FailedPaymentFee$Outbound;
}

export function failedPaymentFeeToJSON(
  failedPaymentFee: FailedPaymentFee,
): string {
  return JSON.stringify(
    FailedPaymentFee$outboundSchema.parse(failedPaymentFee),
  );
}

export function failedPaymentFeeFromJSON(
  jsonString: string,
): SafeParseResult<FailedPaymentFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FailedPaymentFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FailedPaymentFee' from JSON`,
  );
}

/** @internal */
export const PaymentFee$inboundSchema: z.ZodType<
  PaymentFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/** @internal */
export type PaymentFee$Outbound = {
  paymentId?: string | undefined;
  paymentDescription?: string | undefined;
};

/** @internal */
export const PaymentFee$outboundSchema: z.ZodType<
  PaymentFee$Outbound,
  z.ZodTypeDef,
  PaymentFee
> = z.object({
  paymentId: z.string().optional(),
  paymentDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentFee$ {
  /** @deprecated use `PaymentFee$inboundSchema` instead. */
  export const inboundSchema = PaymentFee$inboundSchema;
  /** @deprecated use `PaymentFee$outboundSchema` instead. */
  export const outboundSchema = PaymentFee$outboundSchema;
  /** @deprecated use `PaymentFee$Outbound` instead. */
  export type Outbound = PaymentFee$Outbound;
}

export function paymentFeeToJSON(paymentFee: PaymentFee): string {
  return JSON.stringify(PaymentFee$outboundSchema.parse(paymentFee));
}

export function paymentFeeFromJSON(
  jsonString: string,
): SafeParseResult<PaymentFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentFee' from JSON`,
  );
}

/** @internal */
export const ManagedFee$inboundSchema: z.ZodType<
  ManagedFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  feeType: z.string().optional(),
  feeId: z.string().optional(),
});

/** @internal */
export type ManagedFee$Outbound = {
  feeType?: string | undefined;
  feeId?: string | undefined;
};

/** @internal */
export const ManagedFee$outboundSchema: z.ZodType<
  ManagedFee$Outbound,
  z.ZodTypeDef,
  ManagedFee
> = z.object({
  feeType: z.string().optional(),
  feeId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManagedFee$ {
  /** @deprecated use `ManagedFee$inboundSchema` instead. */
  export const inboundSchema = ManagedFee$inboundSchema;
  /** @deprecated use `ManagedFee$outboundSchema` instead. */
  export const outboundSchema = ManagedFee$outboundSchema;
  /** @deprecated use `ManagedFee$Outbound` instead. */
  export type Outbound = ManagedFee$Outbound;
}

export function managedFeeToJSON(managedFee: ManagedFee): string {
  return JSON.stringify(ManagedFee$outboundSchema.parse(managedFee));
}

export function managedFeeFromJSON(
  jsonString: string,
): SafeParseResult<ManagedFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ManagedFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ManagedFee' from JSON`,
  );
}

/** @internal */
export const ReturnedManagedFee$inboundSchema: z.ZodType<
  ReturnedManagedFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  feeType: z.string().optional(),
  feeId: z.string().optional(),
});

/** @internal */
export type ReturnedManagedFee$Outbound = {
  feeType?: string | undefined;
  feeId?: string | undefined;
};

/** @internal */
export const ReturnedManagedFee$outboundSchema: z.ZodType<
  ReturnedManagedFee$Outbound,
  z.ZodTypeDef,
  ReturnedManagedFee
> = z.object({
  feeType: z.string().optional(),
  feeId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnedManagedFee$ {
  /** @deprecated use `ReturnedManagedFee$inboundSchema` instead. */
  export const inboundSchema = ReturnedManagedFee$inboundSchema;
  /** @deprecated use `ReturnedManagedFee$outboundSchema` instead. */
  export const outboundSchema = ReturnedManagedFee$outboundSchema;
  /** @deprecated use `ReturnedManagedFee$Outbound` instead. */
  export type Outbound = ReturnedManagedFee$Outbound;
}

export function returnedManagedFeeToJSON(
  returnedManagedFee: ReturnedManagedFee,
): string {
  return JSON.stringify(
    ReturnedManagedFee$outboundSchema.parse(returnedManagedFee),
  );
}

export function returnedManagedFeeFromJSON(
  jsonString: string,
): SafeParseResult<ReturnedManagedFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReturnedManagedFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReturnedManagedFee' from JSON`,
  );
}

/** @internal */
export const PostPaymentSplitPayment$inboundSchema: z.ZodType<
  PostPaymentSplitPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
});

/** @internal */
export type PostPaymentSplitPayment$Outbound = {
  paymentId?: string | undefined;
};

/** @internal */
export const PostPaymentSplitPayment$outboundSchema: z.ZodType<
  PostPaymentSplitPayment$Outbound,
  z.ZodTypeDef,
  PostPaymentSplitPayment
> = z.object({
  paymentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPaymentSplitPayment$ {
  /** @deprecated use `PostPaymentSplitPayment$inboundSchema` instead. */
  export const inboundSchema = PostPaymentSplitPayment$inboundSchema;
  /** @deprecated use `PostPaymentSplitPayment$outboundSchema` instead. */
  export const outboundSchema = PostPaymentSplitPayment$outboundSchema;
  /** @deprecated use `PostPaymentSplitPayment$Outbound` instead. */
  export type Outbound = PostPaymentSplitPayment$Outbound;
}

export function postPaymentSplitPaymentToJSON(
  postPaymentSplitPayment: PostPaymentSplitPayment,
): string {
  return JSON.stringify(
    PostPaymentSplitPayment$outboundSchema.parse(postPaymentSplitPayment),
  );
}

export function postPaymentSplitPaymentFromJSON(
  jsonString: string,
): SafeParseResult<PostPaymentSplitPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPaymentSplitPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPaymentSplitPayment' from JSON`,
  );
}

/** @internal */
export const Context$inboundSchema: z.ZodType<Context, z.ZodTypeDef, unknown> =
  z.object({
    payment: z.nullable(
      z.lazy(() => ListBalanceTransactionsPayment$inboundSchema),
    ).optional(),
    capture: z.nullable(
      z.lazy(() => ListBalanceTransactionsCapture$inboundSchema),
    ).optional(),
    "capture-commision": z.nullable(
      z.lazy(() => CaptureCommision$inboundSchema),
    ).optional(),
    "capture-rolling-reserve-release": z.nullable(
      z.lazy(() => CaptureRollingReserveRelease$inboundSchema),
    ).optional(),
    "unauthorized-direct-debit": z.nullable(
      z.lazy(() => UnauthorizedDirectDebit$inboundSchema),
    ).optional(),
    "failed-payment": z.nullable(z.lazy(() => FailedPayment$inboundSchema))
      .optional(),
    refund: z.nullable(
      z.lazy(() => ListBalanceTransactionsRefund$inboundSchema),
    ).optional(),
    "refund-compensation": z.nullable(
      z.lazy(() => RefundCompensation$inboundSchema),
    ).optional(),
    "returned-refund": z.nullable(z.lazy(() => ReturnedRefund$inboundSchema))
      .optional(),
    "returned-refund-compensation": z.nullable(
      z.lazy(() => ReturnedRefundCompensation$inboundSchema),
    ).optional(),
    chargeback: z.nullable(
      z.lazy(() => ListBalanceTransactionsChargeback$inboundSchema),
    ).optional(),
    "chargeback-reversal": z.nullable(
      z.lazy(() => ChargebackReversal$inboundSchema),
    ).optional(),
    "chargeback-compensation": z.nullable(
      z.lazy(() => ChargebackCompensation$inboundSchema),
    ).optional(),
    "reversed-chargeback-compensation": z.nullable(
      z.lazy(() => ReversedChargebackCompensation$inboundSchema),
    ).optional(),
    "outgoing-transfer": z.nullable(
      z.lazy(() => OutgoingTransfer$inboundSchema),
    ).optional(),
    "canceled-outgoing-transfer": z.nullable(
      z.lazy(() => CanceledOutgoingTransfer$inboundSchema),
    ).optional(),
    "returned-transfer": z.nullable(
      z.lazy(() => ReturnedTransfer$inboundSchema),
    ).optional(),
    "invoice-compensation": z.nullable(
      z.lazy(() => InvoiceCompensation$inboundSchema),
    ).optional(),
    "application-fee": z.nullable(
      z.lazy(() => ListBalanceTransactionsApplicationFee$inboundSchema),
    ).optional(),
    "split-payment": z.nullable(z.lazy(() => SplitPayment$inboundSchema))
      .optional(),
    "platform-payment-refund": z.nullable(
      z.lazy(() => PlatformPaymentRefund$inboundSchema),
    ).optional(),
    "returned-platform-payment-refund": z.nullable(
      z.lazy(() => ReturnedPlatformPaymentRefund$inboundSchema),
    ).optional(),
    "platform-payment-chargeback": z.nullable(
      z.lazy(() => PlatformPaymentChargeback$inboundSchema),
    ).optional(),
    "reversed-platform-payment-chargeback": z.nullable(
      z.lazy(() => ReversedPlatformPaymentChargeback$inboundSchema),
    ).optional(),
    "payment-commission": z.nullable(
      z.lazy(() => PaymentCommission$inboundSchema),
    ).optional(),
    "reimbursement-fee": z.nullable(
      z.lazy(() => ReimbursementFee$inboundSchema),
    ).optional(),
    "failed-payment-fee": z.nullable(
      z.lazy(() => FailedPaymentFee$inboundSchema),
    ).optional(),
    "payment-fee": z.nullable(z.lazy(() => PaymentFee$inboundSchema))
      .optional(),
    "managed-fee": z.nullable(z.lazy(() => ManagedFee$inboundSchema))
      .optional(),
    "returned-managed-fee": z.nullable(
      z.lazy(() => ReturnedManagedFee$inboundSchema),
    ).optional(),
    "post-payment-split-payment": z.nullable(
      z.lazy(() => PostPaymentSplitPayment$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "capture-commision": "captureCommision",
      "capture-rolling-reserve-release": "captureRollingReserveRelease",
      "unauthorized-direct-debit": "unauthorizedDirectDebit",
      "failed-payment": "failedPayment",
      "refund-compensation": "refundCompensation",
      "returned-refund": "returnedRefund",
      "returned-refund-compensation": "returnedRefundCompensation",
      "chargeback-reversal": "chargebackReversal",
      "chargeback-compensation": "chargebackCompensation",
      "reversed-chargeback-compensation": "reversedChargebackCompensation",
      "outgoing-transfer": "outgoingTransfer",
      "canceled-outgoing-transfer": "canceledOutgoingTransfer",
      "returned-transfer": "returnedTransfer",
      "invoice-compensation": "invoiceCompensation",
      "application-fee": "applicationFee",
      "split-payment": "splitPayment",
      "platform-payment-refund": "platformPaymentRefund",
      "returned-platform-payment-refund": "returnedPlatformPaymentRefund",
      "platform-payment-chargeback": "platformPaymentChargeback",
      "reversed-platform-payment-chargeback":
        "reversedPlatformPaymentChargeback",
      "payment-commission": "paymentCommission",
      "reimbursement-fee": "reimbursementFee",
      "failed-payment-fee": "failedPaymentFee",
      "payment-fee": "paymentFee",
      "managed-fee": "managedFee",
      "returned-managed-fee": "returnedManagedFee",
      "post-payment-split-payment": "postPaymentSplitPayment",
    });
  });

/** @internal */
export type Context$Outbound = {
  payment?: ListBalanceTransactionsPayment$Outbound | null | undefined;
  capture?: ListBalanceTransactionsCapture$Outbound | null | undefined;
  "capture-commision"?: CaptureCommision$Outbound | null | undefined;
  "capture-rolling-reserve-release"?:
    | CaptureRollingReserveRelease$Outbound
    | null
    | undefined;
  "unauthorized-direct-debit"?:
    | UnauthorizedDirectDebit$Outbound
    | null
    | undefined;
  "failed-payment"?: FailedPayment$Outbound | null | undefined;
  refund?: ListBalanceTransactionsRefund$Outbound | null | undefined;
  "refund-compensation"?: RefundCompensation$Outbound | null | undefined;
  "returned-refund"?: ReturnedRefund$Outbound | null | undefined;
  "returned-refund-compensation"?:
    | ReturnedRefundCompensation$Outbound
    | null
    | undefined;
  chargeback?: ListBalanceTransactionsChargeback$Outbound | null | undefined;
  "chargeback-reversal"?: ChargebackReversal$Outbound | null | undefined;
  "chargeback-compensation"?:
    | ChargebackCompensation$Outbound
    | null
    | undefined;
  "reversed-chargeback-compensation"?:
    | ReversedChargebackCompensation$Outbound
    | null
    | undefined;
  "outgoing-transfer"?: OutgoingTransfer$Outbound | null | undefined;
  "canceled-outgoing-transfer"?:
    | CanceledOutgoingTransfer$Outbound
    | null
    | undefined;
  "returned-transfer"?: ReturnedTransfer$Outbound | null | undefined;
  "invoice-compensation"?: InvoiceCompensation$Outbound | null | undefined;
  "application-fee"?:
    | ListBalanceTransactionsApplicationFee$Outbound
    | null
    | undefined;
  "split-payment"?: SplitPayment$Outbound | null | undefined;
  "platform-payment-refund"?: PlatformPaymentRefund$Outbound | null | undefined;
  "returned-platform-payment-refund"?:
    | ReturnedPlatformPaymentRefund$Outbound
    | null
    | undefined;
  "platform-payment-chargeback"?:
    | PlatformPaymentChargeback$Outbound
    | null
    | undefined;
  "reversed-platform-payment-chargeback"?:
    | ReversedPlatformPaymentChargeback$Outbound
    | null
    | undefined;
  "payment-commission"?: PaymentCommission$Outbound | null | undefined;
  "reimbursement-fee"?: ReimbursementFee$Outbound | null | undefined;
  "failed-payment-fee"?: FailedPaymentFee$Outbound | null | undefined;
  "payment-fee"?: PaymentFee$Outbound | null | undefined;
  "managed-fee"?: ManagedFee$Outbound | null | undefined;
  "returned-managed-fee"?: ReturnedManagedFee$Outbound | null | undefined;
  "post-payment-split-payment"?:
    | PostPaymentSplitPayment$Outbound
    | null
    | undefined;
};

/** @internal */
export const Context$outboundSchema: z.ZodType<
  Context$Outbound,
  z.ZodTypeDef,
  Context
> = z.object({
  payment: z.nullable(
    z.lazy(() => ListBalanceTransactionsPayment$outboundSchema),
  ).optional(),
  capture: z.nullable(
    z.lazy(() => ListBalanceTransactionsCapture$outboundSchema),
  ).optional(),
  captureCommision: z.nullable(z.lazy(() => CaptureCommision$outboundSchema))
    .optional(),
  captureRollingReserveRelease: z.nullable(
    z.lazy(() => CaptureRollingReserveRelease$outboundSchema),
  ).optional(),
  unauthorizedDirectDebit: z.nullable(
    z.lazy(() => UnauthorizedDirectDebit$outboundSchema),
  ).optional(),
  failedPayment: z.nullable(z.lazy(() => FailedPayment$outboundSchema))
    .optional(),
  refund: z.nullable(z.lazy(() => ListBalanceTransactionsRefund$outboundSchema))
    .optional(),
  refundCompensation: z.nullable(
    z.lazy(() => RefundCompensation$outboundSchema),
  ).optional(),
  returnedRefund: z.nullable(z.lazy(() => ReturnedRefund$outboundSchema))
    .optional(),
  returnedRefundCompensation: z.nullable(
    z.lazy(() => ReturnedRefundCompensation$outboundSchema),
  ).optional(),
  chargeback: z.nullable(
    z.lazy(() => ListBalanceTransactionsChargeback$outboundSchema),
  ).optional(),
  chargebackReversal: z.nullable(
    z.lazy(() => ChargebackReversal$outboundSchema),
  ).optional(),
  chargebackCompensation: z.nullable(
    z.lazy(() => ChargebackCompensation$outboundSchema),
  ).optional(),
  reversedChargebackCompensation: z.nullable(
    z.lazy(() => ReversedChargebackCompensation$outboundSchema),
  ).optional(),
  outgoingTransfer: z.nullable(z.lazy(() => OutgoingTransfer$outboundSchema))
    .optional(),
  canceledOutgoingTransfer: z.nullable(
    z.lazy(() => CanceledOutgoingTransfer$outboundSchema),
  ).optional(),
  returnedTransfer: z.nullable(z.lazy(() => ReturnedTransfer$outboundSchema))
    .optional(),
  invoiceCompensation: z.nullable(
    z.lazy(() => InvoiceCompensation$outboundSchema),
  ).optional(),
  applicationFee: z.nullable(
    z.lazy(() => ListBalanceTransactionsApplicationFee$outboundSchema),
  ).optional(),
  splitPayment: z.nullable(z.lazy(() => SplitPayment$outboundSchema))
    .optional(),
  platformPaymentRefund: z.nullable(
    z.lazy(() => PlatformPaymentRefund$outboundSchema),
  ).optional(),
  returnedPlatformPaymentRefund: z.nullable(
    z.lazy(() => ReturnedPlatformPaymentRefund$outboundSchema),
  ).optional(),
  platformPaymentChargeback: z.nullable(
    z.lazy(() => PlatformPaymentChargeback$outboundSchema),
  ).optional(),
  reversedPlatformPaymentChargeback: z.nullable(
    z.lazy(() => ReversedPlatformPaymentChargeback$outboundSchema),
  ).optional(),
  paymentCommission: z.nullable(z.lazy(() => PaymentCommission$outboundSchema))
    .optional(),
  reimbursementFee: z.nullable(z.lazy(() => ReimbursementFee$outboundSchema))
    .optional(),
  failedPaymentFee: z.nullable(z.lazy(() => FailedPaymentFee$outboundSchema))
    .optional(),
  paymentFee: z.nullable(z.lazy(() => PaymentFee$outboundSchema)).optional(),
  managedFee: z.nullable(z.lazy(() => ManagedFee$outboundSchema)).optional(),
  returnedManagedFee: z.nullable(
    z.lazy(() => ReturnedManagedFee$outboundSchema),
  ).optional(),
  postPaymentSplitPayment: z.nullable(
    z.lazy(() => PostPaymentSplitPayment$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    captureCommision: "capture-commision",
    captureRollingReserveRelease: "capture-rolling-reserve-release",
    unauthorizedDirectDebit: "unauthorized-direct-debit",
    failedPayment: "failed-payment",
    refundCompensation: "refund-compensation",
    returnedRefund: "returned-refund",
    returnedRefundCompensation: "returned-refund-compensation",
    chargebackReversal: "chargeback-reversal",
    chargebackCompensation: "chargeback-compensation",
    reversedChargebackCompensation: "reversed-chargeback-compensation",
    outgoingTransfer: "outgoing-transfer",
    canceledOutgoingTransfer: "canceled-outgoing-transfer",
    returnedTransfer: "returned-transfer",
    invoiceCompensation: "invoice-compensation",
    applicationFee: "application-fee",
    splitPayment: "split-payment",
    platformPaymentRefund: "platform-payment-refund",
    returnedPlatformPaymentRefund: "returned-platform-payment-refund",
    platformPaymentChargeback: "platform-payment-chargeback",
    reversedPlatformPaymentChargeback: "reversed-platform-payment-chargeback",
    paymentCommission: "payment-commission",
    reimbursementFee: "reimbursement-fee",
    failedPaymentFee: "failed-payment-fee",
    paymentFee: "payment-fee",
    managedFee: "managed-fee",
    returnedManagedFee: "returned-managed-fee",
    postPaymentSplitPayment: "post-payment-split-payment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Context$ {
  /** @deprecated use `Context$inboundSchema` instead. */
  export const inboundSchema = Context$inboundSchema;
  /** @deprecated use `Context$outboundSchema` instead. */
  export const outboundSchema = Context$outboundSchema;
  /** @deprecated use `Context$Outbound` instead. */
  export type Outbound = Context$Outbound;
}

export function contextToJSON(context: Context): string {
  return JSON.stringify(Context$outboundSchema.parse(context));
}

export function contextFromJSON(
  jsonString: string,
): SafeParseResult<Context, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Context$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Context' from JSON`,
  );
}

/** @internal */
export const BalanceTransaction$inboundSchema: z.ZodType<
  BalanceTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  type: ListBalanceTransactionsType$inboundSchema.optional(),
  resultAmount: z.lazy(() => ResultAmount$inboundSchema).optional(),
  initialAmount: z.lazy(() => InitialAmount$inboundSchema).optional(),
  deductions: z.nullable(z.lazy(() => Deductions$inboundSchema)).optional(),
  context: z.lazy(() => Context$inboundSchema).optional(),
  createdAt: z.string().optional(),
});

/** @internal */
export type BalanceTransaction$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  type?: string | undefined;
  resultAmount?: ResultAmount$Outbound | undefined;
  initialAmount?: InitialAmount$Outbound | undefined;
  deductions?: Deductions$Outbound | null | undefined;
  context?: Context$Outbound | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const BalanceTransaction$outboundSchema: z.ZodType<
  BalanceTransaction$Outbound,
  z.ZodTypeDef,
  BalanceTransaction
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  type: ListBalanceTransactionsType$outboundSchema.optional(),
  resultAmount: z.lazy(() => ResultAmount$outboundSchema).optional(),
  initialAmount: z.lazy(() => InitialAmount$outboundSchema).optional(),
  deductions: z.nullable(z.lazy(() => Deductions$outboundSchema)).optional(),
  context: z.lazy(() => Context$outboundSchema).optional(),
  createdAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceTransaction$ {
  /** @deprecated use `BalanceTransaction$inboundSchema` instead. */
  export const inboundSchema = BalanceTransaction$inboundSchema;
  /** @deprecated use `BalanceTransaction$outboundSchema` instead. */
  export const outboundSchema = BalanceTransaction$outboundSchema;
  /** @deprecated use `BalanceTransaction$Outbound` instead. */
  export type Outbound = BalanceTransaction$Outbound;
}

export function balanceTransactionToJSON(
  balanceTransaction: BalanceTransaction,
): string {
  return JSON.stringify(
    BalanceTransaction$outboundSchema.parse(balanceTransaction),
  );
}

export function balanceTransactionFromJSON(
  jsonString: string,
): SafeParseResult<BalanceTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceTransaction' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsEmbedded$inboundSchema: z.ZodType<
  ListBalanceTransactionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  balance_transactions: z.array(z.lazy(() => BalanceTransaction$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "balance_transactions": "balanceTransactions",
  });
});

/** @internal */
export type ListBalanceTransactionsEmbedded$Outbound = {
  balance_transactions?: Array<BalanceTransaction$Outbound> | undefined;
};

/** @internal */
export const ListBalanceTransactionsEmbedded$outboundSchema: z.ZodType<
  ListBalanceTransactionsEmbedded$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsEmbedded
> = z.object({
  balanceTransactions: z.array(z.lazy(() => BalanceTransaction$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    balanceTransactions: "balance_transactions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsEmbedded$ {
  /** @deprecated use `ListBalanceTransactionsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsEmbedded$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsEmbedded$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsEmbedded$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsEmbedded$Outbound;
}

export function listBalanceTransactionsEmbeddedToJSON(
  listBalanceTransactionsEmbedded: ListBalanceTransactionsEmbedded,
): string {
  return JSON.stringify(
    ListBalanceTransactionsEmbedded$outboundSchema.parse(
      listBalanceTransactionsEmbedded,
    ),
  );
}

export function listBalanceTransactionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsSelf$inboundSchema: z.ZodType<
  ListBalanceTransactionsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalanceTransactionsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsSelf$outboundSchema: z.ZodType<
  ListBalanceTransactionsSelf$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsSelf$ {
  /** @deprecated use `ListBalanceTransactionsSelf$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsSelf$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsSelf$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsSelf$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsSelf$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsSelf$Outbound;
}

export function listBalanceTransactionsSelfToJSON(
  listBalanceTransactionsSelf: ListBalanceTransactionsSelf,
): string {
  return JSON.stringify(
    ListBalanceTransactionsSelf$outboundSchema.parse(
      listBalanceTransactionsSelf,
    ),
  );
}

export function listBalanceTransactionsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsSelf' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsPrevious$inboundSchema: z.ZodType<
  ListBalanceTransactionsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsPrevious$outboundSchema: z.ZodType<
  ListBalanceTransactionsPrevious$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsPrevious$ {
  /** @deprecated use `ListBalanceTransactionsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsPrevious$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsPrevious$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsPrevious$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsPrevious$Outbound;
}

export function listBalanceTransactionsPreviousToJSON(
  listBalanceTransactionsPrevious: ListBalanceTransactionsPrevious,
): string {
  return JSON.stringify(
    ListBalanceTransactionsPrevious$outboundSchema.parse(
      listBalanceTransactionsPrevious,
    ),
  );
}

export function listBalanceTransactionsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsPrevious' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsNext$inboundSchema: z.ZodType<
  ListBalanceTransactionsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsNext$outboundSchema: z.ZodType<
  ListBalanceTransactionsNext$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsNext$ {
  /** @deprecated use `ListBalanceTransactionsNext$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsNext$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsNext$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsNext$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsNext$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsNext$Outbound;
}

export function listBalanceTransactionsNextToJSON(
  listBalanceTransactionsNext: ListBalanceTransactionsNext,
): string {
  return JSON.stringify(
    ListBalanceTransactionsNext$outboundSchema.parse(
      listBalanceTransactionsNext,
    ),
  );
}

export function listBalanceTransactionsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsNext' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsDocumentation$inboundSchema: z.ZodType<
  ListBalanceTransactionsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalanceTransactionsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsDocumentation$outboundSchema: z.ZodType<
  ListBalanceTransactionsDocumentation$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsDocumentation$ {
  /** @deprecated use `ListBalanceTransactionsDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsDocumentation$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsDocumentation$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsDocumentation$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsDocumentation$Outbound;
}

export function listBalanceTransactionsDocumentationToJSON(
  listBalanceTransactionsDocumentation: ListBalanceTransactionsDocumentation,
): string {
  return JSON.stringify(
    ListBalanceTransactionsDocumentation$outboundSchema.parse(
      listBalanceTransactionsDocumentation,
    ),
  );
}

export function listBalanceTransactionsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsLinks$inboundSchema: z.ZodType<
  ListBalanceTransactionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListBalanceTransactionsSelf$inboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListBalanceTransactionsPrevious$inboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListBalanceTransactionsNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListBalanceTransactionsDocumentation$inboundSchema
  ).optional(),
});

/** @internal */
export type ListBalanceTransactionsLinks$Outbound = {
  self?: ListBalanceTransactionsSelf$Outbound | undefined;
  previous?: ListBalanceTransactionsPrevious$Outbound | null | undefined;
  next?: ListBalanceTransactionsNext$Outbound | null | undefined;
  documentation?: ListBalanceTransactionsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListBalanceTransactionsLinks$outboundSchema: z.ZodType<
  ListBalanceTransactionsLinks$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsLinks
> = z.object({
  self: z.lazy(() => ListBalanceTransactionsSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListBalanceTransactionsPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListBalanceTransactionsNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListBalanceTransactionsDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsLinks$ {
  /** @deprecated use `ListBalanceTransactionsLinks$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsLinks$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsLinks$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsLinks$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsLinks$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsLinks$Outbound;
}

export function listBalanceTransactionsLinksToJSON(
  listBalanceTransactionsLinks: ListBalanceTransactionsLinks,
): string {
  return JSON.stringify(
    ListBalanceTransactionsLinks$outboundSchema.parse(
      listBalanceTransactionsLinks,
    ),
  );
}

export function listBalanceTransactionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsLinks' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsResponse$inboundSchema: z.ZodType<
  ListBalanceTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListBalanceTransactionsEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => ListBalanceTransactionsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListBalanceTransactionsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListBalanceTransactionsEmbedded$Outbound | undefined;
  _links?: ListBalanceTransactionsLinks$Outbound | undefined;
};

/** @internal */
export const ListBalanceTransactionsResponse$outboundSchema: z.ZodType<
  ListBalanceTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListBalanceTransactionsEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => ListBalanceTransactionsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsResponse$ {
  /** @deprecated use `ListBalanceTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsResponse$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsResponse$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsResponse$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsResponse$Outbound;
}

export function listBalanceTransactionsResponseToJSON(
  listBalanceTransactionsResponse: ListBalanceTransactionsResponse,
): string {
  return JSON.stringify(
    ListBalanceTransactionsResponse$outboundSchema.parse(
      listBalanceTransactionsResponse,
    ),
  );
}

export function listBalanceTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsResponse' from JSON`,
  );
}
