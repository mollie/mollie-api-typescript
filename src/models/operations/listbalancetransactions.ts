/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBalanceTransactionsRequest = {
  /**
   * Provide the ID of the related balance.
   */
  balanceId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type TooManyRequestsDocumentation = {
  href: string;
  type: string;
};

export type TooManyRequestsLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: TooManyRequestsDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListBalanceTransactionsNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListBalanceTransactionsNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListBalanceTransactionsNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListBalanceTransactionsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListBalanceTransactionsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListBalanceTransactionsBadRequestDocumentation;
};

/**
 * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
 */
export type ResultAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
 */
export type InitialAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
 *
 * @remarks
 *
 * When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
 */
export type Deductions = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListBalanceTransactionsCapture = {
  paymentId?: string | undefined;
  captureId?: string | undefined;
};

export type ReturnedRefund = {
  paymentId?: string | undefined;
  refundId?: string | undefined;
};

export type ListBalanceTransactionsChargeback = {
  paymentId?: string | undefined;
  chargebackId?: string | undefined;
};

export type OutgoingTransfer = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

export type CanceledOutgoingTransfer = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

export type ReturnedTransfer = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

export type PlatformPaymentRefund = {
  paymentId?: string | undefined;
  refundId?: string | undefined;
};

export type PlatformPaymentChargeback = {
  paymentId?: string | undefined;
  chargebackId?: string | undefined;
};

/**
 * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
 *
 * @remarks
 *
 * Below is a complete list of the context values that each type of transaction will have.
 *
 * * Type `payment`: `paymentId`
 * * Type `capture`: `paymentId` `captureId`
 * * Type `unauthorized-direct-debit`: `paymentId`
 * * Type `failed-payment`: `paymentId`
 * * Type `refund`: `paymentId` `refundId`
 * * Type `returned-refund`: `paymentId` `refundId`
 * * Type `chargeback`: `paymentId` `chargebackId`
 * * Type `chargeback-reversal`: `paymentId`
 * * Type `outgoing-transfer`: `settlementId` `transferId`
 * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
 * * Type `returned-transfer`: `settlementId` `transferId`
 * * Type `invoice-compensation`: `invoiceId`
 * * Type `balance-correction`: none
 * * Type `application-fee`: `paymentId`
 * * Type `split-payment`: `paymentId`
 * * Type `platform-payment-refund`: `paymentId` `refundId`
 * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
 */
export type Context = {
  payment?: string | null | undefined;
  capture?: ListBalanceTransactionsCapture | null | undefined;
  unauthorizedDirectDebit?: string | null | undefined;
  failedPayment?: string | null | undefined;
  refund?: string | null | undefined;
  returnedRefund?: ReturnedRefund | null | undefined;
  chargeback?: ListBalanceTransactionsChargeback | null | undefined;
  chargebackReversal?: string | null | undefined;
  outgoingTransfer?: OutgoingTransfer | null | undefined;
  canceledOutgoingTransfer?: CanceledOutgoingTransfer | null | undefined;
  returnedTransfer?: ReturnedTransfer | null | undefined;
  invoiceCompensation?: string | null | undefined;
  applicationFee?: string | null | undefined;
  splitPayment?: string | null | undefined;
  platformPaymentRefund?: PlatformPaymentRefund | null | undefined;
  platformPaymentChargeback?: PlatformPaymentChargeback | null | undefined;
};

export type BalanceTransaction = {
  /**
   * Indicates the response contains a balance transaction object. Will always contain the string `balance_transaction` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this balance transaction.
   */
  id?: string | undefined;
  /**
   * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list is not definitive.
   *
   * @remarks
   *
   * * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
   * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
   * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
   * * Invoicing: `invoice-compensation` `balance-correction`
   * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
   *
   * Possible values: `application-fee` `capture` `chargeback` `chargeback-reversal` `failed-payment-fee` `failed-payment` `invoice-compensation` `payment` `payment-fee` `payment-commission` `refund` `returned-refund` `returned-transfer` `split-payment` `outgoing-transfer` `capture-commission` `canceled-outgoing-transfer` `incoming-transfer` `api-payment-rolling-reserve-release` `capture-rolling-reserve-release` `reimbursement-fee` `balance-correction` `unauthorized-direct-debit` `bank-charged-failure-fee` `platform-payment-refund` `refund-compensation` `returned-refund-compensation` `returned-platform-payment-refund` `platform-payment-chargeback` `chargeback-compensation` `reversed-platform-payment-chargeback` `reversed-chargeback-compensation` `failed-split-payment-platform` `failed-split-payment-compensation` `cash-advance-repayment` `cash-advance-loan` `platform-connected-organizations-fee` `split-transaction` `managed-fee` `returned-managed-fee` `topup` `balance-reserve` `balance-reserve-return` `movement` `post-payment-split-payment` `cash-collateral-issuance` `cash-collateral-release`
   */
  type?: string | undefined;
  /**
   * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
   */
  resultAmount?: ResultAmount | undefined;
  /**
   * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
   */
  initialAmount?: InitialAmount | undefined;
  /**
   * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
   *
   * @remarks
   *
   * When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
   */
  deductions?: Deductions | null | undefined;
  /**
   * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
   *
   * @remarks
   *
   * Below is a complete list of the context values that each type of transaction will have.
   *
   * * Type `payment`: `paymentId`
   * * Type `capture`: `paymentId` `captureId`
   * * Type `unauthorized-direct-debit`: `paymentId`
   * * Type `failed-payment`: `paymentId`
   * * Type `refund`: `paymentId` `refundId`
   * * Type `returned-refund`: `paymentId` `refundId`
   * * Type `chargeback`: `paymentId` `chargebackId`
   * * Type `chargeback-reversal`: `paymentId`
   * * Type `outgoing-transfer`: `settlementId` `transferId`
   * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
   * * Type `returned-transfer`: `settlementId` `transferId`
   * * Type `invoice-compensation`: `invoiceId`
   * * Type `balance-correction`: none
   * * Type `application-fee`: `paymentId`
   * * Type `split-payment`: `paymentId`
   * * Type `platform-payment-refund`: `paymentId` `refundId`
   * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
   */
  context?: Context | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
};

export type ListBalanceTransactionsEmbedded = {
  /**
   * An array of balance transaction objects.
   */
  balanceTransactions?: Array<BalanceTransaction> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListBalanceTransactionsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListBalanceTransactionsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListBalanceTransactionsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListBalanceTransactionsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListBalanceTransactionsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListBalanceTransactionsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListBalanceTransactionsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListBalanceTransactionsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListBalanceTransactionsDocumentation | undefined;
};

/**
 * A list of balance transaction objects.
 */
export type ListBalanceTransactionsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListBalanceTransactionsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListBalanceTransactionsLinks | undefined;
};

/** @internal */
export const ListBalanceTransactionsRequest$inboundSchema: z.ZodType<
  ListBalanceTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  balanceId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListBalanceTransactionsRequest$Outbound = {
  balanceId: string;
  from?: string | undefined;
  limit: number | null;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListBalanceTransactionsRequest$outboundSchema: z.ZodType<
  ListBalanceTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsRequest
> = z.object({
  balanceId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsRequest$ {
  /** @deprecated use `ListBalanceTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsRequest$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsRequest$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsRequest$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsRequest$Outbound;
}

export function listBalanceTransactionsRequestToJSON(
  listBalanceTransactionsRequest: ListBalanceTransactionsRequest,
): string {
  return JSON.stringify(
    ListBalanceTransactionsRequest$outboundSchema.parse(
      listBalanceTransactionsRequest,
    ),
  );
}

export function listBalanceTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const TooManyRequestsDocumentation$inboundSchema: z.ZodType<
  TooManyRequestsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type TooManyRequestsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const TooManyRequestsDocumentation$outboundSchema: z.ZodType<
  TooManyRequestsDocumentation$Outbound,
  z.ZodTypeDef,
  TooManyRequestsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyRequestsDocumentation$ {
  /** @deprecated use `TooManyRequestsDocumentation$inboundSchema` instead. */
  export const inboundSchema = TooManyRequestsDocumentation$inboundSchema;
  /** @deprecated use `TooManyRequestsDocumentation$outboundSchema` instead. */
  export const outboundSchema = TooManyRequestsDocumentation$outboundSchema;
  /** @deprecated use `TooManyRequestsDocumentation$Outbound` instead. */
  export type Outbound = TooManyRequestsDocumentation$Outbound;
}

export function tooManyRequestsDocumentationToJSON(
  tooManyRequestsDocumentation: TooManyRequestsDocumentation,
): string {
  return JSON.stringify(
    TooManyRequestsDocumentation$outboundSchema.parse(
      tooManyRequestsDocumentation,
    ),
  );
}

export function tooManyRequestsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<TooManyRequestsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TooManyRequestsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TooManyRequestsDocumentation' from JSON`,
  );
}

/** @internal */
export const TooManyRequestsLinks$inboundSchema: z.ZodType<
  TooManyRequestsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => TooManyRequestsDocumentation$inboundSchema),
});

/** @internal */
export type TooManyRequestsLinks$Outbound = {
  documentation: TooManyRequestsDocumentation$Outbound;
};

/** @internal */
export const TooManyRequestsLinks$outboundSchema: z.ZodType<
  TooManyRequestsLinks$Outbound,
  z.ZodTypeDef,
  TooManyRequestsLinks
> = z.object({
  documentation: z.lazy(() => TooManyRequestsDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyRequestsLinks$ {
  /** @deprecated use `TooManyRequestsLinks$inboundSchema` instead. */
  export const inboundSchema = TooManyRequestsLinks$inboundSchema;
  /** @deprecated use `TooManyRequestsLinks$outboundSchema` instead. */
  export const outboundSchema = TooManyRequestsLinks$outboundSchema;
  /** @deprecated use `TooManyRequestsLinks$Outbound` instead. */
  export type Outbound = TooManyRequestsLinks$Outbound;
}

export function tooManyRequestsLinksToJSON(
  tooManyRequestsLinks: TooManyRequestsLinks,
): string {
  return JSON.stringify(
    TooManyRequestsLinks$outboundSchema.parse(tooManyRequestsLinks),
  );
}

export function tooManyRequestsLinksFromJSON(
  jsonString: string,
): SafeParseResult<TooManyRequestsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TooManyRequestsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TooManyRequestsLinks' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsNotFoundDocumentation$inboundSchema:
  z.ZodType<
    ListBalanceTransactionsNotFoundDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListBalanceTransactionsNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsNotFoundDocumentation$outboundSchema:
  z.ZodType<
    ListBalanceTransactionsNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    ListBalanceTransactionsNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsNotFoundDocumentation$ {
  /** @deprecated use `ListBalanceTransactionsNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsNotFoundDocumentation$Outbound;
}

export function listBalanceTransactionsNotFoundDocumentationToJSON(
  listBalanceTransactionsNotFoundDocumentation:
    ListBalanceTransactionsNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListBalanceTransactionsNotFoundDocumentation$outboundSchema.parse(
      listBalanceTransactionsNotFoundDocumentation,
    ),
  );
}

export function listBalanceTransactionsNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListBalanceTransactionsNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListBalanceTransactionsNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsNotFoundLinks$inboundSchema: z.ZodType<
  ListBalanceTransactionsNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListBalanceTransactionsNotFoundLinks$Outbound = {
  documentation: ListBalanceTransactionsNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListBalanceTransactionsNotFoundLinks$outboundSchema: z.ZodType<
  ListBalanceTransactionsNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsNotFoundLinks$ {
  /** @deprecated use `ListBalanceTransactionsNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsNotFoundLinks$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsNotFoundLinks$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsNotFoundLinks$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsNotFoundLinks$Outbound;
}

export function listBalanceTransactionsNotFoundLinksToJSON(
  listBalanceTransactionsNotFoundLinks: ListBalanceTransactionsNotFoundLinks,
): string {
  return JSON.stringify(
    ListBalanceTransactionsNotFoundLinks$outboundSchema.parse(
      listBalanceTransactionsNotFoundLinks,
    ),
  );
}

export function listBalanceTransactionsNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsBadRequestDocumentation$inboundSchema:
  z.ZodType<
    ListBalanceTransactionsBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListBalanceTransactionsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsBadRequestDocumentation$outboundSchema:
  z.ZodType<
    ListBalanceTransactionsBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    ListBalanceTransactionsBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsBadRequestDocumentation$ {
  /** @deprecated use `ListBalanceTransactionsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestDocumentation$Outbound` instead. */
  export type Outbound =
    ListBalanceTransactionsBadRequestDocumentation$Outbound;
}

export function listBalanceTransactionsBadRequestDocumentationToJSON(
  listBalanceTransactionsBadRequestDocumentation:
    ListBalanceTransactionsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListBalanceTransactionsBadRequestDocumentation$outboundSchema.parse(
      listBalanceTransactionsBadRequestDocumentation,
    ),
  );
}

export function listBalanceTransactionsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListBalanceTransactionsBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListBalanceTransactionsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsBadRequestLinks$inboundSchema: z.ZodType<
  ListBalanceTransactionsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListBalanceTransactionsBadRequestLinks$Outbound = {
  documentation: ListBalanceTransactionsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListBalanceTransactionsBadRequestLinks$outboundSchema: z.ZodType<
  ListBalanceTransactionsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListBalanceTransactionsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsBadRequestLinks$ {
  /** @deprecated use `ListBalanceTransactionsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsBadRequestLinks$Outbound;
}

export function listBalanceTransactionsBadRequestLinksToJSON(
  listBalanceTransactionsBadRequestLinks:
    ListBalanceTransactionsBadRequestLinks,
): string {
  return JSON.stringify(
    ListBalanceTransactionsBadRequestLinks$outboundSchema.parse(
      listBalanceTransactionsBadRequestLinks,
    ),
  );
}

export function listBalanceTransactionsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ResultAmount$inboundSchema: z.ZodType<
  ResultAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ResultAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ResultAmount$outboundSchema: z.ZodType<
  ResultAmount$Outbound,
  z.ZodTypeDef,
  ResultAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultAmount$ {
  /** @deprecated use `ResultAmount$inboundSchema` instead. */
  export const inboundSchema = ResultAmount$inboundSchema;
  /** @deprecated use `ResultAmount$outboundSchema` instead. */
  export const outboundSchema = ResultAmount$outboundSchema;
  /** @deprecated use `ResultAmount$Outbound` instead. */
  export type Outbound = ResultAmount$Outbound;
}

export function resultAmountToJSON(resultAmount: ResultAmount): string {
  return JSON.stringify(ResultAmount$outboundSchema.parse(resultAmount));
}

export function resultAmountFromJSON(
  jsonString: string,
): SafeParseResult<ResultAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultAmount' from JSON`,
  );
}

/** @internal */
export const InitialAmount$inboundSchema: z.ZodType<
  InitialAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type InitialAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const InitialAmount$outboundSchema: z.ZodType<
  InitialAmount$Outbound,
  z.ZodTypeDef,
  InitialAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitialAmount$ {
  /** @deprecated use `InitialAmount$inboundSchema` instead. */
  export const inboundSchema = InitialAmount$inboundSchema;
  /** @deprecated use `InitialAmount$outboundSchema` instead. */
  export const outboundSchema = InitialAmount$outboundSchema;
  /** @deprecated use `InitialAmount$Outbound` instead. */
  export type Outbound = InitialAmount$Outbound;
}

export function initialAmountToJSON(initialAmount: InitialAmount): string {
  return JSON.stringify(InitialAmount$outboundSchema.parse(initialAmount));
}

export function initialAmountFromJSON(
  jsonString: string,
): SafeParseResult<InitialAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitialAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitialAmount' from JSON`,
  );
}

/** @internal */
export const Deductions$inboundSchema: z.ZodType<
  Deductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type Deductions$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const Deductions$outboundSchema: z.ZodType<
  Deductions$Outbound,
  z.ZodTypeDef,
  Deductions
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deductions$ {
  /** @deprecated use `Deductions$inboundSchema` instead. */
  export const inboundSchema = Deductions$inboundSchema;
  /** @deprecated use `Deductions$outboundSchema` instead. */
  export const outboundSchema = Deductions$outboundSchema;
  /** @deprecated use `Deductions$Outbound` instead. */
  export type Outbound = Deductions$Outbound;
}

export function deductionsToJSON(deductions: Deductions): string {
  return JSON.stringify(Deductions$outboundSchema.parse(deductions));
}

export function deductionsFromJSON(
  jsonString: string,
): SafeParseResult<Deductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deductions' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsCapture$inboundSchema: z.ZodType<
  ListBalanceTransactionsCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  captureId: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsCapture$Outbound = {
  paymentId?: string | undefined;
  captureId?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsCapture$outboundSchema: z.ZodType<
  ListBalanceTransactionsCapture$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsCapture
> = z.object({
  paymentId: z.string().optional(),
  captureId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsCapture$ {
  /** @deprecated use `ListBalanceTransactionsCapture$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsCapture$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsCapture$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsCapture$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsCapture$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsCapture$Outbound;
}

export function listBalanceTransactionsCaptureToJSON(
  listBalanceTransactionsCapture: ListBalanceTransactionsCapture,
): string {
  return JSON.stringify(
    ListBalanceTransactionsCapture$outboundSchema.parse(
      listBalanceTransactionsCapture,
    ),
  );
}

export function listBalanceTransactionsCaptureFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsCapture' from JSON`,
  );
}

/** @internal */
export const ReturnedRefund$inboundSchema: z.ZodType<
  ReturnedRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  refundId: z.string().optional(),
});

/** @internal */
export type ReturnedRefund$Outbound = {
  paymentId?: string | undefined;
  refundId?: string | undefined;
};

/** @internal */
export const ReturnedRefund$outboundSchema: z.ZodType<
  ReturnedRefund$Outbound,
  z.ZodTypeDef,
  ReturnedRefund
> = z.object({
  paymentId: z.string().optional(),
  refundId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnedRefund$ {
  /** @deprecated use `ReturnedRefund$inboundSchema` instead. */
  export const inboundSchema = ReturnedRefund$inboundSchema;
  /** @deprecated use `ReturnedRefund$outboundSchema` instead. */
  export const outboundSchema = ReturnedRefund$outboundSchema;
  /** @deprecated use `ReturnedRefund$Outbound` instead. */
  export type Outbound = ReturnedRefund$Outbound;
}

export function returnedRefundToJSON(returnedRefund: ReturnedRefund): string {
  return JSON.stringify(ReturnedRefund$outboundSchema.parse(returnedRefund));
}

export function returnedRefundFromJSON(
  jsonString: string,
): SafeParseResult<ReturnedRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReturnedRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReturnedRefund' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsChargeback$inboundSchema: z.ZodType<
  ListBalanceTransactionsChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  chargebackId: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsChargeback$Outbound = {
  paymentId?: string | undefined;
  chargebackId?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsChargeback$outboundSchema: z.ZodType<
  ListBalanceTransactionsChargeback$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsChargeback
> = z.object({
  paymentId: z.string().optional(),
  chargebackId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsChargeback$ {
  /** @deprecated use `ListBalanceTransactionsChargeback$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsChargeback$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsChargeback$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsChargeback$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsChargeback$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsChargeback$Outbound;
}

export function listBalanceTransactionsChargebackToJSON(
  listBalanceTransactionsChargeback: ListBalanceTransactionsChargeback,
): string {
  return JSON.stringify(
    ListBalanceTransactionsChargeback$outboundSchema.parse(
      listBalanceTransactionsChargeback,
    ),
  );
}

export function listBalanceTransactionsChargebackFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsChargeback' from JSON`,
  );
}

/** @internal */
export const OutgoingTransfer$inboundSchema: z.ZodType<
  OutgoingTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/** @internal */
export type OutgoingTransfer$Outbound = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const OutgoingTransfer$outboundSchema: z.ZodType<
  OutgoingTransfer$Outbound,
  z.ZodTypeDef,
  OutgoingTransfer
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutgoingTransfer$ {
  /** @deprecated use `OutgoingTransfer$inboundSchema` instead. */
  export const inboundSchema = OutgoingTransfer$inboundSchema;
  /** @deprecated use `OutgoingTransfer$outboundSchema` instead. */
  export const outboundSchema = OutgoingTransfer$outboundSchema;
  /** @deprecated use `OutgoingTransfer$Outbound` instead. */
  export type Outbound = OutgoingTransfer$Outbound;
}

export function outgoingTransferToJSON(
  outgoingTransfer: OutgoingTransfer,
): string {
  return JSON.stringify(
    OutgoingTransfer$outboundSchema.parse(outgoingTransfer),
  );
}

export function outgoingTransferFromJSON(
  jsonString: string,
): SafeParseResult<OutgoingTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutgoingTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutgoingTransfer' from JSON`,
  );
}

/** @internal */
export const CanceledOutgoingTransfer$inboundSchema: z.ZodType<
  CanceledOutgoingTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/** @internal */
export type CanceledOutgoingTransfer$Outbound = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const CanceledOutgoingTransfer$outboundSchema: z.ZodType<
  CanceledOutgoingTransfer$Outbound,
  z.ZodTypeDef,
  CanceledOutgoingTransfer
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanceledOutgoingTransfer$ {
  /** @deprecated use `CanceledOutgoingTransfer$inboundSchema` instead. */
  export const inboundSchema = CanceledOutgoingTransfer$inboundSchema;
  /** @deprecated use `CanceledOutgoingTransfer$outboundSchema` instead. */
  export const outboundSchema = CanceledOutgoingTransfer$outboundSchema;
  /** @deprecated use `CanceledOutgoingTransfer$Outbound` instead. */
  export type Outbound = CanceledOutgoingTransfer$Outbound;
}

export function canceledOutgoingTransferToJSON(
  canceledOutgoingTransfer: CanceledOutgoingTransfer,
): string {
  return JSON.stringify(
    CanceledOutgoingTransfer$outboundSchema.parse(canceledOutgoingTransfer),
  );
}

export function canceledOutgoingTransferFromJSON(
  jsonString: string,
): SafeParseResult<CanceledOutgoingTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanceledOutgoingTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanceledOutgoingTransfer' from JSON`,
  );
}

/** @internal */
export const ReturnedTransfer$inboundSchema: z.ZodType<
  ReturnedTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/** @internal */
export type ReturnedTransfer$Outbound = {
  transferId?: string | undefined;
  settlementId?: string | undefined;
};

/** @internal */
export const ReturnedTransfer$outboundSchema: z.ZodType<
  ReturnedTransfer$Outbound,
  z.ZodTypeDef,
  ReturnedTransfer
> = z.object({
  transferId: z.string().optional(),
  settlementId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReturnedTransfer$ {
  /** @deprecated use `ReturnedTransfer$inboundSchema` instead. */
  export const inboundSchema = ReturnedTransfer$inboundSchema;
  /** @deprecated use `ReturnedTransfer$outboundSchema` instead. */
  export const outboundSchema = ReturnedTransfer$outboundSchema;
  /** @deprecated use `ReturnedTransfer$Outbound` instead. */
  export type Outbound = ReturnedTransfer$Outbound;
}

export function returnedTransferToJSON(
  returnedTransfer: ReturnedTransfer,
): string {
  return JSON.stringify(
    ReturnedTransfer$outboundSchema.parse(returnedTransfer),
  );
}

export function returnedTransferFromJSON(
  jsonString: string,
): SafeParseResult<ReturnedTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReturnedTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReturnedTransfer' from JSON`,
  );
}

/** @internal */
export const PlatformPaymentRefund$inboundSchema: z.ZodType<
  PlatformPaymentRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  refundId: z.string().optional(),
});

/** @internal */
export type PlatformPaymentRefund$Outbound = {
  paymentId?: string | undefined;
  refundId?: string | undefined;
};

/** @internal */
export const PlatformPaymentRefund$outboundSchema: z.ZodType<
  PlatformPaymentRefund$Outbound,
  z.ZodTypeDef,
  PlatformPaymentRefund
> = z.object({
  paymentId: z.string().optional(),
  refundId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformPaymentRefund$ {
  /** @deprecated use `PlatformPaymentRefund$inboundSchema` instead. */
  export const inboundSchema = PlatformPaymentRefund$inboundSchema;
  /** @deprecated use `PlatformPaymentRefund$outboundSchema` instead. */
  export const outboundSchema = PlatformPaymentRefund$outboundSchema;
  /** @deprecated use `PlatformPaymentRefund$Outbound` instead. */
  export type Outbound = PlatformPaymentRefund$Outbound;
}

export function platformPaymentRefundToJSON(
  platformPaymentRefund: PlatformPaymentRefund,
): string {
  return JSON.stringify(
    PlatformPaymentRefund$outboundSchema.parse(platformPaymentRefund),
  );
}

export function platformPaymentRefundFromJSON(
  jsonString: string,
): SafeParseResult<PlatformPaymentRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformPaymentRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformPaymentRefund' from JSON`,
  );
}

/** @internal */
export const PlatformPaymentChargeback$inboundSchema: z.ZodType<
  PlatformPaymentChargeback,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  chargebackId: z.string().optional(),
});

/** @internal */
export type PlatformPaymentChargeback$Outbound = {
  paymentId?: string | undefined;
  chargebackId?: string | undefined;
};

/** @internal */
export const PlatformPaymentChargeback$outboundSchema: z.ZodType<
  PlatformPaymentChargeback$Outbound,
  z.ZodTypeDef,
  PlatformPaymentChargeback
> = z.object({
  paymentId: z.string().optional(),
  chargebackId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformPaymentChargeback$ {
  /** @deprecated use `PlatformPaymentChargeback$inboundSchema` instead. */
  export const inboundSchema = PlatformPaymentChargeback$inboundSchema;
  /** @deprecated use `PlatformPaymentChargeback$outboundSchema` instead. */
  export const outboundSchema = PlatformPaymentChargeback$outboundSchema;
  /** @deprecated use `PlatformPaymentChargeback$Outbound` instead. */
  export type Outbound = PlatformPaymentChargeback$Outbound;
}

export function platformPaymentChargebackToJSON(
  platformPaymentChargeback: PlatformPaymentChargeback,
): string {
  return JSON.stringify(
    PlatformPaymentChargeback$outboundSchema.parse(platformPaymentChargeback),
  );
}

export function platformPaymentChargebackFromJSON(
  jsonString: string,
): SafeParseResult<PlatformPaymentChargeback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformPaymentChargeback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformPaymentChargeback' from JSON`,
  );
}

/** @internal */
export const Context$inboundSchema: z.ZodType<Context, z.ZodTypeDef, unknown> =
  z.object({
    payment: z.nullable(z.string()).optional(),
    capture: z.nullable(
      z.lazy(() => ListBalanceTransactionsCapture$inboundSchema),
    ).optional(),
    "unauthorized-direct-debit": z.nullable(z.string()).optional(),
    "failed-payment": z.nullable(z.string()).optional(),
    refund: z.nullable(z.string()).optional(),
    "returned-refund": z.nullable(z.lazy(() => ReturnedRefund$inboundSchema))
      .optional(),
    chargeback: z.nullable(
      z.lazy(() => ListBalanceTransactionsChargeback$inboundSchema),
    ).optional(),
    "chargeback-reversal": z.nullable(z.string()).optional(),
    "outgoing-transfer": z.nullable(
      z.lazy(() => OutgoingTransfer$inboundSchema),
    ).optional(),
    "canceled-outgoing-transfer": z.nullable(
      z.lazy(() => CanceledOutgoingTransfer$inboundSchema),
    ).optional(),
    "returned-transfer": z.nullable(
      z.lazy(() => ReturnedTransfer$inboundSchema),
    ).optional(),
    "invoice-compensation": z.nullable(z.string()).optional(),
    "application-fee": z.nullable(z.string()).optional(),
    "split-payment": z.nullable(z.string()).optional(),
    "platform-payment-refund": z.nullable(
      z.lazy(() => PlatformPaymentRefund$inboundSchema),
    ).optional(),
    "platform-payment-chargeback": z.nullable(
      z.lazy(() => PlatformPaymentChargeback$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "unauthorized-direct-debit": "unauthorizedDirectDebit",
      "failed-payment": "failedPayment",
      "returned-refund": "returnedRefund",
      "chargeback-reversal": "chargebackReversal",
      "outgoing-transfer": "outgoingTransfer",
      "canceled-outgoing-transfer": "canceledOutgoingTransfer",
      "returned-transfer": "returnedTransfer",
      "invoice-compensation": "invoiceCompensation",
      "application-fee": "applicationFee",
      "split-payment": "splitPayment",
      "platform-payment-refund": "platformPaymentRefund",
      "platform-payment-chargeback": "platformPaymentChargeback",
    });
  });

/** @internal */
export type Context$Outbound = {
  payment?: string | null | undefined;
  capture?: ListBalanceTransactionsCapture$Outbound | null | undefined;
  "unauthorized-direct-debit"?: string | null | undefined;
  "failed-payment"?: string | null | undefined;
  refund?: string | null | undefined;
  "returned-refund"?: ReturnedRefund$Outbound | null | undefined;
  chargeback?: ListBalanceTransactionsChargeback$Outbound | null | undefined;
  "chargeback-reversal"?: string | null | undefined;
  "outgoing-transfer"?: OutgoingTransfer$Outbound | null | undefined;
  "canceled-outgoing-transfer"?:
    | CanceledOutgoingTransfer$Outbound
    | null
    | undefined;
  "returned-transfer"?: ReturnedTransfer$Outbound | null | undefined;
  "invoice-compensation"?: string | null | undefined;
  "application-fee"?: string | null | undefined;
  "split-payment"?: string | null | undefined;
  "platform-payment-refund"?: PlatformPaymentRefund$Outbound | null | undefined;
  "platform-payment-chargeback"?:
    | PlatformPaymentChargeback$Outbound
    | null
    | undefined;
};

/** @internal */
export const Context$outboundSchema: z.ZodType<
  Context$Outbound,
  z.ZodTypeDef,
  Context
> = z.object({
  payment: z.nullable(z.string()).optional(),
  capture: z.nullable(
    z.lazy(() => ListBalanceTransactionsCapture$outboundSchema),
  ).optional(),
  unauthorizedDirectDebit: z.nullable(z.string()).optional(),
  failedPayment: z.nullable(z.string()).optional(),
  refund: z.nullable(z.string()).optional(),
  returnedRefund: z.nullable(z.lazy(() => ReturnedRefund$outboundSchema))
    .optional(),
  chargeback: z.nullable(
    z.lazy(() => ListBalanceTransactionsChargeback$outboundSchema),
  ).optional(),
  chargebackReversal: z.nullable(z.string()).optional(),
  outgoingTransfer: z.nullable(z.lazy(() => OutgoingTransfer$outboundSchema))
    .optional(),
  canceledOutgoingTransfer: z.nullable(
    z.lazy(() => CanceledOutgoingTransfer$outboundSchema),
  ).optional(),
  returnedTransfer: z.nullable(z.lazy(() => ReturnedTransfer$outboundSchema))
    .optional(),
  invoiceCompensation: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(z.string()).optional(),
  splitPayment: z.nullable(z.string()).optional(),
  platformPaymentRefund: z.nullable(
    z.lazy(() => PlatformPaymentRefund$outboundSchema),
  ).optional(),
  platformPaymentChargeback: z.nullable(
    z.lazy(() => PlatformPaymentChargeback$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    unauthorizedDirectDebit: "unauthorized-direct-debit",
    failedPayment: "failed-payment",
    returnedRefund: "returned-refund",
    chargebackReversal: "chargeback-reversal",
    outgoingTransfer: "outgoing-transfer",
    canceledOutgoingTransfer: "canceled-outgoing-transfer",
    returnedTransfer: "returned-transfer",
    invoiceCompensation: "invoice-compensation",
    applicationFee: "application-fee",
    splitPayment: "split-payment",
    platformPaymentRefund: "platform-payment-refund",
    platformPaymentChargeback: "platform-payment-chargeback",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Context$ {
  /** @deprecated use `Context$inboundSchema` instead. */
  export const inboundSchema = Context$inboundSchema;
  /** @deprecated use `Context$outboundSchema` instead. */
  export const outboundSchema = Context$outboundSchema;
  /** @deprecated use `Context$Outbound` instead. */
  export type Outbound = Context$Outbound;
}

export function contextToJSON(context: Context): string {
  return JSON.stringify(Context$outboundSchema.parse(context));
}

export function contextFromJSON(
  jsonString: string,
): SafeParseResult<Context, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Context$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Context' from JSON`,
  );
}

/** @internal */
export const BalanceTransaction$inboundSchema: z.ZodType<
  BalanceTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("balance_transaction"),
  id: z.string().optional(),
  type: z.string().optional(),
  resultAmount: z.lazy(() => ResultAmount$inboundSchema).optional(),
  initialAmount: z.lazy(() => InitialAmount$inboundSchema).optional(),
  deductions: z.nullable(z.lazy(() => Deductions$inboundSchema)).optional(),
  context: z.lazy(() => Context$inboundSchema).optional(),
  createdAt: z.string().optional(),
});

/** @internal */
export type BalanceTransaction$Outbound = {
  resource: string;
  id?: string | undefined;
  type?: string | undefined;
  resultAmount?: ResultAmount$Outbound | undefined;
  initialAmount?: InitialAmount$Outbound | undefined;
  deductions?: Deductions$Outbound | null | undefined;
  context?: Context$Outbound | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const BalanceTransaction$outboundSchema: z.ZodType<
  BalanceTransaction$Outbound,
  z.ZodTypeDef,
  BalanceTransaction
> = z.object({
  resource: z.string().default("balance_transaction"),
  id: z.string().optional(),
  type: z.string().optional(),
  resultAmount: z.lazy(() => ResultAmount$outboundSchema).optional(),
  initialAmount: z.lazy(() => InitialAmount$outboundSchema).optional(),
  deductions: z.nullable(z.lazy(() => Deductions$outboundSchema)).optional(),
  context: z.lazy(() => Context$outboundSchema).optional(),
  createdAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceTransaction$ {
  /** @deprecated use `BalanceTransaction$inboundSchema` instead. */
  export const inboundSchema = BalanceTransaction$inboundSchema;
  /** @deprecated use `BalanceTransaction$outboundSchema` instead. */
  export const outboundSchema = BalanceTransaction$outboundSchema;
  /** @deprecated use `BalanceTransaction$Outbound` instead. */
  export type Outbound = BalanceTransaction$Outbound;
}

export function balanceTransactionToJSON(
  balanceTransaction: BalanceTransaction,
): string {
  return JSON.stringify(
    BalanceTransaction$outboundSchema.parse(balanceTransaction),
  );
}

export function balanceTransactionFromJSON(
  jsonString: string,
): SafeParseResult<BalanceTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceTransaction' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsEmbedded$inboundSchema: z.ZodType<
  ListBalanceTransactionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  balance_transactions: z.array(z.lazy(() => BalanceTransaction$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "balance_transactions": "balanceTransactions",
  });
});

/** @internal */
export type ListBalanceTransactionsEmbedded$Outbound = {
  balance_transactions?: Array<BalanceTransaction$Outbound> | undefined;
};

/** @internal */
export const ListBalanceTransactionsEmbedded$outboundSchema: z.ZodType<
  ListBalanceTransactionsEmbedded$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsEmbedded
> = z.object({
  balanceTransactions: z.array(z.lazy(() => BalanceTransaction$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    balanceTransactions: "balance_transactions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsEmbedded$ {
  /** @deprecated use `ListBalanceTransactionsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsEmbedded$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsEmbedded$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsEmbedded$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsEmbedded$Outbound;
}

export function listBalanceTransactionsEmbeddedToJSON(
  listBalanceTransactionsEmbedded: ListBalanceTransactionsEmbedded,
): string {
  return JSON.stringify(
    ListBalanceTransactionsEmbedded$outboundSchema.parse(
      listBalanceTransactionsEmbedded,
    ),
  );
}

export function listBalanceTransactionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsSelf$inboundSchema: z.ZodType<
  ListBalanceTransactionsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalanceTransactionsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsSelf$outboundSchema: z.ZodType<
  ListBalanceTransactionsSelf$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsSelf$ {
  /** @deprecated use `ListBalanceTransactionsSelf$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsSelf$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsSelf$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsSelf$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsSelf$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsSelf$Outbound;
}

export function listBalanceTransactionsSelfToJSON(
  listBalanceTransactionsSelf: ListBalanceTransactionsSelf,
): string {
  return JSON.stringify(
    ListBalanceTransactionsSelf$outboundSchema.parse(
      listBalanceTransactionsSelf,
    ),
  );
}

export function listBalanceTransactionsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsSelf' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsPrevious$inboundSchema: z.ZodType<
  ListBalanceTransactionsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsPrevious$outboundSchema: z.ZodType<
  ListBalanceTransactionsPrevious$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsPrevious$ {
  /** @deprecated use `ListBalanceTransactionsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsPrevious$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsPrevious$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsPrevious$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsPrevious$Outbound;
}

export function listBalanceTransactionsPreviousToJSON(
  listBalanceTransactionsPrevious: ListBalanceTransactionsPrevious,
): string {
  return JSON.stringify(
    ListBalanceTransactionsPrevious$outboundSchema.parse(
      listBalanceTransactionsPrevious,
    ),
  );
}

export function listBalanceTransactionsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsPrevious' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsNext$inboundSchema: z.ZodType<
  ListBalanceTransactionsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListBalanceTransactionsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListBalanceTransactionsNext$outboundSchema: z.ZodType<
  ListBalanceTransactionsNext$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsNext$ {
  /** @deprecated use `ListBalanceTransactionsNext$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsNext$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsNext$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsNext$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsNext$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsNext$Outbound;
}

export function listBalanceTransactionsNextToJSON(
  listBalanceTransactionsNext: ListBalanceTransactionsNext,
): string {
  return JSON.stringify(
    ListBalanceTransactionsNext$outboundSchema.parse(
      listBalanceTransactionsNext,
    ),
  );
}

export function listBalanceTransactionsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsNext' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsDocumentation$inboundSchema: z.ZodType<
  ListBalanceTransactionsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListBalanceTransactionsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListBalanceTransactionsDocumentation$outboundSchema: z.ZodType<
  ListBalanceTransactionsDocumentation$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsDocumentation$ {
  /** @deprecated use `ListBalanceTransactionsDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListBalanceTransactionsDocumentation$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListBalanceTransactionsDocumentation$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsDocumentation$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsDocumentation$Outbound;
}

export function listBalanceTransactionsDocumentationToJSON(
  listBalanceTransactionsDocumentation: ListBalanceTransactionsDocumentation,
): string {
  return JSON.stringify(
    ListBalanceTransactionsDocumentation$outboundSchema.parse(
      listBalanceTransactionsDocumentation,
    ),
  );
}

export function listBalanceTransactionsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBalanceTransactionsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsLinks$inboundSchema: z.ZodType<
  ListBalanceTransactionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListBalanceTransactionsSelf$inboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListBalanceTransactionsPrevious$inboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListBalanceTransactionsNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListBalanceTransactionsDocumentation$inboundSchema
  ).optional(),
});

/** @internal */
export type ListBalanceTransactionsLinks$Outbound = {
  self?: ListBalanceTransactionsSelf$Outbound | undefined;
  previous?: ListBalanceTransactionsPrevious$Outbound | null | undefined;
  next?: ListBalanceTransactionsNext$Outbound | null | undefined;
  documentation?: ListBalanceTransactionsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListBalanceTransactionsLinks$outboundSchema: z.ZodType<
  ListBalanceTransactionsLinks$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsLinks
> = z.object({
  self: z.lazy(() => ListBalanceTransactionsSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListBalanceTransactionsPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListBalanceTransactionsNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListBalanceTransactionsDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsLinks$ {
  /** @deprecated use `ListBalanceTransactionsLinks$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsLinks$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsLinks$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsLinks$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsLinks$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsLinks$Outbound;
}

export function listBalanceTransactionsLinksToJSON(
  listBalanceTransactionsLinks: ListBalanceTransactionsLinks,
): string {
  return JSON.stringify(
    ListBalanceTransactionsLinks$outboundSchema.parse(
      listBalanceTransactionsLinks,
    ),
  );
}

export function listBalanceTransactionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsLinks' from JSON`,
  );
}

/** @internal */
export const ListBalanceTransactionsResponse$inboundSchema: z.ZodType<
  ListBalanceTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListBalanceTransactionsEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => ListBalanceTransactionsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListBalanceTransactionsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListBalanceTransactionsEmbedded$Outbound | undefined;
  _links?: ListBalanceTransactionsLinks$Outbound | undefined;
};

/** @internal */
export const ListBalanceTransactionsResponse$outboundSchema: z.ZodType<
  ListBalanceTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListBalanceTransactionsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListBalanceTransactionsEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => ListBalanceTransactionsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBalanceTransactionsResponse$ {
  /** @deprecated use `ListBalanceTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListBalanceTransactionsResponse$inboundSchema;
  /** @deprecated use `ListBalanceTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListBalanceTransactionsResponse$outboundSchema;
  /** @deprecated use `ListBalanceTransactionsResponse$Outbound` instead. */
  export type Outbound = ListBalanceTransactionsResponse$Outbound;
}

export function listBalanceTransactionsResponseToJSON(
  listBalanceTransactionsResponse: ListBalanceTransactionsResponse,
): string {
  return JSON.stringify(
    ListBalanceTransactionsResponse$outboundSchema.parse(
      listBalanceTransactionsResponse,
    ),
  );
}

export function listBalanceTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBalanceTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBalanceTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBalanceTransactionsResponse' from JSON`,
  );
}
