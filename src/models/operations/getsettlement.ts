/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSettlementRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetSettlementNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetSettlementNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetSettlementNotFoundDocumentation;
};

/**
 * The status of the settlement.
 */
export const GetSettlementStatus = {
  Open: "open",
  Pending: "pending",
  Paidout: "paidout",
  Failed: "failed",
} as const;
/**
 * The status of the settlement.
 */
export type GetSettlementStatus = ClosedEnum<typeof GetSettlementStatus>;

/**
 * The total amount of the settlement.
 */
export type GetSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The payment method, if applicable
 */
export const GetSettlementCostMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type GetSettlementCostMethod = ClosedEnum<
  typeof GetSettlementCostMethod
>;

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type GetSettlementFixed = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type GetSettlementPercentage = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The service rates, further divided into `fixed` and `percentage` costs.
 */
export type GetSettlementRate = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  fixed?: GetSettlementFixed | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  percentage?: GetSettlementPercentage | undefined;
};

/**
 * The net total cost, i.e. excluding VAT
 */
export type GetSettlementCostAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type GetSettlementCostAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total cost, i.e. including VAT
 */
export type GetSettlementCostAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetSettlementCost = {
  /**
   * A description of the cost subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: GetSettlementCostMethod | null | undefined;
  /**
   * The number of fees
   */
  count?: number | undefined;
  /**
   * The service rates, further divided into `fixed` and `percentage` costs.
   */
  rate?: GetSettlementRate | undefined;
  /**
   * The net total cost, i.e. excluding VAT
   */
  amountNet?: GetSettlementCostAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: GetSettlementCostAmountVat | undefined;
  /**
   * The gross total cost, i.e. including VAT
   */
  amountGross?: GetSettlementCostAmountGross | undefined;
};

/**
 * The payment method, if applicable
 */
export const GetSettlementRevenueMethod = {
  Alma: "alma",
  Bacs: "bacs",
  Applepay: "applepay",
  Bancomatpay: "bancomatpay",
  Bancontact: "bancontact",
  Banktransfer: "banktransfer",
  Belfius: "belfius",
  Billie: "billie",
  Bizum: "bizum",
  Bitcoin: "bitcoin",
  Blik: "blik",
  Creditcard: "creditcard",
  Directdebit: "directdebit",
  Eps: "eps",
  Giftcard: "giftcard",
  Giropay: "giropay",
  Googlepay: "googlepay",
  Ideal: "ideal",
  In3: "in3",
  Inghomepay: "inghomepay",
  Kbc: "kbc",
  Klarnapaylater: "klarnapaylater",
  Klarnapaynow: "klarnapaynow",
  Klarnasliceit: "klarnasliceit",
  Klarna: "klarna",
  Mbway: "mbway",
  Multibanco: "multibanco",
  Mybank: "mybank",
  Paybybank: "paybybank",
  Payconiq: "payconiq",
  Paypal: "paypal",
  Paysafecard: "paysafecard",
  Przelewy24: "przelewy24",
  Riverty: "riverty",
  Satispay: "satispay",
  Podiumcadeaukaart: "podiumcadeaukaart",
  Pointofsale: "pointofsale",
  Sofort: "sofort",
  Swish: "swish",
  Trustly: "trustly",
  Twint: "twint",
  Voucher: "voucher",
} as const;
/**
 * The payment method, if applicable
 */
export type GetSettlementRevenueMethod = ClosedEnum<
  typeof GetSettlementRevenueMethod
>;

/**
 * The net total of received funds, i.e. excluding VAT
 */
export type GetSettlementRevenueAmountNet = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The applicable VAT
 */
export type GetSettlementRevenueAmountVat = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The gross total of received funds, i.e. including VAT
 */
export type GetSettlementRevenueAmountGross = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetSettlementRevenue = {
  /**
   * A description of the revenue subtotal
   */
  description?: string | undefined;
  /**
   * The payment method, if applicable
   */
  method?: GetSettlementRevenueMethod | null | undefined;
  /**
   * The number of payments
   */
  count?: number | undefined;
  /**
   * The net total of received funds, i.e. excluding VAT
   */
  amountNet?: GetSettlementRevenueAmountNet | undefined;
  /**
   * The applicable VAT
   */
  amountVat?: GetSettlementRevenueAmountVat | undefined;
  /**
   * The gross total of received funds, i.e. including VAT
   */
  amountGross?: GetSettlementRevenueAmountGross | undefined;
};

export type GetSettlementLessThanMonthGreaterThan = {
  /**
   * An array of cost objects, describing the fees withheld for each payment method during this period.
   */
  costs?: Array<GetSettlementCost> | undefined;
  /**
   * An array of revenue objects containing the total revenue for each payment method during this period.
   */
  revenue?: Array<GetSettlementRevenue> | undefined;
  /**
   * The ID of the invoice created for this period, if the invoice has been created already.
   */
  invoiceId?: string | null | undefined;
  /**
   * The invoice reference, if the invoice has been created already.
   */
  invoiceReference?: string | null | undefined;
};

export type GetSettlementLessThanYearGreaterThan = {
  lessThanMonthGreaterThan?: GetSettlementLessThanMonthGreaterThan | undefined;
};

/**
 * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
 *
 * @remarks
 * transactions are grouped into 'period' objects â€” one for each calendar month.
 *
 * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
 * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
 *
 * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
 * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
 *
 * The example response should give a good idea of what this looks like in practise.
 */
export type GetSettlementPeriods = {
  lessThanYearGreaterThan?: GetSettlementLessThanYearGreaterThan | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payments](list-payments) included in this settlement.
 */
export type GetSettlementPayments = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-captures) included in this settlement.
 */
export type GetSettlementCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
 */
export type GetSettlementRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
 */
export type GetSettlementChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [invoice](list-invoices).
 */
export type GetSettlementInvoice = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetSettlementDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetSettlementLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetSettlementSelf | undefined;
  /**
   * The API resource URL of the [payments](list-payments) included in this settlement.
   */
  payments?: GetSettlementPayments | undefined;
  /**
   * The API resource URL of the [captures](list-captures) included in this settlement.
   */
  captures?: GetSettlementCaptures | undefined;
  /**
   * The API resource URL of the [refunds](list-refunds) deducted from this settlement.
   */
  refunds?: GetSettlementRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
   */
  chargebacks?: GetSettlementChargebacks | undefined;
  /**
   * The API resource URL of the [invoice](list-invoices).
   */
  invoice?: GetSettlementInvoice | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetSettlementDocumentation | undefined;
};

/**
 * The settlement object.
 */
export type GetSettlementResponse = {
  /**
   * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this settlement.
   */
  id?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The settlement's bank reference, as found in your Mollie account and on your bank statement.
   */
  reference?: string | null | undefined;
  /**
   * The date on which the settlement was settled, in ISO 8601 format.
   *
   * @remarks
   *
   * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
   * date is available.
   */
  settledAt?: string | null | undefined;
  /**
   * The status of the settlement.
   */
  status?: GetSettlementStatus | undefined;
  /**
   * The total amount of the settlement.
   */
  amount?: GetSettlementAmount | undefined;
  /**
   * The balance token that the settlement was settled to.
   */
  balanceId?: string | undefined;
  /**
   * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
   */
  invoiceId?: string | null | undefined;
  /**
   * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
   *
   * @remarks
   * transactions are grouped into 'period' objects â€” one for each calendar month.
   *
   * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
   * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
   *
   * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
   * look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
   *
   * The example response should give a good idea of what this looks like in practise.
   */
  periods?: GetSettlementPeriods | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetSettlementLinks | undefined;
};

/** @internal */
export const GetSettlementRequest$inboundSchema: z.ZodType<
  GetSettlementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetSettlementRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetSettlementRequest$outboundSchema: z.ZodType<
  GetSettlementRequest$Outbound,
  z.ZodTypeDef,
  GetSettlementRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRequest$ {
  /** @deprecated use `GetSettlementRequest$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRequest$inboundSchema;
  /** @deprecated use `GetSettlementRequest$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRequest$outboundSchema;
  /** @deprecated use `GetSettlementRequest$Outbound` instead. */
  export type Outbound = GetSettlementRequest$Outbound;
}

export function getSettlementRequestToJSON(
  getSettlementRequest: GetSettlementRequest,
): string {
  return JSON.stringify(
    GetSettlementRequest$outboundSchema.parse(getSettlementRequest),
  );
}

export function getSettlementRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRequest' from JSON`,
  );
}

/** @internal */
export const GetSettlementNotFoundDocumentation$inboundSchema: z.ZodType<
  GetSettlementNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementNotFoundDocumentation$outboundSchema: z.ZodType<
  GetSettlementNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetSettlementNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementNotFoundDocumentation$ {
  /** @deprecated use `GetSettlementNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetSettlementNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementNotFoundDocumentation$Outbound;
}

export function getSettlementNotFoundDocumentationToJSON(
  getSettlementNotFoundDocumentation: GetSettlementNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetSettlementNotFoundDocumentation$outboundSchema.parse(
      getSettlementNotFoundDocumentation,
    ),
  );
}

export function getSettlementNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementNotFoundLinks$inboundSchema: z.ZodType<
  GetSettlementNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetSettlementNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetSettlementNotFoundLinks$Outbound = {
  documentation: GetSettlementNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetSettlementNotFoundLinks$outboundSchema: z.ZodType<
  GetSettlementNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetSettlementNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementNotFoundLinks$ {
  /** @deprecated use `GetSettlementNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementNotFoundLinks$inboundSchema;
  /** @deprecated use `GetSettlementNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementNotFoundLinks$outboundSchema;
  /** @deprecated use `GetSettlementNotFoundLinks$Outbound` instead. */
  export type Outbound = GetSettlementNotFoundLinks$Outbound;
}

export function getSettlementNotFoundLinksToJSON(
  getSettlementNotFoundLinks: GetSettlementNotFoundLinks,
): string {
  return JSON.stringify(
    GetSettlementNotFoundLinks$outboundSchema.parse(getSettlementNotFoundLinks),
  );
}

export function getSettlementNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetSettlementStatus
> = z.nativeEnum(GetSettlementStatus);

/** @internal */
export const GetSettlementStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetSettlementStatus
> = GetSettlementStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementStatus$ {
  /** @deprecated use `GetSettlementStatus$inboundSchema` instead. */
  export const inboundSchema = GetSettlementStatus$inboundSchema;
  /** @deprecated use `GetSettlementStatus$outboundSchema` instead. */
  export const outboundSchema = GetSettlementStatus$outboundSchema;
}

/** @internal */
export const GetSettlementAmount$inboundSchema: z.ZodType<
  GetSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementAmount$outboundSchema: z.ZodType<
  GetSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementAmount$ {
  /** @deprecated use `GetSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetSettlementAmount$inboundSchema;
  /** @deprecated use `GetSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetSettlementAmount$outboundSchema;
  /** @deprecated use `GetSettlementAmount$Outbound` instead. */
  export type Outbound = GetSettlementAmount$Outbound;
}

export function getSettlementAmountToJSON(
  getSettlementAmount: GetSettlementAmount,
): string {
  return JSON.stringify(
    GetSettlementAmount$outboundSchema.parse(getSettlementAmount),
  );
}

export function getSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementAmount' from JSON`,
  );
}

/** @internal */
export const GetSettlementCostMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetSettlementCostMethod
> = z.nativeEnum(GetSettlementCostMethod);

/** @internal */
export const GetSettlementCostMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetSettlementCostMethod
> = GetSettlementCostMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCostMethod$ {
  /** @deprecated use `GetSettlementCostMethod$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCostMethod$inboundSchema;
  /** @deprecated use `GetSettlementCostMethod$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCostMethod$outboundSchema;
}

/** @internal */
export const GetSettlementFixed$inboundSchema: z.ZodType<
  GetSettlementFixed,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementFixed$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementFixed$outboundSchema: z.ZodType<
  GetSettlementFixed$Outbound,
  z.ZodTypeDef,
  GetSettlementFixed
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementFixed$ {
  /** @deprecated use `GetSettlementFixed$inboundSchema` instead. */
  export const inboundSchema = GetSettlementFixed$inboundSchema;
  /** @deprecated use `GetSettlementFixed$outboundSchema` instead. */
  export const outboundSchema = GetSettlementFixed$outboundSchema;
  /** @deprecated use `GetSettlementFixed$Outbound` instead. */
  export type Outbound = GetSettlementFixed$Outbound;
}

export function getSettlementFixedToJSON(
  getSettlementFixed: GetSettlementFixed,
): string {
  return JSON.stringify(
    GetSettlementFixed$outboundSchema.parse(getSettlementFixed),
  );
}

export function getSettlementFixedFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementFixed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementFixed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementFixed' from JSON`,
  );
}

/** @internal */
export const GetSettlementPercentage$inboundSchema: z.ZodType<
  GetSettlementPercentage,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementPercentage$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementPercentage$outboundSchema: z.ZodType<
  GetSettlementPercentage$Outbound,
  z.ZodTypeDef,
  GetSettlementPercentage
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPercentage$ {
  /** @deprecated use `GetSettlementPercentage$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPercentage$inboundSchema;
  /** @deprecated use `GetSettlementPercentage$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPercentage$outboundSchema;
  /** @deprecated use `GetSettlementPercentage$Outbound` instead. */
  export type Outbound = GetSettlementPercentage$Outbound;
}

export function getSettlementPercentageToJSON(
  getSettlementPercentage: GetSettlementPercentage,
): string {
  return JSON.stringify(
    GetSettlementPercentage$outboundSchema.parse(getSettlementPercentage),
  );
}

export function getSettlementPercentageFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPercentage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPercentage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPercentage' from JSON`,
  );
}

/** @internal */
export const GetSettlementRate$inboundSchema: z.ZodType<
  GetSettlementRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  fixed: z.lazy(() => GetSettlementFixed$inboundSchema).optional(),
  percentage: z.lazy(() => GetSettlementPercentage$inboundSchema).optional(),
});

/** @internal */
export type GetSettlementRate$Outbound = {
  fixed?: GetSettlementFixed$Outbound | undefined;
  percentage?: GetSettlementPercentage$Outbound | undefined;
};

/** @internal */
export const GetSettlementRate$outboundSchema: z.ZodType<
  GetSettlementRate$Outbound,
  z.ZodTypeDef,
  GetSettlementRate
> = z.object({
  fixed: z.lazy(() => GetSettlementFixed$outboundSchema).optional(),
  percentage: z.lazy(() => GetSettlementPercentage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRate$ {
  /** @deprecated use `GetSettlementRate$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRate$inboundSchema;
  /** @deprecated use `GetSettlementRate$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRate$outboundSchema;
  /** @deprecated use `GetSettlementRate$Outbound` instead. */
  export type Outbound = GetSettlementRate$Outbound;
}

export function getSettlementRateToJSON(
  getSettlementRate: GetSettlementRate,
): string {
  return JSON.stringify(
    GetSettlementRate$outboundSchema.parse(getSettlementRate),
  );
}

export function getSettlementRateFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRate' from JSON`,
  );
}

/** @internal */
export const GetSettlementCostAmountNet$inboundSchema: z.ZodType<
  GetSettlementCostAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementCostAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementCostAmountNet$outboundSchema: z.ZodType<
  GetSettlementCostAmountNet$Outbound,
  z.ZodTypeDef,
  GetSettlementCostAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCostAmountNet$ {
  /** @deprecated use `GetSettlementCostAmountNet$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCostAmountNet$inboundSchema;
  /** @deprecated use `GetSettlementCostAmountNet$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCostAmountNet$outboundSchema;
  /** @deprecated use `GetSettlementCostAmountNet$Outbound` instead. */
  export type Outbound = GetSettlementCostAmountNet$Outbound;
}

export function getSettlementCostAmountNetToJSON(
  getSettlementCostAmountNet: GetSettlementCostAmountNet,
): string {
  return JSON.stringify(
    GetSettlementCostAmountNet$outboundSchema.parse(getSettlementCostAmountNet),
  );
}

export function getSettlementCostAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCostAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCostAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCostAmountNet' from JSON`,
  );
}

/** @internal */
export const GetSettlementCostAmountVat$inboundSchema: z.ZodType<
  GetSettlementCostAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementCostAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementCostAmountVat$outboundSchema: z.ZodType<
  GetSettlementCostAmountVat$Outbound,
  z.ZodTypeDef,
  GetSettlementCostAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCostAmountVat$ {
  /** @deprecated use `GetSettlementCostAmountVat$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCostAmountVat$inboundSchema;
  /** @deprecated use `GetSettlementCostAmountVat$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCostAmountVat$outboundSchema;
  /** @deprecated use `GetSettlementCostAmountVat$Outbound` instead. */
  export type Outbound = GetSettlementCostAmountVat$Outbound;
}

export function getSettlementCostAmountVatToJSON(
  getSettlementCostAmountVat: GetSettlementCostAmountVat,
): string {
  return JSON.stringify(
    GetSettlementCostAmountVat$outboundSchema.parse(getSettlementCostAmountVat),
  );
}

export function getSettlementCostAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCostAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCostAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCostAmountVat' from JSON`,
  );
}

/** @internal */
export const GetSettlementCostAmountGross$inboundSchema: z.ZodType<
  GetSettlementCostAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementCostAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementCostAmountGross$outboundSchema: z.ZodType<
  GetSettlementCostAmountGross$Outbound,
  z.ZodTypeDef,
  GetSettlementCostAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCostAmountGross$ {
  /** @deprecated use `GetSettlementCostAmountGross$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCostAmountGross$inboundSchema;
  /** @deprecated use `GetSettlementCostAmountGross$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCostAmountGross$outboundSchema;
  /** @deprecated use `GetSettlementCostAmountGross$Outbound` instead. */
  export type Outbound = GetSettlementCostAmountGross$Outbound;
}

export function getSettlementCostAmountGrossToJSON(
  getSettlementCostAmountGross: GetSettlementCostAmountGross,
): string {
  return JSON.stringify(
    GetSettlementCostAmountGross$outboundSchema.parse(
      getSettlementCostAmountGross,
    ),
  );
}

export function getSettlementCostAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCostAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCostAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCostAmountGross' from JSON`,
  );
}

/** @internal */
export const GetSettlementCost$inboundSchema: z.ZodType<
  GetSettlementCost,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetSettlementCostMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => GetSettlementRate$inboundSchema).optional(),
  amountNet: z.lazy(() => GetSettlementCostAmountNet$inboundSchema).optional(),
  amountVat: z.lazy(() => GetSettlementCostAmountVat$inboundSchema).optional(),
  amountGross: z.lazy(() => GetSettlementCostAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSettlementCost$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  rate?: GetSettlementRate$Outbound | undefined;
  amountNet?: GetSettlementCostAmountNet$Outbound | undefined;
  amountVat?: GetSettlementCostAmountVat$Outbound | undefined;
  amountGross?: GetSettlementCostAmountGross$Outbound | undefined;
};

/** @internal */
export const GetSettlementCost$outboundSchema: z.ZodType<
  GetSettlementCost$Outbound,
  z.ZodTypeDef,
  GetSettlementCost
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetSettlementCostMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  rate: z.lazy(() => GetSettlementRate$outboundSchema).optional(),
  amountNet: z.lazy(() => GetSettlementCostAmountNet$outboundSchema).optional(),
  amountVat: z.lazy(() => GetSettlementCostAmountVat$outboundSchema).optional(),
  amountGross: z.lazy(() => GetSettlementCostAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCost$ {
  /** @deprecated use `GetSettlementCost$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCost$inboundSchema;
  /** @deprecated use `GetSettlementCost$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCost$outboundSchema;
  /** @deprecated use `GetSettlementCost$Outbound` instead. */
  export type Outbound = GetSettlementCost$Outbound;
}

export function getSettlementCostToJSON(
  getSettlementCost: GetSettlementCost,
): string {
  return JSON.stringify(
    GetSettlementCost$outboundSchema.parse(getSettlementCost),
  );
}

export function getSettlementCostFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCost' from JSON`,
  );
}

/** @internal */
export const GetSettlementRevenueMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetSettlementRevenueMethod
> = z.nativeEnum(GetSettlementRevenueMethod);

/** @internal */
export const GetSettlementRevenueMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetSettlementRevenueMethod
> = GetSettlementRevenueMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRevenueMethod$ {
  /** @deprecated use `GetSettlementRevenueMethod$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRevenueMethod$inboundSchema;
  /** @deprecated use `GetSettlementRevenueMethod$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRevenueMethod$outboundSchema;
}

/** @internal */
export const GetSettlementRevenueAmountNet$inboundSchema: z.ZodType<
  GetSettlementRevenueAmountNet,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementRevenueAmountNet$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementRevenueAmountNet$outboundSchema: z.ZodType<
  GetSettlementRevenueAmountNet$Outbound,
  z.ZodTypeDef,
  GetSettlementRevenueAmountNet
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRevenueAmountNet$ {
  /** @deprecated use `GetSettlementRevenueAmountNet$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRevenueAmountNet$inboundSchema;
  /** @deprecated use `GetSettlementRevenueAmountNet$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRevenueAmountNet$outboundSchema;
  /** @deprecated use `GetSettlementRevenueAmountNet$Outbound` instead. */
  export type Outbound = GetSettlementRevenueAmountNet$Outbound;
}

export function getSettlementRevenueAmountNetToJSON(
  getSettlementRevenueAmountNet: GetSettlementRevenueAmountNet,
): string {
  return JSON.stringify(
    GetSettlementRevenueAmountNet$outboundSchema.parse(
      getSettlementRevenueAmountNet,
    ),
  );
}

export function getSettlementRevenueAmountNetFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRevenueAmountNet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRevenueAmountNet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRevenueAmountNet' from JSON`,
  );
}

/** @internal */
export const GetSettlementRevenueAmountVat$inboundSchema: z.ZodType<
  GetSettlementRevenueAmountVat,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementRevenueAmountVat$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementRevenueAmountVat$outboundSchema: z.ZodType<
  GetSettlementRevenueAmountVat$Outbound,
  z.ZodTypeDef,
  GetSettlementRevenueAmountVat
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRevenueAmountVat$ {
  /** @deprecated use `GetSettlementRevenueAmountVat$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRevenueAmountVat$inboundSchema;
  /** @deprecated use `GetSettlementRevenueAmountVat$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRevenueAmountVat$outboundSchema;
  /** @deprecated use `GetSettlementRevenueAmountVat$Outbound` instead. */
  export type Outbound = GetSettlementRevenueAmountVat$Outbound;
}

export function getSettlementRevenueAmountVatToJSON(
  getSettlementRevenueAmountVat: GetSettlementRevenueAmountVat,
): string {
  return JSON.stringify(
    GetSettlementRevenueAmountVat$outboundSchema.parse(
      getSettlementRevenueAmountVat,
    ),
  );
}

export function getSettlementRevenueAmountVatFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRevenueAmountVat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRevenueAmountVat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRevenueAmountVat' from JSON`,
  );
}

/** @internal */
export const GetSettlementRevenueAmountGross$inboundSchema: z.ZodType<
  GetSettlementRevenueAmountGross,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetSettlementRevenueAmountGross$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetSettlementRevenueAmountGross$outboundSchema: z.ZodType<
  GetSettlementRevenueAmountGross$Outbound,
  z.ZodTypeDef,
  GetSettlementRevenueAmountGross
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRevenueAmountGross$ {
  /** @deprecated use `GetSettlementRevenueAmountGross$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRevenueAmountGross$inboundSchema;
  /** @deprecated use `GetSettlementRevenueAmountGross$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRevenueAmountGross$outboundSchema;
  /** @deprecated use `GetSettlementRevenueAmountGross$Outbound` instead. */
  export type Outbound = GetSettlementRevenueAmountGross$Outbound;
}

export function getSettlementRevenueAmountGrossToJSON(
  getSettlementRevenueAmountGross: GetSettlementRevenueAmountGross,
): string {
  return JSON.stringify(
    GetSettlementRevenueAmountGross$outboundSchema.parse(
      getSettlementRevenueAmountGross,
    ),
  );
}

export function getSettlementRevenueAmountGrossFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRevenueAmountGross, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRevenueAmountGross$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRevenueAmountGross' from JSON`,
  );
}

/** @internal */
export const GetSettlementRevenue$inboundSchema: z.ZodType<
  GetSettlementRevenue,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetSettlementRevenueMethod$inboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => GetSettlementRevenueAmountNet$inboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetSettlementRevenueAmountVat$inboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetSettlementRevenueAmountGross$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSettlementRevenue$Outbound = {
  description?: string | undefined;
  method?: string | null | undefined;
  count?: number | undefined;
  amountNet?: GetSettlementRevenueAmountNet$Outbound | undefined;
  amountVat?: GetSettlementRevenueAmountVat$Outbound | undefined;
  amountGross?: GetSettlementRevenueAmountGross$Outbound | undefined;
};

/** @internal */
export const GetSettlementRevenue$outboundSchema: z.ZodType<
  GetSettlementRevenue$Outbound,
  z.ZodTypeDef,
  GetSettlementRevenue
> = z.object({
  description: z.string().optional(),
  method: z.nullable(GetSettlementRevenueMethod$outboundSchema).optional(),
  count: z.number().int().optional(),
  amountNet: z.lazy(() => GetSettlementRevenueAmountNet$outboundSchema)
    .optional(),
  amountVat: z.lazy(() => GetSettlementRevenueAmountVat$outboundSchema)
    .optional(),
  amountGross: z.lazy(() => GetSettlementRevenueAmountGross$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRevenue$ {
  /** @deprecated use `GetSettlementRevenue$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRevenue$inboundSchema;
  /** @deprecated use `GetSettlementRevenue$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRevenue$outboundSchema;
  /** @deprecated use `GetSettlementRevenue$Outbound` instead. */
  export type Outbound = GetSettlementRevenue$Outbound;
}

export function getSettlementRevenueToJSON(
  getSettlementRevenue: GetSettlementRevenue,
): string {
  return JSON.stringify(
    GetSettlementRevenue$outboundSchema.parse(getSettlementRevenue),
  );
}

export function getSettlementRevenueFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRevenue' from JSON`,
  );
}

/** @internal */
export const GetSettlementLessThanMonthGreaterThan$inboundSchema: z.ZodType<
  GetSettlementLessThanMonthGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  costs: z.array(z.lazy(() => GetSettlementCost$inboundSchema)).optional(),
  revenue: z.array(z.lazy(() => GetSettlementRevenue$inboundSchema)).optional(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceReference: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetSettlementLessThanMonthGreaterThan$Outbound = {
  costs?: Array<GetSettlementCost$Outbound> | undefined;
  revenue?: Array<GetSettlementRevenue$Outbound> | undefined;
  invoiceId?: string | null | undefined;
  invoiceReference?: string | null | undefined;
};

/** @internal */
export const GetSettlementLessThanMonthGreaterThan$outboundSchema: z.ZodType<
  GetSettlementLessThanMonthGreaterThan$Outbound,
  z.ZodTypeDef,
  GetSettlementLessThanMonthGreaterThan
> = z.object({
  costs: z.array(z.lazy(() => GetSettlementCost$outboundSchema)).optional(),
  revenue: z.array(z.lazy(() => GetSettlementRevenue$outboundSchema))
    .optional(),
  invoiceId: z.nullable(z.string()).optional(),
  invoiceReference: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementLessThanMonthGreaterThan$ {
  /** @deprecated use `GetSettlementLessThanMonthGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementLessThanMonthGreaterThan$inboundSchema;
  /** @deprecated use `GetSettlementLessThanMonthGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementLessThanMonthGreaterThan$outboundSchema;
  /** @deprecated use `GetSettlementLessThanMonthGreaterThan$Outbound` instead. */
  export type Outbound = GetSettlementLessThanMonthGreaterThan$Outbound;
}

export function getSettlementLessThanMonthGreaterThanToJSON(
  getSettlementLessThanMonthGreaterThan: GetSettlementLessThanMonthGreaterThan,
): string {
  return JSON.stringify(
    GetSettlementLessThanMonthGreaterThan$outboundSchema.parse(
      getSettlementLessThanMonthGreaterThan,
    ),
  );
}

export function getSettlementLessThanMonthGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementLessThanMonthGreaterThan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementLessThanMonthGreaterThan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementLessThanMonthGreaterThan' from JSON`,
  );
}

/** @internal */
export const GetSettlementLessThanYearGreaterThan$inboundSchema: z.ZodType<
  GetSettlementLessThanYearGreaterThan,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<month>": z.lazy(() => GetSettlementLessThanMonthGreaterThan$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "<month>": "lessThanMonthGreaterThan",
  });
});

/** @internal */
export type GetSettlementLessThanYearGreaterThan$Outbound = {
  "<month>"?: GetSettlementLessThanMonthGreaterThan$Outbound | undefined;
};

/** @internal */
export const GetSettlementLessThanYearGreaterThan$outboundSchema: z.ZodType<
  GetSettlementLessThanYearGreaterThan$Outbound,
  z.ZodTypeDef,
  GetSettlementLessThanYearGreaterThan
> = z.object({
  lessThanMonthGreaterThan: z.lazy(() =>
    GetSettlementLessThanMonthGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanMonthGreaterThan: "<month>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementLessThanYearGreaterThan$ {
  /** @deprecated use `GetSettlementLessThanYearGreaterThan$inboundSchema` instead. */
  export const inboundSchema =
    GetSettlementLessThanYearGreaterThan$inboundSchema;
  /** @deprecated use `GetSettlementLessThanYearGreaterThan$outboundSchema` instead. */
  export const outboundSchema =
    GetSettlementLessThanYearGreaterThan$outboundSchema;
  /** @deprecated use `GetSettlementLessThanYearGreaterThan$Outbound` instead. */
  export type Outbound = GetSettlementLessThanYearGreaterThan$Outbound;
}

export function getSettlementLessThanYearGreaterThanToJSON(
  getSettlementLessThanYearGreaterThan: GetSettlementLessThanYearGreaterThan,
): string {
  return JSON.stringify(
    GetSettlementLessThanYearGreaterThan$outboundSchema.parse(
      getSettlementLessThanYearGreaterThan,
    ),
  );
}

export function getSettlementLessThanYearGreaterThanFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementLessThanYearGreaterThan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetSettlementLessThanYearGreaterThan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementLessThanYearGreaterThan' from JSON`,
  );
}

/** @internal */
export const GetSettlementPeriods$inboundSchema: z.ZodType<
  GetSettlementPeriods,
  z.ZodTypeDef,
  unknown
> = z.object({
  "<year>": z.lazy(() => GetSettlementLessThanYearGreaterThan$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "<year>": "lessThanYearGreaterThan",
  });
});

/** @internal */
export type GetSettlementPeriods$Outbound = {
  "<year>"?: GetSettlementLessThanYearGreaterThan$Outbound | undefined;
};

/** @internal */
export const GetSettlementPeriods$outboundSchema: z.ZodType<
  GetSettlementPeriods$Outbound,
  z.ZodTypeDef,
  GetSettlementPeriods
> = z.object({
  lessThanYearGreaterThan: z.lazy(() =>
    GetSettlementLessThanYearGreaterThan$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    lessThanYearGreaterThan: "<year>",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPeriods$ {
  /** @deprecated use `GetSettlementPeriods$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPeriods$inboundSchema;
  /** @deprecated use `GetSettlementPeriods$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPeriods$outboundSchema;
  /** @deprecated use `GetSettlementPeriods$Outbound` instead. */
  export type Outbound = GetSettlementPeriods$Outbound;
}

export function getSettlementPeriodsToJSON(
  getSettlementPeriods: GetSettlementPeriods,
): string {
  return JSON.stringify(
    GetSettlementPeriods$outboundSchema.parse(getSettlementPeriods),
  );
}

export function getSettlementPeriodsFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPeriods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPeriods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPeriods' from JSON`,
  );
}

/** @internal */
export const GetSettlementSelf$inboundSchema: z.ZodType<
  GetSettlementSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementSelf$outboundSchema: z.ZodType<
  GetSettlementSelf$Outbound,
  z.ZodTypeDef,
  GetSettlementSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementSelf$ {
  /** @deprecated use `GetSettlementSelf$inboundSchema` instead. */
  export const inboundSchema = GetSettlementSelf$inboundSchema;
  /** @deprecated use `GetSettlementSelf$outboundSchema` instead. */
  export const outboundSchema = GetSettlementSelf$outboundSchema;
  /** @deprecated use `GetSettlementSelf$Outbound` instead. */
  export type Outbound = GetSettlementSelf$Outbound;
}

export function getSettlementSelfToJSON(
  getSettlementSelf: GetSettlementSelf,
): string {
  return JSON.stringify(
    GetSettlementSelf$outboundSchema.parse(getSettlementSelf),
  );
}

export function getSettlementSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementSelf' from JSON`,
  );
}

/** @internal */
export const GetSettlementPayments$inboundSchema: z.ZodType<
  GetSettlementPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementPayments$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementPayments$outboundSchema: z.ZodType<
  GetSettlementPayments$Outbound,
  z.ZodTypeDef,
  GetSettlementPayments
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementPayments$ {
  /** @deprecated use `GetSettlementPayments$inboundSchema` instead. */
  export const inboundSchema = GetSettlementPayments$inboundSchema;
  /** @deprecated use `GetSettlementPayments$outboundSchema` instead. */
  export const outboundSchema = GetSettlementPayments$outboundSchema;
  /** @deprecated use `GetSettlementPayments$Outbound` instead. */
  export type Outbound = GetSettlementPayments$Outbound;
}

export function getSettlementPaymentsToJSON(
  getSettlementPayments: GetSettlementPayments,
): string {
  return JSON.stringify(
    GetSettlementPayments$outboundSchema.parse(getSettlementPayments),
  );
}

export function getSettlementPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementPayments' from JSON`,
  );
}

/** @internal */
export const GetSettlementCaptures$inboundSchema: z.ZodType<
  GetSettlementCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementCaptures$outboundSchema: z.ZodType<
  GetSettlementCaptures$Outbound,
  z.ZodTypeDef,
  GetSettlementCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementCaptures$ {
  /** @deprecated use `GetSettlementCaptures$inboundSchema` instead. */
  export const inboundSchema = GetSettlementCaptures$inboundSchema;
  /** @deprecated use `GetSettlementCaptures$outboundSchema` instead. */
  export const outboundSchema = GetSettlementCaptures$outboundSchema;
  /** @deprecated use `GetSettlementCaptures$Outbound` instead. */
  export type Outbound = GetSettlementCaptures$Outbound;
}

export function getSettlementCapturesToJSON(
  getSettlementCaptures: GetSettlementCaptures,
): string {
  return JSON.stringify(
    GetSettlementCaptures$outboundSchema.parse(getSettlementCaptures),
  );
}

export function getSettlementCapturesFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementCaptures' from JSON`,
  );
}

/** @internal */
export const GetSettlementRefunds$inboundSchema: z.ZodType<
  GetSettlementRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementRefunds$outboundSchema: z.ZodType<
  GetSettlementRefunds$Outbound,
  z.ZodTypeDef,
  GetSettlementRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRefunds$ {
  /** @deprecated use `GetSettlementRefunds$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRefunds$inboundSchema;
  /** @deprecated use `GetSettlementRefunds$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRefunds$outboundSchema;
  /** @deprecated use `GetSettlementRefunds$Outbound` instead. */
  export type Outbound = GetSettlementRefunds$Outbound;
}

export function getSettlementRefundsToJSON(
  getSettlementRefunds: GetSettlementRefunds,
): string {
  return JSON.stringify(
    GetSettlementRefunds$outboundSchema.parse(getSettlementRefunds),
  );
}

export function getSettlementRefundsFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRefunds' from JSON`,
  );
}

/** @internal */
export const GetSettlementChargebacks$inboundSchema: z.ZodType<
  GetSettlementChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementChargebacks$outboundSchema: z.ZodType<
  GetSettlementChargebacks$Outbound,
  z.ZodTypeDef,
  GetSettlementChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementChargebacks$ {
  /** @deprecated use `GetSettlementChargebacks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementChargebacks$inboundSchema;
  /** @deprecated use `GetSettlementChargebacks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementChargebacks$outboundSchema;
  /** @deprecated use `GetSettlementChargebacks$Outbound` instead. */
  export type Outbound = GetSettlementChargebacks$Outbound;
}

export function getSettlementChargebacksToJSON(
  getSettlementChargebacks: GetSettlementChargebacks,
): string {
  return JSON.stringify(
    GetSettlementChargebacks$outboundSchema.parse(getSettlementChargebacks),
  );
}

export function getSettlementChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementChargebacks' from JSON`,
  );
}

/** @internal */
export const GetSettlementInvoice$inboundSchema: z.ZodType<
  GetSettlementInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetSettlementInvoice$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetSettlementInvoice$outboundSchema: z.ZodType<
  GetSettlementInvoice$Outbound,
  z.ZodTypeDef,
  GetSettlementInvoice
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementInvoice$ {
  /** @deprecated use `GetSettlementInvoice$inboundSchema` instead. */
  export const inboundSchema = GetSettlementInvoice$inboundSchema;
  /** @deprecated use `GetSettlementInvoice$outboundSchema` instead. */
  export const outboundSchema = GetSettlementInvoice$outboundSchema;
  /** @deprecated use `GetSettlementInvoice$Outbound` instead. */
  export type Outbound = GetSettlementInvoice$Outbound;
}

export function getSettlementInvoiceToJSON(
  getSettlementInvoice: GetSettlementInvoice,
): string {
  return JSON.stringify(
    GetSettlementInvoice$outboundSchema.parse(getSettlementInvoice),
  );
}

export function getSettlementInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementInvoice' from JSON`,
  );
}

/** @internal */
export const GetSettlementDocumentation$inboundSchema: z.ZodType<
  GetSettlementDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetSettlementDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetSettlementDocumentation$outboundSchema: z.ZodType<
  GetSettlementDocumentation$Outbound,
  z.ZodTypeDef,
  GetSettlementDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementDocumentation$ {
  /** @deprecated use `GetSettlementDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetSettlementDocumentation$inboundSchema;
  /** @deprecated use `GetSettlementDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetSettlementDocumentation$outboundSchema;
  /** @deprecated use `GetSettlementDocumentation$Outbound` instead. */
  export type Outbound = GetSettlementDocumentation$Outbound;
}

export function getSettlementDocumentationToJSON(
  getSettlementDocumentation: GetSettlementDocumentation,
): string {
  return JSON.stringify(
    GetSettlementDocumentation$outboundSchema.parse(getSettlementDocumentation),
  );
}

export function getSettlementDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementDocumentation' from JSON`,
  );
}

/** @internal */
export const GetSettlementLinks$inboundSchema: z.ZodType<
  GetSettlementLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetSettlementSelf$inboundSchema).optional(),
  payments: z.lazy(() => GetSettlementPayments$inboundSchema).optional(),
  captures: z.lazy(() => GetSettlementCaptures$inboundSchema).optional(),
  refunds: z.lazy(() => GetSettlementRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => GetSettlementChargebacks$inboundSchema).optional(),
  invoice: z.nullable(z.lazy(() => GetSettlementInvoice$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetSettlementLinks$Outbound = {
  self?: GetSettlementSelf$Outbound | undefined;
  payments?: GetSettlementPayments$Outbound | undefined;
  captures?: GetSettlementCaptures$Outbound | undefined;
  refunds?: GetSettlementRefunds$Outbound | undefined;
  chargebacks?: GetSettlementChargebacks$Outbound | undefined;
  invoice?: GetSettlementInvoice$Outbound | null | undefined;
  documentation?: GetSettlementDocumentation$Outbound | undefined;
};

/** @internal */
export const GetSettlementLinks$outboundSchema: z.ZodType<
  GetSettlementLinks$Outbound,
  z.ZodTypeDef,
  GetSettlementLinks
> = z.object({
  self: z.lazy(() => GetSettlementSelf$outboundSchema).optional(),
  payments: z.lazy(() => GetSettlementPayments$outboundSchema).optional(),
  captures: z.lazy(() => GetSettlementCaptures$outboundSchema).optional(),
  refunds: z.lazy(() => GetSettlementRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => GetSettlementChargebacks$outboundSchema).optional(),
  invoice: z.nullable(z.lazy(() => GetSettlementInvoice$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetSettlementDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementLinks$ {
  /** @deprecated use `GetSettlementLinks$inboundSchema` instead. */
  export const inboundSchema = GetSettlementLinks$inboundSchema;
  /** @deprecated use `GetSettlementLinks$outboundSchema` instead. */
  export const outboundSchema = GetSettlementLinks$outboundSchema;
  /** @deprecated use `GetSettlementLinks$Outbound` instead. */
  export type Outbound = GetSettlementLinks$Outbound;
}

export function getSettlementLinksToJSON(
  getSettlementLinks: GetSettlementLinks,
): string {
  return JSON.stringify(
    GetSettlementLinks$outboundSchema.parse(getSettlementLinks),
  );
}

export function getSettlementLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementLinks' from JSON`,
  );
}

/** @internal */
export const GetSettlementResponse$inboundSchema: z.ZodType<
  GetSettlementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("settlement"),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetSettlementStatus$inboundSchema.optional(),
  amount: z.lazy(() => GetSettlementAmount$inboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => GetSettlementPeriods$inboundSchema).optional(),
  _links: z.lazy(() => GetSettlementLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetSettlementResponse$Outbound = {
  resource: string;
  id?: string | undefined;
  createdAt?: string | undefined;
  reference?: string | null | undefined;
  settledAt?: string | null | undefined;
  status?: string | undefined;
  amount?: GetSettlementAmount$Outbound | undefined;
  balanceId?: string | undefined;
  invoiceId?: string | null | undefined;
  periods?: GetSettlementPeriods$Outbound | undefined;
  _links?: GetSettlementLinks$Outbound | undefined;
};

/** @internal */
export const GetSettlementResponse$outboundSchema: z.ZodType<
  GetSettlementResponse$Outbound,
  z.ZodTypeDef,
  GetSettlementResponse
> = z.object({
  resource: z.string().default("settlement"),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  settledAt: z.nullable(z.string()).optional(),
  status: GetSettlementStatus$outboundSchema.optional(),
  amount: z.lazy(() => GetSettlementAmount$outboundSchema).optional(),
  balanceId: z.string().optional(),
  invoiceId: z.nullable(z.string()).optional(),
  periods: z.lazy(() => GetSettlementPeriods$outboundSchema).optional(),
  links: z.lazy(() => GetSettlementLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementResponse$ {
  /** @deprecated use `GetSettlementResponse$inboundSchema` instead. */
  export const inboundSchema = GetSettlementResponse$inboundSchema;
  /** @deprecated use `GetSettlementResponse$outboundSchema` instead. */
  export const outboundSchema = GetSettlementResponse$outboundSchema;
  /** @deprecated use `GetSettlementResponse$Outbound` instead. */
  export type Outbound = GetSettlementResponse$Outbound;
}

export function getSettlementResponseToJSON(
  getSettlementResponse: GetSettlementResponse,
): string {
  return JSON.stringify(
    GetSettlementResponse$outboundSchema.parse(getSettlementResponse),
  );
}

export function getSettlementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementResponse' from JSON`,
  );
}
