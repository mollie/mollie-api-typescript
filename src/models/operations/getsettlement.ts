/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSettlementRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
};

/** @internal */
export const GetSettlementRequest$inboundSchema: z.ZodType<
  GetSettlementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetSettlementRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetSettlementRequest$outboundSchema: z.ZodType<
  GetSettlementRequest$Outbound,
  z.ZodTypeDef,
  GetSettlementRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSettlementRequest$ {
  /** @deprecated use `GetSettlementRequest$inboundSchema` instead. */
  export const inboundSchema = GetSettlementRequest$inboundSchema;
  /** @deprecated use `GetSettlementRequest$outboundSchema` instead. */
  export const outboundSchema = GetSettlementRequest$outboundSchema;
  /** @deprecated use `GetSettlementRequest$Outbound` instead. */
  export type Outbound = GetSettlementRequest$Outbound;
}

export function getSettlementRequestToJSON(
  getSettlementRequest: GetSettlementRequest,
): string {
  return JSON.stringify(
    GetSettlementRequest$outboundSchema.parse(getSettlementRequest),
  );
}

export function getSettlementRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSettlementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSettlementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSettlementRequest' from JSON`,
  );
}
