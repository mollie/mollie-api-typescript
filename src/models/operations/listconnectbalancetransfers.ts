/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListConnectBalanceTransfersRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.ListSort | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListConnectBalanceTransfersEmbedded = {
  /**
   * A list of Connect balance transfers.
   */
  connectBalanceTransfers: Array<models.EntityBalanceTransferResponse>;
};

/**
 * A list of Connect balance transfers. For a complete reference of the Connect balance transfer
 *
 * @remarks
 * object, refer to the [Get balance transfer endpoint](get-balance-transfer) documentation.
 */
export type ListConnectBalanceTransfersResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListConnectBalanceTransfersEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListConnectBalanceTransfersRequest$inboundSchema: z.ZodType<
  ListConnectBalanceTransfersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListConnectBalanceTransfersRequest$Outbound = {
  from?: string | null | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListConnectBalanceTransfersRequest$outboundSchema: z.ZodType<
  ListConnectBalanceTransfersRequest$Outbound,
  z.ZodTypeDef,
  ListConnectBalanceTransfersRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectBalanceTransfersRequest$ {
  /** @deprecated use `ListConnectBalanceTransfersRequest$inboundSchema` instead. */
  export const inboundSchema = ListConnectBalanceTransfersRequest$inboundSchema;
  /** @deprecated use `ListConnectBalanceTransfersRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListConnectBalanceTransfersRequest$outboundSchema;
  /** @deprecated use `ListConnectBalanceTransfersRequest$Outbound` instead. */
  export type Outbound = ListConnectBalanceTransfersRequest$Outbound;
}

export function listConnectBalanceTransfersRequestToJSON(
  listConnectBalanceTransfersRequest: ListConnectBalanceTransfersRequest,
): string {
  return JSON.stringify(
    ListConnectBalanceTransfersRequest$outboundSchema.parse(
      listConnectBalanceTransfersRequest,
    ),
  );
}

export function listConnectBalanceTransfersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectBalanceTransfersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListConnectBalanceTransfersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectBalanceTransfersRequest' from JSON`,
  );
}

/** @internal */
export const ListConnectBalanceTransfersEmbedded$inboundSchema: z.ZodType<
  ListConnectBalanceTransfersEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  connect_balance_transfers: z.array(
    models.EntityBalanceTransferResponse$inboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    "connect_balance_transfers": "connectBalanceTransfers",
  });
});

/** @internal */
export type ListConnectBalanceTransfersEmbedded$Outbound = {
  connect_balance_transfers: Array<
    models.EntityBalanceTransferResponse$Outbound
  >;
};

/** @internal */
export const ListConnectBalanceTransfersEmbedded$outboundSchema: z.ZodType<
  ListConnectBalanceTransfersEmbedded$Outbound,
  z.ZodTypeDef,
  ListConnectBalanceTransfersEmbedded
> = z.object({
  connectBalanceTransfers: z.array(
    models.EntityBalanceTransferResponse$outboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    connectBalanceTransfers: "connect_balance_transfers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectBalanceTransfersEmbedded$ {
  /** @deprecated use `ListConnectBalanceTransfersEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    ListConnectBalanceTransfersEmbedded$inboundSchema;
  /** @deprecated use `ListConnectBalanceTransfersEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    ListConnectBalanceTransfersEmbedded$outboundSchema;
  /** @deprecated use `ListConnectBalanceTransfersEmbedded$Outbound` instead. */
  export type Outbound = ListConnectBalanceTransfersEmbedded$Outbound;
}

export function listConnectBalanceTransfersEmbeddedToJSON(
  listConnectBalanceTransfersEmbedded: ListConnectBalanceTransfersEmbedded,
): string {
  return JSON.stringify(
    ListConnectBalanceTransfersEmbedded$outboundSchema.parse(
      listConnectBalanceTransfersEmbedded,
    ),
  );
}

export function listConnectBalanceTransfersEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectBalanceTransfersEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListConnectBalanceTransfersEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectBalanceTransfersEmbedded' from JSON`,
  );
}

/** @internal */
export const ListConnectBalanceTransfersResponse$inboundSchema: z.ZodType<
  ListConnectBalanceTransfersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListConnectBalanceTransfersEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListConnectBalanceTransfersResponse$Outbound = {
  count: number;
  _embedded: ListConnectBalanceTransfersEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListConnectBalanceTransfersResponse$outboundSchema: z.ZodType<
  ListConnectBalanceTransfersResponse$Outbound,
  z.ZodTypeDef,
  ListConnectBalanceTransfersResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListConnectBalanceTransfersEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectBalanceTransfersResponse$ {
  /** @deprecated use `ListConnectBalanceTransfersResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListConnectBalanceTransfersResponse$inboundSchema;
  /** @deprecated use `ListConnectBalanceTransfersResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListConnectBalanceTransfersResponse$outboundSchema;
  /** @deprecated use `ListConnectBalanceTransfersResponse$Outbound` instead. */
  export type Outbound = ListConnectBalanceTransfersResponse$Outbound;
}

export function listConnectBalanceTransfersResponseToJSON(
  listConnectBalanceTransfersResponse: ListConnectBalanceTransfersResponse,
): string {
  return JSON.stringify(
    ListConnectBalanceTransfersResponse$outboundSchema.parse(
      listConnectBalanceTransfersResponse,
    ),
  );
}

export function listConnectBalanceTransfersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectBalanceTransfersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListConnectBalanceTransfersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectBalanceTransfersResponse' from JSON`,
  );
}
