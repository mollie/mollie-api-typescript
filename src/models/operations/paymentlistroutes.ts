/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PaymentListRoutesRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type PaymentListRoutesEmbedded = {
  /**
   * An array of route objects.
   */
  routes?: Array<models.RouteGetResponse> | undefined;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type PaymentListRoutesLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: models.Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: models.Url | undefined;
};

/**
 * A list of route objects.
 */
export type PaymentListRoutesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: PaymentListRoutesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: PaymentListRoutesLinks | undefined;
};

/** @internal */
export const PaymentListRoutesRequest$inboundSchema: z.ZodType<
  PaymentListRoutesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type PaymentListRoutesRequest$Outbound = {
  paymentId: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const PaymentListRoutesRequest$outboundSchema: z.ZodType<
  PaymentListRoutesRequest$Outbound,
  z.ZodTypeDef,
  PaymentListRoutesRequest
> = z.object({
  paymentId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentListRoutesRequest$ {
  /** @deprecated use `PaymentListRoutesRequest$inboundSchema` instead. */
  export const inboundSchema = PaymentListRoutesRequest$inboundSchema;
  /** @deprecated use `PaymentListRoutesRequest$outboundSchema` instead. */
  export const outboundSchema = PaymentListRoutesRequest$outboundSchema;
  /** @deprecated use `PaymentListRoutesRequest$Outbound` instead. */
  export type Outbound = PaymentListRoutesRequest$Outbound;
}

export function paymentListRoutesRequestToJSON(
  paymentListRoutesRequest: PaymentListRoutesRequest,
): string {
  return JSON.stringify(
    PaymentListRoutesRequest$outboundSchema.parse(paymentListRoutesRequest),
  );
}

export function paymentListRoutesRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaymentListRoutesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentListRoutesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentListRoutesRequest' from JSON`,
  );
}

/** @internal */
export const PaymentListRoutesEmbedded$inboundSchema: z.ZodType<
  PaymentListRoutesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  routes: z.array(models.RouteGetResponse$inboundSchema).optional(),
});

/** @internal */
export type PaymentListRoutesEmbedded$Outbound = {
  routes?: Array<models.RouteGetResponse$Outbound> | undefined;
};

/** @internal */
export const PaymentListRoutesEmbedded$outboundSchema: z.ZodType<
  PaymentListRoutesEmbedded$Outbound,
  z.ZodTypeDef,
  PaymentListRoutesEmbedded
> = z.object({
  routes: z.array(models.RouteGetResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentListRoutesEmbedded$ {
  /** @deprecated use `PaymentListRoutesEmbedded$inboundSchema` instead. */
  export const inboundSchema = PaymentListRoutesEmbedded$inboundSchema;
  /** @deprecated use `PaymentListRoutesEmbedded$outboundSchema` instead. */
  export const outboundSchema = PaymentListRoutesEmbedded$outboundSchema;
  /** @deprecated use `PaymentListRoutesEmbedded$Outbound` instead. */
  export type Outbound = PaymentListRoutesEmbedded$Outbound;
}

export function paymentListRoutesEmbeddedToJSON(
  paymentListRoutesEmbedded: PaymentListRoutesEmbedded,
): string {
  return JSON.stringify(
    PaymentListRoutesEmbedded$outboundSchema.parse(paymentListRoutesEmbedded),
  );
}

export function paymentListRoutesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<PaymentListRoutesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentListRoutesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentListRoutesEmbedded' from JSON`,
  );
}

/** @internal */
export const PaymentListRoutesLinks$inboundSchema: z.ZodType<
  PaymentListRoutesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema.optional(),
  documentation: models.Url$inboundSchema.optional(),
});

/** @internal */
export type PaymentListRoutesLinks$Outbound = {
  self?: models.Url$Outbound | undefined;
  documentation?: models.Url$Outbound | undefined;
};

/** @internal */
export const PaymentListRoutesLinks$outboundSchema: z.ZodType<
  PaymentListRoutesLinks$Outbound,
  z.ZodTypeDef,
  PaymentListRoutesLinks
> = z.object({
  self: models.Url$outboundSchema.optional(),
  documentation: models.Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentListRoutesLinks$ {
  /** @deprecated use `PaymentListRoutesLinks$inboundSchema` instead. */
  export const inboundSchema = PaymentListRoutesLinks$inboundSchema;
  /** @deprecated use `PaymentListRoutesLinks$outboundSchema` instead. */
  export const outboundSchema = PaymentListRoutesLinks$outboundSchema;
  /** @deprecated use `PaymentListRoutesLinks$Outbound` instead. */
  export type Outbound = PaymentListRoutesLinks$Outbound;
}

export function paymentListRoutesLinksToJSON(
  paymentListRoutesLinks: PaymentListRoutesLinks,
): string {
  return JSON.stringify(
    PaymentListRoutesLinks$outboundSchema.parse(paymentListRoutesLinks),
  );
}

export function paymentListRoutesLinksFromJSON(
  jsonString: string,
): SafeParseResult<PaymentListRoutesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentListRoutesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentListRoutesLinks' from JSON`,
  );
}

/** @internal */
export const PaymentListRoutesResponse$inboundSchema: z.ZodType<
  PaymentListRoutesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => PaymentListRoutesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => PaymentListRoutesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type PaymentListRoutesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: PaymentListRoutesEmbedded$Outbound | undefined;
  _links?: PaymentListRoutesLinks$Outbound | undefined;
};

/** @internal */
export const PaymentListRoutesResponse$outboundSchema: z.ZodType<
  PaymentListRoutesResponse$Outbound,
  z.ZodTypeDef,
  PaymentListRoutesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => PaymentListRoutesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => PaymentListRoutesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentListRoutesResponse$ {
  /** @deprecated use `PaymentListRoutesResponse$inboundSchema` instead. */
  export const inboundSchema = PaymentListRoutesResponse$inboundSchema;
  /** @deprecated use `PaymentListRoutesResponse$outboundSchema` instead. */
  export const outboundSchema = PaymentListRoutesResponse$outboundSchema;
  /** @deprecated use `PaymentListRoutesResponse$Outbound` instead. */
  export type Outbound = PaymentListRoutesResponse$Outbound;
}

export function paymentListRoutesResponseToJSON(
  paymentListRoutesResponse: PaymentListRoutesResponse,
): string {
  return JSON.stringify(
    PaymentListRoutesResponse$outboundSchema.parse(paymentListRoutesResponse),
  );
}

export function paymentListRoutesResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaymentListRoutesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentListRoutesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentListRoutesResponse' from JSON`,
  );
}
