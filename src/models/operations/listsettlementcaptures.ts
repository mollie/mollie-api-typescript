/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows you to embed additional resources via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export const ListSettlementCapturesEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows you to embed additional resources via the
 *
 * @remarks
 * `embed` query string parameter.
 */
export type ListSettlementCapturesEmbed = ClosedEnum<
  typeof ListSettlementCapturesEmbed
>;

export type ListSettlementCapturesRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to embed additional resources via the
   *
   * @remarks
   * `embed` query string parameter.
   */
  embed?: ListSettlementCapturesEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementCapturesNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementCapturesNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementCapturesNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListSettlementCapturesBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListSettlementCapturesBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListSettlementCapturesBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const ListSettlementCapturesMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type ListSettlementCapturesMode = ClosedEnum<
  typeof ListSettlementCapturesMode
>;

/**
 * The amount captured. If no amount is provided, the full authorized amount is captured.
 */
export type ListSettlementCapturesAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the
 *
 * @remarks
 * currency your account is settled in.
 *
 * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
 * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
 * instead.
 */
export type ListSettlementCapturesSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The capture's status.
 */
export const ListSettlementCapturesStatus = {
  Pending: "pending",
  Succeeded: "succeeded",
  Failed: "failed",
} as const;
/**
 * The capture's status.
 */
export type ListSettlementCapturesStatus = ClosedEnum<
  typeof ListSettlementCapturesStatus
>;

export type ListSettlementCapturesMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListSettlementCapturesMetadataUnion =
  | ListSettlementCapturesMetadata
  | string
  | Array<string>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementCapturesCaptureSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this capture belongs to.
 */
export type ListSettlementCapturesPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
 *
 * @remarks
 * not yet settled.
 */
export type ListSettlementCapturesSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
 *
 * @remarks
 * it isn't associated with a shipment.
 */
export type ListSettlementCapturesShipment = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementCapturesCaptureDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListSettlementCapturesCaptureLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListSettlementCapturesCaptureSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this capture belongs to.
   */
  payment: ListSettlementCapturesPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
   *
   * @remarks
   * not yet settled.
   */
  settlement?: ListSettlementCapturesSettlement | null | undefined;
  /**
   * The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
   *
   * @remarks
   * it isn't associated with a shipment.
   */
  shipment?: ListSettlementCapturesShipment | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListSettlementCapturesCaptureDocumentation;
};

export type ListSettlementCapturesCapture = {
  /**
   * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: ListSettlementCapturesMode;
  /**
   * The description of the capture.
   */
  description?: string | undefined;
  /**
   * The amount captured. If no amount is provided, the full authorized amount is captured.
   */
  amount: ListSettlementCapturesAmount | null;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the
   *
   * @remarks
   * currency your account is settled in.
   *
   * Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
   * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
   * instead.
   */
  settlementAmount?: ListSettlementCapturesSettlementAmount | null | undefined;
  /**
   * The capture's status.
   */
  status: ListSettlementCapturesStatus;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | ListSettlementCapturesMetadata
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId: string;
  /**
   * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
   *
   * @remarks
   * `shp_gNapNy9qQTUFZYnCrCF7J`.
   */
  shipmentId?: string | null | undefined;
  /**
   * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
   *
   * @remarks
   * is omitted if the capture is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListSettlementCapturesCaptureLinks;
};

export type ListSettlementCapturesEmbedded = {
  /**
   * An array of capture objects.
   */
  captures?: Array<ListSettlementCapturesCapture> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListSettlementCapturesSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListSettlementCapturesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListSettlementCapturesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListSettlementCapturesDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListSettlementCapturesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListSettlementCapturesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListSettlementCapturesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListSettlementCapturesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListSettlementCapturesDocumentation | undefined;
};

/**
 * A list of capture objects.
 */
export type ListSettlementCapturesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListSettlementCapturesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListSettlementCapturesLinks | undefined;
};

/** @internal */
export const ListSettlementCapturesEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementCapturesEmbed
> = z.nativeEnum(ListSettlementCapturesEmbed);

/** @internal */
export const ListSettlementCapturesEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementCapturesEmbed
> = ListSettlementCapturesEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesEmbed$ {
  /** @deprecated use `ListSettlementCapturesEmbed$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesEmbed$inboundSchema;
  /** @deprecated use `ListSettlementCapturesEmbed$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesEmbed$outboundSchema;
}

/** @internal */
export const ListSettlementCapturesRequest$inboundSchema: z.ZodType<
  ListSettlementCapturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListSettlementCapturesEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListSettlementCapturesRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit: number | null;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListSettlementCapturesRequest$outboundSchema: z.ZodType<
  ListSettlementCapturesRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListSettlementCapturesEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesRequest$ {
  /** @deprecated use `ListSettlementCapturesRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesRequest$inboundSchema;
  /** @deprecated use `ListSettlementCapturesRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesRequest$outboundSchema;
  /** @deprecated use `ListSettlementCapturesRequest$Outbound` instead. */
  export type Outbound = ListSettlementCapturesRequest$Outbound;
}

export function listSettlementCapturesRequestToJSON(
  listSettlementCapturesRequest: ListSettlementCapturesRequest,
): string {
  return JSON.stringify(
    ListSettlementCapturesRequest$outboundSchema.parse(
      listSettlementCapturesRequest,
    ),
  );
}

export function listSettlementCapturesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesNotFoundDocumentation$inboundSchema:
  z.ZodType<
    ListSettlementCapturesNotFoundDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListSettlementCapturesNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementCapturesNotFoundDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementCapturesNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementCapturesNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesNotFoundDocumentation$ {
  /** @deprecated use `ListSettlementCapturesNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementCapturesNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementCapturesNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementCapturesNotFoundDocumentation$Outbound;
}

export function listSettlementCapturesNotFoundDocumentationToJSON(
  listSettlementCapturesNotFoundDocumentation:
    ListSettlementCapturesNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListSettlementCapturesNotFoundDocumentation$outboundSchema.parse(
      listSettlementCapturesNotFoundDocumentation,
    ),
  );
}

export function listSettlementCapturesNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementCapturesNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementCapturesNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesNotFoundLinks$inboundSchema: z.ZodType<
  ListSettlementCapturesNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementCapturesNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementCapturesNotFoundLinks$Outbound = {
  documentation: ListSettlementCapturesNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListSettlementCapturesNotFoundLinks$outboundSchema: z.ZodType<
  ListSettlementCapturesNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementCapturesNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesNotFoundLinks$ {
  /** @deprecated use `ListSettlementCapturesNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesNotFoundLinks$inboundSchema;
  /** @deprecated use `ListSettlementCapturesNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesNotFoundLinks$outboundSchema;
  /** @deprecated use `ListSettlementCapturesNotFoundLinks$Outbound` instead. */
  export type Outbound = ListSettlementCapturesNotFoundLinks$Outbound;
}

export function listSettlementCapturesNotFoundLinksToJSON(
  listSettlementCapturesNotFoundLinks: ListSettlementCapturesNotFoundLinks,
): string {
  return JSON.stringify(
    ListSettlementCapturesNotFoundLinks$outboundSchema.parse(
      listSettlementCapturesNotFoundLinks,
    ),
  );
}

export function listSettlementCapturesNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesBadRequestDocumentation$inboundSchema:
  z.ZodType<
    ListSettlementCapturesBadRequestDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ListSettlementCapturesBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementCapturesBadRequestDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementCapturesBadRequestDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementCapturesBadRequestDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesBadRequestDocumentation$ {
  /** @deprecated use `ListSettlementCapturesBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementCapturesBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementCapturesBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementCapturesBadRequestDocumentation$Outbound;
}

export function listSettlementCapturesBadRequestDocumentationToJSON(
  listSettlementCapturesBadRequestDocumentation:
    ListSettlementCapturesBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListSettlementCapturesBadRequestDocumentation$outboundSchema.parse(
      listSettlementCapturesBadRequestDocumentation,
    ),
  );
}

export function listSettlementCapturesBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementCapturesBadRequestDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesBadRequestDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementCapturesBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesBadRequestLinks$inboundSchema: z.ZodType<
  ListSettlementCapturesBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementCapturesBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementCapturesBadRequestLinks$Outbound = {
  documentation: ListSettlementCapturesBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListSettlementCapturesBadRequestLinks$outboundSchema: z.ZodType<
  ListSettlementCapturesBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListSettlementCapturesBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesBadRequestLinks$ {
  /** @deprecated use `ListSettlementCapturesBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesBadRequestLinks$inboundSchema;
  /** @deprecated use `ListSettlementCapturesBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesBadRequestLinks$outboundSchema;
  /** @deprecated use `ListSettlementCapturesBadRequestLinks$Outbound` instead. */
  export type Outbound = ListSettlementCapturesBadRequestLinks$Outbound;
}

export function listSettlementCapturesBadRequestLinksToJSON(
  listSettlementCapturesBadRequestLinks: ListSettlementCapturesBadRequestLinks,
): string {
  return JSON.stringify(
    ListSettlementCapturesBadRequestLinks$outboundSchema.parse(
      listSettlementCapturesBadRequestLinks,
    ),
  );
}

export function listSettlementCapturesBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesMode$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementCapturesMode
> = z.nativeEnum(ListSettlementCapturesMode);

/** @internal */
export const ListSettlementCapturesMode$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementCapturesMode
> = ListSettlementCapturesMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesMode$ {
  /** @deprecated use `ListSettlementCapturesMode$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesMode$inboundSchema;
  /** @deprecated use `ListSettlementCapturesMode$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesMode$outboundSchema;
}

/** @internal */
export const ListSettlementCapturesAmount$inboundSchema: z.ZodType<
  ListSettlementCapturesAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementCapturesAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementCapturesAmount$outboundSchema: z.ZodType<
  ListSettlementCapturesAmount$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesAmount$ {
  /** @deprecated use `ListSettlementCapturesAmount$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesAmount$inboundSchema;
  /** @deprecated use `ListSettlementCapturesAmount$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesAmount$outboundSchema;
  /** @deprecated use `ListSettlementCapturesAmount$Outbound` instead. */
  export type Outbound = ListSettlementCapturesAmount$Outbound;
}

export function listSettlementCapturesAmountToJSON(
  listSettlementCapturesAmount: ListSettlementCapturesAmount,
): string {
  return JSON.stringify(
    ListSettlementCapturesAmount$outboundSchema.parse(
      listSettlementCapturesAmount,
    ),
  );
}

export function listSettlementCapturesAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesSettlementAmount$inboundSchema: z.ZodType<
  ListSettlementCapturesSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListSettlementCapturesSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListSettlementCapturesSettlementAmount$outboundSchema: z.ZodType<
  ListSettlementCapturesSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesSettlementAmount$ {
  /** @deprecated use `ListSettlementCapturesSettlementAmount$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesSettlementAmount$inboundSchema;
  /** @deprecated use `ListSettlementCapturesSettlementAmount$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesSettlementAmount$outboundSchema;
  /** @deprecated use `ListSettlementCapturesSettlementAmount$Outbound` instead. */
  export type Outbound = ListSettlementCapturesSettlementAmount$Outbound;
}

export function listSettlementCapturesSettlementAmountToJSON(
  listSettlementCapturesSettlementAmount:
    ListSettlementCapturesSettlementAmount,
): string {
  return JSON.stringify(
    ListSettlementCapturesSettlementAmount$outboundSchema.parse(
      listSettlementCapturesSettlementAmount,
    ),
  );
}

export function listSettlementCapturesSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListSettlementCapturesStatus
> = z.nativeEnum(ListSettlementCapturesStatus);

/** @internal */
export const ListSettlementCapturesStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListSettlementCapturesStatus
> = ListSettlementCapturesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesStatus$ {
  /** @deprecated use `ListSettlementCapturesStatus$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesStatus$inboundSchema;
  /** @deprecated use `ListSettlementCapturesStatus$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesStatus$outboundSchema;
}

/** @internal */
export const ListSettlementCapturesMetadata$inboundSchema: z.ZodType<
  ListSettlementCapturesMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListSettlementCapturesMetadata$Outbound = {};

/** @internal */
export const ListSettlementCapturesMetadata$outboundSchema: z.ZodType<
  ListSettlementCapturesMetadata$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesMetadata$ {
  /** @deprecated use `ListSettlementCapturesMetadata$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesMetadata$inboundSchema;
  /** @deprecated use `ListSettlementCapturesMetadata$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesMetadata$outboundSchema;
  /** @deprecated use `ListSettlementCapturesMetadata$Outbound` instead. */
  export type Outbound = ListSettlementCapturesMetadata$Outbound;
}

export function listSettlementCapturesMetadataToJSON(
  listSettlementCapturesMetadata: ListSettlementCapturesMetadata,
): string {
  return JSON.stringify(
    ListSettlementCapturesMetadata$outboundSchema.parse(
      listSettlementCapturesMetadata,
    ),
  );
}

export function listSettlementCapturesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesMetadata' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesMetadataUnion$inboundSchema: z.ZodType<
  ListSettlementCapturesMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListSettlementCapturesMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type ListSettlementCapturesMetadataUnion$Outbound =
  | ListSettlementCapturesMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const ListSettlementCapturesMetadataUnion$outboundSchema: z.ZodType<
  ListSettlementCapturesMetadataUnion$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesMetadataUnion
> = z.union([
  z.lazy(() => ListSettlementCapturesMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesMetadataUnion$ {
  /** @deprecated use `ListSettlementCapturesMetadataUnion$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesMetadataUnion$inboundSchema;
  /** @deprecated use `ListSettlementCapturesMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesMetadataUnion$outboundSchema;
  /** @deprecated use `ListSettlementCapturesMetadataUnion$Outbound` instead. */
  export type Outbound = ListSettlementCapturesMetadataUnion$Outbound;
}

export function listSettlementCapturesMetadataUnionToJSON(
  listSettlementCapturesMetadataUnion: ListSettlementCapturesMetadataUnion,
): string {
  return JSON.stringify(
    ListSettlementCapturesMetadataUnion$outboundSchema.parse(
      listSettlementCapturesMetadataUnion,
    ),
  );
}

export function listSettlementCapturesMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesMetadataUnion' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesCaptureSelf$inboundSchema: z.ZodType<
  ListSettlementCapturesCaptureSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementCapturesCaptureSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementCapturesCaptureSelf$outboundSchema: z.ZodType<
  ListSettlementCapturesCaptureSelf$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesCaptureSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesCaptureSelf$ {
  /** @deprecated use `ListSettlementCapturesCaptureSelf$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesCaptureSelf$inboundSchema;
  /** @deprecated use `ListSettlementCapturesCaptureSelf$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesCaptureSelf$outboundSchema;
  /** @deprecated use `ListSettlementCapturesCaptureSelf$Outbound` instead. */
  export type Outbound = ListSettlementCapturesCaptureSelf$Outbound;
}

export function listSettlementCapturesCaptureSelfToJSON(
  listSettlementCapturesCaptureSelf: ListSettlementCapturesCaptureSelf,
): string {
  return JSON.stringify(
    ListSettlementCapturesCaptureSelf$outboundSchema.parse(
      listSettlementCapturesCaptureSelf,
    ),
  );
}

export function listSettlementCapturesCaptureSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesCaptureSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesCaptureSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesCaptureSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesPayment$inboundSchema: z.ZodType<
  ListSettlementCapturesPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementCapturesPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementCapturesPayment$outboundSchema: z.ZodType<
  ListSettlementCapturesPayment$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesPayment$ {
  /** @deprecated use `ListSettlementCapturesPayment$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesPayment$inboundSchema;
  /** @deprecated use `ListSettlementCapturesPayment$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesPayment$outboundSchema;
  /** @deprecated use `ListSettlementCapturesPayment$Outbound` instead. */
  export type Outbound = ListSettlementCapturesPayment$Outbound;
}

export function listSettlementCapturesPaymentToJSON(
  listSettlementCapturesPayment: ListSettlementCapturesPayment,
): string {
  return JSON.stringify(
    ListSettlementCapturesPayment$outboundSchema.parse(
      listSettlementCapturesPayment,
    ),
  );
}

export function listSettlementCapturesPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesPayment' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesSettlement$inboundSchema: z.ZodType<
  ListSettlementCapturesSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementCapturesSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementCapturesSettlement$outboundSchema: z.ZodType<
  ListSettlementCapturesSettlement$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesSettlement$ {
  /** @deprecated use `ListSettlementCapturesSettlement$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesSettlement$inboundSchema;
  /** @deprecated use `ListSettlementCapturesSettlement$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesSettlement$outboundSchema;
  /** @deprecated use `ListSettlementCapturesSettlement$Outbound` instead. */
  export type Outbound = ListSettlementCapturesSettlement$Outbound;
}

export function listSettlementCapturesSettlementToJSON(
  listSettlementCapturesSettlement: ListSettlementCapturesSettlement,
): string {
  return JSON.stringify(
    ListSettlementCapturesSettlement$outboundSchema.parse(
      listSettlementCapturesSettlement,
    ),
  );
}

export function listSettlementCapturesSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesSettlement' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesShipment$inboundSchema: z.ZodType<
  ListSettlementCapturesShipment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementCapturesShipment$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementCapturesShipment$outboundSchema: z.ZodType<
  ListSettlementCapturesShipment$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesShipment
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesShipment$ {
  /** @deprecated use `ListSettlementCapturesShipment$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesShipment$inboundSchema;
  /** @deprecated use `ListSettlementCapturesShipment$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesShipment$outboundSchema;
  /** @deprecated use `ListSettlementCapturesShipment$Outbound` instead. */
  export type Outbound = ListSettlementCapturesShipment$Outbound;
}

export function listSettlementCapturesShipmentToJSON(
  listSettlementCapturesShipment: ListSettlementCapturesShipment,
): string {
  return JSON.stringify(
    ListSettlementCapturesShipment$outboundSchema.parse(
      listSettlementCapturesShipment,
    ),
  );
}

export function listSettlementCapturesShipmentFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesShipment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesShipment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesShipment' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesCaptureDocumentation$inboundSchema:
  z.ZodType<ListSettlementCapturesCaptureDocumentation, z.ZodTypeDef, unknown> =
    z.object({
      href: z.string(),
      type: z.string(),
    });

/** @internal */
export type ListSettlementCapturesCaptureDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementCapturesCaptureDocumentation$outboundSchema:
  z.ZodType<
    ListSettlementCapturesCaptureDocumentation$Outbound,
    z.ZodTypeDef,
    ListSettlementCapturesCaptureDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesCaptureDocumentation$ {
  /** @deprecated use `ListSettlementCapturesCaptureDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesCaptureDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementCapturesCaptureDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesCaptureDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementCapturesCaptureDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementCapturesCaptureDocumentation$Outbound;
}

export function listSettlementCapturesCaptureDocumentationToJSON(
  listSettlementCapturesCaptureDocumentation:
    ListSettlementCapturesCaptureDocumentation,
): string {
  return JSON.stringify(
    ListSettlementCapturesCaptureDocumentation$outboundSchema.parse(
      listSettlementCapturesCaptureDocumentation,
    ),
  );
}

export function listSettlementCapturesCaptureDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListSettlementCapturesCaptureDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesCaptureDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListSettlementCapturesCaptureDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesCaptureLinks$inboundSchema: z.ZodType<
  ListSettlementCapturesCaptureLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSettlementCapturesCaptureSelf$inboundSchema),
  payment: z.lazy(() => ListSettlementCapturesPayment$inboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListSettlementCapturesSettlement$inboundSchema),
  ).optional(),
  shipment: z.nullable(
    z.lazy(() => ListSettlementCapturesShipment$inboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListSettlementCapturesCaptureDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListSettlementCapturesCaptureLinks$Outbound = {
  self: ListSettlementCapturesCaptureSelf$Outbound;
  payment: ListSettlementCapturesPayment$Outbound;
  settlement?: ListSettlementCapturesSettlement$Outbound | null | undefined;
  shipment?: ListSettlementCapturesShipment$Outbound | null | undefined;
  documentation: ListSettlementCapturesCaptureDocumentation$Outbound;
};

/** @internal */
export const ListSettlementCapturesCaptureLinks$outboundSchema: z.ZodType<
  ListSettlementCapturesCaptureLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesCaptureLinks
> = z.object({
  self: z.lazy(() => ListSettlementCapturesCaptureSelf$outboundSchema),
  payment: z.lazy(() => ListSettlementCapturesPayment$outboundSchema),
  settlement: z.nullable(
    z.lazy(() => ListSettlementCapturesSettlement$outboundSchema),
  ).optional(),
  shipment: z.nullable(
    z.lazy(() => ListSettlementCapturesShipment$outboundSchema),
  ).optional(),
  documentation: z.lazy(() =>
    ListSettlementCapturesCaptureDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesCaptureLinks$ {
  /** @deprecated use `ListSettlementCapturesCaptureLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesCaptureLinks$inboundSchema;
  /** @deprecated use `ListSettlementCapturesCaptureLinks$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesCaptureLinks$outboundSchema;
  /** @deprecated use `ListSettlementCapturesCaptureLinks$Outbound` instead. */
  export type Outbound = ListSettlementCapturesCaptureLinks$Outbound;
}

export function listSettlementCapturesCaptureLinksToJSON(
  listSettlementCapturesCaptureLinks: ListSettlementCapturesCaptureLinks,
): string {
  return JSON.stringify(
    ListSettlementCapturesCaptureLinks$outboundSchema.parse(
      listSettlementCapturesCaptureLinks,
    ),
  );
}

export function listSettlementCapturesCaptureLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesCaptureLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesCaptureLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesCaptureLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesCapture$inboundSchema: z.ZodType<
  ListSettlementCapturesCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: ListSettlementCapturesMode$inboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => ListSettlementCapturesAmount$inboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => ListSettlementCapturesSettlementAmount$inboundSchema),
  ).optional(),
  status: ListSettlementCapturesStatus$inboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListSettlementCapturesMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  _links: z.lazy(() => ListSettlementCapturesCaptureLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementCapturesCapture$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description?: string | undefined;
  amount: ListSettlementCapturesAmount$Outbound | null;
  settlementAmount?:
    | ListSettlementCapturesSettlementAmount$Outbound
    | null
    | undefined;
  status: string;
  metadata?:
    | ListSettlementCapturesMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId: string;
  shipmentId?: string | null | undefined;
  settlementId?: string | null | undefined;
  createdAt: string;
  _links: ListSettlementCapturesCaptureLinks$Outbound;
};

/** @internal */
export const ListSettlementCapturesCapture$outboundSchema: z.ZodType<
  ListSettlementCapturesCapture$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesCapture
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: ListSettlementCapturesMode$outboundSchema,
  description: z.string().optional(),
  amount: z.nullable(z.lazy(() => ListSettlementCapturesAmount$outboundSchema)),
  settlementAmount: z.nullable(
    z.lazy(() => ListSettlementCapturesSettlementAmount$outboundSchema),
  ).optional(),
  status: ListSettlementCapturesStatus$outboundSchema,
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListSettlementCapturesMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string(),
  shipmentId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  links: z.lazy(() => ListSettlementCapturesCaptureLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesCapture$ {
  /** @deprecated use `ListSettlementCapturesCapture$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesCapture$inboundSchema;
  /** @deprecated use `ListSettlementCapturesCapture$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesCapture$outboundSchema;
  /** @deprecated use `ListSettlementCapturesCapture$Outbound` instead. */
  export type Outbound = ListSettlementCapturesCapture$Outbound;
}

export function listSettlementCapturesCaptureToJSON(
  listSettlementCapturesCapture: ListSettlementCapturesCapture,
): string {
  return JSON.stringify(
    ListSettlementCapturesCapture$outboundSchema.parse(
      listSettlementCapturesCapture,
    ),
  );
}

export function listSettlementCapturesCaptureFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesCapture' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesEmbedded$inboundSchema: z.ZodType<
  ListSettlementCapturesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  captures: z.array(z.lazy(() => ListSettlementCapturesCapture$inboundSchema))
    .optional(),
});

/** @internal */
export type ListSettlementCapturesEmbedded$Outbound = {
  captures?: Array<ListSettlementCapturesCapture$Outbound> | undefined;
};

/** @internal */
export const ListSettlementCapturesEmbedded$outboundSchema: z.ZodType<
  ListSettlementCapturesEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesEmbedded
> = z.object({
  captures: z.array(z.lazy(() => ListSettlementCapturesCapture$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesEmbedded$ {
  /** @deprecated use `ListSettlementCapturesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementCapturesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementCapturesEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementCapturesEmbedded$Outbound;
}

export function listSettlementCapturesEmbeddedToJSON(
  listSettlementCapturesEmbedded: ListSettlementCapturesEmbedded,
): string {
  return JSON.stringify(
    ListSettlementCapturesEmbedded$outboundSchema.parse(
      listSettlementCapturesEmbedded,
    ),
  );
}

export function listSettlementCapturesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesSelf$inboundSchema: z.ZodType<
  ListSettlementCapturesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementCapturesSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementCapturesSelf$outboundSchema: z.ZodType<
  ListSettlementCapturesSelf$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesSelf$ {
  /** @deprecated use `ListSettlementCapturesSelf$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesSelf$inboundSchema;
  /** @deprecated use `ListSettlementCapturesSelf$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesSelf$outboundSchema;
  /** @deprecated use `ListSettlementCapturesSelf$Outbound` instead. */
  export type Outbound = ListSettlementCapturesSelf$Outbound;
}

export function listSettlementCapturesSelfToJSON(
  listSettlementCapturesSelf: ListSettlementCapturesSelf,
): string {
  return JSON.stringify(
    ListSettlementCapturesSelf$outboundSchema.parse(listSettlementCapturesSelf),
  );
}

export function listSettlementCapturesSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesSelf' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesPrevious$inboundSchema: z.ZodType<
  ListSettlementCapturesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementCapturesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementCapturesPrevious$outboundSchema: z.ZodType<
  ListSettlementCapturesPrevious$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesPrevious$ {
  /** @deprecated use `ListSettlementCapturesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesPrevious$inboundSchema;
  /** @deprecated use `ListSettlementCapturesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesPrevious$outboundSchema;
  /** @deprecated use `ListSettlementCapturesPrevious$Outbound` instead. */
  export type Outbound = ListSettlementCapturesPrevious$Outbound;
}

export function listSettlementCapturesPreviousToJSON(
  listSettlementCapturesPrevious: ListSettlementCapturesPrevious,
): string {
  return JSON.stringify(
    ListSettlementCapturesPrevious$outboundSchema.parse(
      listSettlementCapturesPrevious,
    ),
  );
}

export function listSettlementCapturesPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesPrevious' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesNext$inboundSchema: z.ZodType<
  ListSettlementCapturesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListSettlementCapturesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListSettlementCapturesNext$outboundSchema: z.ZodType<
  ListSettlementCapturesNext$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesNext$ {
  /** @deprecated use `ListSettlementCapturesNext$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesNext$inboundSchema;
  /** @deprecated use `ListSettlementCapturesNext$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesNext$outboundSchema;
  /** @deprecated use `ListSettlementCapturesNext$Outbound` instead. */
  export type Outbound = ListSettlementCapturesNext$Outbound;
}

export function listSettlementCapturesNextToJSON(
  listSettlementCapturesNext: ListSettlementCapturesNext,
): string {
  return JSON.stringify(
    ListSettlementCapturesNext$outboundSchema.parse(listSettlementCapturesNext),
  );
}

export function listSettlementCapturesNextFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesNext' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesDocumentation$inboundSchema: z.ZodType<
  ListSettlementCapturesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListSettlementCapturesDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListSettlementCapturesDocumentation$outboundSchema: z.ZodType<
  ListSettlementCapturesDocumentation$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesDocumentation$ {
  /** @deprecated use `ListSettlementCapturesDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListSettlementCapturesDocumentation$inboundSchema;
  /** @deprecated use `ListSettlementCapturesDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListSettlementCapturesDocumentation$outboundSchema;
  /** @deprecated use `ListSettlementCapturesDocumentation$Outbound` instead. */
  export type Outbound = ListSettlementCapturesDocumentation$Outbound;
}

export function listSettlementCapturesDocumentationToJSON(
  listSettlementCapturesDocumentation: ListSettlementCapturesDocumentation,
): string {
  return JSON.stringify(
    ListSettlementCapturesDocumentation$outboundSchema.parse(
      listSettlementCapturesDocumentation,
    ),
  );
}

export function listSettlementCapturesDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListSettlementCapturesDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesDocumentation' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesLinks$inboundSchema: z.ZodType<
  ListSettlementCapturesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListSettlementCapturesSelf$inboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListSettlementCapturesPrevious$inboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListSettlementCapturesNext$inboundSchema))
    .optional(),
  documentation: z.lazy(() => ListSettlementCapturesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListSettlementCapturesLinks$Outbound = {
  self?: ListSettlementCapturesSelf$Outbound | undefined;
  previous?: ListSettlementCapturesPrevious$Outbound | null | undefined;
  next?: ListSettlementCapturesNext$Outbound | null | undefined;
  documentation?: ListSettlementCapturesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListSettlementCapturesLinks$outboundSchema: z.ZodType<
  ListSettlementCapturesLinks$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesLinks
> = z.object({
  self: z.lazy(() => ListSettlementCapturesSelf$outboundSchema).optional(),
  previous: z.nullable(
    z.lazy(() => ListSettlementCapturesPrevious$outboundSchema),
  ).optional(),
  next: z.nullable(z.lazy(() => ListSettlementCapturesNext$outboundSchema))
    .optional(),
  documentation: z.lazy(() =>
    ListSettlementCapturesDocumentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesLinks$ {
  /** @deprecated use `ListSettlementCapturesLinks$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesLinks$inboundSchema;
  /** @deprecated use `ListSettlementCapturesLinks$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesLinks$outboundSchema;
  /** @deprecated use `ListSettlementCapturesLinks$Outbound` instead. */
  export type Outbound = ListSettlementCapturesLinks$Outbound;
}

export function listSettlementCapturesLinksToJSON(
  listSettlementCapturesLinks: ListSettlementCapturesLinks,
): string {
  return JSON.stringify(
    ListSettlementCapturesLinks$outboundSchema.parse(
      listSettlementCapturesLinks,
    ),
  );
}

export function listSettlementCapturesLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesLinks' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesResponse$inboundSchema: z.ZodType<
  ListSettlementCapturesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListSettlementCapturesEmbedded$inboundSchema)
    .optional(),
  _links: z.lazy(() => ListSettlementCapturesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementCapturesResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListSettlementCapturesEmbedded$Outbound | undefined;
  _links?: ListSettlementCapturesLinks$Outbound | undefined;
};

/** @internal */
export const ListSettlementCapturesResponse$outboundSchema: z.ZodType<
  ListSettlementCapturesResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListSettlementCapturesEmbedded$outboundSchema)
    .optional(),
  links: z.lazy(() => ListSettlementCapturesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesResponse$ {
  /** @deprecated use `ListSettlementCapturesResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesResponse$inboundSchema;
  /** @deprecated use `ListSettlementCapturesResponse$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesResponse$outboundSchema;
  /** @deprecated use `ListSettlementCapturesResponse$Outbound` instead. */
  export type Outbound = ListSettlementCapturesResponse$Outbound;
}

export function listSettlementCapturesResponseToJSON(
  listSettlementCapturesResponse: ListSettlementCapturesResponse,
): string {
  return JSON.stringify(
    ListSettlementCapturesResponse$outboundSchema.parse(
      listSettlementCapturesResponse,
    ),
  );
}

export function listSettlementCapturesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesResponse' from JSON`,
  );
}
