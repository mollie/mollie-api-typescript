/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListSettlementCapturesRequest = {
  /**
   * Provide the ID of the related settlement.
   */
  settlementId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type ListSettlementCapturesEmbedded = {
  /**
   * An array of capture objects.
   */
  captures: Array<models.CaptureResponse>;
};

/**
 * A list of capture objects.
 */
export type ListSettlementCapturesResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListSettlementCapturesEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListSettlementCapturesRequest$inboundSchema: z.ZodType<
  ListSettlementCapturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListSettlementCapturesRequest$Outbound = {
  settlementId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListSettlementCapturesRequest$outboundSchema: z.ZodType<
  ListSettlementCapturesRequest$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesRequest
> = z.object({
  settlementId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesRequest$ {
  /** @deprecated use `ListSettlementCapturesRequest$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesRequest$inboundSchema;
  /** @deprecated use `ListSettlementCapturesRequest$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesRequest$outboundSchema;
  /** @deprecated use `ListSettlementCapturesRequest$Outbound` instead. */
  export type Outbound = ListSettlementCapturesRequest$Outbound;
}

export function listSettlementCapturesRequestToJSON(
  listSettlementCapturesRequest: ListSettlementCapturesRequest,
): string {
  return JSON.stringify(
    ListSettlementCapturesRequest$outboundSchema.parse(
      listSettlementCapturesRequest,
    ),
  );
}

export function listSettlementCapturesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesRequest' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesEmbedded$inboundSchema: z.ZodType<
  ListSettlementCapturesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  captures: z.array(models.CaptureResponse$inboundSchema),
});

/** @internal */
export type ListSettlementCapturesEmbedded$Outbound = {
  captures: Array<models.CaptureResponse$Outbound>;
};

/** @internal */
export const ListSettlementCapturesEmbedded$outboundSchema: z.ZodType<
  ListSettlementCapturesEmbedded$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesEmbedded
> = z.object({
  captures: z.array(models.CaptureResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesEmbedded$ {
  /** @deprecated use `ListSettlementCapturesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesEmbedded$inboundSchema;
  /** @deprecated use `ListSettlementCapturesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesEmbedded$outboundSchema;
  /** @deprecated use `ListSettlementCapturesEmbedded$Outbound` instead. */
  export type Outbound = ListSettlementCapturesEmbedded$Outbound;
}

export function listSettlementCapturesEmbeddedToJSON(
  listSettlementCapturesEmbedded: ListSettlementCapturesEmbedded,
): string {
  return JSON.stringify(
    ListSettlementCapturesEmbedded$outboundSchema.parse(
      listSettlementCapturesEmbedded,
    ),
  );
}

export function listSettlementCapturesEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSettlementCapturesResponse$inboundSchema: z.ZodType<
  ListSettlementCapturesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListSettlementCapturesEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSettlementCapturesResponse$Outbound = {
  count: number;
  _embedded: ListSettlementCapturesEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListSettlementCapturesResponse$outboundSchema: z.ZodType<
  ListSettlementCapturesResponse$Outbound,
  z.ZodTypeDef,
  ListSettlementCapturesResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListSettlementCapturesEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSettlementCapturesResponse$ {
  /** @deprecated use `ListSettlementCapturesResponse$inboundSchema` instead. */
  export const inboundSchema = ListSettlementCapturesResponse$inboundSchema;
  /** @deprecated use `ListSettlementCapturesResponse$outboundSchema` instead. */
  export const outboundSchema = ListSettlementCapturesResponse$outboundSchema;
  /** @deprecated use `ListSettlementCapturesResponse$Outbound` instead. */
  export type Outbound = ListSettlementCapturesResponse$Outbound;
}

export function listSettlementCapturesResponseToJSON(
  listSettlementCapturesResponse: ListSettlementCapturesResponse,
): string {
  return JSON.stringify(
    ListSettlementCapturesResponse$outboundSchema.parse(
      listSettlementCapturesResponse,
    ),
  );
}

export function listSettlementCapturesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSettlementCapturesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSettlementCapturesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSettlementCapturesResponse' from JSON`,
  );
}
