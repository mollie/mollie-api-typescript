/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReleaseAuthorizationRequestBody = {
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
   * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
   * required.
   */
  profileId?: string | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type ReleaseAuthorizationRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  requestBody?: ReleaseAuthorizationRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ReleaseAuthorizationUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type ReleaseAuthorizationUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ReleaseAuthorizationUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ReleaseAuthorizationNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ReleaseAuthorizationNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ReleaseAuthorizationNotFoundDocumentation;
};

/** @internal */
export const ReleaseAuthorizationRequestBody$inboundSchema: z.ZodType<
  ReleaseAuthorizationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ReleaseAuthorizationRequestBody$Outbound = {
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ReleaseAuthorizationRequestBody$outboundSchema: z.ZodType<
  ReleaseAuthorizationRequestBody$Outbound,
  z.ZodTypeDef,
  ReleaseAuthorizationRequestBody
> = z.object({
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseAuthorizationRequestBody$ {
  /** @deprecated use `ReleaseAuthorizationRequestBody$inboundSchema` instead. */
  export const inboundSchema = ReleaseAuthorizationRequestBody$inboundSchema;
  /** @deprecated use `ReleaseAuthorizationRequestBody$outboundSchema` instead. */
  export const outboundSchema = ReleaseAuthorizationRequestBody$outboundSchema;
  /** @deprecated use `ReleaseAuthorizationRequestBody$Outbound` instead. */
  export type Outbound = ReleaseAuthorizationRequestBody$Outbound;
}

export function releaseAuthorizationRequestBodyToJSON(
  releaseAuthorizationRequestBody: ReleaseAuthorizationRequestBody,
): string {
  return JSON.stringify(
    ReleaseAuthorizationRequestBody$outboundSchema.parse(
      releaseAuthorizationRequestBody,
    ),
  );
}

export function releaseAuthorizationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseAuthorizationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseAuthorizationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseAuthorizationRequestBody' from JSON`,
  );
}

/** @internal */
export const ReleaseAuthorizationRequest$inboundSchema: z.ZodType<
  ReleaseAuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  RequestBody: z.lazy(() => ReleaseAuthorizationRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ReleaseAuthorizationRequest$Outbound = {
  paymentId: string;
  RequestBody?: ReleaseAuthorizationRequestBody$Outbound | undefined;
};

/** @internal */
export const ReleaseAuthorizationRequest$outboundSchema: z.ZodType<
  ReleaseAuthorizationRequest$Outbound,
  z.ZodTypeDef,
  ReleaseAuthorizationRequest
> = z.object({
  paymentId: z.string(),
  requestBody: z.lazy(() => ReleaseAuthorizationRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseAuthorizationRequest$ {
  /** @deprecated use `ReleaseAuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = ReleaseAuthorizationRequest$inboundSchema;
  /** @deprecated use `ReleaseAuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema = ReleaseAuthorizationRequest$outboundSchema;
  /** @deprecated use `ReleaseAuthorizationRequest$Outbound` instead. */
  export type Outbound = ReleaseAuthorizationRequest$Outbound;
}

export function releaseAuthorizationRequestToJSON(
  releaseAuthorizationRequest: ReleaseAuthorizationRequest,
): string {
  return JSON.stringify(
    ReleaseAuthorizationRequest$outboundSchema.parse(
      releaseAuthorizationRequest,
    ),
  );
}

export function releaseAuthorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseAuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseAuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseAuthorizationRequest' from JSON`,
  );
}

/** @internal */
export const ReleaseAuthorizationUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    ReleaseAuthorizationUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type ReleaseAuthorizationUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ReleaseAuthorizationUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    ReleaseAuthorizationUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    ReleaseAuthorizationUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseAuthorizationUnprocessableEntityDocumentation$ {
  /** @deprecated use `ReleaseAuthorizationUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ReleaseAuthorizationUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `ReleaseAuthorizationUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ReleaseAuthorizationUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `ReleaseAuthorizationUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    ReleaseAuthorizationUnprocessableEntityDocumentation$Outbound;
}

export function releaseAuthorizationUnprocessableEntityDocumentationToJSON(
  releaseAuthorizationUnprocessableEntityDocumentation:
    ReleaseAuthorizationUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    ReleaseAuthorizationUnprocessableEntityDocumentation$outboundSchema.parse(
      releaseAuthorizationUnprocessableEntityDocumentation,
    ),
  );
}

export function releaseAuthorizationUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ReleaseAuthorizationUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ReleaseAuthorizationUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ReleaseAuthorizationUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const ReleaseAuthorizationUnprocessableEntityLinks$inboundSchema:
  z.ZodType<
    ReleaseAuthorizationUnprocessableEntityLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    documentation: z.lazy(() =>
      ReleaseAuthorizationUnprocessableEntityDocumentation$inboundSchema
    ),
  });

/** @internal */
export type ReleaseAuthorizationUnprocessableEntityLinks$Outbound = {
  documentation: ReleaseAuthorizationUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const ReleaseAuthorizationUnprocessableEntityLinks$outboundSchema:
  z.ZodType<
    ReleaseAuthorizationUnprocessableEntityLinks$Outbound,
    z.ZodTypeDef,
    ReleaseAuthorizationUnprocessableEntityLinks
  > = z.object({
    documentation: z.lazy(() =>
      ReleaseAuthorizationUnprocessableEntityDocumentation$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseAuthorizationUnprocessableEntityLinks$ {
  /** @deprecated use `ReleaseAuthorizationUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    ReleaseAuthorizationUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `ReleaseAuthorizationUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    ReleaseAuthorizationUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `ReleaseAuthorizationUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = ReleaseAuthorizationUnprocessableEntityLinks$Outbound;
}

export function releaseAuthorizationUnprocessableEntityLinksToJSON(
  releaseAuthorizationUnprocessableEntityLinks:
    ReleaseAuthorizationUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    ReleaseAuthorizationUnprocessableEntityLinks$outboundSchema.parse(
      releaseAuthorizationUnprocessableEntityLinks,
    ),
  );
}

export function releaseAuthorizationUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  ReleaseAuthorizationUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ReleaseAuthorizationUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ReleaseAuthorizationUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const ReleaseAuthorizationNotFoundDocumentation$inboundSchema: z.ZodType<
  ReleaseAuthorizationNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ReleaseAuthorizationNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ReleaseAuthorizationNotFoundDocumentation$outboundSchema:
  z.ZodType<
    ReleaseAuthorizationNotFoundDocumentation$Outbound,
    z.ZodTypeDef,
    ReleaseAuthorizationNotFoundDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseAuthorizationNotFoundDocumentation$ {
  /** @deprecated use `ReleaseAuthorizationNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ReleaseAuthorizationNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ReleaseAuthorizationNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ReleaseAuthorizationNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ReleaseAuthorizationNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ReleaseAuthorizationNotFoundDocumentation$Outbound;
}

export function releaseAuthorizationNotFoundDocumentationToJSON(
  releaseAuthorizationNotFoundDocumentation:
    ReleaseAuthorizationNotFoundDocumentation,
): string {
  return JSON.stringify(
    ReleaseAuthorizationNotFoundDocumentation$outboundSchema.parse(
      releaseAuthorizationNotFoundDocumentation,
    ),
  );
}

export function releaseAuthorizationNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  ReleaseAuthorizationNotFoundDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ReleaseAuthorizationNotFoundDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ReleaseAuthorizationNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ReleaseAuthorizationNotFoundLinks$inboundSchema: z.ZodType<
  ReleaseAuthorizationNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ReleaseAuthorizationNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type ReleaseAuthorizationNotFoundLinks$Outbound = {
  documentation: ReleaseAuthorizationNotFoundDocumentation$Outbound;
};

/** @internal */
export const ReleaseAuthorizationNotFoundLinks$outboundSchema: z.ZodType<
  ReleaseAuthorizationNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ReleaseAuthorizationNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    ReleaseAuthorizationNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseAuthorizationNotFoundLinks$ {
  /** @deprecated use `ReleaseAuthorizationNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ReleaseAuthorizationNotFoundLinks$inboundSchema;
  /** @deprecated use `ReleaseAuthorizationNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema =
    ReleaseAuthorizationNotFoundLinks$outboundSchema;
  /** @deprecated use `ReleaseAuthorizationNotFoundLinks$Outbound` instead. */
  export type Outbound = ReleaseAuthorizationNotFoundLinks$Outbound;
}

export function releaseAuthorizationNotFoundLinksToJSON(
  releaseAuthorizationNotFoundLinks: ReleaseAuthorizationNotFoundLinks,
): string {
  return JSON.stringify(
    ReleaseAuthorizationNotFoundLinks$outboundSchema.parse(
      releaseAuthorizationNotFoundLinks,
    ),
  );
}

export function releaseAuthorizationNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseAuthorizationNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseAuthorizationNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseAuthorizationNotFoundLinks' from JSON`,
  );
}
