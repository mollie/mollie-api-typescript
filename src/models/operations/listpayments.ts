/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPaymentsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
   *
   * @remarks
   *
   * Possible values: `asc` `desc` (default: `desc`)
   */
  sort?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListPaymentsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListPaymentsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListPaymentsBadRequestDocumentation;
};

/**
 * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
 *
 * @remarks
 *
 * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
 *
 * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
 */
export type ListPaymentsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
 */
export type ListPaymentsAmountRefunded = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The remaining amount that can be refunded. Only available when refunds are available for this payment.
 */
export type ListPaymentsAmountRemaining = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already captured for this payment. Only available when this payment supports captures.
 */
export type ListPaymentsAmountCaptured = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
 */
export type ListPaymentsAmountChargedBack = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
 *
 * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
 */
export type ListPaymentsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type ListPaymentsUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
 */
export type ListPaymentsDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type ListPaymentsTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * @remarks
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type ListPaymentsVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export const ListPaymentsCategory = {
  Meal: "meal",
  Eco: "eco",
  Gift: "gift",
  SportCulture: "sport_culture",
} as const;
export type ListPaymentsCategory = ClosedEnum<typeof ListPaymentsCategory>;

/**
 * Total amount and currency of the recurring item.
 */
export type ListPaymentsRecurringAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
 */
export type ListPaymentsRecurring = {
  /**
   * A description of the recurring item. If not present, the main description of the item will be used.
   */
  description?: string | undefined;
  /**
   * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
   *
   * @remarks
   *
   * Possible values: `... months` `... weeks` `... days`
   */
  interval: string;
  /**
   * Total amount and currency of the recurring item.
   */
  amount?: ListPaymentsRecurringAmount | undefined;
  /**
   * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
   */
  times?: number | undefined;
  /**
   * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
   */
  startDate?: string | null | undefined;
};

export type ListPaymentsLine = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * The `tip` payment line type is not available when creating a payment.
   *
   * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
   */
  type?: string | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: ListPaymentsUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
   */
  discountAmount?: ListPaymentsDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: ListPaymentsTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * @remarks
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: ListPaymentsVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
   */
  categories?: Array<ListPaymentsCategory> | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
  /**
   * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
   */
  recurring?: ListPaymentsRecurring | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 *
 * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
export type ListPaymentsBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
 *
 * @remarks
 *
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 */
export type ListPaymentsShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  streetAndNumber?: string | undefined;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  postalCode?: string | undefined;
  /**
   * A valid e-mail address.
   *
   * @remarks
   *
   * If you provide the email address for a `banktransfer` payment, we will automatically send the instructions email upon payment creation. The language of the email will follow the locale parameter of the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  /**
   * A city name.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  city?: string | undefined;
  /**
   * The top-level administrative subdivision of the country. For example: Noord-Holland.
   */
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   * @remarks
   *
   * Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
   */
  country?: string | undefined;
};

export type ListPaymentsMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListPaymentsMetadataUnion =
  | ListPaymentsMetadata
  | string
  | Array<string>;

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
 */
export type ListPaymentsApplicationFeeAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
 *
 * @remarks
 *
 * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
 *
 * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
 */
export type ListPaymentsApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
   */
  amount?: ListPaymentsApplicationFeeAmount | undefined;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
   */
  description?: string | undefined;
};

/**
 * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
 */
export type ListPaymentsRoutingAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination of this portion of the payment.
 */
export type ListPaymentsDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   *
   * @remarks
   *
   * Possible values: `organization`
   */
  type: string;
  /**
   * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
   */
  organizationId: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListPaymentsRoutingSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that belong to this route.
 */
export type ListPaymentsRoutingPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListPaymentsRoutingLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListPaymentsRoutingSelf;
  /**
   * The API resource URL of the [payment](get-payment) that belong to this route.
   */
  payment: ListPaymentsRoutingPayment;
};

export type ListPaymentsRouting = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
   */
  amount: ListPaymentsRoutingAmount;
  /**
   * The destination of this portion of the payment.
   */
  destination: ListPaymentsDestination;
  /**
   * The date and time when the route was created. The date is given in ISO 8601 format.
   */
  createdAt: string;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
   *
   * @remarks
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListPaymentsRoutingLinks;
};

/**
 * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
 *
 * @remarks
 *
 * You can find more information about the possible values of this object on [this page](status-reasons).**
 */
export type ListPaymentsStatusReason = {
  /**
   * A machine-readable code that indicates the reason for the payment's status.
   */
  code: string;
  /**
   * A description of the status reason, localized according to the payment `locale`.
   */
  message: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListPaymentsPaymentSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type ListPaymentsCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
 */
export type ListPaymentsMobileAppCheckout = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
 *
 * @remarks
 *
 * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
 *
 * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
 */
export type ListPaymentsChangePaymentState = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the payment in the Mollie Dashboard.
 */
export type ListPaymentsDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
 */
export type ListPaymentsRefunds = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
 */
export type ListPaymentsChargebacks = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
 */
export type ListPaymentsCaptures = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
 */
export type ListPaymentsSettlement = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [customer](get-customer).
 */
export type ListPaymentsCustomer = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [mandate](get-mandate).
 */
export type ListPaymentsMandate = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [subscription](get-subscription).
 */
export type ListPaymentsSubscription = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
 */
export type ListPaymentsOrder = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
 */
export type ListPaymentsTerminal = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListPaymentsPaymentDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListPaymentsPaymentLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListPaymentsPaymentSelf;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  checkout?: ListPaymentsCheckout | undefined;
  /**
   * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
   */
  mobileAppCheckout?: ListPaymentsMobileAppCheckout | undefined;
  /**
   * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
   *
   * @remarks
   *
   * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
   *
   * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
   */
  changePaymentState?: ListPaymentsChangePaymentState | undefined;
  /**
   * Direct link to the payment in the Mollie Dashboard.
   */
  dashboard: ListPaymentsDashboard;
  /**
   * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
   */
  refunds?: ListPaymentsRefunds | undefined;
  /**
   * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
   */
  chargebacks?: ListPaymentsChargebacks | undefined;
  /**
   * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
   */
  captures?: ListPaymentsCaptures | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
   */
  settlement?: ListPaymentsSettlement | undefined;
  /**
   * The API resource URL of the [customer](get-customer).
   */
  customer?: ListPaymentsCustomer | undefined;
  /**
   * The API resource URL of the [mandate](get-mandate).
   */
  mandate?: ListPaymentsMandate | undefined;
  /**
   * The API resource URL of the [subscription](get-subscription).
   */
  subscription?: ListPaymentsSubscription | undefined;
  /**
   * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
   */
  order?: ListPaymentsOrder | undefined;
  /**
   * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
   */
  terminal?: ListPaymentsTerminal | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListPaymentsPaymentDocumentation | undefined;
};

export type ListPaymentsPaymentOutput = {
  /**
   * Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
   */
  id: string;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode: string;
  /**
   * The description of the payment. This will be shown to your customer on their card or bank statement when possible. We truncate the description automatically according to the limits of the used payment method. The description is also visible in any exports you generate.
   *
   * @remarks
   *
   * We recommend you use a unique identifier so that you can always link the payment to the order in your back office. This is particularly useful for bookkeeping.
   *
   * The maximum length of the description field differs per payment method, with the absolute maximum being 255 characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
   */
  description: string;
  /**
   * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
   *
   * @remarks
   *
   * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
   *
   * If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the tip amount.
   */
  amount: ListPaymentsAmount;
  /**
   * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
   */
  amountRefunded?: ListPaymentsAmountRefunded | undefined;
  /**
   * The remaining amount that can be refunded. Only available when refunds are available for this payment.
   */
  amountRemaining?: ListPaymentsAmountRemaining | undefined;
  /**
   * The total amount that is already captured for this payment. Only available when this payment supports captures.
   */
  amountCaptured?: ListPaymentsAmountCaptured | undefined;
  /**
   * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
   */
  amountChargedBack?: ListPaymentsAmountChargedBack | undefined;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
   *
   * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
   */
  settlementAmount?: ListPaymentsSettlementAmount | undefined;
  /**
   * The URL your customer will be redirected to after the payment process.
   *
   * @remarks
   *
   * It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the right page referencing the order when your customer returns.
   *
   * The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for Apple Pay payments with an `applePayPaymentToken`.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not provided, the customer will be redirected to the `redirectUrl` instead — see above.
   *
   * @remarks
   *
   * Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle payment cancellations.
   */
  cancelUrl?: string | null | undefined;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
   */
  webhookUrl?: string | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the payment.
   *
   * Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
   */
  lines?: Array<ListPaymentsLine> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   *
   * Required for payment method `in3`, `klarna`, `billie` and `riverty`.
   */
  billingAddress?: ListPaymentsBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
   *
   * @remarks
   *
   * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
   */
  shippingAddress?: ListPaymentsShippingAddress | undefined;
  /**
   * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897 locale, but our hosted payment pages currently only support the specified languages.
   *
   * @remarks
   *
   * For bank transfer payments specifically, the locale will determine the target bank account the customer has to transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the customer use a local bank account greatly increases the conversion and speed of payment.
   */
  locale?: string | null | undefined;
  /**
   * This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This field is omitted if the country code was not detected.
   */
  countryCode?: string | null | undefined;
  /**
   * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment method and your customer will skip the selection screen and is sent directly to the chosen payment method. The parameter enables you to fully integrate the payment method selection into your website.
   *
   * @remarks
   *
   * You can also specify the methods in an array. By doing so we will still show the payment method selection screen but will only show the methods specified in the array. For example, you can use this functionality to only show payment methods from a specific country to your customer `['bancontact', 'belfius']`.
   *
   * Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `mbway` `multibanco` `mybank` `payconiq` `paypal` `paysafecard` `pointofsale` `przelewy24` `riverty` `satispay` `swish` `trustly` `twint` `voucher`
   */
  method?: string | null | undefined;
  /**
   * For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT rates you have used for the order to ensure your customer's country matches the VAT country.
   *
   * @remarks
   *
   * Use this parameter to restrict the payment methods available to your customer to those from a single country.
   *
   * If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
   *
   * The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
   */
  restrictPaymentMethodsToCountry?: string | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: ListPaymentsMetadata | string | Array<string> | null | undefined;
  /**
   * Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/) and capture at a later time.
   *
   * @remarks
   *
   * This field needs to be set to `manual` for method `riverty`.
   *
   * Possible values: `automatic` `manual` (default: `automatic`)
   */
  captureMode?: string | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a later point either be 'captured' or canceled.
   *
   * By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For example `8 hours` or `2 days`.
   *
   * To schedule an automatic capture, the `captureMode` must be set to `automatic`.
   *
   * The maximum delay is 7 days (168 hours).
   *
   * Possible values: `... hours` `... days`
   */
  captureDelay?: string | null | undefined;
  /**
   * Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
   */
  captureBefore?: string | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * @remarks
   *
   * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
   *
   * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
   */
  applicationFee?: ListPaymentsApplicationFee | null | undefined;
  /**
   * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
   *
   * @remarks
   *
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * If you create payments on your own account that you want to split between yourself and one or more connected merchants, you can use this `routing` parameter to route the payment accordingly.
   *
   * The `routing` parameter should contain an array of objects, with each object describing the destination for a specific portion of the payment.
   *
   * It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total payment amount have been routed, the amount left will be routed to the current organization automatically.
   *
   * If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee` parameter.
   */
  routing?: Array<ListPaymentsRouting> | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * Indicate which part of a recurring sequence this payment is for.
   *
   * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place on their account in the future.
   *
   * If set to `recurring`, the customer's card is charged automatically.
   *
   * Defaults to `oneoff`, which is a regular non-recurring payment.
   *
   * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account are set up correctly for recurring payments.
   *
   * Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
   */
  sequenceType: string | null;
  /**
   * If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will be added to the response.
   */
  subscriptionId?: string | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of the customer's accounts should be credited.
   */
  mandateId?: string | null | undefined;
  /**
   * The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring payments, but can also be used on regular payments to enable single-click payments.
   *
   * @remarks
   *
   * If `sequenceType` is set to `recurring`, this field is required.
   */
  customerId?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and Organization tokens, the `profileId` is required.
   *
   * For more information, see [Authentication](authentication).
   */
  profileId: string;
  /**
   * The identifier referring to the [settlement](get-settlement) this payment was settled with.
   */
  settlementId?: string | null | undefined;
  /**
   * If the payment was created for an [order](get-order), the ID of that order will be part of the response.
   */
  orderId?: string | null | undefined;
  /**
   * The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which statuses occur at what point.
   *
   * @remarks
   *
   * Possible values: `open` `pending` `authorized` `paid` `canceled` `expired` `failed`
   */
  status: string;
  /**
   * This object offers details about the status of a payment. Currently it is only available for point-of-sale payments.
   *
   * @remarks
   *
   * You can find more information about the possible values of this object on [this page](status-reasons).**
   */
  statusReason?: ListPaymentsStatusReason | null | undefined;
  /**
   * Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
   */
  isCancelable?: boolean | null | undefined;
  /**
   * An object containing payment details collected during the payment process. For example, details may include the customer's card or bank details and a payment reference. For the full list of details, please refer to the [method-specific parameters](extra-payment-parameters) guide.
   */
  details?: { [k: string]: any } | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  /**
   * The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is not authorized (yet).
   */
  authorizedAt?: string | null | undefined;
  /**
   * The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not completed (yet).
   */
  paidAt?: string | null | undefined;
  /**
   * The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not canceled (yet).
   */
  canceledAt?: string | null | undefined;
  /**
   * The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no longer expire.
   */
  expiresAt?: string | null | undefined;
  /**
   * The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not expire (yet).
   */
  expiredAt?: string | null | undefined;
  /**
   * The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail (yet).
   */
  failedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: ListPaymentsPaymentLinks;
};

export type ListPaymentsEmbedded = {
  /**
   * An array of payment objects.
   */
  payments?: Array<ListPaymentsPaymentOutput> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListPaymentsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListPaymentsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListPaymentsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListPaymentsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListPaymentsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListPaymentsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListPaymentsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListPaymentsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListPaymentsDocumentation | undefined;
};

/**
 * A list of payment objects.
 */
export type ListPaymentsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListPaymentsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListPaymentsLinks | undefined;
};

/** @internal */
export const ListPaymentsRequest$inboundSchema: z.ZodType<
  ListPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListPaymentsRequest$Outbound = {
  from?: string | undefined;
  limit: number | null;
  sort?: string | null | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListPaymentsRequest$outboundSchema: z.ZodType<
  ListPaymentsRequest$Outbound,
  z.ZodTypeDef,
  ListPaymentsRequest
> = z.object({
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRequest$ {
  /** @deprecated use `ListPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRequest$inboundSchema;
  /** @deprecated use `ListPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRequest$outboundSchema;
  /** @deprecated use `ListPaymentsRequest$Outbound` instead. */
  export type Outbound = ListPaymentsRequest$Outbound;
}

export function listPaymentsRequestToJSON(
  listPaymentsRequest: ListPaymentsRequest,
): string {
  return JSON.stringify(
    ListPaymentsRequest$outboundSchema.parse(listPaymentsRequest),
  );
}

export function listPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const ListPaymentsBadRequestDocumentation$inboundSchema: z.ZodType<
  ListPaymentsBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsBadRequestDocumentation$outboundSchema: z.ZodType<
  ListPaymentsBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListPaymentsBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsBadRequestDocumentation$ {
  /** @deprecated use `ListPaymentsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    ListPaymentsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListPaymentsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListPaymentsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListPaymentsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListPaymentsBadRequestDocumentation$Outbound;
}

export function listPaymentsBadRequestDocumentationToJSON(
  listPaymentsBadRequestDocumentation: ListPaymentsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListPaymentsBadRequestDocumentation$outboundSchema.parse(
      listPaymentsBadRequestDocumentation,
    ),
  );
}

export function listPaymentsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListPaymentsBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListPaymentsBadRequestLinks$inboundSchema: z.ZodType<
  ListPaymentsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    ListPaymentsBadRequestDocumentation$inboundSchema
  ),
});

/** @internal */
export type ListPaymentsBadRequestLinks$Outbound = {
  documentation: ListPaymentsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListPaymentsBadRequestLinks$outboundSchema: z.ZodType<
  ListPaymentsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListPaymentsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListPaymentsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsBadRequestLinks$ {
  /** @deprecated use `ListPaymentsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListPaymentsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListPaymentsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListPaymentsBadRequestLinks$Outbound;
}

export function listPaymentsBadRequestLinksToJSON(
  listPaymentsBadRequestLinks: ListPaymentsBadRequestLinks,
): string {
  return JSON.stringify(
    ListPaymentsBadRequestLinks$outboundSchema.parse(
      listPaymentsBadRequestLinks,
    ),
  );
}

export function listPaymentsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListPaymentsAmount$inboundSchema: z.ZodType<
  ListPaymentsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsAmount$outboundSchema: z.ZodType<
  ListPaymentsAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsAmount$ {
  /** @deprecated use `ListPaymentsAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsAmount$inboundSchema;
  /** @deprecated use `ListPaymentsAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsAmount$outboundSchema;
  /** @deprecated use `ListPaymentsAmount$Outbound` instead. */
  export type Outbound = ListPaymentsAmount$Outbound;
}

export function listPaymentsAmountToJSON(
  listPaymentsAmount: ListPaymentsAmount,
): string {
  return JSON.stringify(
    ListPaymentsAmount$outboundSchema.parse(listPaymentsAmount),
  );
}

export function listPaymentsAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsAmountRefunded$inboundSchema: z.ZodType<
  ListPaymentsAmountRefunded,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsAmountRefunded$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsAmountRefunded$outboundSchema: z.ZodType<
  ListPaymentsAmountRefunded$Outbound,
  z.ZodTypeDef,
  ListPaymentsAmountRefunded
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsAmountRefunded$ {
  /** @deprecated use `ListPaymentsAmountRefunded$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsAmountRefunded$inboundSchema;
  /** @deprecated use `ListPaymentsAmountRefunded$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsAmountRefunded$outboundSchema;
  /** @deprecated use `ListPaymentsAmountRefunded$Outbound` instead. */
  export type Outbound = ListPaymentsAmountRefunded$Outbound;
}

export function listPaymentsAmountRefundedToJSON(
  listPaymentsAmountRefunded: ListPaymentsAmountRefunded,
): string {
  return JSON.stringify(
    ListPaymentsAmountRefunded$outboundSchema.parse(listPaymentsAmountRefunded),
  );
}

export function listPaymentsAmountRefundedFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsAmountRefunded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsAmountRefunded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsAmountRefunded' from JSON`,
  );
}

/** @internal */
export const ListPaymentsAmountRemaining$inboundSchema: z.ZodType<
  ListPaymentsAmountRemaining,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsAmountRemaining$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsAmountRemaining$outboundSchema: z.ZodType<
  ListPaymentsAmountRemaining$Outbound,
  z.ZodTypeDef,
  ListPaymentsAmountRemaining
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsAmountRemaining$ {
  /** @deprecated use `ListPaymentsAmountRemaining$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsAmountRemaining$inboundSchema;
  /** @deprecated use `ListPaymentsAmountRemaining$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsAmountRemaining$outboundSchema;
  /** @deprecated use `ListPaymentsAmountRemaining$Outbound` instead. */
  export type Outbound = ListPaymentsAmountRemaining$Outbound;
}

export function listPaymentsAmountRemainingToJSON(
  listPaymentsAmountRemaining: ListPaymentsAmountRemaining,
): string {
  return JSON.stringify(
    ListPaymentsAmountRemaining$outboundSchema.parse(
      listPaymentsAmountRemaining,
    ),
  );
}

export function listPaymentsAmountRemainingFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsAmountRemaining, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsAmountRemaining$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsAmountRemaining' from JSON`,
  );
}

/** @internal */
export const ListPaymentsAmountCaptured$inboundSchema: z.ZodType<
  ListPaymentsAmountCaptured,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsAmountCaptured$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsAmountCaptured$outboundSchema: z.ZodType<
  ListPaymentsAmountCaptured$Outbound,
  z.ZodTypeDef,
  ListPaymentsAmountCaptured
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsAmountCaptured$ {
  /** @deprecated use `ListPaymentsAmountCaptured$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsAmountCaptured$inboundSchema;
  /** @deprecated use `ListPaymentsAmountCaptured$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsAmountCaptured$outboundSchema;
  /** @deprecated use `ListPaymentsAmountCaptured$Outbound` instead. */
  export type Outbound = ListPaymentsAmountCaptured$Outbound;
}

export function listPaymentsAmountCapturedToJSON(
  listPaymentsAmountCaptured: ListPaymentsAmountCaptured,
): string {
  return JSON.stringify(
    ListPaymentsAmountCaptured$outboundSchema.parse(listPaymentsAmountCaptured),
  );
}

export function listPaymentsAmountCapturedFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsAmountCaptured, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsAmountCaptured$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsAmountCaptured' from JSON`,
  );
}

/** @internal */
export const ListPaymentsAmountChargedBack$inboundSchema: z.ZodType<
  ListPaymentsAmountChargedBack,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsAmountChargedBack$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsAmountChargedBack$outboundSchema: z.ZodType<
  ListPaymentsAmountChargedBack$Outbound,
  z.ZodTypeDef,
  ListPaymentsAmountChargedBack
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsAmountChargedBack$ {
  /** @deprecated use `ListPaymentsAmountChargedBack$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsAmountChargedBack$inboundSchema;
  /** @deprecated use `ListPaymentsAmountChargedBack$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsAmountChargedBack$outboundSchema;
  /** @deprecated use `ListPaymentsAmountChargedBack$Outbound` instead. */
  export type Outbound = ListPaymentsAmountChargedBack$Outbound;
}

export function listPaymentsAmountChargedBackToJSON(
  listPaymentsAmountChargedBack: ListPaymentsAmountChargedBack,
): string {
  return JSON.stringify(
    ListPaymentsAmountChargedBack$outboundSchema.parse(
      listPaymentsAmountChargedBack,
    ),
  );
}

export function listPaymentsAmountChargedBackFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsAmountChargedBack, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsAmountChargedBack$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsAmountChargedBack' from JSON`,
  );
}

/** @internal */
export const ListPaymentsSettlementAmount$inboundSchema: z.ZodType<
  ListPaymentsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsSettlementAmount$outboundSchema: z.ZodType<
  ListPaymentsSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsSettlementAmount$ {
  /** @deprecated use `ListPaymentsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsSettlementAmount$inboundSchema;
  /** @deprecated use `ListPaymentsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsSettlementAmount$outboundSchema;
  /** @deprecated use `ListPaymentsSettlementAmount$Outbound` instead. */
  export type Outbound = ListPaymentsSettlementAmount$Outbound;
}

export function listPaymentsSettlementAmountToJSON(
  listPaymentsSettlementAmount: ListPaymentsSettlementAmount,
): string {
  return JSON.stringify(
    ListPaymentsSettlementAmount$outboundSchema.parse(
      listPaymentsSettlementAmount,
    ),
  );
}

export function listPaymentsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsUnitPrice$inboundSchema: z.ZodType<
  ListPaymentsUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsUnitPrice$outboundSchema: z.ZodType<
  ListPaymentsUnitPrice$Outbound,
  z.ZodTypeDef,
  ListPaymentsUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsUnitPrice$ {
  /** @deprecated use `ListPaymentsUnitPrice$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsUnitPrice$inboundSchema;
  /** @deprecated use `ListPaymentsUnitPrice$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsUnitPrice$outboundSchema;
  /** @deprecated use `ListPaymentsUnitPrice$Outbound` instead. */
  export type Outbound = ListPaymentsUnitPrice$Outbound;
}

export function listPaymentsUnitPriceToJSON(
  listPaymentsUnitPrice: ListPaymentsUnitPrice,
): string {
  return JSON.stringify(
    ListPaymentsUnitPrice$outboundSchema.parse(listPaymentsUnitPrice),
  );
}

export function listPaymentsUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsUnitPrice' from JSON`,
  );
}

/** @internal */
export const ListPaymentsDiscountAmount$inboundSchema: z.ZodType<
  ListPaymentsDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsDiscountAmount$outboundSchema: z.ZodType<
  ListPaymentsDiscountAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsDiscountAmount$ {
  /** @deprecated use `ListPaymentsDiscountAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsDiscountAmount$inboundSchema;
  /** @deprecated use `ListPaymentsDiscountAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsDiscountAmount$outboundSchema;
  /** @deprecated use `ListPaymentsDiscountAmount$Outbound` instead. */
  export type Outbound = ListPaymentsDiscountAmount$Outbound;
}

export function listPaymentsDiscountAmountToJSON(
  listPaymentsDiscountAmount: ListPaymentsDiscountAmount,
): string {
  return JSON.stringify(
    ListPaymentsDiscountAmount$outboundSchema.parse(listPaymentsDiscountAmount),
  );
}

export function listPaymentsDiscountAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsDiscountAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsDiscountAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsDiscountAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsTotalAmount$inboundSchema: z.ZodType<
  ListPaymentsTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsTotalAmount$outboundSchema: z.ZodType<
  ListPaymentsTotalAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsTotalAmount$ {
  /** @deprecated use `ListPaymentsTotalAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsTotalAmount$inboundSchema;
  /** @deprecated use `ListPaymentsTotalAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsTotalAmount$outboundSchema;
  /** @deprecated use `ListPaymentsTotalAmount$Outbound` instead. */
  export type Outbound = ListPaymentsTotalAmount$Outbound;
}

export function listPaymentsTotalAmountToJSON(
  listPaymentsTotalAmount: ListPaymentsTotalAmount,
): string {
  return JSON.stringify(
    ListPaymentsTotalAmount$outboundSchema.parse(listPaymentsTotalAmount),
  );
}

export function listPaymentsTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsTotalAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsVatAmount$inboundSchema: z.ZodType<
  ListPaymentsVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsVatAmount$outboundSchema: z.ZodType<
  ListPaymentsVatAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsVatAmount$ {
  /** @deprecated use `ListPaymentsVatAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsVatAmount$inboundSchema;
  /** @deprecated use `ListPaymentsVatAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsVatAmount$outboundSchema;
  /** @deprecated use `ListPaymentsVatAmount$Outbound` instead. */
  export type Outbound = ListPaymentsVatAmount$Outbound;
}

export function listPaymentsVatAmountToJSON(
  listPaymentsVatAmount: ListPaymentsVatAmount,
): string {
  return JSON.stringify(
    ListPaymentsVatAmount$outboundSchema.parse(listPaymentsVatAmount),
  );
}

export function listPaymentsVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsVatAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsCategory$inboundSchema: z.ZodNativeEnum<
  typeof ListPaymentsCategory
> = z.nativeEnum(ListPaymentsCategory);

/** @internal */
export const ListPaymentsCategory$outboundSchema: z.ZodNativeEnum<
  typeof ListPaymentsCategory
> = ListPaymentsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsCategory$ {
  /** @deprecated use `ListPaymentsCategory$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsCategory$inboundSchema;
  /** @deprecated use `ListPaymentsCategory$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsCategory$outboundSchema;
}

/** @internal */
export const ListPaymentsRecurringAmount$inboundSchema: z.ZodType<
  ListPaymentsRecurringAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsRecurringAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsRecurringAmount$outboundSchema: z.ZodType<
  ListPaymentsRecurringAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsRecurringAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRecurringAmount$ {
  /** @deprecated use `ListPaymentsRecurringAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRecurringAmount$inboundSchema;
  /** @deprecated use `ListPaymentsRecurringAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRecurringAmount$outboundSchema;
  /** @deprecated use `ListPaymentsRecurringAmount$Outbound` instead. */
  export type Outbound = ListPaymentsRecurringAmount$Outbound;
}

export function listPaymentsRecurringAmountToJSON(
  listPaymentsRecurringAmount: ListPaymentsRecurringAmount,
): string {
  return JSON.stringify(
    ListPaymentsRecurringAmount$outboundSchema.parse(
      listPaymentsRecurringAmount,
    ),
  );
}

export function listPaymentsRecurringAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRecurringAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRecurringAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRecurringAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsRecurring$inboundSchema: z.ZodType<
  ListPaymentsRecurring,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => ListPaymentsRecurringAmount$inboundSchema).optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPaymentsRecurring$Outbound = {
  description?: string | undefined;
  interval: string;
  amount?: ListPaymentsRecurringAmount$Outbound | undefined;
  times?: number | undefined;
  startDate?: string | null | undefined;
};

/** @internal */
export const ListPaymentsRecurring$outboundSchema: z.ZodType<
  ListPaymentsRecurring$Outbound,
  z.ZodTypeDef,
  ListPaymentsRecurring
> = z.object({
  description: z.string().optional(),
  interval: z.string(),
  amount: z.lazy(() => ListPaymentsRecurringAmount$outboundSchema).optional(),
  times: z.number().int().optional(),
  startDate: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRecurring$ {
  /** @deprecated use `ListPaymentsRecurring$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRecurring$inboundSchema;
  /** @deprecated use `ListPaymentsRecurring$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRecurring$outboundSchema;
  /** @deprecated use `ListPaymentsRecurring$Outbound` instead. */
  export type Outbound = ListPaymentsRecurring$Outbound;
}

export function listPaymentsRecurringToJSON(
  listPaymentsRecurring: ListPaymentsRecurring,
): string {
  return JSON.stringify(
    ListPaymentsRecurring$outboundSchema.parse(listPaymentsRecurring),
  );
}

export function listPaymentsRecurringFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRecurring, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRecurring$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRecurring' from JSON`,
  );
}

/** @internal */
export const ListPaymentsLine$inboundSchema: z.ZodType<
  ListPaymentsLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => ListPaymentsUnitPrice$inboundSchema),
  discountAmount: z.lazy(() => ListPaymentsDiscountAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => ListPaymentsTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => ListPaymentsVatAmount$inboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(ListPaymentsCategory$inboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => ListPaymentsRecurring$inboundSchema).optional(),
});

/** @internal */
export type ListPaymentsLine$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: ListPaymentsUnitPrice$Outbound;
  discountAmount?: ListPaymentsDiscountAmount$Outbound | undefined;
  totalAmount: ListPaymentsTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: ListPaymentsVatAmount$Outbound | undefined;
  sku?: string | undefined;
  categories?: Array<string> | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
  recurring?: ListPaymentsRecurring$Outbound | undefined;
};

/** @internal */
export const ListPaymentsLine$outboundSchema: z.ZodType<
  ListPaymentsLine$Outbound,
  z.ZodTypeDef,
  ListPaymentsLine
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => ListPaymentsUnitPrice$outboundSchema),
  discountAmount: z.lazy(() => ListPaymentsDiscountAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => ListPaymentsTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => ListPaymentsVatAmount$outboundSchema).optional(),
  sku: z.string().optional(),
  categories: z.array(ListPaymentsCategory$outboundSchema).optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
  recurring: z.lazy(() => ListPaymentsRecurring$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsLine$ {
  /** @deprecated use `ListPaymentsLine$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsLine$inboundSchema;
  /** @deprecated use `ListPaymentsLine$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsLine$outboundSchema;
  /** @deprecated use `ListPaymentsLine$Outbound` instead. */
  export type Outbound = ListPaymentsLine$Outbound;
}

export function listPaymentsLineToJSON(
  listPaymentsLine: ListPaymentsLine,
): string {
  return JSON.stringify(
    ListPaymentsLine$outboundSchema.parse(listPaymentsLine),
  );
}

export function listPaymentsLineFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsLine' from JSON`,
  );
}

/** @internal */
export const ListPaymentsBillingAddress$inboundSchema: z.ZodType<
  ListPaymentsBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type ListPaymentsBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const ListPaymentsBillingAddress$outboundSchema: z.ZodType<
  ListPaymentsBillingAddress$Outbound,
  z.ZodTypeDef,
  ListPaymentsBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsBillingAddress$ {
  /** @deprecated use `ListPaymentsBillingAddress$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsBillingAddress$inboundSchema;
  /** @deprecated use `ListPaymentsBillingAddress$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsBillingAddress$outboundSchema;
  /** @deprecated use `ListPaymentsBillingAddress$Outbound` instead. */
  export type Outbound = ListPaymentsBillingAddress$Outbound;
}

export function listPaymentsBillingAddressToJSON(
  listPaymentsBillingAddress: ListPaymentsBillingAddress,
): string {
  return JSON.stringify(
    ListPaymentsBillingAddress$outboundSchema.parse(listPaymentsBillingAddress),
  );
}

export function listPaymentsBillingAddressFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsBillingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsBillingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsBillingAddress' from JSON`,
  );
}

/** @internal */
export const ListPaymentsShippingAddress$inboundSchema: z.ZodType<
  ListPaymentsShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type ListPaymentsShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber?: string | undefined;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const ListPaymentsShippingAddress$outboundSchema: z.ZodType<
  ListPaymentsShippingAddress$Outbound,
  z.ZodTypeDef,
  ListPaymentsShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string().optional(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string().optional(),
  region: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsShippingAddress$ {
  /** @deprecated use `ListPaymentsShippingAddress$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsShippingAddress$inboundSchema;
  /** @deprecated use `ListPaymentsShippingAddress$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsShippingAddress$outboundSchema;
  /** @deprecated use `ListPaymentsShippingAddress$Outbound` instead. */
  export type Outbound = ListPaymentsShippingAddress$Outbound;
}

export function listPaymentsShippingAddressToJSON(
  listPaymentsShippingAddress: ListPaymentsShippingAddress,
): string {
  return JSON.stringify(
    ListPaymentsShippingAddress$outboundSchema.parse(
      listPaymentsShippingAddress,
    ),
  );
}

export function listPaymentsShippingAddressFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsShippingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsShippingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsShippingAddress' from JSON`,
  );
}

/** @internal */
export const ListPaymentsMetadata$inboundSchema: z.ZodType<
  ListPaymentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListPaymentsMetadata$Outbound = {};

/** @internal */
export const ListPaymentsMetadata$outboundSchema: z.ZodType<
  ListPaymentsMetadata$Outbound,
  z.ZodTypeDef,
  ListPaymentsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsMetadata$ {
  /** @deprecated use `ListPaymentsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsMetadata$inboundSchema;
  /** @deprecated use `ListPaymentsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsMetadata$outboundSchema;
  /** @deprecated use `ListPaymentsMetadata$Outbound` instead. */
  export type Outbound = ListPaymentsMetadata$Outbound;
}

export function listPaymentsMetadataToJSON(
  listPaymentsMetadata: ListPaymentsMetadata,
): string {
  return JSON.stringify(
    ListPaymentsMetadata$outboundSchema.parse(listPaymentsMetadata),
  );
}

export function listPaymentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsMetadata' from JSON`,
  );
}

/** @internal */
export const ListPaymentsMetadataUnion$inboundSchema: z.ZodType<
  ListPaymentsMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListPaymentsMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type ListPaymentsMetadataUnion$Outbound =
  | ListPaymentsMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const ListPaymentsMetadataUnion$outboundSchema: z.ZodType<
  ListPaymentsMetadataUnion$Outbound,
  z.ZodTypeDef,
  ListPaymentsMetadataUnion
> = z.union([
  z.lazy(() => ListPaymentsMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsMetadataUnion$ {
  /** @deprecated use `ListPaymentsMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsMetadataUnion$inboundSchema;
  /** @deprecated use `ListPaymentsMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsMetadataUnion$outboundSchema;
  /** @deprecated use `ListPaymentsMetadataUnion$Outbound` instead. */
  export type Outbound = ListPaymentsMetadataUnion$Outbound;
}

export function listPaymentsMetadataUnionToJSON(
  listPaymentsMetadataUnion: ListPaymentsMetadataUnion,
): string {
  return JSON.stringify(
    ListPaymentsMetadataUnion$outboundSchema.parse(listPaymentsMetadataUnion),
  );
}

export function listPaymentsMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsMetadataUnion' from JSON`,
  );
}

/** @internal */
export const ListPaymentsApplicationFeeAmount$inboundSchema: z.ZodType<
  ListPaymentsApplicationFeeAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsApplicationFeeAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsApplicationFeeAmount$outboundSchema: z.ZodType<
  ListPaymentsApplicationFeeAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsApplicationFeeAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsApplicationFeeAmount$ {
  /** @deprecated use `ListPaymentsApplicationFeeAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsApplicationFeeAmount$inboundSchema;
  /** @deprecated use `ListPaymentsApplicationFeeAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsApplicationFeeAmount$outboundSchema;
  /** @deprecated use `ListPaymentsApplicationFeeAmount$Outbound` instead. */
  export type Outbound = ListPaymentsApplicationFeeAmount$Outbound;
}

export function listPaymentsApplicationFeeAmountToJSON(
  listPaymentsApplicationFeeAmount: ListPaymentsApplicationFeeAmount,
): string {
  return JSON.stringify(
    ListPaymentsApplicationFeeAmount$outboundSchema.parse(
      listPaymentsApplicationFeeAmount,
    ),
  );
}

export function listPaymentsApplicationFeeAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsApplicationFeeAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsApplicationFeeAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsApplicationFeeAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsApplicationFee$inboundSchema: z.ZodType<
  ListPaymentsApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ListPaymentsApplicationFeeAmount$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type ListPaymentsApplicationFee$Outbound = {
  amount?: ListPaymentsApplicationFeeAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const ListPaymentsApplicationFee$outboundSchema: z.ZodType<
  ListPaymentsApplicationFee$Outbound,
  z.ZodTypeDef,
  ListPaymentsApplicationFee
> = z.object({
  amount: z.lazy(() => ListPaymentsApplicationFeeAmount$outboundSchema)
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsApplicationFee$ {
  /** @deprecated use `ListPaymentsApplicationFee$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsApplicationFee$inboundSchema;
  /** @deprecated use `ListPaymentsApplicationFee$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsApplicationFee$outboundSchema;
  /** @deprecated use `ListPaymentsApplicationFee$Outbound` instead. */
  export type Outbound = ListPaymentsApplicationFee$Outbound;
}

export function listPaymentsApplicationFeeToJSON(
  listPaymentsApplicationFee: ListPaymentsApplicationFee,
): string {
  return JSON.stringify(
    ListPaymentsApplicationFee$outboundSchema.parse(listPaymentsApplicationFee),
  );
}

export function listPaymentsApplicationFeeFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsApplicationFee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsApplicationFee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsApplicationFee' from JSON`,
  );
}

/** @internal */
export const ListPaymentsRoutingAmount$inboundSchema: z.ZodType<
  ListPaymentsRoutingAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListPaymentsRoutingAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListPaymentsRoutingAmount$outboundSchema: z.ZodType<
  ListPaymentsRoutingAmount$Outbound,
  z.ZodTypeDef,
  ListPaymentsRoutingAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRoutingAmount$ {
  /** @deprecated use `ListPaymentsRoutingAmount$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRoutingAmount$inboundSchema;
  /** @deprecated use `ListPaymentsRoutingAmount$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRoutingAmount$outboundSchema;
  /** @deprecated use `ListPaymentsRoutingAmount$Outbound` instead. */
  export type Outbound = ListPaymentsRoutingAmount$Outbound;
}

export function listPaymentsRoutingAmountToJSON(
  listPaymentsRoutingAmount: ListPaymentsRoutingAmount,
): string {
  return JSON.stringify(
    ListPaymentsRoutingAmount$outboundSchema.parse(listPaymentsRoutingAmount),
  );
}

export function listPaymentsRoutingAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRoutingAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRoutingAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRoutingAmount' from JSON`,
  );
}

/** @internal */
export const ListPaymentsDestination$inboundSchema: z.ZodType<
  ListPaymentsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/** @internal */
export type ListPaymentsDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const ListPaymentsDestination$outboundSchema: z.ZodType<
  ListPaymentsDestination$Outbound,
  z.ZodTypeDef,
  ListPaymentsDestination
> = z.object({
  type: z.string(),
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsDestination$ {
  /** @deprecated use `ListPaymentsDestination$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsDestination$inboundSchema;
  /** @deprecated use `ListPaymentsDestination$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsDestination$outboundSchema;
  /** @deprecated use `ListPaymentsDestination$Outbound` instead. */
  export type Outbound = ListPaymentsDestination$Outbound;
}

export function listPaymentsDestinationToJSON(
  listPaymentsDestination: ListPaymentsDestination,
): string {
  return JSON.stringify(
    ListPaymentsDestination$outboundSchema.parse(listPaymentsDestination),
  );
}

export function listPaymentsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsDestination' from JSON`,
  );
}

/** @internal */
export const ListPaymentsRoutingSelf$inboundSchema: z.ZodType<
  ListPaymentsRoutingSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsRoutingSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsRoutingSelf$outboundSchema: z.ZodType<
  ListPaymentsRoutingSelf$Outbound,
  z.ZodTypeDef,
  ListPaymentsRoutingSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRoutingSelf$ {
  /** @deprecated use `ListPaymentsRoutingSelf$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRoutingSelf$inboundSchema;
  /** @deprecated use `ListPaymentsRoutingSelf$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRoutingSelf$outboundSchema;
  /** @deprecated use `ListPaymentsRoutingSelf$Outbound` instead. */
  export type Outbound = ListPaymentsRoutingSelf$Outbound;
}

export function listPaymentsRoutingSelfToJSON(
  listPaymentsRoutingSelf: ListPaymentsRoutingSelf,
): string {
  return JSON.stringify(
    ListPaymentsRoutingSelf$outboundSchema.parse(listPaymentsRoutingSelf),
  );
}

export function listPaymentsRoutingSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRoutingSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRoutingSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRoutingSelf' from JSON`,
  );
}

/** @internal */
export const ListPaymentsRoutingPayment$inboundSchema: z.ZodType<
  ListPaymentsRoutingPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsRoutingPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsRoutingPayment$outboundSchema: z.ZodType<
  ListPaymentsRoutingPayment$Outbound,
  z.ZodTypeDef,
  ListPaymentsRoutingPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRoutingPayment$ {
  /** @deprecated use `ListPaymentsRoutingPayment$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRoutingPayment$inboundSchema;
  /** @deprecated use `ListPaymentsRoutingPayment$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRoutingPayment$outboundSchema;
  /** @deprecated use `ListPaymentsRoutingPayment$Outbound` instead. */
  export type Outbound = ListPaymentsRoutingPayment$Outbound;
}

export function listPaymentsRoutingPaymentToJSON(
  listPaymentsRoutingPayment: ListPaymentsRoutingPayment,
): string {
  return JSON.stringify(
    ListPaymentsRoutingPayment$outboundSchema.parse(listPaymentsRoutingPayment),
  );
}

export function listPaymentsRoutingPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRoutingPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRoutingPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRoutingPayment' from JSON`,
  );
}

/** @internal */
export const ListPaymentsRoutingLinks$inboundSchema: z.ZodType<
  ListPaymentsRoutingLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListPaymentsRoutingSelf$inboundSchema),
  payment: z.lazy(() => ListPaymentsRoutingPayment$inboundSchema),
});

/** @internal */
export type ListPaymentsRoutingLinks$Outbound = {
  self: ListPaymentsRoutingSelf$Outbound;
  payment: ListPaymentsRoutingPayment$Outbound;
};

/** @internal */
export const ListPaymentsRoutingLinks$outboundSchema: z.ZodType<
  ListPaymentsRoutingLinks$Outbound,
  z.ZodTypeDef,
  ListPaymentsRoutingLinks
> = z.object({
  self: z.lazy(() => ListPaymentsRoutingSelf$outboundSchema),
  payment: z.lazy(() => ListPaymentsRoutingPayment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRoutingLinks$ {
  /** @deprecated use `ListPaymentsRoutingLinks$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRoutingLinks$inboundSchema;
  /** @deprecated use `ListPaymentsRoutingLinks$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRoutingLinks$outboundSchema;
  /** @deprecated use `ListPaymentsRoutingLinks$Outbound` instead. */
  export type Outbound = ListPaymentsRoutingLinks$Outbound;
}

export function listPaymentsRoutingLinksToJSON(
  listPaymentsRoutingLinks: ListPaymentsRoutingLinks,
): string {
  return JSON.stringify(
    ListPaymentsRoutingLinks$outboundSchema.parse(listPaymentsRoutingLinks),
  );
}

export function listPaymentsRoutingLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRoutingLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRoutingLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRoutingLinks' from JSON`,
  );
}

/** @internal */
export const ListPaymentsRouting$inboundSchema: z.ZodType<
  ListPaymentsRouting,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => ListPaymentsRoutingAmount$inboundSchema),
  destination: z.lazy(() => ListPaymentsDestination$inboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ListPaymentsRoutingLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListPaymentsRouting$Outbound = {
  resource: string;
  id: string;
  mode: string;
  amount: ListPaymentsRoutingAmount$Outbound;
  destination: ListPaymentsDestination$Outbound;
  createdAt: string;
  releaseDate?: string | null | undefined;
  _links: ListPaymentsRoutingLinks$Outbound;
};

/** @internal */
export const ListPaymentsRouting$outboundSchema: z.ZodType<
  ListPaymentsRouting$Outbound,
  z.ZodTypeDef,
  ListPaymentsRouting
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  amount: z.lazy(() => ListPaymentsRoutingAmount$outboundSchema),
  destination: z.lazy(() => ListPaymentsDestination$outboundSchema),
  createdAt: z.string(),
  releaseDate: z.nullable(z.string()).optional(),
  links: z.lazy(() => ListPaymentsRoutingLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRouting$ {
  /** @deprecated use `ListPaymentsRouting$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRouting$inboundSchema;
  /** @deprecated use `ListPaymentsRouting$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRouting$outboundSchema;
  /** @deprecated use `ListPaymentsRouting$Outbound` instead. */
  export type Outbound = ListPaymentsRouting$Outbound;
}

export function listPaymentsRoutingToJSON(
  listPaymentsRouting: ListPaymentsRouting,
): string {
  return JSON.stringify(
    ListPaymentsRouting$outboundSchema.parse(listPaymentsRouting),
  );
}

export function listPaymentsRoutingFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRouting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRouting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRouting' from JSON`,
  );
}

/** @internal */
export const ListPaymentsStatusReason$inboundSchema: z.ZodType<
  ListPaymentsStatusReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type ListPaymentsStatusReason$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ListPaymentsStatusReason$outboundSchema: z.ZodType<
  ListPaymentsStatusReason$Outbound,
  z.ZodTypeDef,
  ListPaymentsStatusReason
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsStatusReason$ {
  /** @deprecated use `ListPaymentsStatusReason$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsStatusReason$inboundSchema;
  /** @deprecated use `ListPaymentsStatusReason$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsStatusReason$outboundSchema;
  /** @deprecated use `ListPaymentsStatusReason$Outbound` instead. */
  export type Outbound = ListPaymentsStatusReason$Outbound;
}

export function listPaymentsStatusReasonToJSON(
  listPaymentsStatusReason: ListPaymentsStatusReason,
): string {
  return JSON.stringify(
    ListPaymentsStatusReason$outboundSchema.parse(listPaymentsStatusReason),
  );
}

export function listPaymentsStatusReasonFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsStatusReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsStatusReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsStatusReason' from JSON`,
  );
}

/** @internal */
export const ListPaymentsPaymentSelf$inboundSchema: z.ZodType<
  ListPaymentsPaymentSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsPaymentSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsPaymentSelf$outboundSchema: z.ZodType<
  ListPaymentsPaymentSelf$Outbound,
  z.ZodTypeDef,
  ListPaymentsPaymentSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsPaymentSelf$ {
  /** @deprecated use `ListPaymentsPaymentSelf$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsPaymentSelf$inboundSchema;
  /** @deprecated use `ListPaymentsPaymentSelf$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsPaymentSelf$outboundSchema;
  /** @deprecated use `ListPaymentsPaymentSelf$Outbound` instead. */
  export type Outbound = ListPaymentsPaymentSelf$Outbound;
}

export function listPaymentsPaymentSelfToJSON(
  listPaymentsPaymentSelf: ListPaymentsPaymentSelf,
): string {
  return JSON.stringify(
    ListPaymentsPaymentSelf$outboundSchema.parse(listPaymentsPaymentSelf),
  );
}

export function listPaymentsPaymentSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsPaymentSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsPaymentSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsPaymentSelf' from JSON`,
  );
}

/** @internal */
export const ListPaymentsCheckout$inboundSchema: z.ZodType<
  ListPaymentsCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsCheckout$outboundSchema: z.ZodType<
  ListPaymentsCheckout$Outbound,
  z.ZodTypeDef,
  ListPaymentsCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsCheckout$ {
  /** @deprecated use `ListPaymentsCheckout$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsCheckout$inboundSchema;
  /** @deprecated use `ListPaymentsCheckout$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsCheckout$outboundSchema;
  /** @deprecated use `ListPaymentsCheckout$Outbound` instead. */
  export type Outbound = ListPaymentsCheckout$Outbound;
}

export function listPaymentsCheckoutToJSON(
  listPaymentsCheckout: ListPaymentsCheckout,
): string {
  return JSON.stringify(
    ListPaymentsCheckout$outboundSchema.parse(listPaymentsCheckout),
  );
}

export function listPaymentsCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsCheckout' from JSON`,
  );
}

/** @internal */
export const ListPaymentsMobileAppCheckout$inboundSchema: z.ZodType<
  ListPaymentsMobileAppCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsMobileAppCheckout$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsMobileAppCheckout$outboundSchema: z.ZodType<
  ListPaymentsMobileAppCheckout$Outbound,
  z.ZodTypeDef,
  ListPaymentsMobileAppCheckout
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsMobileAppCheckout$ {
  /** @deprecated use `ListPaymentsMobileAppCheckout$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsMobileAppCheckout$inboundSchema;
  /** @deprecated use `ListPaymentsMobileAppCheckout$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsMobileAppCheckout$outboundSchema;
  /** @deprecated use `ListPaymentsMobileAppCheckout$Outbound` instead. */
  export type Outbound = ListPaymentsMobileAppCheckout$Outbound;
}

export function listPaymentsMobileAppCheckoutToJSON(
  listPaymentsMobileAppCheckout: ListPaymentsMobileAppCheckout,
): string {
  return JSON.stringify(
    ListPaymentsMobileAppCheckout$outboundSchema.parse(
      listPaymentsMobileAppCheckout,
    ),
  );
}

export function listPaymentsMobileAppCheckoutFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsMobileAppCheckout, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsMobileAppCheckout$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsMobileAppCheckout' from JSON`,
  );
}

/** @internal */
export const ListPaymentsChangePaymentState$inboundSchema: z.ZodType<
  ListPaymentsChangePaymentState,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsChangePaymentState$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsChangePaymentState$outboundSchema: z.ZodType<
  ListPaymentsChangePaymentState$Outbound,
  z.ZodTypeDef,
  ListPaymentsChangePaymentState
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsChangePaymentState$ {
  /** @deprecated use `ListPaymentsChangePaymentState$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsChangePaymentState$inboundSchema;
  /** @deprecated use `ListPaymentsChangePaymentState$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsChangePaymentState$outboundSchema;
  /** @deprecated use `ListPaymentsChangePaymentState$Outbound` instead. */
  export type Outbound = ListPaymentsChangePaymentState$Outbound;
}

export function listPaymentsChangePaymentStateToJSON(
  listPaymentsChangePaymentState: ListPaymentsChangePaymentState,
): string {
  return JSON.stringify(
    ListPaymentsChangePaymentState$outboundSchema.parse(
      listPaymentsChangePaymentState,
    ),
  );
}

export function listPaymentsChangePaymentStateFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsChangePaymentState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsChangePaymentState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsChangePaymentState' from JSON`,
  );
}

/** @internal */
export const ListPaymentsDashboard$inboundSchema: z.ZodType<
  ListPaymentsDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsDashboard$outboundSchema: z.ZodType<
  ListPaymentsDashboard$Outbound,
  z.ZodTypeDef,
  ListPaymentsDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsDashboard$ {
  /** @deprecated use `ListPaymentsDashboard$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsDashboard$inboundSchema;
  /** @deprecated use `ListPaymentsDashboard$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsDashboard$outboundSchema;
  /** @deprecated use `ListPaymentsDashboard$Outbound` instead. */
  export type Outbound = ListPaymentsDashboard$Outbound;
}

export function listPaymentsDashboardToJSON(
  listPaymentsDashboard: ListPaymentsDashboard,
): string {
  return JSON.stringify(
    ListPaymentsDashboard$outboundSchema.parse(listPaymentsDashboard),
  );
}

export function listPaymentsDashboardFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsDashboard' from JSON`,
  );
}

/** @internal */
export const ListPaymentsRefunds$inboundSchema: z.ZodType<
  ListPaymentsRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsRefunds$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsRefunds$outboundSchema: z.ZodType<
  ListPaymentsRefunds$Outbound,
  z.ZodTypeDef,
  ListPaymentsRefunds
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRefunds$ {
  /** @deprecated use `ListPaymentsRefunds$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRefunds$inboundSchema;
  /** @deprecated use `ListPaymentsRefunds$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRefunds$outboundSchema;
  /** @deprecated use `ListPaymentsRefunds$Outbound` instead. */
  export type Outbound = ListPaymentsRefunds$Outbound;
}

export function listPaymentsRefundsToJSON(
  listPaymentsRefunds: ListPaymentsRefunds,
): string {
  return JSON.stringify(
    ListPaymentsRefunds$outboundSchema.parse(listPaymentsRefunds),
  );
}

export function listPaymentsRefundsFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsRefunds' from JSON`,
  );
}

/** @internal */
export const ListPaymentsChargebacks$inboundSchema: z.ZodType<
  ListPaymentsChargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsChargebacks$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsChargebacks$outboundSchema: z.ZodType<
  ListPaymentsChargebacks$Outbound,
  z.ZodTypeDef,
  ListPaymentsChargebacks
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsChargebacks$ {
  /** @deprecated use `ListPaymentsChargebacks$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsChargebacks$inboundSchema;
  /** @deprecated use `ListPaymentsChargebacks$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsChargebacks$outboundSchema;
  /** @deprecated use `ListPaymentsChargebacks$Outbound` instead. */
  export type Outbound = ListPaymentsChargebacks$Outbound;
}

export function listPaymentsChargebacksToJSON(
  listPaymentsChargebacks: ListPaymentsChargebacks,
): string {
  return JSON.stringify(
    ListPaymentsChargebacks$outboundSchema.parse(listPaymentsChargebacks),
  );
}

export function listPaymentsChargebacksFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsChargebacks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsChargebacks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsChargebacks' from JSON`,
  );
}

/** @internal */
export const ListPaymentsCaptures$inboundSchema: z.ZodType<
  ListPaymentsCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsCaptures$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsCaptures$outboundSchema: z.ZodType<
  ListPaymentsCaptures$Outbound,
  z.ZodTypeDef,
  ListPaymentsCaptures
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsCaptures$ {
  /** @deprecated use `ListPaymentsCaptures$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsCaptures$inboundSchema;
  /** @deprecated use `ListPaymentsCaptures$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsCaptures$outboundSchema;
  /** @deprecated use `ListPaymentsCaptures$Outbound` instead. */
  export type Outbound = ListPaymentsCaptures$Outbound;
}

export function listPaymentsCapturesToJSON(
  listPaymentsCaptures: ListPaymentsCaptures,
): string {
  return JSON.stringify(
    ListPaymentsCaptures$outboundSchema.parse(listPaymentsCaptures),
  );
}

export function listPaymentsCapturesFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsCaptures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsCaptures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsCaptures' from JSON`,
  );
}

/** @internal */
export const ListPaymentsSettlement$inboundSchema: z.ZodType<
  ListPaymentsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsSettlement$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsSettlement$outboundSchema: z.ZodType<
  ListPaymentsSettlement$Outbound,
  z.ZodTypeDef,
  ListPaymentsSettlement
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsSettlement$ {
  /** @deprecated use `ListPaymentsSettlement$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsSettlement$inboundSchema;
  /** @deprecated use `ListPaymentsSettlement$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsSettlement$outboundSchema;
  /** @deprecated use `ListPaymentsSettlement$Outbound` instead. */
  export type Outbound = ListPaymentsSettlement$Outbound;
}

export function listPaymentsSettlementToJSON(
  listPaymentsSettlement: ListPaymentsSettlement,
): string {
  return JSON.stringify(
    ListPaymentsSettlement$outboundSchema.parse(listPaymentsSettlement),
  );
}

export function listPaymentsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsSettlement' from JSON`,
  );
}

/** @internal */
export const ListPaymentsCustomer$inboundSchema: z.ZodType<
  ListPaymentsCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsCustomer$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsCustomer$outboundSchema: z.ZodType<
  ListPaymentsCustomer$Outbound,
  z.ZodTypeDef,
  ListPaymentsCustomer
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsCustomer$ {
  /** @deprecated use `ListPaymentsCustomer$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsCustomer$inboundSchema;
  /** @deprecated use `ListPaymentsCustomer$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsCustomer$outboundSchema;
  /** @deprecated use `ListPaymentsCustomer$Outbound` instead. */
  export type Outbound = ListPaymentsCustomer$Outbound;
}

export function listPaymentsCustomerToJSON(
  listPaymentsCustomer: ListPaymentsCustomer,
): string {
  return JSON.stringify(
    ListPaymentsCustomer$outboundSchema.parse(listPaymentsCustomer),
  );
}

export function listPaymentsCustomerFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsCustomer' from JSON`,
  );
}

/** @internal */
export const ListPaymentsMandate$inboundSchema: z.ZodType<
  ListPaymentsMandate,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsMandate$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsMandate$outboundSchema: z.ZodType<
  ListPaymentsMandate$Outbound,
  z.ZodTypeDef,
  ListPaymentsMandate
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsMandate$ {
  /** @deprecated use `ListPaymentsMandate$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsMandate$inboundSchema;
  /** @deprecated use `ListPaymentsMandate$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsMandate$outboundSchema;
  /** @deprecated use `ListPaymentsMandate$Outbound` instead. */
  export type Outbound = ListPaymentsMandate$Outbound;
}

export function listPaymentsMandateToJSON(
  listPaymentsMandate: ListPaymentsMandate,
): string {
  return JSON.stringify(
    ListPaymentsMandate$outboundSchema.parse(listPaymentsMandate),
  );
}

export function listPaymentsMandateFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsMandate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsMandate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsMandate' from JSON`,
  );
}

/** @internal */
export const ListPaymentsSubscription$inboundSchema: z.ZodType<
  ListPaymentsSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsSubscription$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsSubscription$outboundSchema: z.ZodType<
  ListPaymentsSubscription$Outbound,
  z.ZodTypeDef,
  ListPaymentsSubscription
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsSubscription$ {
  /** @deprecated use `ListPaymentsSubscription$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsSubscription$inboundSchema;
  /** @deprecated use `ListPaymentsSubscription$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsSubscription$outboundSchema;
  /** @deprecated use `ListPaymentsSubscription$Outbound` instead. */
  export type Outbound = ListPaymentsSubscription$Outbound;
}

export function listPaymentsSubscriptionToJSON(
  listPaymentsSubscription: ListPaymentsSubscription,
): string {
  return JSON.stringify(
    ListPaymentsSubscription$outboundSchema.parse(listPaymentsSubscription),
  );
}

export function listPaymentsSubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsSubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsSubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsSubscription' from JSON`,
  );
}

/** @internal */
export const ListPaymentsOrder$inboundSchema: z.ZodType<
  ListPaymentsOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsOrder$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsOrder$outboundSchema: z.ZodType<
  ListPaymentsOrder$Outbound,
  z.ZodTypeDef,
  ListPaymentsOrder
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsOrder$ {
  /** @deprecated use `ListPaymentsOrder$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsOrder$inboundSchema;
  /** @deprecated use `ListPaymentsOrder$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsOrder$outboundSchema;
  /** @deprecated use `ListPaymentsOrder$Outbound` instead. */
  export type Outbound = ListPaymentsOrder$Outbound;
}

export function listPaymentsOrderToJSON(
  listPaymentsOrder: ListPaymentsOrder,
): string {
  return JSON.stringify(
    ListPaymentsOrder$outboundSchema.parse(listPaymentsOrder),
  );
}

export function listPaymentsOrderFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsOrder' from JSON`,
  );
}

/** @internal */
export const ListPaymentsTerminal$inboundSchema: z.ZodType<
  ListPaymentsTerminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsTerminal$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsTerminal$outboundSchema: z.ZodType<
  ListPaymentsTerminal$Outbound,
  z.ZodTypeDef,
  ListPaymentsTerminal
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsTerminal$ {
  /** @deprecated use `ListPaymentsTerminal$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsTerminal$inboundSchema;
  /** @deprecated use `ListPaymentsTerminal$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsTerminal$outboundSchema;
  /** @deprecated use `ListPaymentsTerminal$Outbound` instead. */
  export type Outbound = ListPaymentsTerminal$Outbound;
}

export function listPaymentsTerminalToJSON(
  listPaymentsTerminal: ListPaymentsTerminal,
): string {
  return JSON.stringify(
    ListPaymentsTerminal$outboundSchema.parse(listPaymentsTerminal),
  );
}

export function listPaymentsTerminalFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsTerminal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsTerminal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsTerminal' from JSON`,
  );
}

/** @internal */
export const ListPaymentsPaymentDocumentation$inboundSchema: z.ZodType<
  ListPaymentsPaymentDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsPaymentDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsPaymentDocumentation$outboundSchema: z.ZodType<
  ListPaymentsPaymentDocumentation$Outbound,
  z.ZodTypeDef,
  ListPaymentsPaymentDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsPaymentDocumentation$ {
  /** @deprecated use `ListPaymentsPaymentDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsPaymentDocumentation$inboundSchema;
  /** @deprecated use `ListPaymentsPaymentDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsPaymentDocumentation$outboundSchema;
  /** @deprecated use `ListPaymentsPaymentDocumentation$Outbound` instead. */
  export type Outbound = ListPaymentsPaymentDocumentation$Outbound;
}

export function listPaymentsPaymentDocumentationToJSON(
  listPaymentsPaymentDocumentation: ListPaymentsPaymentDocumentation,
): string {
  return JSON.stringify(
    ListPaymentsPaymentDocumentation$outboundSchema.parse(
      listPaymentsPaymentDocumentation,
    ),
  );
}

export function listPaymentsPaymentDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsPaymentDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsPaymentDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsPaymentDocumentation' from JSON`,
  );
}

/** @internal */
export const ListPaymentsPaymentLinks$inboundSchema: z.ZodType<
  ListPaymentsPaymentLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListPaymentsPaymentSelf$inboundSchema),
  checkout: z.lazy(() => ListPaymentsCheckout$inboundSchema).optional(),
  mobileAppCheckout: z.lazy(() => ListPaymentsMobileAppCheckout$inboundSchema)
    .optional(),
  changePaymentState: z.lazy(() => ListPaymentsChangePaymentState$inboundSchema)
    .optional(),
  dashboard: z.lazy(() => ListPaymentsDashboard$inboundSchema),
  refunds: z.lazy(() => ListPaymentsRefunds$inboundSchema).optional(),
  chargebacks: z.lazy(() => ListPaymentsChargebacks$inboundSchema).optional(),
  captures: z.lazy(() => ListPaymentsCaptures$inboundSchema).optional(),
  settlement: z.lazy(() => ListPaymentsSettlement$inboundSchema).optional(),
  customer: z.lazy(() => ListPaymentsCustomer$inboundSchema).optional(),
  mandate: z.lazy(() => ListPaymentsMandate$inboundSchema).optional(),
  subscription: z.lazy(() => ListPaymentsSubscription$inboundSchema).optional(),
  order: z.lazy(() => ListPaymentsOrder$inboundSchema).optional(),
  terminal: z.lazy(() => ListPaymentsTerminal$inboundSchema).optional(),
  documentation: z.lazy(() => ListPaymentsPaymentDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListPaymentsPaymentLinks$Outbound = {
  self: ListPaymentsPaymentSelf$Outbound;
  checkout?: ListPaymentsCheckout$Outbound | undefined;
  mobileAppCheckout?: ListPaymentsMobileAppCheckout$Outbound | undefined;
  changePaymentState?: ListPaymentsChangePaymentState$Outbound | undefined;
  dashboard: ListPaymentsDashboard$Outbound;
  refunds?: ListPaymentsRefunds$Outbound | undefined;
  chargebacks?: ListPaymentsChargebacks$Outbound | undefined;
  captures?: ListPaymentsCaptures$Outbound | undefined;
  settlement?: ListPaymentsSettlement$Outbound | undefined;
  customer?: ListPaymentsCustomer$Outbound | undefined;
  mandate?: ListPaymentsMandate$Outbound | undefined;
  subscription?: ListPaymentsSubscription$Outbound | undefined;
  order?: ListPaymentsOrder$Outbound | undefined;
  terminal?: ListPaymentsTerminal$Outbound | undefined;
  documentation?: ListPaymentsPaymentDocumentation$Outbound | undefined;
};

/** @internal */
export const ListPaymentsPaymentLinks$outboundSchema: z.ZodType<
  ListPaymentsPaymentLinks$Outbound,
  z.ZodTypeDef,
  ListPaymentsPaymentLinks
> = z.object({
  self: z.lazy(() => ListPaymentsPaymentSelf$outboundSchema),
  checkout: z.lazy(() => ListPaymentsCheckout$outboundSchema).optional(),
  mobileAppCheckout: z.lazy(() => ListPaymentsMobileAppCheckout$outboundSchema)
    .optional(),
  changePaymentState: z.lazy(() =>
    ListPaymentsChangePaymentState$outboundSchema
  ).optional(),
  dashboard: z.lazy(() => ListPaymentsDashboard$outboundSchema),
  refunds: z.lazy(() => ListPaymentsRefunds$outboundSchema).optional(),
  chargebacks: z.lazy(() => ListPaymentsChargebacks$outboundSchema).optional(),
  captures: z.lazy(() => ListPaymentsCaptures$outboundSchema).optional(),
  settlement: z.lazy(() => ListPaymentsSettlement$outboundSchema).optional(),
  customer: z.lazy(() => ListPaymentsCustomer$outboundSchema).optional(),
  mandate: z.lazy(() => ListPaymentsMandate$outboundSchema).optional(),
  subscription: z.lazy(() => ListPaymentsSubscription$outboundSchema)
    .optional(),
  order: z.lazy(() => ListPaymentsOrder$outboundSchema).optional(),
  terminal: z.lazy(() => ListPaymentsTerminal$outboundSchema).optional(),
  documentation: z.lazy(() => ListPaymentsPaymentDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsPaymentLinks$ {
  /** @deprecated use `ListPaymentsPaymentLinks$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsPaymentLinks$inboundSchema;
  /** @deprecated use `ListPaymentsPaymentLinks$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsPaymentLinks$outboundSchema;
  /** @deprecated use `ListPaymentsPaymentLinks$Outbound` instead. */
  export type Outbound = ListPaymentsPaymentLinks$Outbound;
}

export function listPaymentsPaymentLinksToJSON(
  listPaymentsPaymentLinks: ListPaymentsPaymentLinks,
): string {
  return JSON.stringify(
    ListPaymentsPaymentLinks$outboundSchema.parse(listPaymentsPaymentLinks),
  );
}

export function listPaymentsPaymentLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsPaymentLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsPaymentLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsPaymentLinks' from JSON`,
  );
}

/** @internal */
export const ListPaymentsPaymentOutput$inboundSchema: z.ZodType<
  ListPaymentsPaymentOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => ListPaymentsAmount$inboundSchema),
  amountRefunded: z.lazy(() => ListPaymentsAmountRefunded$inboundSchema)
    .optional(),
  amountRemaining: z.lazy(() => ListPaymentsAmountRemaining$inboundSchema)
    .optional(),
  amountCaptured: z.lazy(() => ListPaymentsAmountCaptured$inboundSchema)
    .optional(),
  amountChargedBack: z.lazy(() => ListPaymentsAmountChargedBack$inboundSchema)
    .optional(),
  settlementAmount: z.lazy(() => ListPaymentsSettlementAmount$inboundSchema)
    .optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(z.lazy(() => ListPaymentsLine$inboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => ListPaymentsBillingAddress$inboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => ListPaymentsShippingAddress$inboundSchema)
    .optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListPaymentsMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => ListPaymentsApplicationFee$inboundSchema),
  ).optional(),
  routing: z.nullable(z.array(z.lazy(() => ListPaymentsRouting$inboundSchema)))
    .optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(z.lazy(() => ListPaymentsStatusReason$inboundSchema))
    .optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => ListPaymentsPaymentLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListPaymentsPaymentOutput$Outbound = {
  resource: string;
  id: string;
  mode: string;
  description: string;
  amount: ListPaymentsAmount$Outbound;
  amountRefunded?: ListPaymentsAmountRefunded$Outbound | undefined;
  amountRemaining?: ListPaymentsAmountRemaining$Outbound | undefined;
  amountCaptured?: ListPaymentsAmountCaptured$Outbound | undefined;
  amountChargedBack?: ListPaymentsAmountChargedBack$Outbound | undefined;
  settlementAmount?: ListPaymentsSettlementAmount$Outbound | undefined;
  redirectUrl?: string | null | undefined;
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  lines?: Array<ListPaymentsLine$Outbound> | null | undefined;
  billingAddress?: ListPaymentsBillingAddress$Outbound | undefined;
  shippingAddress?: ListPaymentsShippingAddress$Outbound | undefined;
  locale?: string | null | undefined;
  countryCode?: string | null | undefined;
  method?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  metadata?:
    | ListPaymentsMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  captureMode?: string | null | undefined;
  captureDelay?: string | null | undefined;
  captureBefore?: string | null | undefined;
  applicationFee?: ListPaymentsApplicationFee$Outbound | null | undefined;
  routing?: Array<ListPaymentsRouting$Outbound> | null | undefined;
  sequenceType: string | null;
  subscriptionId?: string | null | undefined;
  mandateId?: string | null | undefined;
  customerId?: string | null | undefined;
  profileId: string;
  settlementId?: string | null | undefined;
  orderId?: string | null | undefined;
  status: string;
  statusReason?: ListPaymentsStatusReason$Outbound | null | undefined;
  isCancelable?: boolean | null | undefined;
  details?: { [k: string]: any } | null | undefined;
  createdAt: string;
  authorizedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  canceledAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredAt?: string | null | undefined;
  failedAt?: string | null | undefined;
  _links: ListPaymentsPaymentLinks$Outbound;
};

/** @internal */
export const ListPaymentsPaymentOutput$outboundSchema: z.ZodType<
  ListPaymentsPaymentOutput$Outbound,
  z.ZodTypeDef,
  ListPaymentsPaymentOutput
> = z.object({
  resource: z.string(),
  id: z.string(),
  mode: z.string(),
  description: z.string(),
  amount: z.lazy(() => ListPaymentsAmount$outboundSchema),
  amountRefunded: z.lazy(() => ListPaymentsAmountRefunded$outboundSchema)
    .optional(),
  amountRemaining: z.lazy(() => ListPaymentsAmountRemaining$outboundSchema)
    .optional(),
  amountCaptured: z.lazy(() => ListPaymentsAmountCaptured$outboundSchema)
    .optional(),
  amountChargedBack: z.lazy(() => ListPaymentsAmountChargedBack$outboundSchema)
    .optional(),
  settlementAmount: z.lazy(() => ListPaymentsSettlementAmount$outboundSchema)
    .optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(z.lazy(() => ListPaymentsLine$outboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => ListPaymentsBillingAddress$outboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => ListPaymentsShippingAddress$outboundSchema)
    .optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListPaymentsMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  captureMode: z.nullable(z.string()).optional(),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.nullable(
    z.lazy(() => ListPaymentsApplicationFee$outboundSchema),
  ).optional(),
  routing: z.nullable(z.array(z.lazy(() => ListPaymentsRouting$outboundSchema)))
    .optional(),
  sequenceType: z.nullable(z.string()),
  subscriptionId: z.nullable(z.string()).optional(),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.string(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string(),
  statusReason: z.nullable(
    z.lazy(() => ListPaymentsStatusReason$outboundSchema),
  ).optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
  createdAt: z.string(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => ListPaymentsPaymentLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsPaymentOutput$ {
  /** @deprecated use `ListPaymentsPaymentOutput$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsPaymentOutput$inboundSchema;
  /** @deprecated use `ListPaymentsPaymentOutput$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsPaymentOutput$outboundSchema;
  /** @deprecated use `ListPaymentsPaymentOutput$Outbound` instead. */
  export type Outbound = ListPaymentsPaymentOutput$Outbound;
}

export function listPaymentsPaymentOutputToJSON(
  listPaymentsPaymentOutput: ListPaymentsPaymentOutput,
): string {
  return JSON.stringify(
    ListPaymentsPaymentOutput$outboundSchema.parse(listPaymentsPaymentOutput),
  );
}

export function listPaymentsPaymentOutputFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsPaymentOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsPaymentOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsPaymentOutput' from JSON`,
  );
}

/** @internal */
export const ListPaymentsEmbedded$inboundSchema: z.ZodType<
  ListPaymentsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  payments: z.array(z.lazy(() => ListPaymentsPaymentOutput$inboundSchema))
    .optional(),
});

/** @internal */
export type ListPaymentsEmbedded$Outbound = {
  payments?: Array<ListPaymentsPaymentOutput$Outbound> | undefined;
};

/** @internal */
export const ListPaymentsEmbedded$outboundSchema: z.ZodType<
  ListPaymentsEmbedded$Outbound,
  z.ZodTypeDef,
  ListPaymentsEmbedded
> = z.object({
  payments: z.array(z.lazy(() => ListPaymentsPaymentOutput$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsEmbedded$ {
  /** @deprecated use `ListPaymentsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsEmbedded$inboundSchema;
  /** @deprecated use `ListPaymentsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsEmbedded$outboundSchema;
  /** @deprecated use `ListPaymentsEmbedded$Outbound` instead. */
  export type Outbound = ListPaymentsEmbedded$Outbound;
}

export function listPaymentsEmbeddedToJSON(
  listPaymentsEmbedded: ListPaymentsEmbedded,
): string {
  return JSON.stringify(
    ListPaymentsEmbedded$outboundSchema.parse(listPaymentsEmbedded),
  );
}

export function listPaymentsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListPaymentsSelf$inboundSchema: z.ZodType<
  ListPaymentsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsSelf$outboundSchema: z.ZodType<
  ListPaymentsSelf$Outbound,
  z.ZodTypeDef,
  ListPaymentsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsSelf$ {
  /** @deprecated use `ListPaymentsSelf$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsSelf$inboundSchema;
  /** @deprecated use `ListPaymentsSelf$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsSelf$outboundSchema;
  /** @deprecated use `ListPaymentsSelf$Outbound` instead. */
  export type Outbound = ListPaymentsSelf$Outbound;
}

export function listPaymentsSelfToJSON(
  listPaymentsSelf: ListPaymentsSelf,
): string {
  return JSON.stringify(
    ListPaymentsSelf$outboundSchema.parse(listPaymentsSelf),
  );
}

export function listPaymentsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsSelf' from JSON`,
  );
}

/** @internal */
export const ListPaymentsPrevious$inboundSchema: z.ZodType<
  ListPaymentsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListPaymentsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListPaymentsPrevious$outboundSchema: z.ZodType<
  ListPaymentsPrevious$Outbound,
  z.ZodTypeDef,
  ListPaymentsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsPrevious$ {
  /** @deprecated use `ListPaymentsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsPrevious$inboundSchema;
  /** @deprecated use `ListPaymentsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsPrevious$outboundSchema;
  /** @deprecated use `ListPaymentsPrevious$Outbound` instead. */
  export type Outbound = ListPaymentsPrevious$Outbound;
}

export function listPaymentsPreviousToJSON(
  listPaymentsPrevious: ListPaymentsPrevious,
): string {
  return JSON.stringify(
    ListPaymentsPrevious$outboundSchema.parse(listPaymentsPrevious),
  );
}

export function listPaymentsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsPrevious' from JSON`,
  );
}

/** @internal */
export const ListPaymentsNext$inboundSchema: z.ZodType<
  ListPaymentsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListPaymentsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListPaymentsNext$outboundSchema: z.ZodType<
  ListPaymentsNext$Outbound,
  z.ZodTypeDef,
  ListPaymentsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsNext$ {
  /** @deprecated use `ListPaymentsNext$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsNext$inboundSchema;
  /** @deprecated use `ListPaymentsNext$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsNext$outboundSchema;
  /** @deprecated use `ListPaymentsNext$Outbound` instead. */
  export type Outbound = ListPaymentsNext$Outbound;
}

export function listPaymentsNextToJSON(
  listPaymentsNext: ListPaymentsNext,
): string {
  return JSON.stringify(
    ListPaymentsNext$outboundSchema.parse(listPaymentsNext),
  );
}

export function listPaymentsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsNext' from JSON`,
  );
}

/** @internal */
export const ListPaymentsDocumentation$inboundSchema: z.ZodType<
  ListPaymentsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListPaymentsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListPaymentsDocumentation$outboundSchema: z.ZodType<
  ListPaymentsDocumentation$Outbound,
  z.ZodTypeDef,
  ListPaymentsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsDocumentation$ {
  /** @deprecated use `ListPaymentsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsDocumentation$inboundSchema;
  /** @deprecated use `ListPaymentsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsDocumentation$outboundSchema;
  /** @deprecated use `ListPaymentsDocumentation$Outbound` instead. */
  export type Outbound = ListPaymentsDocumentation$Outbound;
}

export function listPaymentsDocumentationToJSON(
  listPaymentsDocumentation: ListPaymentsDocumentation,
): string {
  return JSON.stringify(
    ListPaymentsDocumentation$outboundSchema.parse(listPaymentsDocumentation),
  );
}

export function listPaymentsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListPaymentsLinks$inboundSchema: z.ZodType<
  ListPaymentsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListPaymentsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListPaymentsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListPaymentsNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListPaymentsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListPaymentsLinks$Outbound = {
  self?: ListPaymentsSelf$Outbound | undefined;
  previous?: ListPaymentsPrevious$Outbound | null | undefined;
  next?: ListPaymentsNext$Outbound | null | undefined;
  documentation?: ListPaymentsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListPaymentsLinks$outboundSchema: z.ZodType<
  ListPaymentsLinks$Outbound,
  z.ZodTypeDef,
  ListPaymentsLinks
> = z.object({
  self: z.lazy(() => ListPaymentsSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListPaymentsPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListPaymentsNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListPaymentsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsLinks$ {
  /** @deprecated use `ListPaymentsLinks$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsLinks$inboundSchema;
  /** @deprecated use `ListPaymentsLinks$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsLinks$outboundSchema;
  /** @deprecated use `ListPaymentsLinks$Outbound` instead. */
  export type Outbound = ListPaymentsLinks$Outbound;
}

export function listPaymentsLinksToJSON(
  listPaymentsLinks: ListPaymentsLinks,
): string {
  return JSON.stringify(
    ListPaymentsLinks$outboundSchema.parse(listPaymentsLinks),
  );
}

export function listPaymentsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsLinks' from JSON`,
  );
}

/** @internal */
export const ListPaymentsResponse$inboundSchema: z.ZodType<
  ListPaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListPaymentsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListPaymentsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListPaymentsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListPaymentsEmbedded$Outbound | undefined;
  _links?: ListPaymentsLinks$Outbound | undefined;
};

/** @internal */
export const ListPaymentsResponse$outboundSchema: z.ZodType<
  ListPaymentsResponse$Outbound,
  z.ZodTypeDef,
  ListPaymentsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListPaymentsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListPaymentsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsResponse$ {
  /** @deprecated use `ListPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsResponse$inboundSchema;
  /** @deprecated use `ListPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsResponse$outboundSchema;
  /** @deprecated use `ListPaymentsResponse$Outbound` instead. */
  export type Outbound = ListPaymentsResponse$Outbound;
}

export function listPaymentsResponseToJSON(
  listPaymentsResponse: ListPaymentsResponse,
): string {
  return JSON.stringify(
    ListPaymentsResponse$outboundSchema.parse(listPaymentsResponse),
  );
}

export function listPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentsResponse' from JSON`,
  );
}
