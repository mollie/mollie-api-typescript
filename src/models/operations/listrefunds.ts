/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListRefundsRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type ListRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds: Array<models.EntityRefundResponse>;
};

/**
 * A list of refund objects. For a complete reference of the refund object, refer to the
 *
 * @remarks
 * [Get refund endpoint](get-refund) documentation.
 */
export type ListRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListRefundsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListRefundsRequest$inboundSchema: z.ZodType<
  ListRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListRefundsRequest$Outbound = {
  paymentId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  embed?: string | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListRefundsRequest$outboundSchema: z.ZodType<
  ListRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListRefundsRequest
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRequest$ {
  /** @deprecated use `ListRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRequest$inboundSchema;
  /** @deprecated use `ListRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRequest$outboundSchema;
  /** @deprecated use `ListRefundsRequest$Outbound` instead. */
  export type Outbound = ListRefundsRequest$Outbound;
}

export function listRefundsRequestToJSON(
  listRefundsRequest: ListRefundsRequest,
): string {
  return JSON.stringify(
    ListRefundsRequest$outboundSchema.parse(listRefundsRequest),
  );
}

export function listRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListRefundsEmbedded$inboundSchema: z.ZodType<
  ListRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(models.EntityRefundResponse$inboundSchema),
});

/** @internal */
export type ListRefundsEmbedded$Outbound = {
  refunds: Array<models.EntityRefundResponse$Outbound>;
};

/** @internal */
export const ListRefundsEmbedded$outboundSchema: z.ZodType<
  ListRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  ListRefundsEmbedded
> = z.object({
  refunds: z.array(models.EntityRefundResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsEmbedded$ {
  /** @deprecated use `ListRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListRefundsEmbedded$inboundSchema;
  /** @deprecated use `ListRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListRefundsEmbedded$outboundSchema;
  /** @deprecated use `ListRefundsEmbedded$Outbound` instead. */
  export type Outbound = ListRefundsEmbedded$Outbound;
}

export function listRefundsEmbeddedToJSON(
  listRefundsEmbedded: ListRefundsEmbedded,
): string {
  return JSON.stringify(
    ListRefundsEmbedded$outboundSchema.parse(listRefundsEmbedded),
  );
}

export function listRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListRefundsResponse$inboundSchema: z.ZodType<
  ListRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListRefundsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListRefundsResponse$Outbound = {
  count: number;
  _embedded: ListRefundsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListRefundsResponse$outboundSchema: z.ZodType<
  ListRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListRefundsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListRefundsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsResponse$ {
  /** @deprecated use `ListRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListRefundsResponse$inboundSchema;
  /** @deprecated use `ListRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListRefundsResponse$outboundSchema;
  /** @deprecated use `ListRefundsResponse$Outbound` instead. */
  export type Outbound = ListRefundsResponse$Outbound;
}

export function listRefundsResponseToJSON(
  listRefundsResponse: ListRefundsResponse,
): string {
  return JSON.stringify(
    ListRefundsResponse$outboundSchema.parse(listRefundsResponse),
  );
}

export function listRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsResponse' from JSON`,
  );
}
