/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This endpoint allows embedding related API items by appending the following values via the `embed` query string
 *
 * @remarks
 * parameter.
 */
export const ListRefundsEmbed = {
  Payment: "payment",
} as const;
/**
 * This endpoint allows embedding related API items by appending the following values via the `embed` query string
 *
 * @remarks
 * parameter.
 */
export type ListRefundsEmbed = ClosedEnum<typeof ListRefundsEmbed>;

export type ListRefundsRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string
   *
   * @remarks
   * parameter.
   */
  embed?: ListRefundsEmbed | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListRefundsNotFoundDocumentation = {
  href: string;
  type: string;
};

export type ListRefundsNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListRefundsNotFoundDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ListRefundsBadRequestDocumentation = {
  href: string;
  type: string;
};

export type ListRefundsBadRequestLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ListRefundsBadRequestDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const ListRefundsMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type ListRefundsMode = ClosedEnum<typeof ListRefundsMode>;

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
 *
 * @remarks
 * amount.
 */
export type ListRefundsAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
 * zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
 * the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the
 * [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type ListRefundsSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListRefundsMetadata = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type ListRefundsMetadataUnion =
  | ListRefundsMetadata
  | string
  | Array<string>;

/**
 * Refunds may take some time to get confirmed.
 */
export const ListRefundsStatus = {
  Queued: "queued",
  Pending: "pending",
  Processing: "processing",
  Refunded: "refunded",
  Failed: "failed",
  Canceled: "canceled",
} as const;
/**
 * Refunds may take some time to get confirmed.
 */
export type ListRefundsStatus = ClosedEnum<typeof ListRefundsStatus>;

/**
 * Specifies the reference type
 */
export const ListRefundsType = {
  AcquirerReference: "acquirer-reference",
} as const;
/**
 * Specifies the reference type
 */
export type ListRefundsType = ClosedEnum<typeof ListRefundsType>;

export type ListRefundsExternalReference = {
  /**
   * Specifies the reference type
   */
  type?: ListRefundsType | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * The amount that will be pulled back.
 */
export type ListRefundsRoutingReversalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Where the funds will be pulled back from.
 */
export type ListRefundsSource = {
  /**
   * Required for source type `organization`. The ID of the connected organization the funds should be pulled
   *
   * @remarks
   * back from.
   */
  organizationId?: string | undefined;
};

export type ListRefundsRoutingReversal = {
  /**
   * The amount that will be pulled back.
   */
  amount?: ListRefundsRoutingReversalAmount | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: ListRefundsSource | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListRefundsRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this refund belongs to.
 */
export type ListRefundsPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
 *
 * @remarks
 * yet settled.
 */
export type ListRefundsSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListRefundsRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type ListRefundsRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: ListRefundsRefundSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this refund belongs to.
   */
  payment: ListRefundsPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
   *
   * @remarks
   * yet settled.
   */
  settlement?: ListRefundsSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: ListRefundsRefundDocumentation;
};

export type ListRefundsRefund = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
   *
   * @remarks
   * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: ListRefundsMode | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
   *
   * @remarks
   * amount.
   */
  amount?: ListRefundsAmount | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
   * zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
   * the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the
   * [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: ListRefundsSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: ListRefundsMetadata | string | Array<string> | null | undefined;
  /**
   * The unique identifier of the payment this refund was created for.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   */
  status?: ListRefundsStatus | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: ListRefundsExternalReference | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
   * needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?: Array<ListRefundsRoutingReversal> | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListRefundsRefundLinks | undefined;
};

export type ListRefundsEmbedded = {
  /**
   * An array of refund objects.
   */
  refunds?: Array<ListRefundsRefund> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListRefundsSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The previous set of items, if available.
 */
export type ListRefundsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListRefundsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListRefundsDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListRefundsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListRefundsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListRefundsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListRefundsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListRefundsDocumentation | undefined;
};

/**
 * A list of refund objects. For a complete reference of the refund object, refer to the
 *
 * @remarks
 * [Get refund endpoint](get-refund) documentation.
 */
export type ListRefundsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListRefundsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListRefundsLinks | undefined;
};

/** @internal */
export const ListRefundsEmbed$inboundSchema: z.ZodNativeEnum<
  typeof ListRefundsEmbed
> = z.nativeEnum(ListRefundsEmbed);

/** @internal */
export const ListRefundsEmbed$outboundSchema: z.ZodNativeEnum<
  typeof ListRefundsEmbed
> = ListRefundsEmbed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsEmbed$ {
  /** @deprecated use `ListRefundsEmbed$inboundSchema` instead. */
  export const inboundSchema = ListRefundsEmbed$inboundSchema;
  /** @deprecated use `ListRefundsEmbed$outboundSchema` instead. */
  export const outboundSchema = ListRefundsEmbed$outboundSchema;
}

/** @internal */
export const ListRefundsRequest$inboundSchema: z.ZodType<
  ListRefundsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListRefundsEmbed$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListRefundsRequest$Outbound = {
  paymentId: string;
  from?: string | undefined;
  limit: number | null;
  embed?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const ListRefundsRequest$outboundSchema: z.ZodType<
  ListRefundsRequest$Outbound,
  z.ZodTypeDef,
  ListRefundsRequest
> = z.object({
  paymentId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int().default(50)),
  embed: ListRefundsEmbed$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRequest$ {
  /** @deprecated use `ListRefundsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRequest$inboundSchema;
  /** @deprecated use `ListRefundsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRequest$outboundSchema;
  /** @deprecated use `ListRefundsRequest$Outbound` instead. */
  export type Outbound = ListRefundsRequest$Outbound;
}

export function listRefundsRequestToJSON(
  listRefundsRequest: ListRefundsRequest,
): string {
  return JSON.stringify(
    ListRefundsRequest$outboundSchema.parse(listRefundsRequest),
  );
}

export function listRefundsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRequest' from JSON`,
  );
}

/** @internal */
export const ListRefundsNotFoundDocumentation$inboundSchema: z.ZodType<
  ListRefundsNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListRefundsNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListRefundsNotFoundDocumentation$outboundSchema: z.ZodType<
  ListRefundsNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  ListRefundsNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsNotFoundDocumentation$ {
  /** @deprecated use `ListRefundsNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListRefundsNotFoundDocumentation$inboundSchema;
  /** @deprecated use `ListRefundsNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListRefundsNotFoundDocumentation$outboundSchema;
  /** @deprecated use `ListRefundsNotFoundDocumentation$Outbound` instead. */
  export type Outbound = ListRefundsNotFoundDocumentation$Outbound;
}

export function listRefundsNotFoundDocumentationToJSON(
  listRefundsNotFoundDocumentation: ListRefundsNotFoundDocumentation,
): string {
  return JSON.stringify(
    ListRefundsNotFoundDocumentation$outboundSchema.parse(
      listRefundsNotFoundDocumentation,
    ),
  );
}

export function listRefundsNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListRefundsNotFoundLinks$inboundSchema: z.ZodType<
  ListRefundsNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListRefundsNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type ListRefundsNotFoundLinks$Outbound = {
  documentation: ListRefundsNotFoundDocumentation$Outbound;
};

/** @internal */
export const ListRefundsNotFoundLinks$outboundSchema: z.ZodType<
  ListRefundsNotFoundLinks$Outbound,
  z.ZodTypeDef,
  ListRefundsNotFoundLinks
> = z.object({
  documentation: z.lazy(() => ListRefundsNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsNotFoundLinks$ {
  /** @deprecated use `ListRefundsNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = ListRefundsNotFoundLinks$inboundSchema;
  /** @deprecated use `ListRefundsNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = ListRefundsNotFoundLinks$outboundSchema;
  /** @deprecated use `ListRefundsNotFoundLinks$Outbound` instead. */
  export type Outbound = ListRefundsNotFoundLinks$Outbound;
}

export function listRefundsNotFoundLinksToJSON(
  listRefundsNotFoundLinks: ListRefundsNotFoundLinks,
): string {
  return JSON.stringify(
    ListRefundsNotFoundLinks$outboundSchema.parse(listRefundsNotFoundLinks),
  );
}

export function listRefundsNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const ListRefundsBadRequestDocumentation$inboundSchema: z.ZodType<
  ListRefundsBadRequestDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListRefundsBadRequestDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListRefundsBadRequestDocumentation$outboundSchema: z.ZodType<
  ListRefundsBadRequestDocumentation$Outbound,
  z.ZodTypeDef,
  ListRefundsBadRequestDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsBadRequestDocumentation$ {
  /** @deprecated use `ListRefundsBadRequestDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListRefundsBadRequestDocumentation$inboundSchema;
  /** @deprecated use `ListRefundsBadRequestDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    ListRefundsBadRequestDocumentation$outboundSchema;
  /** @deprecated use `ListRefundsBadRequestDocumentation$Outbound` instead. */
  export type Outbound = ListRefundsBadRequestDocumentation$Outbound;
}

export function listRefundsBadRequestDocumentationToJSON(
  listRefundsBadRequestDocumentation: ListRefundsBadRequestDocumentation,
): string {
  return JSON.stringify(
    ListRefundsBadRequestDocumentation$outboundSchema.parse(
      listRefundsBadRequestDocumentation,
    ),
  );
}

export function listRefundsBadRequestDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsBadRequestDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListRefundsBadRequestDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsBadRequestDocumentation' from JSON`,
  );
}

/** @internal */
export const ListRefundsBadRequestLinks$inboundSchema: z.ZodType<
  ListRefundsBadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ListRefundsBadRequestDocumentation$inboundSchema),
});

/** @internal */
export type ListRefundsBadRequestLinks$Outbound = {
  documentation: ListRefundsBadRequestDocumentation$Outbound;
};

/** @internal */
export const ListRefundsBadRequestLinks$outboundSchema: z.ZodType<
  ListRefundsBadRequestLinks$Outbound,
  z.ZodTypeDef,
  ListRefundsBadRequestLinks
> = z.object({
  documentation: z.lazy(() =>
    ListRefundsBadRequestDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsBadRequestLinks$ {
  /** @deprecated use `ListRefundsBadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = ListRefundsBadRequestLinks$inboundSchema;
  /** @deprecated use `ListRefundsBadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = ListRefundsBadRequestLinks$outboundSchema;
  /** @deprecated use `ListRefundsBadRequestLinks$Outbound` instead. */
  export type Outbound = ListRefundsBadRequestLinks$Outbound;
}

export function listRefundsBadRequestLinksToJSON(
  listRefundsBadRequestLinks: ListRefundsBadRequestLinks,
): string {
  return JSON.stringify(
    ListRefundsBadRequestLinks$outboundSchema.parse(listRefundsBadRequestLinks),
  );
}

export function listRefundsBadRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsBadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsBadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsBadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ListRefundsMode$inboundSchema: z.ZodNativeEnum<
  typeof ListRefundsMode
> = z.nativeEnum(ListRefundsMode);

/** @internal */
export const ListRefundsMode$outboundSchema: z.ZodNativeEnum<
  typeof ListRefundsMode
> = ListRefundsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsMode$ {
  /** @deprecated use `ListRefundsMode$inboundSchema` instead. */
  export const inboundSchema = ListRefundsMode$inboundSchema;
  /** @deprecated use `ListRefundsMode$outboundSchema` instead. */
  export const outboundSchema = ListRefundsMode$outboundSchema;
}

/** @internal */
export const ListRefundsAmount$inboundSchema: z.ZodType<
  ListRefundsAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListRefundsAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListRefundsAmount$outboundSchema: z.ZodType<
  ListRefundsAmount$Outbound,
  z.ZodTypeDef,
  ListRefundsAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsAmount$ {
  /** @deprecated use `ListRefundsAmount$inboundSchema` instead. */
  export const inboundSchema = ListRefundsAmount$inboundSchema;
  /** @deprecated use `ListRefundsAmount$outboundSchema` instead. */
  export const outboundSchema = ListRefundsAmount$outboundSchema;
  /** @deprecated use `ListRefundsAmount$Outbound` instead. */
  export type Outbound = ListRefundsAmount$Outbound;
}

export function listRefundsAmountToJSON(
  listRefundsAmount: ListRefundsAmount,
): string {
  return JSON.stringify(
    ListRefundsAmount$outboundSchema.parse(listRefundsAmount),
  );
}

export function listRefundsAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsAmount' from JSON`,
  );
}

/** @internal */
export const ListRefundsSettlementAmount$inboundSchema: z.ZodType<
  ListRefundsSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListRefundsSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListRefundsSettlementAmount$outboundSchema: z.ZodType<
  ListRefundsSettlementAmount$Outbound,
  z.ZodTypeDef,
  ListRefundsSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsSettlementAmount$ {
  /** @deprecated use `ListRefundsSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = ListRefundsSettlementAmount$inboundSchema;
  /** @deprecated use `ListRefundsSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = ListRefundsSettlementAmount$outboundSchema;
  /** @deprecated use `ListRefundsSettlementAmount$Outbound` instead. */
  export type Outbound = ListRefundsSettlementAmount$Outbound;
}

export function listRefundsSettlementAmountToJSON(
  listRefundsSettlementAmount: ListRefundsSettlementAmount,
): string {
  return JSON.stringify(
    ListRefundsSettlementAmount$outboundSchema.parse(
      listRefundsSettlementAmount,
    ),
  );
}

export function listRefundsSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsSettlementAmount' from JSON`,
  );
}

/** @internal */
export const ListRefundsMetadata$inboundSchema: z.ZodType<
  ListRefundsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListRefundsMetadata$Outbound = {};

/** @internal */
export const ListRefundsMetadata$outboundSchema: z.ZodType<
  ListRefundsMetadata$Outbound,
  z.ZodTypeDef,
  ListRefundsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsMetadata$ {
  /** @deprecated use `ListRefundsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListRefundsMetadata$inboundSchema;
  /** @deprecated use `ListRefundsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListRefundsMetadata$outboundSchema;
  /** @deprecated use `ListRefundsMetadata$Outbound` instead. */
  export type Outbound = ListRefundsMetadata$Outbound;
}

export function listRefundsMetadataToJSON(
  listRefundsMetadata: ListRefundsMetadata,
): string {
  return JSON.stringify(
    ListRefundsMetadata$outboundSchema.parse(listRefundsMetadata),
  );
}

export function listRefundsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsMetadata' from JSON`,
  );
}

/** @internal */
export const ListRefundsMetadataUnion$inboundSchema: z.ZodType<
  ListRefundsMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListRefundsMetadata$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type ListRefundsMetadataUnion$Outbound =
  | ListRefundsMetadata$Outbound
  | string
  | Array<string>;

/** @internal */
export const ListRefundsMetadataUnion$outboundSchema: z.ZodType<
  ListRefundsMetadataUnion$Outbound,
  z.ZodTypeDef,
  ListRefundsMetadataUnion
> = z.union([
  z.lazy(() => ListRefundsMetadata$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsMetadataUnion$ {
  /** @deprecated use `ListRefundsMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = ListRefundsMetadataUnion$inboundSchema;
  /** @deprecated use `ListRefundsMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = ListRefundsMetadataUnion$outboundSchema;
  /** @deprecated use `ListRefundsMetadataUnion$Outbound` instead. */
  export type Outbound = ListRefundsMetadataUnion$Outbound;
}

export function listRefundsMetadataUnionToJSON(
  listRefundsMetadataUnion: ListRefundsMetadataUnion,
): string {
  return JSON.stringify(
    ListRefundsMetadataUnion$outboundSchema.parse(listRefundsMetadataUnion),
  );
}

export function listRefundsMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsMetadataUnion' from JSON`,
  );
}

/** @internal */
export const ListRefundsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListRefundsStatus
> = z.nativeEnum(ListRefundsStatus);

/** @internal */
export const ListRefundsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListRefundsStatus
> = ListRefundsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsStatus$ {
  /** @deprecated use `ListRefundsStatus$inboundSchema` instead. */
  export const inboundSchema = ListRefundsStatus$inboundSchema;
  /** @deprecated use `ListRefundsStatus$outboundSchema` instead. */
  export const outboundSchema = ListRefundsStatus$outboundSchema;
}

/** @internal */
export const ListRefundsType$inboundSchema: z.ZodNativeEnum<
  typeof ListRefundsType
> = z.nativeEnum(ListRefundsType);

/** @internal */
export const ListRefundsType$outboundSchema: z.ZodNativeEnum<
  typeof ListRefundsType
> = ListRefundsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsType$ {
  /** @deprecated use `ListRefundsType$inboundSchema` instead. */
  export const inboundSchema = ListRefundsType$inboundSchema;
  /** @deprecated use `ListRefundsType$outboundSchema` instead. */
  export const outboundSchema = ListRefundsType$outboundSchema;
}

/** @internal */
export const ListRefundsExternalReference$inboundSchema: z.ZodType<
  ListRefundsExternalReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListRefundsType$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type ListRefundsExternalReference$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const ListRefundsExternalReference$outboundSchema: z.ZodType<
  ListRefundsExternalReference$Outbound,
  z.ZodTypeDef,
  ListRefundsExternalReference
> = z.object({
  type: ListRefundsType$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsExternalReference$ {
  /** @deprecated use `ListRefundsExternalReference$inboundSchema` instead. */
  export const inboundSchema = ListRefundsExternalReference$inboundSchema;
  /** @deprecated use `ListRefundsExternalReference$outboundSchema` instead. */
  export const outboundSchema = ListRefundsExternalReference$outboundSchema;
  /** @deprecated use `ListRefundsExternalReference$Outbound` instead. */
  export type Outbound = ListRefundsExternalReference$Outbound;
}

export function listRefundsExternalReferenceToJSON(
  listRefundsExternalReference: ListRefundsExternalReference,
): string {
  return JSON.stringify(
    ListRefundsExternalReference$outboundSchema.parse(
      listRefundsExternalReference,
    ),
  );
}

export function listRefundsExternalReferenceFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsExternalReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsExternalReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsExternalReference' from JSON`,
  );
}

/** @internal */
export const ListRefundsRoutingReversalAmount$inboundSchema: z.ZodType<
  ListRefundsRoutingReversalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListRefundsRoutingReversalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListRefundsRoutingReversalAmount$outboundSchema: z.ZodType<
  ListRefundsRoutingReversalAmount$Outbound,
  z.ZodTypeDef,
  ListRefundsRoutingReversalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRoutingReversalAmount$ {
  /** @deprecated use `ListRefundsRoutingReversalAmount$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRoutingReversalAmount$inboundSchema;
  /** @deprecated use `ListRefundsRoutingReversalAmount$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRoutingReversalAmount$outboundSchema;
  /** @deprecated use `ListRefundsRoutingReversalAmount$Outbound` instead. */
  export type Outbound = ListRefundsRoutingReversalAmount$Outbound;
}

export function listRefundsRoutingReversalAmountToJSON(
  listRefundsRoutingReversalAmount: ListRefundsRoutingReversalAmount,
): string {
  return JSON.stringify(
    ListRefundsRoutingReversalAmount$outboundSchema.parse(
      listRefundsRoutingReversalAmount,
    ),
  );
}

export function listRefundsRoutingReversalAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRoutingReversalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRoutingReversalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRoutingReversalAmount' from JSON`,
  );
}

/** @internal */
export const ListRefundsSource$inboundSchema: z.ZodType<
  ListRefundsSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string().optional(),
});

/** @internal */
export type ListRefundsSource$Outbound = {
  organizationId?: string | undefined;
};

/** @internal */
export const ListRefundsSource$outboundSchema: z.ZodType<
  ListRefundsSource$Outbound,
  z.ZodTypeDef,
  ListRefundsSource
> = z.object({
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsSource$ {
  /** @deprecated use `ListRefundsSource$inboundSchema` instead. */
  export const inboundSchema = ListRefundsSource$inboundSchema;
  /** @deprecated use `ListRefundsSource$outboundSchema` instead. */
  export const outboundSchema = ListRefundsSource$outboundSchema;
  /** @deprecated use `ListRefundsSource$Outbound` instead. */
  export type Outbound = ListRefundsSource$Outbound;
}

export function listRefundsSourceToJSON(
  listRefundsSource: ListRefundsSource,
): string {
  return JSON.stringify(
    ListRefundsSource$outboundSchema.parse(listRefundsSource),
  );
}

export function listRefundsSourceFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsSource' from JSON`,
  );
}

/** @internal */
export const ListRefundsRoutingReversal$inboundSchema: z.ZodType<
  ListRefundsRoutingReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => ListRefundsRoutingReversalAmount$inboundSchema)
    .optional(),
  source: z.lazy(() => ListRefundsSource$inboundSchema).optional(),
});

/** @internal */
export type ListRefundsRoutingReversal$Outbound = {
  amount?: ListRefundsRoutingReversalAmount$Outbound | undefined;
  source?: ListRefundsSource$Outbound | undefined;
};

/** @internal */
export const ListRefundsRoutingReversal$outboundSchema: z.ZodType<
  ListRefundsRoutingReversal$Outbound,
  z.ZodTypeDef,
  ListRefundsRoutingReversal
> = z.object({
  amount: z.lazy(() => ListRefundsRoutingReversalAmount$outboundSchema)
    .optional(),
  source: z.lazy(() => ListRefundsSource$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRoutingReversal$ {
  /** @deprecated use `ListRefundsRoutingReversal$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRoutingReversal$inboundSchema;
  /** @deprecated use `ListRefundsRoutingReversal$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRoutingReversal$outboundSchema;
  /** @deprecated use `ListRefundsRoutingReversal$Outbound` instead. */
  export type Outbound = ListRefundsRoutingReversal$Outbound;
}

export function listRefundsRoutingReversalToJSON(
  listRefundsRoutingReversal: ListRefundsRoutingReversal,
): string {
  return JSON.stringify(
    ListRefundsRoutingReversal$outboundSchema.parse(listRefundsRoutingReversal),
  );
}

export function listRefundsRoutingReversalFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRoutingReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRoutingReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRoutingReversal' from JSON`,
  );
}

/** @internal */
export const ListRefundsRefundSelf$inboundSchema: z.ZodType<
  ListRefundsRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListRefundsRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListRefundsRefundSelf$outboundSchema: z.ZodType<
  ListRefundsRefundSelf$Outbound,
  z.ZodTypeDef,
  ListRefundsRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRefundSelf$ {
  /** @deprecated use `ListRefundsRefundSelf$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRefundSelf$inboundSchema;
  /** @deprecated use `ListRefundsRefundSelf$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRefundSelf$outboundSchema;
  /** @deprecated use `ListRefundsRefundSelf$Outbound` instead. */
  export type Outbound = ListRefundsRefundSelf$Outbound;
}

export function listRefundsRefundSelfToJSON(
  listRefundsRefundSelf: ListRefundsRefundSelf,
): string {
  return JSON.stringify(
    ListRefundsRefundSelf$outboundSchema.parse(listRefundsRefundSelf),
  );
}

export function listRefundsRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRefundSelf' from JSON`,
  );
}

/** @internal */
export const ListRefundsPayment$inboundSchema: z.ZodType<
  ListRefundsPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListRefundsPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListRefundsPayment$outboundSchema: z.ZodType<
  ListRefundsPayment$Outbound,
  z.ZodTypeDef,
  ListRefundsPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsPayment$ {
  /** @deprecated use `ListRefundsPayment$inboundSchema` instead. */
  export const inboundSchema = ListRefundsPayment$inboundSchema;
  /** @deprecated use `ListRefundsPayment$outboundSchema` instead. */
  export const outboundSchema = ListRefundsPayment$outboundSchema;
  /** @deprecated use `ListRefundsPayment$Outbound` instead. */
  export type Outbound = ListRefundsPayment$Outbound;
}

export function listRefundsPaymentToJSON(
  listRefundsPayment: ListRefundsPayment,
): string {
  return JSON.stringify(
    ListRefundsPayment$outboundSchema.parse(listRefundsPayment),
  );
}

export function listRefundsPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsPayment' from JSON`,
  );
}

/** @internal */
export const ListRefundsSettlement$inboundSchema: z.ZodType<
  ListRefundsSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListRefundsSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListRefundsSettlement$outboundSchema: z.ZodType<
  ListRefundsSettlement$Outbound,
  z.ZodTypeDef,
  ListRefundsSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsSettlement$ {
  /** @deprecated use `ListRefundsSettlement$inboundSchema` instead. */
  export const inboundSchema = ListRefundsSettlement$inboundSchema;
  /** @deprecated use `ListRefundsSettlement$outboundSchema` instead. */
  export const outboundSchema = ListRefundsSettlement$outboundSchema;
  /** @deprecated use `ListRefundsSettlement$Outbound` instead. */
  export type Outbound = ListRefundsSettlement$Outbound;
}

export function listRefundsSettlementToJSON(
  listRefundsSettlement: ListRefundsSettlement,
): string {
  return JSON.stringify(
    ListRefundsSettlement$outboundSchema.parse(listRefundsSettlement),
  );
}

export function listRefundsSettlementFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsSettlement' from JSON`,
  );
}

/** @internal */
export const ListRefundsRefundDocumentation$inboundSchema: z.ZodType<
  ListRefundsRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListRefundsRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListRefundsRefundDocumentation$outboundSchema: z.ZodType<
  ListRefundsRefundDocumentation$Outbound,
  z.ZodTypeDef,
  ListRefundsRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRefundDocumentation$ {
  /** @deprecated use `ListRefundsRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRefundDocumentation$inboundSchema;
  /** @deprecated use `ListRefundsRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRefundDocumentation$outboundSchema;
  /** @deprecated use `ListRefundsRefundDocumentation$Outbound` instead. */
  export type Outbound = ListRefundsRefundDocumentation$Outbound;
}

export function listRefundsRefundDocumentationToJSON(
  listRefundsRefundDocumentation: ListRefundsRefundDocumentation,
): string {
  return JSON.stringify(
    ListRefundsRefundDocumentation$outboundSchema.parse(
      listRefundsRefundDocumentation,
    ),
  );
}

export function listRefundsRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRefundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRefundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const ListRefundsRefundLinks$inboundSchema: z.ZodType<
  ListRefundsRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListRefundsRefundSelf$inboundSchema),
  payment: z.lazy(() => ListRefundsPayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => ListRefundsSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() => ListRefundsRefundDocumentation$inboundSchema),
});

/** @internal */
export type ListRefundsRefundLinks$Outbound = {
  self: ListRefundsRefundSelf$Outbound;
  payment: ListRefundsPayment$Outbound;
  settlement?: ListRefundsSettlement$Outbound | null | undefined;
  documentation: ListRefundsRefundDocumentation$Outbound;
};

/** @internal */
export const ListRefundsRefundLinks$outboundSchema: z.ZodType<
  ListRefundsRefundLinks$Outbound,
  z.ZodTypeDef,
  ListRefundsRefundLinks
> = z.object({
  self: z.lazy(() => ListRefundsRefundSelf$outboundSchema),
  payment: z.lazy(() => ListRefundsPayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => ListRefundsSettlement$outboundSchema))
    .optional(),
  documentation: z.lazy(() => ListRefundsRefundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRefundLinks$ {
  /** @deprecated use `ListRefundsRefundLinks$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRefundLinks$inboundSchema;
  /** @deprecated use `ListRefundsRefundLinks$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRefundLinks$outboundSchema;
  /** @deprecated use `ListRefundsRefundLinks$Outbound` instead. */
  export type Outbound = ListRefundsRefundLinks$Outbound;
}

export function listRefundsRefundLinksToJSON(
  listRefundsRefundLinks: ListRefundsRefundLinks,
): string {
  return JSON.stringify(
    ListRefundsRefundLinks$outboundSchema.parse(listRefundsRefundLinks),
  );
}

export function listRefundsRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRefundLinks' from JSON`,
  );
}

/** @internal */
export const ListRefundsRefund$inboundSchema: z.ZodType<
  ListRefundsRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: ListRefundsMode$inboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListRefundsAmount$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListRefundsSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListRefundsMetadata$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: ListRefundsStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() => ListRefundsExternalReference$inboundSchema)
    .optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => ListRefundsRoutingReversal$inboundSchema)),
  ).optional(),
  _links: z.lazy(() => ListRefundsRefundLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ListRefundsRefund$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: ListRefundsAmount$Outbound | undefined;
  settlementAmount?: ListRefundsSettlementAmount$Outbound | null | undefined;
  metadata?:
    | ListRefundsMetadata$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?: ListRefundsExternalReference$Outbound | undefined;
  routingReversals?:
    | Array<ListRefundsRoutingReversal$Outbound>
    | null
    | undefined;
  _links?: ListRefundsRefundLinks$Outbound | undefined;
};

/** @internal */
export const ListRefundsRefund$outboundSchema: z.ZodType<
  ListRefundsRefund$Outbound,
  z.ZodTypeDef,
  ListRefundsRefund
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: ListRefundsMode$outboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => ListRefundsAmount$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => ListRefundsSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => ListRefundsMetadata$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: ListRefundsStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() => ListRefundsExternalReference$outboundSchema)
    .optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => ListRefundsRoutingReversal$outboundSchema)),
  ).optional(),
  links: z.lazy(() => ListRefundsRefundLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsRefund$ {
  /** @deprecated use `ListRefundsRefund$inboundSchema` instead. */
  export const inboundSchema = ListRefundsRefund$inboundSchema;
  /** @deprecated use `ListRefundsRefund$outboundSchema` instead. */
  export const outboundSchema = ListRefundsRefund$outboundSchema;
  /** @deprecated use `ListRefundsRefund$Outbound` instead. */
  export type Outbound = ListRefundsRefund$Outbound;
}

export function listRefundsRefundToJSON(
  listRefundsRefund: ListRefundsRefund,
): string {
  return JSON.stringify(
    ListRefundsRefund$outboundSchema.parse(listRefundsRefund),
  );
}

export function listRefundsRefundFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsRefund' from JSON`,
  );
}

/** @internal */
export const ListRefundsEmbedded$inboundSchema: z.ZodType<
  ListRefundsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(z.lazy(() => ListRefundsRefund$inboundSchema)).optional(),
});

/** @internal */
export type ListRefundsEmbedded$Outbound = {
  refunds?: Array<ListRefundsRefund$Outbound> | undefined;
};

/** @internal */
export const ListRefundsEmbedded$outboundSchema: z.ZodType<
  ListRefundsEmbedded$Outbound,
  z.ZodTypeDef,
  ListRefundsEmbedded
> = z.object({
  refunds: z.array(z.lazy(() => ListRefundsRefund$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsEmbedded$ {
  /** @deprecated use `ListRefundsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListRefundsEmbedded$inboundSchema;
  /** @deprecated use `ListRefundsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListRefundsEmbedded$outboundSchema;
  /** @deprecated use `ListRefundsEmbedded$Outbound` instead. */
  export type Outbound = ListRefundsEmbedded$Outbound;
}

export function listRefundsEmbeddedToJSON(
  listRefundsEmbedded: ListRefundsEmbedded,
): string {
  return JSON.stringify(
    ListRefundsEmbedded$outboundSchema.parse(listRefundsEmbedded),
  );
}

export function listRefundsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListRefundsSelf$inboundSchema: z.ZodType<
  ListRefundsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListRefundsSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListRefundsSelf$outboundSchema: z.ZodType<
  ListRefundsSelf$Outbound,
  z.ZodTypeDef,
  ListRefundsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsSelf$ {
  /** @deprecated use `ListRefundsSelf$inboundSchema` instead. */
  export const inboundSchema = ListRefundsSelf$inboundSchema;
  /** @deprecated use `ListRefundsSelf$outboundSchema` instead. */
  export const outboundSchema = ListRefundsSelf$outboundSchema;
  /** @deprecated use `ListRefundsSelf$Outbound` instead. */
  export type Outbound = ListRefundsSelf$Outbound;
}

export function listRefundsSelfToJSON(
  listRefundsSelf: ListRefundsSelf,
): string {
  return JSON.stringify(ListRefundsSelf$outboundSchema.parse(listRefundsSelf));
}

export function listRefundsSelfFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsSelf' from JSON`,
  );
}

/** @internal */
export const ListRefundsPrevious$inboundSchema: z.ZodType<
  ListRefundsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListRefundsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListRefundsPrevious$outboundSchema: z.ZodType<
  ListRefundsPrevious$Outbound,
  z.ZodTypeDef,
  ListRefundsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsPrevious$ {
  /** @deprecated use `ListRefundsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListRefundsPrevious$inboundSchema;
  /** @deprecated use `ListRefundsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListRefundsPrevious$outboundSchema;
  /** @deprecated use `ListRefundsPrevious$Outbound` instead. */
  export type Outbound = ListRefundsPrevious$Outbound;
}

export function listRefundsPreviousToJSON(
  listRefundsPrevious: ListRefundsPrevious,
): string {
  return JSON.stringify(
    ListRefundsPrevious$outboundSchema.parse(listRefundsPrevious),
  );
}

export function listRefundsPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsPrevious' from JSON`,
  );
}

/** @internal */
export const ListRefundsNext$inboundSchema: z.ZodType<
  ListRefundsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListRefundsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListRefundsNext$outboundSchema: z.ZodType<
  ListRefundsNext$Outbound,
  z.ZodTypeDef,
  ListRefundsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsNext$ {
  /** @deprecated use `ListRefundsNext$inboundSchema` instead. */
  export const inboundSchema = ListRefundsNext$inboundSchema;
  /** @deprecated use `ListRefundsNext$outboundSchema` instead. */
  export const outboundSchema = ListRefundsNext$outboundSchema;
  /** @deprecated use `ListRefundsNext$Outbound` instead. */
  export type Outbound = ListRefundsNext$Outbound;
}

export function listRefundsNextToJSON(
  listRefundsNext: ListRefundsNext,
): string {
  return JSON.stringify(ListRefundsNext$outboundSchema.parse(listRefundsNext));
}

export function listRefundsNextFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsNext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsNext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsNext' from JSON`,
  );
}

/** @internal */
export const ListRefundsDocumentation$inboundSchema: z.ZodType<
  ListRefundsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ListRefundsDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ListRefundsDocumentation$outboundSchema: z.ZodType<
  ListRefundsDocumentation$Outbound,
  z.ZodTypeDef,
  ListRefundsDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsDocumentation$ {
  /** @deprecated use `ListRefundsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListRefundsDocumentation$inboundSchema;
  /** @deprecated use `ListRefundsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListRefundsDocumentation$outboundSchema;
  /** @deprecated use `ListRefundsDocumentation$Outbound` instead. */
  export type Outbound = ListRefundsDocumentation$Outbound;
}

export function listRefundsDocumentationToJSON(
  listRefundsDocumentation: ListRefundsDocumentation,
): string {
  return JSON.stringify(
    ListRefundsDocumentation$outboundSchema.parse(listRefundsDocumentation),
  );
}

export function listRefundsDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsDocumentation' from JSON`,
  );
}

/** @internal */
export const ListRefundsLinks$inboundSchema: z.ZodType<
  ListRefundsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListRefundsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListRefundsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListRefundsNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListRefundsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListRefundsLinks$Outbound = {
  self?: ListRefundsSelf$Outbound | undefined;
  previous?: ListRefundsPrevious$Outbound | null | undefined;
  next?: ListRefundsNext$Outbound | null | undefined;
  documentation?: ListRefundsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListRefundsLinks$outboundSchema: z.ZodType<
  ListRefundsLinks$Outbound,
  z.ZodTypeDef,
  ListRefundsLinks
> = z.object({
  self: z.lazy(() => ListRefundsSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListRefundsPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListRefundsNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListRefundsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsLinks$ {
  /** @deprecated use `ListRefundsLinks$inboundSchema` instead. */
  export const inboundSchema = ListRefundsLinks$inboundSchema;
  /** @deprecated use `ListRefundsLinks$outboundSchema` instead. */
  export const outboundSchema = ListRefundsLinks$outboundSchema;
  /** @deprecated use `ListRefundsLinks$Outbound` instead. */
  export type Outbound = ListRefundsLinks$Outbound;
}

export function listRefundsLinksToJSON(
  listRefundsLinks: ListRefundsLinks,
): string {
  return JSON.stringify(
    ListRefundsLinks$outboundSchema.parse(listRefundsLinks),
  );
}

export function listRefundsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsLinks' from JSON`,
  );
}

/** @internal */
export const ListRefundsResponse$inboundSchema: z.ZodType<
  ListRefundsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListRefundsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListRefundsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListRefundsResponse$Outbound = {
  count?: number | undefined;
  _embedded?: ListRefundsEmbedded$Outbound | undefined;
  _links?: ListRefundsLinks$Outbound | undefined;
};

/** @internal */
export const ListRefundsResponse$outboundSchema: z.ZodType<
  ListRefundsResponse$Outbound,
  z.ZodTypeDef,
  ListRefundsResponse
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListRefundsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListRefundsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRefundsResponse$ {
  /** @deprecated use `ListRefundsResponse$inboundSchema` instead. */
  export const inboundSchema = ListRefundsResponse$inboundSchema;
  /** @deprecated use `ListRefundsResponse$outboundSchema` instead. */
  export const outboundSchema = ListRefundsResponse$outboundSchema;
  /** @deprecated use `ListRefundsResponse$Outbound` instead. */
  export type Outbound = ListRefundsResponse$Outbound;
}

export function listRefundsResponseToJSON(
  listRefundsResponse: ListRefundsResponse,
): string {
  return JSON.stringify(
    ListRefundsResponse$outboundSchema.parse(listRefundsResponse),
  );
}

export function listRefundsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListRefundsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRefundsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRefundsResponse' from JSON`,
  );
}
