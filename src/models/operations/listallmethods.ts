/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListAllMethodsRequest = {
  /**
   * Response language
   */
  locale?: models.Locale | null | undefined;
  /**
   * If supplied, only payment methods that support the amount and currency
   *
   * @remarks
   * are returned.
   *
   * Example: `/v2/methods/all?amount[value]=100.00&amount[currency]=USD`
   */
  amount?: models.Amount | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   */
  include?: string | null | undefined;
  /**
   * Set this parameter to `first` to only return the methods that
   *
   * @remarks
   * can be used for the first payment of a recurring sequence.
   *
   * Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
   */
  sequenceType?: models.SequenceType | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve the resources for.
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
   * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListAllMethodsEmbedded = {
  /**
   * An array of payment method objects. For a complete
   *
   * @remarks
   * reference of the payment method object, refer to the [Get payment method endpoint](get-method)
   * documentation.
   */
  methods: Array<models.EntityMethodAll>;
};

export type ListAllMethodsLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: models.Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: models.Url;
};

/**
 * A list of payment method objects. For a complete reference of the
 *
 * @remarks
 * payment method object, refer to the [Get payment method endpoint](get-method) documentation.
 */
export type ListAllMethodsResponse = {
  /**
   * The number of payment method objects in this result set. Results are **not** paginated.
   */
  count: number;
  embedded: ListAllMethodsEmbedded;
  links: ListAllMethodsLinks;
};

/** @internal */
export const ListAllMethodsRequest$inboundSchema: z.ZodType<
  ListAllMethodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  locale: z.nullable(models.Locale$inboundSchema).optional(),
  amount: models.Amount$inboundSchema.optional(),
  include: z.nullable(z.string()).optional(),
  sequenceType: models.SequenceType$inboundSchema.optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListAllMethodsRequest$Outbound = {
  locale?: string | null | undefined;
  amount?: models.Amount$Outbound | undefined;
  include?: string | null | undefined;
  sequenceType?: string | undefined;
  profileId?: string | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListAllMethodsRequest$outboundSchema: z.ZodType<
  ListAllMethodsRequest$Outbound,
  z.ZodTypeDef,
  ListAllMethodsRequest
> = z.object({
  locale: z.nullable(models.Locale$outboundSchema).optional(),
  amount: models.Amount$outboundSchema.optional(),
  include: z.nullable(z.string()).optional(),
  sequenceType: models.SequenceType$outboundSchema.optional(),
  profileId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsRequest$ {
  /** @deprecated use `ListAllMethodsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsRequest$inboundSchema;
  /** @deprecated use `ListAllMethodsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsRequest$outboundSchema;
  /** @deprecated use `ListAllMethodsRequest$Outbound` instead. */
  export type Outbound = ListAllMethodsRequest$Outbound;
}

export function listAllMethodsRequestToJSON(
  listAllMethodsRequest: ListAllMethodsRequest,
): string {
  return JSON.stringify(
    ListAllMethodsRequest$outboundSchema.parse(listAllMethodsRequest),
  );
}

export function listAllMethodsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllMethodsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllMethodsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllMethodsRequest' from JSON`,
  );
}

/** @internal */
export const ListAllMethodsEmbedded$inboundSchema: z.ZodType<
  ListAllMethodsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  methods: z.array(models.EntityMethodAll$inboundSchema),
});

/** @internal */
export type ListAllMethodsEmbedded$Outbound = {
  methods: Array<models.EntityMethodAll$Outbound>;
};

/** @internal */
export const ListAllMethodsEmbedded$outboundSchema: z.ZodType<
  ListAllMethodsEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllMethodsEmbedded
> = z.object({
  methods: z.array(models.EntityMethodAll$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsEmbedded$ {
  /** @deprecated use `ListAllMethodsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsEmbedded$inboundSchema;
  /** @deprecated use `ListAllMethodsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsEmbedded$outboundSchema;
  /** @deprecated use `ListAllMethodsEmbedded$Outbound` instead. */
  export type Outbound = ListAllMethodsEmbedded$Outbound;
}

export function listAllMethodsEmbeddedToJSON(
  listAllMethodsEmbedded: ListAllMethodsEmbedded,
): string {
  return JSON.stringify(
    ListAllMethodsEmbedded$outboundSchema.parse(listAllMethodsEmbedded),
  );
}

export function listAllMethodsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListAllMethodsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllMethodsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllMethodsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListAllMethodsLinks$inboundSchema: z.ZodType<
  ListAllMethodsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema,
  documentation: models.Url$inboundSchema,
});

/** @internal */
export type ListAllMethodsLinks$Outbound = {
  self: models.Url$Outbound;
  documentation: models.Url$Outbound;
};

/** @internal */
export const ListAllMethodsLinks$outboundSchema: z.ZodType<
  ListAllMethodsLinks$Outbound,
  z.ZodTypeDef,
  ListAllMethodsLinks
> = z.object({
  self: models.Url$outboundSchema,
  documentation: models.Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsLinks$ {
  /** @deprecated use `ListAllMethodsLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsLinks$inboundSchema;
  /** @deprecated use `ListAllMethodsLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsLinks$outboundSchema;
  /** @deprecated use `ListAllMethodsLinks$Outbound` instead. */
  export type Outbound = ListAllMethodsLinks$Outbound;
}

export function listAllMethodsLinksToJSON(
  listAllMethodsLinks: ListAllMethodsLinks,
): string {
  return JSON.stringify(
    ListAllMethodsLinks$outboundSchema.parse(listAllMethodsLinks),
  );
}

export function listAllMethodsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListAllMethodsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllMethodsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllMethodsLinks' from JSON`,
  );
}

/** @internal */
export const ListAllMethodsResponse$inboundSchema: z.ZodType<
  ListAllMethodsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListAllMethodsEmbedded$inboundSchema),
  _links: z.lazy(() => ListAllMethodsLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllMethodsResponse$Outbound = {
  count: number;
  _embedded: ListAllMethodsEmbedded$Outbound;
  _links: ListAllMethodsLinks$Outbound;
};

/** @internal */
export const ListAllMethodsResponse$outboundSchema: z.ZodType<
  ListAllMethodsResponse$Outbound,
  z.ZodTypeDef,
  ListAllMethodsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListAllMethodsEmbedded$outboundSchema),
  links: z.lazy(() => ListAllMethodsLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsResponse$ {
  /** @deprecated use `ListAllMethodsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsResponse$inboundSchema;
  /** @deprecated use `ListAllMethodsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsResponse$outboundSchema;
  /** @deprecated use `ListAllMethodsResponse$Outbound` instead. */
  export type Outbound = ListAllMethodsResponse$Outbound;
}

export function listAllMethodsResponseToJSON(
  listAllMethodsResponse: ListAllMethodsResponse,
): string {
  return JSON.stringify(
    ListAllMethodsResponse$outboundSchema.parse(listAllMethodsResponse),
  );
}

export function listAllMethodsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllMethodsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllMethodsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllMethodsResponse' from JSON`,
  );
}
