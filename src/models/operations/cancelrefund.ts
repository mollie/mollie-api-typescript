/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelRefundRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide the ID of the related refund.
   */
  refundId: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CancelRefundDocumentation = {
  href: string;
  type: string;
};

export type CancelRefundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CancelRefundDocumentation;
};

/** @internal */
export const CancelRefundRequest$inboundSchema: z.ZodType<
  CancelRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  refundId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CancelRefundRequest$Outbound = {
  paymentId: string;
  refundId: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CancelRefundRequest$outboundSchema: z.ZodType<
  CancelRefundRequest$Outbound,
  z.ZodTypeDef,
  CancelRefundRequest
> = z.object({
  paymentId: z.string(),
  refundId: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelRefundRequest$ {
  /** @deprecated use `CancelRefundRequest$inboundSchema` instead. */
  export const inboundSchema = CancelRefundRequest$inboundSchema;
  /** @deprecated use `CancelRefundRequest$outboundSchema` instead. */
  export const outboundSchema = CancelRefundRequest$outboundSchema;
  /** @deprecated use `CancelRefundRequest$Outbound` instead. */
  export type Outbound = CancelRefundRequest$Outbound;
}

export function cancelRefundRequestToJSON(
  cancelRefundRequest: CancelRefundRequest,
): string {
  return JSON.stringify(
    CancelRefundRequest$outboundSchema.parse(cancelRefundRequest),
  );
}

export function cancelRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelRefundRequest' from JSON`,
  );
}

/** @internal */
export const CancelRefundDocumentation$inboundSchema: z.ZodType<
  CancelRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CancelRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CancelRefundDocumentation$outboundSchema: z.ZodType<
  CancelRefundDocumentation$Outbound,
  z.ZodTypeDef,
  CancelRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelRefundDocumentation$ {
  /** @deprecated use `CancelRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema = CancelRefundDocumentation$inboundSchema;
  /** @deprecated use `CancelRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema = CancelRefundDocumentation$outboundSchema;
  /** @deprecated use `CancelRefundDocumentation$Outbound` instead. */
  export type Outbound = CancelRefundDocumentation$Outbound;
}

export function cancelRefundDocumentationToJSON(
  cancelRefundDocumentation: CancelRefundDocumentation,
): string {
  return JSON.stringify(
    CancelRefundDocumentation$outboundSchema.parse(cancelRefundDocumentation),
  );
}

export function cancelRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CancelRefundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelRefundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const CancelRefundLinks$inboundSchema: z.ZodType<
  CancelRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => CancelRefundDocumentation$inboundSchema),
});

/** @internal */
export type CancelRefundLinks$Outbound = {
  documentation: CancelRefundDocumentation$Outbound;
};

/** @internal */
export const CancelRefundLinks$outboundSchema: z.ZodType<
  CancelRefundLinks$Outbound,
  z.ZodTypeDef,
  CancelRefundLinks
> = z.object({
  documentation: z.lazy(() => CancelRefundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelRefundLinks$ {
  /** @deprecated use `CancelRefundLinks$inboundSchema` instead. */
  export const inboundSchema = CancelRefundLinks$inboundSchema;
  /** @deprecated use `CancelRefundLinks$outboundSchema` instead. */
  export const outboundSchema = CancelRefundLinks$outboundSchema;
  /** @deprecated use `CancelRefundLinks$Outbound` instead. */
  export type Outbound = CancelRefundLinks$Outbound;
}

export function cancelRefundLinksToJSON(
  cancelRefundLinks: CancelRefundLinks,
): string {
  return JSON.stringify(
    CancelRefundLinks$outboundSchema.parse(cancelRefundLinks),
  );
}

export function cancelRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CancelRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelRefundLinks' from JSON`,
  );
}
