/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred
 *
 * @remarks
 * language of the logged in merchant will be used and this parameter is ignored.
 *
 * When this parameter is omitted, the browser language will be used instead.
 */
export const CreateClientLinkLocale = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred
 *
 * @remarks
 * language of the logged in merchant will be used and this parameter is ignored.
 *
 * When this parameter is omitted, the browser language will be used instead.
 */
export type CreateClientLinkLocale = ClosedEnum<typeof CreateClientLinkLocale>;

/**
 * Personal data of your customer.
 */
export type Owner = {
  /**
   * The email address of your customer.
   */
  email: string;
  /**
   * The given name (first name) of your customer.
   */
  givenName: string;
  /**
   * The family name (surname) of your customer.
   */
  familyName: string;
  /**
   * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred
   *
   * @remarks
   * language of the logged in merchant will be used and this parameter is ignored.
   *
   * When this parameter is omitted, the browser language will be used instead.
   */
  locale?: CreateClientLinkLocale | null | undefined;
};

/**
 * Address of the organization.
 */
export type CreateClientLinkAddress = {
  /**
   * The street name and house number of the organization.
   */
  streetAndNumber?: string | null | undefined;
  /**
   * The postal code of the organization. Required if a street address is provided and if the country has a postal
   *
   * @remarks
   * code system.
   */
  postalCode?: string | null | undefined;
  /**
   * The city of the organization. Required if a street address is provided.
   */
  city?: string | null | undefined;
  /**
   * The country of the address in
   *
   * @remarks
   * [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
};

export type CreateClientLinkRequest = {
  /**
   * Personal data of your customer.
   */
  owner: Owner;
  /**
   * Name of the organization.
   */
  name: string;
  /**
   * Address of the organization.
   */
  address: CreateClientLinkAddress;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | null | undefined;
  /**
   * The VAT number of the organization, if based in the European Union. VAT numbers are verified against the
   *
   * @remarks
   * international registry *VIES*.
   */
  vatNumber?: string | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateClientLinkUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type CreateClientLinkUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateClientLinkUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateClientLinkNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CreateClientLinkNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateClientLinkNotFoundDocumentation;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateClientLinkSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The link you can send your customer to, where they can either log in and link their account, or sign up and
 *
 * @remarks
 * proceed with onboarding.
 */
export type ClientLink = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateClientLinkDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateClientLinkLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: CreateClientLinkSelf | undefined;
  /**
   * The link you can send your customer to, where they can either log in and link their account, or sign up and
   *
   * @remarks
   * proceed with onboarding.
   */
  clientLink?: ClientLink | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: CreateClientLinkDocumentation | undefined;
};

/**
 * The newly created client link object.
 */
export type CreateClientLinkResponse = {
  /**
   * Indicates the response contains a client link object. Will always contain the string `client-link` for this
   *
   * @remarks
   * endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this client link. Example: `cl_vZCnNQsV2UtfXxYifWKWH`.
   */
  id?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CreateClientLinkLinks | undefined;
};

/** @internal */
export const CreateClientLinkLocale$inboundSchema: z.ZodNativeEnum<
  typeof CreateClientLinkLocale
> = z.nativeEnum(CreateClientLinkLocale);

/** @internal */
export const CreateClientLinkLocale$outboundSchema: z.ZodNativeEnum<
  typeof CreateClientLinkLocale
> = CreateClientLinkLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkLocale$ {
  /** @deprecated use `CreateClientLinkLocale$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkLocale$inboundSchema;
  /** @deprecated use `CreateClientLinkLocale$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkLocale$outboundSchema;
}

/** @internal */
export const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z
  .object({
    email: z.string(),
    givenName: z.string(),
    familyName: z.string(),
    locale: z.nullable(CreateClientLinkLocale$inboundSchema).optional(),
  });

/** @internal */
export type Owner$Outbound = {
  email: string;
  givenName: string;
  familyName: string;
  locale?: string | null | undefined;
};

/** @internal */
export const Owner$outboundSchema: z.ZodType<
  Owner$Outbound,
  z.ZodTypeDef,
  Owner
> = z.object({
  email: z.string(),
  givenName: z.string(),
  familyName: z.string(),
  locale: z.nullable(CreateClientLinkLocale$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner$ {
  /** @deprecated use `Owner$inboundSchema` instead. */
  export const inboundSchema = Owner$inboundSchema;
  /** @deprecated use `Owner$outboundSchema` instead. */
  export const outboundSchema = Owner$outboundSchema;
  /** @deprecated use `Owner$Outbound` instead. */
  export type Outbound = Owner$Outbound;
}

export function ownerToJSON(owner: Owner): string {
  return JSON.stringify(Owner$outboundSchema.parse(owner));
}

export function ownerFromJSON(
  jsonString: string,
): SafeParseResult<Owner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Owner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Owner' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkAddress$inboundSchema: z.ZodType<
  CreateClientLinkAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  streetAndNumber: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string(),
});

/** @internal */
export type CreateClientLinkAddress$Outbound = {
  streetAndNumber?: string | null | undefined;
  postalCode?: string | null | undefined;
  city?: string | null | undefined;
  country: string;
};

/** @internal */
export const CreateClientLinkAddress$outboundSchema: z.ZodType<
  CreateClientLinkAddress$Outbound,
  z.ZodTypeDef,
  CreateClientLinkAddress
> = z.object({
  streetAndNumber: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  country: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkAddress$ {
  /** @deprecated use `CreateClientLinkAddress$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkAddress$inboundSchema;
  /** @deprecated use `CreateClientLinkAddress$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkAddress$outboundSchema;
  /** @deprecated use `CreateClientLinkAddress$Outbound` instead. */
  export type Outbound = CreateClientLinkAddress$Outbound;
}

export function createClientLinkAddressToJSON(
  createClientLinkAddress: CreateClientLinkAddress,
): string {
  return JSON.stringify(
    CreateClientLinkAddress$outboundSchema.parse(createClientLinkAddress),
  );
}

export function createClientLinkAddressFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkAddress' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkRequest$inboundSchema: z.ZodType<
  CreateClientLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner: z.lazy(() => Owner$inboundSchema),
  name: z.string(),
  address: z.lazy(() => CreateClientLinkAddress$inboundSchema),
  registrationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateClientLinkRequest$Outbound = {
  owner: Owner$Outbound;
  name: string;
  address: CreateClientLinkAddress$Outbound;
  registrationNumber?: string | null | undefined;
  vatNumber?: string | null | undefined;
};

/** @internal */
export const CreateClientLinkRequest$outboundSchema: z.ZodType<
  CreateClientLinkRequest$Outbound,
  z.ZodTypeDef,
  CreateClientLinkRequest
> = z.object({
  owner: z.lazy(() => Owner$outboundSchema),
  name: z.string(),
  address: z.lazy(() => CreateClientLinkAddress$outboundSchema),
  registrationNumber: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkRequest$ {
  /** @deprecated use `CreateClientLinkRequest$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkRequest$inboundSchema;
  /** @deprecated use `CreateClientLinkRequest$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkRequest$outboundSchema;
  /** @deprecated use `CreateClientLinkRequest$Outbound` instead. */
  export type Outbound = CreateClientLinkRequest$Outbound;
}

export function createClientLinkRequestToJSON(
  createClientLinkRequest: CreateClientLinkRequest,
): string {
  return JSON.stringify(
    CreateClientLinkRequest$outboundSchema.parse(createClientLinkRequest),
  );
}

export function createClientLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkRequest' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    CreateClientLinkUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type CreateClientLinkUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateClientLinkUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    CreateClientLinkUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    CreateClientLinkUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkUnprocessableEntityDocumentation$ {
  /** @deprecated use `CreateClientLinkUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateClientLinkUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `CreateClientLinkUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateClientLinkUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `CreateClientLinkUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound =
    CreateClientLinkUnprocessableEntityDocumentation$Outbound;
}

export function createClientLinkUnprocessableEntityDocumentationToJSON(
  createClientLinkUnprocessableEntityDocumentation:
    CreateClientLinkUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    CreateClientLinkUnprocessableEntityDocumentation$outboundSchema.parse(
      createClientLinkUnprocessableEntityDocumentation,
    ),
  );
}

export function createClientLinkUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateClientLinkUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateClientLinkUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateClientLinkUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkUnprocessableEntityLinks$inboundSchema: z.ZodType<
  CreateClientLinkUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateClientLinkUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateClientLinkUnprocessableEntityLinks$Outbound = {
  documentation: CreateClientLinkUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const CreateClientLinkUnprocessableEntityLinks$outboundSchema: z.ZodType<
  CreateClientLinkUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  CreateClientLinkUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateClientLinkUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkUnprocessableEntityLinks$ {
  /** @deprecated use `CreateClientLinkUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateClientLinkUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `CreateClientLinkUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateClientLinkUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `CreateClientLinkUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = CreateClientLinkUnprocessableEntityLinks$Outbound;
}

export function createClientLinkUnprocessableEntityLinksToJSON(
  createClientLinkUnprocessableEntityLinks:
    CreateClientLinkUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    CreateClientLinkUnprocessableEntityLinks$outboundSchema.parse(
      createClientLinkUnprocessableEntityLinks,
    ),
  );
}

export function createClientLinkUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateClientLinkUnprocessableEntityLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateClientLinkUnprocessableEntityLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateClientLinkUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkNotFoundDocumentation$inboundSchema: z.ZodType<
  CreateClientLinkNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateClientLinkNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateClientLinkNotFoundDocumentation$outboundSchema: z.ZodType<
  CreateClientLinkNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateClientLinkNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkNotFoundDocumentation$ {
  /** @deprecated use `CreateClientLinkNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateClientLinkNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CreateClientLinkNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateClientLinkNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CreateClientLinkNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CreateClientLinkNotFoundDocumentation$Outbound;
}

export function createClientLinkNotFoundDocumentationToJSON(
  createClientLinkNotFoundDocumentation: CreateClientLinkNotFoundDocumentation,
): string {
  return JSON.stringify(
    CreateClientLinkNotFoundDocumentation$outboundSchema.parse(
      createClientLinkNotFoundDocumentation,
    ),
  );
}

export function createClientLinkNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateClientLinkNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkNotFoundLinks$inboundSchema: z.ZodType<
  CreateClientLinkNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateClientLinkNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateClientLinkNotFoundLinks$Outbound = {
  documentation: CreateClientLinkNotFoundDocumentation$Outbound;
};

/** @internal */
export const CreateClientLinkNotFoundLinks$outboundSchema: z.ZodType<
  CreateClientLinkNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CreateClientLinkNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateClientLinkNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkNotFoundLinks$ {
  /** @deprecated use `CreateClientLinkNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkNotFoundLinks$inboundSchema;
  /** @deprecated use `CreateClientLinkNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkNotFoundLinks$outboundSchema;
  /** @deprecated use `CreateClientLinkNotFoundLinks$Outbound` instead. */
  export type Outbound = CreateClientLinkNotFoundLinks$Outbound;
}

export function createClientLinkNotFoundLinksToJSON(
  createClientLinkNotFoundLinks: CreateClientLinkNotFoundLinks,
): string {
  return JSON.stringify(
    CreateClientLinkNotFoundLinks$outboundSchema.parse(
      createClientLinkNotFoundLinks,
    ),
  );
}

export function createClientLinkNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkSelf$inboundSchema: z.ZodType<
  CreateClientLinkSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateClientLinkSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateClientLinkSelf$outboundSchema: z.ZodType<
  CreateClientLinkSelf$Outbound,
  z.ZodTypeDef,
  CreateClientLinkSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkSelf$ {
  /** @deprecated use `CreateClientLinkSelf$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkSelf$inboundSchema;
  /** @deprecated use `CreateClientLinkSelf$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkSelf$outboundSchema;
  /** @deprecated use `CreateClientLinkSelf$Outbound` instead. */
  export type Outbound = CreateClientLinkSelf$Outbound;
}

export function createClientLinkSelfToJSON(
  createClientLinkSelf: CreateClientLinkSelf,
): string {
  return JSON.stringify(
    CreateClientLinkSelf$outboundSchema.parse(createClientLinkSelf),
  );
}

export function createClientLinkSelfFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkSelf' from JSON`,
  );
}

/** @internal */
export const ClientLink$inboundSchema: z.ZodType<
  ClientLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ClientLink$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ClientLink$outboundSchema: z.ZodType<
  ClientLink$Outbound,
  z.ZodTypeDef,
  ClientLink
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientLink$ {
  /** @deprecated use `ClientLink$inboundSchema` instead. */
  export const inboundSchema = ClientLink$inboundSchema;
  /** @deprecated use `ClientLink$outboundSchema` instead. */
  export const outboundSchema = ClientLink$outboundSchema;
  /** @deprecated use `ClientLink$Outbound` instead. */
  export type Outbound = ClientLink$Outbound;
}

export function clientLinkToJSON(clientLink: ClientLink): string {
  return JSON.stringify(ClientLink$outboundSchema.parse(clientLink));
}

export function clientLinkFromJSON(
  jsonString: string,
): SafeParseResult<ClientLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientLink' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkDocumentation$inboundSchema: z.ZodType<
  CreateClientLinkDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateClientLinkDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateClientLinkDocumentation$outboundSchema: z.ZodType<
  CreateClientLinkDocumentation$Outbound,
  z.ZodTypeDef,
  CreateClientLinkDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkDocumentation$ {
  /** @deprecated use `CreateClientLinkDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkDocumentation$inboundSchema;
  /** @deprecated use `CreateClientLinkDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkDocumentation$outboundSchema;
  /** @deprecated use `CreateClientLinkDocumentation$Outbound` instead. */
  export type Outbound = CreateClientLinkDocumentation$Outbound;
}

export function createClientLinkDocumentationToJSON(
  createClientLinkDocumentation: CreateClientLinkDocumentation,
): string {
  return JSON.stringify(
    CreateClientLinkDocumentation$outboundSchema.parse(
      createClientLinkDocumentation,
    ),
  );
}

export function createClientLinkDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkLinks$inboundSchema: z.ZodType<
  CreateClientLinkLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CreateClientLinkSelf$inboundSchema).optional(),
  clientLink: z.lazy(() => ClientLink$inboundSchema).optional(),
  documentation: z.lazy(() => CreateClientLinkDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateClientLinkLinks$Outbound = {
  self?: CreateClientLinkSelf$Outbound | undefined;
  clientLink?: ClientLink$Outbound | undefined;
  documentation?: CreateClientLinkDocumentation$Outbound | undefined;
};

/** @internal */
export const CreateClientLinkLinks$outboundSchema: z.ZodType<
  CreateClientLinkLinks$Outbound,
  z.ZodTypeDef,
  CreateClientLinkLinks
> = z.object({
  self: z.lazy(() => CreateClientLinkSelf$outboundSchema).optional(),
  clientLink: z.lazy(() => ClientLink$outboundSchema).optional(),
  documentation: z.lazy(() => CreateClientLinkDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkLinks$ {
  /** @deprecated use `CreateClientLinkLinks$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkLinks$inboundSchema;
  /** @deprecated use `CreateClientLinkLinks$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkLinks$outboundSchema;
  /** @deprecated use `CreateClientLinkLinks$Outbound` instead. */
  export type Outbound = CreateClientLinkLinks$Outbound;
}

export function createClientLinkLinksToJSON(
  createClientLinkLinks: CreateClientLinkLinks,
): string {
  return JSON.stringify(
    CreateClientLinkLinks$outboundSchema.parse(createClientLinkLinks),
  );
}

export function createClientLinkLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkLinks' from JSON`,
  );
}

/** @internal */
export const CreateClientLinkResponse$inboundSchema: z.ZodType<
  CreateClientLinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  _links: z.lazy(() => CreateClientLinkLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateClientLinkResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  _links?: CreateClientLinkLinks$Outbound | undefined;
};

/** @internal */
export const CreateClientLinkResponse$outboundSchema: z.ZodType<
  CreateClientLinkResponse$Outbound,
  z.ZodTypeDef,
  CreateClientLinkResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  links: z.lazy(() => CreateClientLinkLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkResponse$ {
  /** @deprecated use `CreateClientLinkResponse$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkResponse$inboundSchema;
  /** @deprecated use `CreateClientLinkResponse$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkResponse$outboundSchema;
  /** @deprecated use `CreateClientLinkResponse$Outbound` instead. */
  export type Outbound = CreateClientLinkResponse$Outbound;
}

export function createClientLinkResponseToJSON(
  createClientLinkResponse: CreateClientLinkResponse,
): string {
  return JSON.stringify(
    CreateClientLinkResponse$outboundSchema.parse(createClientLinkResponse),
  );
}

export function createClientLinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkResponse' from JSON`,
  );
}
