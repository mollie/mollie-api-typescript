/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateClientLinkRequest = {
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  entityClientLink?: models.EntityClientLink | undefined;
};

/** @internal */
export const CreateClientLinkRequest$inboundSchema: z.ZodType<
  CreateClientLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  "entity-client-link": models.EntityClientLink$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "entity-client-link": "entityClientLink",
  });
});

/** @internal */
export type CreateClientLinkRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  "entity-client-link"?: models.EntityClientLink$Outbound | undefined;
};

/** @internal */
export const CreateClientLinkRequest$outboundSchema: z.ZodType<
  CreateClientLinkRequest$Outbound,
  z.ZodTypeDef,
  CreateClientLinkRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  entityClientLink: models.EntityClientLink$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    entityClientLink: "entity-client-link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientLinkRequest$ {
  /** @deprecated use `CreateClientLinkRequest$inboundSchema` instead. */
  export const inboundSchema = CreateClientLinkRequest$inboundSchema;
  /** @deprecated use `CreateClientLinkRequest$outboundSchema` instead. */
  export const outboundSchema = CreateClientLinkRequest$outboundSchema;
  /** @deprecated use `CreateClientLinkRequest$Outbound` instead. */
  export type Outbound = CreateClientLinkRequest$Outbound;
}

export function createClientLinkRequestToJSON(
  createClientLinkRequest: CreateClientLinkRequest,
): string {
  return JSON.stringify(
    CreateClientLinkRequest$outboundSchema.parse(createClientLinkRequest),
  );
}

export function createClientLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientLinkRequest' from JSON`,
  );
}
