/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateSubscriptionRequestBody = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: models.Amount | undefined;
  /**
   * The subscription's description will be used as the description of the resulting individual payments and so showing
   *
   * @remarks
   * up on the bank statement of the consumer.
   *
   * **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
   */
  description?: string | undefined;
  /**
   * Interval to wait between payments, for example `1 month` or `14 days`.
   *
   * @remarks
   *
   * The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
   *
   * Possible values: `... days`, `... weeks`, `... months`.
   */
  interval?: string | undefined;
  /**
   * The start date of the subscription in `YYYY-MM-DD` format.
   */
  startDate?: string | undefined;
  /**
   * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
   *
   * @remarks
   * considered completed.
   *
   * Test mode subscriptions will get canceled automatically after 10 payments.
   */
  times?: number | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: models.Metadata | null | undefined;
  /**
   * We will call this URL for any payment status changes of payments resulting from this subscription.
   *
   * @remarks
   *
   * This webhook will receive **all** events for the subscription's payments. This may include payment
   * failures as well. Be sure to verify the payment's subscription ID and its status.
   */
  webhookUrl?: string | undefined;
  mandateId?: string | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
   *
   * @remarks
   * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type UpdateSubscriptionRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * Provide the ID of the related subscription.
   */
  subscriptionId: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  requestBody?: UpdateSubscriptionRequestBody | undefined;
};

/** @internal */
export const UpdateSubscriptionRequestBody$inboundSchema: z.ZodType<
  UpdateSubscriptionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: models.Amount$inboundSchema.optional(),
  description: z.string().optional(),
  interval: z.string().optional(),
  startDate: z.string().optional(),
  times: z.number().int().optional(),
  metadata: z.nullable(models.Metadata$inboundSchema).optional(),
  webhookUrl: z.string().optional(),
  mandateId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type UpdateSubscriptionRequestBody$Outbound = {
  amount?: models.Amount$Outbound | undefined;
  description?: string | undefined;
  interval?: string | undefined;
  startDate?: string | undefined;
  times?: number | undefined;
  metadata?: models.Metadata$Outbound | null | undefined;
  webhookUrl?: string | undefined;
  mandateId?: string | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const UpdateSubscriptionRequestBody$outboundSchema: z.ZodType<
  UpdateSubscriptionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSubscriptionRequestBody
> = z.object({
  amount: models.Amount$outboundSchema.optional(),
  description: z.string().optional(),
  interval: z.string().optional(),
  startDate: z.string().optional(),
  times: z.number().int().optional(),
  metadata: z.nullable(models.Metadata$outboundSchema).optional(),
  webhookUrl: z.string().optional(),
  mandateId: z.string().optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriptionRequestBody$ {
  /** @deprecated use `UpdateSubscriptionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriptionRequestBody$inboundSchema;
  /** @deprecated use `UpdateSubscriptionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSubscriptionRequestBody$outboundSchema;
  /** @deprecated use `UpdateSubscriptionRequestBody$Outbound` instead. */
  export type Outbound = UpdateSubscriptionRequestBody$Outbound;
}

export function updateSubscriptionRequestBodyToJSON(
  updateSubscriptionRequestBody: UpdateSubscriptionRequestBody,
): string {
  return JSON.stringify(
    UpdateSubscriptionRequestBody$outboundSchema.parse(
      updateSubscriptionRequestBody,
    ),
  );
}

export function updateSubscriptionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriptionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriptionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriptionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSubscriptionRequest$inboundSchema: z.ZodType<
  UpdateSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  subscriptionId: z.string(),
  "idempotency-key": z.string().optional(),
  RequestBody: z.lazy(() => UpdateSubscriptionRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSubscriptionRequest$Outbound = {
  customerId: string;
  subscriptionId: string;
  "idempotency-key"?: string | undefined;
  RequestBody?: UpdateSubscriptionRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateSubscriptionRequest$outboundSchema: z.ZodType<
  UpdateSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  UpdateSubscriptionRequest
> = z.object({
  customerId: z.string(),
  subscriptionId: z.string(),
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => UpdateSubscriptionRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriptionRequest$ {
  /** @deprecated use `UpdateSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriptionRequest$inboundSchema;
  /** @deprecated use `UpdateSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSubscriptionRequest$outboundSchema;
  /** @deprecated use `UpdateSubscriptionRequest$Outbound` instead. */
  export type Outbound = UpdateSubscriptionRequest$Outbound;
}

export function updateSubscriptionRequestToJSON(
  updateSubscriptionRequest: UpdateSubscriptionRequest,
): string {
  return JSON.stringify(
    UpdateSubscriptionRequest$outboundSchema.parse(updateSubscriptionRequest),
  );
}

export function updateSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriptionRequest' from JSON`,
  );
}
