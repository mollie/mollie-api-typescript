/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInvoiceRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetInvoiceNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetInvoiceNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetInvoiceNotFoundDocumentation;
};

/**
 * Status of the invoice.
 *
 * @remarks
 *
 * * `open` — The invoice is not paid yet.
 * * `paid` — The invoice is paid.
 * * `overdue` — Payment of the invoice is overdue.
 */
export const GetInvoiceStatus = {
  Open: "open",
  Paid: "paid",
  Overdue: "overdue",
} as const;
/**
 * Status of the invoice.
 *
 * @remarks
 *
 * * `open` — The invoice is not paid yet.
 * * `paid` — The invoice is paid.
 * * `overdue` — Payment of the invoice is overdue.
 */
export type GetInvoiceStatus = ClosedEnum<typeof GetInvoiceStatus>;

/**
 * Total amount of the invoice, excluding VAT.
 */
export type NetAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will
 *
 * @remarks
 * be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside
 * the EU, no VAT will be charged.
 */
export type GetInvoiceVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Total amount of the invoice, including VAT.
 */
export type GrossAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Line item amount excluding VAT.
 */
export type GetInvoiceAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetInvoiceLine = {
  /**
   * The administrative period in `YYYY-MM` on which the line should be booked.
   */
  period?: string | undefined;
  /**
   * Description of the product.
   */
  description?: string | undefined;
  /**
   * Number of products invoiced. For example, the number of payments.
   */
  count?: number | undefined;
  /**
   * VAT percentage rate that applies to this product.
   */
  vatPercentage?: number | undefined;
  /**
   * Line item amount excluding VAT.
   */
  amount?: GetInvoiceAmount | undefined;
};

/**
 * URL to the current invoice resource.
 */
export type GetInvoiceSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * URL to a downloadable PDF of the invoice.
 */
export type Pdf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * URL to the API documentation.
 */
export type GetInvoiceDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetInvoiceLinks = {
  /**
   * URL to the current invoice resource.
   */
  self?: GetInvoiceSelf | undefined;
  /**
   * URL to a downloadable PDF of the invoice.
   */
  pdf?: Pdf | undefined;
  /**
   * URL to the API documentation.
   */
  documentation?: GetInvoiceDocumentation | undefined;
};

/**
 * The invoice object.
 */
export type GetInvoiceResponse = {
  /**
   * Indicates that the response contains an invoice object.
   *
   * @remarks
   * Will always contain the string `invoice` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
   */
  id?: string | undefined;
  /**
   * The reference number of the invoice. An example value would be: `2024.10000`.
   */
  reference?: string | undefined;
  /**
   * The VAT number to which the invoice was issued to, if applicable.
   */
  vatNumber?: string | null | undefined;
  /**
   * Status of the invoice.
   *
   * @remarks
   *
   * * `open` — The invoice is not paid yet.
   * * `paid` — The invoice is paid.
   * * `overdue` — Payment of the invoice is overdue.
   */
  status?: GetInvoiceStatus | undefined;
  /**
   * Total amount of the invoice, excluding VAT.
   */
  netAmount?: NetAmount | undefined;
  /**
   * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will
   *
   * @remarks
   * be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside
   * the EU, no VAT will be charged.
   */
  vatAmount?: GetInvoiceVatAmount | undefined;
  /**
   * Total amount of the invoice, including VAT.
   */
  grossAmount?: GrossAmount | undefined;
  /**
   * The collection of products which make up the invoice.
   */
  lines?: Array<GetInvoiceLine> | undefined;
  /**
   * The invoice date in `YYYY-MM-DD` format.
   */
  issuedAt?: string | undefined;
  /**
   * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
   */
  paidAt?: string | null | undefined;
  /**
   * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
   */
  dueAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetInvoiceLinks | undefined;
};

/** @internal */
export const GetInvoiceRequest$inboundSchema: z.ZodType<
  GetInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetInvoiceRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetInvoiceRequest$outboundSchema: z.ZodType<
  GetInvoiceRequest$Outbound,
  z.ZodTypeDef,
  GetInvoiceRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceRequest$ {
  /** @deprecated use `GetInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceRequest$inboundSchema;
  /** @deprecated use `GetInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceRequest$outboundSchema;
  /** @deprecated use `GetInvoiceRequest$Outbound` instead. */
  export type Outbound = GetInvoiceRequest$Outbound;
}

export function getInvoiceRequestToJSON(
  getInvoiceRequest: GetInvoiceRequest,
): string {
  return JSON.stringify(
    GetInvoiceRequest$outboundSchema.parse(getInvoiceRequest),
  );
}

export function getInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const GetInvoiceNotFoundDocumentation$inboundSchema: z.ZodType<
  GetInvoiceNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetInvoiceNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetInvoiceNotFoundDocumentation$outboundSchema: z.ZodType<
  GetInvoiceNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetInvoiceNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceNotFoundDocumentation$ {
  /** @deprecated use `GetInvoiceNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetInvoiceNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetInvoiceNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetInvoiceNotFoundDocumentation$Outbound;
}

export function getInvoiceNotFoundDocumentationToJSON(
  getInvoiceNotFoundDocumentation: GetInvoiceNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetInvoiceNotFoundDocumentation$outboundSchema.parse(
      getInvoiceNotFoundDocumentation,
    ),
  );
}

export function getInvoiceNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetInvoiceNotFoundLinks$inboundSchema: z.ZodType<
  GetInvoiceNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetInvoiceNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type GetInvoiceNotFoundLinks$Outbound = {
  documentation: GetInvoiceNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetInvoiceNotFoundLinks$outboundSchema: z.ZodType<
  GetInvoiceNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetInvoiceNotFoundLinks
> = z.object({
  documentation: z.lazy(() => GetInvoiceNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceNotFoundLinks$ {
  /** @deprecated use `GetInvoiceNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceNotFoundLinks$inboundSchema;
  /** @deprecated use `GetInvoiceNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceNotFoundLinks$outboundSchema;
  /** @deprecated use `GetInvoiceNotFoundLinks$Outbound` instead. */
  export type Outbound = GetInvoiceNotFoundLinks$Outbound;
}

export function getInvoiceNotFoundLinksToJSON(
  getInvoiceNotFoundLinks: GetInvoiceNotFoundLinks,
): string {
  return JSON.stringify(
    GetInvoiceNotFoundLinks$outboundSchema.parse(getInvoiceNotFoundLinks),
  );
}

export function getInvoiceNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetInvoiceStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetInvoiceStatus
> = z.nativeEnum(GetInvoiceStatus);

/** @internal */
export const GetInvoiceStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetInvoiceStatus
> = GetInvoiceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceStatus$ {
  /** @deprecated use `GetInvoiceStatus$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceStatus$inboundSchema;
  /** @deprecated use `GetInvoiceStatus$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceStatus$outboundSchema;
}

/** @internal */
export const NetAmount$inboundSchema: z.ZodType<
  NetAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type NetAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const NetAmount$outboundSchema: z.ZodType<
  NetAmount$Outbound,
  z.ZodTypeDef,
  NetAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetAmount$ {
  /** @deprecated use `NetAmount$inboundSchema` instead. */
  export const inboundSchema = NetAmount$inboundSchema;
  /** @deprecated use `NetAmount$outboundSchema` instead. */
  export const outboundSchema = NetAmount$outboundSchema;
  /** @deprecated use `NetAmount$Outbound` instead. */
  export type Outbound = NetAmount$Outbound;
}

export function netAmountToJSON(netAmount: NetAmount): string {
  return JSON.stringify(NetAmount$outboundSchema.parse(netAmount));
}

export function netAmountFromJSON(
  jsonString: string,
): SafeParseResult<NetAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetAmount' from JSON`,
  );
}

/** @internal */
export const GetInvoiceVatAmount$inboundSchema: z.ZodType<
  GetInvoiceVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetInvoiceVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetInvoiceVatAmount$outboundSchema: z.ZodType<
  GetInvoiceVatAmount$Outbound,
  z.ZodTypeDef,
  GetInvoiceVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceVatAmount$ {
  /** @deprecated use `GetInvoiceVatAmount$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceVatAmount$inboundSchema;
  /** @deprecated use `GetInvoiceVatAmount$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceVatAmount$outboundSchema;
  /** @deprecated use `GetInvoiceVatAmount$Outbound` instead. */
  export type Outbound = GetInvoiceVatAmount$Outbound;
}

export function getInvoiceVatAmountToJSON(
  getInvoiceVatAmount: GetInvoiceVatAmount,
): string {
  return JSON.stringify(
    GetInvoiceVatAmount$outboundSchema.parse(getInvoiceVatAmount),
  );
}

export function getInvoiceVatAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceVatAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceVatAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceVatAmount' from JSON`,
  );
}

/** @internal */
export const GrossAmount$inboundSchema: z.ZodType<
  GrossAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GrossAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GrossAmount$outboundSchema: z.ZodType<
  GrossAmount$Outbound,
  z.ZodTypeDef,
  GrossAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrossAmount$ {
  /** @deprecated use `GrossAmount$inboundSchema` instead. */
  export const inboundSchema = GrossAmount$inboundSchema;
  /** @deprecated use `GrossAmount$outboundSchema` instead. */
  export const outboundSchema = GrossAmount$outboundSchema;
  /** @deprecated use `GrossAmount$Outbound` instead. */
  export type Outbound = GrossAmount$Outbound;
}

export function grossAmountToJSON(grossAmount: GrossAmount): string {
  return JSON.stringify(GrossAmount$outboundSchema.parse(grossAmount));
}

export function grossAmountFromJSON(
  jsonString: string,
): SafeParseResult<GrossAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrossAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrossAmount' from JSON`,
  );
}

/** @internal */
export const GetInvoiceAmount$inboundSchema: z.ZodType<
  GetInvoiceAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetInvoiceAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetInvoiceAmount$outboundSchema: z.ZodType<
  GetInvoiceAmount$Outbound,
  z.ZodTypeDef,
  GetInvoiceAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceAmount$ {
  /** @deprecated use `GetInvoiceAmount$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceAmount$inboundSchema;
  /** @deprecated use `GetInvoiceAmount$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceAmount$outboundSchema;
  /** @deprecated use `GetInvoiceAmount$Outbound` instead. */
  export type Outbound = GetInvoiceAmount$Outbound;
}

export function getInvoiceAmountToJSON(
  getInvoiceAmount: GetInvoiceAmount,
): string {
  return JSON.stringify(
    GetInvoiceAmount$outboundSchema.parse(getInvoiceAmount),
  );
}

export function getInvoiceAmountFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceAmount' from JSON`,
  );
}

/** @internal */
export const GetInvoiceLine$inboundSchema: z.ZodType<
  GetInvoiceLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: z.string().optional(),
  description: z.string().optional(),
  count: z.number().int().optional(),
  vatPercentage: z.number().int().optional(),
  amount: z.lazy(() => GetInvoiceAmount$inboundSchema).optional(),
});

/** @internal */
export type GetInvoiceLine$Outbound = {
  period?: string | undefined;
  description?: string | undefined;
  count?: number | undefined;
  vatPercentage?: number | undefined;
  amount?: GetInvoiceAmount$Outbound | undefined;
};

/** @internal */
export const GetInvoiceLine$outboundSchema: z.ZodType<
  GetInvoiceLine$Outbound,
  z.ZodTypeDef,
  GetInvoiceLine
> = z.object({
  period: z.string().optional(),
  description: z.string().optional(),
  count: z.number().int().optional(),
  vatPercentage: z.number().int().optional(),
  amount: z.lazy(() => GetInvoiceAmount$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceLine$ {
  /** @deprecated use `GetInvoiceLine$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceLine$inboundSchema;
  /** @deprecated use `GetInvoiceLine$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceLine$outboundSchema;
  /** @deprecated use `GetInvoiceLine$Outbound` instead. */
  export type Outbound = GetInvoiceLine$Outbound;
}

export function getInvoiceLineToJSON(getInvoiceLine: GetInvoiceLine): string {
  return JSON.stringify(GetInvoiceLine$outboundSchema.parse(getInvoiceLine));
}

export function getInvoiceLineFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceLine' from JSON`,
  );
}

/** @internal */
export const GetInvoiceSelf$inboundSchema: z.ZodType<
  GetInvoiceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetInvoiceSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetInvoiceSelf$outboundSchema: z.ZodType<
  GetInvoiceSelf$Outbound,
  z.ZodTypeDef,
  GetInvoiceSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceSelf$ {
  /** @deprecated use `GetInvoiceSelf$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceSelf$inboundSchema;
  /** @deprecated use `GetInvoiceSelf$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceSelf$outboundSchema;
  /** @deprecated use `GetInvoiceSelf$Outbound` instead. */
  export type Outbound = GetInvoiceSelf$Outbound;
}

export function getInvoiceSelfToJSON(getInvoiceSelf: GetInvoiceSelf): string {
  return JSON.stringify(GetInvoiceSelf$outboundSchema.parse(getInvoiceSelf));
}

export function getInvoiceSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceSelf' from JSON`,
  );
}

/** @internal */
export const Pdf$inboundSchema: z.ZodType<Pdf, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type Pdf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const Pdf$outboundSchema: z.ZodType<Pdf$Outbound, z.ZodTypeDef, Pdf> = z
  .object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pdf$ {
  /** @deprecated use `Pdf$inboundSchema` instead. */
  export const inboundSchema = Pdf$inboundSchema;
  /** @deprecated use `Pdf$outboundSchema` instead. */
  export const outboundSchema = Pdf$outboundSchema;
  /** @deprecated use `Pdf$Outbound` instead. */
  export type Outbound = Pdf$Outbound;
}

export function pdfToJSON(pdf: Pdf): string {
  return JSON.stringify(Pdf$outboundSchema.parse(pdf));
}

export function pdfFromJSON(
  jsonString: string,
): SafeParseResult<Pdf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pdf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pdf' from JSON`,
  );
}

/** @internal */
export const GetInvoiceDocumentation$inboundSchema: z.ZodType<
  GetInvoiceDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetInvoiceDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetInvoiceDocumentation$outboundSchema: z.ZodType<
  GetInvoiceDocumentation$Outbound,
  z.ZodTypeDef,
  GetInvoiceDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceDocumentation$ {
  /** @deprecated use `GetInvoiceDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceDocumentation$inboundSchema;
  /** @deprecated use `GetInvoiceDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceDocumentation$outboundSchema;
  /** @deprecated use `GetInvoiceDocumentation$Outbound` instead. */
  export type Outbound = GetInvoiceDocumentation$Outbound;
}

export function getInvoiceDocumentationToJSON(
  getInvoiceDocumentation: GetInvoiceDocumentation,
): string {
  return JSON.stringify(
    GetInvoiceDocumentation$outboundSchema.parse(getInvoiceDocumentation),
  );
}

export function getInvoiceDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceDocumentation' from JSON`,
  );
}

/** @internal */
export const GetInvoiceLinks$inboundSchema: z.ZodType<
  GetInvoiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetInvoiceSelf$inboundSchema).optional(),
  pdf: z.lazy(() => Pdf$inboundSchema).optional(),
  documentation: z.lazy(() => GetInvoiceDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetInvoiceLinks$Outbound = {
  self?: GetInvoiceSelf$Outbound | undefined;
  pdf?: Pdf$Outbound | undefined;
  documentation?: GetInvoiceDocumentation$Outbound | undefined;
};

/** @internal */
export const GetInvoiceLinks$outboundSchema: z.ZodType<
  GetInvoiceLinks$Outbound,
  z.ZodTypeDef,
  GetInvoiceLinks
> = z.object({
  self: z.lazy(() => GetInvoiceSelf$outboundSchema).optional(),
  pdf: z.lazy(() => Pdf$outboundSchema).optional(),
  documentation: z.lazy(() => GetInvoiceDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceLinks$ {
  /** @deprecated use `GetInvoiceLinks$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceLinks$inboundSchema;
  /** @deprecated use `GetInvoiceLinks$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceLinks$outboundSchema;
  /** @deprecated use `GetInvoiceLinks$Outbound` instead. */
  export type Outbound = GetInvoiceLinks$Outbound;
}

export function getInvoiceLinksToJSON(
  getInvoiceLinks: GetInvoiceLinks,
): string {
  return JSON.stringify(GetInvoiceLinks$outboundSchema.parse(getInvoiceLinks));
}

export function getInvoiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceLinks' from JSON`,
  );
}

/** @internal */
export const GetInvoiceResponse$inboundSchema: z.ZodType<
  GetInvoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  reference: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  status: GetInvoiceStatus$inboundSchema.optional(),
  netAmount: z.lazy(() => NetAmount$inboundSchema).optional(),
  vatAmount: z.lazy(() => GetInvoiceVatAmount$inboundSchema).optional(),
  grossAmount: z.lazy(() => GrossAmount$inboundSchema).optional(),
  lines: z.array(z.lazy(() => GetInvoiceLine$inboundSchema)).optional(),
  issuedAt: z.string().optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetInvoiceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetInvoiceResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  reference?: string | undefined;
  vatNumber?: string | null | undefined;
  status?: string | undefined;
  netAmount?: NetAmount$Outbound | undefined;
  vatAmount?: GetInvoiceVatAmount$Outbound | undefined;
  grossAmount?: GrossAmount$Outbound | undefined;
  lines?: Array<GetInvoiceLine$Outbound> | undefined;
  issuedAt?: string | undefined;
  paidAt?: string | null | undefined;
  dueAt?: string | null | undefined;
  _links?: GetInvoiceLinks$Outbound | undefined;
};

/** @internal */
export const GetInvoiceResponse$outboundSchema: z.ZodType<
  GetInvoiceResponse$Outbound,
  z.ZodTypeDef,
  GetInvoiceResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  reference: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  status: GetInvoiceStatus$outboundSchema.optional(),
  netAmount: z.lazy(() => NetAmount$outboundSchema).optional(),
  vatAmount: z.lazy(() => GetInvoiceVatAmount$outboundSchema).optional(),
  grossAmount: z.lazy(() => GrossAmount$outboundSchema).optional(),
  lines: z.array(z.lazy(() => GetInvoiceLine$outboundSchema)).optional(),
  issuedAt: z.string().optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetInvoiceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceResponse$ {
  /** @deprecated use `GetInvoiceResponse$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceResponse$inboundSchema;
  /** @deprecated use `GetInvoiceResponse$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceResponse$outboundSchema;
  /** @deprecated use `GetInvoiceResponse$Outbound` instead. */
  export type Outbound = GetInvoiceResponse$Outbound;
}

export function getInvoiceResponseToJSON(
  getInvoiceResponse: GetInvoiceResponse,
): string {
  return JSON.stringify(
    GetInvoiceResponse$outboundSchema.parse(getInvoiceResponse),
  );
}

export function getInvoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceResponse' from JSON`,
  );
}
