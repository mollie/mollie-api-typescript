/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInvoiceRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const GetInvoiceRequest$inboundSchema: z.ZodType<
  GetInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetInvoiceRequest$Outbound = {
  id: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetInvoiceRequest$outboundSchema: z.ZodType<
  GetInvoiceRequest$Outbound,
  z.ZodTypeDef,
  GetInvoiceRequest
> = z.object({
  id: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceRequest$ {
  /** @deprecated use `GetInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceRequest$inboundSchema;
  /** @deprecated use `GetInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceRequest$outboundSchema;
  /** @deprecated use `GetInvoiceRequest$Outbound` instead. */
  export type Outbound = GetInvoiceRequest$Outbound;
}

export function getInvoiceRequestToJSON(
  getInvoiceRequest: GetInvoiceRequest,
): string {
  return JSON.stringify(
    GetInvoiceRequest$outboundSchema.parse(getInvoiceRequest),
  );
}

export function getInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceRequest' from JSON`,
  );
}
