/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
 *
 * @remarks
 *
 * Indicate if you will use the result for the [Create order](create-order)
 * or the [Create payment](create-payment) endpoint.
 *
 * When passing the value `orders`, the result will include payment methods
 * that are only available for payments created via the Orders API.
 */
export const Resource = {
  Payments: "payments",
  Orders: "orders",
} as const;
/**
 * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
 *
 * @remarks
 *
 * Indicate if you will use the result for the [Create order](create-order)
 * or the [Create payment](create-payment) endpoint.
 *
 * When passing the value `orders`, the result will include payment methods
 * that are only available for payments created via the Orders API.
 */
export type Resource = ClosedEnum<typeof Resource>;

/**
 * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code
 *
 * @remarks
 * to check if they are available on the shoppers device, hence the need to indicate your support.
 */
export const IncludeWallets = {
  Applepay: "applepay",
} as const;
/**
 * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code
 *
 * @remarks
 * to check if they are available on the shoppers device, hence the need to indicate your support.
 */
export type IncludeWallets = ClosedEnum<typeof IncludeWallets>;

export type ListMethodsRequest = {
  /**
   * Set this parameter to `first` to only return the enabled methods that
   *
   * @remarks
   * can be used for the first payment of a recurring sequence.
   *
   * Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
   */
  sequenceType?: models.SequenceType | undefined;
  /**
   * Response language
   */
  locale?: models.LocaleParameter | undefined;
  /**
   * If supplied, only payment methods that support the amount and currency
   *
   * @remarks
   * are returned.
   *
   * Example: `/v2/methods?amount[value]=100.00&amount[currency]=USD`
   */
  amount?: models.Amount | undefined;
  /**
   * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
   *
   * @remarks
   *
   * Indicate if you will use the result for the [Create order](create-order)
   * or the [Create payment](create-payment) endpoint.
   *
   * When passing the value `orders`, the result will include payment methods
   * that are only available for payments created via the Orders API.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  resource?: Resource | undefined;
  /**
   * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used
   *
   * @remarks
   * to check whether your customer is eligible for certain payment methods, for example for Klarna.
   *
   * Example: `/v2/methods?resource=orders&billingCountry=DE`
   */
  billingCountry?: string | undefined;
  /**
   * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code
   *
   * @remarks
   * to check if they are available on the shoppers device, hence the need to indicate your support.
   */
  includeWallets?: IncludeWallets | undefined;
  /**
   * A comma-separated list of the line categories you support in your checkout.
   *
   * @remarks
   *
   * Example: `/v2/methods?orderLineCategories=eco,meal`
   */
  orderLineCategories?: models.LineCategories | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to
   *
   * @remarks
   * retrieve the resources for.
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
   * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListMethodsEmbedded = {
  /**
   * An array of payment method objects. For a complete
   *
   * @remarks
   * reference of the payment method object, refer
   * to the [Get payment method endpoint](get-method)
   * documentation.
   */
  methods: Array<models.EntityMethod>;
};

export type ListMethodsLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: models.Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: models.Url;
};

/**
 * A list of payment method objects. For a complete reference of the
 *
 * @remarks
 * payment method object, refer to the [Get payment method endpoint](get-method) documentation.
 */
export type ListMethodsResponse = {
  /**
   * The number of payment method objects in this result set.
   *
   * @remarks
   * Results are **not** paginated.
   */
  count: number;
  embedded: ListMethodsEmbedded;
  links: ListMethodsLinks;
};

/** @internal */
export const Resource$inboundSchema: z.ZodNativeEnum<typeof Resource> = z
  .nativeEnum(Resource);

/** @internal */
export const Resource$outboundSchema: z.ZodNativeEnum<typeof Resource> =
  Resource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resource$ {
  /** @deprecated use `Resource$inboundSchema` instead. */
  export const inboundSchema = Resource$inboundSchema;
  /** @deprecated use `Resource$outboundSchema` instead. */
  export const outboundSchema = Resource$outboundSchema;
}

/** @internal */
export const IncludeWallets$inboundSchema: z.ZodNativeEnum<
  typeof IncludeWallets
> = z.nativeEnum(IncludeWallets);

/** @internal */
export const IncludeWallets$outboundSchema: z.ZodNativeEnum<
  typeof IncludeWallets
> = IncludeWallets$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeWallets$ {
  /** @deprecated use `IncludeWallets$inboundSchema` instead. */
  export const inboundSchema = IncludeWallets$inboundSchema;
  /** @deprecated use `IncludeWallets$outboundSchema` instead. */
  export const outboundSchema = IncludeWallets$outboundSchema;
}

/** @internal */
export const ListMethodsRequest$inboundSchema: z.ZodType<
  ListMethodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sequenceType: models.SequenceType$inboundSchema.optional(),
  locale: models.LocaleParameter$inboundSchema.optional(),
  amount: models.Amount$inboundSchema.optional(),
  resource: Resource$inboundSchema.optional(),
  billingCountry: z.string().optional(),
  includeWallets: IncludeWallets$inboundSchema.optional(),
  orderLineCategories: models.LineCategories$inboundSchema.optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListMethodsRequest$Outbound = {
  sequenceType?: string | undefined;
  locale?: string | undefined;
  amount?: models.Amount$Outbound | undefined;
  resource?: string | undefined;
  billingCountry?: string | undefined;
  includeWallets?: string | undefined;
  orderLineCategories?: string | undefined;
  profileId?: string | undefined;
  include?: string | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListMethodsRequest$outboundSchema: z.ZodType<
  ListMethodsRequest$Outbound,
  z.ZodTypeDef,
  ListMethodsRequest
> = z.object({
  sequenceType: models.SequenceType$outboundSchema.optional(),
  locale: models.LocaleParameter$outboundSchema.optional(),
  amount: models.Amount$outboundSchema.optional(),
  resource: Resource$outboundSchema.optional(),
  billingCountry: z.string().optional(),
  includeWallets: IncludeWallets$outboundSchema.optional(),
  orderLineCategories: models.LineCategories$outboundSchema.optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsRequest$ {
  /** @deprecated use `ListMethodsRequest$inboundSchema` instead. */
  export const inboundSchema = ListMethodsRequest$inboundSchema;
  /** @deprecated use `ListMethodsRequest$outboundSchema` instead. */
  export const outboundSchema = ListMethodsRequest$outboundSchema;
  /** @deprecated use `ListMethodsRequest$Outbound` instead. */
  export type Outbound = ListMethodsRequest$Outbound;
}

export function listMethodsRequestToJSON(
  listMethodsRequest: ListMethodsRequest,
): string {
  return JSON.stringify(
    ListMethodsRequest$outboundSchema.parse(listMethodsRequest),
  );
}

export function listMethodsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMethodsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMethodsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMethodsRequest' from JSON`,
  );
}

/** @internal */
export const ListMethodsEmbedded$inboundSchema: z.ZodType<
  ListMethodsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  methods: z.array(models.EntityMethod$inboundSchema),
});

/** @internal */
export type ListMethodsEmbedded$Outbound = {
  methods: Array<models.EntityMethod$Outbound>;
};

/** @internal */
export const ListMethodsEmbedded$outboundSchema: z.ZodType<
  ListMethodsEmbedded$Outbound,
  z.ZodTypeDef,
  ListMethodsEmbedded
> = z.object({
  methods: z.array(models.EntityMethod$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsEmbedded$ {
  /** @deprecated use `ListMethodsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListMethodsEmbedded$inboundSchema;
  /** @deprecated use `ListMethodsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListMethodsEmbedded$outboundSchema;
  /** @deprecated use `ListMethodsEmbedded$Outbound` instead. */
  export type Outbound = ListMethodsEmbedded$Outbound;
}

export function listMethodsEmbeddedToJSON(
  listMethodsEmbedded: ListMethodsEmbedded,
): string {
  return JSON.stringify(
    ListMethodsEmbedded$outboundSchema.parse(listMethodsEmbedded),
  );
}

export function listMethodsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListMethodsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMethodsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMethodsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListMethodsLinks$inboundSchema: z.ZodType<
  ListMethodsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema,
  documentation: models.Url$inboundSchema,
});

/** @internal */
export type ListMethodsLinks$Outbound = {
  self: models.Url$Outbound;
  documentation: models.Url$Outbound;
};

/** @internal */
export const ListMethodsLinks$outboundSchema: z.ZodType<
  ListMethodsLinks$Outbound,
  z.ZodTypeDef,
  ListMethodsLinks
> = z.object({
  self: models.Url$outboundSchema,
  documentation: models.Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsLinks$ {
  /** @deprecated use `ListMethodsLinks$inboundSchema` instead. */
  export const inboundSchema = ListMethodsLinks$inboundSchema;
  /** @deprecated use `ListMethodsLinks$outboundSchema` instead. */
  export const outboundSchema = ListMethodsLinks$outboundSchema;
  /** @deprecated use `ListMethodsLinks$Outbound` instead. */
  export type Outbound = ListMethodsLinks$Outbound;
}

export function listMethodsLinksToJSON(
  listMethodsLinks: ListMethodsLinks,
): string {
  return JSON.stringify(
    ListMethodsLinks$outboundSchema.parse(listMethodsLinks),
  );
}

export function listMethodsLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListMethodsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMethodsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMethodsLinks' from JSON`,
  );
}

/** @internal */
export const ListMethodsResponse$inboundSchema: z.ZodType<
  ListMethodsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListMethodsEmbedded$inboundSchema),
  _links: z.lazy(() => ListMethodsLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListMethodsResponse$Outbound = {
  count: number;
  _embedded: ListMethodsEmbedded$Outbound;
  _links: ListMethodsLinks$Outbound;
};

/** @internal */
export const ListMethodsResponse$outboundSchema: z.ZodType<
  ListMethodsResponse$Outbound,
  z.ZodTypeDef,
  ListMethodsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListMethodsEmbedded$outboundSchema),
  links: z.lazy(() => ListMethodsLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsResponse$ {
  /** @deprecated use `ListMethodsResponse$inboundSchema` instead. */
  export const inboundSchema = ListMethodsResponse$inboundSchema;
  /** @deprecated use `ListMethodsResponse$outboundSchema` instead. */
  export const outboundSchema = ListMethodsResponse$outboundSchema;
  /** @deprecated use `ListMethodsResponse$Outbound` instead. */
  export type Outbound = ListMethodsResponse$Outbound;
}

export function listMethodsResponseToJSON(
  listMethodsResponse: ListMethodsResponse,
): string {
  return JSON.stringify(
    ListMethodsResponse$outboundSchema.parse(listMethodsResponse),
  );
}

export function listMethodsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMethodsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMethodsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMethodsResponse' from JSON`,
  );
}
