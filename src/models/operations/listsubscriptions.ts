/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListSubscriptionsRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.ListSort | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListSubscriptionsEmbedded = {
  /**
   * An array of subscription objects.
   */
  subscriptions?: Array<models.SubscriptionResponse> | undefined;
};

/**
 * A list of subscription objects.
 */
export type ListSubscriptionsResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListSubscriptionsEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListSubscriptionsRequest$inboundSchema: z.ZodType<
  ListSubscriptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$inboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListSubscriptionsRequest$Outbound = {
  customerId: string;
  from?: string | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListSubscriptionsRequest$outboundSchema: z.ZodType<
  ListSubscriptionsRequest$Outbound,
  z.ZodTypeDef,
  ListSubscriptionsRequest
> = z.object({
  customerId: z.string(),
  from: z.string().optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$outboundSchema).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubscriptionsRequest$ {
  /** @deprecated use `ListSubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSubscriptionsRequest$inboundSchema;
  /** @deprecated use `ListSubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSubscriptionsRequest$outboundSchema;
  /** @deprecated use `ListSubscriptionsRequest$Outbound` instead. */
  export type Outbound = ListSubscriptionsRequest$Outbound;
}

export function listSubscriptionsRequestToJSON(
  listSubscriptionsRequest: ListSubscriptionsRequest,
): string {
  return JSON.stringify(
    ListSubscriptionsRequest$outboundSchema.parse(listSubscriptionsRequest),
  );
}

export function listSubscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSubscriptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSubscriptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSubscriptionsRequest' from JSON`,
  );
}

/** @internal */
export const ListSubscriptionsEmbedded$inboundSchema: z.ZodType<
  ListSubscriptionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriptions: z.array(models.SubscriptionResponse$inboundSchema).optional(),
});

/** @internal */
export type ListSubscriptionsEmbedded$Outbound = {
  subscriptions?: Array<models.SubscriptionResponse$Outbound> | undefined;
};

/** @internal */
export const ListSubscriptionsEmbedded$outboundSchema: z.ZodType<
  ListSubscriptionsEmbedded$Outbound,
  z.ZodTypeDef,
  ListSubscriptionsEmbedded
> = z.object({
  subscriptions: z.array(models.SubscriptionResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubscriptionsEmbedded$ {
  /** @deprecated use `ListSubscriptionsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListSubscriptionsEmbedded$inboundSchema;
  /** @deprecated use `ListSubscriptionsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListSubscriptionsEmbedded$outboundSchema;
  /** @deprecated use `ListSubscriptionsEmbedded$Outbound` instead. */
  export type Outbound = ListSubscriptionsEmbedded$Outbound;
}

export function listSubscriptionsEmbeddedToJSON(
  listSubscriptionsEmbedded: ListSubscriptionsEmbedded,
): string {
  return JSON.stringify(
    ListSubscriptionsEmbedded$outboundSchema.parse(listSubscriptionsEmbedded),
  );
}

export function listSubscriptionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListSubscriptionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSubscriptionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSubscriptionsEmbedded' from JSON`,
  );
}

/** @internal */
export const ListSubscriptionsResponse$inboundSchema: z.ZodType<
  ListSubscriptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListSubscriptionsEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListSubscriptionsResponse$Outbound = {
  count: number;
  _embedded: ListSubscriptionsEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListSubscriptionsResponse$outboundSchema: z.ZodType<
  ListSubscriptionsResponse$Outbound,
  z.ZodTypeDef,
  ListSubscriptionsResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListSubscriptionsEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubscriptionsResponse$ {
  /** @deprecated use `ListSubscriptionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSubscriptionsResponse$inboundSchema;
  /** @deprecated use `ListSubscriptionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSubscriptionsResponse$outboundSchema;
  /** @deprecated use `ListSubscriptionsResponse$Outbound` instead. */
  export type Outbound = ListSubscriptionsResponse$Outbound;
}

export function listSubscriptionsResponseToJSON(
  listSubscriptionsResponse: ListSubscriptionsResponse,
): string {
  return JSON.stringify(
    ListSubscriptionsResponse$outboundSchema.parse(listSubscriptionsResponse),
  );
}

export function listSubscriptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSubscriptionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSubscriptionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSubscriptionsResponse' from JSON`,
  );
}
