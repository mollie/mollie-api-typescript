/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetCustomerRequest = {
  /**
   * Provide the ID of the related customer.
   */
  customerId: string;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetCustomerLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: models.Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  dashboard: models.Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  payments?: models.UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  mandates?: models.UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  subscriptions?: models.UrlNullable | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: models.Url;
};

/**
 * The customer object.
 */
export type GetCustomerResponse = {
  /**
   * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: models.Mode | undefined;
  /**
   * The full name of the customer.
   */
  name?: string | null | undefined;
  /**
   * The email address of the customer.
   */
  email?: string | null | undefined;
  /**
   * Allows you to preset the language to be used.
   */
  locale?: models.LocaleResponse | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: models.Metadata | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetCustomerLinks | undefined;
  events?: Array<models.EntityEvent> | undefined;
};

/** @internal */
export const GetCustomerRequest$inboundSchema: z.ZodType<
  GetCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type GetCustomerRequest$Outbound = {
  customerId: string;
  include?: string | null | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const GetCustomerRequest$outboundSchema: z.ZodType<
  GetCustomerRequest$Outbound,
  z.ZodTypeDef,
  GetCustomerRequest
> = z.object({
  customerId: z.string(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerRequest$ {
  /** @deprecated use `GetCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomerRequest$inboundSchema;
  /** @deprecated use `GetCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomerRequest$outboundSchema;
  /** @deprecated use `GetCustomerRequest$Outbound` instead. */
  export type Outbound = GetCustomerRequest$Outbound;
}

export function getCustomerRequestToJSON(
  getCustomerRequest: GetCustomerRequest,
): string {
  return JSON.stringify(
    GetCustomerRequest$outboundSchema.parse(getCustomerRequest),
  );
}

export function getCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomerLinks$inboundSchema: z.ZodType<
  GetCustomerLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: models.Url$inboundSchema,
  dashboard: models.Url$inboundSchema,
  payments: z.nullable(models.UrlNullable$inboundSchema).optional(),
  mandates: z.nullable(models.UrlNullable$inboundSchema).optional(),
  subscriptions: z.nullable(models.UrlNullable$inboundSchema).optional(),
  documentation: models.Url$inboundSchema,
});

/** @internal */
export type GetCustomerLinks$Outbound = {
  self: models.Url$Outbound;
  dashboard: models.Url$Outbound;
  payments?: models.UrlNullable$Outbound | null | undefined;
  mandates?: models.UrlNullable$Outbound | null | undefined;
  subscriptions?: models.UrlNullable$Outbound | null | undefined;
  documentation: models.Url$Outbound;
};

/** @internal */
export const GetCustomerLinks$outboundSchema: z.ZodType<
  GetCustomerLinks$Outbound,
  z.ZodTypeDef,
  GetCustomerLinks
> = z.object({
  self: models.Url$outboundSchema,
  dashboard: models.Url$outboundSchema,
  payments: z.nullable(models.UrlNullable$outboundSchema).optional(),
  mandates: z.nullable(models.UrlNullable$outboundSchema).optional(),
  subscriptions: z.nullable(models.UrlNullable$outboundSchema).optional(),
  documentation: models.Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerLinks$ {
  /** @deprecated use `GetCustomerLinks$inboundSchema` instead. */
  export const inboundSchema = GetCustomerLinks$inboundSchema;
  /** @deprecated use `GetCustomerLinks$outboundSchema` instead. */
  export const outboundSchema = GetCustomerLinks$outboundSchema;
  /** @deprecated use `GetCustomerLinks$Outbound` instead. */
  export type Outbound = GetCustomerLinks$Outbound;
}

export function getCustomerLinksToJSON(
  getCustomerLinks: GetCustomerLinks,
): string {
  return JSON.stringify(
    GetCustomerLinks$outboundSchema.parse(getCustomerLinks),
  );
}

export function getCustomerLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerLinks' from JSON`,
  );
}

/** @internal */
export const GetCustomerResponse$inboundSchema: z.ZodType<
  GetCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: models.Mode$inboundSchema.optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(models.LocaleResponse$inboundSchema).optional(),
  metadata: z.nullable(models.Metadata$inboundSchema).optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => GetCustomerLinks$inboundSchema).optional(),
  events: z.array(models.EntityEvent$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetCustomerResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  locale?: string | null | undefined;
  metadata?: models.Metadata$Outbound | null | undefined;
  createdAt?: string | undefined;
  _links?: GetCustomerLinks$Outbound | undefined;
  events?: Array<models.EntityEvent$Outbound> | undefined;
};

/** @internal */
export const GetCustomerResponse$outboundSchema: z.ZodType<
  GetCustomerResponse$Outbound,
  z.ZodTypeDef,
  GetCustomerResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: models.Mode$outboundSchema.optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  locale: z.nullable(models.LocaleResponse$outboundSchema).optional(),
  metadata: z.nullable(models.Metadata$outboundSchema).optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => GetCustomerLinks$outboundSchema).optional(),
  events: z.array(models.EntityEvent$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerResponse$ {
  /** @deprecated use `GetCustomerResponse$inboundSchema` instead. */
  export const inboundSchema = GetCustomerResponse$inboundSchema;
  /** @deprecated use `GetCustomerResponse$outboundSchema` instead. */
  export const outboundSchema = GetCustomerResponse$outboundSchema;
  /** @deprecated use `GetCustomerResponse$Outbound` instead. */
  export type Outbound = GetCustomerResponse$Outbound;
}

export function getCustomerResponseToJSON(
  getCustomerResponse: GetCustomerResponse,
): string {
  return JSON.stringify(
    GetCustomerResponse$outboundSchema.parse(getCustomerResponse),
  );
}

export function getCustomerResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerResponse' from JSON`,
  );
}
