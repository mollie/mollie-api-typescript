/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
 *
 * @remarks
 * amount.
 */
export type CreateRefundAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type CreateRefundMetadataRequest = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateRefundMetadataRequestUnion =
  | CreateRefundMetadataRequest
  | string
  | Array<string>;

/**
 * Specifies the reference type
 */
export const TypeAcquirerReferenceRequest = {
  AcquirerReference: "acquirer-reference",
} as const;
/**
 * Specifies the reference type
 */
export type TypeAcquirerReferenceRequest = ClosedEnum<
  typeof TypeAcquirerReferenceRequest
>;

export type ExternalReferenceRequest = {
  /**
   * Specifies the reference type
   */
  type?: TypeAcquirerReferenceRequest | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * The amount that will be pulled back.
 */
export type RoutingReversalAmountRequest = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The type of source. Currently only the source type `organization` is supported.
 */
export const RoutingReversalType = {
  Organization: "organization",
} as const;
/**
 * The type of source. Currently only the source type `organization` is supported.
 */
export type RoutingReversalType = ClosedEnum<typeof RoutingReversalType>;

/**
 * Where the funds will be pulled back from.
 */
export type CreateRefundSourceRequest = {
  /**
   * The type of source. Currently only the source type `organization` is supported.
   */
  type?: RoutingReversalType | undefined;
  /**
   * Required for source type `organization`. The ID of the connected organization the funds should be pulled
   *
   * @remarks
   * back from.
   */
  organizationId?: string | undefined;
};

export type RoutingReversalRequest = {
  /**
   * The amount that will be pulled back.
   */
  amount?: RoutingReversalAmountRequest | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: CreateRefundSourceRequest | undefined;
};

export type CreateRefundRequestBody = {
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
   *
   * @remarks
   * amount.
   */
  amount: CreateRefundAmountRequest;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateRefundMetadataRequest
    | string
    | Array<string>
    | null
    | undefined;
  externalReference?: ExternalReferenceRequest | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
   * merchants, by providing the `routing` object during [payment creation](create-payment).
   *
   * When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to
   * `true` when issuing a full refund.
   *
   * For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
   */
  reverseRouting?: boolean | null | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
   * needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?: Array<RoutingReversalRequest> | null | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
   * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
   * `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type CreateRefundRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  requestBody?: CreateRefundRequestBody | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateRefundUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type CreateRefundUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateRefundUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type ConflictDocumentation = {
  href: string;
  type: string;
};

export type ConflictLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: ConflictDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreateRefundNotFoundDocumentation = {
  href: string;
  type: string;
};

export type CreateRefundNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: CreateRefundNotFoundDocumentation;
};

/**
 * Whether this entity was created in live mode or in test mode.
 */
export const CreateRefundMode = {
  Live: "live",
  Test: "test",
} as const;
/**
 * Whether this entity was created in live mode or in test mode.
 */
export type CreateRefundMode = ClosedEnum<typeof CreateRefundMode>;

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
 *
 * @remarks
 * amount.
 */
export type CreateRefundAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted
 *
 * @remarks
 * to the currency your account is settled in.
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
 * zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
 * the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the
 * [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type CreateRefundSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type CreateRefundMetadataResponse = {};

/**
 * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
 *
 * @remarks
 * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
 */
export type CreateRefundMetadataResponseUnion =
  | CreateRefundMetadataResponse
  | string
  | Array<string>;

/**
 * Refunds may take some time to get confirmed.
 */
export const CreateRefundStatus = {
  Queued: "queued",
  Pending: "pending",
  Processing: "processing",
  Refunded: "refunded",
  Failed: "failed",
  Canceled: "canceled",
} as const;
/**
 * Refunds may take some time to get confirmed.
 */
export type CreateRefundStatus = ClosedEnum<typeof CreateRefundStatus>;

/**
 * Specifies the reference type
 */
export const CreateRefundTypeResponse = {
  AcquirerReference: "acquirer-reference",
} as const;
/**
 * Specifies the reference type
 */
export type CreateRefundTypeResponse = ClosedEnum<
  typeof CreateRefundTypeResponse
>;

export type CreateRefundExternalReferenceResponse = {
  /**
   * Specifies the reference type
   */
  type?: CreateRefundTypeResponse | undefined;
  /**
   * Unique reference from the payment provider
   */
  id?: string | undefined;
};

/**
 * The amount that will be pulled back.
 */
export type CreateRefundRoutingReversalAmountResponse = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Where the funds will be pulled back from.
 */
export type CreateRefundSourceOutput = {
  /**
   * Required for source type `organization`. The ID of the connected organization the funds should be pulled
   *
   * @remarks
   * back from.
   */
  organizationId?: string | undefined;
};

export type CreateRefundRoutingReversalResponse = {
  /**
   * The amount that will be pulled back.
   */
  amount?: CreateRefundRoutingReversalAmountResponse | undefined;
  /**
   * Where the funds will be pulled back from.
   */
  source?: CreateRefundSourceOutput | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateRefundSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [payment](get-payment) that this refund belongs to.
 */
export type CreateRefundPayment = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
 *
 * @remarks
 * yet settled.
 */
export type CreateRefundSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type CreateRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: CreateRefundSelf;
  /**
   * The API resource URL of the [payment](get-payment) that this refund belongs to.
   */
  payment: CreateRefundPayment;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
   *
   * @remarks
   * yet settled.
   */
  settlement?: CreateRefundSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: CreateRefundDocumentation;
};

/**
 * The newly created refund object.
 */
export type CreateRefundResponse = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
   *
   * @remarks
   * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode?: CreateRefundMode | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
   *
   * @remarks
   * amount.
   */
  amount?: CreateRefundAmountResponse | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted
   *
   * @remarks
   * to the currency your account is settled in.
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
   * zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while
   * the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the
   * [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: CreateRefundSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
   *
   * @remarks
   * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?:
    | CreateRefundMetadataResponse
    | string
    | Array<string>
    | null
    | undefined;
  /**
   * The unique identifier of the payment this refund was created for.
   *
   * @remarks
   * The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed.
   */
  status?: CreateRefundStatus | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  externalReference?: CreateRefundExternalReferenceResponse | undefined;
  /**
   * *This feature is only available to marketplace operators.*
   *
   * @remarks
   *
   * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
   *
   * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
   * needs to be reversed from which merchant(s).
   *
   * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
   */
  routingReversals?:
    | Array<CreateRefundRoutingReversalResponse>
    | null
    | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: CreateRefundLinks | undefined;
};

/** @internal */
export const CreateRefundAmountRequest$inboundSchema: z.ZodType<
  CreateRefundAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateRefundAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateRefundAmountRequest$outboundSchema: z.ZodType<
  CreateRefundAmountRequest$Outbound,
  z.ZodTypeDef,
  CreateRefundAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundAmountRequest$ {
  /** @deprecated use `CreateRefundAmountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRefundAmountRequest$inboundSchema;
  /** @deprecated use `CreateRefundAmountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRefundAmountRequest$outboundSchema;
  /** @deprecated use `CreateRefundAmountRequest$Outbound` instead. */
  export type Outbound = CreateRefundAmountRequest$Outbound;
}

export function createRefundAmountRequestToJSON(
  createRefundAmountRequest: CreateRefundAmountRequest,
): string {
  return JSON.stringify(
    CreateRefundAmountRequest$outboundSchema.parse(createRefundAmountRequest),
  );
}

export function createRefundAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundAmountRequest' from JSON`,
  );
}

/** @internal */
export const CreateRefundMetadataRequest$inboundSchema: z.ZodType<
  CreateRefundMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateRefundMetadataRequest$Outbound = {};

/** @internal */
export const CreateRefundMetadataRequest$outboundSchema: z.ZodType<
  CreateRefundMetadataRequest$Outbound,
  z.ZodTypeDef,
  CreateRefundMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundMetadataRequest$ {
  /** @deprecated use `CreateRefundMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRefundMetadataRequest$inboundSchema;
  /** @deprecated use `CreateRefundMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRefundMetadataRequest$outboundSchema;
  /** @deprecated use `CreateRefundMetadataRequest$Outbound` instead. */
  export type Outbound = CreateRefundMetadataRequest$Outbound;
}

export function createRefundMetadataRequestToJSON(
  createRefundMetadataRequest: CreateRefundMetadataRequest,
): string {
  return JSON.stringify(
    CreateRefundMetadataRequest$outboundSchema.parse(
      createRefundMetadataRequest,
    ),
  );
}

export function createRefundMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundMetadataRequest' from JSON`,
  );
}

/** @internal */
export const CreateRefundMetadataRequestUnion$inboundSchema: z.ZodType<
  CreateRefundMetadataRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateRefundMetadataRequest$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateRefundMetadataRequestUnion$Outbound =
  | CreateRefundMetadataRequest$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateRefundMetadataRequestUnion$outboundSchema: z.ZodType<
  CreateRefundMetadataRequestUnion$Outbound,
  z.ZodTypeDef,
  CreateRefundMetadataRequestUnion
> = z.union([
  z.lazy(() => CreateRefundMetadataRequest$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundMetadataRequestUnion$ {
  /** @deprecated use `CreateRefundMetadataRequestUnion$inboundSchema` instead. */
  export const inboundSchema = CreateRefundMetadataRequestUnion$inboundSchema;
  /** @deprecated use `CreateRefundMetadataRequestUnion$outboundSchema` instead. */
  export const outboundSchema = CreateRefundMetadataRequestUnion$outboundSchema;
  /** @deprecated use `CreateRefundMetadataRequestUnion$Outbound` instead. */
  export type Outbound = CreateRefundMetadataRequestUnion$Outbound;
}

export function createRefundMetadataRequestUnionToJSON(
  createRefundMetadataRequestUnion: CreateRefundMetadataRequestUnion,
): string {
  return JSON.stringify(
    CreateRefundMetadataRequestUnion$outboundSchema.parse(
      createRefundMetadataRequestUnion,
    ),
  );
}

export function createRefundMetadataRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundMetadataRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundMetadataRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundMetadataRequestUnion' from JSON`,
  );
}

/** @internal */
export const TypeAcquirerReferenceRequest$inboundSchema: z.ZodNativeEnum<
  typeof TypeAcquirerReferenceRequest
> = z.nativeEnum(TypeAcquirerReferenceRequest);

/** @internal */
export const TypeAcquirerReferenceRequest$outboundSchema: z.ZodNativeEnum<
  typeof TypeAcquirerReferenceRequest
> = TypeAcquirerReferenceRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAcquirerReferenceRequest$ {
  /** @deprecated use `TypeAcquirerReferenceRequest$inboundSchema` instead. */
  export const inboundSchema = TypeAcquirerReferenceRequest$inboundSchema;
  /** @deprecated use `TypeAcquirerReferenceRequest$outboundSchema` instead. */
  export const outboundSchema = TypeAcquirerReferenceRequest$outboundSchema;
}

/** @internal */
export const ExternalReferenceRequest$inboundSchema: z.ZodType<
  ExternalReferenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAcquirerReferenceRequest$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type ExternalReferenceRequest$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const ExternalReferenceRequest$outboundSchema: z.ZodType<
  ExternalReferenceRequest$Outbound,
  z.ZodTypeDef,
  ExternalReferenceRequest
> = z.object({
  type: TypeAcquirerReferenceRequest$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalReferenceRequest$ {
  /** @deprecated use `ExternalReferenceRequest$inboundSchema` instead. */
  export const inboundSchema = ExternalReferenceRequest$inboundSchema;
  /** @deprecated use `ExternalReferenceRequest$outboundSchema` instead. */
  export const outboundSchema = ExternalReferenceRequest$outboundSchema;
  /** @deprecated use `ExternalReferenceRequest$Outbound` instead. */
  export type Outbound = ExternalReferenceRequest$Outbound;
}

export function externalReferenceRequestToJSON(
  externalReferenceRequest: ExternalReferenceRequest,
): string {
  return JSON.stringify(
    ExternalReferenceRequest$outboundSchema.parse(externalReferenceRequest),
  );
}

export function externalReferenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExternalReferenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalReferenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalReferenceRequest' from JSON`,
  );
}

/** @internal */
export const RoutingReversalAmountRequest$inboundSchema: z.ZodType<
  RoutingReversalAmountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type RoutingReversalAmountRequest$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const RoutingReversalAmountRequest$outboundSchema: z.ZodType<
  RoutingReversalAmountRequest$Outbound,
  z.ZodTypeDef,
  RoutingReversalAmountRequest
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoutingReversalAmountRequest$ {
  /** @deprecated use `RoutingReversalAmountRequest$inboundSchema` instead. */
  export const inboundSchema = RoutingReversalAmountRequest$inboundSchema;
  /** @deprecated use `RoutingReversalAmountRequest$outboundSchema` instead. */
  export const outboundSchema = RoutingReversalAmountRequest$outboundSchema;
  /** @deprecated use `RoutingReversalAmountRequest$Outbound` instead. */
  export type Outbound = RoutingReversalAmountRequest$Outbound;
}

export function routingReversalAmountRequestToJSON(
  routingReversalAmountRequest: RoutingReversalAmountRequest,
): string {
  return JSON.stringify(
    RoutingReversalAmountRequest$outboundSchema.parse(
      routingReversalAmountRequest,
    ),
  );
}

export function routingReversalAmountRequestFromJSON(
  jsonString: string,
): SafeParseResult<RoutingReversalAmountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoutingReversalAmountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoutingReversalAmountRequest' from JSON`,
  );
}

/** @internal */
export const RoutingReversalType$inboundSchema: z.ZodNativeEnum<
  typeof RoutingReversalType
> = z.nativeEnum(RoutingReversalType);

/** @internal */
export const RoutingReversalType$outboundSchema: z.ZodNativeEnum<
  typeof RoutingReversalType
> = RoutingReversalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoutingReversalType$ {
  /** @deprecated use `RoutingReversalType$inboundSchema` instead. */
  export const inboundSchema = RoutingReversalType$inboundSchema;
  /** @deprecated use `RoutingReversalType$outboundSchema` instead. */
  export const outboundSchema = RoutingReversalType$outboundSchema;
}

/** @internal */
export const CreateRefundSourceRequest$inboundSchema: z.ZodType<
  CreateRefundSourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RoutingReversalType$inboundSchema.optional(),
  organizationId: z.string().optional(),
});

/** @internal */
export type CreateRefundSourceRequest$Outbound = {
  type?: string | undefined;
  organizationId?: string | undefined;
};

/** @internal */
export const CreateRefundSourceRequest$outboundSchema: z.ZodType<
  CreateRefundSourceRequest$Outbound,
  z.ZodTypeDef,
  CreateRefundSourceRequest
> = z.object({
  type: RoutingReversalType$outboundSchema.optional(),
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundSourceRequest$ {
  /** @deprecated use `CreateRefundSourceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRefundSourceRequest$inboundSchema;
  /** @deprecated use `CreateRefundSourceRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRefundSourceRequest$outboundSchema;
  /** @deprecated use `CreateRefundSourceRequest$Outbound` instead. */
  export type Outbound = CreateRefundSourceRequest$Outbound;
}

export function createRefundSourceRequestToJSON(
  createRefundSourceRequest: CreateRefundSourceRequest,
): string {
  return JSON.stringify(
    CreateRefundSourceRequest$outboundSchema.parse(createRefundSourceRequest),
  );
}

export function createRefundSourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundSourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundSourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundSourceRequest' from JSON`,
  );
}

/** @internal */
export const RoutingReversalRequest$inboundSchema: z.ZodType<
  RoutingReversalRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => RoutingReversalAmountRequest$inboundSchema).optional(),
  source: z.lazy(() => CreateRefundSourceRequest$inboundSchema).optional(),
});

/** @internal */
export type RoutingReversalRequest$Outbound = {
  amount?: RoutingReversalAmountRequest$Outbound | undefined;
  source?: CreateRefundSourceRequest$Outbound | undefined;
};

/** @internal */
export const RoutingReversalRequest$outboundSchema: z.ZodType<
  RoutingReversalRequest$Outbound,
  z.ZodTypeDef,
  RoutingReversalRequest
> = z.object({
  amount: z.lazy(() => RoutingReversalAmountRequest$outboundSchema).optional(),
  source: z.lazy(() => CreateRefundSourceRequest$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoutingReversalRequest$ {
  /** @deprecated use `RoutingReversalRequest$inboundSchema` instead. */
  export const inboundSchema = RoutingReversalRequest$inboundSchema;
  /** @deprecated use `RoutingReversalRequest$outboundSchema` instead. */
  export const outboundSchema = RoutingReversalRequest$outboundSchema;
  /** @deprecated use `RoutingReversalRequest$Outbound` instead. */
  export type Outbound = RoutingReversalRequest$Outbound;
}

export function routingReversalRequestToJSON(
  routingReversalRequest: RoutingReversalRequest,
): string {
  return JSON.stringify(
    RoutingReversalRequest$outboundSchema.parse(routingReversalRequest),
  );
}

export function routingReversalRequestFromJSON(
  jsonString: string,
): SafeParseResult<RoutingReversalRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoutingReversalRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoutingReversalRequest' from JSON`,
  );
}

/** @internal */
export const CreateRefundRequestBody$inboundSchema: z.ZodType<
  CreateRefundRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  amount: z.lazy(() => CreateRefundAmountRequest$inboundSchema),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateRefundMetadataRequest$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  externalReference: z.lazy(() => ExternalReferenceRequest$inboundSchema)
    .optional(),
  reverseRouting: z.nullable(z.boolean()).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => RoutingReversalRequest$inboundSchema)),
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CreateRefundRequestBody$Outbound = {
  description?: string | undefined;
  amount: CreateRefundAmountRequest$Outbound;
  metadata?:
    | CreateRefundMetadataRequest$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  externalReference?: ExternalReferenceRequest$Outbound | undefined;
  reverseRouting?: boolean | null | undefined;
  routingReversals?: Array<RoutingReversalRequest$Outbound> | null | undefined;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const CreateRefundRequestBody$outboundSchema: z.ZodType<
  CreateRefundRequestBody$Outbound,
  z.ZodTypeDef,
  CreateRefundRequestBody
> = z.object({
  description: z.string().optional(),
  amount: z.lazy(() => CreateRefundAmountRequest$outboundSchema),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateRefundMetadataRequest$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  externalReference: z.lazy(() => ExternalReferenceRequest$outboundSchema)
    .optional(),
  reverseRouting: z.nullable(z.boolean()).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => RoutingReversalRequest$outboundSchema)),
  ).optional(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundRequestBody$ {
  /** @deprecated use `CreateRefundRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateRefundRequestBody$inboundSchema;
  /** @deprecated use `CreateRefundRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateRefundRequestBody$outboundSchema;
  /** @deprecated use `CreateRefundRequestBody$Outbound` instead. */
  export type Outbound = CreateRefundRequestBody$Outbound;
}

export function createRefundRequestBodyToJSON(
  createRefundRequestBody: CreateRefundRequestBody,
): string {
  return JSON.stringify(
    CreateRefundRequestBody$outboundSchema.parse(createRefundRequestBody),
  );
}

export function createRefundRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateRefundRequest$inboundSchema: z.ZodType<
  CreateRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  RequestBody: z.lazy(() => CreateRefundRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateRefundRequest$Outbound = {
  paymentId: string;
  RequestBody?: CreateRefundRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateRefundRequest$outboundSchema: z.ZodType<
  CreateRefundRequest$Outbound,
  z.ZodTypeDef,
  CreateRefundRequest
> = z.object({
  paymentId: z.string(),
  requestBody: z.lazy(() => CreateRefundRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundRequest$ {
  /** @deprecated use `CreateRefundRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRefundRequest$inboundSchema;
  /** @deprecated use `CreateRefundRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRefundRequest$outboundSchema;
  /** @deprecated use `CreateRefundRequest$Outbound` instead. */
  export type Outbound = CreateRefundRequest$Outbound;
}

export function createRefundRequestToJSON(
  createRefundRequest: CreateRefundRequest,
): string {
  return JSON.stringify(
    CreateRefundRequest$outboundSchema.parse(createRefundRequest),
  );
}

export function createRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundRequest' from JSON`,
  );
}

/** @internal */
export const CreateRefundUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    CreateRefundUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type CreateRefundUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateRefundUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    CreateRefundUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    CreateRefundUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundUnprocessableEntityDocumentation$ {
  /** @deprecated use `CreateRefundUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    CreateRefundUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `CreateRefundUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateRefundUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `CreateRefundUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = CreateRefundUnprocessableEntityDocumentation$Outbound;
}

export function createRefundUnprocessableEntityDocumentationToJSON(
  createRefundUnprocessableEntityDocumentation:
    CreateRefundUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    CreateRefundUnprocessableEntityDocumentation$outboundSchema.parse(
      createRefundUnprocessableEntityDocumentation,
    ),
  );
}

export function createRefundUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateRefundUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateRefundUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateRefundUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateRefundUnprocessableEntityLinks$inboundSchema: z.ZodType<
  CreateRefundUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    CreateRefundUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type CreateRefundUnprocessableEntityLinks$Outbound = {
  documentation: CreateRefundUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const CreateRefundUnprocessableEntityLinks$outboundSchema: z.ZodType<
  CreateRefundUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  CreateRefundUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    CreateRefundUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundUnprocessableEntityLinks$ {
  /** @deprecated use `CreateRefundUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateRefundUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `CreateRefundUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateRefundUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `CreateRefundUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = CreateRefundUnprocessableEntityLinks$Outbound;
}

export function createRefundUnprocessableEntityLinksToJSON(
  createRefundUnprocessableEntityLinks: CreateRefundUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    CreateRefundUnprocessableEntityLinks$outboundSchema.parse(
      createRefundUnprocessableEntityLinks,
    ),
  );
}

export function createRefundUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateRefundUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const ConflictDocumentation$inboundSchema: z.ZodType<
  ConflictDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type ConflictDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const ConflictDocumentation$outboundSchema: z.ZodType<
  ConflictDocumentation$Outbound,
  z.ZodTypeDef,
  ConflictDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictDocumentation$ {
  /** @deprecated use `ConflictDocumentation$inboundSchema` instead. */
  export const inboundSchema = ConflictDocumentation$inboundSchema;
  /** @deprecated use `ConflictDocumentation$outboundSchema` instead. */
  export const outboundSchema = ConflictDocumentation$outboundSchema;
  /** @deprecated use `ConflictDocumentation$Outbound` instead. */
  export type Outbound = ConflictDocumentation$Outbound;
}

export function conflictDocumentationToJSON(
  conflictDocumentation: ConflictDocumentation,
): string {
  return JSON.stringify(
    ConflictDocumentation$outboundSchema.parse(conflictDocumentation),
  );
}

export function conflictDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<ConflictDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictDocumentation' from JSON`,
  );
}

/** @internal */
export const ConflictLinks$inboundSchema: z.ZodType<
  ConflictLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => ConflictDocumentation$inboundSchema),
});

/** @internal */
export type ConflictLinks$Outbound = {
  documentation: ConflictDocumentation$Outbound;
};

/** @internal */
export const ConflictLinks$outboundSchema: z.ZodType<
  ConflictLinks$Outbound,
  z.ZodTypeDef,
  ConflictLinks
> = z.object({
  documentation: z.lazy(() => ConflictDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictLinks$ {
  /** @deprecated use `ConflictLinks$inboundSchema` instead. */
  export const inboundSchema = ConflictLinks$inboundSchema;
  /** @deprecated use `ConflictLinks$outboundSchema` instead. */
  export const outboundSchema = ConflictLinks$outboundSchema;
  /** @deprecated use `ConflictLinks$Outbound` instead. */
  export type Outbound = ConflictLinks$Outbound;
}

export function conflictLinksToJSON(conflictLinks: ConflictLinks): string {
  return JSON.stringify(ConflictLinks$outboundSchema.parse(conflictLinks));
}

export function conflictLinksFromJSON(
  jsonString: string,
): SafeParseResult<ConflictLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictLinks' from JSON`,
  );
}

/** @internal */
export const CreateRefundNotFoundDocumentation$inboundSchema: z.ZodType<
  CreateRefundNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateRefundNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateRefundNotFoundDocumentation$outboundSchema: z.ZodType<
  CreateRefundNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateRefundNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundNotFoundDocumentation$ {
  /** @deprecated use `CreateRefundNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateRefundNotFoundDocumentation$inboundSchema;
  /** @deprecated use `CreateRefundNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    CreateRefundNotFoundDocumentation$outboundSchema;
  /** @deprecated use `CreateRefundNotFoundDocumentation$Outbound` instead. */
  export type Outbound = CreateRefundNotFoundDocumentation$Outbound;
}

export function createRefundNotFoundDocumentationToJSON(
  createRefundNotFoundDocumentation: CreateRefundNotFoundDocumentation,
): string {
  return JSON.stringify(
    CreateRefundNotFoundDocumentation$outboundSchema.parse(
      createRefundNotFoundDocumentation,
    ),
  );
}

export function createRefundNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateRefundNotFoundLinks$inboundSchema: z.ZodType<
  CreateRefundNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => CreateRefundNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type CreateRefundNotFoundLinks$Outbound = {
  documentation: CreateRefundNotFoundDocumentation$Outbound;
};

/** @internal */
export const CreateRefundNotFoundLinks$outboundSchema: z.ZodType<
  CreateRefundNotFoundLinks$Outbound,
  z.ZodTypeDef,
  CreateRefundNotFoundLinks
> = z.object({
  documentation: z.lazy(() => CreateRefundNotFoundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundNotFoundLinks$ {
  /** @deprecated use `CreateRefundNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateRefundNotFoundLinks$inboundSchema;
  /** @deprecated use `CreateRefundNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateRefundNotFoundLinks$outboundSchema;
  /** @deprecated use `CreateRefundNotFoundLinks$Outbound` instead. */
  export type Outbound = CreateRefundNotFoundLinks$Outbound;
}

export function createRefundNotFoundLinksToJSON(
  createRefundNotFoundLinks: CreateRefundNotFoundLinks,
): string {
  return JSON.stringify(
    CreateRefundNotFoundLinks$outboundSchema.parse(createRefundNotFoundLinks),
  );
}

export function createRefundNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const CreateRefundMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateRefundMode
> = z.nativeEnum(CreateRefundMode);

/** @internal */
export const CreateRefundMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateRefundMode
> = CreateRefundMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundMode$ {
  /** @deprecated use `CreateRefundMode$inboundSchema` instead. */
  export const inboundSchema = CreateRefundMode$inboundSchema;
  /** @deprecated use `CreateRefundMode$outboundSchema` instead. */
  export const outboundSchema = CreateRefundMode$outboundSchema;
}

/** @internal */
export const CreateRefundAmountResponse$inboundSchema: z.ZodType<
  CreateRefundAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateRefundAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateRefundAmountResponse$outboundSchema: z.ZodType<
  CreateRefundAmountResponse$Outbound,
  z.ZodTypeDef,
  CreateRefundAmountResponse
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundAmountResponse$ {
  /** @deprecated use `CreateRefundAmountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateRefundAmountResponse$inboundSchema;
  /** @deprecated use `CreateRefundAmountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateRefundAmountResponse$outboundSchema;
  /** @deprecated use `CreateRefundAmountResponse$Outbound` instead. */
  export type Outbound = CreateRefundAmountResponse$Outbound;
}

export function createRefundAmountResponseToJSON(
  createRefundAmountResponse: CreateRefundAmountResponse,
): string {
  return JSON.stringify(
    CreateRefundAmountResponse$outboundSchema.parse(createRefundAmountResponse),
  );
}

export function createRefundAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundAmountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundAmountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundAmountResponse' from JSON`,
  );
}

/** @internal */
export const CreateRefundSettlementAmount$inboundSchema: z.ZodType<
  CreateRefundSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateRefundSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateRefundSettlementAmount$outboundSchema: z.ZodType<
  CreateRefundSettlementAmount$Outbound,
  z.ZodTypeDef,
  CreateRefundSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundSettlementAmount$ {
  /** @deprecated use `CreateRefundSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = CreateRefundSettlementAmount$inboundSchema;
  /** @deprecated use `CreateRefundSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = CreateRefundSettlementAmount$outboundSchema;
  /** @deprecated use `CreateRefundSettlementAmount$Outbound` instead. */
  export type Outbound = CreateRefundSettlementAmount$Outbound;
}

export function createRefundSettlementAmountToJSON(
  createRefundSettlementAmount: CreateRefundSettlementAmount,
): string {
  return JSON.stringify(
    CreateRefundSettlementAmount$outboundSchema.parse(
      createRefundSettlementAmount,
    ),
  );
}

export function createRefundSettlementAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundSettlementAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundSettlementAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundSettlementAmount' from JSON`,
  );
}

/** @internal */
export const CreateRefundMetadataResponse$inboundSchema: z.ZodType<
  CreateRefundMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateRefundMetadataResponse$Outbound = {};

/** @internal */
export const CreateRefundMetadataResponse$outboundSchema: z.ZodType<
  CreateRefundMetadataResponse$Outbound,
  z.ZodTypeDef,
  CreateRefundMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundMetadataResponse$ {
  /** @deprecated use `CreateRefundMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = CreateRefundMetadataResponse$inboundSchema;
  /** @deprecated use `CreateRefundMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = CreateRefundMetadataResponse$outboundSchema;
  /** @deprecated use `CreateRefundMetadataResponse$Outbound` instead. */
  export type Outbound = CreateRefundMetadataResponse$Outbound;
}

export function createRefundMetadataResponseToJSON(
  createRefundMetadataResponse: CreateRefundMetadataResponse,
): string {
  return JSON.stringify(
    CreateRefundMetadataResponse$outboundSchema.parse(
      createRefundMetadataResponse,
    ),
  );
}

export function createRefundMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundMetadataResponse' from JSON`,
  );
}

/** @internal */
export const CreateRefundMetadataResponseUnion$inboundSchema: z.ZodType<
  CreateRefundMetadataResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateRefundMetadataResponse$inboundSchema),
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type CreateRefundMetadataResponseUnion$Outbound =
  | CreateRefundMetadataResponse$Outbound
  | string
  | Array<string>;

/** @internal */
export const CreateRefundMetadataResponseUnion$outboundSchema: z.ZodType<
  CreateRefundMetadataResponseUnion$Outbound,
  z.ZodTypeDef,
  CreateRefundMetadataResponseUnion
> = z.union([
  z.lazy(() => CreateRefundMetadataResponse$outboundSchema),
  z.string(),
  z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundMetadataResponseUnion$ {
  /** @deprecated use `CreateRefundMetadataResponseUnion$inboundSchema` instead. */
  export const inboundSchema = CreateRefundMetadataResponseUnion$inboundSchema;
  /** @deprecated use `CreateRefundMetadataResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateRefundMetadataResponseUnion$outboundSchema;
  /** @deprecated use `CreateRefundMetadataResponseUnion$Outbound` instead. */
  export type Outbound = CreateRefundMetadataResponseUnion$Outbound;
}

export function createRefundMetadataResponseUnionToJSON(
  createRefundMetadataResponseUnion: CreateRefundMetadataResponseUnion,
): string {
  return JSON.stringify(
    CreateRefundMetadataResponseUnion$outboundSchema.parse(
      createRefundMetadataResponseUnion,
    ),
  );
}

export function createRefundMetadataResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundMetadataResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundMetadataResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundMetadataResponseUnion' from JSON`,
  );
}

/** @internal */
export const CreateRefundStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateRefundStatus
> = z.nativeEnum(CreateRefundStatus);

/** @internal */
export const CreateRefundStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateRefundStatus
> = CreateRefundStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundStatus$ {
  /** @deprecated use `CreateRefundStatus$inboundSchema` instead. */
  export const inboundSchema = CreateRefundStatus$inboundSchema;
  /** @deprecated use `CreateRefundStatus$outboundSchema` instead. */
  export const outboundSchema = CreateRefundStatus$outboundSchema;
}

/** @internal */
export const CreateRefundTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateRefundTypeResponse
> = z.nativeEnum(CreateRefundTypeResponse);

/** @internal */
export const CreateRefundTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateRefundTypeResponse
> = CreateRefundTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundTypeResponse$ {
  /** @deprecated use `CreateRefundTypeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateRefundTypeResponse$inboundSchema;
  /** @deprecated use `CreateRefundTypeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateRefundTypeResponse$outboundSchema;
}

/** @internal */
export const CreateRefundExternalReferenceResponse$inboundSchema: z.ZodType<
  CreateRefundExternalReferenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateRefundTypeResponse$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type CreateRefundExternalReferenceResponse$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const CreateRefundExternalReferenceResponse$outboundSchema: z.ZodType<
  CreateRefundExternalReferenceResponse$Outbound,
  z.ZodTypeDef,
  CreateRefundExternalReferenceResponse
> = z.object({
  type: CreateRefundTypeResponse$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundExternalReferenceResponse$ {
  /** @deprecated use `CreateRefundExternalReferenceResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateRefundExternalReferenceResponse$inboundSchema;
  /** @deprecated use `CreateRefundExternalReferenceResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateRefundExternalReferenceResponse$outboundSchema;
  /** @deprecated use `CreateRefundExternalReferenceResponse$Outbound` instead. */
  export type Outbound = CreateRefundExternalReferenceResponse$Outbound;
}

export function createRefundExternalReferenceResponseToJSON(
  createRefundExternalReferenceResponse: CreateRefundExternalReferenceResponse,
): string {
  return JSON.stringify(
    CreateRefundExternalReferenceResponse$outboundSchema.parse(
      createRefundExternalReferenceResponse,
    ),
  );
}

export function createRefundExternalReferenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundExternalReferenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateRefundExternalReferenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundExternalReferenceResponse' from JSON`,
  );
}

/** @internal */
export const CreateRefundRoutingReversalAmountResponse$inboundSchema: z.ZodType<
  CreateRefundRoutingReversalAmountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateRefundRoutingReversalAmountResponse$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateRefundRoutingReversalAmountResponse$outboundSchema:
  z.ZodType<
    CreateRefundRoutingReversalAmountResponse$Outbound,
    z.ZodTypeDef,
    CreateRefundRoutingReversalAmountResponse
  > = z.object({
    currency: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundRoutingReversalAmountResponse$ {
  /** @deprecated use `CreateRefundRoutingReversalAmountResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateRefundRoutingReversalAmountResponse$inboundSchema;
  /** @deprecated use `CreateRefundRoutingReversalAmountResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateRefundRoutingReversalAmountResponse$outboundSchema;
  /** @deprecated use `CreateRefundRoutingReversalAmountResponse$Outbound` instead. */
  export type Outbound = CreateRefundRoutingReversalAmountResponse$Outbound;
}

export function createRefundRoutingReversalAmountResponseToJSON(
  createRefundRoutingReversalAmountResponse:
    CreateRefundRoutingReversalAmountResponse,
): string {
  return JSON.stringify(
    CreateRefundRoutingReversalAmountResponse$outboundSchema.parse(
      createRefundRoutingReversalAmountResponse,
    ),
  );
}

export function createRefundRoutingReversalAmountResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateRefundRoutingReversalAmountResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateRefundRoutingReversalAmountResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateRefundRoutingReversalAmountResponse' from JSON`,
  );
}

/** @internal */
export const CreateRefundSourceOutput$inboundSchema: z.ZodType<
  CreateRefundSourceOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string().optional(),
});

/** @internal */
export type CreateRefundSourceOutput$Outbound = {
  organizationId?: string | undefined;
};

/** @internal */
export const CreateRefundSourceOutput$outboundSchema: z.ZodType<
  CreateRefundSourceOutput$Outbound,
  z.ZodTypeDef,
  CreateRefundSourceOutput
> = z.object({
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundSourceOutput$ {
  /** @deprecated use `CreateRefundSourceOutput$inboundSchema` instead. */
  export const inboundSchema = CreateRefundSourceOutput$inboundSchema;
  /** @deprecated use `CreateRefundSourceOutput$outboundSchema` instead. */
  export const outboundSchema = CreateRefundSourceOutput$outboundSchema;
  /** @deprecated use `CreateRefundSourceOutput$Outbound` instead. */
  export type Outbound = CreateRefundSourceOutput$Outbound;
}

export function createRefundSourceOutputToJSON(
  createRefundSourceOutput: CreateRefundSourceOutput,
): string {
  return JSON.stringify(
    CreateRefundSourceOutput$outboundSchema.parse(createRefundSourceOutput),
  );
}

export function createRefundSourceOutputFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundSourceOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundSourceOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundSourceOutput' from JSON`,
  );
}

/** @internal */
export const CreateRefundRoutingReversalResponse$inboundSchema: z.ZodType<
  CreateRefundRoutingReversalResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CreateRefundRoutingReversalAmountResponse$inboundSchema)
    .optional(),
  source: z.lazy(() => CreateRefundSourceOutput$inboundSchema).optional(),
});

/** @internal */
export type CreateRefundRoutingReversalResponse$Outbound = {
  amount?: CreateRefundRoutingReversalAmountResponse$Outbound | undefined;
  source?: CreateRefundSourceOutput$Outbound | undefined;
};

/** @internal */
export const CreateRefundRoutingReversalResponse$outboundSchema: z.ZodType<
  CreateRefundRoutingReversalResponse$Outbound,
  z.ZodTypeDef,
  CreateRefundRoutingReversalResponse
> = z.object({
  amount: z.lazy(() => CreateRefundRoutingReversalAmountResponse$outboundSchema)
    .optional(),
  source: z.lazy(() => CreateRefundSourceOutput$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundRoutingReversalResponse$ {
  /** @deprecated use `CreateRefundRoutingReversalResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateRefundRoutingReversalResponse$inboundSchema;
  /** @deprecated use `CreateRefundRoutingReversalResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateRefundRoutingReversalResponse$outboundSchema;
  /** @deprecated use `CreateRefundRoutingReversalResponse$Outbound` instead. */
  export type Outbound = CreateRefundRoutingReversalResponse$Outbound;
}

export function createRefundRoutingReversalResponseToJSON(
  createRefundRoutingReversalResponse: CreateRefundRoutingReversalResponse,
): string {
  return JSON.stringify(
    CreateRefundRoutingReversalResponse$outboundSchema.parse(
      createRefundRoutingReversalResponse,
    ),
  );
}

export function createRefundRoutingReversalResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundRoutingReversalResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateRefundRoutingReversalResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundRoutingReversalResponse' from JSON`,
  );
}

/** @internal */
export const CreateRefundSelf$inboundSchema: z.ZodType<
  CreateRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateRefundSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateRefundSelf$outboundSchema: z.ZodType<
  CreateRefundSelf$Outbound,
  z.ZodTypeDef,
  CreateRefundSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundSelf$ {
  /** @deprecated use `CreateRefundSelf$inboundSchema` instead. */
  export const inboundSchema = CreateRefundSelf$inboundSchema;
  /** @deprecated use `CreateRefundSelf$outboundSchema` instead. */
  export const outboundSchema = CreateRefundSelf$outboundSchema;
  /** @deprecated use `CreateRefundSelf$Outbound` instead. */
  export type Outbound = CreateRefundSelf$Outbound;
}

export function createRefundSelfToJSON(
  createRefundSelf: CreateRefundSelf,
): string {
  return JSON.stringify(
    CreateRefundSelf$outboundSchema.parse(createRefundSelf),
  );
}

export function createRefundSelfFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundSelf' from JSON`,
  );
}

/** @internal */
export const CreateRefundPayment$inboundSchema: z.ZodType<
  CreateRefundPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateRefundPayment$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateRefundPayment$outboundSchema: z.ZodType<
  CreateRefundPayment$Outbound,
  z.ZodTypeDef,
  CreateRefundPayment
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundPayment$ {
  /** @deprecated use `CreateRefundPayment$inboundSchema` instead. */
  export const inboundSchema = CreateRefundPayment$inboundSchema;
  /** @deprecated use `CreateRefundPayment$outboundSchema` instead. */
  export const outboundSchema = CreateRefundPayment$outboundSchema;
  /** @deprecated use `CreateRefundPayment$Outbound` instead. */
  export type Outbound = CreateRefundPayment$Outbound;
}

export function createRefundPaymentToJSON(
  createRefundPayment: CreateRefundPayment,
): string {
  return JSON.stringify(
    CreateRefundPayment$outboundSchema.parse(createRefundPayment),
  );
}

export function createRefundPaymentFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundPayment' from JSON`,
  );
}

/** @internal */
export const CreateRefundSettlement$inboundSchema: z.ZodType<
  CreateRefundSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type CreateRefundSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CreateRefundSettlement$outboundSchema: z.ZodType<
  CreateRefundSettlement$Outbound,
  z.ZodTypeDef,
  CreateRefundSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundSettlement$ {
  /** @deprecated use `CreateRefundSettlement$inboundSchema` instead. */
  export const inboundSchema = CreateRefundSettlement$inboundSchema;
  /** @deprecated use `CreateRefundSettlement$outboundSchema` instead. */
  export const outboundSchema = CreateRefundSettlement$outboundSchema;
  /** @deprecated use `CreateRefundSettlement$Outbound` instead. */
  export type Outbound = CreateRefundSettlement$Outbound;
}

export function createRefundSettlementToJSON(
  createRefundSettlement: CreateRefundSettlement,
): string {
  return JSON.stringify(
    CreateRefundSettlement$outboundSchema.parse(createRefundSettlement),
  );
}

export function createRefundSettlementFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundSettlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundSettlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundSettlement' from JSON`,
  );
}

/** @internal */
export const CreateRefundDocumentation$inboundSchema: z.ZodType<
  CreateRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateRefundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const CreateRefundDocumentation$outboundSchema: z.ZodType<
  CreateRefundDocumentation$Outbound,
  z.ZodTypeDef,
  CreateRefundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundDocumentation$ {
  /** @deprecated use `CreateRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreateRefundDocumentation$inboundSchema;
  /** @deprecated use `CreateRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreateRefundDocumentation$outboundSchema;
  /** @deprecated use `CreateRefundDocumentation$Outbound` instead. */
  export type Outbound = CreateRefundDocumentation$Outbound;
}

export function createRefundDocumentationToJSON(
  createRefundDocumentation: CreateRefundDocumentation,
): string {
  return JSON.stringify(
    CreateRefundDocumentation$outboundSchema.parse(createRefundDocumentation),
  );
}

export function createRefundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundDocumentation' from JSON`,
  );
}

/** @internal */
export const CreateRefundLinks$inboundSchema: z.ZodType<
  CreateRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => CreateRefundSelf$inboundSchema),
  payment: z.lazy(() => CreateRefundPayment$inboundSchema),
  settlement: z.nullable(z.lazy(() => CreateRefundSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() => CreateRefundDocumentation$inboundSchema),
});

/** @internal */
export type CreateRefundLinks$Outbound = {
  self: CreateRefundSelf$Outbound;
  payment: CreateRefundPayment$Outbound;
  settlement?: CreateRefundSettlement$Outbound | null | undefined;
  documentation: CreateRefundDocumentation$Outbound;
};

/** @internal */
export const CreateRefundLinks$outboundSchema: z.ZodType<
  CreateRefundLinks$Outbound,
  z.ZodTypeDef,
  CreateRefundLinks
> = z.object({
  self: z.lazy(() => CreateRefundSelf$outboundSchema),
  payment: z.lazy(() => CreateRefundPayment$outboundSchema),
  settlement: z.nullable(z.lazy(() => CreateRefundSettlement$outboundSchema))
    .optional(),
  documentation: z.lazy(() => CreateRefundDocumentation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundLinks$ {
  /** @deprecated use `CreateRefundLinks$inboundSchema` instead. */
  export const inboundSchema = CreateRefundLinks$inboundSchema;
  /** @deprecated use `CreateRefundLinks$outboundSchema` instead. */
  export const outboundSchema = CreateRefundLinks$outboundSchema;
  /** @deprecated use `CreateRefundLinks$Outbound` instead. */
  export type Outbound = CreateRefundLinks$Outbound;
}

export function createRefundLinksToJSON(
  createRefundLinks: CreateRefundLinks,
): string {
  return JSON.stringify(
    CreateRefundLinks$outboundSchema.parse(createRefundLinks),
  );
}

export function createRefundLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundLinks' from JSON`,
  );
}

/** @internal */
export const CreateRefundResponse$inboundSchema: z.ZodType<
  CreateRefundResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: CreateRefundMode$inboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => CreateRefundAmountResponse$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => CreateRefundSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateRefundMetadataResponse$inboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: CreateRefundStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    CreateRefundExternalReferenceResponse$inboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => CreateRefundRoutingReversalResponse$inboundSchema)),
  ).optional(),
  _links: z.lazy(() => CreateRefundLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateRefundResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: CreateRefundAmountResponse$Outbound | undefined;
  settlementAmount?: CreateRefundSettlementAmount$Outbound | null | undefined;
  metadata?:
    | CreateRefundMetadataResponse$Outbound
    | string
    | Array<string>
    | null
    | undefined;
  paymentId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  externalReference?:
    | CreateRefundExternalReferenceResponse$Outbound
    | undefined;
  routingReversals?:
    | Array<CreateRefundRoutingReversalResponse$Outbound>
    | null
    | undefined;
  _links?: CreateRefundLinks$Outbound | undefined;
};

/** @internal */
export const CreateRefundResponse$outboundSchema: z.ZodType<
  CreateRefundResponse$Outbound,
  z.ZodTypeDef,
  CreateRefundResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  mode: CreateRefundMode$outboundSchema.optional(),
  description: z.string().optional(),
  amount: z.lazy(() => CreateRefundAmountResponse$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => CreateRefundSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.union([
      z.lazy(() => CreateRefundMetadataResponse$outboundSchema),
      z.string(),
      z.array(z.string()),
    ]),
  ).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: CreateRefundStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  externalReference: z.lazy(() =>
    CreateRefundExternalReferenceResponse$outboundSchema
  ).optional(),
  routingReversals: z.nullable(
    z.array(z.lazy(() => CreateRefundRoutingReversalResponse$outboundSchema)),
  ).optional(),
  links: z.lazy(() => CreateRefundLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundResponse$ {
  /** @deprecated use `CreateRefundResponse$inboundSchema` instead. */
  export const inboundSchema = CreateRefundResponse$inboundSchema;
  /** @deprecated use `CreateRefundResponse$outboundSchema` instead. */
  export const outboundSchema = CreateRefundResponse$outboundSchema;
  /** @deprecated use `CreateRefundResponse$Outbound` instead. */
  export type Outbound = CreateRefundResponse$Outbound;
}

export function createRefundResponseToJSON(
  createRefundResponse: CreateRefundResponse,
): string {
  return JSON.stringify(
    CreateRefundResponse$outboundSchema.parse(createRefundResponse),
  );
}

export function createRefundResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateRefundResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRefundResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRefundResponse' from JSON`,
  );
}
