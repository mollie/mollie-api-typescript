/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOrganizationRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetOrganizationNotFoundDocumentation = {
  href: string;
  type: string;
};

export type GetOrganizationNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: GetOrganizationNotFoundDocumentation;
};

/**
 * The preferred locale of the merchant, as set in their Mollie dashboard.
 */
export const GetOrganizationLocale = {
  EnUS: "en_US",
  EnGB: "en_GB",
  NLNL: "nl_NL",
  NlBE: "nl_BE",
  DEDE: "de_DE",
  DeAT: "de_AT",
  DeCH: "de_CH",
  FRFR: "fr_FR",
  FrBE: "fr_BE",
  ESES: "es_ES",
  CaES: "ca_ES",
  PTPT: "pt_PT",
  ITIT: "it_IT",
  NbNO: "nb_NO",
  SvSE: "sv_SE",
  FIFI: "fi_FI",
  DaDK: "da_DK",
  ISIS: "is_IS",
  HUHU: "hu_HU",
  PLPL: "pl_PL",
  LVLV: "lv_LV",
  LTLT: "lt_LT",
} as const;
/**
 * The preferred locale of the merchant, as set in their Mollie dashboard.
 */
export type GetOrganizationLocale = ClosedEnum<typeof GetOrganizationLocale>;

/**
 * The address of the organization.
 */
export type GetOrganizationAddress = {
  /**
   * A street and street number.
   */
  streetAndNumber?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   */
  postalCode?: string | undefined;
  city?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country?: string | undefined;
};

/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export const GetOrganizationVatRegulation = {
  Dutch: "dutch",
  British: "british",
  Shifted: "shifted",
} as const;
/**
 * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
 *
 * @remarks
 * Kingdom, and shifted VAT for merchants in the European Union.
 *
 * The field is not present for merchants residing in other countries.
 */
export type GetOrganizationVatRegulation = ClosedEnum<
  typeof GetOrganizationVatRegulation
>;

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetOrganizationSelf = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * Direct link to the organization's Mollie dashboard.
 */
export type GetOrganizationDashboard = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetOrganizationDocumentation = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetOrganizationLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetOrganizationSelf | undefined;
  /**
   * Direct link to the organization's Mollie dashboard.
   */
  dashboard?: GetOrganizationDashboard | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetOrganizationDocumentation | undefined;
};

/**
 * The organization object.
 */
export type GetOrganizationResponse = {
  /**
   * Indicates the response contains an organization object. Will always contain the string `organization` for this
   *
   * @remarks
   * resource type.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this organization. Example: `org_12345678`.
   */
  id?: string | undefined;
  /**
   * The name of the organization.
   */
  name?: string | undefined;
  /**
   * The email address associated with the organization.
   */
  email?: string | undefined;
  /**
   * The preferred locale of the merchant, as set in their Mollie dashboard.
   */
  locale?: GetOrganizationLocale | undefined;
  /**
   * The address of the organization.
   */
  address?: GetOrganizationAddress | undefined;
  /**
   * The registration number of the organization at their local chamber of commerce.
   */
  registrationNumber?: string | undefined;
  /**
   * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are
   *
   * @remarks
   * verified against the international registry *VIES*.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatNumber?: string | null | undefined;
  /**
   * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
   *
   * @remarks
   * Kingdom, and shifted VAT for merchants in the European Union.
   *
   * The field is not present for merchants residing in other countries.
   */
  vatRegulation?: GetOrganizationVatRegulation | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetOrganizationLinks | undefined;
};

/** @internal */
export const GetOrganizationRequest$inboundSchema: z.ZodType<
  GetOrganizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetOrganizationRequest$Outbound = {
  id: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const GetOrganizationRequest$outboundSchema: z.ZodType<
  GetOrganizationRequest$Outbound,
  z.ZodTypeDef,
  GetOrganizationRequest
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationRequest$ {
  /** @deprecated use `GetOrganizationRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationRequest$inboundSchema;
  /** @deprecated use `GetOrganizationRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationRequest$outboundSchema;
  /** @deprecated use `GetOrganizationRequest$Outbound` instead. */
  export type Outbound = GetOrganizationRequest$Outbound;
}

export function getOrganizationRequestToJSON(
  getOrganizationRequest: GetOrganizationRequest,
): string {
  return JSON.stringify(
    GetOrganizationRequest$outboundSchema.parse(getOrganizationRequest),
  );
}

export function getOrganizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationRequest' from JSON`,
  );
}

/** @internal */
export const GetOrganizationNotFoundDocumentation$inboundSchema: z.ZodType<
  GetOrganizationNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOrganizationNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOrganizationNotFoundDocumentation$outboundSchema: z.ZodType<
  GetOrganizationNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  GetOrganizationNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationNotFoundDocumentation$ {
  /** @deprecated use `GetOrganizationNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    GetOrganizationNotFoundDocumentation$inboundSchema;
  /** @deprecated use `GetOrganizationNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    GetOrganizationNotFoundDocumentation$outboundSchema;
  /** @deprecated use `GetOrganizationNotFoundDocumentation$Outbound` instead. */
  export type Outbound = GetOrganizationNotFoundDocumentation$Outbound;
}

export function getOrganizationNotFoundDocumentationToJSON(
  getOrganizationNotFoundDocumentation: GetOrganizationNotFoundDocumentation,
): string {
  return JSON.stringify(
    GetOrganizationNotFoundDocumentation$outboundSchema.parse(
      getOrganizationNotFoundDocumentation,
    ),
  );
}

export function getOrganizationNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetOrganizationNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const GetOrganizationNotFoundLinks$inboundSchema: z.ZodType<
  GetOrganizationNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    GetOrganizationNotFoundDocumentation$inboundSchema
  ),
});

/** @internal */
export type GetOrganizationNotFoundLinks$Outbound = {
  documentation: GetOrganizationNotFoundDocumentation$Outbound;
};

/** @internal */
export const GetOrganizationNotFoundLinks$outboundSchema: z.ZodType<
  GetOrganizationNotFoundLinks$Outbound,
  z.ZodTypeDef,
  GetOrganizationNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    GetOrganizationNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationNotFoundLinks$ {
  /** @deprecated use `GetOrganizationNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationNotFoundLinks$inboundSchema;
  /** @deprecated use `GetOrganizationNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationNotFoundLinks$outboundSchema;
  /** @deprecated use `GetOrganizationNotFoundLinks$Outbound` instead. */
  export type Outbound = GetOrganizationNotFoundLinks$Outbound;
}

export function getOrganizationNotFoundLinksToJSON(
  getOrganizationNotFoundLinks: GetOrganizationNotFoundLinks,
): string {
  return JSON.stringify(
    GetOrganizationNotFoundLinks$outboundSchema.parse(
      getOrganizationNotFoundLinks,
    ),
  );
}

export function getOrganizationNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationNotFoundLinks' from JSON`,
  );
}

/** @internal */
export const GetOrganizationLocale$inboundSchema: z.ZodNativeEnum<
  typeof GetOrganizationLocale
> = z.nativeEnum(GetOrganizationLocale);

/** @internal */
export const GetOrganizationLocale$outboundSchema: z.ZodNativeEnum<
  typeof GetOrganizationLocale
> = GetOrganizationLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationLocale$ {
  /** @deprecated use `GetOrganizationLocale$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationLocale$inboundSchema;
  /** @deprecated use `GetOrganizationLocale$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationLocale$outboundSchema;
}

/** @internal */
export const GetOrganizationAddress$inboundSchema: z.ZodType<
  GetOrganizationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type GetOrganizationAddress$Outbound = {
  streetAndNumber?: string | undefined;
  postalCode?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const GetOrganizationAddress$outboundSchema: z.ZodType<
  GetOrganizationAddress$Outbound,
  z.ZodTypeDef,
  GetOrganizationAddress
> = z.object({
  streetAndNumber: z.string().optional(),
  postalCode: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationAddress$ {
  /** @deprecated use `GetOrganizationAddress$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationAddress$inboundSchema;
  /** @deprecated use `GetOrganizationAddress$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationAddress$outboundSchema;
  /** @deprecated use `GetOrganizationAddress$Outbound` instead. */
  export type Outbound = GetOrganizationAddress$Outbound;
}

export function getOrganizationAddressToJSON(
  getOrganizationAddress: GetOrganizationAddress,
): string {
  return JSON.stringify(
    GetOrganizationAddress$outboundSchema.parse(getOrganizationAddress),
  );
}

export function getOrganizationAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationAddress' from JSON`,
  );
}

/** @internal */
export const GetOrganizationVatRegulation$inboundSchema: z.ZodNativeEnum<
  typeof GetOrganizationVatRegulation
> = z.nativeEnum(GetOrganizationVatRegulation);

/** @internal */
export const GetOrganizationVatRegulation$outboundSchema: z.ZodNativeEnum<
  typeof GetOrganizationVatRegulation
> = GetOrganizationVatRegulation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationVatRegulation$ {
  /** @deprecated use `GetOrganizationVatRegulation$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationVatRegulation$inboundSchema;
  /** @deprecated use `GetOrganizationVatRegulation$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationVatRegulation$outboundSchema;
}

/** @internal */
export const GetOrganizationSelf$inboundSchema: z.ZodType<
  GetOrganizationSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOrganizationSelf$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOrganizationSelf$outboundSchema: z.ZodType<
  GetOrganizationSelf$Outbound,
  z.ZodTypeDef,
  GetOrganizationSelf
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationSelf$ {
  /** @deprecated use `GetOrganizationSelf$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationSelf$inboundSchema;
  /** @deprecated use `GetOrganizationSelf$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationSelf$outboundSchema;
  /** @deprecated use `GetOrganizationSelf$Outbound` instead. */
  export type Outbound = GetOrganizationSelf$Outbound;
}

export function getOrganizationSelfToJSON(
  getOrganizationSelf: GetOrganizationSelf,
): string {
  return JSON.stringify(
    GetOrganizationSelf$outboundSchema.parse(getOrganizationSelf),
  );
}

export function getOrganizationSelfFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationSelf' from JSON`,
  );
}

/** @internal */
export const GetOrganizationDashboard$inboundSchema: z.ZodType<
  GetOrganizationDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOrganizationDashboard$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOrganizationDashboard$outboundSchema: z.ZodType<
  GetOrganizationDashboard$Outbound,
  z.ZodTypeDef,
  GetOrganizationDashboard
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationDashboard$ {
  /** @deprecated use `GetOrganizationDashboard$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationDashboard$inboundSchema;
  /** @deprecated use `GetOrganizationDashboard$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationDashboard$outboundSchema;
  /** @deprecated use `GetOrganizationDashboard$Outbound` instead. */
  export type Outbound = GetOrganizationDashboard$Outbound;
}

export function getOrganizationDashboardToJSON(
  getOrganizationDashboard: GetOrganizationDashboard,
): string {
  return JSON.stringify(
    GetOrganizationDashboard$outboundSchema.parse(getOrganizationDashboard),
  );
}

export function getOrganizationDashboardFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationDashboard' from JSON`,
  );
}

/** @internal */
export const GetOrganizationDocumentation$inboundSchema: z.ZodType<
  GetOrganizationDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type GetOrganizationDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const GetOrganizationDocumentation$outboundSchema: z.ZodType<
  GetOrganizationDocumentation$Outbound,
  z.ZodTypeDef,
  GetOrganizationDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationDocumentation$ {
  /** @deprecated use `GetOrganizationDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationDocumentation$inboundSchema;
  /** @deprecated use `GetOrganizationDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationDocumentation$outboundSchema;
  /** @deprecated use `GetOrganizationDocumentation$Outbound` instead. */
  export type Outbound = GetOrganizationDocumentation$Outbound;
}

export function getOrganizationDocumentationToJSON(
  getOrganizationDocumentation: GetOrganizationDocumentation,
): string {
  return JSON.stringify(
    GetOrganizationDocumentation$outboundSchema.parse(
      getOrganizationDocumentation,
    ),
  );
}

export function getOrganizationDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationDocumentation' from JSON`,
  );
}

/** @internal */
export const GetOrganizationLinks$inboundSchema: z.ZodType<
  GetOrganizationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetOrganizationSelf$inboundSchema).optional(),
  dashboard: z.lazy(() => GetOrganizationDashboard$inboundSchema).optional(),
  documentation: z.lazy(() => GetOrganizationDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetOrganizationLinks$Outbound = {
  self?: GetOrganizationSelf$Outbound | undefined;
  dashboard?: GetOrganizationDashboard$Outbound | undefined;
  documentation?: GetOrganizationDocumentation$Outbound | undefined;
};

/** @internal */
export const GetOrganizationLinks$outboundSchema: z.ZodType<
  GetOrganizationLinks$Outbound,
  z.ZodTypeDef,
  GetOrganizationLinks
> = z.object({
  self: z.lazy(() => GetOrganizationSelf$outboundSchema).optional(),
  dashboard: z.lazy(() => GetOrganizationDashboard$outboundSchema).optional(),
  documentation: z.lazy(() => GetOrganizationDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationLinks$ {
  /** @deprecated use `GetOrganizationLinks$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationLinks$inboundSchema;
  /** @deprecated use `GetOrganizationLinks$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationLinks$outboundSchema;
  /** @deprecated use `GetOrganizationLinks$Outbound` instead. */
  export type Outbound = GetOrganizationLinks$Outbound;
}

export function getOrganizationLinksToJSON(
  getOrganizationLinks: GetOrganizationLinks,
): string {
  return JSON.stringify(
    GetOrganizationLinks$outboundSchema.parse(getOrganizationLinks),
  );
}

export function getOrganizationLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationLinks' from JSON`,
  );
}

/** @internal */
export const GetOrganizationResponse$inboundSchema: z.ZodType<
  GetOrganizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: GetOrganizationLocale$inboundSchema.optional(),
  address: z.lazy(() => GetOrganizationAddress$inboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(GetOrganizationVatRegulation$inboundSchema)
    .optional(),
  _links: z.lazy(() => GetOrganizationLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetOrganizationResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  locale?: string | undefined;
  address?: GetOrganizationAddress$Outbound | undefined;
  registrationNumber?: string | undefined;
  vatNumber?: string | null | undefined;
  vatRegulation?: string | null | undefined;
  _links?: GetOrganizationLinks$Outbound | undefined;
};

/** @internal */
export const GetOrganizationResponse$outboundSchema: z.ZodType<
  GetOrganizationResponse$Outbound,
  z.ZodTypeDef,
  GetOrganizationResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  locale: GetOrganizationLocale$outboundSchema.optional(),
  address: z.lazy(() => GetOrganizationAddress$outboundSchema).optional(),
  registrationNumber: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  vatRegulation: z.nullable(GetOrganizationVatRegulation$outboundSchema)
    .optional(),
  links: z.lazy(() => GetOrganizationLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationResponse$ {
  /** @deprecated use `GetOrganizationResponse$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationResponse$inboundSchema;
  /** @deprecated use `GetOrganizationResponse$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationResponse$outboundSchema;
  /** @deprecated use `GetOrganizationResponse$Outbound` instead. */
  export type Outbound = GetOrganizationResponse$Outbound;
}

export function getOrganizationResponseToJSON(
  getOrganizationResponse: GetOrganizationResponse,
): string {
  return JSON.stringify(
    GetOrganizationResponse$outboundSchema.parse(getOrganizationResponse),
  );
}

export function getOrganizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationResponse' from JSON`,
  );
}
