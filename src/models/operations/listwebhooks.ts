/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListWebhooksRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
   *
   * @remarks
   * result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
   *
   * @remarks
   * newest to oldest.
   */
  sort?: models.ListSort | null | undefined;
  /**
   * Used to filter out only the webhooks that are subscribed to certain types of events.
   */
  eventTypes?: models.WebhookEventTypes | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
   *
   * @remarks
   * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
   * setting the `testmode` query parameter to `true`.
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
};

export type ListWebhooksEmbedded = {
  /**
   * A list of webhooks.
   */
  webhooks: Array<models.EntityWebhook>;
};

/**
 * A list of webhooks. For a complete reference of the webhook
 *
 * @remarks
 * object, refer to the [Get hook endpoint](get-webhook) documentation.
 */
export type ListWebhooksResponse = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
   *
   * @remarks
   * as well.
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
   * limit is 50 items.
   */
  count: number;
  embedded: ListWebhooksEmbedded;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links: models.ListLinks;
};

/** @internal */
export const ListWebhooksRequest$inboundSchema: z.ZodType<
  ListWebhooksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$inboundSchema).optional(),
  eventTypes: models.WebhookEventTypes$inboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ListWebhooksRequest$Outbound = {
  from?: string | null | undefined;
  limit?: number | null | undefined;
  sort?: string | null | undefined;
  eventTypes?: string | undefined;
  testmode?: boolean | null | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ListWebhooksRequest$outboundSchema: z.ZodType<
  ListWebhooksRequest$Outbound,
  z.ZodTypeDef,
  ListWebhooksRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  sort: z.nullable(models.ListSort$outboundSchema).optional(),
  eventTypes: models.WebhookEventTypes$outboundSchema.optional(),
  testmode: z.nullable(z.boolean()).optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksRequest$ {
  /** @deprecated use `ListWebhooksRequest$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksRequest$inboundSchema;
  /** @deprecated use `ListWebhooksRequest$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksRequest$outboundSchema;
  /** @deprecated use `ListWebhooksRequest$Outbound` instead. */
  export type Outbound = ListWebhooksRequest$Outbound;
}

export function listWebhooksRequestToJSON(
  listWebhooksRequest: ListWebhooksRequest,
): string {
  return JSON.stringify(
    ListWebhooksRequest$outboundSchema.parse(listWebhooksRequest),
  );
}

export function listWebhooksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksRequest' from JSON`,
  );
}

/** @internal */
export const ListWebhooksEmbedded$inboundSchema: z.ZodType<
  ListWebhooksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhooks: z.array(models.EntityWebhook$inboundSchema),
});

/** @internal */
export type ListWebhooksEmbedded$Outbound = {
  webhooks: Array<models.EntityWebhook$Outbound>;
};

/** @internal */
export const ListWebhooksEmbedded$outboundSchema: z.ZodType<
  ListWebhooksEmbedded$Outbound,
  z.ZodTypeDef,
  ListWebhooksEmbedded
> = z.object({
  webhooks: z.array(models.EntityWebhook$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksEmbedded$ {
  /** @deprecated use `ListWebhooksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksEmbedded$inboundSchema;
  /** @deprecated use `ListWebhooksEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksEmbedded$outboundSchema;
  /** @deprecated use `ListWebhooksEmbedded$Outbound` instead. */
  export type Outbound = ListWebhooksEmbedded$Outbound;
}

export function listWebhooksEmbeddedToJSON(
  listWebhooksEmbedded: ListWebhooksEmbedded,
): string {
  return JSON.stringify(
    ListWebhooksEmbedded$outboundSchema.parse(listWebhooksEmbedded),
  );
}

export function listWebhooksEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksEmbedded' from JSON`,
  );
}

/** @internal */
export const ListWebhooksResponse$inboundSchema: z.ZodType<
  ListWebhooksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  _embedded: z.lazy(() => ListWebhooksEmbedded$inboundSchema),
  _links: models.ListLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListWebhooksResponse$Outbound = {
  count: number;
  _embedded: ListWebhooksEmbedded$Outbound;
  _links: models.ListLinks$Outbound;
};

/** @internal */
export const ListWebhooksResponse$outboundSchema: z.ZodType<
  ListWebhooksResponse$Outbound,
  z.ZodTypeDef,
  ListWebhooksResponse
> = z.object({
  count: z.number().int(),
  embedded: z.lazy(() => ListWebhooksEmbedded$outboundSchema),
  links: models.ListLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksResponse$ {
  /** @deprecated use `ListWebhooksResponse$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksResponse$inboundSchema;
  /** @deprecated use `ListWebhooksResponse$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksResponse$outboundSchema;
  /** @deprecated use `ListWebhooksResponse$Outbound` instead. */
  export type Outbound = ListWebhooksResponse$Outbound;
}

export function listWebhooksResponseToJSON(
  listWebhooksResponse: ListWebhooksResponse,
): string {
  return JSON.stringify(
    ListWebhooksResponse$outboundSchema.parse(listWebhooksResponse),
  );
}

export function listWebhooksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksResponse' from JSON`,
  );
}
