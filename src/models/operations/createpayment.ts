/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreatePaymentRequest = {
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   */
  include?: string | null | undefined;
  /**
   * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
   */
  idempotencyKey?: string | undefined;
  paymentRequest?: models.PaymentRequest | undefined;
};

/** @internal */
export const CreatePaymentRequest$inboundSchema: z.ZodType<
  CreatePaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include: z.nullable(z.string()).optional(),
  "idempotency-key": z.string().optional(),
  "payment-request": models.PaymentRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "payment-request": "paymentRequest",
  });
});

/** @internal */
export type CreatePaymentRequest$Outbound = {
  include?: string | null | undefined;
  "idempotency-key"?: string | undefined;
  "payment-request"?: models.PaymentRequest$Outbound | undefined;
};

/** @internal */
export const CreatePaymentRequest$outboundSchema: z.ZodType<
  CreatePaymentRequest$Outbound,
  z.ZodTypeDef,
  CreatePaymentRequest
> = z.object({
  include: z.nullable(z.string()).optional(),
  idempotencyKey: z.string().optional(),
  paymentRequest: models.PaymentRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    paymentRequest: "payment-request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentRequest$ {
  /** @deprecated use `CreatePaymentRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentRequest$inboundSchema;
  /** @deprecated use `CreatePaymentRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentRequest$outboundSchema;
  /** @deprecated use `CreatePaymentRequest$Outbound` instead. */
  export type Outbound = CreatePaymentRequest$Outbound;
}

export function createPaymentRequestToJSON(
  createPaymentRequest: CreatePaymentRequest,
): string {
  return JSON.stringify(
    CreatePaymentRequest$outboundSchema.parse(createPaymentRequest),
  );
}

export function createPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentRequest' from JSON`,
  );
}
