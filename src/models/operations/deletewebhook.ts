/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteWebhookRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type DeleteWebhookUnprocessableEntityDocumentation = {
  href: string;
  type: string;
};

export type DeleteWebhookUnprocessableEntityLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: DeleteWebhookUnprocessableEntityDocumentation;
};

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type DeleteWebhookNotFoundDocumentation = {
  href: string;
  type: string;
};

export type DeleteWebhookNotFoundLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation: DeleteWebhookNotFoundDocumentation;
};

/** @internal */
export const DeleteWebhookRequest$inboundSchema: z.ZodType<
  DeleteWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type DeleteWebhookRequest$Outbound = {
  id: string;
  testmode?: boolean | null | undefined;
};

/** @internal */
export const DeleteWebhookRequest$outboundSchema: z.ZodType<
  DeleteWebhookRequest$Outbound,
  z.ZodTypeDef,
  DeleteWebhookRequest
> = z.object({
  id: z.string(),
  testmode: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookRequest$ {
  /** @deprecated use `DeleteWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteWebhookRequest$inboundSchema;
  /** @deprecated use `DeleteWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteWebhookRequest$outboundSchema;
  /** @deprecated use `DeleteWebhookRequest$Outbound` instead. */
  export type Outbound = DeleteWebhookRequest$Outbound;
}

export function deleteWebhookRequestToJSON(
  deleteWebhookRequest: DeleteWebhookRequest,
): string {
  return JSON.stringify(
    DeleteWebhookRequest$outboundSchema.parse(deleteWebhookRequest),
  );
}

export function deleteWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWebhookRequest' from JSON`,
  );
}

/** @internal */
export const DeleteWebhookUnprocessableEntityDocumentation$inboundSchema:
  z.ZodType<
    DeleteWebhookUnprocessableEntityDocumentation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type DeleteWebhookUnprocessableEntityDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const DeleteWebhookUnprocessableEntityDocumentation$outboundSchema:
  z.ZodType<
    DeleteWebhookUnprocessableEntityDocumentation$Outbound,
    z.ZodTypeDef,
    DeleteWebhookUnprocessableEntityDocumentation
  > = z.object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookUnprocessableEntityDocumentation$ {
  /** @deprecated use `DeleteWebhookUnprocessableEntityDocumentation$inboundSchema` instead. */
  export const inboundSchema =
    DeleteWebhookUnprocessableEntityDocumentation$inboundSchema;
  /** @deprecated use `DeleteWebhookUnprocessableEntityDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    DeleteWebhookUnprocessableEntityDocumentation$outboundSchema;
  /** @deprecated use `DeleteWebhookUnprocessableEntityDocumentation$Outbound` instead. */
  export type Outbound = DeleteWebhookUnprocessableEntityDocumentation$Outbound;
}

export function deleteWebhookUnprocessableEntityDocumentationToJSON(
  deleteWebhookUnprocessableEntityDocumentation:
    DeleteWebhookUnprocessableEntityDocumentation,
): string {
  return JSON.stringify(
    DeleteWebhookUnprocessableEntityDocumentation$outboundSchema.parse(
      deleteWebhookUnprocessableEntityDocumentation,
    ),
  );
}

export function deleteWebhookUnprocessableEntityDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteWebhookUnprocessableEntityDocumentation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteWebhookUnprocessableEntityDocumentation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteWebhookUnprocessableEntityDocumentation' from JSON`,
  );
}

/** @internal */
export const DeleteWebhookUnprocessableEntityLinks$inboundSchema: z.ZodType<
  DeleteWebhookUnprocessableEntityLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() =>
    DeleteWebhookUnprocessableEntityDocumentation$inboundSchema
  ),
});

/** @internal */
export type DeleteWebhookUnprocessableEntityLinks$Outbound = {
  documentation: DeleteWebhookUnprocessableEntityDocumentation$Outbound;
};

/** @internal */
export const DeleteWebhookUnprocessableEntityLinks$outboundSchema: z.ZodType<
  DeleteWebhookUnprocessableEntityLinks$Outbound,
  z.ZodTypeDef,
  DeleteWebhookUnprocessableEntityLinks
> = z.object({
  documentation: z.lazy(() =>
    DeleteWebhookUnprocessableEntityDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookUnprocessableEntityLinks$ {
  /** @deprecated use `DeleteWebhookUnprocessableEntityLinks$inboundSchema` instead. */
  export const inboundSchema =
    DeleteWebhookUnprocessableEntityLinks$inboundSchema;
  /** @deprecated use `DeleteWebhookUnprocessableEntityLinks$outboundSchema` instead. */
  export const outboundSchema =
    DeleteWebhookUnprocessableEntityLinks$outboundSchema;
  /** @deprecated use `DeleteWebhookUnprocessableEntityLinks$Outbound` instead. */
  export type Outbound = DeleteWebhookUnprocessableEntityLinks$Outbound;
}

export function deleteWebhookUnprocessableEntityLinksToJSON(
  deleteWebhookUnprocessableEntityLinks: DeleteWebhookUnprocessableEntityLinks,
): string {
  return JSON.stringify(
    DeleteWebhookUnprocessableEntityLinks$outboundSchema.parse(
      deleteWebhookUnprocessableEntityLinks,
    ),
  );
}

export function deleteWebhookUnprocessableEntityLinksFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWebhookUnprocessableEntityLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteWebhookUnprocessableEntityLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWebhookUnprocessableEntityLinks' from JSON`,
  );
}

/** @internal */
export const DeleteWebhookNotFoundDocumentation$inboundSchema: z.ZodType<
  DeleteWebhookNotFoundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
});

/** @internal */
export type DeleteWebhookNotFoundDocumentation$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const DeleteWebhookNotFoundDocumentation$outboundSchema: z.ZodType<
  DeleteWebhookNotFoundDocumentation$Outbound,
  z.ZodTypeDef,
  DeleteWebhookNotFoundDocumentation
> = z.object({
  href: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookNotFoundDocumentation$ {
  /** @deprecated use `DeleteWebhookNotFoundDocumentation$inboundSchema` instead. */
  export const inboundSchema = DeleteWebhookNotFoundDocumentation$inboundSchema;
  /** @deprecated use `DeleteWebhookNotFoundDocumentation$outboundSchema` instead. */
  export const outboundSchema =
    DeleteWebhookNotFoundDocumentation$outboundSchema;
  /** @deprecated use `DeleteWebhookNotFoundDocumentation$Outbound` instead. */
  export type Outbound = DeleteWebhookNotFoundDocumentation$Outbound;
}

export function deleteWebhookNotFoundDocumentationToJSON(
  deleteWebhookNotFoundDocumentation: DeleteWebhookNotFoundDocumentation,
): string {
  return JSON.stringify(
    DeleteWebhookNotFoundDocumentation$outboundSchema.parse(
      deleteWebhookNotFoundDocumentation,
    ),
  );
}

export function deleteWebhookNotFoundDocumentationFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWebhookNotFoundDocumentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteWebhookNotFoundDocumentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWebhookNotFoundDocumentation' from JSON`,
  );
}

/** @internal */
export const DeleteWebhookNotFoundLinks$inboundSchema: z.ZodType<
  DeleteWebhookNotFoundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => DeleteWebhookNotFoundDocumentation$inboundSchema),
});

/** @internal */
export type DeleteWebhookNotFoundLinks$Outbound = {
  documentation: DeleteWebhookNotFoundDocumentation$Outbound;
};

/** @internal */
export const DeleteWebhookNotFoundLinks$outboundSchema: z.ZodType<
  DeleteWebhookNotFoundLinks$Outbound,
  z.ZodTypeDef,
  DeleteWebhookNotFoundLinks
> = z.object({
  documentation: z.lazy(() =>
    DeleteWebhookNotFoundDocumentation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookNotFoundLinks$ {
  /** @deprecated use `DeleteWebhookNotFoundLinks$inboundSchema` instead. */
  export const inboundSchema = DeleteWebhookNotFoundLinks$inboundSchema;
  /** @deprecated use `DeleteWebhookNotFoundLinks$outboundSchema` instead. */
  export const outboundSchema = DeleteWebhookNotFoundLinks$outboundSchema;
  /** @deprecated use `DeleteWebhookNotFoundLinks$Outbound` instead. */
  export type Outbound = DeleteWebhookNotFoundLinks$Outbound;
}

export function deleteWebhookNotFoundLinksToJSON(
  deleteWebhookNotFoundLinks: DeleteWebhookNotFoundLinks,
): string {
  return JSON.stringify(
    DeleteWebhookNotFoundLinks$outboundSchema.parse(deleteWebhookNotFoundLinks),
  );
}

export function deleteWebhookNotFoundLinksFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWebhookNotFoundLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWebhookNotFoundLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWebhookNotFoundLinks' from JSON`,
  );
}
