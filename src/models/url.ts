/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type Url = {
  /**
   * The actual URL string.
   */
  href: string;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type: string;
};

/** @internal */
export const Url$inboundSchema: z.ZodType<Url, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string(),
    type: z.string(),
  });

/** @internal */
export type Url$Outbound = {
  href: string;
  type: string;
};

/** @internal */
export const Url$outboundSchema: z.ZodType<Url$Outbound, z.ZodTypeDef, Url> = z
  .object({
    href: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Url$ {
  /** @deprecated use `Url$inboundSchema` instead. */
  export const inboundSchema = Url$inboundSchema;
  /** @deprecated use `Url$outboundSchema` instead. */
  export const outboundSchema = Url$outboundSchema;
  /** @deprecated use `Url$Outbound` instead. */
  export type Outbound = Url$Outbound;
}

export function urlToJSON(url: Url): string {
  return JSON.stringify(Url$outboundSchema.parse(url));
}

export function urlFromJSON(
  jsonString: string,
): SafeParseResult<Url, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Url$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Url' from JSON`,
  );
}
