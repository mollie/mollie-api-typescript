/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InvoiceStatus,
  InvoiceStatus$inboundSchema,
  InvoiceStatus$outboundSchema,
} from "./invoicestatus.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

export type EntityInvoiceLine = {
  /**
   * The administrative period in `YYYY-MM` on which the line should be booked.
   */
  period: string;
  /**
   * Description of the product.
   */
  description: string;
  /**
   * Number of products invoiced. For example, the number of payments.
   */
  count: number;
  /**
   * VAT percentage rate that applies to this product.
   */
  vatPercentage: number;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount: Amount;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityInvoiceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  pdf?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityInvoice = {
  /**
   * Indicates that the response contains an invoice object.
   *
   * @remarks
   * Will always contain the string `invoice` for this endpoint.
   */
  resource: string;
  id: string;
  /**
   * The reference number of the invoice. An example value would be: `2024.10000`.
   */
  reference: string;
  /**
   * The VAT number to which the invoice was issued to, if applicable.
   */
  vatNumber: string | null;
  /**
   * Status of the invoice.
   */
  status: InvoiceStatus;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  netAmount: Amount;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  vatAmount: Amount;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  grossAmount: Amount;
  /**
   * The collection of products which make up the invoice.
   */
  lines: Array<EntityInvoiceLine>;
  /**
   * The invoice date in `YYYY-MM-DD` format.
   */
  issuedAt: string;
  /**
   * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
   */
  paidAt?: string | null | undefined;
  /**
   * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
   */
  dueAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: EntityInvoiceLinks;
};

/** @internal */
export const EntityInvoiceLine$inboundSchema: z.ZodType<
  EntityInvoiceLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: z.string(),
  description: z.string(),
  count: z.number().int(),
  vatPercentage: z.number().int(),
  amount: Amount$inboundSchema,
});

/** @internal */
export type EntityInvoiceLine$Outbound = {
  period: string;
  description: string;
  count: number;
  vatPercentage: number;
  amount: Amount$Outbound;
};

/** @internal */
export const EntityInvoiceLine$outboundSchema: z.ZodType<
  EntityInvoiceLine$Outbound,
  z.ZodTypeDef,
  EntityInvoiceLine
> = z.object({
  period: z.string(),
  description: z.string(),
  count: z.number().int(),
  vatPercentage: z.number().int(),
  amount: Amount$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityInvoiceLine$ {
  /** @deprecated use `EntityInvoiceLine$inboundSchema` instead. */
  export const inboundSchema = EntityInvoiceLine$inboundSchema;
  /** @deprecated use `EntityInvoiceLine$outboundSchema` instead. */
  export const outboundSchema = EntityInvoiceLine$outboundSchema;
  /** @deprecated use `EntityInvoiceLine$Outbound` instead. */
  export type Outbound = EntityInvoiceLine$Outbound;
}

export function entityInvoiceLineToJSON(
  entityInvoiceLine: EntityInvoiceLine,
): string {
  return JSON.stringify(
    EntityInvoiceLine$outboundSchema.parse(entityInvoiceLine),
  );
}

export function entityInvoiceLineFromJSON(
  jsonString: string,
): SafeParseResult<EntityInvoiceLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityInvoiceLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityInvoiceLine' from JSON`,
  );
}

/** @internal */
export const EntityInvoiceLinks$inboundSchema: z.ZodType<
  EntityInvoiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  pdf: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityInvoiceLinks$Outbound = {
  self?: Url$Outbound | undefined;
  pdf?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityInvoiceLinks$outboundSchema: z.ZodType<
  EntityInvoiceLinks$Outbound,
  z.ZodTypeDef,
  EntityInvoiceLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  pdf: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityInvoiceLinks$ {
  /** @deprecated use `EntityInvoiceLinks$inboundSchema` instead. */
  export const inboundSchema = EntityInvoiceLinks$inboundSchema;
  /** @deprecated use `EntityInvoiceLinks$outboundSchema` instead. */
  export const outboundSchema = EntityInvoiceLinks$outboundSchema;
  /** @deprecated use `EntityInvoiceLinks$Outbound` instead. */
  export type Outbound = EntityInvoiceLinks$Outbound;
}

export function entityInvoiceLinksToJSON(
  entityInvoiceLinks: EntityInvoiceLinks,
): string {
  return JSON.stringify(
    EntityInvoiceLinks$outboundSchema.parse(entityInvoiceLinks),
  );
}

export function entityInvoiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityInvoiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityInvoiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityInvoiceLinks' from JSON`,
  );
}

/** @internal */
export const EntityInvoice$inboundSchema: z.ZodType<
  EntityInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  reference: z.string(),
  vatNumber: z.nullable(z.string()),
  status: InvoiceStatus$inboundSchema,
  netAmount: Amount$inboundSchema,
  vatAmount: Amount$inboundSchema,
  grossAmount: Amount$inboundSchema,
  lines: z.array(z.lazy(() => EntityInvoiceLine$inboundSchema)),
  issuedAt: z.string(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => EntityInvoiceLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityInvoice$Outbound = {
  resource: string;
  id: string;
  reference: string;
  vatNumber: string | null;
  status: string;
  netAmount: Amount$Outbound;
  vatAmount: Amount$Outbound;
  grossAmount: Amount$Outbound;
  lines: Array<EntityInvoiceLine$Outbound>;
  issuedAt: string;
  paidAt?: string | null | undefined;
  dueAt?: string | null | undefined;
  _links: EntityInvoiceLinks$Outbound;
};

/** @internal */
export const EntityInvoice$outboundSchema: z.ZodType<
  EntityInvoice$Outbound,
  z.ZodTypeDef,
  EntityInvoice
> = z.object({
  resource: z.string(),
  id: z.string(),
  reference: z.string(),
  vatNumber: z.nullable(z.string()),
  status: InvoiceStatus$outboundSchema,
  netAmount: Amount$outboundSchema,
  vatAmount: Amount$outboundSchema,
  grossAmount: Amount$outboundSchema,
  lines: z.array(z.lazy(() => EntityInvoiceLine$outboundSchema)),
  issuedAt: z.string(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => EntityInvoiceLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityInvoice$ {
  /** @deprecated use `EntityInvoice$inboundSchema` instead. */
  export const inboundSchema = EntityInvoice$inboundSchema;
  /** @deprecated use `EntityInvoice$outboundSchema` instead. */
  export const outboundSchema = EntityInvoice$outboundSchema;
  /** @deprecated use `EntityInvoice$Outbound` instead. */
  export type Outbound = EntityInvoice$Outbound;
}

export function entityInvoiceToJSON(entityInvoice: EntityInvoice): string {
  return JSON.stringify(EntityInvoice$outboundSchema.parse(entityInvoice));
}

export function entityInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<EntityInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityInvoice' from JSON`,
  );
}
