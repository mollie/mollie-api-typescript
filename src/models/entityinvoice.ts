/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * Status of the invoice.
 *
 * @remarks
 *
 * * `open` — The invoice is not paid yet.
 * * `paid` — The invoice is paid.
 * * `overdue` — Payment of the invoice is overdue.
 */
export const EntityInvoiceStatus = {
  Open: "open",
  Paid: "paid",
  Overdue: "overdue",
} as const;
/**
 * Status of the invoice.
 *
 * @remarks
 *
 * * `open` — The invoice is not paid yet.
 * * `paid` — The invoice is paid.
 * * `overdue` — Payment of the invoice is overdue.
 */
export type EntityInvoiceStatus = ClosedEnum<typeof EntityInvoiceStatus>;

export type EntityInvoiceLine = {
  /**
   * The administrative period in `YYYY-MM` on which the line should be booked.
   */
  period?: string | undefined;
  /**
   * Description of the product.
   */
  description?: string | undefined;
  /**
   * Number of products invoiced. For example, the number of payments.
   */
  count?: number | undefined;
  /**
   * VAT percentage rate that applies to this product.
   */
  vatPercentage?: number | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityInvoiceLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  pdf?: Url | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Url | undefined;
};

export type EntityInvoice = {
  /**
   * Indicates that the response contains an invoice object.
   *
   * @remarks
   * Will always contain the string `invoice` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
   */
  id?: string | undefined;
  /**
   * The reference number of the invoice. An example value would be: `2024.10000`.
   */
  reference?: string | undefined;
  /**
   * The VAT number to which the invoice was issued to, if applicable.
   */
  vatNumber?: string | null | undefined;
  /**
   * Status of the invoice.
   *
   * @remarks
   *
   * * `open` — The invoice is not paid yet.
   * * `paid` — The invoice is paid.
   * * `overdue` — Payment of the invoice is overdue.
   */
  status?: EntityInvoiceStatus | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  netAmount?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  vatAmount?: Amount | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  grossAmount?: Amount | undefined;
  /**
   * The collection of products which make up the invoice.
   */
  lines?: Array<EntityInvoiceLine> | undefined;
  /**
   * The invoice date in `YYYY-MM-DD` format.
   */
  issuedAt?: string | undefined;
  /**
   * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
   */
  paidAt?: string | null | undefined;
  /**
   * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
   */
  dueAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityInvoiceLinks | undefined;
};

/** @internal */
export const EntityInvoiceStatus$inboundSchema: z.ZodNativeEnum<
  typeof EntityInvoiceStatus
> = z.nativeEnum(EntityInvoiceStatus);

/** @internal */
export const EntityInvoiceStatus$outboundSchema: z.ZodNativeEnum<
  typeof EntityInvoiceStatus
> = EntityInvoiceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityInvoiceStatus$ {
  /** @deprecated use `EntityInvoiceStatus$inboundSchema` instead. */
  export const inboundSchema = EntityInvoiceStatus$inboundSchema;
  /** @deprecated use `EntityInvoiceStatus$outboundSchema` instead. */
  export const outboundSchema = EntityInvoiceStatus$outboundSchema;
}

/** @internal */
export const EntityInvoiceLine$inboundSchema: z.ZodType<
  EntityInvoiceLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: z.string().optional(),
  description: z.string().optional(),
  count: z.number().int().optional(),
  vatPercentage: z.number().int().optional(),
  amount: Amount$inboundSchema.optional(),
});

/** @internal */
export type EntityInvoiceLine$Outbound = {
  period?: string | undefined;
  description?: string | undefined;
  count?: number | undefined;
  vatPercentage?: number | undefined;
  amount?: Amount$Outbound | undefined;
};

/** @internal */
export const EntityInvoiceLine$outboundSchema: z.ZodType<
  EntityInvoiceLine$Outbound,
  z.ZodTypeDef,
  EntityInvoiceLine
> = z.object({
  period: z.string().optional(),
  description: z.string().optional(),
  count: z.number().int().optional(),
  vatPercentage: z.number().int().optional(),
  amount: Amount$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityInvoiceLine$ {
  /** @deprecated use `EntityInvoiceLine$inboundSchema` instead. */
  export const inboundSchema = EntityInvoiceLine$inboundSchema;
  /** @deprecated use `EntityInvoiceLine$outboundSchema` instead. */
  export const outboundSchema = EntityInvoiceLine$outboundSchema;
  /** @deprecated use `EntityInvoiceLine$Outbound` instead. */
  export type Outbound = EntityInvoiceLine$Outbound;
}

export function entityInvoiceLineToJSON(
  entityInvoiceLine: EntityInvoiceLine,
): string {
  return JSON.stringify(
    EntityInvoiceLine$outboundSchema.parse(entityInvoiceLine),
  );
}

export function entityInvoiceLineFromJSON(
  jsonString: string,
): SafeParseResult<EntityInvoiceLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityInvoiceLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityInvoiceLine' from JSON`,
  );
}

/** @internal */
export const EntityInvoiceLinks$inboundSchema: z.ZodType<
  EntityInvoiceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema.optional(),
  pdf: Url$inboundSchema.optional(),
  documentation: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityInvoiceLinks$Outbound = {
  self?: Url$Outbound | undefined;
  pdf?: Url$Outbound | undefined;
  documentation?: Url$Outbound | undefined;
};

/** @internal */
export const EntityInvoiceLinks$outboundSchema: z.ZodType<
  EntityInvoiceLinks$Outbound,
  z.ZodTypeDef,
  EntityInvoiceLinks
> = z.object({
  self: Url$outboundSchema.optional(),
  pdf: Url$outboundSchema.optional(),
  documentation: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityInvoiceLinks$ {
  /** @deprecated use `EntityInvoiceLinks$inboundSchema` instead. */
  export const inboundSchema = EntityInvoiceLinks$inboundSchema;
  /** @deprecated use `EntityInvoiceLinks$outboundSchema` instead. */
  export const outboundSchema = EntityInvoiceLinks$outboundSchema;
  /** @deprecated use `EntityInvoiceLinks$Outbound` instead. */
  export type Outbound = EntityInvoiceLinks$Outbound;
}

export function entityInvoiceLinksToJSON(
  entityInvoiceLinks: EntityInvoiceLinks,
): string {
  return JSON.stringify(
    EntityInvoiceLinks$outboundSchema.parse(entityInvoiceLinks),
  );
}

export function entityInvoiceLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityInvoiceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityInvoiceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityInvoiceLinks' from JSON`,
  );
}

/** @internal */
export const EntityInvoice$inboundSchema: z.ZodType<
  EntityInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  reference: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  status: EntityInvoiceStatus$inboundSchema.optional(),
  netAmount: Amount$inboundSchema.optional(),
  vatAmount: Amount$inboundSchema.optional(),
  grossAmount: Amount$inboundSchema.optional(),
  lines: z.array(z.lazy(() => EntityInvoiceLine$inboundSchema)).optional(),
  issuedAt: z.string().optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => EntityInvoiceLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityInvoice$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  reference?: string | undefined;
  vatNumber?: string | null | undefined;
  status?: string | undefined;
  netAmount?: Amount$Outbound | undefined;
  vatAmount?: Amount$Outbound | undefined;
  grossAmount?: Amount$Outbound | undefined;
  lines?: Array<EntityInvoiceLine$Outbound> | undefined;
  issuedAt?: string | undefined;
  paidAt?: string | null | undefined;
  dueAt?: string | null | undefined;
  _links?: EntityInvoiceLinks$Outbound | undefined;
};

/** @internal */
export const EntityInvoice$outboundSchema: z.ZodType<
  EntityInvoice$Outbound,
  z.ZodTypeDef,
  EntityInvoice
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  reference: z.string().optional(),
  vatNumber: z.nullable(z.string()).optional(),
  status: EntityInvoiceStatus$outboundSchema.optional(),
  netAmount: Amount$outboundSchema.optional(),
  vatAmount: Amount$outboundSchema.optional(),
  grossAmount: Amount$outboundSchema.optional(),
  lines: z.array(z.lazy(() => EntityInvoiceLine$outboundSchema)).optional(),
  issuedAt: z.string().optional(),
  paidAt: z.nullable(z.string()).optional(),
  dueAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => EntityInvoiceLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityInvoice$ {
  /** @deprecated use `EntityInvoice$inboundSchema` instead. */
  export const inboundSchema = EntityInvoice$inboundSchema;
  /** @deprecated use `EntityInvoice$outboundSchema` instead. */
  export const outboundSchema = EntityInvoice$outboundSchema;
  /** @deprecated use `EntityInvoice$Outbound` instead. */
  export type Outbound = EntityInvoice$Outbound;
}

export function entityInvoiceToJSON(entityInvoice: EntityInvoice): string {
  return JSON.stringify(EntityInvoice$outboundSchema.parse(entityInvoice));
}

export function entityInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<EntityInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityInvoice' from JSON`,
  );
}
