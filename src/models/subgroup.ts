/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import {
  ComponentsSubTotals,
  ComponentsSubTotals$inboundSchema,
  ComponentsSubTotals$Outbound,
  ComponentsSubTotals$outboundSchema,
} from "./componentssubtotals.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SubGroup = {
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  subtotals?: Array<ComponentsSubTotals> | null | undefined;
};

/** @internal */
export const SubGroup$inboundSchema: z.ZodType<
  SubGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: Amount$inboundSchema.optional(),
  subtotals: z.nullable(z.array(ComponentsSubTotals$inboundSchema)).optional(),
});

/** @internal */
export type SubGroup$Outbound = {
  amount?: Amount$Outbound | undefined;
  subtotals?: Array<ComponentsSubTotals$Outbound> | null | undefined;
};

/** @internal */
export const SubGroup$outboundSchema: z.ZodType<
  SubGroup$Outbound,
  z.ZodTypeDef,
  SubGroup
> = z.object({
  amount: Amount$outboundSchema.optional(),
  subtotals: z.nullable(z.array(ComponentsSubTotals$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubGroup$ {
  /** @deprecated use `SubGroup$inboundSchema` instead. */
  export const inboundSchema = SubGroup$inboundSchema;
  /** @deprecated use `SubGroup$outboundSchema` instead. */
  export const outboundSchema = SubGroup$outboundSchema;
  /** @deprecated use `SubGroup$Outbound` instead. */
  export type Outbound = SubGroup$Outbound;
}

export function subGroupToJSON(subGroup: SubGroup): string {
  return JSON.stringify(SubGroup$outboundSchema.parse(subGroup));
}

export function subGroupFromJSON(
  jsonString: string,
): SafeParseResult<SubGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubGroup' from JSON`,
  );
}
