/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Amount,
  Amount$inboundSchema,
  Amount$Outbound,
  Amount$outboundSchema,
} from "./amount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RouteDestinationTypeResponse,
  RouteDestinationTypeResponse$inboundSchema,
  RouteDestinationTypeResponse$outboundSchema,
} from "./routedestinationtyperesponse.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * The destination of the route.
 */
export type RouteCreateResponseDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   */
  type: RouteDestinationTypeResponse;
  organizationId: string;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type RouteCreateResponseLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type RouteCreateResponse = {
  /**
   * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
   */
  resource?: string | undefined;
  id?: string | undefined;
  paymentId?: string | undefined;
  /**
   * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
   */
  amount?: Amount | undefined;
  /**
   * The description of the route. This description is shown in the reports.
   */
  description?: string | undefined;
  /**
   * The destination of the route.
   */
  destination?: RouteCreateResponseDestination | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: RouteCreateResponseLinks | undefined;
};

/** @internal */
export const RouteCreateResponseDestination$inboundSchema: z.ZodType<
  RouteCreateResponseDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RouteDestinationTypeResponse$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type RouteCreateResponseDestination$Outbound = {
  type: string;
  organizationId: string;
};

/** @internal */
export const RouteCreateResponseDestination$outboundSchema: z.ZodType<
  RouteCreateResponseDestination$Outbound,
  z.ZodTypeDef,
  RouteCreateResponseDestination
> = z.object({
  type: RouteDestinationTypeResponse$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteCreateResponseDestination$ {
  /** @deprecated use `RouteCreateResponseDestination$inboundSchema` instead. */
  export const inboundSchema = RouteCreateResponseDestination$inboundSchema;
  /** @deprecated use `RouteCreateResponseDestination$outboundSchema` instead. */
  export const outboundSchema = RouteCreateResponseDestination$outboundSchema;
  /** @deprecated use `RouteCreateResponseDestination$Outbound` instead. */
  export type Outbound = RouteCreateResponseDestination$Outbound;
}

export function routeCreateResponseDestinationToJSON(
  routeCreateResponseDestination: RouteCreateResponseDestination,
): string {
  return JSON.stringify(
    RouteCreateResponseDestination$outboundSchema.parse(
      routeCreateResponseDestination,
    ),
  );
}

export function routeCreateResponseDestinationFromJSON(
  jsonString: string,
): SafeParseResult<RouteCreateResponseDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteCreateResponseDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteCreateResponseDestination' from JSON`,
  );
}

/** @internal */
export const RouteCreateResponseLinks$inboundSchema: z.ZodType<
  RouteCreateResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  documentation: Url$inboundSchema,
});

/** @internal */
export type RouteCreateResponseLinks$Outbound = {
  self: Url$Outbound;
  documentation: Url$Outbound;
};

/** @internal */
export const RouteCreateResponseLinks$outboundSchema: z.ZodType<
  RouteCreateResponseLinks$Outbound,
  z.ZodTypeDef,
  RouteCreateResponseLinks
> = z.object({
  self: Url$outboundSchema,
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteCreateResponseLinks$ {
  /** @deprecated use `RouteCreateResponseLinks$inboundSchema` instead. */
  export const inboundSchema = RouteCreateResponseLinks$inboundSchema;
  /** @deprecated use `RouteCreateResponseLinks$outboundSchema` instead. */
  export const outboundSchema = RouteCreateResponseLinks$outboundSchema;
  /** @deprecated use `RouteCreateResponseLinks$Outbound` instead. */
  export type Outbound = RouteCreateResponseLinks$Outbound;
}

export function routeCreateResponseLinksToJSON(
  routeCreateResponseLinks: RouteCreateResponseLinks,
): string {
  return JSON.stringify(
    RouteCreateResponseLinks$outboundSchema.parse(routeCreateResponseLinks),
  );
}

export function routeCreateResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<RouteCreateResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteCreateResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteCreateResponseLinks' from JSON`,
  );
}

/** @internal */
export const RouteCreateResponse$inboundSchema: z.ZodType<
  RouteCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$inboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => RouteCreateResponseDestination$inboundSchema)
    .optional(),
  _links: z.lazy(() => RouteCreateResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type RouteCreateResponse$Outbound = {
  resource?: string | undefined;
  id?: string | undefined;
  paymentId?: string | undefined;
  amount?: Amount$Outbound | undefined;
  description?: string | undefined;
  destination?: RouteCreateResponseDestination$Outbound | undefined;
  _links?: RouteCreateResponseLinks$Outbound | undefined;
};

/** @internal */
export const RouteCreateResponse$outboundSchema: z.ZodType<
  RouteCreateResponse$Outbound,
  z.ZodTypeDef,
  RouteCreateResponse
> = z.object({
  resource: z.string().optional(),
  id: z.string().optional(),
  paymentId: z.string().optional(),
  amount: Amount$outboundSchema.optional(),
  description: z.string().optional(),
  destination: z.lazy(() => RouteCreateResponseDestination$outboundSchema)
    .optional(),
  links: z.lazy(() => RouteCreateResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteCreateResponse$ {
  /** @deprecated use `RouteCreateResponse$inboundSchema` instead. */
  export const inboundSchema = RouteCreateResponse$inboundSchema;
  /** @deprecated use `RouteCreateResponse$outboundSchema` instead. */
  export const outboundSchema = RouteCreateResponse$outboundSchema;
  /** @deprecated use `RouteCreateResponse$Outbound` instead. */
  export type Outbound = RouteCreateResponse$Outbound;
}

export function routeCreateResponseToJSON(
  routeCreateResponse: RouteCreateResponse,
): string {
  return JSON.stringify(
    RouteCreateResponse$outboundSchema.parse(routeCreateResponse),
  );
}

export function routeCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<RouteCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RouteCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RouteCreateResponse' from JSON`,
  );
}
