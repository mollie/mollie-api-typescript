/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";
import {
  WebhookEventTypes,
  WebhookEventTypes$inboundSchema,
  WebhookEventTypes$outboundSchema,
} from "./webhookeventtypes.js";
import {
  WebhookStatus,
  WebhookStatus$inboundSchema,
  WebhookStatus$outboundSchema,
} from "./webhookstatus.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type CreateWebhookLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self: Url;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation: Url;
};

export type CreateWebhook = {
  /**
   * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
   */
  resource: string;
  /**
   * The identifier uniquely referring to this subscription.
   */
  id: string;
  /**
   * The subscription's events destination.
   */
  url: string;
  /**
   * The identifier uniquely referring to the profile that created the subscription.
   */
  profileId: string;
  /**
   * The subscription's date time of creation.
   */
  createdAt: string;
  /**
   * The subscription's name.
   */
  name: string;
  /**
   * The events types that are subscribed.
   */
  eventTypes: Array<WebhookEventTypes>;
  /**
   * The subscription's current status.
   */
  status: WebhookStatus;
  /**
   * Whether this entity was created in live mode or in test mode.
   */
  mode: Mode;
  /**
   * The subscription's secret.
   */
  webhookSecret: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links: CreateWebhookLinks;
};

/** @internal */
export const CreateWebhookLinks$inboundSchema: z.ZodType<
  CreateWebhookLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Url$inboundSchema,
  documentation: Url$inboundSchema,
});

/** @internal */
export type CreateWebhookLinks$Outbound = {
  self: Url$Outbound;
  documentation: Url$Outbound;
};

/** @internal */
export const CreateWebhookLinks$outboundSchema: z.ZodType<
  CreateWebhookLinks$Outbound,
  z.ZodTypeDef,
  CreateWebhookLinks
> = z.object({
  self: Url$outboundSchema,
  documentation: Url$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookLinks$ {
  /** @deprecated use `CreateWebhookLinks$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookLinks$inboundSchema;
  /** @deprecated use `CreateWebhookLinks$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookLinks$outboundSchema;
  /** @deprecated use `CreateWebhookLinks$Outbound` instead. */
  export type Outbound = CreateWebhookLinks$Outbound;
}

export function createWebhookLinksToJSON(
  createWebhookLinks: CreateWebhookLinks,
): string {
  return JSON.stringify(
    CreateWebhookLinks$outboundSchema.parse(createWebhookLinks),
  );
}

export function createWebhookLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookLinks' from JSON`,
  );
}

/** @internal */
export const CreateWebhook$inboundSchema: z.ZodType<
  CreateWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  id: z.string(),
  url: z.string(),
  profileId: z.string(),
  createdAt: z.string(),
  name: z.string(),
  eventTypes: z.array(WebhookEventTypes$inboundSchema),
  status: WebhookStatus$inboundSchema,
  mode: Mode$inboundSchema,
  webhookSecret: z.string(),
  _links: z.lazy(() => CreateWebhookLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateWebhook$Outbound = {
  resource: string;
  id: string;
  url: string;
  profileId: string;
  createdAt: string;
  name: string;
  eventTypes: Array<string>;
  status: string;
  mode: string;
  webhookSecret: string;
  _links: CreateWebhookLinks$Outbound;
};

/** @internal */
export const CreateWebhook$outboundSchema: z.ZodType<
  CreateWebhook$Outbound,
  z.ZodTypeDef,
  CreateWebhook
> = z.object({
  resource: z.string(),
  id: z.string(),
  url: z.string(),
  profileId: z.string(),
  createdAt: z.string(),
  name: z.string(),
  eventTypes: z.array(WebhookEventTypes$outboundSchema),
  status: WebhookStatus$outboundSchema,
  mode: Mode$outboundSchema,
  webhookSecret: z.string(),
  links: z.lazy(() => CreateWebhookLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhook$ {
  /** @deprecated use `CreateWebhook$inboundSchema` instead. */
  export const inboundSchema = CreateWebhook$inboundSchema;
  /** @deprecated use `CreateWebhook$outboundSchema` instead. */
  export const outboundSchema = CreateWebhook$outboundSchema;
  /** @deprecated use `CreateWebhook$Outbound` instead. */
  export type Outbound = CreateWebhook$Outbound;
}

export function createWebhookToJSON(createWebhook: CreateWebhook): string {
  return JSON.stringify(CreateWebhook$outboundSchema.parse(createWebhook));
}

export function createWebhookFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhook' from JSON`,
  );
}
