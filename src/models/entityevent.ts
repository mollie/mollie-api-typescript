/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Url,
  Url$inboundSchema,
  Url$Outbound,
  Url$outboundSchema,
} from "./url.js";

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EntityEventLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  url?: Url | undefined;
};

export type EntityEvent = {
  resource: string;
  type: number;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt: string;
  message: string;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EntityEventLinks | undefined;
};

/** @internal */
export const EntityEventLinks$inboundSchema: z.ZodType<
  EntityEventLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: Url$inboundSchema.optional(),
});

/** @internal */
export type EntityEventLinks$Outbound = {
  url?: Url$Outbound | undefined;
};

/** @internal */
export const EntityEventLinks$outboundSchema: z.ZodType<
  EntityEventLinks$Outbound,
  z.ZodTypeDef,
  EntityEventLinks
> = z.object({
  url: Url$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityEventLinks$ {
  /** @deprecated use `EntityEventLinks$inboundSchema` instead. */
  export const inboundSchema = EntityEventLinks$inboundSchema;
  /** @deprecated use `EntityEventLinks$outboundSchema` instead. */
  export const outboundSchema = EntityEventLinks$outboundSchema;
  /** @deprecated use `EntityEventLinks$Outbound` instead. */
  export type Outbound = EntityEventLinks$Outbound;
}

export function entityEventLinksToJSON(
  entityEventLinks: EntityEventLinks,
): string {
  return JSON.stringify(
    EntityEventLinks$outboundSchema.parse(entityEventLinks),
  );
}

export function entityEventLinksFromJSON(
  jsonString: string,
): SafeParseResult<EntityEventLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityEventLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityEventLinks' from JSON`,
  );
}

/** @internal */
export const EntityEvent$inboundSchema: z.ZodType<
  EntityEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string(),
  type: z.number().int(),
  createdAt: z.string(),
  message: z.string(),
  _links: z.lazy(() => EntityEventLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EntityEvent$Outbound = {
  resource: string;
  type: number;
  createdAt: string;
  message: string;
  _links?: EntityEventLinks$Outbound | undefined;
};

/** @internal */
export const EntityEvent$outboundSchema: z.ZodType<
  EntityEvent$Outbound,
  z.ZodTypeDef,
  EntityEvent
> = z.object({
  resource: z.string(),
  type: z.number().int(),
  createdAt: z.string(),
  message: z.string(),
  links: z.lazy(() => EntityEventLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityEvent$ {
  /** @deprecated use `EntityEvent$inboundSchema` instead. */
  export const inboundSchema = EntityEvent$inboundSchema;
  /** @deprecated use `EntityEvent$outboundSchema` instead. */
  export const outboundSchema = EntityEvent$outboundSchema;
  /** @deprecated use `EntityEvent$Outbound` instead. */
  export type Outbound = EntityEvent$Outbound;
}

export function entityEventToJSON(entityEvent: EntityEvent): string {
  return JSON.stringify(EntityEvent$outboundSchema.parse(entityEvent));
}

export function entityEventFromJSON(
  jsonString: string,
): SafeParseResult<EntityEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityEvent' from JSON`,
  );
}
