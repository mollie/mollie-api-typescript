/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * The current status of the organization's onboarding process.
 */
export const OnboardingStatus = {
  NeedsData: "needs-data",
  InReview: "in-review",
  Completed: "completed",
} as const;
/**
 * The current status of the organization's onboarding process.
 */
export type OnboardingStatus = OpenEnum<typeof OnboardingStatus>;

/** @internal */
export const OnboardingStatus$inboundSchema: z.ZodType<
  OnboardingStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OnboardingStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OnboardingStatus$outboundSchema: z.ZodType<
  OnboardingStatus,
  z.ZodTypeDef,
  OnboardingStatus
> = z.union([
  z.nativeEnum(OnboardingStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingStatus$ {
  /** @deprecated use `OnboardingStatus$inboundSchema` instead. */
  export const inboundSchema = OnboardingStatus$inboundSchema;
  /** @deprecated use `OnboardingStatus$outboundSchema` instead. */
  export const outboundSchema = OnboardingStatus$outboundSchema;
}
