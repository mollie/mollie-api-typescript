/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { salesInvoicesCreate } from "../funcs/salesInvoicesCreate.js";
import { salesInvoicesDelete } from "../funcs/salesInvoicesDelete.js";
import { salesInvoicesGet } from "../funcs/salesInvoicesGet.js";
import { salesInvoicesList } from "../funcs/salesInvoicesList.js";
import { salesInvoicesUpdate } from "../funcs/salesInvoicesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SalesInvoices extends ClientSDK {
  /**
   * Create sales invoice
   *
   * @remarks
   * > ðŸš§ Beta feature
   * >
   * > This feature is currently in beta testing, and the final specification may still change.
   *
   * With the Sales Invoice API you can generate sales invoices to send to your customers.
   */
  async create(
    request?: operations.CreateSalesInvoiceRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateSalesInvoiceResponse> {
    return unwrapAsync(salesInvoicesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List sales invoices
   *
   * @remarks
   * > ðŸš§ Beta feature
   * >
   * > This feature is currently in beta testing, and the final specification may still change.
   *
   * Retrieve a list of all sales invoices created through the API.
   *
   * The results are paginated.
   */
  async list(
    request?: operations.ListSalesInvoicesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListSalesInvoicesResponse> {
    return unwrapAsync(salesInvoicesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get sales invoice
   *
   * @remarks
   * > ðŸš§ Beta feature
   * >
   * > This feature is currently in beta testing, and the final specification may still change.
   *
   * Retrieve a single sales invoice by its ID.
   */
  async get(
    request: operations.GetSalesInvoiceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSalesInvoiceResponse> {
    return unwrapAsync(salesInvoicesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update sales invoice
   *
   * @remarks
   * > ðŸš§ Beta feature
   * >
   * > This feature is currently in beta testing, and the final specification may still change.
   *
   * Certain details of an existing sales invoice can be updated. For `draft` it is all values listed below, but for
   * statuses `paid` and `issued` there are certain additional requirements (`paymentDetails` and `emailDetails`,
   * respectively).
   */
  async update(
    request: operations.UpdateSalesInvoiceRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateSalesInvoiceResponse> {
    return unwrapAsync(salesInvoicesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete sales invoice
   *
   * @remarks
   * > ðŸš§ Beta feature
   * >
   * > This feature is currently in beta testing, and the final specification may still change.
   *
   * Sales invoices which are in status `draft` can be deleted. For all other statuses, please use the
   * [Update sales invoice](update-sales-invoice) endpoint instead.
   */
  async delete(
    request: operations.DeleteSalesInvoiceRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(salesInvoicesDelete(
      this,
      request,
      options,
    ));
  }
}
