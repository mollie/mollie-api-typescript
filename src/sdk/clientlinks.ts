/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientLinksCreate } from "../funcs/clientLinksCreate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ClientLinks extends ClientSDK {
  /**
   * Create client link
   *
   * @remarks
   * Link a new or existing organization to your OAuth application, in effect creating a new client. The response contains a `clientLink` where you should redirect your customer to.
   *
   * The `clientLink` URL behaves similar to the regular OAuth authorization URL. It supports the following parameters from the [Authorize](authorize) endpoint:
   *
   * * `client_id`
   * * `state`
   * * `approval_prompt`
   * * `scope`
   *
   * We recommend at least requesting the scopes `onboarding.read onboarding.write` this way.
   *
   * Error handling is also dealt with similar to the [Authorize](authorize) endpoint: the customer is redirected back to your app's redirect URL with the `error` and `error_description` parameters added to the URL.
   *
   * > ðŸ”‘ Access with
   * >
   * > [Access token with **clients.write**](/reference/authentication)
   */
  async create(
    request?: operations.CreateClientLinkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateClientLinkResponse> {
    return unwrapAsync(clientLinksCreate(
      this,
      request,
      options,
    ));
  }
}
