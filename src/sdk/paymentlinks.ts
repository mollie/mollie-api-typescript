/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentLinksCreate } from "../funcs/paymentLinksCreate.js";
import { paymentLinksDelete } from "../funcs/paymentLinksDelete.js";
import { paymentLinksGet } from "../funcs/paymentLinksGet.js";
import { paymentLinksList } from "../funcs/paymentLinksList.js";
import { paymentLinksListPayments } from "../funcs/paymentLinksListPayments.js";
import { paymentLinksUpdate } from "../funcs/paymentLinksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PaymentLinks extends ClientSDK {
  /**
   * Create payment link
   *
   * @remarks
   * With the Payment links API you can generate payment links that by default, unlike regular payments, do not expire. The payment link can be shared with your customers and will redirect them to them the payment page where they can complete the payment. A [payment](get-payment) will only be created once the customer initiates the payment.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **payment-links.write**](/reference/authentication)
   */
  async create(
    request?: operations.CreatePaymentLinkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreatePaymentLinkResponse> {
    return unwrapAsync(paymentLinksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List payment links
   *
   * @remarks
   * Retrieve a list of all payment links.
   *
   * The results are paginated.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **payment-links.read**](/reference/authentication)
   */
  async list(
    request?: operations.ListPaymentLinksRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListPaymentLinksResponse> {
    return unwrapAsync(paymentLinksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get payment link
   *
   * @remarks
   * Retrieve a single payment link by its ID.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **payment-links.read**](/reference/authentication)
   */
  async get(
    request: operations.GetPaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<operations.GetPaymentLinkResponse> {
    return unwrapAsync(paymentLinksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update payment link
   *
   * @remarks
   * Certain details of an existing payment link can be updated.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **payment-links.write**](/reference/authentication)
   */
  async update(
    request: operations.UpdatePaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdatePaymentLinkResponse> {
    return unwrapAsync(paymentLinksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete payment link
   *
   * @remarks
   * Payment links which have not been opened and no payments have been made yet can be deleted entirely. This can be useful for removing payment links that have been incorrectly configured or that are no longer relevant.
   *
   * Once deleted, the payment link will no longer show up in the API or Mollie dashboard.
   *
   * To simply disable a payment link without fully deleting it, you can use the `archived` parameter on the [Update payment link](update-payment-link) endpoint instead.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **payment-links.write**](/reference/authentication)
   */
  async delete(
    request: operations.DeletePaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(paymentLinksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get payment link payments
   *
   * @remarks
   * Retrieve the list of payments for a specific payment link.
   *
   * The results are paginated.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **payment-links.read**](/reference/authentication)
   */
  async listPayments(
    request: operations.GetPaymentLinkPaymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetPaymentLinkPaymentsResponse> {
    return unwrapAsync(paymentLinksListPayments(
      this,
      request,
      options,
    ));
  }
}
