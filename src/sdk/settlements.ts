/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { settlementsGet } from "../funcs/settlementsGet.js";
import { settlementsGetNext } from "../funcs/settlementsGetNext.js";
import { settlementsGetOpen } from "../funcs/settlementsGetOpen.js";
import { settlementsList } from "../funcs/settlementsList.js";
import { settlementsListCaptures } from "../funcs/settlementsListCaptures.js";
import { settlementsListChargebacks } from "../funcs/settlementsListChargebacks.js";
import { settlementsListPayments } from "../funcs/settlementsListPayments.js";
import { settlementsListRefunds } from "../funcs/settlementsListRefunds.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Settlements extends ClientSDK {
  /**
   * List settlements
   *
   * @remarks
   * Retrieve a list of all your settlements.
   *
   * The results are paginated.
   */
  async list(
    request?: operations.ListSettlementsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListSettlementsResponse> {
    return unwrapAsync(settlementsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get settlement
   *
   * @remarks
   * Retrieve a single settlement by its ID.
   *
   * To lookup settlements by their bank reference, replace the ID in the URL by
   * a reference. For example: `1234567.2404.03`.
   *
   * A settlement represents a transfer of your balance funds to your external bank account.
   *
   * Settlements will typically include a report that details what balance transactions have taken place between this
   * settlement and the previous one.
   *
   * For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
   * [balance transactions](list-balance-transactions) endpoint.
   */
  async get(
    request: operations.GetSettlementRequest,
    options?: RequestOptions,
  ): Promise<models.EntitySettlement> {
    return unwrapAsync(settlementsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get open settlement
   *
   * @remarks
   * Retrieve the details of the open balance of the organization. This will return a settlement object representing your
   * organization's balance.
   *
   * For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
   * documentation.
   *
   * For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
   * [balance transactions](list-balance-transactions) endpoint.
   */
  async getOpen(
    request?: operations.GetOpenSettlementRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.EntitySettlement> {
    return unwrapAsync(settlementsGetOpen(
      this,
      request,
      options,
    ));
  }

  /**
   * Get next settlement
   *
   * @remarks
   * Retrieve the details of the current settlement, that has not yet been paid out.
   *
   * For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
   * documentation.
   *
   * For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
   * [balance transactions](list-balance-transactions) endpoint.
   */
  async getNext(
    request?: operations.GetNextSettlementRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.EntitySettlement> {
    return unwrapAsync(settlementsGetNext(
      this,
      request,
      options,
    ));
  }

  /**
   * List settlement payments
   *
   * @remarks
   * Retrieve all payments included in the given settlement.
   *
   * The response is in the same format as the response of the [List payments endpoint](list-payments).
   *
   * For capture-based payment methods such as Klarna, the payments are not listed here. Refer to the
   * [List captures endpoint](list-captures) endpoint instead.
   */
  async listPayments(
    request: operations.ListSettlementPaymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListSettlementPaymentsResponse> {
    return unwrapAsync(settlementsListPayments(
      this,
      request,
      options,
    ));
  }

  /**
   * List settlement captures
   *
   * @remarks
   * Retrieve all captures included in the given settlement.
   *
   * The response is in the same format as the response of the [List captures endpoint](list-captures).
   */
  async listCaptures(
    request: operations.ListSettlementCapturesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListSettlementCapturesResponse> {
    return unwrapAsync(settlementsListCaptures(
      this,
      request,
      options,
    ));
  }

  /**
   * List settlement refunds
   *
   * @remarks
   * Retrieve all refunds 'deducted' from the given settlement.
   *
   * The response is in the same format as the response of the [List refunds endpoint](list-refunds).
   */
  async listRefunds(
    request: operations.ListSettlementRefundsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListSettlementRefundsResponse> {
    return unwrapAsync(settlementsListRefunds(
      this,
      request,
      options,
    ));
  }

  /**
   * List settlement chargebacks
   *
   * @remarks
   * Retrieve all chargebacks 'deducted' from the given settlement.
   *
   * The response is in the same format as the response of the [List chargebacks endpoint](list-chargebacks).
   */
  async listChargebacks(
    request: operations.ListSettlementChargebacksRequest,
    options?: RequestOptions,
  ): Promise<operations.ListSettlementChargebacksResponse> {
    return unwrapAsync(settlementsListChargebacks(
      this,
      request,
      options,
    ));
  }
}
