/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { capturesCreate } from "../funcs/capturesCreate.js";
import { capturesGet } from "../funcs/capturesGet.js";
import { capturesList } from "../funcs/capturesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Captures extends ClientSDK {
  /**
   * Create capture
   *
   * @remarks
   * Capture an *authorized* payment.
   *
   * Some payment methods allow you to first collect a customer's authorization,
   * and capture the amount at a later point.
   *
   * By default, Mollie captures payments automatically. If however you
   * configured your payment with `captureMode: manual`, you can capture the payment using this endpoint after
   * having collected the customer's authorization.
   */
  async create(
    request: operations.CreateCaptureRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCaptureResponse> {
    return unwrapAsync(capturesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List captures
   *
   * @remarks
   * Retrieve a list of all captures created for a specific payment.
   *
   * The results are paginated.
   */
  async list(
    request: operations.ListCapturesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListCapturesResponse> {
    return unwrapAsync(capturesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get capture
   *
   * @remarks
   * Retrieve a single payment capture by its ID and the ID of its parent
   * payment.
   */
  async get(
    request: operations.GetCaptureRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCaptureResponse> {
    return unwrapAsync(capturesGet(
      this,
      request,
      options,
    ));
  }
}
