/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mandatesCreate } from "../funcs/mandatesCreate.js";
import { mandatesGet } from "../funcs/mandatesGet.js";
import { mandatesList } from "../funcs/mandatesList.js";
import { mandatesRevoke } from "../funcs/mandatesRevoke.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Mandates extends ClientSDK {
  /**
   * Create mandate
   *
   * @remarks
   * Create a mandate for a specific customer. Mandates allow you to charge a customer's card, PayPal account or bank account recurrently.
   *
   * It is only possible to create mandates for IBANs and PayPal billing agreements with this endpoint. To create mandates for cards, your customers need to perform a 'first payment' with their card.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **mandates.write**](/reference/authentication)
   */
  async create(
    request: operations.CreateMandateRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateMandateResponse> {
    return unwrapAsync(mandatesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List mandates
   *
   * @remarks
   * Retrieve a list of all mandates.
   *
   * The results are paginated.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **mandates.read**](/reference/authentication)
   */
  async list(
    request: operations.ListMandatesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListMandatesResponse> {
    return unwrapAsync(mandatesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get mandate
   *
   * @remarks
   * Retrieve a single mandate by its ID. Depending on the type of mandate, the object will contain the customer's bank account details, card details, or PayPal account details.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **mandates.read**](/reference/authentication)
   */
  async get(
    request: operations.GetMandateRequest,
    options?: RequestOptions,
  ): Promise<operations.GetMandateResponse> {
    return unwrapAsync(mandatesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Revoke mandate
   *
   * @remarks
   * Revoke a customer's mandate. You will no longer be able to charge the customer's bank account or card with this mandate, and all connected subscriptions will be canceled.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **mandates.write**](/reference/authentication)
   */
  async revoke(
    request: operations.RevokeMandateRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(mandatesRevoke(
      this,
      request,
      options,
    ));
  }
}
