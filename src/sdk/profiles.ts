/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { profilesCreate } from "../funcs/profilesCreate.js";
import { profilesDelete } from "../funcs/profilesDelete.js";
import { profilesGet } from "../funcs/profilesGet.js";
import { profilesGetCurrent } from "../funcs/profilesGetCurrent.js";
import { profilesList } from "../funcs/profilesList.js";
import { profilesUpdate } from "../funcs/profilesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Profiles extends ClientSDK {
  /**
   * Create profile
   *
   * @remarks
   * Create a profile to process payments on.
   *
   * Profiles are required for payment processing. Normally they are created via the Mollie dashboard. Alternatively, you
   * can use this endpoint to automate profile creation.
   */
  async create(
    request: models.EntityProfile,
    options?: RequestOptions,
  ): Promise<models.EntityProfileResponse> {
    return unwrapAsync(profilesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List profiles
   *
   * @remarks
   * Retrieve a list of all of your profiles.
   *
   * The results are paginated.
   */
  async list(
    request?: operations.ListProfilesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListProfilesResponse> {
    return unwrapAsync(profilesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get profile
   *
   * @remarks
   * Retrieve a single profile by its ID.
   */
  async get(
    request: operations.GetProfileRequest,
    options?: RequestOptions,
  ): Promise<models.EntityProfileResponse> {
    return unwrapAsync(profilesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update profile
   *
   * @remarks
   * Update an existing profile.
   *
   * Profiles are required for payment processing. Normally they are created and updated via the Mollie dashboard.
   * Alternatively, you can use this endpoint to automate profile management.
   */
  async update(
    request: operations.UpdateProfileRequest,
    options?: RequestOptions,
  ): Promise<models.EntityProfileResponse> {
    return unwrapAsync(profilesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete profile
   *
   * @remarks
   * Delete a profile. A deleted profile and its related credentials can no longer be used for accepting payments.
   */
  async delete(
    request: operations.DeleteProfileRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(profilesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get current profile
   *
   * @remarks
   * Retrieve the currently authenticated profile. A convenient alias of the [Get profile](get-profile)
   * endpoint.
   *
   * For a complete reference of the profile object, refer to the [Get profile](get-profile) endpoint
   * documentation.
   */
  async getCurrent(
    options?: RequestOptions,
  ): Promise<models.EntityProfileResponse> {
    return unwrapAsync(profilesGetCurrent(
      this,
      options,
    ));
  }
}
