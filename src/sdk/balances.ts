/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { balancesGet } from "../funcs/balancesGet.js";
import { balancesGetPrimary } from "../funcs/balancesGetPrimary.js";
import { balancesGetReport } from "../funcs/balancesGetReport.js";
import { balancesList } from "../funcs/balancesList.js";
import { balancesListTransactions } from "../funcs/balancesListTransactions.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Balances extends ClientSDK {
  /**
   * List balances
   *
   * @remarks
   * Retrieve a list of the organization's balances, including the primary balance.
   *
   * The results are paginated.
   */
  async list(
    request?: operations.ListBalancesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListBalancesResponse> {
    return unwrapAsync(balancesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get balance
   *
   * @remarks
   * When processing payments with Mollie, we put all pending funds — usually
   * minus Mollie fees — on a balance. Once you have linked a bank account to your Mollie account, we can pay out your
   * balance towards this bank account.
   *
   * With the Balances API you can retrieve your current balance. The response
   * includes two amounts:
   *
   * * The *pending amount*. These are payments that have been marked as `paid`,
   * but are not yet available on your balance.
   * * The *available amount*. This is the amount that you can get paid out to
   * your bank account, or use for refunds.
   *
   * With instant payment methods like iDEAL, payments are moved to the available
   * balance instantly. With slower payment methods, like credit card for example, it can take a few days before the
   * funds are available on your balance. These funds will be shown under the *pending amount* in the meanwhile.
   */
  async get(
    request: operations.GetBalanceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBalanceResponse> {
    return unwrapAsync(balancesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get primary balance
   *
   * @remarks
   * Retrieve the primary balance. This is the balance of your account's primary
   * currency, where all payments are settled to by default.
   *
   * This endpoint is a convenient alias of the [Get balance](get-balance)
   * endpoint.
   */
  async getPrimary(
    options?: RequestOptions,
  ): Promise<operations.GetPrimaryBalanceResponse> {
    return unwrapAsync(balancesGetPrimary(
      this,
      options,
    ));
  }

  /**
   * Get balance report
   *
   * @remarks
   * Retrieve a summarized report for all transactions on a given balance within a given timeframe.
   *
   * The API also provides a detailed report on all 'prepayments' for Mollie fees that were deducted from your balance
   * during the reported period, ahead of your Mollie invoice.
   *
   * The alias `primary` can be used instead of the balance ID to refer to the
   * organization's primary balance.
   */
  async getReport(
    request: operations.GetBalanceReportRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBalanceReportResponse> {
    return unwrapAsync(balancesGetReport(
      this,
      request,
      options,
    ));
  }

  /**
   * List balance transactions
   *
   * @remarks
   * Retrieve a list of all balance transactions. Transactions include for
   * example payments, refunds, chargebacks, and settlements.
   *
   * For an aggregated report of these balance transactions, refer to the [Get
   * balance report](get-balance-report) endpoint.
   *
   * The alias `primary` can be used instead of the balance ID to refer to the
   * organization's primary balance.
   *
   * The results are paginated.
   */
  async listTransactions(
    request: operations.ListBalanceTransactionsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListBalanceTransactionsResponse> {
    return unwrapAsync(balancesListTransactions(
      this,
      request,
      options,
    ));
  }
}
