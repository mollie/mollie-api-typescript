/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { balanceTransfersCreate } from "../funcs/balanceTransfersCreate.js";
import { balanceTransfersGet } from "../funcs/balanceTransfersGet.js";
import { balanceTransfersList } from "../funcs/balanceTransfersList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BalanceTransfers extends ClientSDK {
  /**
   * Create a Connect balance transfer
   *
   * @remarks
   * This API endpoint allows you to create a balance transfer from your organization's balance to a connected organization's balance, or vice versa.
   * You can also create a balance transfer between two connected organizations.
   * To create a balance transfer, you must be authenticated as the source organization, and the destination organization must be a connected organization
   * that has authorized the `balance-transfers.write` scope for your organization.
   */
  async create(
    request?: operations.CreateConnectBalanceTransferRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.EntityBalanceTransferResponse> {
    return unwrapAsync(balanceTransfersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Connect balance transfers
   *
   * @remarks
   * Returns a paginated list of balance transfers associated with your organization. These may be a balance transfer that was received or sent from your balance, or a balance transfer that you initiated on behalf of your clients. If no balance transfers are available, the resulting array will be empty. This request should never throw an error.
   */
  async list(
    request?: operations.ListConnectBalanceTransfersRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListConnectBalanceTransfersResponse> {
    return unwrapAsync(balanceTransfersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Connect balance transfer
   *
   * @remarks
   * Retrieve a single Connect balance transfer object by its ID.
   */
  async get(
    request: operations.GetConnectBalanceTransferRequest,
    options?: RequestOptions,
  ): Promise<models.EntityBalanceTransferResponse> {
    return unwrapAsync(balanceTransfersGet(
      this,
      request,
      options,
    ));
  }
}
