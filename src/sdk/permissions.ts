/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { permissionsGet } from "../funcs/permissionsGet.js";
import { permissionsList } from "../funcs/permissionsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Permissions extends ClientSDK {
  /**
   * List permissions
   *
   * @remarks
   * Retrieve a list of all permissions available to the current access token.
   *
   * The results are **not** paginated.
   */
  async list(
    request?: operations.ListPermissionsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListPermissionsResponse> {
    return unwrapAsync(permissionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get permission
   *
   * @remarks
   * Retrieve a single permission by its ID, and see if the permission is granted to the current access token.
   */
  async get(
    request: operations.GetPermissionRequest,
    options?: RequestOptions,
  ): Promise<models.EntityPermission> {
    return unwrapAsync(permissionsGet(
      this,
      request,
      options,
    ));
  }
}
