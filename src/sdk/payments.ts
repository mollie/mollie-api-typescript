/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentsCancel } from "../funcs/paymentsCancel.js";
import { paymentsCreate } from "../funcs/paymentsCreate.js";
import { paymentsGet } from "../funcs/paymentsGet.js";
import { paymentsList } from "../funcs/paymentsList.js";
import { paymentsReleaseAuthorization } from "../funcs/paymentsReleaseAuthorization.js";
import { paymentsUpdate } from "../funcs/paymentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Payments extends ClientSDK {
  /**
   * Create payment
   *
   * @remarks
   * Payment creation is elemental to the Mollie API: this is where most payment
   * implementations start off.
   *
   * Once you have created a payment, you should redirect your customer to the
   * URL in the `_links.checkout` property from the response.
   *
   * To wrap your head around the payment process, an explanation and flow charts
   * can be found in the 'Accepting payments' guide.
   *
   * If you specify the `method` parameter when creating a payment, optional
   * additional parameters may be available for the payment method that are not listed below. Please refer to the
   * guide on [method-specific parameters](extra-payment-parameters).
   */
  async create(
    request?: operations.CreatePaymentRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreatePaymentResponse> {
    return unwrapAsync(paymentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List payments
   *
   * @remarks
   * Retrieve all payments created with the current website profile.
   *
   * The results are paginated.
   */
  async list(
    request?: operations.ListPaymentsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListPaymentsResponse> {
    return unwrapAsync(paymentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get payment
   *
   * @remarks
   * Retrieve a single payment object by its payment ID.
   */
  async get(
    request: operations.GetPaymentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetPaymentResponse> {
    return unwrapAsync(paymentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update payment
   *
   * @remarks
   * Certain details of an existing payment can be updated.
   *
   * Updating the payment details will not result in a webhook call.
   */
  async update(
    request: operations.UpdatePaymentRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdatePaymentResponse> {
    return unwrapAsync(paymentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel payment
   *
   * @remarks
   * Depending on the payment method, you may be able to cancel a payment for a certain amount of time â€” usually until
   * the next business day or as long as the payment status is open.
   *
   * Payments may also be canceled manually from the Mollie Dashboard.
   *
   * The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be canceled.
   */
  async cancel(
    request: operations.CancelPaymentRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelPaymentResponse> {
    return unwrapAsync(paymentsCancel(
      this,
      request,
      options,
    ));
  }

  /**
   * Release payment authorization
   *
   * @remarks
   * Releases the full remaining authorized amount. Call this endpoint when you will not be making any additional
   * captures. Payment authorizations may also be released manually from the Mollie Dashboard.
   *
   * Mollie will do its best to process release requests, but it is not guaranteed that it will succeed. It is up to
   * the issuing bank if and when the hold will be released.
   *
   * If the request does succeed, the payment status will change to `canceled` for payments without captures.
   * If there is a successful capture, the payment will transition to `paid`.
   */
  async releaseAuthorization(
    request: operations.ReleaseAuthorizationRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(paymentsReleaseAuthorization(
      this,
      request,
      options,
    ));
  }
}
