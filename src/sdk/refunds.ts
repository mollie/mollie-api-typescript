/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { refundsAll } from "../funcs/refundsAll.js";
import { refundsCancel } from "../funcs/refundsCancel.js";
import { refundsCreate } from "../funcs/refundsCreate.js";
import { refundsCreateOrder } from "../funcs/refundsCreateOrder.js";
import { refundsGet } from "../funcs/refundsGet.js";
import { refundsList } from "../funcs/refundsList.js";
import { refundsListForOrder } from "../funcs/refundsListForOrder.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Refunds extends ClientSDK {
  /**
   * Create payment refund
   *
   * @remarks
   * Creates a refund for a specific payment. The refunded amount is credited to your customer usually either via a bank transfer or by refunding the amount to your customer's credit card.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **refunds.write**](/reference/authentication)
   */
  async create(
    request: operations.CreateRefundRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateRefundResponse> {
    return unwrapAsync(refundsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List payment refunds
   *
   * @remarks
   * Retrieve a list of all refunds created for a specific payment.
   *
   * The results are paginated.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **refunds.read**](/reference/authentication)
   */
  async list(
    request: operations.ListRefundsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListRefundsResponse> {
    return unwrapAsync(refundsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get payment refund
   *
   * @remarks
   * Retrieve a single payment refund by its ID and the ID of its parent payment.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **refunds.read**](/reference/authentication)
   */
  async get(
    request: operations.GetRefundRequest,
    options?: RequestOptions,
  ): Promise<operations.GetRefundResponse> {
    return unwrapAsync(refundsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel payment refund
   *
   * @remarks
   * Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled manually via the Mollie Dashboard, or by using this endpoint.
   *
   * A refund can only be canceled while its `status` field is either `queued` or `pending`. See the [Get refund endpoint](get-refund) for more information.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **refunds.write**](/reference/authentication)
   */
  async cancel(
    request: operations.CancelRefundRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(refundsCancel(
      this,
      request,
      options,
    ));
  }

  /**
   * Create order refund
   *
   * @remarks
   * When using the Orders API, refunds should be made for a specific order.
   *
   * If you want to refund arbitrary amounts, however, you can also use the [Create payment refund endpoint](create-refund) by creating a refund on the payment itself.
   *
   * If an order line is still in the `authorized` state, it cannot be refunded. You should cancel it instead. Order lines that are `paid`, `shipping` or `completed` can be refunded.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **refunds.write**](/reference/authentication)
   */
  async createOrder(
    request: operations.CreateOrderRefundRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateOrderRefundResponse> {
    return unwrapAsync(refundsCreateOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * List order refunds
   *
   * @remarks
   * Retrieve a list of all refunds created for a specific order.
   *
   * The results are paginated.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **refunds.read**](/reference/authentication)
   */
  async listForOrder(
    request: operations.ListOrderRefundsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListOrderRefundsResponse> {
    return unwrapAsync(refundsListForOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * List all refunds
   *
   * @remarks
   * Retrieve a list of all of your refunds.
   *
   * The results are paginated.
   *
   * > ðŸ”‘ Access with
   * >
   * > [API key](/reference/authentication)
   * >
   * > [Access token with **refunds.read**](/reference/authentication)
   */
  async all(
    request?: operations.ListAllRefundsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListAllRefundsResponse> {
    return unwrapAsync(refundsAll(
      this,
      request,
      options,
    ));
  }
}
