/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { refundsAll } from "../funcs/refundsAll.js";
import { refundsCancel } from "../funcs/refundsCancel.js";
import { refundsCreate } from "../funcs/refundsCreate.js";
import { refundsGet } from "../funcs/refundsGet.js";
import { refundsList } from "../funcs/refundsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Refunds extends ClientSDK {
  /**
   * Create payment refund
   *
   * @remarks
   * Creates a refund for a specific payment. The refunded amount is credited to your customer usually either via a bank
   * transfer or by refunding the amount to your customer's credit card.
   */
  async create(
    request: operations.CreateRefundRequest,
    options?: RequestOptions,
  ): Promise<models.EntityRefundResponse> {
    return unwrapAsync(refundsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List payment refunds
   *
   * @remarks
   * Retrieve a list of all refunds created for a specific payment.
   *
   * The results are paginated.
   */
  async list(
    request: operations.ListRefundsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListRefundsResponse> {
    return unwrapAsync(refundsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get payment refund
   *
   * @remarks
   * Retrieve a single payment refund by its ID and the ID of its parent payment.
   */
  async get(
    request: operations.GetRefundRequest,
    options?: RequestOptions,
  ): Promise<models.EntityRefundResponse> {
    return unwrapAsync(refundsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel payment refund
   *
   * @remarks
   * Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled manually via the
   * Mollie Dashboard, or by using this endpoint.
   *
   * A refund can only be canceled while its `status` field is either `queued` or `pending`. See the
   * [Get refund endpoint](get-refund) for more information.
   */
  async cancel(
    request: operations.CancelRefundRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(refundsCancel(
      this,
      request,
      options,
    ));
  }

  /**
   * List all refunds
   *
   * @remarks
   * Retrieve a list of all of your refunds.
   *
   * The results are paginated.
   */
  async all(
    request?: operations.ListAllRefundsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListAllRefundsResponse> {
    return unwrapAsync(refundsAll(
      this,
      request,
      options,
    ));
  }
}
